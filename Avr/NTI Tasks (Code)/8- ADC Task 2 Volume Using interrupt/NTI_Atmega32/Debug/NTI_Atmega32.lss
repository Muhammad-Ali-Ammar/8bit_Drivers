
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  000031f0  00003284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008000dc  008000dc  00003300  2**0
                  ALLOC
  3 .stab         000071b8  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000044a3  00000000  00000000  0000a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000e95b  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000e96c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0000e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0000ee8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000f331  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000f34b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_1>
       8:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_2>
       c:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3f       	cpi	r26, 0xF5	; 245
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <main>
      8a:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Convert_IntToString>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	6a 83       	std	Y+2, r22	; 0x02
      a8:	7b 83       	std	Y+3, r23	; 0x03
      aa:	8c 83       	std	Y+4, r24	; 0x04
      ac:	9d 83       	std	Y+5, r25	; 0x05
      ae:	5f 83       	std	Y+7, r21	; 0x07
      b0:	4e 83       	std	Y+6, r20	; 0x06
      b2:	19 82       	std	Y+1, r1	; 0x01
      b4:	8e 81       	ldd	r24, Y+6	; 0x06
      b6:	9f 81       	ldd	r25, Y+7	; 0x07
      b8:	89 2b       	or	r24, r25
      ba:	19 f4       	brne	.+6      	; 0xc2 <Convert_IntToString+0x30>
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	1d c0       	rjmp	.+58     	; 0xfc <Convert_IntToString+0x6a>
      c2:	8d 81       	ldd	r24, Y+5	; 0x05
      c4:	8f 93       	push	r24
      c6:	8c 81       	ldd	r24, Y+4	; 0x04
      c8:	8f 93       	push	r24
      ca:	8b 81       	ldd	r24, Y+3	; 0x03
      cc:	8f 93       	push	r24
      ce:	8a 81       	ldd	r24, Y+2	; 0x02
      d0:	8f 93       	push	r24
      d2:	8d eb       	ldi	r24, 0xBD	; 189
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	89 2f       	mov	r24, r25
      d8:	8f 93       	push	r24
      da:	8d eb       	ldi	r24, 0xBD	; 189
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	8f 93       	push	r24
      e0:	8f 81       	ldd	r24, Y+7	; 0x07
      e2:	8f 93       	push	r24
      e4:	8e 81       	ldd	r24, Y+6	; 0x06
      e6:	8f 93       	push	r24
      e8:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <sprintf>
      ec:	8d b7       	in	r24, 0x3d	; 61
      ee:	9e b7       	in	r25, 0x3e	; 62
      f0:	08 96       	adiw	r24, 0x08	; 8
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	f8 94       	cli
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	27 96       	adiw	r28, 0x07	; 7
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f32 Copy_f32Number, pu8 Address_str){
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	27 97       	sbiw	r28, 0x07	; 7
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	6a 83       	std	Y+2, r22	; 0x02
     126:	7b 83       	std	Y+3, r23	; 0x03
     128:	8c 83       	std	Y+4, r24	; 0x04
     12a:	9d 83       	std	Y+5, r25	; 0x05
     12c:	5f 83       	std	Y+7, r21	; 0x07
     12e:	4e 83       	std	Y+6, r20	; 0x06


	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     130:	19 82       	std	Y+1, r1	; 0x01
		if(NULL == Address_str){
     132:	8e 81       	ldd	r24, Y+6	; 0x06
     134:	9f 81       	ldd	r25, Y+7	; 0x07
     136:	89 2b       	or	r24, r25
     138:	19 f4       	brne	.+6      	; 0x140 <Convert_FloatToString+0x30>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	89 83       	std	Y+1, r24	; 0x01
     13e:	1d c0       	rjmp	.+58     	; 0x17a <Convert_FloatToString+0x6a>
		}

		else{

			sprintf(Address_str, "%f", Copy_f32Number);
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	8f 93       	push	r24
     144:	8c 81       	ldd	r24, Y+4	; 0x04
     146:	8f 93       	push	r24
     148:	8b 81       	ldd	r24, Y+3	; 0x03
     14a:	8f 93       	push	r24
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	8f 93       	push	r24
     150:	81 ec       	ldi	r24, 0xC1	; 193
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	89 2f       	mov	r24, r25
     156:	8f 93       	push	r24
     158:	81 ec       	ldi	r24, 0xC1	; 193
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	8f 93       	push	r24
     15e:	8f 81       	ldd	r24, Y+7	; 0x07
     160:	8f 93       	push	r24
     162:	8e 81       	ldd	r24, Y+6	; 0x06
     164:	8f 93       	push	r24
     166:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <sprintf>
     16a:	8d b7       	in	r24, 0x3d	; 61
     16c:	9e b7       	in	r25, 0x3e	; 62
     16e:	08 96       	adiw	r24, 0x08	; 8
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
		}

		return Loc_enuStatus;
     17a:	89 81       	ldd	r24, Y+1	; 0x01


}
     17c:	27 96       	adiw	r28, 0x07	; 7
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	de bf       	out	0x3e, r29	; 62
     184:	0f be       	out	0x3f, r0	; 63
     186:	cd bf       	out	0x3d, r28	; 61
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <Convert_StringToInt>:


Std_StatusType Convert_StringToInt (u64* Address_Number, pu8 Address_str){
     18e:	2f 92       	push	r2
     190:	3f 92       	push	r3
     192:	4f 92       	push	r4
     194:	5f 92       	push	r5
     196:	6f 92       	push	r6
     198:	7f 92       	push	r7
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	6e 97       	sbiw	r28, 0x1e	; 30
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	9c 87       	std	Y+12, r25	; 0x0c
     1c4:	8b 87       	std	Y+11, r24	; 0x0b
     1c6:	7e 87       	std	Y+14, r23	; 0x0e
     1c8:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     1ca:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     1cc:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     1ce:	1b 82       	std	Y+3, r1	; 0x03
     1d0:	1c 82       	std	Y+4, r1	; 0x04
     1d2:	1d 82       	std	Y+5, r1	; 0x05
     1d4:	1e 82       	std	Y+6, r1	; 0x06
     1d6:	1f 82       	std	Y+7, r1	; 0x07
     1d8:	18 86       	std	Y+8, r1	; 0x08
     1da:	19 86       	std	Y+9, r1	; 0x09
     1dc:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     1de:	8d 85       	ldd	r24, Y+13	; 0x0d
     1e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     1e2:	89 2b       	or	r24, r25
     1e4:	21 f0       	breq	.+8      	; 0x1ee <Convert_StringToInt+0x60>
     1e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ea:	89 2b       	or	r24, r25
     1ec:	19 f4       	brne	.+6      	; 0x1f4 <Convert_StringToInt+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	b4 c0       	rjmp	.+360    	; 0x35c <Convert_StringToInt+0x1ce>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     1f4:	1a 82       	std	Y+2, r1	; 0x02
     1f6:	8c c0       	rjmp	.+280    	; 0x310 <Convert_StringToInt+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     1f8:	2b 81       	ldd	r18, Y+3	; 0x03
     1fa:	3c 81       	ldd	r19, Y+4	; 0x04
     1fc:	4d 81       	ldd	r20, Y+5	; 0x05
     1fe:	5e 81       	ldd	r21, Y+6	; 0x06
     200:	6f 81       	ldd	r22, Y+7	; 0x07
     202:	78 85       	ldd	r23, Y+8	; 0x08
     204:	89 85       	ldd	r24, Y+9	; 0x09
     206:	9a 85       	ldd	r25, Y+10	; 0x0a
     208:	22 2e       	mov	r2, r18
     20a:	33 2e       	mov	r3, r19
     20c:	44 2e       	mov	r4, r20
     20e:	55 2e       	mov	r5, r21
     210:	66 2e       	mov	r6, r22
     212:	77 2e       	mov	r7, r23
     214:	88 2e       	mov	r8, r24
     216:	99 2e       	mov	r9, r25
     218:	22 2d       	mov	r18, r2
     21a:	33 2d       	mov	r19, r3
     21c:	44 2d       	mov	r20, r4
     21e:	55 2d       	mov	r21, r5
     220:	66 2d       	mov	r22, r6
     222:	77 2d       	mov	r23, r7
     224:	88 2d       	mov	r24, r8
     226:	99 2d       	mov	r25, r9
     228:	01 e0       	ldi	r16, 0x01	; 1
     22a:	0e 94 20 14 	call	0x2840	; 0x2840 <__ashldi3>
     22e:	a2 2e       	mov	r10, r18
     230:	b3 2e       	mov	r11, r19
     232:	c4 2e       	mov	r12, r20
     234:	d5 2e       	mov	r13, r21
     236:	e6 2e       	mov	r14, r22
     238:	f7 2e       	mov	r15, r23
     23a:	08 2f       	mov	r16, r24
     23c:	19 2f       	mov	r17, r25
     23e:	2a 2c       	mov	r2, r10
     240:	3b 2c       	mov	r3, r11
     242:	4c 2c       	mov	r4, r12
     244:	5d 2c       	mov	r5, r13
     246:	6e 2c       	mov	r6, r14
     248:	7f 2c       	mov	r7, r15
     24a:	80 2e       	mov	r8, r16
     24c:	91 2e       	mov	r9, r17
     24e:	22 2d       	mov	r18, r2
     250:	33 2d       	mov	r19, r3
     252:	44 2d       	mov	r20, r4
     254:	55 2d       	mov	r21, r5
     256:	66 2d       	mov	r22, r6
     258:	77 2d       	mov	r23, r7
     25a:	88 2d       	mov	r24, r8
     25c:	99 2d       	mov	r25, r9
     25e:	02 e0       	ldi	r16, 0x02	; 2
     260:	0e 94 20 14 	call	0x2840	; 0x2840 <__ashldi3>
     264:	2f 8b       	std	Y+23, r18	; 0x17
     266:	38 8f       	std	Y+24, r19	; 0x18
     268:	49 8f       	std	Y+25, r20	; 0x19
     26a:	5a 8f       	std	Y+26, r21	; 0x1a
     26c:	6b 8f       	std	Y+27, r22	; 0x1b
     26e:	7c 8f       	std	Y+28, r23	; 0x1c
     270:	8d 8f       	std	Y+29, r24	; 0x1d
     272:	9e 8f       	std	Y+30, r25	; 0x1e
     274:	22 2d       	mov	r18, r2
     276:	33 2d       	mov	r19, r3
     278:	44 2d       	mov	r20, r4
     27a:	55 2d       	mov	r21, r5
     27c:	66 2d       	mov	r22, r6
     27e:	77 2d       	mov	r23, r7
     280:	88 2d       	mov	r24, r8
     282:	99 2d       	mov	r25, r9
     284:	af 88       	ldd	r10, Y+23	; 0x17
     286:	b8 8c       	ldd	r11, Y+24	; 0x18
     288:	c9 8c       	ldd	r12, Y+25	; 0x19
     28a:	da 8c       	ldd	r13, Y+26	; 0x1a
     28c:	eb 8c       	ldd	r14, Y+27	; 0x1b
     28e:	fc 8c       	ldd	r15, Y+28	; 0x1c
     290:	0d 8d       	ldd	r16, Y+29	; 0x1d
     292:	1e 8d       	ldd	r17, Y+30	; 0x1e
     294:	0e 94 39 14 	call	0x2872	; 0x2872 <__adddi3>
     298:	a2 2e       	mov	r10, r18
     29a:	b3 2e       	mov	r11, r19
     29c:	c4 2e       	mov	r12, r20
     29e:	d5 2e       	mov	r13, r21
     2a0:	e6 2e       	mov	r14, r22
     2a2:	f7 2e       	mov	r15, r23
     2a4:	08 2f       	mov	r16, r24
     2a6:	19 2f       	mov	r17, r25
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	88 2f       	mov	r24, r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	2d 85       	ldd	r18, Y+13	; 0x0d
     2b0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2b2:	82 0f       	add	r24, r18
     2b4:	93 1f       	adc	r25, r19
     2b6:	fc 01       	movw	r30, r24
     2b8:	80 81       	ld	r24, Z
     2ba:	88 2f       	mov	r24, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	c0 97       	sbiw	r24, 0x30	; 48
     2c0:	98 8b       	std	Y+16, r25	; 0x10
     2c2:	8f 87       	std	Y+15, r24	; 0x0f
     2c4:	89 2f       	mov	r24, r25
     2c6:	88 0f       	add	r24, r24
     2c8:	88 0b       	sbc	r24, r24
     2ca:	89 8b       	std	Y+17, r24	; 0x11
     2cc:	8a 8b       	std	Y+18, r24	; 0x12
     2ce:	8b 8b       	std	Y+19, r24	; 0x13
     2d0:	8c 8b       	std	Y+20, r24	; 0x14
     2d2:	8d 8b       	std	Y+21, r24	; 0x15
     2d4:	8e 8b       	std	Y+22, r24	; 0x16
     2d6:	2a 2d       	mov	r18, r10
     2d8:	3b 2d       	mov	r19, r11
     2da:	4c 2d       	mov	r20, r12
     2dc:	5d 2d       	mov	r21, r13
     2de:	6e 2d       	mov	r22, r14
     2e0:	7f 2d       	mov	r23, r15
     2e2:	80 2f       	mov	r24, r16
     2e4:	91 2f       	mov	r25, r17
     2e6:	af 84       	ldd	r10, Y+15	; 0x0f
     2e8:	b8 88       	ldd	r11, Y+16	; 0x10
     2ea:	c9 88       	ldd	r12, Y+17	; 0x11
     2ec:	da 88       	ldd	r13, Y+18	; 0x12
     2ee:	eb 88       	ldd	r14, Y+19	; 0x13
     2f0:	fc 88       	ldd	r15, Y+20	; 0x14
     2f2:	0d 89       	ldd	r16, Y+21	; 0x15
     2f4:	1e 89       	ldd	r17, Y+22	; 0x16
     2f6:	0e 94 39 14 	call	0x2872	; 0x2872 <__adddi3>
     2fa:	2b 83       	std	Y+3, r18	; 0x03
     2fc:	3c 83       	std	Y+4, r19	; 0x04
     2fe:	4d 83       	std	Y+5, r20	; 0x05
     300:	5e 83       	std	Y+6, r21	; 0x06
     302:	6f 83       	std	Y+7, r22	; 0x07
     304:	78 87       	std	Y+8, r23	; 0x08
     306:	89 87       	std	Y+9, r24	; 0x09
     308:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     30a:	8a 81       	ldd	r24, Y+2	; 0x02
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	2d 85       	ldd	r18, Y+13	; 0x0d
     318:	3e 85       	ldd	r19, Y+14	; 0x0e
     31a:	82 0f       	add	r24, r18
     31c:	93 1f       	adc	r25, r19
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	88 23       	and	r24, r24
     324:	09 f0       	breq	.+2      	; 0x328 <Convert_StringToInt+0x19a>
     326:	68 cf       	rjmp	.-304    	; 0x1f8 <Convert_StringToInt+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     328:	8b 85       	ldd	r24, Y+11	; 0x0b
     32a:	9c 85       	ldd	r25, Y+12	; 0x0c
     32c:	2b 81       	ldd	r18, Y+3	; 0x03
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
     332:	2c 81       	ldd	r18, Y+4	; 0x04
     334:	fc 01       	movw	r30, r24
     336:	21 83       	std	Z+1, r18	; 0x01
     338:	2d 81       	ldd	r18, Y+5	; 0x05
     33a:	fc 01       	movw	r30, r24
     33c:	22 83       	std	Z+2, r18	; 0x02
     33e:	2e 81       	ldd	r18, Y+6	; 0x06
     340:	fc 01       	movw	r30, r24
     342:	23 83       	std	Z+3, r18	; 0x03
     344:	2f 81       	ldd	r18, Y+7	; 0x07
     346:	fc 01       	movw	r30, r24
     348:	24 83       	std	Z+4, r18	; 0x04
     34a:	28 85       	ldd	r18, Y+8	; 0x08
     34c:	fc 01       	movw	r30, r24
     34e:	25 83       	std	Z+5, r18	; 0x05
     350:	29 85       	ldd	r18, Y+9	; 0x09
     352:	fc 01       	movw	r30, r24
     354:	26 83       	std	Z+6, r18	; 0x06
     356:	2a 85       	ldd	r18, Y+10	; 0x0a
     358:	fc 01       	movw	r30, r24
     35a:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     35c:	89 81       	ldd	r24, Y+1	; 0x01

}
     35e:	6e 96       	adiw	r28, 0x1e	; 30
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	df 90       	pop	r13
     378:	cf 90       	pop	r12
     37a:	bf 90       	pop	r11
     37c:	af 90       	pop	r10
     37e:	9f 90       	pop	r9
     380:	8f 90       	pop	r8
     382:	7f 90       	pop	r7
     384:	6f 90       	pop	r6
     386:	5f 90       	pop	r5
     388:	4f 90       	pop	r4
     38a:	3f 90       	pop	r3
     38c:	2f 90       	pop	r2
     38e:	08 95       	ret

00000390 <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     398:	8a e3       	ldi	r24, 0x3A	; 58
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2c e7       	ldi	r18, 0x7C	; 124
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     3a2:	87 e3       	ldi	r24, 0x37	; 55
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	27 ef       	ldi	r18, 0xF7	; 247
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     3ac:	84 e3       	ldi	r24, 0x34	; 52
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	2f ef       	ldi	r18, 0xFF	; 255
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     3b6:	81 e3       	ldi	r24, 0x31	; 49
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	20 e1       	ldi	r18, 0x10	; 16
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     3c0:	8b e3       	ldi	r24, 0x3B	; 59
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	fc 01       	movw	r30, r24
     3c6:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     3c8:	88 e3       	ldi	r24, 0x38	; 56
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	20 ec       	ldi	r18, 0xC0	; 192
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     3d2:	85 e3       	ldi	r24, 0x35	; 53
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	fc 01       	movw	r30, r24
     3d8:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     3da:	82 e3       	ldi	r24, 0x32	; 50
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	2c ee       	ldi	r18, 0xEC	; 236
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
     3e4:	00 00       	nop
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <Port_enuSetPinDirection+0x6>
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <Port_enuSetPinDirection+0x8>
     3f4:	1f 92       	push	r1
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	8c 83       	std	Y+4, r24	; 0x04
     3fc:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     3fe:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     400:	8c 81       	ldd	r24, Y+4	; 0x04
     402:	87 70       	andi	r24, 0x07	; 7
     404:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     406:	8c 81       	ldd	r24, Y+4	; 0x04
     408:	86 95       	lsr	r24
     40a:	86 95       	lsr	r24
     40c:	86 95       	lsr	r24
     40e:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     410:	8c 81       	ldd	r24, Y+4	; 0x04
     412:	80 32       	cpi	r24, 0x20	; 32
     414:	18 f0       	brcs	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	89 83       	std	Y+1, r24	; 0x01
     41a:	59 c0       	rjmp	.+178    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
     41c:	8d 81       	ldd	r24, Y+5	; 0x05
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	18 f0       	brcs	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	89 83       	std	Y+1, r24	; 0x01
     426:	53 c0       	rjmp	.+166    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		}

	else{

			switch(Copy_u8PinDirection){
     428:	8d 81       	ldd	r24, Y+5	; 0x05
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	41 f1       	breq	.+80     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	09 f0       	breq	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
							break;

			default:

				// impossible
					break;
     436:	4b c0       	rjmp	.+150    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	88 2f       	mov	r24, r24
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	80 5a       	subi	r24, 0xA0	; 160
     444:	9f 4f       	sbci	r25, 0xFF	; 255
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	2b 81       	ldd	r18, Y+3	; 0x03
     44e:	22 2f       	mov	r18, r18
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	22 0f       	add	r18, r18
     454:	33 1f       	adc	r19, r19
     456:	20 5a       	subi	r18, 0xA0	; 160
     458:	3f 4f       	sbci	r19, 0xFF	; 255
     45a:	f9 01       	movw	r30, r18
     45c:	20 81       	ld	r18, Z
     45e:	31 81       	ldd	r19, Z+1	; 0x01
     460:	f9 01       	movw	r30, r18
     462:	20 81       	ld	r18, Z
     464:	62 2f       	mov	r22, r18
     466:	2a 81       	ldd	r18, Y+2	; 0x02
     468:	42 2f       	mov	r20, r18
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	21 e0       	ldi	r18, 0x01	; 1
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     472:	22 0f       	add	r18, r18
     474:	33 1f       	adc	r19, r19
     476:	4a 95       	dec	r20
     478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     47a:	26 2b       	or	r18, r22
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
					break;
     480:	26 c0       	rjmp	.+76     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	88 2f       	mov	r24, r24
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	80 5a       	subi	r24, 0xA0	; 160
     48e:	9f 4f       	sbci	r25, 0xFF	; 255
     490:	fc 01       	movw	r30, r24
     492:	80 81       	ld	r24, Z
     494:	91 81       	ldd	r25, Z+1	; 0x01
     496:	2b 81       	ldd	r18, Y+3	; 0x03
     498:	22 2f       	mov	r18, r18
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	22 0f       	add	r18, r18
     49e:	33 1f       	adc	r19, r19
     4a0:	20 5a       	subi	r18, 0xA0	; 160
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	f9 01       	movw	r30, r18
     4a6:	20 81       	ld	r18, Z
     4a8:	31 81       	ldd	r19, Z+1	; 0x01
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	62 2f       	mov	r22, r18
     4b0:	2a 81       	ldd	r18, Y+2	; 0x02
     4b2:	42 2f       	mov	r20, r18
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	4a 95       	dec	r20
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4c4:	20 95       	com	r18
     4c6:	26 23       	and	r18, r22
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
							break;
     4cc:	00 00       	nop

	}



	return Loc_enuState;
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <Port_enuSetPinMode+0x6>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <Port_enuSetPinMode+0x8>
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	8c 83       	std	Y+4, r24	; 0x04
     4f0:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     4f2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     4f4:	8c 81       	ldd	r24, Y+4	; 0x04
     4f6:	87 70       	andi	r24, 0x07	; 7
     4f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	86 95       	lsr	r24
     4fe:	86 95       	lsr	r24
     500:	86 95       	lsr	r24
     502:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     504:	8c 81       	ldd	r24, Y+4	; 0x04
     506:	80 32       	cpi	r24, 0x20	; 32
     508:	18 f0       	brcs	.+6      	; 0x510 <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	89 83       	std	Y+1, r24	; 0x01
     50e:	43 c1       	rjmp	.+646    	; 0x796 <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
     510:	8d 81       	ldd	r24, Y+5	; 0x05
     512:	84 30       	cpi	r24, 0x04	; 4
     514:	18 f0       	brcs	.+6      	; 0x51c <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	3d c1       	rjmp	.+634    	; 0x796 <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
     51c:	8d 81       	ldd	r24, Y+5	; 0x05
     51e:	88 2f       	mov	r24, r24
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	91 05       	cpc	r25, r1
     526:	09 f4       	brne	.+2      	; 0x52a <Port_enuSetPinMode+0x4a>
     528:	57 c0       	rjmp	.+174    	; 0x5d8 <Port_enuSetPinMode+0xf8>
     52a:	82 30       	cpi	r24, 0x02	; 2
     52c:	91 05       	cpc	r25, r1
     52e:	1c f4       	brge	.+6      	; 0x536 <Port_enuSetPinMode+0x56>
     530:	89 2b       	or	r24, r25
     532:	49 f0       	breq	.+18     	; 0x546 <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
     534:	30 c1       	rjmp	.+608    	; 0x796 <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
     536:	82 30       	cpi	r24, 0x02	; 2
     538:	91 05       	cpc	r25, r1
     53a:	09 f4       	brne	.+2      	; 0x53e <Port_enuSetPinMode+0x5e>
     53c:	97 c0       	rjmp	.+302    	; 0x66c <Port_enuSetPinMode+0x18c>
     53e:	03 97       	sbiw	r24, 0x03	; 3
     540:	09 f4       	brne	.+2      	; 0x544 <Port_enuSetPinMode+0x64>
     542:	df c0       	rjmp	.+446    	; 0x702 <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
     544:	28 c1       	rjmp	.+592    	; 0x796 <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	80 5a       	subi	r24, 0xA0	; 160
     552:	9f 4f       	sbci	r25, 0xFF	; 255
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	91 81       	ldd	r25, Z+1	; 0x01
     55a:	2b 81       	ldd	r18, Y+3	; 0x03
     55c:	22 2f       	mov	r18, r18
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	22 0f       	add	r18, r18
     562:	33 1f       	adc	r19, r19
     564:	20 5a       	subi	r18, 0xA0	; 160
     566:	3f 4f       	sbci	r19, 0xFF	; 255
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	31 81       	ldd	r19, Z+1	; 0x01
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	62 2f       	mov	r22, r18
     574:	2a 81       	ldd	r18, Y+2	; 0x02
     576:	42 2f       	mov	r20, r18
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <Port_enuSetPinMode+0xa4>
     580:	22 0f       	add	r18, r18
     582:	33 1f       	adc	r19, r19
     584:	4a 95       	dec	r20
     586:	e2 f7       	brpl	.-8      	; 0x580 <Port_enuSetPinMode+0xa0>
     588:	26 2b       	or	r18, r22
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	88 2f       	mov	r24, r24
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	88 59       	subi	r24, 0x98	; 152
     59a:	9f 4f       	sbci	r25, 0xFF	; 255
     59c:	fc 01       	movw	r30, r24
     59e:	80 81       	ld	r24, Z
     5a0:	91 81       	ldd	r25, Z+1	; 0x01
     5a2:	2b 81       	ldd	r18, Y+3	; 0x03
     5a4:	22 2f       	mov	r18, r18
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	28 59       	subi	r18, 0x98	; 152
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	31 81       	ldd	r19, Z+1	; 0x01
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	62 2f       	mov	r22, r18
     5bc:	2a 81       	ldd	r18, Y+2	; 0x02
     5be:	42 2f       	mov	r20, r18
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <Port_enuSetPinMode+0xec>
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	4a 95       	dec	r20
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <Port_enuSetPinMode+0xe8>
     5d0:	26 2b       	or	r18, r22
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
					break;
     5d6:	df c0       	rjmp	.+446    	; 0x796 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     5d8:	8b 81       	ldd	r24, Y+3	; 0x03
     5da:	88 2f       	mov	r24, r24
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	80 5a       	subi	r24, 0xA0	; 160
     5e4:	9f 4f       	sbci	r25, 0xFF	; 255
     5e6:	fc 01       	movw	r30, r24
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	2b 81       	ldd	r18, Y+3	; 0x03
     5ee:	22 2f       	mov	r18, r18
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	22 0f       	add	r18, r18
     5f4:	33 1f       	adc	r19, r19
     5f6:	20 5a       	subi	r18, 0xA0	; 160
     5f8:	3f 4f       	sbci	r19, 0xFF	; 255
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	31 81       	ldd	r19, Z+1	; 0x01
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	62 2f       	mov	r22, r18
     606:	2a 81       	ldd	r18, Y+2	; 0x02
     608:	42 2f       	mov	r20, r18
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	02 c0       	rjmp	.+4      	; 0x616 <Port_enuSetPinMode+0x136>
     612:	22 0f       	add	r18, r18
     614:	33 1f       	adc	r19, r19
     616:	4a 95       	dec	r20
     618:	e2 f7       	brpl	.-8      	; 0x612 <Port_enuSetPinMode+0x132>
     61a:	26 2b       	or	r18, r22
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	88 59       	subi	r24, 0x98	; 152
     62c:	9f 4f       	sbci	r25, 0xFF	; 255
     62e:	fc 01       	movw	r30, r24
     630:	80 81       	ld	r24, Z
     632:	91 81       	ldd	r25, Z+1	; 0x01
     634:	2b 81       	ldd	r18, Y+3	; 0x03
     636:	22 2f       	mov	r18, r18
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	28 59       	subi	r18, 0x98	; 152
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	f9 01       	movw	r30, r18
     644:	20 81       	ld	r18, Z
     646:	31 81       	ldd	r19, Z+1	; 0x01
     648:	f9 01       	movw	r30, r18
     64a:	20 81       	ld	r18, Z
     64c:	62 2f       	mov	r22, r18
     64e:	2a 81       	ldd	r18, Y+2	; 0x02
     650:	42 2f       	mov	r20, r18
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	02 c0       	rjmp	.+4      	; 0x65e <Port_enuSetPinMode+0x17e>
     65a:	22 0f       	add	r18, r18
     65c:	33 1f       	adc	r19, r19
     65e:	4a 95       	dec	r20
     660:	e2 f7       	brpl	.-8      	; 0x65a <Port_enuSetPinMode+0x17a>
     662:	20 95       	com	r18
     664:	26 23       	and	r18, r22
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
							break;
     66a:	95 c0       	rjmp	.+298    	; 0x796 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	80 5a       	subi	r24, 0xA0	; 160
     678:	9f 4f       	sbci	r25, 0xFF	; 255
     67a:	fc 01       	movw	r30, r24
     67c:	80 81       	ld	r24, Z
     67e:	91 81       	ldd	r25, Z+1	; 0x01
     680:	2b 81       	ldd	r18, Y+3	; 0x03
     682:	22 2f       	mov	r18, r18
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	22 0f       	add	r18, r18
     688:	33 1f       	adc	r19, r19
     68a:	20 5a       	subi	r18, 0xA0	; 160
     68c:	3f 4f       	sbci	r19, 0xFF	; 255
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	31 81       	ldd	r19, Z+1	; 0x01
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	62 2f       	mov	r22, r18
     69a:	2a 81       	ldd	r18, Y+2	; 0x02
     69c:	42 2f       	mov	r20, r18
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	21 e0       	ldi	r18, 0x01	; 1
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <Port_enuSetPinMode+0x1ca>
     6a6:	22 0f       	add	r18, r18
     6a8:	33 1f       	adc	r19, r19
     6aa:	4a 95       	dec	r20
     6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <Port_enuSetPinMode+0x1c6>
     6ae:	20 95       	com	r18
     6b0:	26 23       	and	r18, r22
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	88 59       	subi	r24, 0x98	; 152
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	fc 01       	movw	r30, r24
     6c6:	80 81       	ld	r24, Z
     6c8:	91 81       	ldd	r25, Z+1	; 0x01
     6ca:	2b 81       	ldd	r18, Y+3	; 0x03
     6cc:	22 2f       	mov	r18, r18
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	22 0f       	add	r18, r18
     6d2:	33 1f       	adc	r19, r19
     6d4:	28 59       	subi	r18, 0x98	; 152
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	f9 01       	movw	r30, r18
     6da:	20 81       	ld	r18, Z
     6dc:	31 81       	ldd	r19, Z+1	; 0x01
     6de:	f9 01       	movw	r30, r18
     6e0:	20 81       	ld	r18, Z
     6e2:	62 2f       	mov	r22, r18
     6e4:	2a 81       	ldd	r18, Y+2	; 0x02
     6e6:	42 2f       	mov	r20, r18
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	21 e0       	ldi	r18, 0x01	; 1
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <Port_enuSetPinMode+0x214>
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	4a 95       	dec	r20
     6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <Port_enuSetPinMode+0x210>
     6f8:	20 95       	com	r18
     6fa:	26 23       	and	r18, r22
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
								break;
     700:	4a c0       	rjmp	.+148    	; 0x796 <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	88 2f       	mov	r24, r24
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	80 5a       	subi	r24, 0xA0	; 160
     70e:	9f 4f       	sbci	r25, 0xFF	; 255
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	2b 81       	ldd	r18, Y+3	; 0x03
     718:	22 2f       	mov	r18, r18
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	22 0f       	add	r18, r18
     71e:	33 1f       	adc	r19, r19
     720:	20 5a       	subi	r18, 0xA0	; 160
     722:	3f 4f       	sbci	r19, 0xFF	; 255
     724:	f9 01       	movw	r30, r18
     726:	20 81       	ld	r18, Z
     728:	31 81       	ldd	r19, Z+1	; 0x01
     72a:	f9 01       	movw	r30, r18
     72c:	20 81       	ld	r18, Z
     72e:	62 2f       	mov	r22, r18
     730:	2a 81       	ldd	r18, Y+2	; 0x02
     732:	42 2f       	mov	r20, r18
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <Port_enuSetPinMode+0x260>
     73c:	22 0f       	add	r18, r18
     73e:	33 1f       	adc	r19, r19
     740:	4a 95       	dec	r20
     742:	e2 f7       	brpl	.-8      	; 0x73c <Port_enuSetPinMode+0x25c>
     744:	20 95       	com	r18
     746:	26 23       	and	r18, r22
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     74c:	8b 81       	ldd	r24, Y+3	; 0x03
     74e:	88 2f       	mov	r24, r24
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	88 59       	subi	r24, 0x98	; 152
     758:	9f 4f       	sbci	r25, 0xFF	; 255
     75a:	fc 01       	movw	r30, r24
     75c:	80 81       	ld	r24, Z
     75e:	91 81       	ldd	r25, Z+1	; 0x01
     760:	2b 81       	ldd	r18, Y+3	; 0x03
     762:	22 2f       	mov	r18, r18
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	28 59       	subi	r18, 0x98	; 152
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	f9 01       	movw	r30, r18
     770:	20 81       	ld	r18, Z
     772:	31 81       	ldd	r19, Z+1	; 0x01
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	62 2f       	mov	r22, r18
     77a:	2a 81       	ldd	r18, Y+2	; 0x02
     77c:	42 2f       	mov	r20, r18
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	02 c0       	rjmp	.+4      	; 0x78a <Port_enuSetPinMode+0x2aa>
     786:	22 0f       	add	r18, r18
     788:	33 1f       	adc	r19, r19
     78a:	4a 95       	dec	r20
     78c:	e2 f7       	brpl	.-8      	; 0x786 <Port_enuSetPinMode+0x2a6>
     78e:	26 2b       	or	r18, r22
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
								break;
     794:	00 00       	nop



	}

	return Loc_enuState;
     796:	89 81       	ldd	r24, Y+1	; 0x01
}
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	1f 92       	push	r1
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     7b2:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
     7b4:	8f e5       	ldi	r24, 0x5F	; 95
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	2f e5       	ldi	r18, 0x5F	; 95
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	20 68       	ori	r18, 0x80	; 128
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18

	return Loc_enuGieState;
     7c6:	89 81       	ldd	r24, Y+1	; 0x01

}
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     7da:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
     7dc:	8f e5       	ldi	r24, 0x5F	; 95
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	2f e5       	ldi	r18, 0x5F	; 95
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	20 81       	ld	r18, Z
     7e8:	2f 77       	andi	r18, 0x7F	; 127
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18

		return Loc_enuGieState;
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <Gie_enuSetGloablInterrupt+0x6>
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     804:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
     806:	8f e5       	ldi	r24, 0x5F	; 95
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	2f e5       	ldi	r18, 0x5F	; 95
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	20 81       	ld	r18, Z
     812:	42 2f       	mov	r20, r18
     814:	4f 77       	andi	r20, 0x7F	; 127
     816:	2a 81       	ldd	r18, Y+2	; 0x02
     818:	22 2f       	mov	r18, r18
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	36 95       	lsr	r19
     81e:	32 2f       	mov	r19, r18
     820:	22 27       	eor	r18, r18
     822:	37 95       	ror	r19
     824:	27 95       	ror	r18
     826:	24 2b       	or	r18, r20
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18

			return Loc_enuGieState;
     82c:	89 81       	ldd	r24, Y+1	; 0x01
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	00 d0       	rcall	.+0      	; 0x83e <Gie_enuGetGloablInterrupt+0x6>
     83e:	00 d0       	rcall	.+0      	; 0x840 <Gie_enuGetGloablInterrupt+0x8>
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	8a 83       	std	Y+2, r24	; 0x02
     846:	7c 83       	std	Y+4, r23	; 0x04
     848:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     84a:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	89 2b       	or	r24, r25
     852:	19 f4       	brne	.+6      	; 0x85a <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	0c c0       	rjmp	.+24     	; 0x872 <__stack+0x13>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
     85a:	8f e5       	ldi	r24, 0x5F	; 95
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	28 2f       	mov	r18, r24
     864:	22 1f       	adc	r18, r18
     866:	22 27       	eor	r18, r18
     868:	22 1f       	adc	r18, r18
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	9c 81       	ldd	r25, Y+4	; 0x04
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
     872:	89 81       	ldd	r24, Y+1	; 0x01
}
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	00 d0       	rcall	.+0      	; 0x888 <Exti_enuEnable+0x6>
     888:	1f 92       	push	r1
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	8a 83       	std	Y+2, r24	; 0x02
     890:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     896:	8a 81       	ldd	r24, Y+2	; 0x02
     898:	83 30       	cpi	r24, 0x03	; 3
     89a:	18 f0       	brcs	.+6      	; 0x8a2 <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	89 83       	std	Y+1, r24	; 0x01
     8a0:	8f c0       	rjmp	.+286    	; 0x9c0 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	88 2f       	mov	r24, r24
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	91 05       	cpc	r25, r1
     8ac:	89 f1       	breq	.+98     	; 0x910 <Exti_enuEnable+0x8e>
     8ae:	82 30       	cpi	r24, 0x02	; 2
     8b0:	91 05       	cpc	r25, r1
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <Exti_enuEnable+0x34>
     8b4:	62 c0       	rjmp	.+196    	; 0x97a <Exti_enuEnable+0xf8>
     8b6:	89 2b       	or	r24, r25
     8b8:	09 f0       	breq	.+2      	; 0x8bc <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
     8ba:	82 c0       	rjmp	.+260    	; 0x9c0 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
     8bc:	85 e5       	ldi	r24, 0x55	; 85
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	25 e5       	ldi	r18, 0x55	; 85
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	f9 01       	movw	r30, r18
     8c6:	20 81       	ld	r18, Z
     8c8:	32 2f       	mov	r19, r18
     8ca:	3e 7f       	andi	r19, 0xFE	; 254
     8cc:	2b 81       	ldd	r18, Y+3	; 0x03
     8ce:	21 70       	andi	r18, 0x01	; 1
     8d0:	23 2b       	or	r18, r19
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
     8d6:	85 e5       	ldi	r24, 0x55	; 85
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	25 e5       	ldi	r18, 0x55	; 85
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	42 2f       	mov	r20, r18
     8e4:	4d 7f       	andi	r20, 0xFD	; 253
     8e6:	2b 81       	ldd	r18, Y+3	; 0x03
     8e8:	26 95       	lsr	r18
     8ea:	22 2f       	mov	r18, r18
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	21 70       	andi	r18, 0x01	; 1
     8f0:	33 27       	eor	r19, r19
     8f2:	22 0f       	add	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	24 2b       	or	r18, r20
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
     8fc:	8b e5       	ldi	r24, 0x5B	; 91
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	2b e5       	ldi	r18, 0x5B	; 91
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	f9 01       	movw	r30, r18
     906:	20 81       	ld	r18, Z
     908:	20 64       	ori	r18, 0x40	; 64
     90a:	fc 01       	movw	r30, r24
     90c:	20 83       	st	Z, r18

			break;
     90e:	58 c0       	rjmp	.+176    	; 0x9c0 <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
     910:	85 e5       	ldi	r24, 0x55	; 85
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	25 e5       	ldi	r18, 0x55	; 85
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	f9 01       	movw	r30, r18
     91a:	20 81       	ld	r18, Z
     91c:	42 2f       	mov	r20, r18
     91e:	4b 7f       	andi	r20, 0xFB	; 251
     920:	2b 81       	ldd	r18, Y+3	; 0x03
     922:	22 2f       	mov	r18, r18
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	21 70       	andi	r18, 0x01	; 1
     928:	33 27       	eor	r19, r19
     92a:	22 0f       	add	r18, r18
     92c:	33 1f       	adc	r19, r19
     92e:	22 0f       	add	r18, r18
     930:	33 1f       	adc	r19, r19
     932:	24 2b       	or	r18, r20
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
     938:	85 e5       	ldi	r24, 0x55	; 85
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	25 e5       	ldi	r18, 0x55	; 85
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	20 81       	ld	r18, Z
     944:	42 2f       	mov	r20, r18
     946:	47 7f       	andi	r20, 0xF7	; 247
     948:	2b 81       	ldd	r18, Y+3	; 0x03
     94a:	26 95       	lsr	r18
     94c:	22 2f       	mov	r18, r18
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	21 70       	andi	r18, 0x01	; 1
     952:	33 27       	eor	r19, r19
     954:	22 0f       	add	r18, r18
     956:	33 1f       	adc	r19, r19
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	22 0f       	add	r18, r18
     95e:	33 1f       	adc	r19, r19
     960:	24 2b       	or	r18, r20
     962:	fc 01       	movw	r30, r24
     964:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
     966:	8b e5       	ldi	r24, 0x5B	; 91
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	2b e5       	ldi	r18, 0x5B	; 91
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	f9 01       	movw	r30, r18
     970:	20 81       	ld	r18, Z
     972:	20 68       	ori	r18, 0x80	; 128
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
			break;
     978:	23 c0       	rjmp	.+70     	; 0x9c0 <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
     97a:	84 e5       	ldi	r24, 0x54	; 84
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	24 e5       	ldi	r18, 0x54	; 84
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	f9 01       	movw	r30, r18
     984:	20 81       	ld	r18, Z
     986:	42 2f       	mov	r20, r18
     988:	4f 7b       	andi	r20, 0xBF	; 191
     98a:	2b 81       	ldd	r18, Y+3	; 0x03
     98c:	22 2f       	mov	r18, r18
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	21 70       	andi	r18, 0x01	; 1
     992:	33 27       	eor	r19, r19
     994:	00 24       	eor	r0, r0
     996:	36 95       	lsr	r19
     998:	27 95       	ror	r18
     99a:	07 94       	ror	r0
     99c:	36 95       	lsr	r19
     99e:	27 95       	ror	r18
     9a0:	07 94       	ror	r0
     9a2:	32 2f       	mov	r19, r18
     9a4:	20 2d       	mov	r18, r0
     9a6:	24 2b       	or	r18, r20
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
     9ac:	8b e5       	ldi	r24, 0x5B	; 91
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2b e5       	ldi	r18, 0x5B	; 91
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	20 81       	ld	r18, Z
     9b8:	20 62       	ori	r18, 0x20	; 32
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
			break;
     9be:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
     9c0:	89 81       	ldd	r24, Y+1	; 0x01

}
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <Exti_enuDisable+0x6>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	18 f0       	brcs	.+6      	; 0x9ea <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	2a c0       	rjmp	.+84     	; 0xa3e <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
     9ea:	8a 81       	ldd	r24, Y+2	; 0x02
     9ec:	88 2f       	mov	r24, r24
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	91 05       	cpc	r25, r1
     9f4:	81 f0       	breq	.+32     	; 0xa16 <Exti_enuDisable+0x48>
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	91 05       	cpc	r25, r1
     9fa:	b9 f0       	breq	.+46     	; 0xa2a <Exti_enuDisable+0x5c>
     9fc:	89 2b       	or	r24, r25
     9fe:	09 f0       	breq	.+2      	; 0xa02 <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
     a00:	1e c0       	rjmp	.+60     	; 0xa3e <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
     a02:	8b e5       	ldi	r24, 0x5B	; 91
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	2b e5       	ldi	r18, 0x5B	; 91
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	f9 01       	movw	r30, r18
     a0c:	20 81       	ld	r18, Z
     a0e:	2f 7b       	andi	r18, 0xBF	; 191
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
			break;
     a14:	14 c0       	rjmp	.+40     	; 0xa3e <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
     a16:	8b e5       	ldi	r24, 0x5B	; 91
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	2b e5       	ldi	r18, 0x5B	; 91
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	2f 77       	andi	r18, 0x7F	; 127
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
			break;
     a28:	0a c0       	rjmp	.+20     	; 0xa3e <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
     a2a:	8b e5       	ldi	r24, 0x5B	; 91
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	2b e5       	ldi	r18, 0x5B	; 91
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	f9 01       	movw	r30, r18
     a34:	20 81       	ld	r18, Z
     a36:	2f 7d       	andi	r18, 0xDF	; 223
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
			break;
     a3c:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
     a3e:	89 81       	ldd	r24, Y+1	; 0x01

}
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <Exti_enuSetCallbackFunction+0x6>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <Exti_enuSetCallbackFunction+0x8>
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	8a 83       	std	Y+2, r24	; 0x02
     a58:	7c 83       	std	Y+4, r23	; 0x04
     a5a:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	83 30       	cpi	r24, 0x03	; 3
     a64:	18 f0       	brcs	.+6      	; 0xa6c <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	13 c0       	rjmp	.+38     	; 0xa92 <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	89 2b       	or	r24, r25
     a72:	19 f4       	brne	.+6      	; 0xa7a <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	0c c0       	rjmp	.+24     	; 0xa92 <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	84 52       	subi	r24, 0x24	; 36
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	2b 81       	ldd	r18, Y+3	; 0x03
     a8a:	3c 81       	ldd	r19, Y+4	; 0x04
     a8c:	fc 01       	movw	r30, r24
     a8e:	31 83       	std	Z+1, r19	; 0x01
     a90:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
     a92:	89 81       	ldd	r24, Y+1	; 0x01

}
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	2f 93       	push	r18
     ab0:	3f 93       	push	r19
     ab2:	4f 93       	push	r20
     ab4:	5f 93       	push	r21
     ab6:	6f 93       	push	r22
     ab8:	7f 93       	push	r23
     aba:	8f 93       	push	r24
     abc:	9f 93       	push	r25
     abe:	af 93       	push	r26
     ac0:	bf 93       	push	r27
     ac2:	ef 93       	push	r30
     ac4:	ff 93       	push	r31
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
     ace:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
     ad2:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <__data_end+0x1>
     ad6:	89 2b       	or	r24, r25
     ad8:	31 f0       	breq	.+12     	; 0xae6 <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
     ada:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
     ade:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <__data_end+0x1>
     ae2:	fc 01       	movw	r30, r24
     ae4:	09 95       	icall

}
     ae6:	00 00       	nop
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	ff 91       	pop	r31
     aee:	ef 91       	pop	r30
     af0:	bf 91       	pop	r27
     af2:	af 91       	pop	r26
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	7f 91       	pop	r23
     afa:	6f 91       	pop	r22
     afc:	5f 91       	pop	r21
     afe:	4f 91       	pop	r20
     b00:	3f 91       	pop	r19
     b02:	2f 91       	pop	r18
     b04:	0f 90       	pop	r0
     b06:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	5f 93       	push	r21
     b24:	6f 93       	push	r22
     b26:	7f 93       	push	r23
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
     b3c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end+0x2>
     b40:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <__data_end+0x3>
     b44:	89 2b       	or	r24, r25
     b46:	31 f0       	breq	.+12     	; 0xb54 <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
     b48:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end+0x2>
     b4c:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <__data_end+0x3>
     b50:	fc 01       	movw	r30, r24
     b52:	09 95       	icall

}
     b54:	00 00       	nop
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	ff 91       	pop	r31
     b5c:	ef 91       	pop	r30
     b5e:	bf 91       	pop	r27
     b60:	af 91       	pop	r26
     b62:	9f 91       	pop	r25
     b64:	8f 91       	pop	r24
     b66:	7f 91       	pop	r23
     b68:	6f 91       	pop	r22
     b6a:	5f 91       	pop	r21
     b6c:	4f 91       	pop	r20
     b6e:	3f 91       	pop	r19
     b70:	2f 91       	pop	r18
     b72:	0f 90       	pop	r0
     b74:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
     baa:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end+0x4>
     bae:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__data_end+0x5>
     bb2:	89 2b       	or	r24, r25
     bb4:	31 f0       	breq	.+12     	; 0xbc2 <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
     bb6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end+0x4>
     bba:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__data_end+0x5>
     bbe:	fc 01       	movw	r30, r24
     bc0:	09 95       	icall

}
     bc2:	00 00       	nop
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	bf 91       	pop	r27
     bce:	af 91       	pop	r26
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	7f 91       	pop	r23
     bd6:	6f 91       	pop	r22
     bd8:	5f 91       	pop	r21
     bda:	4f 91       	pop	r20
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	0f 90       	pop	r0
     be2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     be6:	0f 90       	pop	r0
     be8:	1f 90       	pop	r1
     bea:	18 95       	reti

00000bec <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <Dio_enuWriteChannel+0x6>
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <Dio_enuWriteChannel+0x8>
     bf4:	1f 92       	push	r1
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	8c 83       	std	Y+4, r24	; 0x04
     bfc:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     bfe:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	87 70       	andi	r24, 0x07	; 7
     c04:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	86 95       	lsr	r24
     c0a:	86 95       	lsr	r24
     c0c:	86 95       	lsr	r24
     c0e:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	80 32       	cpi	r24, 0x20	; 32
     c14:	18 f0       	brcs	.+6      	; 0xc1c <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	4e c0       	rjmp	.+156    	; 0xcb8 <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	80 59       	subi	r24, 0x90	; 144
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	91 81       	ldd	r25, Z+1	; 0x01
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	2a 81       	ldd	r18, Y+2	; 0x02
     c3a:	22 2f       	mov	r18, r18
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <Dio_enuWriteChannel+0x58>
     c40:	95 95       	asr	r25
     c42:	87 95       	ror	r24
     c44:	2a 95       	dec	r18
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <Dio_enuWriteChannel+0x54>
     c48:	81 70       	andi	r24, 0x01	; 1
     c4a:	99 27       	eor	r25, r25
     c4c:	89 2b       	or	r24, r25
     c4e:	19 f4       	brne	.+6      	; 0xc56 <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	31 c0       	rjmp	.+98     	; 0xcb8 <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	88 58       	subi	r24, 0x88	; 136
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	fc 01       	movw	r30, r24
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	2b 81       	ldd	r18, Y+3	; 0x03
     c6c:	22 2f       	mov	r18, r18
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	28 58       	subi	r18, 0x88	; 136
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	31 81       	ldd	r19, Z+1	; 0x01
     c7e:	f9 01       	movw	r30, r18
     c80:	20 81       	ld	r18, Z
     c82:	62 2f       	mov	r22, r18
     c84:	2a 81       	ldd	r18, Y+2	; 0x02
     c86:	42 2f       	mov	r20, r18
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	21 e0       	ldi	r18, 0x01	; 1
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <Dio_enuWriteChannel+0xa8>
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	4a 95       	dec	r20
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <Dio_enuWriteChannel+0xa4>
     c98:	20 95       	com	r18
     c9a:	62 23       	and	r22, r18
     c9c:	2d 81       	ldd	r18, Y+5	; 0x05
     c9e:	22 2f       	mov	r18, r18
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a 81       	ldd	r20, Y+2	; 0x02
     ca4:	44 2f       	mov	r20, r20
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <Dio_enuWriteChannel+0xc2>
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	4a 95       	dec	r20
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <Dio_enuWriteChannel+0xbe>
     cb2:	26 2b       	or	r18, r22
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18

}

	return Loc_enuState;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <Dio_enuReadChannel+0x6>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <Dio_enuReadChannel+0x8>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <Dio_enuReadChannel+0xa>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	8c 83       	std	Y+4, r24	; 0x04
     cda:	7e 83       	std	Y+6, r23	; 0x06
     cdc:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     cde:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	87 70       	andi	r24, 0x07	; 7
     ce4:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	86 95       	lsr	r24
     cea:	86 95       	lsr	r24
     cec:	86 95       	lsr	r24
     cee:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	80 32       	cpi	r24, 0x20	; 32
     cf4:	18 f0       	brcs	.+6      	; 0xcfc <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	40 c0       	rjmp	.+128    	; 0xd7c <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	80 59       	subi	r24, 0x90	; 144
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	fc 01       	movw	r30, r24
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	fc 01       	movw	r30, r24
     d12:	80 81       	ld	r24, Z
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	2a 81       	ldd	r18, Y+2	; 0x02
     d1a:	22 2f       	mov	r18, r18
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <Dio_enuReadChannel+0x5a>
     d20:	95 95       	asr	r25
     d22:	87 95       	ror	r24
     d24:	2a 95       	dec	r18
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <Dio_enuReadChannel+0x56>
     d28:	81 70       	andi	r24, 0x01	; 1
     d2a:	99 27       	eor	r25, r25
     d2c:	89 2b       	or	r24, r25
     d2e:	19 f0       	breq	.+6      	; 0xd36 <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	23 c0       	rjmp	.+70     	; 0xd7c <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	89 2b       	or	r24, r25
     d3c:	19 f4       	brne	.+6      	; 0xd44 <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     d3e:	84 e0       	ldi	r24, 0x04	; 4
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	1c c0       	rjmp	.+56     	; 0xd7c <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	80 58       	subi	r24, 0x80	; 128
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	fc 01       	movw	r30, r24
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	fc 01       	movw	r30, r24
     d5a:	80 81       	ld	r24, Z
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	2a 81       	ldd	r18, Y+2	; 0x02
     d62:	22 2f       	mov	r18, r18
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <Dio_enuReadChannel+0xa2>
     d68:	95 95       	asr	r25
     d6a:	87 95       	ror	r24
     d6c:	2a 95       	dec	r18
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <Dio_enuReadChannel+0x9e>
     d70:	28 2f       	mov	r18, r24
     d72:	21 70       	andi	r18, 0x01	; 1
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18


	}

		return Loc_enuState;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01

}
     d7e:	26 96       	adiw	r28, 0x06	; 6
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	00 d0       	rcall	.+0      	; 0xd96 <Dio_enuWritePort+0x6>
     d96:	1f 92       	push	r1
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	8a 83       	std	Y+2, r24	; 0x02
     d9e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     da0:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	84 30       	cpi	r24, 0x04	; 4
     da6:	18 f0       	brcs	.+6      	; 0xdae <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	1e c0       	rjmp	.+60     	; 0xdea <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	80 59       	subi	r24, 0x90	; 144
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	fc 01       	movw	r30, r24
     dc4:	80 81       	ld	r24, Z
     dc6:	8f 3f       	cpi	r24, 0xFF	; 255
     dc8:	19 f0       	breq	.+6      	; 0xdd0 <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	0d c0       	rjmp	.+26     	; 0xdea <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	88 58       	subi	r24, 0x88	; 136
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	fc 01       	movw	r30, r24
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	2b 81       	ldd	r18, Y+3	; 0x03
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     dea:	89 81       	ldd	r24, Y+1	; 0x01



}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <Dio_enuReadPort+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <Dio_enuReadPort+0x8>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	8a 83       	std	Y+2, r24	; 0x02
     e06:	7c 83       	std	Y+4, r23	; 0x04
     e08:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     e0a:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	84 30       	cpi	r24, 0x04	; 4
     e10:	18 f0       	brcs	.+6      	; 0xe18 <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	28 c0       	rjmp	.+80     	; 0xe68 <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	80 59       	subi	r24, 0x90	; 144
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	88 23       	and	r24, r24
     e32:	19 f0       	breq	.+6      	; 0xe3a <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	17 c0       	rjmp	.+46     	; 0xe68 <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	89 2b       	or	r24, r25
     e40:	19 f4       	brne	.+6      	; 0xe48 <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     e42:	84 e0       	ldi	r24, 0x04	; 4
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	80 58       	subi	r24, 0x80	; 128
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	fc 01       	movw	r30, r24
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 81       	ld	r18, Z
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18

		}

			return Loc_enuState;
     e68:	89 81       	ldd	r24, Y+1	; 0x01

}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <Dio_enuFlipChannel+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <Dio_enuFlipChannel+0x8>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     e86:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	87 70       	andi	r24, 0x07	; 7
     e8c:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	86 95       	lsr	r24
     e92:	86 95       	lsr	r24
     e94:	86 95       	lsr	r24
     e96:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	80 32       	cpi	r24, 0x20	; 32
     e9c:	18 f0       	brcs	.+6      	; 0xea4 <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	41 c0       	rjmp	.+130    	; 0xf26 <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	80 59       	subi	r24, 0x90	; 144
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	2a 81       	ldd	r18, Y+2	; 0x02
     ec2:	22 2f       	mov	r18, r18
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <Dio_enuFlipChannel+0x54>
     ec8:	95 95       	asr	r25
     eca:	87 95       	ror	r24
     ecc:	2a 95       	dec	r18
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <Dio_enuFlipChannel+0x50>
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	99 27       	eor	r25, r25
     ed4:	89 2b       	or	r24, r25
     ed6:	19 f4       	brne	.+6      	; 0xede <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	24 c0       	rjmp	.+72     	; 0xf26 <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	88 58       	subi	r24, 0x88	; 136
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	fc 01       	movw	r30, r24
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	2b 81       	ldd	r18, Y+3	; 0x03
     ef4:	22 2f       	mov	r18, r18
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	22 0f       	add	r18, r18
     efa:	33 1f       	adc	r19, r19
     efc:	28 58       	subi	r18, 0x88	; 136
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	31 81       	ldd	r19, Z+1	; 0x01
     f06:	f9 01       	movw	r30, r18
     f08:	20 81       	ld	r18, Z
     f0a:	62 2f       	mov	r22, r18
     f0c:	2a 81       	ldd	r18, Y+2	; 0x02
     f0e:	42 2f       	mov	r20, r18
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	21 e0       	ldi	r18, 0x01	; 1
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <Dio_enuFlipChannel+0xa4>
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	4a 95       	dec	r20
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <Dio_enuFlipChannel+0xa0>
     f20:	26 27       	eor	r18, r22
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <Adc_enuInit>:
/********************************** Data Type Declarations ****************************/

/********************************** Software Interfaces Declarations *******************/


Adc_StatusErrorType Adc_enuInit(const Adc_PinConfigType* Address_Adc){
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <Adc_enuInit+0x6>
     f3c:	1f 92       	push	r1
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	9b 83       	std	Y+3, r25	; 0x03
     f44:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	89 2b       	or	r24, r25
     f50:	19 f4       	brne	.+6      	; 0xf58 <Adc_enuInit+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	65 c0       	rjmp	.+202    	; 0x1022 <Adc_enuInit+0xec>
	    }
	    else{
	    	 /* Disable Adc Peripheral */
	    	        Adc_Disable();
     f58:	86 e2       	ldi	r24, 0x26	; 38
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	26 e2       	ldi	r18, 0x26	; 38
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	f9 01       	movw	r30, r18
     f62:	20 81       	ld	r18, Z
     f64:	2f 77       	andi	r18, 0x7F	; 127
     f66:	fc 01       	movw	r30, r24
     f68:	20 83       	st	Z, r18



	    	        /* Choose Conversion Clock  */
	    	        Adc_SelectConversionClock(Address_Adc->conversion_frequancy);
     f6a:	86 e2       	ldi	r24, 0x26	; 38
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	26 e2       	ldi	r18, 0x26	; 38
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	f9 01       	movw	r30, r18
     f74:	20 81       	ld	r18, Z
     f76:	42 2f       	mov	r20, r18
     f78:	40 77       	andi	r20, 0x70	; 112
     f7a:	2a 81       	ldd	r18, Y+2	; 0x02
     f7c:	3b 81       	ldd	r19, Y+3	; 0x03
     f7e:	f9 01       	movw	r30, r18
     f80:	23 81       	ldd	r18, Z+3	; 0x03
     f82:	27 70       	andi	r18, 0x07	; 7
     f84:	24 2b       	or	r18, r20
     f86:	fc 01       	movw	r30, r24
     f88:	20 83       	st	Z, r18

	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
     f8a:	87 e2       	ldi	r24, 0x27	; 39
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	27 e2       	ldi	r18, 0x27	; 39
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	f9 01       	movw	r30, r18
     f94:	20 81       	ld	r18, Z
     f96:	42 2f       	mov	r20, r18
     f98:	48 7f       	andi	r20, 0xF8	; 248
     f9a:	2a 81       	ldd	r18, Y+2	; 0x02
     f9c:	3b 81       	ldd	r19, Y+3	; 0x03
     f9e:	f9 01       	movw	r30, r18
     fa0:	20 81       	ld	r18, Z
     fa2:	27 70       	andi	r18, 0x07	; 7
     fa4:	24 2b       	or	r18, r20
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18


	    	        /*Configure Result Format */
	    	        Adc_SelectResultFormat(Address_Adc->result_format);
     faa:	87 e2       	ldi	r24, 0x27	; 39
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	27 e2       	ldi	r18, 0x27	; 39
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	f9 01       	movw	r30, r18
     fb4:	20 81       	ld	r18, Z
     fb6:	42 2f       	mov	r20, r18
     fb8:	4f 7d       	andi	r20, 0xDF	; 223
     fba:	2a 81       	ldd	r18, Y+2	; 0x02
     fbc:	3b 81       	ldd	r19, Y+3	; 0x03
     fbe:	f9 01       	movw	r30, r18
     fc0:	22 81       	ldd	r18, Z+2	; 0x02
     fc2:	22 2f       	mov	r18, r18
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	22 95       	swap	r18
     fcc:	32 95       	swap	r19
     fce:	30 7f       	andi	r19, 0xF0	; 240
     fd0:	32 27       	eor	r19, r18
     fd2:	20 7f       	andi	r18, 0xF0	; 240
     fd4:	32 27       	eor	r19, r18
     fd6:	24 2b       	or	r18, r20
     fd8:	fc 01       	movw	r30, r24
     fda:	20 83       	st	Z, r18

	    	        /* Configure Voltage Reference*/
	    	        Adc_SelectRefVoltageSource(Address_Adc->vref_source);
     fdc:	87 e2       	ldi	r24, 0x27	; 39
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	27 e2       	ldi	r18, 0x27	; 39
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	f9 01       	movw	r30, r18
     fe6:	20 81       	ld	r18, Z
     fe8:	42 2f       	mov	r20, r18
     fea:	4f 73       	andi	r20, 0x3F	; 63
     fec:	2a 81       	ldd	r18, Y+2	; 0x02
     fee:	3b 81       	ldd	r19, Y+3	; 0x03
     ff0:	f9 01       	movw	r30, r18
     ff2:	21 81       	ldd	r18, Z+1	; 0x01
     ff4:	22 2f       	mov	r18, r18
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	00 24       	eor	r0, r0
     ffa:	36 95       	lsr	r19
     ffc:	27 95       	ror	r18
     ffe:	07 94       	ror	r0
    1000:	36 95       	lsr	r19
    1002:	27 95       	ror	r18
    1004:	07 94       	ror	r0
    1006:	32 2f       	mov	r19, r18
    1008:	20 2d       	mov	r18, r0
    100a:	24 2b       	or	r18, r20
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18

	    	        /* Enable Adc Peripheral */
	    	        Adc_Enable();
    1010:	86 e2       	ldi	r24, 0x26	; 38
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	26 e2       	ldi	r18, 0x26	; 38
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	f9 01       	movw	r30, r18
    101a:	20 81       	ld	r18, Z
    101c:	20 68       	ori	r18, 0x80	; 128
    101e:	fc 01       	movw	r30, r24
    1020:	20 83       	st	Z, r18

	    }

	    return Loc_enuAdcStatus;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <Adc_enuDeInit>:

Adc_StatusErrorType Adc_enuDeInit(void){
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	1f 92       	push	r1
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	89 83       	std	Y+1, r24	; 0x01

	Adc_Disable();
    103e:	86 e2       	ldi	r24, 0x26	; 38
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	26 e2       	ldi	r18, 0x26	; 38
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	20 81       	ld	r18, Z
    104a:	2f 77       	andi	r18, 0x7F	; 127
    104c:	fc 01       	movw	r30, r24
    104e:	20 83       	st	Z, r18
	    return Loc_enuAdcStatus;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	0f 90       	pop	r0
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <Adc_enuStartConversionSync>:


Adc_StatusErrorType Adc_enuStartConversionSync(const Adc_PinConfigType* Address_Adc, u16* Address_ResultDigitalVoltage){
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	a6 97       	sbiw	r28, 0x26	; 38
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	9c a3       	std	Y+36, r25	; 0x24
    1070:	8b a3       	std	Y+35, r24	; 0x23
    1072:	7e a3       	std	Y+38, r23	; 0x26
    1074:	6d a3       	std	Y+37, r22	; 0x25

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8AdcInterruptStatus = ZERO_VALUE;
    107a:	1a 82       	std	Y+2, r1	; 0x02
	    if(NULL == Address_Adc || Address_ResultDigitalVoltage == NULL){
    107c:	8b a1       	ldd	r24, Y+35	; 0x23
    107e:	9c a1       	ldd	r25, Y+36	; 0x24
    1080:	89 2b       	or	r24, r25
    1082:	21 f0       	breq	.+8      	; 0x108c <Adc_enuStartConversionSync+0x32>
    1084:	8d a1       	ldd	r24, Y+37	; 0x25
    1086:	9e a1       	ldd	r25, Y+38	; 0x26
    1088:	89 2b       	or	r24, r25
    108a:	19 f4       	brne	.+6      	; 0x1092 <Adc_enuStartConversionSync+0x38>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	54 c1       	rjmp	.+680    	; 0x133a <Adc_enuStartConversionSync+0x2e0>
	    }
	    else{

	            /* Read Status of The interrupt */
	    	    Loc_u8AdcInterruptStatus = Adc_GetInterruptEnableStatus();
    1092:	86 e2       	ldi	r24, 0x26	; 38
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	fc 01       	movw	r30, r24
    1098:	80 81       	ld	r24, Z
    109a:	86 95       	lsr	r24
    109c:	86 95       	lsr	r24
    109e:	86 95       	lsr	r24
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	8a 83       	std	Y+2, r24	; 0x02

	            /* Choose Selected Channel */
	            Adc_SelectChannel(Address_Adc->channel_number);
    10a4:	87 e2       	ldi	r24, 0x27	; 39
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	27 e2       	ldi	r18, 0x27	; 39
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	f9 01       	movw	r30, r18
    10ae:	20 81       	ld	r18, Z
    10b0:	42 2f       	mov	r20, r18
    10b2:	48 7f       	andi	r20, 0xF8	; 248
    10b4:	2b a1       	ldd	r18, Y+35	; 0x23
    10b6:	3c a1       	ldd	r19, Y+36	; 0x24
    10b8:	f9 01       	movw	r30, r18
    10ba:	20 81       	ld	r18, Z
    10bc:	27 70       	andi	r18, 0x07	; 7
    10be:	24 2b       	or	r18, r20
    10c0:	fc 01       	movw	r30, r24
    10c2:	20 83       	st	Z, r18


	            /* Disable Interrupt not to jump after completing*/
	            Adc_SetInterruptEnable(ZERO_VALUE);
    10c4:	86 e2       	ldi	r24, 0x26	; 38
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	26 e2       	ldi	r18, 0x26	; 38
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	f9 01       	movw	r30, r18
    10ce:	20 81       	ld	r18, Z
    10d0:	27 7f       	andi	r18, 0xF7	; 247
    10d2:	fc 01       	movw	r30, r24
    10d4:	20 83       	st	Z, r18


	            /* Start Conversion  */
	            Adc_StartConversion();
    10d6:	86 e2       	ldi	r24, 0x26	; 38
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	26 e2       	ldi	r18, 0x26	; 38
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	f9 01       	movw	r30, r18
    10e0:	20 81       	ld	r18, Z
    10e2:	20 64       	ori	r18, 0x40	; 64
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 83       	st	Z, r18



	            /* wait =polling for conversion */
	            while( ZERO_VALUE == Adc_IsConversionCompleted() );
    10e8:	00 00       	nop
    10ea:	86 e2       	ldi	r24, 0x26	; 38
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	fc 01       	movw	r30, r24
    10f0:	80 81       	ld	r24, Z
    10f2:	82 95       	swap	r24
    10f4:	86 95       	lsr	r24
    10f6:	86 95       	lsr	r24
    10f8:	83 70       	andi	r24, 0x03	; 3
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	99 27       	eor	r25, r25
    1102:	89 2b       	or	r24, r25
    1104:	91 f7       	brne	.-28     	; 0x10ea <Adc_enuStartConversionSync+0x90>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e2       	ldi	r26, 0x20	; 32
    110c:	b1 e4       	ldi	r27, 0x41	; 65
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	ad 83       	std	Y+5, r26	; 0x05
    1114:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1116:	2b ea       	ldi	r18, 0xAB	; 171
    1118:	3a ea       	ldi	r19, 0xAA	; 170
    111a:	4a ea       	ldi	r20, 0xAA	; 170
    111c:	50 e4       	ldi	r21, 0x40	; 64
    111e:	6b 81       	ldd	r22, Y+3	; 0x03
    1120:	7c 81       	ldd	r23, Y+4	; 0x04
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	a9 87       	std	Y+9, r26	; 0x09
    1134:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e8       	ldi	r20, 0x80	; 128
    113c:	50 e4       	ldi	r21, 0x40	; 64
    113e:	6b 81       	ldd	r22, Y+3	; 0x03
    1140:	7c 81       	ldd	r23, Y+4	; 0x04
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	8b 87       	std	Y+11, r24	; 0x0b
    1150:	9c 87       	std	Y+12, r25	; 0x0c
    1152:	ad 87       	std	Y+13, r26	; 0x0d
    1154:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	6f 81       	ldd	r22, Y+7	; 0x07
    1160:	78 85       	ldd	r23, Y+8	; 0x08
    1162:	89 85       	ldd	r24, Y+9	; 0x09
    1164:	9a 85       	ldd	r25, Y+10	; 0x0a
    1166:	0e 94 42 14 	call	0x2884	; 0x2884 <__cmpsf2>
    116a:	88 23       	and	r24, r24
    116c:	1c f4       	brge	.+6      	; 0x1174 <Adc_enuStartConversionSync+0x11a>
		__ticks = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	8f 87       	std	Y+15, r24	; 0x0f
    1172:	b2 c0       	rjmp	.+356    	; 0x12d8 <Adc_enuStartConversionSync+0x27e>
	else if (__tmp2 > 65535)
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	6b 85       	ldd	r22, Y+11	; 0x0b
    117e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    1188:	18 16       	cp	r1, r24
    118a:	0c f0       	brlt	.+2      	; 0x118e <Adc_enuStartConversionSync+0x134>
    118c:	7b c0       	rjmp	.+246    	; 0x1284 <Adc_enuStartConversionSync+0x22a>
	{
		_delay_ms(__us / 1000.0);
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4a e7       	ldi	r20, 0x7A	; 122
    1194:	54 e4       	ldi	r21, 0x44	; 68
    1196:	6b 81       	ldd	r22, Y+3	; 0x03
    1198:	7c 81       	ldd	r23, Y+4	; 0x04
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	0e 94 47 14 	call	0x288e	; 0x288e <__divsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	88 8b       	std	Y+16, r24	; 0x10
    11a8:	99 8b       	std	Y+17, r25	; 0x11
    11aa:	aa 8b       	std	Y+18, r26	; 0x12
    11ac:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	4a e7       	ldi	r20, 0x7A	; 122
    11b4:	55 e4       	ldi	r21, 0x45	; 69
    11b6:	68 89       	ldd	r22, Y+16	; 0x10
    11b8:	79 89       	ldd	r23, Y+17	; 0x11
    11ba:	8a 89       	ldd	r24, Y+18	; 0x12
    11bc:	9b 89       	ldd	r25, Y+19	; 0x13
    11be:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	8c 8b       	std	Y+20, r24	; 0x14
    11c8:	9d 8b       	std	Y+21, r25	; 0x15
    11ca:	ae 8b       	std	Y+22, r26	; 0x16
    11cc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e8       	ldi	r20, 0x80	; 128
    11d4:	5f e3       	ldi	r21, 0x3F	; 63
    11d6:	6c 89       	ldd	r22, Y+20	; 0x14
    11d8:	7d 89       	ldd	r23, Y+21	; 0x15
    11da:	8e 89       	ldd	r24, Y+22	; 0x16
    11dc:	9f 89       	ldd	r25, Y+23	; 0x17
    11de:	0e 94 42 14 	call	0x2884	; 0x2884 <__cmpsf2>
    11e2:	88 23       	and	r24, r24
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <Adc_enuStartConversionSync+0x196>
		__ticks = 1;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	99 8f       	std	Y+25, r25	; 0x19
    11ec:	88 8f       	std	Y+24, r24	; 0x18
    11ee:	3f c0       	rjmp	.+126    	; 0x126e <Adc_enuStartConversionSync+0x214>
	else if (__tmp > 65535)
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	3f ef       	ldi	r19, 0xFF	; 255
    11f4:	4f e7       	ldi	r20, 0x7F	; 127
    11f6:	57 e4       	ldi	r21, 0x47	; 71
    11f8:	6c 89       	ldd	r22, Y+20	; 0x14
    11fa:	7d 89       	ldd	r23, Y+21	; 0x15
    11fc:	8e 89       	ldd	r24, Y+22	; 0x16
    11fe:	9f 89       	ldd	r25, Y+23	; 0x17
    1200:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    1204:	18 16       	cp	r1, r24
    1206:	4c f5       	brge	.+82     	; 0x125a <Adc_enuStartConversionSync+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e2       	ldi	r20, 0x20	; 32
    120e:	51 e4       	ldi	r21, 0x41	; 65
    1210:	68 89       	ldd	r22, Y+16	; 0x10
    1212:	79 89       	ldd	r23, Y+17	; 0x11
    1214:	8a 89       	ldd	r24, Y+18	; 0x12
    1216:	9b 89       	ldd	r25, Y+19	; 0x13
    1218:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	bc 01       	movw	r22, r24
    1222:	cd 01       	movw	r24, r26
    1224:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	99 8f       	std	Y+25, r25	; 0x19
    122e:	88 8f       	std	Y+24, r24	; 0x18
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <Adc_enuStartConversionSync+0x1f6>
    1232:	80 e9       	ldi	r24, 0x90	; 144
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	9b 8f       	std	Y+27, r25	; 0x1b
    1238:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    123a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    123c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <Adc_enuStartConversionSync+0x1e4>
    1242:	9b 8f       	std	Y+27, r25	; 0x1b
    1244:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1246:	88 8d       	ldd	r24, Y+24	; 0x18
    1248:	99 8d       	ldd	r25, Y+25	; 0x19
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	99 8f       	std	Y+25, r25	; 0x19
    124e:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1250:	88 8d       	ldd	r24, Y+24	; 0x18
    1252:	99 8d       	ldd	r25, Y+25	; 0x19
    1254:	89 2b       	or	r24, r25
    1256:	69 f7       	brne	.-38     	; 0x1232 <Adc_enuStartConversionSync+0x1d8>
    1258:	3f c0       	rjmp	.+126    	; 0x12d8 <Adc_enuStartConversionSync+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125a:	6c 89       	ldd	r22, Y+20	; 0x14
    125c:	7d 89       	ldd	r23, Y+21	; 0x15
    125e:	8e 89       	ldd	r24, Y+22	; 0x16
    1260:	9f 89       	ldd	r25, Y+23	; 0x17
    1262:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	99 8f       	std	Y+25, r25	; 0x19
    126c:	88 8f       	std	Y+24, r24	; 0x18
    126e:	88 8d       	ldd	r24, Y+24	; 0x18
    1270:	99 8d       	ldd	r25, Y+25	; 0x19
    1272:	9d 8f       	std	Y+29, r25	; 0x1d
    1274:	8c 8f       	std	Y+28, r24	; 0x1c
    1276:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1278:	9d 8d       	ldd	r25, Y+29	; 0x1d
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <Adc_enuStartConversionSync+0x220>
    127e:	9d 8f       	std	Y+29, r25	; 0x1d
    1280:	8c 8f       	std	Y+28, r24	; 0x1c
    1282:	2a c0       	rjmp	.+84     	; 0x12d8 <Adc_enuStartConversionSync+0x27e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4f e7       	ldi	r20, 0x7F	; 127
    128a:	53 e4       	ldi	r21, 0x43	; 67
    128c:	6f 81       	ldd	r22, Y+7	; 0x07
    128e:	78 85       	ldd	r23, Y+8	; 0x08
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    1298:	18 16       	cp	r1, r24
    129a:	ac f4       	brge	.+42     	; 0x12c6 <Adc_enuStartConversionSync+0x26c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    129c:	6b 85       	ldd	r22, Y+11	; 0x0b
    129e:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a4:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9f 8f       	std	Y+31, r25	; 0x1f
    12ae:	8e 8f       	std	Y+30, r24	; 0x1e
    12b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12b4:	99 a3       	std	Y+33, r25	; 0x21
    12b6:	88 a3       	std	Y+32, r24	; 0x20
    12b8:	88 a1       	ldd	r24, Y+32	; 0x20
    12ba:	99 a1       	ldd	r25, Y+33	; 0x21
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <Adc_enuStartConversionSync+0x262>
    12c0:	99 a3       	std	Y+33, r25	; 0x21
    12c2:	88 a3       	std	Y+32, r24	; 0x20
    12c4:	0f c0       	rjmp	.+30     	; 0x12e4 <Adc_enuStartConversionSync+0x28a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	8f 87       	std	Y+15, r24	; 0x0f
    12d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12da:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12dc:	8a a1       	ldd	r24, Y+34	; 0x22
    12de:	8a 95       	dec	r24
    12e0:	f1 f7       	brne	.-4      	; 0x12de <Adc_enuStartConversionSync+0x284>
    12e2:	8a a3       	std	Y+34, r24	; 0x22
	            _delay_us(10);

	            Loc_enuAdcStatus &= Adc_GetResult(Address_Adc->result_format ,Address_ResultDigitalVoltage);
    12e4:	8b a1       	ldd	r24, Y+35	; 0x23
    12e6:	9c a1       	ldd	r25, Y+36	; 0x24
    12e8:	fc 01       	movw	r30, r24
    12ea:	22 81       	ldd	r18, Z+2	; 0x02
    12ec:	8d a1       	ldd	r24, Y+37	; 0x25
    12ee:	9e a1       	ldd	r25, Y+38	; 0x26
    12f0:	bc 01       	movw	r22, r24
    12f2:	82 2f       	mov	r24, r18
    12f4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <Adc_GetResult>
    12f8:	98 2f       	mov	r25, r24
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	89 23       	and	r24, r25
    12fe:	89 83       	std	Y+1, r24	; 0x01

	            /* Return Status Of The Adc Interrupt*/
	            Adc_ClearInterruptFlag();
    1300:	86 e2       	ldi	r24, 0x26	; 38
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	26 e2       	ldi	r18, 0x26	; 38
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	f9 01       	movw	r30, r18
    130a:	20 81       	ld	r18, Z
    130c:	20 61       	ori	r18, 0x10	; 16
    130e:	fc 01       	movw	r30, r24
    1310:	20 83       	st	Z, r18
	            Adc_SetInterruptEnable(Loc_u8AdcInterruptStatus);
    1312:	86 e2       	ldi	r24, 0x26	; 38
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	26 e2       	ldi	r18, 0x26	; 38
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	42 2f       	mov	r20, r18
    1320:	47 7f       	andi	r20, 0xF7	; 247
    1322:	2a 81       	ldd	r18, Y+2	; 0x02
    1324:	22 2f       	mov	r18, r18
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	24 2b       	or	r18, r20
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
	        }

	    return Loc_enuAdcStatus;
    133a:	89 81       	ldd	r24, Y+1	; 0x01
}
    133c:	a6 96       	adiw	r28, 0x26	; 38
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <Adc_ConvertResultToVoltage>:



Adc_StatusErrorType Adc_ConvertResultToVoltage( u16 Copy_u16DigitalValue, f32* Address_ResultAnalogVoltage){
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	00 d0       	rcall	.+0      	; 0x1354 <Adc_ConvertResultToVoltage+0x6>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <Adc_ConvertResultToVoltage+0x8>
    1356:	1f 92       	push	r1
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	9b 83       	std	Y+3, r25	; 0x03
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	7d 83       	std	Y+5, r23	; 0x05
    1362:	6c 83       	std	Y+4, r22	; 0x04

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_ResultAnalogVoltage){
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	89 2b       	or	r24, r25
    136e:	19 f4       	brne	.+6      	; 0x1376 <Adc_ConvertResultToVoltage+0x28>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	1c c0       	rjmp	.+56     	; 0x13ae <Adc_ConvertResultToVoltage+0x60>
	    }
	    else{
	           /* Vanalog = Vdigital * step    */
	           /* Step Size = (Vmax-Vmin)/2^n      */
	           *Address_ResultAnalogVoltage = Copy_u16DigitalValue*0.004883F;
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	9b 81       	ldd	r25, Y+3	; 0x03
    137a:	cc 01       	movw	r24, r24
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <__floatunsisf>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	23 e9       	ldi	r18, 0x93	; 147
    138e:	31 e0       	ldi	r19, 0x01	; 1
    1390:	40 ea       	ldi	r20, 0xA0	; 160
    1392:	5b e3       	ldi	r21, 0x3B	; 59
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	2c 81       	ldd	r18, Y+4	; 0x04
    13a2:	3d 81       	ldd	r19, Y+5	; 0x05
    13a4:	f9 01       	movw	r30, r18
    13a6:	80 83       	st	Z, r24
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	a2 83       	std	Z+2, r26	; 0x02
    13ac:	b3 83       	std	Z+3, r27	; 0x03
	       }

	    return Loc_enuAdcStatus;
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <Adc_StartConversionAsync>:


Adc_StatusErrorType Adc_StartConversionAsync(const Adc_PinConfigType* Address_Adc){
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <Adc_StartConversionAsync+0x6>
    13c6:	1f 92       	push	r1
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	9b 83       	std	Y+3, r25	; 0x03
    13ce:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	89 2b       	or	r24, r25
    13da:	19 f4       	brne	.+6      	; 0x13e2 <Adc_StartConversionAsync+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	34 c0       	rjmp	.+104    	; 0x144a <Adc_StartConversionAsync+0x8a>
	    }
	    else{
	    	 /* You can't start A new Conversion Unless The old One Is Done*/
	    	        while( ZERO_VALUE == Adc_IsConversionCompleted() );
    13e2:	00 00       	nop
    13e4:	86 e2       	ldi	r24, 0x26	; 38
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	fc 01       	movw	r30, r24
    13ea:	80 81       	ld	r24, Z
    13ec:	82 95       	swap	r24
    13ee:	86 95       	lsr	r24
    13f0:	86 95       	lsr	r24
    13f2:	83 70       	andi	r24, 0x03	; 3
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	81 70       	andi	r24, 0x01	; 1
    13fa:	99 27       	eor	r25, r25
    13fc:	89 2b       	or	r24, r25
    13fe:	91 f7       	brne	.-28     	; 0x13e4 <Adc_StartConversionAsync+0x24>

	    	        Global_AdcInterruptIndex = (u8)Address_Adc->channel_number;
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	9b 81       	ldd	r25, Y+3	; 0x03
    1404:	fc 01       	movw	r30, r24
    1406:	80 81       	ld	r24, Z
    1408:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <Global_AdcInterruptIndex>
	    	        current_format = Address_Adc->result_format;
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	9b 81       	ldd	r25, Y+3	; 0x03
    1410:	fc 01       	movw	r30, r24
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <current_format>
	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    1418:	87 e2       	ldi	r24, 0x27	; 39
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	27 e2       	ldi	r18, 0x27	; 39
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	f9 01       	movw	r30, r18
    1422:	20 81       	ld	r18, Z
    1424:	42 2f       	mov	r20, r18
    1426:	48 7f       	andi	r20, 0xF8	; 248
    1428:	2a 81       	ldd	r18, Y+2	; 0x02
    142a:	3b 81       	ldd	r19, Y+3	; 0x03
    142c:	f9 01       	movw	r30, r18
    142e:	20 81       	ld	r18, Z
    1430:	27 70       	andi	r18, 0x07	; 7
    1432:	24 2b       	or	r18, r20
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18


	    	        /* Start Conversion  */
	    	        Adc_StartConversion();
    1438:	86 e2       	ldi	r24, 0x26	; 38
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	26 e2       	ldi	r18, 0x26	; 38
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	20 64       	ori	r18, 0x40	; 64
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
	    }

	    return Loc_enuAdcStatus;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	08 95       	ret

00001458 <Adc_enuEnableInterrupt>:


Adc_StatusErrorType Adc_enuEnableInterrupt(void){
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	1f 92       	push	r1
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01
	Adc_EnableInterrupt();
    1466:	86 e2       	ldi	r24, 0x26	; 38
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	26 e2       	ldi	r18, 0x26	; 38
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	f9 01       	movw	r30, r18
    1470:	20 81       	ld	r18, Z
    1472:	28 60       	ori	r18, 0x08	; 8
    1474:	fc 01       	movw	r30, r24
    1476:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
}
    147a:	0f 90       	pop	r0
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	08 95       	ret

00001482 <Adc_enuDisableInterrupt>:


Adc_StatusErrorType Adc_enuDisableInterrupt(void){
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	1f 92       	push	r1
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
	Adc_DisableInterrupt();
    1490:	86 e2       	ldi	r24, 0x26	; 38
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	26 e2       	ldi	r18, 0x26	; 38
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	f9 01       	movw	r30, r18
    149a:	20 81       	ld	r18, Z
    149c:	27 7f       	andi	r18, 0xF7	; 247
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a4:	0f 90       	pop	r0
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <Adc_GetResult>:




////////////////////////////////////////////////Helpers Functions ///////////////////////////
static Adc_StatusErrorType Adc_GetResult(const Adc_ResultFormartType Copy_enuResultFormat, u16* Address_Result){
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <Adc_GetResult+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <Adc_GetResult+0x8>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	7c 83       	std	Y+4, r23	; 0x04
    14bc:	6b 83       	std	Y+3, r22	; 0x03

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Result){
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	89 2b       	or	r24, r25
    14c8:	19 f4       	brne	.+6      	; 0x14d0 <Adc_GetResult+0x24>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	30 c0       	rjmp	.+96     	; 0x1530 <Adc_GetResult+0x84>
	    }

	    	else{
	    	        switch(Copy_enuResultFormat){
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	89 2b       	or	r24, r25
    14d8:	b9 f4       	brne	.+46     	; 0x1508 <Adc_GetResult+0x5c>

	    	        case ADC_RIGHT_JUSTIFIED:



	    	                *Address_Result = (ADCL) | (ADCH <<8) ;
    14da:	84 e2       	ldi	r24, 0x24	; 36
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	fc 01       	movw	r30, r24
    14e0:	80 81       	ld	r24, Z
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	85 e2       	ldi	r24, 0x25	; 37
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	fc 01       	movw	r30, r24
    14ec:	80 81       	ld	r24, Z
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	98 2f       	mov	r25, r24
    14f4:	88 27       	eor	r24, r24
    14f6:	82 2b       	or	r24, r18
    14f8:	93 2b       	or	r25, r19
    14fa:	9c 01       	movw	r18, r24
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	fc 01       	movw	r30, r24
    1502:	31 83       	std	Z+1, r19	; 0x01
    1504:	20 83       	st	Z, r18
	    	                break;
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <Adc_GetResult+0x84>

	    	            default:
	    	            	*Address_Result = (ADCHL>>6) & 0x3FF;
    1508:	84 e2       	ldi	r24, 0x24	; 36
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	fc 01       	movw	r30, r24
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	9c 01       	movw	r18, r24
    1514:	00 24       	eor	r0, r0
    1516:	22 0f       	add	r18, r18
    1518:	33 1f       	adc	r19, r19
    151a:	00 1c       	adc	r0, r0
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	00 1c       	adc	r0, r0
    1522:	23 2f       	mov	r18, r19
    1524:	30 2d       	mov	r19, r0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	fc 01       	movw	r30, r24
    152c:	31 83       	std	Z+1, r19	; 0x01
    152e:	20 83       	st	Z, r18

	    	        }
	    	    }


	    return Loc_enuAdcStatus;
    1530:	89 81       	ldd	r24, Y+1	; 0x01
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <Adc_SetCallbackFunction>:

Adc_StatusErrorType Adc_SetCallbackFunction(const Adc_PinConfigType* Address_Adc, void (*callback)(u16)){
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	00 d0       	rcall	.+0      	; 0x1546 <Adc_SetCallbackFunction+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <Adc_SetCallbackFunction+0x8>
    1548:	1f 92       	push	r1
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9b 83       	std	Y+3, r25	; 0x03
    1550:	8a 83       	std	Y+2, r24	; 0x02
    1552:	7d 83       	std	Y+5, r23	; 0x05
    1554:	6c 83       	std	Y+4, r22	; 0x04
	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	89 83       	std	Y+1, r24	; 0x01
		    if(NULL == Address_Adc){
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	89 2b       	or	r24, r25
    1560:	19 f4       	brne	.+6      	; 0x1568 <Adc_SetCallbackFunction+0x28>
		    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <Adc_SetCallbackFunction+0x46>
		    }
		    else{
		    	Adc_InterruptHandlerArr[Address_Adc->channel_number] = callback;
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	fc 01       	movw	r30, r24
    156e:	80 81       	ld	r24, Z
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	8e 51       	subi	r24, 0x1E	; 30
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	2c 81       	ldd	r18, Y+4	; 0x04
    157e:	3d 81       	ldd	r19, Y+5	; 0x05
    1580:	fc 01       	movw	r30, r24
    1582:	31 83       	std	Z+1, r19	; 0x01
    1584:	20 83       	st	Z, r18
		    }
		    return Loc_enuAdcStatus;
    1586:	89 81       	ldd	r24, Y+1	; 0x01
}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <__vector_16>:

// ISR function For ADC
void __vector_16(void) __attribute__((signal));

void __vector_16(void){
    1598:	1f 92       	push	r1
    159a:	0f 92       	push	r0
    159c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    15a0:	0f 92       	push	r0
    15a2:	11 24       	eor	r1, r1
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <__vector_16+0x2a>
    15c2:	1f 92       	push	r1
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62

	    u16 Loc_u16Result;
	    Adc_StatusErrorType Loc_enuAdcStatus  = ADC_STATUS_OK;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	89 83       	std	Y+1, r24	; 0x01

	    Loc_enuAdcStatus = Adc_GetResult(current_format,&Loc_u16Result);
    15cc:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <current_format>
    15d0:	ce 01       	movw	r24, r28
    15d2:	02 96       	adiw	r24, 0x02	; 2
    15d4:	bc 01       	movw	r22, r24
    15d6:	82 2f       	mov	r24, r18
    15d8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <Adc_GetResult>
    15dc:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL != Adc_InterruptHandlerArr[Global_AdcInterruptIndex]){
    15de:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <Global_AdcInterruptIndex>
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	8e 51       	subi	r24, 0x1E	; 30
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	89 2b       	or	r24, r25
    15f6:	79 f0       	breq	.+30     	; 0x1616 <__vector_16+0x7e>
	        Adc_InterruptHandlerArr[Global_AdcInterruptIndex](Loc_u16Result);
    15f8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <Global_AdcInterruptIndex>
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	8e 51       	subi	r24, 0x1E	; 30
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	fc 01       	movw	r30, r24
    160a:	20 81       	ld	r18, Z
    160c:	31 81       	ldd	r19, Z+1	; 0x01
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	f9 01       	movw	r30, r18
    1614:	09 95       	icall
	    }
	    else {/* do nothing , error in declaration */ }

}
    1616:	00 00       	nop
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <Seven_Segment_WriteBCDConnection>:



/********************************** Software Interfaces Declarations *******************/

Seven_Segment_StatusErrorType  Seven_Segment_WriteBCDConnection(const Seven_Segment_BCDType* Address_Segment, u8 Copy_u8Value){
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	27 97       	sbiw	r28, 0x07	; 7
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	6f 83       	std	Y+7, r22	; 0x07

	Seven_Segment_StatusErrorType Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_OK;
    1660:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    1662:	1b 82       	std	Y+3, r1	; 0x03
	    u8 Loc_u8FinalBit = DIO_LOW;
    1664:	1c 82       	std	Y+4, r1	; 0x04
	    u8 Loc_u8Counter=ZERO_VALUE;
    1666:	1a 82       	std	Y+2, r1	; 0x02

	    if (NULL == Address_Segment  ){
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	89 2b       	or	r24, r25
    166e:	19 f4       	brne	.+6      	; 0x1676 <Seven_Segment_WriteBCDConnection+0x30>

	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	22 c0       	rjmp	.+68     	; 0x16ba <Seven_Segment_WriteBCDConnection+0x74>
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    1676:	1a 82       	std	Y+2, r1	; 0x02
    1678:	1d c0       	rjmp	.+58     	; 0x16b4 <Seven_Segment_WriteBCDConnection+0x6e>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
    167a:	8f 81       	ldd	r24, Y+7	; 0x07
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	2a 81       	ldd	r18, Y+2	; 0x02
    1682:	22 2f       	mov	r18, r18
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	02 c0       	rjmp	.+4      	; 0x168c <Seven_Segment_WriteBCDConnection+0x46>
    1688:	95 95       	asr	r25
    168a:	87 95       	ror	r24
    168c:	2a 95       	dec	r18
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <Seven_Segment_WriteBCDConnection+0x42>
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	8c 83       	std	Y+4, r24	; 0x04
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	2d 81       	ldd	r18, Y+5	; 0x05
    169c:	3e 81       	ldd	r19, Y+6	; 0x06
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	fc 01       	movw	r30, r24
    16a4:	80 81       	ld	r24, Z
    16a6:	6c 81       	ldd	r22, Y+4	; 0x04
    16a8:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    16ac:	8b 83       	std	Y+3, r24	; 0x03
	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	8a 83       	std	Y+2, r24	; 0x02
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	84 30       	cpi	r24, 0x04	; 4
    16b8:	00 f3       	brcs	.-64     	; 0x167a <Seven_Segment_WriteBCDConnection+0x34>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
	        }
	    }

	    return Loc_enuSegmentState;
    16ba:	89 81       	ldd	r24, Y+1	; 0x01

}
    16bc:	27 96       	adiw	r28, 0x07	; 7
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	08 95       	ret

000016ce <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	ef 97       	sbiw	r28, 0x3f	; 63
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	9f af       	std	Y+63, r25	; 0x3f
    16e4:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    16e6:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
    16e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ec:	89 2b       	or	r24, r25
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	0f c2       	rjmp	.+1054   	; 0x1b14 <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    16f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    16f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    16fa:	68 e3       	ldi	r22, 0x38	; 56
    16fc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a0 ea       	ldi	r26, 0xA0	; 160
    1708:	b0 e4       	ldi	r27, 0x40	; 64
    170a:	8a 83       	std	Y+2, r24	; 0x02
    170c:	9b 83       	std	Y+3, r25	; 0x03
    170e:	ac 83       	std	Y+4, r26	; 0x04
    1710:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a e7       	ldi	r20, 0x7A	; 122
    1718:	55 e4       	ldi	r21, 0x45	; 69
    171a:	6a 81       	ldd	r22, Y+2	; 0x02
    171c:	7b 81       	ldd	r23, Y+3	; 0x03
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8c ab       	std	Y+52, r24	; 0x34
    172c:	9d ab       	std	Y+53, r25	; 0x35
    172e:	ae ab       	std	Y+54, r26	; 0x36
    1730:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	6c a9       	ldd	r22, Y+52	; 0x34
    173c:	7d a9       	ldd	r23, Y+53	; 0x35
    173e:	8e a9       	ldd	r24, Y+54	; 0x36
    1740:	9f a9       	ldd	r25, Y+55	; 0x37
    1742:	0e 94 42 14 	call	0x2884	; 0x2884 <__cmpsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	99 af       	std	Y+57, r25	; 0x39
    1750:	88 af       	std	Y+56, r24	; 0x38
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	6c a9       	ldd	r22, Y+52	; 0x34
    175e:	7d a9       	ldd	r23, Y+53	; 0x35
    1760:	8e a9       	ldd	r24, Y+54	; 0x36
    1762:	9f a9       	ldd	r25, Y+55	; 0x37
    1764:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	6a 81       	ldd	r22, Y+2	; 0x02
    1776:	7b 81       	ldd	r23, Y+3	; 0x03
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	99 af       	std	Y+57, r25	; 0x39
    1792:	88 af       	std	Y+56, r24	; 0x38
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <Lcd_4bit_enuInit+0xe6>
    1796:	80 e9       	ldi	r24, 0x90	; 144
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	9b af       	std	Y+59, r25	; 0x3b
    179c:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    179e:	8a ad       	ldd	r24, Y+58	; 0x3a
    17a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <Lcd_4bit_enuInit+0xd4>
    17a6:	9b af       	std	Y+59, r25	; 0x3b
    17a8:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	88 ad       	ldd	r24, Y+56	; 0x38
    17ac:	99 ad       	ldd	r25, Y+57	; 0x39
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	99 af       	std	Y+57, r25	; 0x39
    17b2:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	88 ad       	ldd	r24, Y+56	; 0x38
    17b6:	99 ad       	ldd	r25, Y+57	; 0x39
    17b8:	89 2b       	or	r24, r25
    17ba:	69 f7       	brne	.-38     	; 0x1796 <Lcd_4bit_enuInit+0xc8>
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	6c a9       	ldd	r22, Y+52	; 0x34
    17c0:	7d a9       	ldd	r23, Y+53	; 0x35
    17c2:	8e a9       	ldd	r24, Y+54	; 0x36
    17c4:	9f a9       	ldd	r25, Y+55	; 0x37
    17c6:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	99 af       	std	Y+57, r25	; 0x39
    17d0:	88 af       	std	Y+56, r24	; 0x38
    17d2:	88 ad       	ldd	r24, Y+56	; 0x38
    17d4:	99 ad       	ldd	r25, Y+57	; 0x39
    17d6:	9d af       	std	Y+61, r25	; 0x3d
    17d8:	8c af       	std	Y+60, r24	; 0x3c
    17da:	8c ad       	ldd	r24, Y+60	; 0x3c
    17dc:	9d ad       	ldd	r25, Y+61	; 0x3d
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <Lcd_4bit_enuInit+0x110>
    17e2:	9d af       	std	Y+61, r25	; 0x3d
    17e4:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    17e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    17e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    17ea:	68 e3       	ldi	r22, 0x38	; 56
    17ec:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a6 e1       	ldi	r26, 0x16	; 22
    17f8:	b3 e4       	ldi	r27, 0x43	; 67
    17fa:	8e 83       	std	Y+6, r24	; 0x06
    17fc:	9f 83       	std	Y+7, r25	; 0x07
    17fe:	a8 87       	std	Y+8, r26	; 0x08
    1800:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1802:	2b ea       	ldi	r18, 0xAB	; 171
    1804:	3a ea       	ldi	r19, 0xAA	; 170
    1806:	4a ea       	ldi	r20, 0xAA	; 170
    1808:	50 e4       	ldi	r21, 0x40	; 64
    180a:	6e 81       	ldd	r22, Y+6	; 0x06
    180c:	7f 81       	ldd	r23, Y+7	; 0x07
    180e:	88 85       	ldd	r24, Y+8	; 0x08
    1810:	99 85       	ldd	r25, Y+9	; 0x09
    1812:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	88 8f       	std	Y+24, r24	; 0x18
    181c:	99 8f       	std	Y+25, r25	; 0x19
    181e:	aa 8f       	std	Y+26, r26	; 0x1a
    1820:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	50 e4       	ldi	r21, 0x40	; 64
    182a:	6e 81       	ldd	r22, Y+6	; 0x06
    182c:	7f 81       	ldd	r23, Y+7	; 0x07
    182e:	88 85       	ldd	r24, Y+8	; 0x08
    1830:	99 85       	ldd	r25, Y+9	; 0x09
    1832:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	8c 8f       	std	Y+28, r24	; 0x1c
    183c:	9d 8f       	std	Y+29, r25	; 0x1d
    183e:	ae 8f       	std	Y+30, r26	; 0x1e
    1840:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	68 8d       	ldd	r22, Y+24	; 0x18
    184c:	79 8d       	ldd	r23, Y+25	; 0x19
    184e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1850:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1852:	0e 94 42 14 	call	0x2884	; 0x2884 <__cmpsf2>
    1856:	88 23       	and	r24, r24
    1858:	1c f4       	brge	.+6      	; 0x1860 <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	88 a3       	std	Y+32, r24	; 0x20
    185e:	b2 c0       	rjmp	.+356    	; 0x19c4 <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	57 e4       	ldi	r21, 0x47	; 71
    1868:	6c 8d       	ldd	r22, Y+28	; 0x1c
    186a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    186c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    186e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1870:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    1874:	18 16       	cp	r1, r24
    1876:	0c f0       	brlt	.+2      	; 0x187a <Lcd_4bit_enuInit+0x1ac>
    1878:	7b c0       	rjmp	.+246    	; 0x1970 <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	4a e7       	ldi	r20, 0x7A	; 122
    1880:	54 e4       	ldi	r21, 0x44	; 68
    1882:	6e 81       	ldd	r22, Y+6	; 0x06
    1884:	7f 81       	ldd	r23, Y+7	; 0x07
    1886:	88 85       	ldd	r24, Y+8	; 0x08
    1888:	99 85       	ldd	r25, Y+9	; 0x09
    188a:	0e 94 47 14 	call	0x288e	; 0x288e <__divsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	89 a3       	std	Y+33, r24	; 0x21
    1894:	9a a3       	std	Y+34, r25	; 0x22
    1896:	ab a3       	std	Y+35, r26	; 0x23
    1898:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a e7       	ldi	r20, 0x7A	; 122
    18a0:	55 e4       	ldi	r21, 0x45	; 69
    18a2:	69 a1       	ldd	r22, Y+33	; 0x21
    18a4:	7a a1       	ldd	r23, Y+34	; 0x22
    18a6:	8b a1       	ldd	r24, Y+35	; 0x23
    18a8:	9c a1       	ldd	r25, Y+36	; 0x24
    18aa:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	8d a3       	std	Y+37, r24	; 0x25
    18b4:	9e a3       	std	Y+38, r25	; 0x26
    18b6:	af a3       	std	Y+39, r26	; 0x27
    18b8:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	6d a1       	ldd	r22, Y+37	; 0x25
    18c4:	7e a1       	ldd	r23, Y+38	; 0x26
    18c6:	8f a1       	ldd	r24, Y+39	; 0x27
    18c8:	98 a5       	ldd	r25, Y+40	; 0x28
    18ca:	0e 94 42 14 	call	0x2884	; 0x2884 <__cmpsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9a a7       	std	Y+42, r25	; 0x2a
    18d8:	89 a7       	std	Y+41, r24	; 0x29
    18da:	3f c0       	rjmp	.+126    	; 0x195a <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	6d a1       	ldd	r22, Y+37	; 0x25
    18e6:	7e a1       	ldd	r23, Y+38	; 0x26
    18e8:	8f a1       	ldd	r24, Y+39	; 0x27
    18ea:	98 a5       	ldd	r25, Y+40	; 0x28
    18ec:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	69 a1       	ldd	r22, Y+33	; 0x21
    18fe:	7a a1       	ldd	r23, Y+34	; 0x22
    1900:	8b a1       	ldd	r24, Y+35	; 0x23
    1902:	9c a1       	ldd	r25, Y+36	; 0x24
    1904:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9a a7       	std	Y+42, r25	; 0x2a
    191a:	89 a7       	std	Y+41, r24	; 0x29
    191c:	0f c0       	rjmp	.+30     	; 0x193c <Lcd_4bit_enuInit+0x26e>
    191e:	80 e9       	ldi	r24, 0x90	; 144
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	9c a7       	std	Y+44, r25	; 0x2c
    1924:	8b a7       	std	Y+43, r24	; 0x2b
    1926:	8b a5       	ldd	r24, Y+43	; 0x2b
    1928:	9c a5       	ldd	r25, Y+44	; 0x2c
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <Lcd_4bit_enuInit+0x25c>
    192e:	9c a7       	std	Y+44, r25	; 0x2c
    1930:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	89 a5       	ldd	r24, Y+41	; 0x29
    1934:	9a a5       	ldd	r25, Y+42	; 0x2a
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	9a a7       	std	Y+42, r25	; 0x2a
    193a:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	89 a5       	ldd	r24, Y+41	; 0x29
    193e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1940:	89 2b       	or	r24, r25
    1942:	69 f7       	brne	.-38     	; 0x191e <Lcd_4bit_enuInit+0x250>
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	6d a1       	ldd	r22, Y+37	; 0x25
    1948:	7e a1       	ldd	r23, Y+38	; 0x26
    194a:	8f a1       	ldd	r24, Y+39	; 0x27
    194c:	98 a5       	ldd	r25, Y+40	; 0x28
    194e:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9a a7       	std	Y+42, r25	; 0x2a
    1958:	89 a7       	std	Y+41, r24	; 0x29
    195a:	89 a5       	ldd	r24, Y+41	; 0x29
    195c:	9a a5       	ldd	r25, Y+42	; 0x2a
    195e:	9e a7       	std	Y+46, r25	; 0x2e
    1960:	8d a7       	std	Y+45, r24	; 0x2d
    1962:	8d a5       	ldd	r24, Y+45	; 0x2d
    1964:	9e a5       	ldd	r25, Y+46	; 0x2e
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <Lcd_4bit_enuInit+0x298>
    196a:	9e a7       	std	Y+46, r25	; 0x2e
    196c:	8d a7       	std	Y+45, r24	; 0x2d
    196e:	2a c0       	rjmp	.+84     	; 0x19c4 <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	53 e4       	ldi	r21, 0x43	; 67
    1978:	68 8d       	ldd	r22, Y+24	; 0x18
    197a:	79 8d       	ldd	r23, Y+25	; 0x19
    197c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    197e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1980:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    1984:	18 16       	cp	r1, r24
    1986:	ac f4       	brge	.+42     	; 0x19b2 <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1988:	6c 8d       	ldd	r22, Y+28	; 0x1c
    198a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    198c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    198e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1990:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	98 ab       	std	Y+48, r25	; 0x30
    199a:	8f a7       	std	Y+47, r24	; 0x2f
    199c:	8f a5       	ldd	r24, Y+47	; 0x2f
    199e:	98 a9       	ldd	r25, Y+48	; 0x30
    19a0:	9a ab       	std	Y+50, r25	; 0x32
    19a2:	89 ab       	std	Y+49, r24	; 0x31
    19a4:	89 a9       	ldd	r24, Y+49	; 0x31
    19a6:	9a a9       	ldd	r25, Y+50	; 0x32
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <Lcd_4bit_enuInit+0x2da>
    19ac:	9a ab       	std	Y+50, r25	; 0x32
    19ae:	89 ab       	std	Y+49, r24	; 0x31
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19b2:	68 8d       	ldd	r22, Y+24	; 0x18
    19b4:	79 8d       	ldd	r23, Y+25	; 0x19
    19b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19ba:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	88 a3       	std	Y+32, r24	; 0x20
    19c4:	88 a1       	ldd	r24, Y+32	; 0x20
    19c6:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19c8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ca:	8a 95       	dec	r24
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <Lcd_4bit_enuInit+0x2fc>
    19ce:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    19d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    19d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    19d4:	68 e3       	ldi	r22, 0x38	; 56
    19d6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    19da:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    19dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    19de:	9f ad       	ldd	r25, Y+63	; 0x3f
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    19e6:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    19e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    19ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    19ec:	62 e0       	ldi	r22, 0x02	; 2
    19ee:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    19f2:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    19f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    19f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    19f8:	66 e0       	ldi	r22, 0x06	; 6
    19fa:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    19fe:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    1a00:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a02:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a04:	6c e0       	ldi	r22, 0x0C	; 12
    1a06:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1a0a:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    1a0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a10:	68 e2       	ldi	r22, 0x28	; 40
    1a12:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1a16:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    1a18:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a1c:	60 e8       	ldi	r22, 0x80	; 128
    1a1e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1a22:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    1a24:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a26:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 ea       	ldi	r26, 0xA0	; 160
    1a36:	b0 e4       	ldi	r27, 0x40	; 64
    1a38:	8a 87       	std	Y+10, r24	; 0x0a
    1a3a:	9b 87       	std	Y+11, r25	; 0x0b
    1a3c:	ac 87       	std	Y+12, r26	; 0x0c
    1a3e:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a e7       	ldi	r20, 0x7A	; 122
    1a46:	55 e4       	ldi	r21, 0x45	; 69
    1a48:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a4a:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a50:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	8e 87       	std	Y+14, r24	; 0x0e
    1a5a:	9f 87       	std	Y+15, r25	; 0x0f
    1a5c:	a8 8b       	std	Y+16, r26	; 0x10
    1a5e:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a6a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a6c:	88 89       	ldd	r24, Y+16	; 0x10
    1a6e:	99 89       	ldd	r25, Y+17	; 0x11
    1a70:	0e 94 42 14 	call	0x2884	; 0x2884 <__cmpsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9b 8b       	std	Y+19, r25	; 0x13
    1a7e:	8a 8b       	std	Y+18, r24	; 0x12
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a8c:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a8e:	88 89       	ldd	r24, Y+16	; 0x10
    1a90:	99 89       	ldd	r25, Y+17	; 0x11
    1a92:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	4c f5       	brge	.+82     	; 0x1aec <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	6a 85       	ldd	r22, Y+10	; 0x0a
    1aa4:	7b 85       	ldd	r23, Y+11	; 0x0b
    1aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aa8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aaa:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9b 8b       	std	Y+19, r25	; 0x13
    1ac0:	8a 8b       	std	Y+18, r24	; 0x12
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <Lcd_4bit_enuInit+0x414>
    1ac4:	80 e9       	ldi	r24, 0x90	; 144
    1ac6:	91 e0       	ldi	r25, 0x01	; 1
    1ac8:	9d 8b       	std	Y+21, r25	; 0x15
    1aca:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1acc:	8c 89       	ldd	r24, Y+20	; 0x14
    1ace:	9d 89       	ldd	r25, Y+21	; 0x15
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <Lcd_4bit_enuInit+0x402>
    1ad4:	9d 8b       	std	Y+21, r25	; 0x15
    1ad6:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	8a 89       	ldd	r24, Y+18	; 0x12
    1ada:	9b 89       	ldd	r25, Y+19	; 0x13
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9b 8b       	std	Y+19, r25	; 0x13
    1ae0:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae4:	9b 89       	ldd	r25, Y+19	; 0x13
    1ae6:	89 2b       	or	r24, r25
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <Lcd_4bit_enuInit+0x3f6>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	6e 85       	ldd	r22, Y+14	; 0x0e
    1aee:	7f 85       	ldd	r23, Y+15	; 0x0f
    1af0:	88 89       	ldd	r24, Y+16	; 0x10
    1af2:	99 89       	ldd	r25, Y+17	; 0x11
    1af4:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9b 8b       	std	Y+19, r25	; 0x13
    1afe:	8a 8b       	std	Y+18, r24	; 0x12
    1b00:	8a 89       	ldd	r24, Y+18	; 0x12
    1b02:	9b 89       	ldd	r25, Y+19	; 0x13
    1b04:	9f 8b       	std	Y+23, r25	; 0x17
    1b06:	8e 8b       	std	Y+22, r24	; 0x16
    1b08:	8e 89       	ldd	r24, Y+22	; 0x16
    1b0a:	9f 89       	ldd	r25, Y+23	; 0x17
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <Lcd_4bit_enuInit+0x43e>
    1b10:	9f 8b       	std	Y+23, r25	; 0x17
    1b12:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b16:	ef 96       	adiw	r28, 0x3f	; 63
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <Lcd_4bit_enuSendCommand+0x6>
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <Lcd_4bit_enuSendCommand+0x8>
    1b30:	1f 92       	push	r1
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	9c 83       	std	Y+4, r25	; 0x04
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1b3c:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    1b3e:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	89 2b       	or	r24, r25
    1b46:	19 f4       	brne	.+6      	; 0x1b4e <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1b48:	82 e0       	ldi	r24, 0x02	; 2
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	22 c0       	rjmp	.+68     	; 0x1b92 <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	fc 01       	movw	r30, r24
    1b54:	84 81       	ldd	r24, Z+4	; 0x04
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	28 2f       	mov	r18, r24
    1b62:	22 95       	swap	r18
    1b64:	2f 70       	andi	r18, 0x0F	; 15
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	62 2f       	mov	r22, r18
    1b6c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <Lcd_4bit_enuSet4BitsOnPins>
    1b70:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	0e 94 37 10 	call	0x206e	; 0x206e <Lcd_4bit_enuSendEnableSignal>
    1b7a:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	6d 81       	ldd	r22, Y+5	; 0x05
    1b82:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <Lcd_4bit_enuSet4BitsOnPins>
    1b86:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	0e 94 37 10 	call	0x206e	; 0x206e <Lcd_4bit_enuSendEnableSignal>
    1b90:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	08 95       	ret

00001ba4 <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <Lcd_4bit_enuDisplayCharacter+0x6>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <Lcd_4bit_enuDisplayCharacter+0x8>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	9b 83       	std	Y+3, r25	; 0x03
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
    1bb4:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1bb6:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbc:	89 2b       	or	r24, r25
    1bbe:	19 f4       	brne	.+6      	; 0x1bc6 <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	22 c0       	rjmp	.+68     	; 0x1c0a <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	fc 01       	movw	r30, r24
    1bcc:	84 81       	ldd	r24, Z+4	; 0x04
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    1bd4:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	28 2f       	mov	r18, r24
    1bda:	22 95       	swap	r18
    1bdc:	2f 70       	andi	r18, 0x0F	; 15
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	9b 81       	ldd	r25, Y+3	; 0x03
    1be2:	62 2f       	mov	r22, r18
    1be4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <Lcd_4bit_enuSet4BitsOnPins>
    1be8:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	0e 94 37 10 	call	0x206e	; 0x206e <Lcd_4bit_enuSendEnableSignal>
    1bf2:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	6c 81       	ldd	r22, Y+4	; 0x04
    1bfa:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <Lcd_4bit_enuSet4BitsOnPins>
    1bfe:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	9b 81       	ldd	r25, Y+3	; 0x03
    1c04:	0e 94 37 10 	call	0x206e	; 0x206e <Lcd_4bit_enuSendEnableSignal>
    1c08:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9b 83       	std	Y+3, r25	; 0x03
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
    1c2c:	6c 83       	std	Y+4, r22	; 0x04
    1c2e:	4d 83       	std	Y+5, r20	; 0x05
    1c30:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1c32:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	89 2b       	or	r24, r25
    1c3a:	19 f4       	brne	.+6      	; 0x1c42 <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	29 c0       	rjmp	.+82     	; 0x1c94 <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	9b 81       	ldd	r25, Y+3	; 0x03
    1c46:	4e 81       	ldd	r20, Y+6	; 0x06
    1c48:	6d 81       	ldd	r22, Y+5	; 0x05
    1c4a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <Lcd_4bit_enuGoToXY>
    1c4e:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	fc 01       	movw	r30, r24
    1c56:	84 81       	ldd	r24, Z+4	; 0x04
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	28 2f       	mov	r18, r24
    1c64:	22 95       	swap	r18
    1c66:	2f 70       	andi	r18, 0x0F	; 15
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6c:	62 2f       	mov	r22, r18
    1c6e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <Lcd_4bit_enuSet4BitsOnPins>
    1c72:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	9b 81       	ldd	r25, Y+3	; 0x03
    1c78:	0e 94 37 10 	call	0x206e	; 0x206e <Lcd_4bit_enuSendEnableSignal>
    1c7c:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	6c 81       	ldd	r22, Y+4	; 0x04
    1c84:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <Lcd_4bit_enuSet4BitsOnPins>
    1c88:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	0e 94 37 10 	call	0x206e	; 0x206e <Lcd_4bit_enuSendEnableSignal>
    1c92:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c96:	26 96       	adiw	r28, 0x06	; 6
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <Lcd_4bit_enuCreateCustomCharacter>:


Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	27 97       	sbiw	r28, 0x07	; 7
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
    1cc0:	7e 83       	std	Y+6, r23	; 0x06
    1cc2:	6d 83       	std	Y+5, r22	; 0x05
    1cc4:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1cc6:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    1cc8:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	89 2b       	or	r24, r25
    1cd0:	21 f0       	breq	.+8      	; 0x1cda <Lcd_4bit_enuCreateCustomCharacter+0x32>
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	89 2b       	or	r24, r25
    1cd8:	19 f4       	brne	.+6      	; 0x1ce0 <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	30 c0       	rjmp	.+96     	; 0x1d40 <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    1ce0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce2:	88 30       	cpi	r24, 0x08	; 8
    1ce4:	18 f0       	brcs	.+6      	; 0x1cec <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	2a c0       	rjmp	.+84     	; 0x1d40 <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    1cec:	8f 81       	ldd	r24, Y+7	; 0x07
    1cee:	88 2f       	mov	r24, r24
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	08 96       	adiw	r24, 0x08	; 8
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	22 0f       	add	r18, r18
    1cf8:	22 0f       	add	r18, r18
    1cfa:	22 0f       	add	r18, r18
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	62 2f       	mov	r22, r18
    1d02:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1d06:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    1d08:	1a 82       	std	Y+2, r1	; 0x02
    1d0a:	11 c0       	rjmp	.+34     	; 0x1d2e <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	2d 81       	ldd	r18, Y+5	; 0x05
    1d14:	3e 81       	ldd	r19, Y+6	; 0x06
    1d16:	82 0f       	add	r24, r18
    1d18:	93 1f       	adc	r25, r19
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 81       	ld	r18, Z
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	62 2f       	mov	r22, r18
    1d24:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	88 30       	cpi	r24, 0x08	; 8
    1d32:	60 f3       	brcs	.-40     	; 0x1d0c <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	60 e8       	ldi	r22, 0x80	; 128
    1d3a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1d3e:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1d40:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d42:	27 96       	adiw	r28, 0x07	; 7
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	08 95       	ret

00001d54 <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <Lcd_4bit_enuGoToXY+0x6>
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <Lcd_4bit_enuGoToXY+0x8>
    1d5c:	1f 92       	push	r1
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	9b 83       	std	Y+3, r25	; 0x03
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    1d66:	6c 83       	std	Y+4, r22	; 0x04
    1d68:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	89 2b       	or	r24, r25
    1d72:	19 f4       	brne	.+6      	; 0x1d7a <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	56 c0       	rjmp	.+172    	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	85 30       	cpi	r24, 0x05	; 5
    1d7e:	18 f0       	brcs	.+6      	; 0x1d86 <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    1d80:	85 e0       	ldi	r24, 0x05	; 5
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	50 c0       	rjmp	.+160    	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	85 31       	cpi	r24, 0x15	; 21
    1d8a:	18 f0       	brcs	.+6      	; 0x1d92 <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    1d8c:	84 e0       	ldi	r24, 0x04	; 4
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	4a c0       	rjmp	.+148    	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	81 50       	subi	r24, 0x01	; 1
    1d96:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    1d98:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	82 30       	cpi	r24, 0x02	; 2
    1da0:	91 05       	cpc	r25, r1
    1da2:	c9 f0       	breq	.+50     	; 0x1dd6 <Lcd_4bit_enuGoToXY+0x82>
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	1c f4       	brge	.+6      	; 0x1db0 <Lcd_4bit_enuGoToXY+0x5c>
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	39 f0       	breq	.+14     	; 0x1dbc <Lcd_4bit_enuGoToXY+0x68>
    1dae:	3a c0       	rjmp	.+116    	; 0x1e24 <Lcd_4bit_enuGoToXY+0xd0>
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	91 05       	cpc	r25, r1
    1db4:	e9 f0       	breq	.+58     	; 0x1df0 <Lcd_4bit_enuGoToXY+0x9c>
    1db6:	04 97       	sbiw	r24, 0x04	; 4
    1db8:	41 f1       	breq	.+80     	; 0x1e0a <Lcd_4bit_enuGoToXY+0xb6>
    1dba:	34 c0       	rjmp	.+104    	; 0x1e24 <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	20 e8       	ldi	r18, 0x80	; 128
    1dc0:	28 0f       	add	r18, r24
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	62 2f       	mov	r22, r18
    1dc8:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1dcc:	98 2f       	mov	r25, r24
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	89 23       	and	r24, r25
    1dd2:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1dd4:	28 c0       	rjmp	.+80     	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	20 ec       	ldi	r18, 0xC0	; 192
    1dda:	28 0f       	add	r18, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
    1de0:	62 2f       	mov	r22, r18
    1de2:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1de6:	98 2f       	mov	r25, r24
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	89 23       	and	r24, r25
    1dec:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1dee:	1b c0       	rjmp	.+54     	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	24 e9       	ldi	r18, 0x94	; 148
    1df4:	28 0f       	add	r18, r24
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	62 2f       	mov	r22, r18
    1dfc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1e00:	98 2f       	mov	r25, r24
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	89 23       	and	r24, r25
    1e06:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1e08:	0e c0       	rjmp	.+28     	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	24 ed       	ldi	r18, 0xD4	; 212
    1e0e:	28 0f       	add	r18, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	62 2f       	mov	r22, r18
    1e16:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1e1a:	98 2f       	mov	r25, r24
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	89 23       	and	r24, r25
    1e20:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    1e24:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	08 95       	ret

00001e38 <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <Lcd_4bit_enuDisplayString+0x6>
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <Lcd_4bit_enuDisplayString+0x8>
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <Lcd_4bit_enuDisplayString+0xa>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	7e 83       	std	Y+6, r23	; 0x06
    1e4c:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1e4e:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    1e50:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	89 2b       	or	r24, r25
    1e58:	21 f0       	breq	.+8      	; 0x1e62 <Lcd_4bit_enuDisplayString+0x2a>
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	89 2b       	or	r24, r25
    1e60:	a9 f4       	brne	.+42     	; 0x1e8c <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	1d c0       	rjmp	.+58     	; 0x1ea2 <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e70:	3e 81       	ldd	r19, Y+6	; 0x06
    1e72:	82 0f       	add	r24, r18
    1e74:	93 1f       	adc	r25, r19
    1e76:	fc 01       	movw	r30, r24
    1e78:	20 81       	ld	r18, Z
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	62 2f       	mov	r22, r18
    1e80:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Lcd_4bit_enuDisplayCharacter>
    1e84:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	88 2f       	mov	r24, r24
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	2d 81       	ldd	r18, Y+5	; 0x05
    1e94:	3e 81       	ldd	r19, Y+6	; 0x06
    1e96:	82 0f       	add	r24, r18
    1e98:	93 1f       	adc	r25, r19
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	80 81       	ld	r24, Z
    1e9e:	88 23       	and	r24, r24
    1ea0:	19 f7       	brne	.-58     	; 0x1e68 <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ea4:	26 96       	adiw	r28, 0x06	; 6
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	08 95       	ret

00001eb6 <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number){
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	cc 56       	subi	r28, 0x6C	; 108
    1ec0:	d1 09       	sbc	r29, r1
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	9e 01       	movw	r18, r28
    1ece:	29 59       	subi	r18, 0x99	; 153
    1ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed2:	f9 01       	movw	r30, r18
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
    1ed8:	ce 01       	movw	r24, r28
    1eda:	87 59       	subi	r24, 0x97	; 151
    1edc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ede:	fc 01       	movw	r30, r24
    1ee0:	40 83       	st	Z, r20
    1ee2:	51 83       	std	Z+1, r21	; 0x01
    1ee4:	62 83       	std	Z+2, r22	; 0x02
    1ee6:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1ee8:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    1eea:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    1eec:	ce 01       	movw	r24, r28
    1eee:	89 59       	subi	r24, 0x99	; 153
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	89 2b       	or	r24, r25
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <Lcd_4bit_enuDisplayNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	1e c0       	rjmp	.+60     	; 0x1f3e <Lcd_4bit_enuDisplayNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    1f02:	9e 01       	movw	r18, r28
    1f04:	2d 5f       	subi	r18, 0xFD	; 253
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	ce 01       	movw	r24, r28
    1f0a:	87 59       	subi	r24, 0x97	; 151
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	fc 01       	movw	r30, r24
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	a2 81       	ldd	r26, Z+2	; 0x02
    1f16:	b3 81       	ldd	r27, Z+3	; 0x03
    1f18:	a9 01       	movw	r20, r18
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <Convert_IntToString>
    1f22:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    1f24:	9e 01       	movw	r18, r28
    1f26:	2d 5f       	subi	r18, 0xFD	; 253
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	89 59       	subi	r24, 0x99	; 153
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	fc 01       	movw	r30, r24
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	b9 01       	movw	r22, r18
    1f38:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <Lcd_4bit_enuDisplayString>
    1f3c:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f40:	c4 59       	subi	r28, 0x94	; 148
    1f42:	df 4f       	sbci	r29, 0xFF	; 255
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f32 Copy_f32Number){
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	cc 56       	subi	r28, 0x6C	; 108
    1f5e:	d1 09       	sbc	r29, r1
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	9e 01       	movw	r18, r28
    1f6c:	29 59       	subi	r18, 0x99	; 153
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	f9 01       	movw	r30, r18
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	ce 01       	movw	r24, r28
    1f78:	87 59       	subi	r24, 0x97	; 151
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	40 83       	st	Z, r20
    1f80:	51 83       	std	Z+1, r21	; 0x01
    1f82:	62 83       	std	Z+2, r22	; 0x02
    1f84:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1f86:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    1f88:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	89 59       	subi	r24, 0x99	; 153
    1f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f90:	fc 01       	movw	r30, r24
    1f92:	80 81       	ld	r24, Z
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	89 2b       	or	r24, r25
    1f98:	19 f4       	brne	.+6      	; 0x1fa0 <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	1e c0       	rjmp	.+60     	; 0x1fdc <Lcd_4bit_enuDisplayFloatNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_FloatToString(Copy_f32Number, Loc_u8ConvertedNumberInArray);
    1fa0:	9e 01       	movw	r18, r28
    1fa2:	2d 5f       	subi	r18, 0xFD	; 253
    1fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	87 59       	subi	r24, 0x97	; 151
    1faa:	9f 4f       	sbci	r25, 0xFF	; 255
    1fac:	fc 01       	movw	r30, r24
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fb4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fb6:	a9 01       	movw	r20, r18
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 88 00 	call	0x110	; 0x110 <Convert_FloatToString>
    1fc0:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    1fc2:	9e 01       	movw	r18, r28
    1fc4:	2d 5f       	subi	r18, 0xFD	; 253
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	ce 01       	movw	r24, r28
    1fca:	89 59       	subi	r24, 0x99	; 153
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	fc 01       	movw	r30, r24
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	b9 01       	movw	r22, r18
    1fd6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <Lcd_4bit_enuDisplayString>
    1fda:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01

}
    1fde:	c4 59       	subi	r28, 0x94	; 148
    1fe0:	df 4f       	sbci	r29, 0xFF	; 255
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	08 95       	ret

00001ff2 <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <Lcd_4bit_enuSet4BitsOnPins+0x6>
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <Lcd_4bit_enuSet4BitsOnPins+0x8>
    1ffa:	1f 92       	push	r1
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	8b 83       	std	Y+3, r24	; 0x03
    2004:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2006:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    2008:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	89 2b       	or	r24, r25
    2010:	19 f4       	brne	.+6      	; 0x2018 <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	22 c0       	rjmp	.+68     	; 0x205c <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2018:	1a 82       	std	Y+2, r1	; 0x02
    201a:	1d c0       	rjmp	.+58     	; 0x2056 <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	88 2f       	mov	r24, r24
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	2a 81       	ldd	r18, Y+2	; 0x02
    2024:	22 2f       	mov	r18, r18
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	02 c0       	rjmp	.+4      	; 0x202e <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    202a:	95 95       	asr	r25
    202c:	87 95       	ror	r24
    202e:	2a 95       	dec	r18
    2030:	e2 f7       	brpl	.-8      	; 0x202a <Lcd_4bit_enuSet4BitsOnPins+0x38>
    2032:	48 2f       	mov	r20, r24
    2034:	41 70       	andi	r20, 0x01	; 1
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	82 0f       	add	r24, r18
    2042:	93 1f       	adc	r25, r19
    2044:	fc 01       	movw	r30, r24
    2046:	80 81       	ld	r24, Z
    2048:	64 2f       	mov	r22, r20
    204a:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    204e:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	8f 5f       	subi	r24, 0xFF	; 255
    2054:	8a 83       	std	Y+2, r24	; 0x02
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	84 30       	cpi	r24, 0x04	; 4
    205a:	00 f3       	brcs	.-64     	; 0x201c <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    205c:	89 81       	ldd	r24, Y+1	; 0x01

}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	a3 97       	sbiw	r28, 0x23	; 35
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	9b a3       	std	Y+35, r25	; 0x23
    2084:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2086:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    2088:	8a a1       	ldd	r24, Y+34	; 0x22
    208a:	9b a1       	ldd	r25, Y+35	; 0x23
    208c:	89 2b       	or	r24, r25
    208e:	19 f4       	brne	.+6      	; 0x2096 <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	ff c0       	rjmp	.+510    	; 0x2294 <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    2096:	8a a1       	ldd	r24, Y+34	; 0x22
    2098:	9b a1       	ldd	r25, Y+35	; 0x23
    209a:	fc 01       	movw	r30, r24
    209c:	85 81       	ldd	r24, Z+5	; 0x05
    209e:	61 e0       	ldi	r22, 0x01	; 1
    20a0:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a0 ea       	ldi	r26, 0xA0	; 160
    20ac:	b0 e4       	ldi	r27, 0x40	; 64
    20ae:	8a 83       	std	Y+2, r24	; 0x02
    20b0:	9b 83       	std	Y+3, r25	; 0x03
    20b2:	ac 83       	std	Y+4, r26	; 0x04
    20b4:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    20b6:	2b ea       	ldi	r18, 0xAB	; 171
    20b8:	3a ea       	ldi	r19, 0xAA	; 170
    20ba:	4a ea       	ldi	r20, 0xAA	; 170
    20bc:	50 e4       	ldi	r21, 0x40	; 64
    20be:	6a 81       	ldd	r22, Y+2	; 0x02
    20c0:	7b 81       	ldd	r23, Y+3	; 0x03
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	9d 81       	ldd	r25, Y+5	; 0x05
    20c6:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	8e 83       	std	Y+6, r24	; 0x06
    20d0:	9f 83       	std	Y+7, r25	; 0x07
    20d2:	a8 87       	std	Y+8, r26	; 0x08
    20d4:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	50 e4       	ldi	r21, 0x40	; 64
    20de:	6a 81       	ldd	r22, Y+2	; 0x02
    20e0:	7b 81       	ldd	r23, Y+3	; 0x03
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	8a 87       	std	Y+10, r24	; 0x0a
    20f0:	9b 87       	std	Y+11, r25	; 0x0b
    20f2:	ac 87       	std	Y+12, r26	; 0x0c
    20f4:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	6e 81       	ldd	r22, Y+6	; 0x06
    2100:	7f 81       	ldd	r23, Y+7	; 0x07
    2102:	88 85       	ldd	r24, Y+8	; 0x08
    2104:	99 85       	ldd	r25, Y+9	; 0x09
    2106:	0e 94 42 14 	call	0x2884	; 0x2884 <__cmpsf2>
    210a:	88 23       	and	r24, r24
    210c:	1c f4       	brge	.+6      	; 0x2114 <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	8e 87       	std	Y+14, r24	; 0x0e
    2112:	b2 c0       	rjmp	.+356    	; 0x2278 <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	6a 85       	ldd	r22, Y+10	; 0x0a
    211e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2120:	8c 85       	ldd	r24, Y+12	; 0x0c
    2122:	9d 85       	ldd	r25, Y+13	; 0x0d
    2124:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    2128:	18 16       	cp	r1, r24
    212a:	0c f0       	brlt	.+2      	; 0x212e <Lcd_4bit_enuSendEnableSignal+0xc0>
    212c:	7b c0       	rjmp	.+246    	; 0x2224 <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a e7       	ldi	r20, 0x7A	; 122
    2134:	54 e4       	ldi	r21, 0x44	; 68
    2136:	6a 81       	ldd	r22, Y+2	; 0x02
    2138:	7b 81       	ldd	r23, Y+3	; 0x03
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	9d 81       	ldd	r25, Y+5	; 0x05
    213e:	0e 94 47 14 	call	0x288e	; 0x288e <__divsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	8f 87       	std	Y+15, r24	; 0x0f
    2148:	98 8b       	std	Y+16, r25	; 0x10
    214a:	a9 8b       	std	Y+17, r26	; 0x11
    214c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a e7       	ldi	r20, 0x7A	; 122
    2154:	55 e4       	ldi	r21, 0x45	; 69
    2156:	6f 85       	ldd	r22, Y+15	; 0x0f
    2158:	78 89       	ldd	r23, Y+16	; 0x10
    215a:	89 89       	ldd	r24, Y+17	; 0x11
    215c:	9a 89       	ldd	r25, Y+18	; 0x12
    215e:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8b 8b       	std	Y+19, r24	; 0x13
    2168:	9c 8b       	std	Y+20, r25	; 0x14
    216a:	ad 8b       	std	Y+21, r26	; 0x15
    216c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	6b 89       	ldd	r22, Y+19	; 0x13
    2178:	7c 89       	ldd	r23, Y+20	; 0x14
    217a:	8d 89       	ldd	r24, Y+21	; 0x15
    217c:	9e 89       	ldd	r25, Y+22	; 0x16
    217e:	0e 94 42 14 	call	0x2884	; 0x2884 <__cmpsf2>
    2182:	88 23       	and	r24, r24
    2184:	2c f4       	brge	.+10     	; 0x2190 <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	98 8f       	std	Y+24, r25	; 0x18
    218c:	8f 8b       	std	Y+23, r24	; 0x17
    218e:	3f c0       	rjmp	.+126    	; 0x220e <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	6b 89       	ldd	r22, Y+19	; 0x13
    219a:	7c 89       	ldd	r23, Y+20	; 0x14
    219c:	8d 89       	ldd	r24, Y+21	; 0x15
    219e:	9e 89       	ldd	r25, Y+22	; 0x16
    21a0:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    21a4:	18 16       	cp	r1, r24
    21a6:	4c f5       	brge	.+82     	; 0x21fa <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	6f 85       	ldd	r22, Y+15	; 0x0f
    21b2:	78 89       	ldd	r23, Y+16	; 0x10
    21b4:	89 89       	ldd	r24, Y+17	; 0x11
    21b6:	9a 89       	ldd	r25, Y+18	; 0x12
    21b8:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	98 8f       	std	Y+24, r25	; 0x18
    21ce:	8f 8b       	std	Y+23, r24	; 0x17
    21d0:	0f c0       	rjmp	.+30     	; 0x21f0 <Lcd_4bit_enuSendEnableSignal+0x182>
    21d2:	80 e9       	ldi	r24, 0x90	; 144
    21d4:	91 e0       	ldi	r25, 0x01	; 1
    21d6:	9a 8f       	std	Y+26, r25	; 0x1a
    21d8:	89 8f       	std	Y+25, r24	; 0x19
    21da:	89 8d       	ldd	r24, Y+25	; 0x19
    21dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <Lcd_4bit_enuSendEnableSignal+0x170>
    21e2:	9a 8f       	std	Y+26, r25	; 0x1a
    21e4:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	98 8f       	std	Y+24, r25	; 0x18
    21ee:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	8f 89       	ldd	r24, Y+23	; 0x17
    21f2:	98 8d       	ldd	r25, Y+24	; 0x18
    21f4:	89 2b       	or	r24, r25
    21f6:	69 f7       	brne	.-38     	; 0x21d2 <Lcd_4bit_enuSendEnableSignal+0x164>
    21f8:	3f c0       	rjmp	.+126    	; 0x2278 <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fa:	6b 89       	ldd	r22, Y+19	; 0x13
    21fc:	7c 89       	ldd	r23, Y+20	; 0x14
    21fe:	8d 89       	ldd	r24, Y+21	; 0x15
    2200:	9e 89       	ldd	r25, Y+22	; 0x16
    2202:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	98 8f       	std	Y+24, r25	; 0x18
    220c:	8f 8b       	std	Y+23, r24	; 0x17
    220e:	8f 89       	ldd	r24, Y+23	; 0x17
    2210:	98 8d       	ldd	r25, Y+24	; 0x18
    2212:	9c 8f       	std	Y+28, r25	; 0x1c
    2214:	8b 8f       	std	Y+27, r24	; 0x1b
    2216:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2218:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <Lcd_4bit_enuSendEnableSignal+0x1ac>
    221e:	9c 8f       	std	Y+28, r25	; 0x1c
    2220:	8b 8f       	std	Y+27, r24	; 0x1b
    2222:	2a c0       	rjmp	.+84     	; 0x2278 <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4f e7       	ldi	r20, 0x7F	; 127
    222a:	53 e4       	ldi	r21, 0x43	; 67
    222c:	6e 81       	ldd	r22, Y+6	; 0x06
    222e:	7f 81       	ldd	r23, Y+7	; 0x07
    2230:	88 85       	ldd	r24, Y+8	; 0x08
    2232:	99 85       	ldd	r25, Y+9	; 0x09
    2234:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    2238:	18 16       	cp	r1, r24
    223a:	ac f4       	brge	.+42     	; 0x2266 <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    223c:	6a 85       	ldd	r22, Y+10	; 0x0a
    223e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2240:	8c 85       	ldd	r24, Y+12	; 0x0c
    2242:	9d 85       	ldd	r25, Y+13	; 0x0d
    2244:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9e 8f       	std	Y+30, r25	; 0x1e
    224e:	8d 8f       	std	Y+29, r24	; 0x1d
    2250:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2252:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2254:	98 a3       	std	Y+32, r25	; 0x20
    2256:	8f 8f       	std	Y+31, r24	; 0x1f
    2258:	8f 8d       	ldd	r24, Y+31	; 0x1f
    225a:	98 a1       	ldd	r25, Y+32	; 0x20
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <Lcd_4bit_enuSendEnableSignal+0x1ee>
    2260:	98 a3       	std	Y+32, r25	; 0x20
    2262:	8f 8f       	std	Y+31, r24	; 0x1f
    2264:	0f c0       	rjmp	.+30     	; 0x2284 <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2266:	6e 81       	ldd	r22, Y+6	; 0x06
    2268:	7f 81       	ldd	r23, Y+7	; 0x07
    226a:	88 85       	ldd	r24, Y+8	; 0x08
    226c:	99 85       	ldd	r25, Y+9	; 0x09
    226e:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	8e 87       	std	Y+14, r24	; 0x0e
    2278:	8e 85       	ldd	r24, Y+14	; 0x0e
    227a:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    227c:	89 a1       	ldd	r24, Y+33	; 0x21
    227e:	8a 95       	dec	r24
    2280:	f1 f7       	brne	.-4      	; 0x227e <Lcd_4bit_enuSendEnableSignal+0x210>
    2282:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    2284:	8a a1       	ldd	r24, Y+34	; 0x22
    2286:	9b a1       	ldd	r25, Y+35	; 0x23
    2288:	fc 01       	movw	r30, r24
    228a:	85 81       	ldd	r24, Z+5	; 0x05
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    2292:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2294:	89 81       	ldd	r24, Y+1	; 0x01

}
    2296:	a3 96       	adiw	r28, 0x23	; 35
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	29 97       	sbiw	r28, 0x09	; 9
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	9f 83       	std	Y+7, r25	; 0x07
    22be:	8e 83       	std	Y+6, r24	; 0x06
    22c0:	79 87       	std	Y+9, r23	; 0x09
    22c2:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    22c4:	83 e0       	ldi	r24, 0x03	; 3
    22c6:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    22c8:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    22ca:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    22cc:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    22ce:	8e 81       	ldd	r24, Y+6	; 0x06
    22d0:	9f 81       	ldd	r25, Y+7	; 0x07
    22d2:	fc 01       	movw	r30, r24
    22d4:	81 85       	ldd	r24, Z+9	; 0x09
    22d6:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    22d8:	8e 81       	ldd	r24, Y+6	; 0x06
    22da:	9f 81       	ldd	r25, Y+7	; 0x07
    22dc:	89 2b       	or	r24, r25
    22de:	21 f0       	breq	.+8      	; 0x22e8 <Keypad_enuRead+0x40>
    22e0:	88 85       	ldd	r24, Y+8	; 0x08
    22e2:	99 85       	ldd	r25, Y+9	; 0x09
    22e4:	89 2b       	or	r24, r25
    22e6:	19 f4       	brne	.+6      	; 0x22ee <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	df c0       	rjmp	.+446    	; 0x24ac <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    22ee:	8e 81       	ldd	r24, Y+6	; 0x06
    22f0:	9f 81       	ldd	r25, Y+7	; 0x07
    22f2:	0e 94 60 12 	call	0x24c0	; 0x24c0 <Keypad_DisableControlPins>
    22f6:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    22f8:	8e 81       	ldd	r24, Y+6	; 0x06
    22fa:	9f 81       	ldd	r25, Y+7	; 0x07
    22fc:	fc 01       	movw	r30, r24
    22fe:	80 85       	ldd	r24, Z+8	; 0x08
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	21 f0       	breq	.+8      	; 0x2310 <Keypad_enuRead+0x68>
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	09 f4       	brne	.+2      	; 0x230e <Keypad_enuRead+0x66>
    230c:	67 c0       	rjmp	.+206    	; 0x23dc <Keypad_enuRead+0x134>
    230e:	cc c0       	rjmp	.+408    	; 0x24a8 <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    2310:	1a 82       	std	Y+2, r1	; 0x02
    2312:	5f c0       	rjmp	.+190    	; 0x23d2 <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    2314:	8e 81       	ldd	r24, Y+6	; 0x06
    2316:	9f 81       	ldd	r25, Y+7	; 0x07
    2318:	fc 01       	movw	r30, r24
    231a:	91 85       	ldd	r25, Z+9	; 0x09
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	99 23       	and	r25, r25
    2320:	09 f0       	breq	.+2      	; 0x2324 <Keypad_enuRead+0x7c>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	48 2f       	mov	r20, r24
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	2e 81       	ldd	r18, Y+6	; 0x06
    232e:	3f 81       	ldd	r19, Y+7	; 0x07
    2330:	82 0f       	add	r24, r18
    2332:	93 1f       	adc	r25, r19
    2334:	fc 01       	movw	r30, r24
    2336:	80 81       	ld	r24, Z
    2338:	64 2f       	mov	r22, r20
    233a:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    233e:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    2340:	1b 82       	std	Y+3, r1	; 0x03
    2342:	30 c0       	rjmp	.+96     	; 0x23a4 <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	2e 81       	ldd	r18, Y+6	; 0x06
    234c:	3f 81       	ldd	r19, Y+7	; 0x07
    234e:	82 0f       	add	r24, r18
    2350:	93 1f       	adc	r25, r19
    2352:	04 96       	adiw	r24, 0x04	; 4
    2354:	fc 01       	movw	r30, r24
    2356:	20 81       	ld	r18, Z
    2358:	ce 01       	movw	r24, r28
    235a:	05 96       	adiw	r24, 0x05	; 5
    235c:	bc 01       	movw	r22, r24
    235e:	82 2f       	mov	r24, r18
    2360:	0e 94 65 06 	call	0xcca	; 0xcca <Dio_enuReadChannel>
    2364:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    2366:	8e 81       	ldd	r24, Y+6	; 0x06
    2368:	9f 81       	ldd	r25, Y+7	; 0x07
    236a:	fc 01       	movw	r30, r24
    236c:	91 85       	ldd	r25, Z+9	; 0x09
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	98 17       	cp	r25, r24
    2372:	a9 f0       	breq	.+42     	; 0x239e <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	22 0f       	add	r18, r18
    2382:	33 1f       	adc	r19, r19
    2384:	22 0f       	add	r18, r18
    2386:	33 1f       	adc	r19, r19
    2388:	82 0f       	add	r24, r18
    238a:	93 1f       	adc	r25, r19
    238c:	84 53       	subi	r24, 0x34	; 52
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	fc 01       	movw	r30, r24
    2392:	20 81       	ld	r18, Z
    2394:	88 85       	ldd	r24, Y+8	; 0x08
    2396:	99 85       	ldd	r25, Y+9	; 0x09
    2398:	fc 01       	movw	r30, r24
    239a:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    239c:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	8f 5f       	subi	r24, 0xFF	; 255
    23a2:	8b 83       	std	Y+3, r24	; 0x03
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	84 30       	cpi	r24, 0x04	; 4
    23a8:	68 f2       	brcs	.-102    	; 0x2344 <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    23aa:	8e 81       	ldd	r24, Y+6	; 0x06
    23ac:	9f 81       	ldd	r25, Y+7	; 0x07
    23ae:	fc 01       	movw	r30, r24
    23b0:	41 85       	ldd	r20, Z+9	; 0x09
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	2e 81       	ldd	r18, Y+6	; 0x06
    23ba:	3f 81       	ldd	r19, Y+7	; 0x07
    23bc:	82 0f       	add	r24, r18
    23be:	93 1f       	adc	r25, r19
    23c0:	fc 01       	movw	r30, r24
    23c2:	80 81       	ld	r24, Z
    23c4:	64 2f       	mov	r22, r20
    23c6:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    23ca:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	8a 83       	std	Y+2, r24	; 0x02
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	84 30       	cpi	r24, 0x04	; 4
    23d6:	08 f4       	brcc	.+2      	; 0x23da <Keypad_enuRead+0x132>
    23d8:	9d cf       	rjmp	.-198    	; 0x2314 <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    23da:	68 c0       	rjmp	.+208    	; 0x24ac <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    23dc:	1b 82       	std	Y+3, r1	; 0x03
    23de:	5f c0       	rjmp	.+190    	; 0x249e <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    23e0:	8e 81       	ldd	r24, Y+6	; 0x06
    23e2:	9f 81       	ldd	r25, Y+7	; 0x07
    23e4:	fc 01       	movw	r30, r24
    23e6:	91 85       	ldd	r25, Z+9	; 0x09
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	99 23       	and	r25, r25
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <Keypad_enuRead+0x148>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	48 2f       	mov	r20, r24
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	88 2f       	mov	r24, r24
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	2e 81       	ldd	r18, Y+6	; 0x06
    23fa:	3f 81       	ldd	r19, Y+7	; 0x07
    23fc:	82 0f       	add	r24, r18
    23fe:	93 1f       	adc	r25, r19
    2400:	04 96       	adiw	r24, 0x04	; 4
    2402:	fc 01       	movw	r30, r24
    2404:	80 81       	ld	r24, Z
    2406:	64 2f       	mov	r22, r20
    2408:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    240c:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    240e:	1a 82       	std	Y+2, r1	; 0x02
    2410:	2e c0       	rjmp	.+92     	; 0x246e <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	88 2f       	mov	r24, r24
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	2e 81       	ldd	r18, Y+6	; 0x06
    241a:	3f 81       	ldd	r19, Y+7	; 0x07
    241c:	82 0f       	add	r24, r18
    241e:	93 1f       	adc	r25, r19
    2420:	fc 01       	movw	r30, r24
    2422:	20 81       	ld	r18, Z
    2424:	ce 01       	movw	r24, r28
    2426:	05 96       	adiw	r24, 0x05	; 5
    2428:	bc 01       	movw	r22, r24
    242a:	82 2f       	mov	r24, r18
    242c:	0e 94 65 06 	call	0xcca	; 0xcca <Dio_enuReadChannel>
    2430:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    2432:	8e 81       	ldd	r24, Y+6	; 0x06
    2434:	9f 81       	ldd	r25, Y+7	; 0x07
    2436:	fc 01       	movw	r30, r24
    2438:	91 85       	ldd	r25, Z+9	; 0x09
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	98 17       	cp	r25, r24
    243e:	a1 f0       	breq	.+40     	; 0x2468 <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	22 0f       	add	r18, r18
    244e:	33 1f       	adc	r19, r19
    2450:	22 0f       	add	r18, r18
    2452:	33 1f       	adc	r19, r19
    2454:	82 0f       	add	r24, r18
    2456:	93 1f       	adc	r25, r19
    2458:	84 53       	subi	r24, 0x34	; 52
    245a:	9f 4f       	sbci	r25, 0xFF	; 255
    245c:	fc 01       	movw	r30, r24
    245e:	20 81       	ld	r18, Z
    2460:	88 85       	ldd	r24, Y+8	; 0x08
    2462:	99 85       	ldd	r25, Y+9	; 0x09
    2464:	fc 01       	movw	r30, r24
    2466:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	8f 5f       	subi	r24, 0xFF	; 255
    246c:	8a 83       	std	Y+2, r24	; 0x02
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	84 30       	cpi	r24, 0x04	; 4
    2472:	78 f2       	brcs	.-98     	; 0x2412 <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    2474:	8e 81       	ldd	r24, Y+6	; 0x06
    2476:	9f 81       	ldd	r25, Y+7	; 0x07
    2478:	fc 01       	movw	r30, r24
    247a:	41 85       	ldd	r20, Z+9	; 0x09
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	88 2f       	mov	r24, r24
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	2e 81       	ldd	r18, Y+6	; 0x06
    2484:	3f 81       	ldd	r19, Y+7	; 0x07
    2486:	82 0f       	add	r24, r18
    2488:	93 1f       	adc	r25, r19
    248a:	04 96       	adiw	r24, 0x04	; 4
    248c:	fc 01       	movw	r30, r24
    248e:	80 81       	ld	r24, Z
    2490:	64 2f       	mov	r22, r20
    2492:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    2496:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	8f 5f       	subi	r24, 0xFF	; 255
    249c:	8b 83       	std	Y+3, r24	; 0x03
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	84 30       	cpi	r24, 0x04	; 4
    24a2:	08 f4       	brcc	.+2      	; 0x24a6 <Keypad_enuRead+0x1fe>
    24a4:	9d cf       	rjmp	.-198    	; 0x23e0 <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ae:	29 96       	adiw	r28, 0x09	; 9
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	08 95       	ret

000024c0 <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <Keypad_DisableControlPins+0x6>
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <Keypad_DisableControlPins+0x8>
    24c8:	1f 92       	push	r1
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	9d 83       	std	Y+5, r25	; 0x05
    24d0:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    24d2:	83 e0       	ldi	r24, 0x03	; 3
    24d4:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    24d6:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    24d8:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    24da:	8c 81       	ldd	r24, Y+4	; 0x04
    24dc:	9d 81       	ldd	r25, Y+5	; 0x05
    24de:	89 2b       	or	r24, r25
    24e0:	19 f4       	brne	.+6      	; 0x24e8 <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	42 c0       	rjmp	.+132    	; 0x256c <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    24e8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ea:	9d 81       	ldd	r25, Y+5	; 0x05
    24ec:	fc 01       	movw	r30, r24
    24ee:	80 85       	ldd	r24, Z+8	; 0x08
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	19 f0       	breq	.+6      	; 0x24fe <Keypad_DisableControlPins+0x3e>
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	d9 f0       	breq	.+54     	; 0x2532 <Keypad_DisableControlPins+0x72>
    24fc:	35 c0       	rjmp	.+106    	; 0x2568 <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    24fe:	1a 82       	std	Y+2, r1	; 0x02
    2500:	14 c0       	rjmp	.+40     	; 0x252a <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    2502:	8c 81       	ldd	r24, Y+4	; 0x04
    2504:	9d 81       	ldd	r25, Y+5	; 0x05
    2506:	fc 01       	movw	r30, r24
    2508:	41 85       	ldd	r20, Z+9	; 0x09
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	2c 81       	ldd	r18, Y+4	; 0x04
    2512:	3d 81       	ldd	r19, Y+5	; 0x05
    2514:	82 0f       	add	r24, r18
    2516:	93 1f       	adc	r25, r19
    2518:	fc 01       	movw	r30, r24
    251a:	80 81       	ld	r24, Z
    251c:	64 2f       	mov	r22, r20
    251e:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    2522:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	8f 5f       	subi	r24, 0xFF	; 255
    2528:	8a 83       	std	Y+2, r24	; 0x02
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	84 30       	cpi	r24, 0x04	; 4
    252e:	48 f3       	brcs	.-46     	; 0x2502 <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    2530:	1d c0       	rjmp	.+58     	; 0x256c <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    2532:	1a 82       	std	Y+2, r1	; 0x02
    2534:	15 c0       	rjmp	.+42     	; 0x2560 <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	9d 81       	ldd	r25, Y+5	; 0x05
    253a:	fc 01       	movw	r30, r24
    253c:	41 85       	ldd	r20, Z+9	; 0x09
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	2c 81       	ldd	r18, Y+4	; 0x04
    2546:	3d 81       	ldd	r19, Y+5	; 0x05
    2548:	82 0f       	add	r24, r18
    254a:	93 1f       	adc	r25, r19
    254c:	04 96       	adiw	r24, 0x04	; 4
    254e:	fc 01       	movw	r30, r24
    2550:	80 81       	ld	r24, Z
    2552:	64 2f       	mov	r22, r20
    2554:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    2558:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	8a 83       	std	Y+2, r24	; 0x02
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	40 f3       	brcs	.-48     	; 0x2536 <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    2566:	02 c0       	rjmp	.+4      	; 0x256c <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    256c:	89 81       	ldd	r24, Y+1	; 0x01
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	08 95       	ret

0000257e <Button_enuRead>:



/********************************** Software Interfaces Declarations *******************/

Button_StatusErrorType Button_enuRead(const Button_ConfigType *Address_Button,Button_PressStatusType* Address_State ){
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	00 d0       	rcall	.+0      	; 0x2584 <Button_enuRead+0x6>
    2584:	00 d0       	rcall	.+0      	; 0x2586 <Button_enuRead+0x8>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <Button_enuRead+0xa>
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
    2590:	7e 83       	std	Y+6, r23	; 0x06
    2592:	6d 83       	std	Y+5, r22	; 0x05

	Button_StatusErrorType Loc_enuStatus = BUTTON_STATUS_OK;
    2594:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    2596:	1a 82       	std	Y+2, r1	; 0x02
	if( NULL == Address_Button || NULL == Address_State ){
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	9c 81       	ldd	r25, Y+4	; 0x04
    259c:	89 2b       	or	r24, r25
    259e:	21 f0       	breq	.+8      	; 0x25a8 <Button_enuRead+0x2a>
    25a0:	8d 81       	ldd	r24, Y+5	; 0x05
    25a2:	9e 81       	ldd	r25, Y+6	; 0x06
    25a4:	89 2b       	or	r24, r25
    25a6:	19 f4       	brne	.+6      	; 0x25ae <Button_enuRead+0x30>
		Loc_enuStatus = BUTTON_STATUS_NULL_POINTER_ADDRESS;
    25a8:	82 e0       	ldi	r24, 0x02	; 2
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	31 c0       	rjmp	.+98     	; 0x2610 <Button_enuRead+0x92>

	}
	else{
	        switch(Address_Button->button_connection){
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	fc 01       	movw	r30, r24
    25b4:	81 81       	ldd	r24, Z+1	; 0x01
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	71 f0       	breq	.+28     	; 0x25da <Button_enuRead+0x5c>
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	29 f5       	brne	.+74     	; 0x260c <Button_enuRead+0x8e>

	            case BUTTON_CONNECTION_PULL_DOWN:
	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	fc 01       	movw	r30, r24
    25c8:	20 81       	ld	r18, Z
    25ca:	8d 81       	ldd	r24, Y+5	; 0x05
    25cc:	9e 81       	ldd	r25, Y+6	; 0x06
    25ce:	bc 01       	movw	r22, r24
    25d0:	82 2f       	mov	r24, r18
    25d2:	0e 94 65 06 	call	0xcca	; 0xcca <Dio_enuReadChannel>
    25d6:	8a 83       	std	Y+2, r24	; 0x02
	                break;
    25d8:	1b c0       	rjmp	.+54     	; 0x2610 <Button_enuRead+0x92>
	            case BUTTON_CONNECTION_PULL_UP:

	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	9c 81       	ldd	r25, Y+4	; 0x04
    25de:	fc 01       	movw	r30, r24
    25e0:	20 81       	ld	r18, Z
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	bc 01       	movw	r22, r24
    25e8:	82 2f       	mov	r24, r18
    25ea:	0e 94 65 06 	call	0xcca	; 0xcca <Dio_enuReadChannel>
    25ee:	8a 83       	std	Y+2, r24	; 0x02
	                *Address_State = !(*Address_State);
    25f0:	8d 81       	ldd	r24, Y+5	; 0x05
    25f2:	9e 81       	ldd	r25, Y+6	; 0x06
    25f4:	fc 01       	movw	r30, r24
    25f6:	90 81       	ld	r25, Z
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	99 23       	and	r25, r25
    25fc:	09 f0       	breq	.+2      	; 0x2600 <Button_enuRead+0x82>
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	28 2f       	mov	r18, r24
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	fc 01       	movw	r30, r24
    2608:	20 83       	st	Z, r18
	                break;
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <Button_enuRead+0x92>

	            default:
	                Loc_enuStatus = BUTTON_STATUS_FAIL;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	89 83       	std	Y+1, r24	; 0x01
	    }




	return Loc_enuStatus;
    2610:	89 81       	ldd	r24, Y+1	; 0x01

}
    2612:	26 96       	adiw	r28, 0x06	; 6
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	08 95       	ret

00002624 <adc_isr>:

u8 Lcd_Custom1[]={0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x1F};
u8 Lcd_Custom2[]={0x00,0x00,0x00,0x1F,0x1F,0x1F,0x1F,0x1F};
u8 Lcd_Custom3[]={0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F};

void adc_isr(u16 result){
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	00 d0       	rcall	.+0      	; 0x262a <adc_isr+0x6>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	89 83       	std	Y+1, r24	; 0x01
	if(result<=341){
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	86 35       	cpi	r24, 0x56	; 86
    2638:	91 40       	sbci	r25, 0x01	; 1
    263a:	b0 f4       	brcc	.+44     	; 0x2668 <adc_isr+0x44>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 1, LCD_ROW2, LCD_COL12);
    263c:	2c e0       	ldi	r18, 0x0C	; 12
    263e:	42 e0       	ldi	r20, 0x02	; 2
    2640:	61 e0       	ldi	r22, 0x01	; 1
    2642:	80 e9       	ldi	r24, 0x90	; 144
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL13);
    264a:	2d e0       	ldi	r18, 0x0D	; 13
    264c:	42 e0       	ldi	r20, 0x02	; 2
    264e:	60 e2       	ldi	r22, 0x20	; 32
    2650:	80 e9       	ldi	r24, 0x90	; 144
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL14);
    2658:	2e e0       	ldi	r18, 0x0E	; 14
    265a:	42 e0       	ldi	r20, 0x02	; 2
    265c:	60 e2       	ldi	r22, 0x20	; 32
    265e:	80 e9       	ldi	r24, 0x90	; 144
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 1, LCD_ROW2, LCD_COL12);
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 2, LCD_ROW2, LCD_COL13);
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 3, LCD_ROW2, LCD_COL14);
	}

}
    2666:	30 c0       	rjmp	.+96     	; 0x26c8 <adc_isr+0xa4>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 1, LCD_ROW2, LCD_COL12);
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL13);
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL14);

	}
	else if(result<=682){
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	9a 81       	ldd	r25, Y+2	; 0x02
    266c:	8b 3a       	cpi	r24, 0xAB	; 171
    266e:	92 40       	sbci	r25, 0x02	; 2
    2670:	b0 f4       	brcc	.+44     	; 0x269e <adc_isr+0x7a>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 1, LCD_ROW2, LCD_COL12);
    2672:	2c e0       	ldi	r18, 0x0C	; 12
    2674:	42 e0       	ldi	r20, 0x02	; 2
    2676:	61 e0       	ldi	r22, 0x01	; 1
    2678:	80 e9       	ldi	r24, 0x90	; 144
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 2, LCD_ROW2, LCD_COL13);
    2680:	2d e0       	ldi	r18, 0x0D	; 13
    2682:	42 e0       	ldi	r20, 0x02	; 2
    2684:	62 e0       	ldi	r22, 0x02	; 2
    2686:	80 e9       	ldi	r24, 0x90	; 144
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL14);
    268e:	2e e0       	ldi	r18, 0x0E	; 14
    2690:	42 e0       	ldi	r20, 0x02	; 2
    2692:	60 e2       	ldi	r22, 0x20	; 32
    2694:	80 e9       	ldi	r24, 0x90	; 144
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 1, LCD_ROW2, LCD_COL12);
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 2, LCD_ROW2, LCD_COL13);
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 3, LCD_ROW2, LCD_COL14);
	}

}
    269c:	15 c0       	rjmp	.+42     	; 0x26c8 <adc_isr+0xa4>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 2, LCD_ROW2, LCD_COL13);
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL14);

		}
	else {
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 1, LCD_ROW2, LCD_COL12);
    269e:	2c e0       	ldi	r18, 0x0C	; 12
    26a0:	42 e0       	ldi	r20, 0x02	; 2
    26a2:	61 e0       	ldi	r22, 0x01	; 1
    26a4:	80 e9       	ldi	r24, 0x90	; 144
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 2, LCD_ROW2, LCD_COL13);
    26ac:	2d e0       	ldi	r18, 0x0D	; 13
    26ae:	42 e0       	ldi	r20, 0x02	; 2
    26b0:	62 e0       	ldi	r22, 0x02	; 2
    26b2:	80 e9       	ldi	r24, 0x90	; 144
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, 3, LCD_ROW2, LCD_COL14);
    26ba:	2e e0       	ldi	r18, 0x0E	; 14
    26bc:	42 e0       	ldi	r20, 0x02	; 2
    26be:	63 e0       	ldi	r22, 0x03	; 3
    26c0:	80 e9       	ldi	r24, 0x90	; 144
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
	}

}
    26c8:	00 00       	nop
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	08 95       	ret

000026d4 <main>:
int main(void){
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	2e 97       	sbiw	r28, 0x0e	; 14
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61

	Port_voidInit();
    26e8:	0e 94 c8 01 	call	0x390	; 0x390 <Port_voidInit>
	Lcd_4bit_enuInit(&Lcd);
    26ec:	80 e9       	ldi	r24, 0x90	; 144
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <Lcd_4bit_enuInit>
	Adc_enuInit(&Adc0);
    26f4:	81 ea       	ldi	r24, 0xA1	; 161
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	0e 94 9b 07 	call	0xf36	; 0xf36 <Adc_enuInit>

	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_Custom1, 1);
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	65 ea       	ldi	r22, 0xA5	; 165
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	80 e9       	ldi	r24, 0x90	; 144
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <Lcd_4bit_enuCreateCustomCharacter>
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_Custom2, 2);
    270a:	42 e0       	ldi	r20, 0x02	; 2
    270c:	6d ea       	ldi	r22, 0xAD	; 173
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	80 e9       	ldi	r24, 0x90	; 144
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <Lcd_4bit_enuCreateCustomCharacter>
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_Custom3, 3);
    2718:	43 e0       	ldi	r20, 0x03	; 3
    271a:	65 eb       	ldi	r22, 0xB5	; 181
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	80 e9       	ldi	r24, 0x90	; 144
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <Lcd_4bit_enuCreateCustomCharacter>



	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2, LCD_COL5);
    2726:	45 e0       	ldi	r20, 0x05	; 5
    2728:	62 e0       	ldi	r22, 0x02	; 2
    272a:	80 e9       	ldi	r24, 0x90	; 144
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <Lcd_4bit_enuGoToXY>
	Lcd_4bit_enuDisplayString(&Lcd, "VOLUME ");
    2732:	64 ec       	ldi	r22, 0xC4	; 196
    2734:	70 e0       	ldi	r23, 0x00	; 0
    2736:	80 e9       	ldi	r24, 0x90	; 144
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <Lcd_4bit_enuDisplayString>

	Adc_SetCallbackFunction(&Adc0, adc_isr);
    273e:	62 e1       	ldi	r22, 0x12	; 18
    2740:	73 e1       	ldi	r23, 0x13	; 19
    2742:	81 ea       	ldi	r24, 0xA1	; 161
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	0e 94 a0 0a 	call	0x1540	; 0x1540 <Adc_SetCallbackFunction>
	Adc_enuEnableInterrupt();
    274a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Adc_enuEnableInterrupt>

	Gie_enuEnableGlobalInterrupt();
    274e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Gie_enuEnableGlobalInterrupt>

	while(1){
		Adc_StartConversionAsync(&Adc0);
    2752:	81 ea       	ldi	r24, 0xA1	; 161
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Adc_StartConversionAsync>
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	a0 e6       	ldi	r26, 0x60	; 96
    2760:	b1 e4       	ldi	r27, 0x41	; 65
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	ab 83       	std	Y+3, r26	; 0x03
    2768:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4a e7       	ldi	r20, 0x7A	; 122
    2770:	55 e4       	ldi	r21, 0x45	; 69
    2772:	69 81       	ldd	r22, Y+1	; 0x01
    2774:	7a 81       	ldd	r23, Y+2	; 0x02
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	8d 83       	std	Y+5, r24	; 0x05
    2784:	9e 83       	std	Y+6, r25	; 0x06
    2786:	af 83       	std	Y+7, r26	; 0x07
    2788:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	6d 81       	ldd	r22, Y+5	; 0x05
    2794:	7e 81       	ldd	r23, Y+6	; 0x06
    2796:	8f 81       	ldd	r24, Y+7	; 0x07
    2798:	98 85       	ldd	r25, Y+8	; 0x08
    279a:	0e 94 42 14 	call	0x2884	; 0x2884 <__cmpsf2>
    279e:	88 23       	and	r24, r24
    27a0:	2c f4       	brge	.+10     	; 0x27ac <main+0xd8>
		__ticks = 1;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9a 87       	std	Y+10, r25	; 0x0a
    27a8:	89 87       	std	Y+9, r24	; 0x09
    27aa:	3f c0       	rjmp	.+126    	; 0x282a <main+0x156>
	else if (__tmp > 65535)
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	6d 81       	ldd	r22, Y+5	; 0x05
    27b6:	7e 81       	ldd	r23, Y+6	; 0x06
    27b8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ba:	98 85       	ldd	r25, Y+8	; 0x08
    27bc:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__gesf2>
    27c0:	18 16       	cp	r1, r24
    27c2:	4c f5       	brge	.+82     	; 0x2816 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e2       	ldi	r20, 0x20	; 32
    27ca:	51 e4       	ldi	r21, 0x41	; 65
    27cc:	69 81       	ldd	r22, Y+1	; 0x01
    27ce:	7a 81       	ldd	r23, Y+2	; 0x02
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9a 87       	std	Y+10, r25	; 0x0a
    27ea:	89 87       	std	Y+9, r24	; 0x09
    27ec:	0f c0       	rjmp	.+30     	; 0x280c <main+0x138>
    27ee:	80 e9       	ldi	r24, 0x90	; 144
    27f0:	91 e0       	ldi	r25, 0x01	; 1
    27f2:	9c 87       	std	Y+12, r25	; 0x0c
    27f4:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <main+0x126>
    27fe:	9c 87       	std	Y+12, r25	; 0x0c
    2800:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2802:	89 85       	ldd	r24, Y+9	; 0x09
    2804:	9a 85       	ldd	r25, Y+10	; 0x0a
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	9a 87       	std	Y+10, r25	; 0x0a
    280a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	89 2b       	or	r24, r25
    2812:	69 f7       	brne	.-38     	; 0x27ee <main+0x11a>
    2814:	14 c0       	rjmp	.+40     	; 0x283e <main+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2816:	6d 81       	ldd	r22, Y+5	; 0x05
    2818:	7e 81       	ldd	r23, Y+6	; 0x06
    281a:	8f 81       	ldd	r24, Y+7	; 0x07
    281c:	98 85       	ldd	r25, Y+8	; 0x08
    281e:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	9a 87       	std	Y+10, r25	; 0x0a
    2828:	89 87       	std	Y+9, r24	; 0x09
    282a:	89 85       	ldd	r24, Y+9	; 0x09
    282c:	9a 85       	ldd	r25, Y+10	; 0x0a
    282e:	9e 87       	std	Y+14, r25	; 0x0e
    2830:	8d 87       	std	Y+13, r24	; 0x0d
    2832:	8d 85       	ldd	r24, Y+13	; 0x0d
    2834:	9e 85       	ldd	r25, Y+14	; 0x0e
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <main+0x162>
    283a:	9e 87       	std	Y+14, r25	; 0x0e
    283c:	8d 87       	std	Y+13, r24	; 0x0d




		_delay_ms(14);
	}
    283e:	89 cf       	rjmp	.-238    	; 0x2752 <main+0x7e>

00002840 <__ashldi3>:
    2840:	0f 93       	push	r16
    2842:	08 30       	cpi	r16, 0x08	; 8
    2844:	90 f0       	brcs	.+36     	; 0x286a <__ashldi3+0x2a>
    2846:	98 2f       	mov	r25, r24
    2848:	87 2f       	mov	r24, r23
    284a:	76 2f       	mov	r23, r22
    284c:	65 2f       	mov	r22, r21
    284e:	54 2f       	mov	r21, r20
    2850:	43 2f       	mov	r20, r19
    2852:	32 2f       	mov	r19, r18
    2854:	22 27       	eor	r18, r18
    2856:	08 50       	subi	r16, 0x08	; 8
    2858:	f4 cf       	rjmp	.-24     	; 0x2842 <__ashldi3+0x2>
    285a:	22 0f       	add	r18, r18
    285c:	33 1f       	adc	r19, r19
    285e:	44 1f       	adc	r20, r20
    2860:	55 1f       	adc	r21, r21
    2862:	66 1f       	adc	r22, r22
    2864:	77 1f       	adc	r23, r23
    2866:	88 1f       	adc	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	0a 95       	dec	r16
    286c:	b2 f7       	brpl	.-20     	; 0x285a <__ashldi3+0x1a>
    286e:	0f 91       	pop	r16
    2870:	08 95       	ret

00002872 <__adddi3>:
    2872:	2a 0d       	add	r18, r10
    2874:	3b 1d       	adc	r19, r11
    2876:	4c 1d       	adc	r20, r12
    2878:	5d 1d       	adc	r21, r13
    287a:	6e 1d       	adc	r22, r14
    287c:	7f 1d       	adc	r23, r15
    287e:	80 1f       	adc	r24, r16
    2880:	91 1f       	adc	r25, r17
    2882:	08 95       	ret

00002884 <__cmpsf2>:
    2884:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__fp_cmp>
    2888:	08 f4       	brcc	.+2      	; 0x288c <__cmpsf2+0x8>
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	08 95       	ret

0000288e <__divsf3>:
    288e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__divsf3x>
    2892:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__fp_round>
    2896:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__fp_pscB>
    289a:	58 f0       	brcs	.+22     	; 0x28b2 <__divsf3+0x24>
    289c:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__fp_pscA>
    28a0:	40 f0       	brcs	.+16     	; 0x28b2 <__divsf3+0x24>
    28a2:	29 f4       	brne	.+10     	; 0x28ae <__divsf3+0x20>
    28a4:	5f 3f       	cpi	r21, 0xFF	; 255
    28a6:	29 f0       	breq	.+10     	; 0x28b2 <__divsf3+0x24>
    28a8:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__fp_inf>
    28ac:	51 11       	cpse	r21, r1
    28ae:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__fp_szero>
    28b2:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__fp_nan>

000028b6 <__divsf3x>:
    28b6:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fp_split3>
    28ba:	68 f3       	brcs	.-38     	; 0x2896 <__divsf3+0x8>

000028bc <__divsf3_pse>:
    28bc:	99 23       	and	r25, r25
    28be:	b1 f3       	breq	.-20     	; 0x28ac <__divsf3+0x1e>
    28c0:	55 23       	and	r21, r21
    28c2:	91 f3       	breq	.-28     	; 0x28a8 <__divsf3+0x1a>
    28c4:	95 1b       	sub	r25, r21
    28c6:	55 0b       	sbc	r21, r21
    28c8:	bb 27       	eor	r27, r27
    28ca:	aa 27       	eor	r26, r26
    28cc:	62 17       	cp	r22, r18
    28ce:	73 07       	cpc	r23, r19
    28d0:	84 07       	cpc	r24, r20
    28d2:	38 f0       	brcs	.+14     	; 0x28e2 <__divsf3_pse+0x26>
    28d4:	9f 5f       	subi	r25, 0xFF	; 255
    28d6:	5f 4f       	sbci	r21, 0xFF	; 255
    28d8:	22 0f       	add	r18, r18
    28da:	33 1f       	adc	r19, r19
    28dc:	44 1f       	adc	r20, r20
    28de:	aa 1f       	adc	r26, r26
    28e0:	a9 f3       	breq	.-22     	; 0x28cc <__divsf3_pse+0x10>
    28e2:	35 d0       	rcall	.+106    	; 0x294e <__divsf3_pse+0x92>
    28e4:	0e 2e       	mov	r0, r30
    28e6:	3a f0       	brmi	.+14     	; 0x28f6 <__divsf3_pse+0x3a>
    28e8:	e0 e8       	ldi	r30, 0x80	; 128
    28ea:	32 d0       	rcall	.+100    	; 0x2950 <__divsf3_pse+0x94>
    28ec:	91 50       	subi	r25, 0x01	; 1
    28ee:	50 40       	sbci	r21, 0x00	; 0
    28f0:	e6 95       	lsr	r30
    28f2:	00 1c       	adc	r0, r0
    28f4:	ca f7       	brpl	.-14     	; 0x28e8 <__divsf3_pse+0x2c>
    28f6:	2b d0       	rcall	.+86     	; 0x294e <__divsf3_pse+0x92>
    28f8:	fe 2f       	mov	r31, r30
    28fa:	29 d0       	rcall	.+82     	; 0x294e <__divsf3_pse+0x92>
    28fc:	66 0f       	add	r22, r22
    28fe:	77 1f       	adc	r23, r23
    2900:	88 1f       	adc	r24, r24
    2902:	bb 1f       	adc	r27, r27
    2904:	26 17       	cp	r18, r22
    2906:	37 07       	cpc	r19, r23
    2908:	48 07       	cpc	r20, r24
    290a:	ab 07       	cpc	r26, r27
    290c:	b0 e8       	ldi	r27, 0x80	; 128
    290e:	09 f0       	breq	.+2      	; 0x2912 <__divsf3_pse+0x56>
    2910:	bb 0b       	sbc	r27, r27
    2912:	80 2d       	mov	r24, r0
    2914:	bf 01       	movw	r22, r30
    2916:	ff 27       	eor	r31, r31
    2918:	93 58       	subi	r25, 0x83	; 131
    291a:	5f 4f       	sbci	r21, 0xFF	; 255
    291c:	3a f0       	brmi	.+14     	; 0x292c <__divsf3_pse+0x70>
    291e:	9e 3f       	cpi	r25, 0xFE	; 254
    2920:	51 05       	cpc	r21, r1
    2922:	78 f0       	brcs	.+30     	; 0x2942 <__divsf3_pse+0x86>
    2924:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__fp_inf>
    2928:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__fp_szero>
    292c:	5f 3f       	cpi	r21, 0xFF	; 255
    292e:	e4 f3       	brlt	.-8      	; 0x2928 <__divsf3_pse+0x6c>
    2930:	98 3e       	cpi	r25, 0xE8	; 232
    2932:	d4 f3       	brlt	.-12     	; 0x2928 <__divsf3_pse+0x6c>
    2934:	86 95       	lsr	r24
    2936:	77 95       	ror	r23
    2938:	67 95       	ror	r22
    293a:	b7 95       	ror	r27
    293c:	f7 95       	ror	r31
    293e:	9f 5f       	subi	r25, 0xFF	; 255
    2940:	c9 f7       	brne	.-14     	; 0x2934 <__divsf3_pse+0x78>
    2942:	88 0f       	add	r24, r24
    2944:	91 1d       	adc	r25, r1
    2946:	96 95       	lsr	r25
    2948:	87 95       	ror	r24
    294a:	97 f9       	bld	r25, 7
    294c:	08 95       	ret
    294e:	e1 e0       	ldi	r30, 0x01	; 1
    2950:	66 0f       	add	r22, r22
    2952:	77 1f       	adc	r23, r23
    2954:	88 1f       	adc	r24, r24
    2956:	bb 1f       	adc	r27, r27
    2958:	62 17       	cp	r22, r18
    295a:	73 07       	cpc	r23, r19
    295c:	84 07       	cpc	r24, r20
    295e:	ba 07       	cpc	r27, r26
    2960:	20 f0       	brcs	.+8      	; 0x296a <__divsf3_pse+0xae>
    2962:	62 1b       	sub	r22, r18
    2964:	73 0b       	sbc	r23, r19
    2966:	84 0b       	sbc	r24, r20
    2968:	ba 0b       	sbc	r27, r26
    296a:	ee 1f       	adc	r30, r30
    296c:	88 f7       	brcc	.-30     	; 0x2950 <__divsf3_pse+0x94>
    296e:	e0 95       	com	r30
    2970:	08 95       	ret

00002972 <__fixunssfsi>:
    2972:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__fp_splitA>
    2976:	88 f0       	brcs	.+34     	; 0x299a <__fixunssfsi+0x28>
    2978:	9f 57       	subi	r25, 0x7F	; 127
    297a:	98 f0       	brcs	.+38     	; 0x29a2 <__fixunssfsi+0x30>
    297c:	b9 2f       	mov	r27, r25
    297e:	99 27       	eor	r25, r25
    2980:	b7 51       	subi	r27, 0x17	; 23
    2982:	b0 f0       	brcs	.+44     	; 0x29b0 <__fixunssfsi+0x3e>
    2984:	e1 f0       	breq	.+56     	; 0x29be <__fixunssfsi+0x4c>
    2986:	66 0f       	add	r22, r22
    2988:	77 1f       	adc	r23, r23
    298a:	88 1f       	adc	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	1a f0       	brmi	.+6      	; 0x2996 <__fixunssfsi+0x24>
    2990:	ba 95       	dec	r27
    2992:	c9 f7       	brne	.-14     	; 0x2986 <__fixunssfsi+0x14>
    2994:	14 c0       	rjmp	.+40     	; 0x29be <__fixunssfsi+0x4c>
    2996:	b1 30       	cpi	r27, 0x01	; 1
    2998:	91 f0       	breq	.+36     	; 0x29be <__fixunssfsi+0x4c>
    299a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__fp_zero>
    299e:	b1 e0       	ldi	r27, 0x01	; 1
    29a0:	08 95       	ret
    29a2:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__fp_zero>
    29a6:	67 2f       	mov	r22, r23
    29a8:	78 2f       	mov	r23, r24
    29aa:	88 27       	eor	r24, r24
    29ac:	b8 5f       	subi	r27, 0xF8	; 248
    29ae:	39 f0       	breq	.+14     	; 0x29be <__fixunssfsi+0x4c>
    29b0:	b9 3f       	cpi	r27, 0xF9	; 249
    29b2:	cc f3       	brlt	.-14     	; 0x29a6 <__fixunssfsi+0x34>
    29b4:	86 95       	lsr	r24
    29b6:	77 95       	ror	r23
    29b8:	67 95       	ror	r22
    29ba:	b3 95       	inc	r27
    29bc:	d9 f7       	brne	.-10     	; 0x29b4 <__fixunssfsi+0x42>
    29be:	3e f4       	brtc	.+14     	; 0x29ce <__fixunssfsi+0x5c>
    29c0:	90 95       	com	r25
    29c2:	80 95       	com	r24
    29c4:	70 95       	com	r23
    29c6:	61 95       	neg	r22
    29c8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ca:	8f 4f       	sbci	r24, 0xFF	; 255
    29cc:	9f 4f       	sbci	r25, 0xFF	; 255
    29ce:	08 95       	ret

000029d0 <__floatunsisf>:
    29d0:	e8 94       	clt
    29d2:	09 c0       	rjmp	.+18     	; 0x29e6 <__floatsisf+0x12>

000029d4 <__floatsisf>:
    29d4:	97 fb       	bst	r25, 7
    29d6:	3e f4       	brtc	.+14     	; 0x29e6 <__floatsisf+0x12>
    29d8:	90 95       	com	r25
    29da:	80 95       	com	r24
    29dc:	70 95       	com	r23
    29de:	61 95       	neg	r22
    29e0:	7f 4f       	sbci	r23, 0xFF	; 255
    29e2:	8f 4f       	sbci	r24, 0xFF	; 255
    29e4:	9f 4f       	sbci	r25, 0xFF	; 255
    29e6:	99 23       	and	r25, r25
    29e8:	a9 f0       	breq	.+42     	; 0x2a14 <__floatsisf+0x40>
    29ea:	f9 2f       	mov	r31, r25
    29ec:	96 e9       	ldi	r25, 0x96	; 150
    29ee:	bb 27       	eor	r27, r27
    29f0:	93 95       	inc	r25
    29f2:	f6 95       	lsr	r31
    29f4:	87 95       	ror	r24
    29f6:	77 95       	ror	r23
    29f8:	67 95       	ror	r22
    29fa:	b7 95       	ror	r27
    29fc:	f1 11       	cpse	r31, r1
    29fe:	f8 cf       	rjmp	.-16     	; 0x29f0 <__floatsisf+0x1c>
    2a00:	fa f4       	brpl	.+62     	; 0x2a40 <__floatsisf+0x6c>
    2a02:	bb 0f       	add	r27, r27
    2a04:	11 f4       	brne	.+4      	; 0x2a0a <__floatsisf+0x36>
    2a06:	60 ff       	sbrs	r22, 0
    2a08:	1b c0       	rjmp	.+54     	; 0x2a40 <__floatsisf+0x6c>
    2a0a:	6f 5f       	subi	r22, 0xFF	; 255
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a10:	9f 4f       	sbci	r25, 0xFF	; 255
    2a12:	16 c0       	rjmp	.+44     	; 0x2a40 <__floatsisf+0x6c>
    2a14:	88 23       	and	r24, r24
    2a16:	11 f0       	breq	.+4      	; 0x2a1c <__floatsisf+0x48>
    2a18:	96 e9       	ldi	r25, 0x96	; 150
    2a1a:	11 c0       	rjmp	.+34     	; 0x2a3e <__floatsisf+0x6a>
    2a1c:	77 23       	and	r23, r23
    2a1e:	21 f0       	breq	.+8      	; 0x2a28 <__floatsisf+0x54>
    2a20:	9e e8       	ldi	r25, 0x8E	; 142
    2a22:	87 2f       	mov	r24, r23
    2a24:	76 2f       	mov	r23, r22
    2a26:	05 c0       	rjmp	.+10     	; 0x2a32 <__floatsisf+0x5e>
    2a28:	66 23       	and	r22, r22
    2a2a:	71 f0       	breq	.+28     	; 0x2a48 <__floatsisf+0x74>
    2a2c:	96 e8       	ldi	r25, 0x86	; 134
    2a2e:	86 2f       	mov	r24, r22
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	2a f0       	brmi	.+10     	; 0x2a40 <__floatsisf+0x6c>
    2a36:	9a 95       	dec	r25
    2a38:	66 0f       	add	r22, r22
    2a3a:	77 1f       	adc	r23, r23
    2a3c:	88 1f       	adc	r24, r24
    2a3e:	da f7       	brpl	.-10     	; 0x2a36 <__floatsisf+0x62>
    2a40:	88 0f       	add	r24, r24
    2a42:	96 95       	lsr	r25
    2a44:	87 95       	ror	r24
    2a46:	97 f9       	bld	r25, 7
    2a48:	08 95       	ret

00002a4a <__fp_cmp>:
    2a4a:	99 0f       	add	r25, r25
    2a4c:	00 08       	sbc	r0, r0
    2a4e:	55 0f       	add	r21, r21
    2a50:	aa 0b       	sbc	r26, r26
    2a52:	e0 e8       	ldi	r30, 0x80	; 128
    2a54:	fe ef       	ldi	r31, 0xFE	; 254
    2a56:	16 16       	cp	r1, r22
    2a58:	17 06       	cpc	r1, r23
    2a5a:	e8 07       	cpc	r30, r24
    2a5c:	f9 07       	cpc	r31, r25
    2a5e:	c0 f0       	brcs	.+48     	; 0x2a90 <__fp_cmp+0x46>
    2a60:	12 16       	cp	r1, r18
    2a62:	13 06       	cpc	r1, r19
    2a64:	e4 07       	cpc	r30, r20
    2a66:	f5 07       	cpc	r31, r21
    2a68:	98 f0       	brcs	.+38     	; 0x2a90 <__fp_cmp+0x46>
    2a6a:	62 1b       	sub	r22, r18
    2a6c:	73 0b       	sbc	r23, r19
    2a6e:	84 0b       	sbc	r24, r20
    2a70:	95 0b       	sbc	r25, r21
    2a72:	39 f4       	brne	.+14     	; 0x2a82 <__fp_cmp+0x38>
    2a74:	0a 26       	eor	r0, r26
    2a76:	61 f0       	breq	.+24     	; 0x2a90 <__fp_cmp+0x46>
    2a78:	23 2b       	or	r18, r19
    2a7a:	24 2b       	or	r18, r20
    2a7c:	25 2b       	or	r18, r21
    2a7e:	21 f4       	brne	.+8      	; 0x2a88 <__fp_cmp+0x3e>
    2a80:	08 95       	ret
    2a82:	0a 26       	eor	r0, r26
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <__fp_cmp+0x3e>
    2a86:	a1 40       	sbci	r26, 0x01	; 1
    2a88:	a6 95       	lsr	r26
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	81 1d       	adc	r24, r1
    2a8e:	81 1d       	adc	r24, r1
    2a90:	08 95       	ret

00002a92 <__fp_inf>:
    2a92:	97 f9       	bld	r25, 7
    2a94:	9f 67       	ori	r25, 0x7F	; 127
    2a96:	80 e8       	ldi	r24, 0x80	; 128
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	08 95       	ret

00002a9e <__fp_nan>:
    2a9e:	9f ef       	ldi	r25, 0xFF	; 255
    2aa0:	80 ec       	ldi	r24, 0xC0	; 192
    2aa2:	08 95       	ret

00002aa4 <__fp_pscA>:
    2aa4:	00 24       	eor	r0, r0
    2aa6:	0a 94       	dec	r0
    2aa8:	16 16       	cp	r1, r22
    2aaa:	17 06       	cpc	r1, r23
    2aac:	18 06       	cpc	r1, r24
    2aae:	09 06       	cpc	r0, r25
    2ab0:	08 95       	ret

00002ab2 <__fp_pscB>:
    2ab2:	00 24       	eor	r0, r0
    2ab4:	0a 94       	dec	r0
    2ab6:	12 16       	cp	r1, r18
    2ab8:	13 06       	cpc	r1, r19
    2aba:	14 06       	cpc	r1, r20
    2abc:	05 06       	cpc	r0, r21
    2abe:	08 95       	ret

00002ac0 <__fp_round>:
    2ac0:	09 2e       	mov	r0, r25
    2ac2:	03 94       	inc	r0
    2ac4:	00 0c       	add	r0, r0
    2ac6:	11 f4       	brne	.+4      	; 0x2acc <__fp_round+0xc>
    2ac8:	88 23       	and	r24, r24
    2aca:	52 f0       	brmi	.+20     	; 0x2ae0 <__fp_round+0x20>
    2acc:	bb 0f       	add	r27, r27
    2ace:	40 f4       	brcc	.+16     	; 0x2ae0 <__fp_round+0x20>
    2ad0:	bf 2b       	or	r27, r31
    2ad2:	11 f4       	brne	.+4      	; 0x2ad8 <__fp_round+0x18>
    2ad4:	60 ff       	sbrs	r22, 0
    2ad6:	04 c0       	rjmp	.+8      	; 0x2ae0 <__fp_round+0x20>
    2ad8:	6f 5f       	subi	r22, 0xFF	; 255
    2ada:	7f 4f       	sbci	r23, 0xFF	; 255
    2adc:	8f 4f       	sbci	r24, 0xFF	; 255
    2ade:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae0:	08 95       	ret

00002ae2 <__fp_split3>:
    2ae2:	57 fd       	sbrc	r21, 7
    2ae4:	90 58       	subi	r25, 0x80	; 128
    2ae6:	44 0f       	add	r20, r20
    2ae8:	55 1f       	adc	r21, r21
    2aea:	59 f0       	breq	.+22     	; 0x2b02 <__fp_splitA+0x10>
    2aec:	5f 3f       	cpi	r21, 0xFF	; 255
    2aee:	71 f0       	breq	.+28     	; 0x2b0c <__fp_splitA+0x1a>
    2af0:	47 95       	ror	r20

00002af2 <__fp_splitA>:
    2af2:	88 0f       	add	r24, r24
    2af4:	97 fb       	bst	r25, 7
    2af6:	99 1f       	adc	r25, r25
    2af8:	61 f0       	breq	.+24     	; 0x2b12 <__fp_splitA+0x20>
    2afa:	9f 3f       	cpi	r25, 0xFF	; 255
    2afc:	79 f0       	breq	.+30     	; 0x2b1c <__fp_splitA+0x2a>
    2afe:	87 95       	ror	r24
    2b00:	08 95       	ret
    2b02:	12 16       	cp	r1, r18
    2b04:	13 06       	cpc	r1, r19
    2b06:	14 06       	cpc	r1, r20
    2b08:	55 1f       	adc	r21, r21
    2b0a:	f2 cf       	rjmp	.-28     	; 0x2af0 <__fp_split3+0xe>
    2b0c:	46 95       	lsr	r20
    2b0e:	f1 df       	rcall	.-30     	; 0x2af2 <__fp_splitA>
    2b10:	08 c0       	rjmp	.+16     	; 0x2b22 <__fp_splitA+0x30>
    2b12:	16 16       	cp	r1, r22
    2b14:	17 06       	cpc	r1, r23
    2b16:	18 06       	cpc	r1, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	f1 cf       	rjmp	.-30     	; 0x2afe <__fp_splitA+0xc>
    2b1c:	86 95       	lsr	r24
    2b1e:	71 05       	cpc	r23, r1
    2b20:	61 05       	cpc	r22, r1
    2b22:	08 94       	sec
    2b24:	08 95       	ret

00002b26 <__fp_zero>:
    2b26:	e8 94       	clt

00002b28 <__fp_szero>:
    2b28:	bb 27       	eor	r27, r27
    2b2a:	66 27       	eor	r22, r22
    2b2c:	77 27       	eor	r23, r23
    2b2e:	cb 01       	movw	r24, r22
    2b30:	97 f9       	bld	r25, 7
    2b32:	08 95       	ret

00002b34 <__gesf2>:
    2b34:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__fp_cmp>
    2b38:	08 f4       	brcc	.+2      	; 0x2b3c <__gesf2+0x8>
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	08 95       	ret

00002b3e <__mulsf3>:
    2b3e:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__mulsf3x>
    2b42:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__fp_round>
    2b46:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__fp_pscA>
    2b4a:	38 f0       	brcs	.+14     	; 0x2b5a <__mulsf3+0x1c>
    2b4c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__fp_pscB>
    2b50:	20 f0       	brcs	.+8      	; 0x2b5a <__mulsf3+0x1c>
    2b52:	95 23       	and	r25, r21
    2b54:	11 f0       	breq	.+4      	; 0x2b5a <__mulsf3+0x1c>
    2b56:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__fp_inf>
    2b5a:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <__fp_nan>
    2b5e:	11 24       	eor	r1, r1
    2b60:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__fp_szero>

00002b64 <__mulsf3x>:
    2b64:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__fp_split3>
    2b68:	70 f3       	brcs	.-36     	; 0x2b46 <__mulsf3+0x8>

00002b6a <__mulsf3_pse>:
    2b6a:	95 9f       	mul	r25, r21
    2b6c:	c1 f3       	breq	.-16     	; 0x2b5e <__mulsf3+0x20>
    2b6e:	95 0f       	add	r25, r21
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	55 1f       	adc	r21, r21
    2b74:	62 9f       	mul	r22, r18
    2b76:	f0 01       	movw	r30, r0
    2b78:	72 9f       	mul	r23, r18
    2b7a:	bb 27       	eor	r27, r27
    2b7c:	f0 0d       	add	r31, r0
    2b7e:	b1 1d       	adc	r27, r1
    2b80:	63 9f       	mul	r22, r19
    2b82:	aa 27       	eor	r26, r26
    2b84:	f0 0d       	add	r31, r0
    2b86:	b1 1d       	adc	r27, r1
    2b88:	aa 1f       	adc	r26, r26
    2b8a:	64 9f       	mul	r22, r20
    2b8c:	66 27       	eor	r22, r22
    2b8e:	b0 0d       	add	r27, r0
    2b90:	a1 1d       	adc	r26, r1
    2b92:	66 1f       	adc	r22, r22
    2b94:	82 9f       	mul	r24, r18
    2b96:	22 27       	eor	r18, r18
    2b98:	b0 0d       	add	r27, r0
    2b9a:	a1 1d       	adc	r26, r1
    2b9c:	62 1f       	adc	r22, r18
    2b9e:	73 9f       	mul	r23, r19
    2ba0:	b0 0d       	add	r27, r0
    2ba2:	a1 1d       	adc	r26, r1
    2ba4:	62 1f       	adc	r22, r18
    2ba6:	83 9f       	mul	r24, r19
    2ba8:	a0 0d       	add	r26, r0
    2baa:	61 1d       	adc	r22, r1
    2bac:	22 1f       	adc	r18, r18
    2bae:	74 9f       	mul	r23, r20
    2bb0:	33 27       	eor	r19, r19
    2bb2:	a0 0d       	add	r26, r0
    2bb4:	61 1d       	adc	r22, r1
    2bb6:	23 1f       	adc	r18, r19
    2bb8:	84 9f       	mul	r24, r20
    2bba:	60 0d       	add	r22, r0
    2bbc:	21 1d       	adc	r18, r1
    2bbe:	82 2f       	mov	r24, r18
    2bc0:	76 2f       	mov	r23, r22
    2bc2:	6a 2f       	mov	r22, r26
    2bc4:	11 24       	eor	r1, r1
    2bc6:	9f 57       	subi	r25, 0x7F	; 127
    2bc8:	50 40       	sbci	r21, 0x00	; 0
    2bca:	9a f0       	brmi	.+38     	; 0x2bf2 <__mulsf3_pse+0x88>
    2bcc:	f1 f0       	breq	.+60     	; 0x2c0a <__mulsf3_pse+0xa0>
    2bce:	88 23       	and	r24, r24
    2bd0:	4a f0       	brmi	.+18     	; 0x2be4 <__mulsf3_pse+0x7a>
    2bd2:	ee 0f       	add	r30, r30
    2bd4:	ff 1f       	adc	r31, r31
    2bd6:	bb 1f       	adc	r27, r27
    2bd8:	66 1f       	adc	r22, r22
    2bda:	77 1f       	adc	r23, r23
    2bdc:	88 1f       	adc	r24, r24
    2bde:	91 50       	subi	r25, 0x01	; 1
    2be0:	50 40       	sbci	r21, 0x00	; 0
    2be2:	a9 f7       	brne	.-22     	; 0x2bce <__mulsf3_pse+0x64>
    2be4:	9e 3f       	cpi	r25, 0xFE	; 254
    2be6:	51 05       	cpc	r21, r1
    2be8:	80 f0       	brcs	.+32     	; 0x2c0a <__mulsf3_pse+0xa0>
    2bea:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__fp_inf>
    2bee:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__fp_szero>
    2bf2:	5f 3f       	cpi	r21, 0xFF	; 255
    2bf4:	e4 f3       	brlt	.-8      	; 0x2bee <__mulsf3_pse+0x84>
    2bf6:	98 3e       	cpi	r25, 0xE8	; 232
    2bf8:	d4 f3       	brlt	.-12     	; 0x2bee <__mulsf3_pse+0x84>
    2bfa:	86 95       	lsr	r24
    2bfc:	77 95       	ror	r23
    2bfe:	67 95       	ror	r22
    2c00:	b7 95       	ror	r27
    2c02:	f7 95       	ror	r31
    2c04:	e7 95       	ror	r30
    2c06:	9f 5f       	subi	r25, 0xFF	; 255
    2c08:	c1 f7       	brne	.-16     	; 0x2bfa <__mulsf3_pse+0x90>
    2c0a:	fe 2b       	or	r31, r30
    2c0c:	88 0f       	add	r24, r24
    2c0e:	91 1d       	adc	r25, r1
    2c10:	96 95       	lsr	r25
    2c12:	87 95       	ror	r24
    2c14:	97 f9       	bld	r25, 7
    2c16:	08 95       	ret

00002c18 <sprintf>:
    2c18:	ae e0       	ldi	r26, 0x0E	; 14
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	e2 e1       	ldi	r30, 0x12	; 18
    2c1e:	f6 e1       	ldi	r31, 0x16	; 22
    2c20:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__prologue_saves__+0x1c>
    2c24:	0d 89       	ldd	r16, Y+21	; 0x15
    2c26:	1e 89       	ldd	r17, Y+22	; 0x16
    2c28:	86 e0       	ldi	r24, 0x06	; 6
    2c2a:	8c 83       	std	Y+4, r24	; 0x04
    2c2c:	1a 83       	std	Y+2, r17	; 0x02
    2c2e:	09 83       	std	Y+1, r16	; 0x01
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	9f e7       	ldi	r25, 0x7F	; 127
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
    2c38:	ae 01       	movw	r20, r28
    2c3a:	47 5e       	subi	r20, 0xE7	; 231
    2c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3e:	6f 89       	ldd	r22, Y+23	; 0x17
    2c40:	78 8d       	ldd	r23, Y+24	; 0x18
    2c42:	ce 01       	movw	r24, r28
    2c44:	01 96       	adiw	r24, 0x01	; 1
    2c46:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <vfprintf>
    2c4a:	ef 81       	ldd	r30, Y+7	; 0x07
    2c4c:	f8 85       	ldd	r31, Y+8	; 0x08
    2c4e:	e0 0f       	add	r30, r16
    2c50:	f1 1f       	adc	r31, r17
    2c52:	10 82       	st	Z, r1
    2c54:	2e 96       	adiw	r28, 0x0e	; 14
    2c56:	e4 e0       	ldi	r30, 0x04	; 4
    2c58:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <__epilogue_restores__+0x1c>

00002c5c <vfprintf>:
    2c5c:	ab e0       	ldi	r26, 0x0B	; 11
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e4 e3       	ldi	r30, 0x34	; 52
    2c62:	f6 e1       	ldi	r31, 0x16	; 22
    2c64:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__prologue_saves__>
    2c68:	6c 01       	movw	r12, r24
    2c6a:	7b 01       	movw	r14, r22
    2c6c:	8a 01       	movw	r16, r20
    2c6e:	fc 01       	movw	r30, r24
    2c70:	17 82       	std	Z+7, r1	; 0x07
    2c72:	16 82       	std	Z+6, r1	; 0x06
    2c74:	83 81       	ldd	r24, Z+3	; 0x03
    2c76:	81 ff       	sbrs	r24, 1
    2c78:	cc c1       	rjmp	.+920    	; 0x3012 <vfprintf+0x3b6>
    2c7a:	ce 01       	movw	r24, r28
    2c7c:	01 96       	adiw	r24, 0x01	; 1
    2c7e:	3c 01       	movw	r6, r24
    2c80:	f6 01       	movw	r30, r12
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	f7 01       	movw	r30, r14
    2c86:	93 fd       	sbrc	r25, 3
    2c88:	85 91       	lpm	r24, Z+
    2c8a:	93 ff       	sbrs	r25, 3
    2c8c:	81 91       	ld	r24, Z+
    2c8e:	7f 01       	movw	r14, r30
    2c90:	88 23       	and	r24, r24
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <vfprintf+0x3a>
    2c94:	ba c1       	rjmp	.+884    	; 0x300a <vfprintf+0x3ae>
    2c96:	85 32       	cpi	r24, 0x25	; 37
    2c98:	39 f4       	brne	.+14     	; 0x2ca8 <vfprintf+0x4c>
    2c9a:	93 fd       	sbrc	r25, 3
    2c9c:	85 91       	lpm	r24, Z+
    2c9e:	93 ff       	sbrs	r25, 3
    2ca0:	81 91       	ld	r24, Z+
    2ca2:	7f 01       	movw	r14, r30
    2ca4:	85 32       	cpi	r24, 0x25	; 37
    2ca6:	29 f4       	brne	.+10     	; 0x2cb2 <vfprintf+0x56>
    2ca8:	b6 01       	movw	r22, r12
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	0e 94 25 18 	call	0x304a	; 0x304a <fputc>
    2cb0:	e7 cf       	rjmp	.-50     	; 0x2c80 <vfprintf+0x24>
    2cb2:	91 2c       	mov	r9, r1
    2cb4:	21 2c       	mov	r2, r1
    2cb6:	31 2c       	mov	r3, r1
    2cb8:	ff e1       	ldi	r31, 0x1F	; 31
    2cba:	f3 15       	cp	r31, r3
    2cbc:	d8 f0       	brcs	.+54     	; 0x2cf4 <vfprintf+0x98>
    2cbe:	8b 32       	cpi	r24, 0x2B	; 43
    2cc0:	79 f0       	breq	.+30     	; 0x2ce0 <vfprintf+0x84>
    2cc2:	38 f4       	brcc	.+14     	; 0x2cd2 <vfprintf+0x76>
    2cc4:	80 32       	cpi	r24, 0x20	; 32
    2cc6:	79 f0       	breq	.+30     	; 0x2ce6 <vfprintf+0x8a>
    2cc8:	83 32       	cpi	r24, 0x23	; 35
    2cca:	a1 f4       	brne	.+40     	; 0x2cf4 <vfprintf+0x98>
    2ccc:	23 2d       	mov	r18, r3
    2cce:	20 61       	ori	r18, 0x10	; 16
    2cd0:	1d c0       	rjmp	.+58     	; 0x2d0c <vfprintf+0xb0>
    2cd2:	8d 32       	cpi	r24, 0x2D	; 45
    2cd4:	61 f0       	breq	.+24     	; 0x2cee <vfprintf+0x92>
    2cd6:	80 33       	cpi	r24, 0x30	; 48
    2cd8:	69 f4       	brne	.+26     	; 0x2cf4 <vfprintf+0x98>
    2cda:	23 2d       	mov	r18, r3
    2cdc:	21 60       	ori	r18, 0x01	; 1
    2cde:	16 c0       	rjmp	.+44     	; 0x2d0c <vfprintf+0xb0>
    2ce0:	83 2d       	mov	r24, r3
    2ce2:	82 60       	ori	r24, 0x02	; 2
    2ce4:	38 2e       	mov	r3, r24
    2ce6:	e3 2d       	mov	r30, r3
    2ce8:	e4 60       	ori	r30, 0x04	; 4
    2cea:	3e 2e       	mov	r3, r30
    2cec:	2a c0       	rjmp	.+84     	; 0x2d42 <vfprintf+0xe6>
    2cee:	f3 2d       	mov	r31, r3
    2cf0:	f8 60       	ori	r31, 0x08	; 8
    2cf2:	1d c0       	rjmp	.+58     	; 0x2d2e <vfprintf+0xd2>
    2cf4:	37 fc       	sbrc	r3, 7
    2cf6:	2d c0       	rjmp	.+90     	; 0x2d52 <vfprintf+0xf6>
    2cf8:	20 ed       	ldi	r18, 0xD0	; 208
    2cfa:	28 0f       	add	r18, r24
    2cfc:	2a 30       	cpi	r18, 0x0A	; 10
    2cfe:	40 f0       	brcs	.+16     	; 0x2d10 <vfprintf+0xb4>
    2d00:	8e 32       	cpi	r24, 0x2E	; 46
    2d02:	b9 f4       	brne	.+46     	; 0x2d32 <vfprintf+0xd6>
    2d04:	36 fc       	sbrc	r3, 6
    2d06:	81 c1       	rjmp	.+770    	; 0x300a <vfprintf+0x3ae>
    2d08:	23 2d       	mov	r18, r3
    2d0a:	20 64       	ori	r18, 0x40	; 64
    2d0c:	32 2e       	mov	r3, r18
    2d0e:	19 c0       	rjmp	.+50     	; 0x2d42 <vfprintf+0xe6>
    2d10:	36 fe       	sbrs	r3, 6
    2d12:	06 c0       	rjmp	.+12     	; 0x2d20 <vfprintf+0xc4>
    2d14:	8a e0       	ldi	r24, 0x0A	; 10
    2d16:	98 9e       	mul	r9, r24
    2d18:	20 0d       	add	r18, r0
    2d1a:	11 24       	eor	r1, r1
    2d1c:	92 2e       	mov	r9, r18
    2d1e:	11 c0       	rjmp	.+34     	; 0x2d42 <vfprintf+0xe6>
    2d20:	ea e0       	ldi	r30, 0x0A	; 10
    2d22:	2e 9e       	mul	r2, r30
    2d24:	20 0d       	add	r18, r0
    2d26:	11 24       	eor	r1, r1
    2d28:	22 2e       	mov	r2, r18
    2d2a:	f3 2d       	mov	r31, r3
    2d2c:	f0 62       	ori	r31, 0x20	; 32
    2d2e:	3f 2e       	mov	r3, r31
    2d30:	08 c0       	rjmp	.+16     	; 0x2d42 <vfprintf+0xe6>
    2d32:	8c 36       	cpi	r24, 0x6C	; 108
    2d34:	21 f4       	brne	.+8      	; 0x2d3e <vfprintf+0xe2>
    2d36:	83 2d       	mov	r24, r3
    2d38:	80 68       	ori	r24, 0x80	; 128
    2d3a:	38 2e       	mov	r3, r24
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <vfprintf+0xe6>
    2d3e:	88 36       	cpi	r24, 0x68	; 104
    2d40:	41 f4       	brne	.+16     	; 0x2d52 <vfprintf+0xf6>
    2d42:	f7 01       	movw	r30, r14
    2d44:	93 fd       	sbrc	r25, 3
    2d46:	85 91       	lpm	r24, Z+
    2d48:	93 ff       	sbrs	r25, 3
    2d4a:	81 91       	ld	r24, Z+
    2d4c:	7f 01       	movw	r14, r30
    2d4e:	81 11       	cpse	r24, r1
    2d50:	b3 cf       	rjmp	.-154    	; 0x2cb8 <vfprintf+0x5c>
    2d52:	98 2f       	mov	r25, r24
    2d54:	9f 7d       	andi	r25, 0xDF	; 223
    2d56:	95 54       	subi	r25, 0x45	; 69
    2d58:	93 30       	cpi	r25, 0x03	; 3
    2d5a:	28 f4       	brcc	.+10     	; 0x2d66 <vfprintf+0x10a>
    2d5c:	0c 5f       	subi	r16, 0xFC	; 252
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d60:	9f e3       	ldi	r25, 0x3F	; 63
    2d62:	99 83       	std	Y+1, r25	; 0x01
    2d64:	0d c0       	rjmp	.+26     	; 0x2d80 <vfprintf+0x124>
    2d66:	83 36       	cpi	r24, 0x63	; 99
    2d68:	31 f0       	breq	.+12     	; 0x2d76 <vfprintf+0x11a>
    2d6a:	83 37       	cpi	r24, 0x73	; 115
    2d6c:	71 f0       	breq	.+28     	; 0x2d8a <vfprintf+0x12e>
    2d6e:	83 35       	cpi	r24, 0x53	; 83
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <vfprintf+0x118>
    2d72:	59 c0       	rjmp	.+178    	; 0x2e26 <vfprintf+0x1ca>
    2d74:	21 c0       	rjmp	.+66     	; 0x2db8 <vfprintf+0x15c>
    2d76:	f8 01       	movw	r30, r16
    2d78:	80 81       	ld	r24, Z
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	0e 5f       	subi	r16, 0xFE	; 254
    2d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d80:	88 24       	eor	r8, r8
    2d82:	83 94       	inc	r8
    2d84:	91 2c       	mov	r9, r1
    2d86:	53 01       	movw	r10, r6
    2d88:	13 c0       	rjmp	.+38     	; 0x2db0 <vfprintf+0x154>
    2d8a:	28 01       	movw	r4, r16
    2d8c:	f2 e0       	ldi	r31, 0x02	; 2
    2d8e:	4f 0e       	add	r4, r31
    2d90:	51 1c       	adc	r5, r1
    2d92:	f8 01       	movw	r30, r16
    2d94:	a0 80       	ld	r10, Z
    2d96:	b1 80       	ldd	r11, Z+1	; 0x01
    2d98:	36 fe       	sbrs	r3, 6
    2d9a:	03 c0       	rjmp	.+6      	; 0x2da2 <vfprintf+0x146>
    2d9c:	69 2d       	mov	r22, r9
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <vfprintf+0x14a>
    2da2:	6f ef       	ldi	r22, 0xFF	; 255
    2da4:	7f ef       	ldi	r23, 0xFF	; 255
    2da6:	c5 01       	movw	r24, r10
    2da8:	0e 94 1a 18 	call	0x3034	; 0x3034 <strnlen>
    2dac:	4c 01       	movw	r8, r24
    2dae:	82 01       	movw	r16, r4
    2db0:	f3 2d       	mov	r31, r3
    2db2:	ff 77       	andi	r31, 0x7F	; 127
    2db4:	3f 2e       	mov	r3, r31
    2db6:	16 c0       	rjmp	.+44     	; 0x2de4 <vfprintf+0x188>
    2db8:	28 01       	movw	r4, r16
    2dba:	22 e0       	ldi	r18, 0x02	; 2
    2dbc:	42 0e       	add	r4, r18
    2dbe:	51 1c       	adc	r5, r1
    2dc0:	f8 01       	movw	r30, r16
    2dc2:	a0 80       	ld	r10, Z
    2dc4:	b1 80       	ldd	r11, Z+1	; 0x01
    2dc6:	36 fe       	sbrs	r3, 6
    2dc8:	03 c0       	rjmp	.+6      	; 0x2dd0 <vfprintf+0x174>
    2dca:	69 2d       	mov	r22, r9
    2dcc:	70 e0       	ldi	r23, 0x00	; 0
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <vfprintf+0x178>
    2dd0:	6f ef       	ldi	r22, 0xFF	; 255
    2dd2:	7f ef       	ldi	r23, 0xFF	; 255
    2dd4:	c5 01       	movw	r24, r10
    2dd6:	0e 94 0f 18 	call	0x301e	; 0x301e <strnlen_P>
    2dda:	4c 01       	movw	r8, r24
    2ddc:	f3 2d       	mov	r31, r3
    2dde:	f0 68       	ori	r31, 0x80	; 128
    2de0:	3f 2e       	mov	r3, r31
    2de2:	82 01       	movw	r16, r4
    2de4:	33 fc       	sbrc	r3, 3
    2de6:	1b c0       	rjmp	.+54     	; 0x2e1e <vfprintf+0x1c2>
    2de8:	82 2d       	mov	r24, r2
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	88 16       	cp	r8, r24
    2dee:	99 06       	cpc	r9, r25
    2df0:	b0 f4       	brcc	.+44     	; 0x2e1e <vfprintf+0x1c2>
    2df2:	b6 01       	movw	r22, r12
    2df4:	80 e2       	ldi	r24, 0x20	; 32
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 25 18 	call	0x304a	; 0x304a <fputc>
    2dfc:	2a 94       	dec	r2
    2dfe:	f4 cf       	rjmp	.-24     	; 0x2de8 <vfprintf+0x18c>
    2e00:	f5 01       	movw	r30, r10
    2e02:	37 fc       	sbrc	r3, 7
    2e04:	85 91       	lpm	r24, Z+
    2e06:	37 fe       	sbrs	r3, 7
    2e08:	81 91       	ld	r24, Z+
    2e0a:	5f 01       	movw	r10, r30
    2e0c:	b6 01       	movw	r22, r12
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 25 18 	call	0x304a	; 0x304a <fputc>
    2e14:	21 10       	cpse	r2, r1
    2e16:	2a 94       	dec	r2
    2e18:	21 e0       	ldi	r18, 0x01	; 1
    2e1a:	82 1a       	sub	r8, r18
    2e1c:	91 08       	sbc	r9, r1
    2e1e:	81 14       	cp	r8, r1
    2e20:	91 04       	cpc	r9, r1
    2e22:	71 f7       	brne	.-36     	; 0x2e00 <vfprintf+0x1a4>
    2e24:	e8 c0       	rjmp	.+464    	; 0x2ff6 <vfprintf+0x39a>
    2e26:	84 36       	cpi	r24, 0x64	; 100
    2e28:	11 f0       	breq	.+4      	; 0x2e2e <vfprintf+0x1d2>
    2e2a:	89 36       	cpi	r24, 0x69	; 105
    2e2c:	41 f5       	brne	.+80     	; 0x2e7e <vfprintf+0x222>
    2e2e:	f8 01       	movw	r30, r16
    2e30:	37 fe       	sbrs	r3, 7
    2e32:	07 c0       	rjmp	.+14     	; 0x2e42 <vfprintf+0x1e6>
    2e34:	60 81       	ld	r22, Z
    2e36:	71 81       	ldd	r23, Z+1	; 0x01
    2e38:	82 81       	ldd	r24, Z+2	; 0x02
    2e3a:	93 81       	ldd	r25, Z+3	; 0x03
    2e3c:	0c 5f       	subi	r16, 0xFC	; 252
    2e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e40:	08 c0       	rjmp	.+16     	; 0x2e52 <vfprintf+0x1f6>
    2e42:	60 81       	ld	r22, Z
    2e44:	71 81       	ldd	r23, Z+1	; 0x01
    2e46:	07 2e       	mov	r0, r23
    2e48:	00 0c       	add	r0, r0
    2e4a:	88 0b       	sbc	r24, r24
    2e4c:	99 0b       	sbc	r25, r25
    2e4e:	0e 5f       	subi	r16, 0xFE	; 254
    2e50:	1f 4f       	sbci	r17, 0xFF	; 255
    2e52:	f3 2d       	mov	r31, r3
    2e54:	ff 76       	andi	r31, 0x6F	; 111
    2e56:	3f 2e       	mov	r3, r31
    2e58:	97 ff       	sbrs	r25, 7
    2e5a:	09 c0       	rjmp	.+18     	; 0x2e6e <vfprintf+0x212>
    2e5c:	90 95       	com	r25
    2e5e:	80 95       	com	r24
    2e60:	70 95       	com	r23
    2e62:	61 95       	neg	r22
    2e64:	7f 4f       	sbci	r23, 0xFF	; 255
    2e66:	8f 4f       	sbci	r24, 0xFF	; 255
    2e68:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6a:	f0 68       	ori	r31, 0x80	; 128
    2e6c:	3f 2e       	mov	r3, r31
    2e6e:	2a e0       	ldi	r18, 0x0A	; 10
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	a3 01       	movw	r20, r6
    2e74:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__ultoa_invert>
    2e78:	88 2e       	mov	r8, r24
    2e7a:	86 18       	sub	r8, r6
    2e7c:	45 c0       	rjmp	.+138    	; 0x2f08 <vfprintf+0x2ac>
    2e7e:	85 37       	cpi	r24, 0x75	; 117
    2e80:	31 f4       	brne	.+12     	; 0x2e8e <vfprintf+0x232>
    2e82:	23 2d       	mov	r18, r3
    2e84:	2f 7e       	andi	r18, 0xEF	; 239
    2e86:	b2 2e       	mov	r11, r18
    2e88:	2a e0       	ldi	r18, 0x0A	; 10
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	25 c0       	rjmp	.+74     	; 0x2ed8 <vfprintf+0x27c>
    2e8e:	93 2d       	mov	r25, r3
    2e90:	99 7f       	andi	r25, 0xF9	; 249
    2e92:	b9 2e       	mov	r11, r25
    2e94:	8f 36       	cpi	r24, 0x6F	; 111
    2e96:	c1 f0       	breq	.+48     	; 0x2ec8 <vfprintf+0x26c>
    2e98:	18 f4       	brcc	.+6      	; 0x2ea0 <vfprintf+0x244>
    2e9a:	88 35       	cpi	r24, 0x58	; 88
    2e9c:	79 f0       	breq	.+30     	; 0x2ebc <vfprintf+0x260>
    2e9e:	b5 c0       	rjmp	.+362    	; 0x300a <vfprintf+0x3ae>
    2ea0:	80 37       	cpi	r24, 0x70	; 112
    2ea2:	19 f0       	breq	.+6      	; 0x2eaa <vfprintf+0x24e>
    2ea4:	88 37       	cpi	r24, 0x78	; 120
    2ea6:	21 f0       	breq	.+8      	; 0x2eb0 <vfprintf+0x254>
    2ea8:	b0 c0       	rjmp	.+352    	; 0x300a <vfprintf+0x3ae>
    2eaa:	e9 2f       	mov	r30, r25
    2eac:	e0 61       	ori	r30, 0x10	; 16
    2eae:	be 2e       	mov	r11, r30
    2eb0:	b4 fe       	sbrs	r11, 4
    2eb2:	0d c0       	rjmp	.+26     	; 0x2ece <vfprintf+0x272>
    2eb4:	fb 2d       	mov	r31, r11
    2eb6:	f4 60       	ori	r31, 0x04	; 4
    2eb8:	bf 2e       	mov	r11, r31
    2eba:	09 c0       	rjmp	.+18     	; 0x2ece <vfprintf+0x272>
    2ebc:	34 fe       	sbrs	r3, 4
    2ebe:	0a c0       	rjmp	.+20     	; 0x2ed4 <vfprintf+0x278>
    2ec0:	29 2f       	mov	r18, r25
    2ec2:	26 60       	ori	r18, 0x06	; 6
    2ec4:	b2 2e       	mov	r11, r18
    2ec6:	06 c0       	rjmp	.+12     	; 0x2ed4 <vfprintf+0x278>
    2ec8:	28 e0       	ldi	r18, 0x08	; 8
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	05 c0       	rjmp	.+10     	; 0x2ed8 <vfprintf+0x27c>
    2ece:	20 e1       	ldi	r18, 0x10	; 16
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <vfprintf+0x27c>
    2ed4:	20 e1       	ldi	r18, 0x10	; 16
    2ed6:	32 e0       	ldi	r19, 0x02	; 2
    2ed8:	f8 01       	movw	r30, r16
    2eda:	b7 fe       	sbrs	r11, 7
    2edc:	07 c0       	rjmp	.+14     	; 0x2eec <vfprintf+0x290>
    2ede:	60 81       	ld	r22, Z
    2ee0:	71 81       	ldd	r23, Z+1	; 0x01
    2ee2:	82 81       	ldd	r24, Z+2	; 0x02
    2ee4:	93 81       	ldd	r25, Z+3	; 0x03
    2ee6:	0c 5f       	subi	r16, 0xFC	; 252
    2ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eea:	06 c0       	rjmp	.+12     	; 0x2ef8 <vfprintf+0x29c>
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	0e 5f       	subi	r16, 0xFE	; 254
    2ef6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef8:	a3 01       	movw	r20, r6
    2efa:	0e 94 61 18 	call	0x30c2	; 0x30c2 <__ultoa_invert>
    2efe:	88 2e       	mov	r8, r24
    2f00:	86 18       	sub	r8, r6
    2f02:	fb 2d       	mov	r31, r11
    2f04:	ff 77       	andi	r31, 0x7F	; 127
    2f06:	3f 2e       	mov	r3, r31
    2f08:	36 fe       	sbrs	r3, 6
    2f0a:	0d c0       	rjmp	.+26     	; 0x2f26 <vfprintf+0x2ca>
    2f0c:	23 2d       	mov	r18, r3
    2f0e:	2e 7f       	andi	r18, 0xFE	; 254
    2f10:	a2 2e       	mov	r10, r18
    2f12:	89 14       	cp	r8, r9
    2f14:	58 f4       	brcc	.+22     	; 0x2f2c <vfprintf+0x2d0>
    2f16:	34 fe       	sbrs	r3, 4
    2f18:	0b c0       	rjmp	.+22     	; 0x2f30 <vfprintf+0x2d4>
    2f1a:	32 fc       	sbrc	r3, 2
    2f1c:	09 c0       	rjmp	.+18     	; 0x2f30 <vfprintf+0x2d4>
    2f1e:	83 2d       	mov	r24, r3
    2f20:	8e 7e       	andi	r24, 0xEE	; 238
    2f22:	a8 2e       	mov	r10, r24
    2f24:	05 c0       	rjmp	.+10     	; 0x2f30 <vfprintf+0x2d4>
    2f26:	b8 2c       	mov	r11, r8
    2f28:	a3 2c       	mov	r10, r3
    2f2a:	03 c0       	rjmp	.+6      	; 0x2f32 <vfprintf+0x2d6>
    2f2c:	b8 2c       	mov	r11, r8
    2f2e:	01 c0       	rjmp	.+2      	; 0x2f32 <vfprintf+0x2d6>
    2f30:	b9 2c       	mov	r11, r9
    2f32:	a4 fe       	sbrs	r10, 4
    2f34:	0f c0       	rjmp	.+30     	; 0x2f54 <vfprintf+0x2f8>
    2f36:	fe 01       	movw	r30, r28
    2f38:	e8 0d       	add	r30, r8
    2f3a:	f1 1d       	adc	r31, r1
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 33       	cpi	r24, 0x30	; 48
    2f40:	21 f4       	brne	.+8      	; 0x2f4a <vfprintf+0x2ee>
    2f42:	9a 2d       	mov	r25, r10
    2f44:	99 7e       	andi	r25, 0xE9	; 233
    2f46:	a9 2e       	mov	r10, r25
    2f48:	09 c0       	rjmp	.+18     	; 0x2f5c <vfprintf+0x300>
    2f4a:	a2 fe       	sbrs	r10, 2
    2f4c:	06 c0       	rjmp	.+12     	; 0x2f5a <vfprintf+0x2fe>
    2f4e:	b3 94       	inc	r11
    2f50:	b3 94       	inc	r11
    2f52:	04 c0       	rjmp	.+8      	; 0x2f5c <vfprintf+0x300>
    2f54:	8a 2d       	mov	r24, r10
    2f56:	86 78       	andi	r24, 0x86	; 134
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <vfprintf+0x300>
    2f5a:	b3 94       	inc	r11
    2f5c:	a3 fc       	sbrc	r10, 3
    2f5e:	11 c0       	rjmp	.+34     	; 0x2f82 <vfprintf+0x326>
    2f60:	a0 fe       	sbrs	r10, 0
    2f62:	06 c0       	rjmp	.+12     	; 0x2f70 <vfprintf+0x314>
    2f64:	b2 14       	cp	r11, r2
    2f66:	88 f4       	brcc	.+34     	; 0x2f8a <vfprintf+0x32e>
    2f68:	28 0c       	add	r2, r8
    2f6a:	92 2c       	mov	r9, r2
    2f6c:	9b 18       	sub	r9, r11
    2f6e:	0e c0       	rjmp	.+28     	; 0x2f8c <vfprintf+0x330>
    2f70:	b2 14       	cp	r11, r2
    2f72:	60 f4       	brcc	.+24     	; 0x2f8c <vfprintf+0x330>
    2f74:	b6 01       	movw	r22, r12
    2f76:	80 e2       	ldi	r24, 0x20	; 32
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 25 18 	call	0x304a	; 0x304a <fputc>
    2f7e:	b3 94       	inc	r11
    2f80:	f7 cf       	rjmp	.-18     	; 0x2f70 <vfprintf+0x314>
    2f82:	b2 14       	cp	r11, r2
    2f84:	18 f4       	brcc	.+6      	; 0x2f8c <vfprintf+0x330>
    2f86:	2b 18       	sub	r2, r11
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <vfprintf+0x332>
    2f8a:	98 2c       	mov	r9, r8
    2f8c:	21 2c       	mov	r2, r1
    2f8e:	a4 fe       	sbrs	r10, 4
    2f90:	10 c0       	rjmp	.+32     	; 0x2fb2 <vfprintf+0x356>
    2f92:	b6 01       	movw	r22, r12
    2f94:	80 e3       	ldi	r24, 0x30	; 48
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	0e 94 25 18 	call	0x304a	; 0x304a <fputc>
    2f9c:	a2 fe       	sbrs	r10, 2
    2f9e:	17 c0       	rjmp	.+46     	; 0x2fce <vfprintf+0x372>
    2fa0:	a1 fc       	sbrc	r10, 1
    2fa2:	03 c0       	rjmp	.+6      	; 0x2faa <vfprintf+0x34e>
    2fa4:	88 e7       	ldi	r24, 0x78	; 120
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	02 c0       	rjmp	.+4      	; 0x2fae <vfprintf+0x352>
    2faa:	88 e5       	ldi	r24, 0x58	; 88
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	b6 01       	movw	r22, r12
    2fb0:	0c c0       	rjmp	.+24     	; 0x2fca <vfprintf+0x36e>
    2fb2:	8a 2d       	mov	r24, r10
    2fb4:	86 78       	andi	r24, 0x86	; 134
    2fb6:	59 f0       	breq	.+22     	; 0x2fce <vfprintf+0x372>
    2fb8:	a1 fe       	sbrs	r10, 1
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <vfprintf+0x364>
    2fbc:	8b e2       	ldi	r24, 0x2B	; 43
    2fbe:	01 c0       	rjmp	.+2      	; 0x2fc2 <vfprintf+0x366>
    2fc0:	80 e2       	ldi	r24, 0x20	; 32
    2fc2:	a7 fc       	sbrc	r10, 7
    2fc4:	8d e2       	ldi	r24, 0x2D	; 45
    2fc6:	b6 01       	movw	r22, r12
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 25 18 	call	0x304a	; 0x304a <fputc>
    2fce:	89 14       	cp	r8, r9
    2fd0:	38 f4       	brcc	.+14     	; 0x2fe0 <vfprintf+0x384>
    2fd2:	b6 01       	movw	r22, r12
    2fd4:	80 e3       	ldi	r24, 0x30	; 48
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	0e 94 25 18 	call	0x304a	; 0x304a <fputc>
    2fdc:	9a 94       	dec	r9
    2fde:	f7 cf       	rjmp	.-18     	; 0x2fce <vfprintf+0x372>
    2fe0:	8a 94       	dec	r8
    2fe2:	f3 01       	movw	r30, r6
    2fe4:	e8 0d       	add	r30, r8
    2fe6:	f1 1d       	adc	r31, r1
    2fe8:	80 81       	ld	r24, Z
    2fea:	b6 01       	movw	r22, r12
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 25 18 	call	0x304a	; 0x304a <fputc>
    2ff2:	81 10       	cpse	r8, r1
    2ff4:	f5 cf       	rjmp	.-22     	; 0x2fe0 <vfprintf+0x384>
    2ff6:	22 20       	and	r2, r2
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <vfprintf+0x3a0>
    2ffa:	42 ce       	rjmp	.-892    	; 0x2c80 <vfprintf+0x24>
    2ffc:	b6 01       	movw	r22, r12
    2ffe:	80 e2       	ldi	r24, 0x20	; 32
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e 94 25 18 	call	0x304a	; 0x304a <fputc>
    3006:	2a 94       	dec	r2
    3008:	f6 cf       	rjmp	.-20     	; 0x2ff6 <vfprintf+0x39a>
    300a:	f6 01       	movw	r30, r12
    300c:	86 81       	ldd	r24, Z+6	; 0x06
    300e:	97 81       	ldd	r25, Z+7	; 0x07
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <vfprintf+0x3ba>
    3012:	8f ef       	ldi	r24, 0xFF	; 255
    3014:	9f ef       	ldi	r25, 0xFF	; 255
    3016:	2b 96       	adiw	r28, 0x0b	; 11
    3018:	e2 e1       	ldi	r30, 0x12	; 18
    301a:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <__epilogue_restores__>

0000301e <strnlen_P>:
    301e:	fc 01       	movw	r30, r24
    3020:	05 90       	lpm	r0, Z+
    3022:	61 50       	subi	r22, 0x01	; 1
    3024:	70 40       	sbci	r23, 0x00	; 0
    3026:	01 10       	cpse	r0, r1
    3028:	d8 f7       	brcc	.-10     	; 0x3020 <strnlen_P+0x2>
    302a:	80 95       	com	r24
    302c:	90 95       	com	r25
    302e:	8e 0f       	add	r24, r30
    3030:	9f 1f       	adc	r25, r31
    3032:	08 95       	ret

00003034 <strnlen>:
    3034:	fc 01       	movw	r30, r24
    3036:	61 50       	subi	r22, 0x01	; 1
    3038:	70 40       	sbci	r23, 0x00	; 0
    303a:	01 90       	ld	r0, Z+
    303c:	01 10       	cpse	r0, r1
    303e:	d8 f7       	brcc	.-10     	; 0x3036 <strnlen+0x2>
    3040:	80 95       	com	r24
    3042:	90 95       	com	r25
    3044:	8e 0f       	add	r24, r30
    3046:	9f 1f       	adc	r25, r31
    3048:	08 95       	ret

0000304a <fputc>:
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	fb 01       	movw	r30, r22
    3054:	23 81       	ldd	r18, Z+3	; 0x03
    3056:	21 fd       	sbrc	r18, 1
    3058:	03 c0       	rjmp	.+6      	; 0x3060 <fputc+0x16>
    305a:	8f ef       	ldi	r24, 0xFF	; 255
    305c:	9f ef       	ldi	r25, 0xFF	; 255
    305e:	2c c0       	rjmp	.+88     	; 0x30b8 <fputc+0x6e>
    3060:	22 ff       	sbrs	r18, 2
    3062:	16 c0       	rjmp	.+44     	; 0x3090 <fputc+0x46>
    3064:	46 81       	ldd	r20, Z+6	; 0x06
    3066:	57 81       	ldd	r21, Z+7	; 0x07
    3068:	24 81       	ldd	r18, Z+4	; 0x04
    306a:	35 81       	ldd	r19, Z+5	; 0x05
    306c:	42 17       	cp	r20, r18
    306e:	53 07       	cpc	r21, r19
    3070:	44 f4       	brge	.+16     	; 0x3082 <fputc+0x38>
    3072:	a0 81       	ld	r26, Z
    3074:	b1 81       	ldd	r27, Z+1	; 0x01
    3076:	9d 01       	movw	r18, r26
    3078:	2f 5f       	subi	r18, 0xFF	; 255
    307a:	3f 4f       	sbci	r19, 0xFF	; 255
    307c:	31 83       	std	Z+1, r19	; 0x01
    307e:	20 83       	st	Z, r18
    3080:	8c 93       	st	X, r24
    3082:	26 81       	ldd	r18, Z+6	; 0x06
    3084:	37 81       	ldd	r19, Z+7	; 0x07
    3086:	2f 5f       	subi	r18, 0xFF	; 255
    3088:	3f 4f       	sbci	r19, 0xFF	; 255
    308a:	37 83       	std	Z+7, r19	; 0x07
    308c:	26 83       	std	Z+6, r18	; 0x06
    308e:	14 c0       	rjmp	.+40     	; 0x30b8 <fputc+0x6e>
    3090:	8b 01       	movw	r16, r22
    3092:	ec 01       	movw	r28, r24
    3094:	fb 01       	movw	r30, r22
    3096:	00 84       	ldd	r0, Z+8	; 0x08
    3098:	f1 85       	ldd	r31, Z+9	; 0x09
    309a:	e0 2d       	mov	r30, r0
    309c:	09 95       	icall
    309e:	89 2b       	or	r24, r25
    30a0:	e1 f6       	brne	.-72     	; 0x305a <fputc+0x10>
    30a2:	d8 01       	movw	r26, r16
    30a4:	16 96       	adiw	r26, 0x06	; 6
    30a6:	8d 91       	ld	r24, X+
    30a8:	9c 91       	ld	r25, X
    30aa:	17 97       	sbiw	r26, 0x07	; 7
    30ac:	01 96       	adiw	r24, 0x01	; 1
    30ae:	17 96       	adiw	r26, 0x07	; 7
    30b0:	9c 93       	st	X, r25
    30b2:	8e 93       	st	-X, r24
    30b4:	16 97       	sbiw	r26, 0x06	; 6
    30b6:	ce 01       	movw	r24, r28
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	1f 91       	pop	r17
    30be:	0f 91       	pop	r16
    30c0:	08 95       	ret

000030c2 <__ultoa_invert>:
    30c2:	fa 01       	movw	r30, r20
    30c4:	aa 27       	eor	r26, r26
    30c6:	28 30       	cpi	r18, 0x08	; 8
    30c8:	51 f1       	breq	.+84     	; 0x311e <__ultoa_invert+0x5c>
    30ca:	20 31       	cpi	r18, 0x10	; 16
    30cc:	81 f1       	breq	.+96     	; 0x312e <__ultoa_invert+0x6c>
    30ce:	e8 94       	clt
    30d0:	6f 93       	push	r22
    30d2:	6e 7f       	andi	r22, 0xFE	; 254
    30d4:	6e 5f       	subi	r22, 0xFE	; 254
    30d6:	7f 4f       	sbci	r23, 0xFF	; 255
    30d8:	8f 4f       	sbci	r24, 0xFF	; 255
    30da:	9f 4f       	sbci	r25, 0xFF	; 255
    30dc:	af 4f       	sbci	r26, 0xFF	; 255
    30de:	b1 e0       	ldi	r27, 0x01	; 1
    30e0:	3e d0       	rcall	.+124    	; 0x315e <__ultoa_invert+0x9c>
    30e2:	b4 e0       	ldi	r27, 0x04	; 4
    30e4:	3c d0       	rcall	.+120    	; 0x315e <__ultoa_invert+0x9c>
    30e6:	67 0f       	add	r22, r23
    30e8:	78 1f       	adc	r23, r24
    30ea:	89 1f       	adc	r24, r25
    30ec:	9a 1f       	adc	r25, r26
    30ee:	a1 1d       	adc	r26, r1
    30f0:	68 0f       	add	r22, r24
    30f2:	79 1f       	adc	r23, r25
    30f4:	8a 1f       	adc	r24, r26
    30f6:	91 1d       	adc	r25, r1
    30f8:	a1 1d       	adc	r26, r1
    30fa:	6a 0f       	add	r22, r26
    30fc:	71 1d       	adc	r23, r1
    30fe:	81 1d       	adc	r24, r1
    3100:	91 1d       	adc	r25, r1
    3102:	a1 1d       	adc	r26, r1
    3104:	20 d0       	rcall	.+64     	; 0x3146 <__ultoa_invert+0x84>
    3106:	09 f4       	brne	.+2      	; 0x310a <__ultoa_invert+0x48>
    3108:	68 94       	set
    310a:	3f 91       	pop	r19
    310c:	2a e0       	ldi	r18, 0x0A	; 10
    310e:	26 9f       	mul	r18, r22
    3110:	11 24       	eor	r1, r1
    3112:	30 19       	sub	r19, r0
    3114:	30 5d       	subi	r19, 0xD0	; 208
    3116:	31 93       	st	Z+, r19
    3118:	de f6       	brtc	.-74     	; 0x30d0 <__ultoa_invert+0xe>
    311a:	cf 01       	movw	r24, r30
    311c:	08 95       	ret
    311e:	46 2f       	mov	r20, r22
    3120:	47 70       	andi	r20, 0x07	; 7
    3122:	40 5d       	subi	r20, 0xD0	; 208
    3124:	41 93       	st	Z+, r20
    3126:	b3 e0       	ldi	r27, 0x03	; 3
    3128:	0f d0       	rcall	.+30     	; 0x3148 <__ultoa_invert+0x86>
    312a:	c9 f7       	brne	.-14     	; 0x311e <__ultoa_invert+0x5c>
    312c:	f6 cf       	rjmp	.-20     	; 0x311a <__ultoa_invert+0x58>
    312e:	46 2f       	mov	r20, r22
    3130:	4f 70       	andi	r20, 0x0F	; 15
    3132:	40 5d       	subi	r20, 0xD0	; 208
    3134:	4a 33       	cpi	r20, 0x3A	; 58
    3136:	18 f0       	brcs	.+6      	; 0x313e <__ultoa_invert+0x7c>
    3138:	49 5d       	subi	r20, 0xD9	; 217
    313a:	31 fd       	sbrc	r19, 1
    313c:	40 52       	subi	r20, 0x20	; 32
    313e:	41 93       	st	Z+, r20
    3140:	02 d0       	rcall	.+4      	; 0x3146 <__ultoa_invert+0x84>
    3142:	a9 f7       	brne	.-22     	; 0x312e <__ultoa_invert+0x6c>
    3144:	ea cf       	rjmp	.-44     	; 0x311a <__ultoa_invert+0x58>
    3146:	b4 e0       	ldi	r27, 0x04	; 4
    3148:	a6 95       	lsr	r26
    314a:	97 95       	ror	r25
    314c:	87 95       	ror	r24
    314e:	77 95       	ror	r23
    3150:	67 95       	ror	r22
    3152:	ba 95       	dec	r27
    3154:	c9 f7       	brne	.-14     	; 0x3148 <__ultoa_invert+0x86>
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	61 05       	cpc	r22, r1
    315a:	71 05       	cpc	r23, r1
    315c:	08 95       	ret
    315e:	9b 01       	movw	r18, r22
    3160:	ac 01       	movw	r20, r24
    3162:	0a 2e       	mov	r0, r26
    3164:	06 94       	lsr	r0
    3166:	57 95       	ror	r21
    3168:	47 95       	ror	r20
    316a:	37 95       	ror	r19
    316c:	27 95       	ror	r18
    316e:	ba 95       	dec	r27
    3170:	c9 f7       	brne	.-14     	; 0x3164 <__ultoa_invert+0xa2>
    3172:	62 0f       	add	r22, r18
    3174:	73 1f       	adc	r23, r19
    3176:	84 1f       	adc	r24, r20
    3178:	95 1f       	adc	r25, r21
    317a:	a0 1d       	adc	r26, r0
    317c:	08 95       	ret

0000317e <__prologue_saves__>:
    317e:	2f 92       	push	r2
    3180:	3f 92       	push	r3
    3182:	4f 92       	push	r4
    3184:	5f 92       	push	r5
    3186:	6f 92       	push	r6
    3188:	7f 92       	push	r7
    318a:	8f 92       	push	r8
    318c:	9f 92       	push	r9
    318e:	af 92       	push	r10
    3190:	bf 92       	push	r11
    3192:	cf 92       	push	r12
    3194:	df 92       	push	r13
    3196:	ef 92       	push	r14
    3198:	ff 92       	push	r15
    319a:	0f 93       	push	r16
    319c:	1f 93       	push	r17
    319e:	cf 93       	push	r28
    31a0:	df 93       	push	r29
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	ca 1b       	sub	r28, r26
    31a8:	db 0b       	sbc	r29, r27
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	09 94       	ijmp

000031b6 <__epilogue_restores__>:
    31b6:	2a 88       	ldd	r2, Y+18	; 0x12
    31b8:	39 88       	ldd	r3, Y+17	; 0x11
    31ba:	48 88       	ldd	r4, Y+16	; 0x10
    31bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    31be:	6e 84       	ldd	r6, Y+14	; 0x0e
    31c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    31c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    31c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    31c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    31c8:	b9 84       	ldd	r11, Y+9	; 0x09
    31ca:	c8 84       	ldd	r12, Y+8	; 0x08
    31cc:	df 80       	ldd	r13, Y+7	; 0x07
    31ce:	ee 80       	ldd	r14, Y+6	; 0x06
    31d0:	fd 80       	ldd	r15, Y+5	; 0x05
    31d2:	0c 81       	ldd	r16, Y+4	; 0x04
    31d4:	1b 81       	ldd	r17, Y+3	; 0x03
    31d6:	aa 81       	ldd	r26, Y+2	; 0x02
    31d8:	b9 81       	ldd	r27, Y+1	; 0x01
    31da:	ce 0f       	add	r28, r30
    31dc:	d1 1d       	adc	r29, r1
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	ed 01       	movw	r28, r26
    31ea:	08 95       	ret

000031ec <_exit>:
    31ec:	f8 94       	cli

000031ee <__stop_program>:
    31ee:	ff cf       	rjmp	.-2      	; 0x31ee <__stop_program>
