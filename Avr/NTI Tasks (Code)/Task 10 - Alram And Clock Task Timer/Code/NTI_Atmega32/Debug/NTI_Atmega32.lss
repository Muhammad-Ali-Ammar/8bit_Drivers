
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  00004b2e  00004bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800112  00800112  00004c74  2**0
                  ALLOC
  3 .stab         00009114  00000000  00000000  00004c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000053ee  00000000  00000000  0000dd88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00013176  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00013188  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  000131c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  000136aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00013b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00013b67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_1>
       8:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__vector_2>
       c:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_10>
      2c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e5 18 	call	0x31ca	; 0x31ca <main>
      8a:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Convert_IntToString>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	6a 83       	std	Y+2, r22	; 0x02
      a8:	7b 83       	std	Y+3, r23	; 0x03
      aa:	8c 83       	std	Y+4, r24	; 0x04
      ac:	9d 83       	std	Y+5, r25	; 0x05
      ae:	5f 83       	std	Y+7, r21	; 0x07
      b0:	4e 83       	std	Y+6, r20	; 0x06
      b2:	19 82       	std	Y+1, r1	; 0x01
      b4:	8e 81       	ldd	r24, Y+6	; 0x06
      b6:	9f 81       	ldd	r25, Y+7	; 0x07
      b8:	89 2b       	or	r24, r25
      ba:	19 f4       	brne	.+6      	; 0xc2 <Convert_IntToString+0x30>
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	1d c0       	rjmp	.+58     	; 0xfc <Convert_IntToString+0x6a>
      c2:	8d 81       	ldd	r24, Y+5	; 0x05
      c4:	8f 93       	push	r24
      c6:	8c 81       	ldd	r24, Y+4	; 0x04
      c8:	8f 93       	push	r24
      ca:	8b 81       	ldd	r24, Y+3	; 0x03
      cc:	8f 93       	push	r24
      ce:	8a 81       	ldd	r24, Y+2	; 0x02
      d0:	8f 93       	push	r24
      d2:	8e ea       	ldi	r24, 0xAE	; 174
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	89 2f       	mov	r24, r25
      d8:	8f 93       	push	r24
      da:	8e ea       	ldi	r24, 0xAE	; 174
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	8f 93       	push	r24
      e0:	8f 81       	ldd	r24, Y+7	; 0x07
      e2:	8f 93       	push	r24
      e4:	8e 81       	ldd	r24, Y+6	; 0x06
      e6:	8f 93       	push	r24
      e8:	0e 94 ab 22 	call	0x4556	; 0x4556 <sprintf>
      ec:	8d b7       	in	r24, 0x3d	; 61
      ee:	9e b7       	in	r25, 0x3e	; 62
      f0:	08 96       	adiw	r24, 0x08	; 8
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	f8 94       	cli
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	27 96       	adiw	r28, 0x07	; 7
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f32 Copy_f32Number, pu8 Address_str){
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	27 97       	sbiw	r28, 0x07	; 7
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	6a 83       	std	Y+2, r22	; 0x02
     126:	7b 83       	std	Y+3, r23	; 0x03
     128:	8c 83       	std	Y+4, r24	; 0x04
     12a:	9d 83       	std	Y+5, r25	; 0x05
     12c:	5f 83       	std	Y+7, r21	; 0x07
     12e:	4e 83       	std	Y+6, r20	; 0x06


	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     130:	19 82       	std	Y+1, r1	; 0x01
		if(NULL == Address_str){
     132:	8e 81       	ldd	r24, Y+6	; 0x06
     134:	9f 81       	ldd	r25, Y+7	; 0x07
     136:	89 2b       	or	r24, r25
     138:	19 f4       	brne	.+6      	; 0x140 <Convert_FloatToString+0x30>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	89 83       	std	Y+1, r24	; 0x01
     13e:	1d c0       	rjmp	.+58     	; 0x17a <Convert_FloatToString+0x6a>
		}

		else{

			sprintf(Address_str, "%f", Copy_f32Number);
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	8f 93       	push	r24
     144:	8c 81       	ldd	r24, Y+4	; 0x04
     146:	8f 93       	push	r24
     148:	8b 81       	ldd	r24, Y+3	; 0x03
     14a:	8f 93       	push	r24
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	8f 93       	push	r24
     150:	82 eb       	ldi	r24, 0xB2	; 178
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	89 2f       	mov	r24, r25
     156:	8f 93       	push	r24
     158:	82 eb       	ldi	r24, 0xB2	; 178
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	8f 93       	push	r24
     15e:	8f 81       	ldd	r24, Y+7	; 0x07
     160:	8f 93       	push	r24
     162:	8e 81       	ldd	r24, Y+6	; 0x06
     164:	8f 93       	push	r24
     166:	0e 94 ab 22 	call	0x4556	; 0x4556 <sprintf>
     16a:	8d b7       	in	r24, 0x3d	; 61
     16c:	9e b7       	in	r25, 0x3e	; 62
     16e:	08 96       	adiw	r24, 0x08	; 8
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
		}

		return Loc_enuStatus;
     17a:	89 81       	ldd	r24, Y+1	; 0x01


}
     17c:	27 96       	adiw	r28, 0x07	; 7
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	de bf       	out	0x3e, r29	; 62
     184:	0f be       	out	0x3f, r0	; 63
     186:	cd bf       	out	0x3d, r28	; 61
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <Convert_StringTou8>:



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){
     18e:	2f 92       	push	r2
     190:	3f 92       	push	r3
     192:	4f 92       	push	r4
     194:	5f 92       	push	r5
     196:	6f 92       	push	r6
     198:	7f 92       	push	r7
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	6e 97       	sbiw	r28, 0x1e	; 30
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	9c 87       	std	Y+12, r25	; 0x0c
     1c4:	8b 87       	std	Y+11, r24	; 0x0b
     1c6:	7e 87       	std	Y+14, r23	; 0x0e
     1c8:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     1ca:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     1cc:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     1ce:	1b 82       	std	Y+3, r1	; 0x03
     1d0:	1c 82       	std	Y+4, r1	; 0x04
     1d2:	1d 82       	std	Y+5, r1	; 0x05
     1d4:	1e 82       	std	Y+6, r1	; 0x06
     1d6:	1f 82       	std	Y+7, r1	; 0x07
     1d8:	18 86       	std	Y+8, r1	; 0x08
     1da:	19 86       	std	Y+9, r1	; 0x09
     1dc:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     1de:	8d 85       	ldd	r24, Y+13	; 0x0d
     1e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     1e2:	89 2b       	or	r24, r25
     1e4:	21 f0       	breq	.+8      	; 0x1ee <Convert_StringTou8+0x60>
     1e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ea:	89 2b       	or	r24, r25
     1ec:	19 f4       	brne	.+6      	; 0x1f4 <Convert_StringTou8+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	9f c0       	rjmp	.+318    	; 0x332 <Convert_StringTou8+0x1a4>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     1f4:	1a 82       	std	Y+2, r1	; 0x02
     1f6:	8c c0       	rjmp	.+280    	; 0x310 <Convert_StringTou8+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     1f8:	2b 81       	ldd	r18, Y+3	; 0x03
     1fa:	3c 81       	ldd	r19, Y+4	; 0x04
     1fc:	4d 81       	ldd	r20, Y+5	; 0x05
     1fe:	5e 81       	ldd	r21, Y+6	; 0x06
     200:	6f 81       	ldd	r22, Y+7	; 0x07
     202:	78 85       	ldd	r23, Y+8	; 0x08
     204:	89 85       	ldd	r24, Y+9	; 0x09
     206:	9a 85       	ldd	r25, Y+10	; 0x0a
     208:	22 2e       	mov	r2, r18
     20a:	33 2e       	mov	r3, r19
     20c:	44 2e       	mov	r4, r20
     20e:	55 2e       	mov	r5, r21
     210:	66 2e       	mov	r6, r22
     212:	77 2e       	mov	r7, r23
     214:	88 2e       	mov	r8, r24
     216:	99 2e       	mov	r9, r25
     218:	22 2d       	mov	r18, r2
     21a:	33 2d       	mov	r19, r3
     21c:	44 2d       	mov	r20, r4
     21e:	55 2d       	mov	r21, r5
     220:	66 2d       	mov	r22, r6
     222:	77 2d       	mov	r23, r7
     224:	88 2d       	mov	r24, r8
     226:	99 2d       	mov	r25, r9
     228:	01 e0       	ldi	r16, 0x01	; 1
     22a:	0e 94 bf 20 	call	0x417e	; 0x417e <__ashldi3>
     22e:	a2 2e       	mov	r10, r18
     230:	b3 2e       	mov	r11, r19
     232:	c4 2e       	mov	r12, r20
     234:	d5 2e       	mov	r13, r21
     236:	e6 2e       	mov	r14, r22
     238:	f7 2e       	mov	r15, r23
     23a:	08 2f       	mov	r16, r24
     23c:	19 2f       	mov	r17, r25
     23e:	2a 2c       	mov	r2, r10
     240:	3b 2c       	mov	r3, r11
     242:	4c 2c       	mov	r4, r12
     244:	5d 2c       	mov	r5, r13
     246:	6e 2c       	mov	r6, r14
     248:	7f 2c       	mov	r7, r15
     24a:	80 2e       	mov	r8, r16
     24c:	91 2e       	mov	r9, r17
     24e:	22 2d       	mov	r18, r2
     250:	33 2d       	mov	r19, r3
     252:	44 2d       	mov	r20, r4
     254:	55 2d       	mov	r21, r5
     256:	66 2d       	mov	r22, r6
     258:	77 2d       	mov	r23, r7
     25a:	88 2d       	mov	r24, r8
     25c:	99 2d       	mov	r25, r9
     25e:	02 e0       	ldi	r16, 0x02	; 2
     260:	0e 94 bf 20 	call	0x417e	; 0x417e <__ashldi3>
     264:	2f 8b       	std	Y+23, r18	; 0x17
     266:	38 8f       	std	Y+24, r19	; 0x18
     268:	49 8f       	std	Y+25, r20	; 0x19
     26a:	5a 8f       	std	Y+26, r21	; 0x1a
     26c:	6b 8f       	std	Y+27, r22	; 0x1b
     26e:	7c 8f       	std	Y+28, r23	; 0x1c
     270:	8d 8f       	std	Y+29, r24	; 0x1d
     272:	9e 8f       	std	Y+30, r25	; 0x1e
     274:	22 2d       	mov	r18, r2
     276:	33 2d       	mov	r19, r3
     278:	44 2d       	mov	r20, r4
     27a:	55 2d       	mov	r21, r5
     27c:	66 2d       	mov	r22, r6
     27e:	77 2d       	mov	r23, r7
     280:	88 2d       	mov	r24, r8
     282:	99 2d       	mov	r25, r9
     284:	af 88       	ldd	r10, Y+23	; 0x17
     286:	b8 8c       	ldd	r11, Y+24	; 0x18
     288:	c9 8c       	ldd	r12, Y+25	; 0x19
     28a:	da 8c       	ldd	r13, Y+26	; 0x1a
     28c:	eb 8c       	ldd	r14, Y+27	; 0x1b
     28e:	fc 8c       	ldd	r15, Y+28	; 0x1c
     290:	0d 8d       	ldd	r16, Y+29	; 0x1d
     292:	1e 8d       	ldd	r17, Y+30	; 0x1e
     294:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__adddi3>
     298:	a2 2e       	mov	r10, r18
     29a:	b3 2e       	mov	r11, r19
     29c:	c4 2e       	mov	r12, r20
     29e:	d5 2e       	mov	r13, r21
     2a0:	e6 2e       	mov	r14, r22
     2a2:	f7 2e       	mov	r15, r23
     2a4:	08 2f       	mov	r16, r24
     2a6:	19 2f       	mov	r17, r25
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	88 2f       	mov	r24, r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	2d 85       	ldd	r18, Y+13	; 0x0d
     2b0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2b2:	82 0f       	add	r24, r18
     2b4:	93 1f       	adc	r25, r19
     2b6:	fc 01       	movw	r30, r24
     2b8:	80 81       	ld	r24, Z
     2ba:	88 2f       	mov	r24, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	c0 97       	sbiw	r24, 0x30	; 48
     2c0:	98 8b       	std	Y+16, r25	; 0x10
     2c2:	8f 87       	std	Y+15, r24	; 0x0f
     2c4:	89 2f       	mov	r24, r25
     2c6:	88 0f       	add	r24, r24
     2c8:	88 0b       	sbc	r24, r24
     2ca:	89 8b       	std	Y+17, r24	; 0x11
     2cc:	8a 8b       	std	Y+18, r24	; 0x12
     2ce:	8b 8b       	std	Y+19, r24	; 0x13
     2d0:	8c 8b       	std	Y+20, r24	; 0x14
     2d2:	8d 8b       	std	Y+21, r24	; 0x15
     2d4:	8e 8b       	std	Y+22, r24	; 0x16
     2d6:	2a 2d       	mov	r18, r10
     2d8:	3b 2d       	mov	r19, r11
     2da:	4c 2d       	mov	r20, r12
     2dc:	5d 2d       	mov	r21, r13
     2de:	6e 2d       	mov	r22, r14
     2e0:	7f 2d       	mov	r23, r15
     2e2:	80 2f       	mov	r24, r16
     2e4:	91 2f       	mov	r25, r17
     2e6:	af 84       	ldd	r10, Y+15	; 0x0f
     2e8:	b8 88       	ldd	r11, Y+16	; 0x10
     2ea:	c9 88       	ldd	r12, Y+17	; 0x11
     2ec:	da 88       	ldd	r13, Y+18	; 0x12
     2ee:	eb 88       	ldd	r14, Y+19	; 0x13
     2f0:	fc 88       	ldd	r15, Y+20	; 0x14
     2f2:	0d 89       	ldd	r16, Y+21	; 0x15
     2f4:	1e 89       	ldd	r17, Y+22	; 0x16
     2f6:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__adddi3>
     2fa:	2b 83       	std	Y+3, r18	; 0x03
     2fc:	3c 83       	std	Y+4, r19	; 0x04
     2fe:	4d 83       	std	Y+5, r20	; 0x05
     300:	5e 83       	std	Y+6, r21	; 0x06
     302:	6f 83       	std	Y+7, r22	; 0x07
     304:	78 87       	std	Y+8, r23	; 0x08
     306:	89 87       	std	Y+9, r24	; 0x09
     308:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     30a:	8a 81       	ldd	r24, Y+2	; 0x02
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	2d 85       	ldd	r18, Y+13	; 0x0d
     318:	3e 85       	ldd	r19, Y+14	; 0x0e
     31a:	82 0f       	add	r24, r18
     31c:	93 1f       	adc	r25, r19
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	88 23       	and	r24, r24
     324:	09 f0       	breq	.+2      	; 0x328 <Convert_StringTou8+0x19a>
     326:	68 cf       	rjmp	.-304    	; 0x1f8 <Convert_StringTou8+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     328:	2b 81       	ldd	r18, Y+3	; 0x03
     32a:	8b 85       	ldd	r24, Y+11	; 0x0b
     32c:	9c 85       	ldd	r25, Y+12	; 0x0c
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     332:	89 81       	ldd	r24, Y+1	; 0x01

}
     334:	6e 96       	adiw	r28, 0x1e	; 30
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	cf 90       	pop	r12
     350:	bf 90       	pop	r11
     352:	af 90       	pop	r10
     354:	9f 90       	pop	r9
     356:	8f 90       	pop	r8
     358:	7f 90       	pop	r7
     35a:	6f 90       	pop	r6
     35c:	5f 90       	pop	r5
     35e:	4f 90       	pop	r4
     360:	3f 90       	pop	r3
     362:	2f 90       	pop	r2
     364:	08 95       	ret

00000366 <Convert_StringTou16>:


Std_StatusType Convert_StringTou16 (u16* Address_Number, pu8 Address_str){
     366:	2f 92       	push	r2
     368:	3f 92       	push	r3
     36a:	4f 92       	push	r4
     36c:	5f 92       	push	r5
     36e:	6f 92       	push	r6
     370:	7f 92       	push	r7
     372:	8f 92       	push	r8
     374:	9f 92       	push	r9
     376:	af 92       	push	r10
     378:	bf 92       	push	r11
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	6e 97       	sbiw	r28, 0x1e	; 30
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	9c 87       	std	Y+12, r25	; 0x0c
     39c:	8b 87       	std	Y+11, r24	; 0x0b
     39e:	7e 87       	std	Y+14, r23	; 0x0e
     3a0:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     3a2:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     3a4:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     3a6:	1b 82       	std	Y+3, r1	; 0x03
     3a8:	1c 82       	std	Y+4, r1	; 0x04
     3aa:	1d 82       	std	Y+5, r1	; 0x05
     3ac:	1e 82       	std	Y+6, r1	; 0x06
     3ae:	1f 82       	std	Y+7, r1	; 0x07
     3b0:	18 86       	std	Y+8, r1	; 0x08
     3b2:	19 86       	std	Y+9, r1	; 0x09
     3b4:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     3b6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3b8:	9e 85       	ldd	r25, Y+14	; 0x0e
     3ba:	89 2b       	or	r24, r25
     3bc:	21 f0       	breq	.+8      	; 0x3c6 <Convert_StringTou16+0x60>
     3be:	8b 85       	ldd	r24, Y+11	; 0x0b
     3c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     3c2:	89 2b       	or	r24, r25
     3c4:	19 f4       	brne	.+6      	; 0x3cc <Convert_StringTou16+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	a1 c0       	rjmp	.+322    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     3cc:	1a 82       	std	Y+2, r1	; 0x02
     3ce:	8c c0       	rjmp	.+280    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     3d0:	2b 81       	ldd	r18, Y+3	; 0x03
     3d2:	3c 81       	ldd	r19, Y+4	; 0x04
     3d4:	4d 81       	ldd	r20, Y+5	; 0x05
     3d6:	5e 81       	ldd	r21, Y+6	; 0x06
     3d8:	6f 81       	ldd	r22, Y+7	; 0x07
     3da:	78 85       	ldd	r23, Y+8	; 0x08
     3dc:	89 85       	ldd	r24, Y+9	; 0x09
     3de:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e0:	22 2e       	mov	r2, r18
     3e2:	33 2e       	mov	r3, r19
     3e4:	44 2e       	mov	r4, r20
     3e6:	55 2e       	mov	r5, r21
     3e8:	66 2e       	mov	r6, r22
     3ea:	77 2e       	mov	r7, r23
     3ec:	88 2e       	mov	r8, r24
     3ee:	99 2e       	mov	r9, r25
     3f0:	22 2d       	mov	r18, r2
     3f2:	33 2d       	mov	r19, r3
     3f4:	44 2d       	mov	r20, r4
     3f6:	55 2d       	mov	r21, r5
     3f8:	66 2d       	mov	r22, r6
     3fa:	77 2d       	mov	r23, r7
     3fc:	88 2d       	mov	r24, r8
     3fe:	99 2d       	mov	r25, r9
     400:	01 e0       	ldi	r16, 0x01	; 1
     402:	0e 94 bf 20 	call	0x417e	; 0x417e <__ashldi3>
     406:	a2 2e       	mov	r10, r18
     408:	b3 2e       	mov	r11, r19
     40a:	c4 2e       	mov	r12, r20
     40c:	d5 2e       	mov	r13, r21
     40e:	e6 2e       	mov	r14, r22
     410:	f7 2e       	mov	r15, r23
     412:	08 2f       	mov	r16, r24
     414:	19 2f       	mov	r17, r25
     416:	2a 2c       	mov	r2, r10
     418:	3b 2c       	mov	r3, r11
     41a:	4c 2c       	mov	r4, r12
     41c:	5d 2c       	mov	r5, r13
     41e:	6e 2c       	mov	r6, r14
     420:	7f 2c       	mov	r7, r15
     422:	80 2e       	mov	r8, r16
     424:	91 2e       	mov	r9, r17
     426:	22 2d       	mov	r18, r2
     428:	33 2d       	mov	r19, r3
     42a:	44 2d       	mov	r20, r4
     42c:	55 2d       	mov	r21, r5
     42e:	66 2d       	mov	r22, r6
     430:	77 2d       	mov	r23, r7
     432:	88 2d       	mov	r24, r8
     434:	99 2d       	mov	r25, r9
     436:	02 e0       	ldi	r16, 0x02	; 2
     438:	0e 94 bf 20 	call	0x417e	; 0x417e <__ashldi3>
     43c:	2f 8b       	std	Y+23, r18	; 0x17
     43e:	38 8f       	std	Y+24, r19	; 0x18
     440:	49 8f       	std	Y+25, r20	; 0x19
     442:	5a 8f       	std	Y+26, r21	; 0x1a
     444:	6b 8f       	std	Y+27, r22	; 0x1b
     446:	7c 8f       	std	Y+28, r23	; 0x1c
     448:	8d 8f       	std	Y+29, r24	; 0x1d
     44a:	9e 8f       	std	Y+30, r25	; 0x1e
     44c:	22 2d       	mov	r18, r2
     44e:	33 2d       	mov	r19, r3
     450:	44 2d       	mov	r20, r4
     452:	55 2d       	mov	r21, r5
     454:	66 2d       	mov	r22, r6
     456:	77 2d       	mov	r23, r7
     458:	88 2d       	mov	r24, r8
     45a:	99 2d       	mov	r25, r9
     45c:	af 88       	ldd	r10, Y+23	; 0x17
     45e:	b8 8c       	ldd	r11, Y+24	; 0x18
     460:	c9 8c       	ldd	r12, Y+25	; 0x19
     462:	da 8c       	ldd	r13, Y+26	; 0x1a
     464:	eb 8c       	ldd	r14, Y+27	; 0x1b
     466:	fc 8c       	ldd	r15, Y+28	; 0x1c
     468:	0d 8d       	ldd	r16, Y+29	; 0x1d
     46a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     46c:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__adddi3>
     470:	a2 2e       	mov	r10, r18
     472:	b3 2e       	mov	r11, r19
     474:	c4 2e       	mov	r12, r20
     476:	d5 2e       	mov	r13, r21
     478:	e6 2e       	mov	r14, r22
     47a:	f7 2e       	mov	r15, r23
     47c:	08 2f       	mov	r16, r24
     47e:	19 2f       	mov	r17, r25
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	88 2f       	mov	r24, r24
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	2d 85       	ldd	r18, Y+13	; 0x0d
     488:	3e 85       	ldd	r19, Y+14	; 0x0e
     48a:	82 0f       	add	r24, r18
     48c:	93 1f       	adc	r25, r19
     48e:	fc 01       	movw	r30, r24
     490:	80 81       	ld	r24, Z
     492:	88 2f       	mov	r24, r24
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	c0 97       	sbiw	r24, 0x30	; 48
     498:	98 8b       	std	Y+16, r25	; 0x10
     49a:	8f 87       	std	Y+15, r24	; 0x0f
     49c:	89 2f       	mov	r24, r25
     49e:	88 0f       	add	r24, r24
     4a0:	88 0b       	sbc	r24, r24
     4a2:	89 8b       	std	Y+17, r24	; 0x11
     4a4:	8a 8b       	std	Y+18, r24	; 0x12
     4a6:	8b 8b       	std	Y+19, r24	; 0x13
     4a8:	8c 8b       	std	Y+20, r24	; 0x14
     4aa:	8d 8b       	std	Y+21, r24	; 0x15
     4ac:	8e 8b       	std	Y+22, r24	; 0x16
     4ae:	2a 2d       	mov	r18, r10
     4b0:	3b 2d       	mov	r19, r11
     4b2:	4c 2d       	mov	r20, r12
     4b4:	5d 2d       	mov	r21, r13
     4b6:	6e 2d       	mov	r22, r14
     4b8:	7f 2d       	mov	r23, r15
     4ba:	80 2f       	mov	r24, r16
     4bc:	91 2f       	mov	r25, r17
     4be:	af 84       	ldd	r10, Y+15	; 0x0f
     4c0:	b8 88       	ldd	r11, Y+16	; 0x10
     4c2:	c9 88       	ldd	r12, Y+17	; 0x11
     4c4:	da 88       	ldd	r13, Y+18	; 0x12
     4c6:	eb 88       	ldd	r14, Y+19	; 0x13
     4c8:	fc 88       	ldd	r15, Y+20	; 0x14
     4ca:	0d 89       	ldd	r16, Y+21	; 0x15
     4cc:	1e 89       	ldd	r17, Y+22	; 0x16
     4ce:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__adddi3>
     4d2:	2b 83       	std	Y+3, r18	; 0x03
     4d4:	3c 83       	std	Y+4, r19	; 0x04
     4d6:	4d 83       	std	Y+5, r20	; 0x05
     4d8:	5e 83       	std	Y+6, r21	; 0x06
     4da:	6f 83       	std	Y+7, r22	; 0x07
     4dc:	78 87       	std	Y+8, r23	; 0x08
     4de:	89 87       	std	Y+9, r24	; 0x09
     4e0:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	8a 83       	std	Y+2, r24	; 0x02
     4e8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ea:	88 2f       	mov	r24, r24
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	2d 85       	ldd	r18, Y+13	; 0x0d
     4f0:	3e 85       	ldd	r19, Y+14	; 0x0e
     4f2:	82 0f       	add	r24, r18
     4f4:	93 1f       	adc	r25, r19
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	88 23       	and	r24, r24
     4fc:	09 f0       	breq	.+2      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4fe:	68 cf       	rjmp	.-304    	; 0x3d0 <Convert_StringTou16+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     500:	2b 81       	ldd	r18, Y+3	; 0x03
     502:	3c 81       	ldd	r19, Y+4	; 0x04
     504:	8b 85       	ldd	r24, Y+11	; 0x0b
     506:	9c 85       	ldd	r25, Y+12	; 0x0c
     508:	fc 01       	movw	r30, r24
     50a:	31 83       	std	Z+1, r19	; 0x01
     50c:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     50e:	89 81       	ldd	r24, Y+1	; 0x01

}
     510:	6e 96       	adiw	r28, 0x1e	; 30
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	ef 90       	pop	r14
     528:	df 90       	pop	r13
     52a:	cf 90       	pop	r12
     52c:	bf 90       	pop	r11
     52e:	af 90       	pop	r10
     530:	9f 90       	pop	r9
     532:	8f 90       	pop	r8
     534:	7f 90       	pop	r7
     536:	6f 90       	pop	r6
     538:	5f 90       	pop	r5
     53a:	4f 90       	pop	r4
     53c:	3f 90       	pop	r3
     53e:	2f 90       	pop	r2
     540:	08 95       	ret

00000542 <Convert_StringTou32>:


Std_StatusType Convert_StringTou32 (u32* Address_Number, pu8 Address_str){
     542:	2f 92       	push	r2
     544:	3f 92       	push	r3
     546:	4f 92       	push	r4
     548:	5f 92       	push	r5
     54a:	6f 92       	push	r6
     54c:	7f 92       	push	r7
     54e:	8f 92       	push	r8
     550:	9f 92       	push	r9
     552:	af 92       	push	r10
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	6e 97       	sbiw	r28, 0x1e	; 30
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	9c 87       	std	Y+12, r25	; 0x0c
     578:	8b 87       	std	Y+11, r24	; 0x0b
     57a:	7e 87       	std	Y+14, r23	; 0x0e
     57c:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     57e:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     580:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     582:	1b 82       	std	Y+3, r1	; 0x03
     584:	1c 82       	std	Y+4, r1	; 0x04
     586:	1d 82       	std	Y+5, r1	; 0x05
     588:	1e 82       	std	Y+6, r1	; 0x06
     58a:	1f 82       	std	Y+7, r1	; 0x07
     58c:	18 86       	std	Y+8, r1	; 0x08
     58e:	19 86       	std	Y+9, r1	; 0x09
     590:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     592:	8d 85       	ldd	r24, Y+13	; 0x0d
     594:	9e 85       	ldd	r25, Y+14	; 0x0e
     596:	89 2b       	or	r24, r25
     598:	21 f0       	breq	.+8      	; 0x5a2 <Convert_StringTou32+0x60>
     59a:	8b 85       	ldd	r24, Y+11	; 0x0b
     59c:	9c 85       	ldd	r25, Y+12	; 0x0c
     59e:	89 2b       	or	r24, r25
     5a0:	19 f4       	brne	.+6      	; 0x5a8 <Convert_StringTou32+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	89 83       	std	Y+1, r24	; 0x01
     5a6:	a5 c0       	rjmp	.+330    	; 0x6f2 <Convert_StringTou32+0x1b0>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     5a8:	1a 82       	std	Y+2, r1	; 0x02
     5aa:	8c c0       	rjmp	.+280    	; 0x6c4 <Convert_StringTou32+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     5ac:	2b 81       	ldd	r18, Y+3	; 0x03
     5ae:	3c 81       	ldd	r19, Y+4	; 0x04
     5b0:	4d 81       	ldd	r20, Y+5	; 0x05
     5b2:	5e 81       	ldd	r21, Y+6	; 0x06
     5b4:	6f 81       	ldd	r22, Y+7	; 0x07
     5b6:	78 85       	ldd	r23, Y+8	; 0x08
     5b8:	89 85       	ldd	r24, Y+9	; 0x09
     5ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     5bc:	22 2e       	mov	r2, r18
     5be:	33 2e       	mov	r3, r19
     5c0:	44 2e       	mov	r4, r20
     5c2:	55 2e       	mov	r5, r21
     5c4:	66 2e       	mov	r6, r22
     5c6:	77 2e       	mov	r7, r23
     5c8:	88 2e       	mov	r8, r24
     5ca:	99 2e       	mov	r9, r25
     5cc:	22 2d       	mov	r18, r2
     5ce:	33 2d       	mov	r19, r3
     5d0:	44 2d       	mov	r20, r4
     5d2:	55 2d       	mov	r21, r5
     5d4:	66 2d       	mov	r22, r6
     5d6:	77 2d       	mov	r23, r7
     5d8:	88 2d       	mov	r24, r8
     5da:	99 2d       	mov	r25, r9
     5dc:	01 e0       	ldi	r16, 0x01	; 1
     5de:	0e 94 bf 20 	call	0x417e	; 0x417e <__ashldi3>
     5e2:	a2 2e       	mov	r10, r18
     5e4:	b3 2e       	mov	r11, r19
     5e6:	c4 2e       	mov	r12, r20
     5e8:	d5 2e       	mov	r13, r21
     5ea:	e6 2e       	mov	r14, r22
     5ec:	f7 2e       	mov	r15, r23
     5ee:	08 2f       	mov	r16, r24
     5f0:	19 2f       	mov	r17, r25
     5f2:	2a 2c       	mov	r2, r10
     5f4:	3b 2c       	mov	r3, r11
     5f6:	4c 2c       	mov	r4, r12
     5f8:	5d 2c       	mov	r5, r13
     5fa:	6e 2c       	mov	r6, r14
     5fc:	7f 2c       	mov	r7, r15
     5fe:	80 2e       	mov	r8, r16
     600:	91 2e       	mov	r9, r17
     602:	22 2d       	mov	r18, r2
     604:	33 2d       	mov	r19, r3
     606:	44 2d       	mov	r20, r4
     608:	55 2d       	mov	r21, r5
     60a:	66 2d       	mov	r22, r6
     60c:	77 2d       	mov	r23, r7
     60e:	88 2d       	mov	r24, r8
     610:	99 2d       	mov	r25, r9
     612:	02 e0       	ldi	r16, 0x02	; 2
     614:	0e 94 bf 20 	call	0x417e	; 0x417e <__ashldi3>
     618:	2f 8b       	std	Y+23, r18	; 0x17
     61a:	38 8f       	std	Y+24, r19	; 0x18
     61c:	49 8f       	std	Y+25, r20	; 0x19
     61e:	5a 8f       	std	Y+26, r21	; 0x1a
     620:	6b 8f       	std	Y+27, r22	; 0x1b
     622:	7c 8f       	std	Y+28, r23	; 0x1c
     624:	8d 8f       	std	Y+29, r24	; 0x1d
     626:	9e 8f       	std	Y+30, r25	; 0x1e
     628:	22 2d       	mov	r18, r2
     62a:	33 2d       	mov	r19, r3
     62c:	44 2d       	mov	r20, r4
     62e:	55 2d       	mov	r21, r5
     630:	66 2d       	mov	r22, r6
     632:	77 2d       	mov	r23, r7
     634:	88 2d       	mov	r24, r8
     636:	99 2d       	mov	r25, r9
     638:	af 88       	ldd	r10, Y+23	; 0x17
     63a:	b8 8c       	ldd	r11, Y+24	; 0x18
     63c:	c9 8c       	ldd	r12, Y+25	; 0x19
     63e:	da 8c       	ldd	r13, Y+26	; 0x1a
     640:	eb 8c       	ldd	r14, Y+27	; 0x1b
     642:	fc 8c       	ldd	r15, Y+28	; 0x1c
     644:	0d 8d       	ldd	r16, Y+29	; 0x1d
     646:	1e 8d       	ldd	r17, Y+30	; 0x1e
     648:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__adddi3>
     64c:	a2 2e       	mov	r10, r18
     64e:	b3 2e       	mov	r11, r19
     650:	c4 2e       	mov	r12, r20
     652:	d5 2e       	mov	r13, r21
     654:	e6 2e       	mov	r14, r22
     656:	f7 2e       	mov	r15, r23
     658:	08 2f       	mov	r16, r24
     65a:	19 2f       	mov	r17, r25
     65c:	8a 81       	ldd	r24, Y+2	; 0x02
     65e:	88 2f       	mov	r24, r24
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	2d 85       	ldd	r18, Y+13	; 0x0d
     664:	3e 85       	ldd	r19, Y+14	; 0x0e
     666:	82 0f       	add	r24, r18
     668:	93 1f       	adc	r25, r19
     66a:	fc 01       	movw	r30, r24
     66c:	80 81       	ld	r24, Z
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	c0 97       	sbiw	r24, 0x30	; 48
     674:	98 8b       	std	Y+16, r25	; 0x10
     676:	8f 87       	std	Y+15, r24	; 0x0f
     678:	89 2f       	mov	r24, r25
     67a:	88 0f       	add	r24, r24
     67c:	88 0b       	sbc	r24, r24
     67e:	89 8b       	std	Y+17, r24	; 0x11
     680:	8a 8b       	std	Y+18, r24	; 0x12
     682:	8b 8b       	std	Y+19, r24	; 0x13
     684:	8c 8b       	std	Y+20, r24	; 0x14
     686:	8d 8b       	std	Y+21, r24	; 0x15
     688:	8e 8b       	std	Y+22, r24	; 0x16
     68a:	2a 2d       	mov	r18, r10
     68c:	3b 2d       	mov	r19, r11
     68e:	4c 2d       	mov	r20, r12
     690:	5d 2d       	mov	r21, r13
     692:	6e 2d       	mov	r22, r14
     694:	7f 2d       	mov	r23, r15
     696:	80 2f       	mov	r24, r16
     698:	91 2f       	mov	r25, r17
     69a:	af 84       	ldd	r10, Y+15	; 0x0f
     69c:	b8 88       	ldd	r11, Y+16	; 0x10
     69e:	c9 88       	ldd	r12, Y+17	; 0x11
     6a0:	da 88       	ldd	r13, Y+18	; 0x12
     6a2:	eb 88       	ldd	r14, Y+19	; 0x13
     6a4:	fc 88       	ldd	r15, Y+20	; 0x14
     6a6:	0d 89       	ldd	r16, Y+21	; 0x15
     6a8:	1e 89       	ldd	r17, Y+22	; 0x16
     6aa:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__adddi3>
     6ae:	2b 83       	std	Y+3, r18	; 0x03
     6b0:	3c 83       	std	Y+4, r19	; 0x04
     6b2:	4d 83       	std	Y+5, r20	; 0x05
     6b4:	5e 83       	std	Y+6, r21	; 0x06
     6b6:	6f 83       	std	Y+7, r22	; 0x07
     6b8:	78 87       	std	Y+8, r23	; 0x08
     6ba:	89 87       	std	Y+9, r24	; 0x09
     6bc:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     6be:	8a 81       	ldd	r24, Y+2	; 0x02
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	8a 83       	std	Y+2, r24	; 0x02
     6c4:	8a 81       	ldd	r24, Y+2	; 0x02
     6c6:	88 2f       	mov	r24, r24
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	2d 85       	ldd	r18, Y+13	; 0x0d
     6cc:	3e 85       	ldd	r19, Y+14	; 0x0e
     6ce:	82 0f       	add	r24, r18
     6d0:	93 1f       	adc	r25, r19
     6d2:	fc 01       	movw	r30, r24
     6d4:	80 81       	ld	r24, Z
     6d6:	88 23       	and	r24, r24
     6d8:	09 f0       	breq	.+2      	; 0x6dc <Convert_StringTou32+0x19a>
     6da:	68 cf       	rjmp	.-304    	; 0x5ac <Convert_StringTou32+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	ad 81       	ldd	r26, Y+5	; 0x05
     6e2:	be 81       	ldd	r27, Y+6	; 0x06
     6e4:	2b 85       	ldd	r18, Y+11	; 0x0b
     6e6:	3c 85       	ldd	r19, Y+12	; 0x0c
     6e8:	f9 01       	movw	r30, r18
     6ea:	80 83       	st	Z, r24
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	a2 83       	std	Z+2, r26	; 0x02
     6f0:	b3 83       	std	Z+3, r27	; 0x03
			}

			return Loc_enuStatus;
     6f2:	89 81       	ldd	r24, Y+1	; 0x01

}
     6f4:	6e 96       	adiw	r28, 0x1e	; 30
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	9f 90       	pop	r9
     716:	8f 90       	pop	r8
     718:	7f 90       	pop	r7
     71a:	6f 90       	pop	r6
     71c:	5f 90       	pop	r5
     71e:	4f 90       	pop	r4
     720:	3f 90       	pop	r3
     722:	2f 90       	pop	r2
     724:	08 95       	ret

00000726 <Convert_StringTou64>:


Std_StatusType Convert_StringTou64 (u64* Address_Number, pu8 Address_str){
     726:	2f 92       	push	r2
     728:	3f 92       	push	r3
     72a:	4f 92       	push	r4
     72c:	5f 92       	push	r5
     72e:	6f 92       	push	r6
     730:	7f 92       	push	r7
     732:	8f 92       	push	r8
     734:	9f 92       	push	r9
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	6e 97       	sbiw	r28, 0x1e	; 30
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	9c 87       	std	Y+12, r25	; 0x0c
     75c:	8b 87       	std	Y+11, r24	; 0x0b
     75e:	7e 87       	std	Y+14, r23	; 0x0e
     760:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     762:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     764:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     766:	1b 82       	std	Y+3, r1	; 0x03
     768:	1c 82       	std	Y+4, r1	; 0x04
     76a:	1d 82       	std	Y+5, r1	; 0x05
     76c:	1e 82       	std	Y+6, r1	; 0x06
     76e:	1f 82       	std	Y+7, r1	; 0x07
     770:	18 86       	std	Y+8, r1	; 0x08
     772:	19 86       	std	Y+9, r1	; 0x09
     774:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     776:	8d 85       	ldd	r24, Y+13	; 0x0d
     778:	9e 85       	ldd	r25, Y+14	; 0x0e
     77a:	89 2b       	or	r24, r25
     77c:	21 f0       	breq	.+8      	; 0x786 <Convert_StringTou64+0x60>
     77e:	8b 85       	ldd	r24, Y+11	; 0x0b
     780:	9c 85       	ldd	r25, Y+12	; 0x0c
     782:	89 2b       	or	r24, r25
     784:	19 f4       	brne	.+6      	; 0x78c <Convert_StringTou64+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	89 83       	std	Y+1, r24	; 0x01
     78a:	b4 c0       	rjmp	.+360    	; 0x8f4 <__stack+0x95>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     78c:	1a 82       	std	Y+2, r1	; 0x02
     78e:	8c c0       	rjmp	.+280    	; 0x8a8 <__stack+0x49>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     790:	2b 81       	ldd	r18, Y+3	; 0x03
     792:	3c 81       	ldd	r19, Y+4	; 0x04
     794:	4d 81       	ldd	r20, Y+5	; 0x05
     796:	5e 81       	ldd	r21, Y+6	; 0x06
     798:	6f 81       	ldd	r22, Y+7	; 0x07
     79a:	78 85       	ldd	r23, Y+8	; 0x08
     79c:	89 85       	ldd	r24, Y+9	; 0x09
     79e:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a0:	22 2e       	mov	r2, r18
     7a2:	33 2e       	mov	r3, r19
     7a4:	44 2e       	mov	r4, r20
     7a6:	55 2e       	mov	r5, r21
     7a8:	66 2e       	mov	r6, r22
     7aa:	77 2e       	mov	r7, r23
     7ac:	88 2e       	mov	r8, r24
     7ae:	99 2e       	mov	r9, r25
     7b0:	22 2d       	mov	r18, r2
     7b2:	33 2d       	mov	r19, r3
     7b4:	44 2d       	mov	r20, r4
     7b6:	55 2d       	mov	r21, r5
     7b8:	66 2d       	mov	r22, r6
     7ba:	77 2d       	mov	r23, r7
     7bc:	88 2d       	mov	r24, r8
     7be:	99 2d       	mov	r25, r9
     7c0:	01 e0       	ldi	r16, 0x01	; 1
     7c2:	0e 94 bf 20 	call	0x417e	; 0x417e <__ashldi3>
     7c6:	a2 2e       	mov	r10, r18
     7c8:	b3 2e       	mov	r11, r19
     7ca:	c4 2e       	mov	r12, r20
     7cc:	d5 2e       	mov	r13, r21
     7ce:	e6 2e       	mov	r14, r22
     7d0:	f7 2e       	mov	r15, r23
     7d2:	08 2f       	mov	r16, r24
     7d4:	19 2f       	mov	r17, r25
     7d6:	2a 2c       	mov	r2, r10
     7d8:	3b 2c       	mov	r3, r11
     7da:	4c 2c       	mov	r4, r12
     7dc:	5d 2c       	mov	r5, r13
     7de:	6e 2c       	mov	r6, r14
     7e0:	7f 2c       	mov	r7, r15
     7e2:	80 2e       	mov	r8, r16
     7e4:	91 2e       	mov	r9, r17
     7e6:	22 2d       	mov	r18, r2
     7e8:	33 2d       	mov	r19, r3
     7ea:	44 2d       	mov	r20, r4
     7ec:	55 2d       	mov	r21, r5
     7ee:	66 2d       	mov	r22, r6
     7f0:	77 2d       	mov	r23, r7
     7f2:	88 2d       	mov	r24, r8
     7f4:	99 2d       	mov	r25, r9
     7f6:	02 e0       	ldi	r16, 0x02	; 2
     7f8:	0e 94 bf 20 	call	0x417e	; 0x417e <__ashldi3>
     7fc:	2f 8b       	std	Y+23, r18	; 0x17
     7fe:	38 8f       	std	Y+24, r19	; 0x18
     800:	49 8f       	std	Y+25, r20	; 0x19
     802:	5a 8f       	std	Y+26, r21	; 0x1a
     804:	6b 8f       	std	Y+27, r22	; 0x1b
     806:	7c 8f       	std	Y+28, r23	; 0x1c
     808:	8d 8f       	std	Y+29, r24	; 0x1d
     80a:	9e 8f       	std	Y+30, r25	; 0x1e
     80c:	22 2d       	mov	r18, r2
     80e:	33 2d       	mov	r19, r3
     810:	44 2d       	mov	r20, r4
     812:	55 2d       	mov	r21, r5
     814:	66 2d       	mov	r22, r6
     816:	77 2d       	mov	r23, r7
     818:	88 2d       	mov	r24, r8
     81a:	99 2d       	mov	r25, r9
     81c:	af 88       	ldd	r10, Y+23	; 0x17
     81e:	b8 8c       	ldd	r11, Y+24	; 0x18
     820:	c9 8c       	ldd	r12, Y+25	; 0x19
     822:	da 8c       	ldd	r13, Y+26	; 0x1a
     824:	eb 8c       	ldd	r14, Y+27	; 0x1b
     826:	fc 8c       	ldd	r15, Y+28	; 0x1c
     828:	0d 8d       	ldd	r16, Y+29	; 0x1d
     82a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     82c:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__adddi3>
     830:	a2 2e       	mov	r10, r18
     832:	b3 2e       	mov	r11, r19
     834:	c4 2e       	mov	r12, r20
     836:	d5 2e       	mov	r13, r21
     838:	e6 2e       	mov	r14, r22
     83a:	f7 2e       	mov	r15, r23
     83c:	08 2f       	mov	r16, r24
     83e:	19 2f       	mov	r17, r25
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	88 2f       	mov	r24, r24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	2d 85       	ldd	r18, Y+13	; 0x0d
     848:	3e 85       	ldd	r19, Y+14	; 0x0e
     84a:	82 0f       	add	r24, r18
     84c:	93 1f       	adc	r25, r19
     84e:	fc 01       	movw	r30, r24
     850:	80 81       	ld	r24, Z
     852:	88 2f       	mov	r24, r24
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	c0 97       	sbiw	r24, 0x30	; 48
     858:	98 8b       	std	Y+16, r25	; 0x10
     85a:	8f 87       	std	Y+15, r24	; 0x0f
     85c:	89 2f       	mov	r24, r25
     85e:	88 0f       	add	r24, r24
     860:	88 0b       	sbc	r24, r24
     862:	89 8b       	std	Y+17, r24	; 0x11
     864:	8a 8b       	std	Y+18, r24	; 0x12
     866:	8b 8b       	std	Y+19, r24	; 0x13
     868:	8c 8b       	std	Y+20, r24	; 0x14
     86a:	8d 8b       	std	Y+21, r24	; 0x15
     86c:	8e 8b       	std	Y+22, r24	; 0x16
     86e:	2a 2d       	mov	r18, r10
     870:	3b 2d       	mov	r19, r11
     872:	4c 2d       	mov	r20, r12
     874:	5d 2d       	mov	r21, r13
     876:	6e 2d       	mov	r22, r14
     878:	7f 2d       	mov	r23, r15
     87a:	80 2f       	mov	r24, r16
     87c:	91 2f       	mov	r25, r17
     87e:	af 84       	ldd	r10, Y+15	; 0x0f
     880:	b8 88       	ldd	r11, Y+16	; 0x10
     882:	c9 88       	ldd	r12, Y+17	; 0x11
     884:	da 88       	ldd	r13, Y+18	; 0x12
     886:	eb 88       	ldd	r14, Y+19	; 0x13
     888:	fc 88       	ldd	r15, Y+20	; 0x14
     88a:	0d 89       	ldd	r16, Y+21	; 0x15
     88c:	1e 89       	ldd	r17, Y+22	; 0x16
     88e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <__adddi3>
     892:	2b 83       	std	Y+3, r18	; 0x03
     894:	3c 83       	std	Y+4, r19	; 0x04
     896:	4d 83       	std	Y+5, r20	; 0x05
     898:	5e 83       	std	Y+6, r21	; 0x06
     89a:	6f 83       	std	Y+7, r22	; 0x07
     89c:	78 87       	std	Y+8, r23	; 0x08
     89e:	89 87       	std	Y+9, r24	; 0x09
     8a0:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	8a 83       	std	Y+2, r24	; 0x02
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	2d 85       	ldd	r18, Y+13	; 0x0d
     8b0:	3e 85       	ldd	r19, Y+14	; 0x0e
     8b2:	82 0f       	add	r24, r18
     8b4:	93 1f       	adc	r25, r19
     8b6:	fc 01       	movw	r30, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	88 23       	and	r24, r24
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <__stack+0x61>
     8be:	68 cf       	rjmp	.-304    	; 0x790 <Convert_StringTou64+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     8c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c4:	2b 81       	ldd	r18, Y+3	; 0x03
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
     8ca:	2c 81       	ldd	r18, Y+4	; 0x04
     8cc:	fc 01       	movw	r30, r24
     8ce:	21 83       	std	Z+1, r18	; 0x01
     8d0:	2d 81       	ldd	r18, Y+5	; 0x05
     8d2:	fc 01       	movw	r30, r24
     8d4:	22 83       	std	Z+2, r18	; 0x02
     8d6:	2e 81       	ldd	r18, Y+6	; 0x06
     8d8:	fc 01       	movw	r30, r24
     8da:	23 83       	std	Z+3, r18	; 0x03
     8dc:	2f 81       	ldd	r18, Y+7	; 0x07
     8de:	fc 01       	movw	r30, r24
     8e0:	24 83       	std	Z+4, r18	; 0x04
     8e2:	28 85       	ldd	r18, Y+8	; 0x08
     8e4:	fc 01       	movw	r30, r24
     8e6:	25 83       	std	Z+5, r18	; 0x05
     8e8:	29 85       	ldd	r18, Y+9	; 0x09
     8ea:	fc 01       	movw	r30, r24
     8ec:	26 83       	std	Z+6, r18	; 0x06
     8ee:	2a 85       	ldd	r18, Y+10	; 0x0a
     8f0:	fc 01       	movw	r30, r24
     8f2:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     8f4:	89 81       	ldd	r24, Y+1	; 0x01

}
     8f6:	6e 96       	adiw	r28, 0x1e	; 30
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	8f 90       	pop	r8
     91a:	7f 90       	pop	r7
     91c:	6f 90       	pop	r6
     91e:	5f 90       	pop	r5
     920:	4f 90       	pop	r4
     922:	3f 90       	pop	r3
     924:	2f 90       	pop	r2
     926:	08 95       	ret

00000928 <Timer0_enuInit>:
static  u8 Timer0_InitValue;
/********************************** Software Interfaces Declarations *******************/



Timer0_StatusErrorType Timer0_enuInit(const Timer0_ConfigType* Address_Timer0){
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	00 d0       	rcall	.+0      	; 0x92e <Timer0_enuInit+0x6>
     92e:	1f 92       	push	r1
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	9b 83       	std	Y+3, r25	; 0x03
     936:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	9b 81       	ldd	r25, Y+3	; 0x03
     940:	89 2b       	or	r24, r25
     942:	19 f4       	brne	.+6      	; 0x94a <Timer0_enuInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	97 c0       	rjmp	.+302    	; 0xa78 <Timer0_enuInit+0x150>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	        Timer0_Disable();
     94a:	83 e5       	ldi	r24, 0x53	; 83
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	23 e5       	ldi	r18, 0x53	; 83
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f9 01       	movw	r30, r18
     954:	20 81       	ld	r18, Z
     956:	28 7f       	andi	r18, 0xF8	; 248
     958:	fc 01       	movw	r30, r24
     95a:	20 83       	st	Z, r18

		    	        /* Select Mode timer */
		    	        Timer0_SelectMode((Address_Timer0->select_mode));
     95c:	83 e5       	ldi	r24, 0x53	; 83
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	23 e5       	ldi	r18, 0x53	; 83
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	42 2f       	mov	r20, r18
     96a:	4f 7b       	andi	r20, 0xBF	; 191
     96c:	2a 81       	ldd	r18, Y+2	; 0x02
     96e:	3b 81       	ldd	r19, Y+3	; 0x03
     970:	f9 01       	movw	r30, r18
     972:	21 81       	ldd	r18, Z+1	; 0x01
     974:	22 2f       	mov	r18, r18
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	21 70       	andi	r18, 0x01	; 1
     97a:	33 27       	eor	r19, r19
     97c:	00 24       	eor	r0, r0
     97e:	36 95       	lsr	r19
     980:	27 95       	ror	r18
     982:	07 94       	ror	r0
     984:	36 95       	lsr	r19
     986:	27 95       	ror	r18
     988:	07 94       	ror	r0
     98a:	32 2f       	mov	r19, r18
     98c:	20 2d       	mov	r18, r0
     98e:	24 2b       	or	r18, r20
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
     994:	83 e5       	ldi	r24, 0x53	; 83
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	23 e5       	ldi	r18, 0x53	; 83
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	f9 01       	movw	r30, r18
     99e:	20 81       	ld	r18, Z
     9a0:	42 2f       	mov	r20, r18
     9a2:	47 7f       	andi	r20, 0xF7	; 247
     9a4:	2a 81       	ldd	r18, Y+2	; 0x02
     9a6:	3b 81       	ldd	r19, Y+3	; 0x03
     9a8:	f9 01       	movw	r30, r18
     9aa:	21 81       	ldd	r18, Z+1	; 0x01
     9ac:	26 95       	lsr	r18
     9ae:	22 2f       	mov	r18, r18
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	21 70       	andi	r18, 0x01	; 1
     9b4:	33 27       	eor	r19, r19
     9b6:	22 0f       	add	r18, r18
     9b8:	33 1f       	adc	r19, r19
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	24 2b       	or	r18, r20
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
     9c8:	83 e5       	ldi	r24, 0x53	; 83
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	23 e5       	ldi	r18, 0x53	; 83
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	f9 01       	movw	r30, r18
     9d2:	20 81       	ld	r18, Z
     9d4:	42 2f       	mov	r20, r18
     9d6:	4f 7e       	andi	r20, 0xEF	; 239
     9d8:	2a 81       	ldd	r18, Y+2	; 0x02
     9da:	3b 81       	ldd	r19, Y+3	; 0x03
     9dc:	f9 01       	movw	r30, r18
     9de:	21 81       	ldd	r18, Z+1	; 0x01
     9e0:	26 95       	lsr	r18
     9e2:	26 95       	lsr	r18
     9e4:	22 2f       	mov	r18, r18
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	21 70       	andi	r18, 0x01	; 1
     9ea:	33 27       	eor	r19, r19
     9ec:	22 95       	swap	r18
     9ee:	32 95       	swap	r19
     9f0:	30 7f       	andi	r19, 0xF0	; 240
     9f2:	32 27       	eor	r19, r18
     9f4:	20 7f       	andi	r18, 0xF0	; 240
     9f6:	32 27       	eor	r19, r18
     9f8:	24 2b       	or	r18, r20
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
     9fe:	83 e5       	ldi	r24, 0x53	; 83
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	23 e5       	ldi	r18, 0x53	; 83
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	f9 01       	movw	r30, r18
     a08:	20 81       	ld	r18, Z
     a0a:	42 2f       	mov	r20, r18
     a0c:	4f 7d       	andi	r20, 0xDF	; 223
     a0e:	2a 81       	ldd	r18, Y+2	; 0x02
     a10:	3b 81       	ldd	r19, Y+3	; 0x03
     a12:	f9 01       	movw	r30, r18
     a14:	21 81       	ldd	r18, Z+1	; 0x01
     a16:	26 95       	lsr	r18
     a18:	26 95       	lsr	r18
     a1a:	26 95       	lsr	r18
     a1c:	22 2f       	mov	r18, r18
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	21 70       	andi	r18, 0x01	; 1
     a22:	33 27       	eor	r19, r19
     a24:	22 0f       	add	r18, r18
     a26:	33 1f       	adc	r19, r19
     a28:	22 95       	swap	r18
     a2a:	32 95       	swap	r19
     a2c:	30 7f       	andi	r19, 0xF0	; 240
     a2e:	32 27       	eor	r19, r18
     a30:	20 7f       	andi	r18, 0xF0	; 240
     a32:	32 27       	eor	r19, r18
     a34:	24 2b       	or	r18, r20
     a36:	fc 01       	movw	r30, r24
     a38:	20 83       	st	Z, r18

		    	        Timer0_InitValue = Address_Timer0->init_value;
     a3a:	8a 81       	ldd	r24, Y+2	; 0x02
     a3c:	9b 81       	ldd	r25, Y+3	; 0x03
     a3e:	fc 01       	movw	r30, r24
     a40:	82 81       	ldd	r24, Z+2	; 0x02
     a42:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Timer0_InitValue>
		    	        /* Update Init Value*/
		    	       Loc_enuTimer0Status= Timer0_SetValue(Address_Timer0, Address_Timer0->init_value);
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	9b 81       	ldd	r25, Y+3	; 0x03
     a4a:	fc 01       	movw	r30, r24
     a4c:	22 81       	ldd	r18, Z+2	; 0x02
     a4e:	8a 81       	ldd	r24, Y+2	; 0x02
     a50:	9b 81       	ldd	r25, Y+3	; 0x03
     a52:	62 2f       	mov	r22, r18
     a54:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Timer0_SetValue>
     a58:	89 83       	std	Y+1, r24	; 0x01

		    	        /* Enable Timer0 Peripheral */
		    	        Timer0_Enable(Address_Timer0->prescaler_value);
     a5a:	83 e5       	ldi	r24, 0x53	; 83
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	23 e5       	ldi	r18, 0x53	; 83
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	f9 01       	movw	r30, r18
     a64:	20 81       	ld	r18, Z
     a66:	42 2f       	mov	r20, r18
     a68:	48 7f       	andi	r20, 0xF8	; 248
     a6a:	2a 81       	ldd	r18, Y+2	; 0x02
     a6c:	3b 81       	ldd	r19, Y+3	; 0x03
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	24 2b       	or	r18, r20
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     a78:	89 81       	ldd	r24, Y+1	; 0x01
}
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <Timer0_DeInit>:

Timer0_StatusErrorType Timer0_DeInit(const Timer0_ConfigType* Address_Timer0){
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <Timer0_DeInit+0x6>
     a8c:	1f 92       	push	r1
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	9b 83       	std	Y+3, r25	; 0x03
     a94:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     a9a:	8a 81       	ldd	r24, Y+2	; 0x02
     a9c:	9b 81       	ldd	r25, Y+3	; 0x03
     a9e:	89 2b       	or	r24, r25
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <Timer0_DeInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	89 83       	std	Y+1, r24	; 0x01
     aa6:	09 c0       	rjmp	.+18     	; 0xaba <Timer0_DeInit+0x34>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	Timer0_Disable();
     aa8:	83 e5       	ldi	r24, 0x53	; 83
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	23 e5       	ldi	r18, 0x53	; 83
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	f9 01       	movw	r30, r18
     ab2:	20 81       	ld	r18, Z
     ab4:	28 7f       	andi	r18, 0xF8	; 248
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     aba:	89 81       	ldd	r24, Y+1	; 0x01
}
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <Timer0_enuEnableInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableInterrupt(const Timer0_ConfigType* Address_Timer0){
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	00 d0       	rcall	.+0      	; 0xace <Timer0_enuEnableInterrupt+0x6>
     ace:	1f 92       	push	r1
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	9b 83       	std	Y+3, r25	; 0x03
     ad6:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	9b 81       	ldd	r25, Y+3	; 0x03
     ae0:	89 2b       	or	r24, r25
     ae2:	19 f4       	brne	.+6      	; 0xaea <Timer0_enuEnableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	19 c0       	rjmp	.+50     	; 0xb1c <Timer0_enuEnableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     aea:	8a 81       	ldd	r24, Y+2	; 0x02
     aec:	9b 81       	ldd	r25, Y+3	; 0x03
     aee:	fc 01       	movw	r30, r24
     af0:	81 81       	ldd	r24, Z+1	; 0x01
     af2:	88 23       	and	r24, r24
     af4:	51 f4       	brne	.+20     	; 0xb0a <Timer0_enuEnableInterrupt+0x42>

		    		Timer0_EnableOverviewInterrupt();
     af6:	89 e5       	ldi	r24, 0x59	; 89
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	29 e5       	ldi	r18, 0x59	; 89
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	f9 01       	movw	r30, r18
     b00:	20 81       	ld	r18, Z
     b02:	21 60       	ori	r18, 0x01	; 1
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18
     b08:	09 c0       	rjmp	.+18     	; 0xb1c <Timer0_enuEnableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_EnableComparePwmInterrupt();
     b0a:	89 e5       	ldi	r24, 0x59	; 89
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	29 e5       	ldi	r18, 0x59	; 89
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	f9 01       	movw	r30, r18
     b14:	20 81       	ld	r18, Z
     b16:	22 60       	ori	r18, 0x02	; 2
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <Timer0_enuDisableInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableInterrupt(const Timer0_ConfigType* Address_Timer0){
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <Timer0_enuDisableInterrupt+0x6>
     b30:	1f 92       	push	r1
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	9b 83       	std	Y+3, r25	; 0x03
     b38:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	9b 81       	ldd	r25, Y+3	; 0x03
     b42:	89 2b       	or	r24, r25
     b44:	19 f4       	brne	.+6      	; 0xb4c <Timer0_enuDisableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	89 83       	std	Y+1, r24	; 0x01
     b4a:	19 c0       	rjmp	.+50     	; 0xb7e <Timer0_enuDisableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     b4c:	8a 81       	ldd	r24, Y+2	; 0x02
     b4e:	9b 81       	ldd	r25, Y+3	; 0x03
     b50:	fc 01       	movw	r30, r24
     b52:	81 81       	ldd	r24, Z+1	; 0x01
     b54:	88 23       	and	r24, r24
     b56:	51 f4       	brne	.+20     	; 0xb6c <Timer0_enuDisableInterrupt+0x42>

		    		Timer0_DisableOverviewInterrupt();
     b58:	89 e5       	ldi	r24, 0x59	; 89
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	29 e5       	ldi	r18, 0x59	; 89
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	f9 01       	movw	r30, r18
     b62:	20 81       	ld	r18, Z
     b64:	2e 7f       	andi	r18, 0xFE	; 254
     b66:	fc 01       	movw	r30, r24
     b68:	20 83       	st	Z, r18
     b6a:	09 c0       	rjmp	.+18     	; 0xb7e <Timer0_enuDisableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_DisbleComparePwmInterrupt();
     b6c:	89 e5       	ldi	r24, 0x59	; 89
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	29 e5       	ldi	r18, 0x59	; 89
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	f9 01       	movw	r30, r18
     b76:	20 81       	ld	r18, Z
     b78:	2d 7f       	andi	r18, 0xFD	; 253
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <Timer0_SetValue>:


Timer0_StatusErrorType Timer0_SetValue(const Timer0_ConfigType* Address_Timer0, u8 Copy_u8Value){
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	00 d0       	rcall	.+0      	; 0xb92 <Timer0_SetValue+0x6>
     b92:	00 d0       	rcall	.+0      	; 0xb94 <Timer0_SetValue+0x8>
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	9b 83       	std	Y+3, r25	; 0x03
     b9a:	8a 83       	std	Y+2, r24	; 0x02
     b9c:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	9b 81       	ldd	r25, Y+3	; 0x03
     ba6:	89 2b       	or	r24, r25
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <Timer0_SetValue+0x24>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	89 83       	std	Y+1, r24	; 0x01
     bae:	05 c0       	rjmp	.+10     	; 0xbba <Timer0_SetValue+0x2e>
		    }
		    else{

		    	TCNT0 =Copy_u8Value;
     bb0:	82 e5       	ldi	r24, 0x52	; 82
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	2c 81       	ldd	r18, Y+4	; 0x04
     bb6:	fc 01       	movw	r30, r24
     bb8:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     bba:	89 81       	ldd	r24, Y+1	; 0x01
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <Timer0_GetTimeElapsed>:
Timer0_StatusErrorType Timer0_GetTimeElapsed(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <Timer0_GetTimeElapsed+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <Timer0_GetTimeElapsed+0x8>
     bd2:	1f 92       	push	r1
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9b 83       	std	Y+3, r25	; 0x03
     bda:	8a 83       	std	Y+2, r24	; 0x02
     bdc:	7d 83       	std	Y+5, r23	; 0x05
     bde:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     be4:	8a 81       	ldd	r24, Y+2	; 0x02
     be6:	9b 81       	ldd	r25, Y+3	; 0x03
     be8:	89 2b       	or	r24, r25
     bea:	11 f4       	brne	.+4      	; 0xbf0 <Timer0_GetTimeElapsed+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	89 83       	std	Y+1, r24	; 0x01
		    else{


		    }

		    return Loc_enuTimer0Status;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <Timer0_GetRemaining>:
Timer0_StatusErrorType Timer0_GetRemaining(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	00 d0       	rcall	.+0      	; 0xc08 <Timer0_GetRemaining+0x6>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <Timer0_GetRemaining+0x8>
     c0a:	1f 92       	push	r1
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	9b 83       	std	Y+3, r25	; 0x03
     c12:	8a 83       	std	Y+2, r24	; 0x02
     c14:	7d 83       	std	Y+5, r23	; 0x05
     c16:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	9b 81       	ldd	r25, Y+3	; 0x03
     c20:	89 2b       	or	r24, r25
     c22:	19 f4       	brne	.+6      	; 0xc2a <Timer0_GetRemaining+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	0b c0       	rjmp	.+22     	; 0xc40 <Timer0_GetRemaining+0x3e>
		    }
		    else{

		    	*Address_Value = TCNT0;
     c2a:	82 e5       	ldi	r24, 0x52	; 82
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	8c 81       	ldd	r24, Y+4	; 0x04
     c38:	9d 81       	ldd	r25, Y+5	; 0x05
     c3a:	fc 01       	movw	r30, r24
     c3c:	31 83       	std	Z+1, r19	; 0x01
     c3e:	20 83       	st	Z, r18
		    }

		    return Loc_enuTimer0Status;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
}
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <Timer0_SetCallbackFunction>:


Timer0_StatusErrorType Timer0_SetCallbackFunction(const Timer0_ConfigType* Address_Timer0,void (*callback)(void)){
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	00 d0       	rcall	.+0      	; 0xc58 <Timer0_SetCallbackFunction+0x6>
     c58:	00 d0       	rcall	.+0      	; 0xc5a <Timer0_SetCallbackFunction+0x8>
     c5a:	1f 92       	push	r1
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	9b 83       	std	Y+3, r25	; 0x03
     c62:	8a 83       	std	Y+2, r24	; 0x02
     c64:	7d 83       	std	Y+5, r23	; 0x05
     c66:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	89 2b       	or	r24, r25
     c72:	19 f4       	brne	.+6      	; 0xc7a <Timer0_SetCallbackFunction+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	13 c0       	rjmp	.+38     	; 0xca0 <Timer0_SetCallbackFunction+0x4e>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	9b 81       	ldd	r25, Y+3	; 0x03
     c7e:	fc 01       	movw	r30, r24
     c80:	81 81       	ldd	r24, Z+1	; 0x01
     c82:	88 23       	and	r24, r24
     c84:	39 f4       	brne	.+14     	; 0xc94 <Timer0_SetCallbackFunction+0x42>

		    		Timer0_OverflowInterruptHandler = callback;
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
     c8e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <Timer0_SetCallbackFunction+0x4e>


		    	}
		    	else{
		    		Timer0_CompareInterruptHandler = callback;
     c94:	8c 81       	ldd	r24, Y+4	; 0x04
     c96:	9d 81       	ldd	r25, Y+5	; 0x05
     c98:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Timer0_CompareInterruptHandler+0x1>
     c9c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Timer0_CompareInterruptHandler>
		    	}


		    }

		    return Loc_enuTimer0Status;
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <__vector_10>:


// ISR function For TIMER0 Compare Match
void __vector_10(void) __attribute__((signal));

void __vector_10(void){
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62

	    if(NULL !=Timer0_CompareInterruptHandler ){
     cde:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Timer0_CompareInterruptHandler>
     ce2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Timer0_CompareInterruptHandler+0x1>
     ce6:	89 2b       	or	r24, r25
     ce8:	31 f0       	breq	.+12     	; 0xcf6 <__vector_10+0x44>
	    	Timer0_CompareInterruptHandler();
     cea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Timer0_CompareInterruptHandler>
     cee:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Timer0_CompareInterruptHandler+0x1>
     cf2:	fc 01       	movw	r30, r24
     cf4:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
     cf6:	00 00       	nop
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__vector_11>:


// ISR function For TIMER0 OverFlow
void __vector_11(void) __attribute__((signal));

void __vector_11(void){
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	ef 93       	push	r30
     d42:	ff 93       	push	r31
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
//	Timer0_DisableOverviewInterrupt();




    if(NULL !=Timer0_OverflowInterruptHandler ){
     d4c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     d50:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
     d54:	89 2b       	or	r24, r25
     d56:	61 f0       	breq	.+24     	; 0xd70 <__vector_11+0x50>

    	Timer0_OverflowInterruptHandler();
     d58:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     d5c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
     d60:	fc 01       	movw	r30, r24
     d62:	09 95       	icall

    	TCNT0 = Timer0_InitValue;
     d64:	82 e5       	ldi	r24, 0x52	; 82
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <Timer0_InitValue>
     d6c:	fc 01       	movw	r30, r24
     d6e:	20 83       	st	Z, r18
    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
     d70:	00 00       	nop
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	7f 91       	pop	r23
     d84:	6f 91       	pop	r22
     d86:	5f 91       	pop	r21
     d88:	4f 91       	pop	r20
     d8a:	3f 91       	pop	r19
     d8c:	2f 91       	pop	r18
     d8e:	0f 90       	pop	r0
     d90:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     da2:	8a e3       	ldi	r24, 0x3A	; 58
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	2c e6       	ldi	r18, 0x6C	; 108
     da8:	fc 01       	movw	r30, r24
     daa:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     dac:	87 e3       	ldi	r24, 0x37	; 55
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	27 ef       	ldi	r18, 0xF7	; 247
     db2:	fc 01       	movw	r30, r24
     db4:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     db6:	84 e3       	ldi	r24, 0x34	; 52
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	2f ef       	ldi	r18, 0xFF	; 255
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     dc0:	81 e3       	ldi	r24, 0x31	; 49
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	20 e1       	ldi	r18, 0x10	; 16
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     dca:	8b e3       	ldi	r24, 0x3B	; 59
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc 01       	movw	r30, r24
     dd0:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     dd2:	88 e3       	ldi	r24, 0x38	; 56
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	20 ec       	ldi	r18, 0xC0	; 192
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     ddc:	85 e3       	ldi	r24, 0x35	; 53
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     de4:	82 e3       	ldi	r24, 0x32	; 50
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	2c ee       	ldi	r18, 0xEC	; 236
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
     dee:	00 00       	nop
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <Port_enuSetPinDirection+0x6>
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <Port_enuSetPinDirection+0x8>
     dfe:	1f 92       	push	r1
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	8c 83       	std	Y+4, r24	; 0x04
     e06:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     e08:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	87 70       	andi	r24, 0x07	; 7
     e0e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	86 95       	lsr	r24
     e14:	86 95       	lsr	r24
     e16:	86 95       	lsr	r24
     e18:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	80 32       	cpi	r24, 0x20	; 32
     e1e:	18 f0       	brcs	.+6      	; 0xe26 <Port_enuSetPinDirection+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	59 c0       	rjmp	.+178    	; 0xed8 <Port_enuSetPinDirection+0xe2>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	18 f0       	brcs	.+6      	; 0xe32 <Port_enuSetPinDirection+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	53 c0       	rjmp	.+166    	; 0xed8 <Port_enuSetPinDirection+0xe2>
		}

	else{

			switch(Copy_u8PinDirection){
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	88 2f       	mov	r24, r24
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	41 f1       	breq	.+80     	; 0xe8c <Port_enuSetPinDirection+0x96>
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	09 f0       	breq	.+2      	; 0xe42 <Port_enuSetPinDirection+0x4c>
							break;

			default:

				// impossible
					break;
     e40:	4b c0       	rjmp	.+150    	; 0xed8 <Port_enuSetPinDirection+0xe2>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	80 5a       	subi	r24, 0xA0	; 160
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	fc 01       	movw	r30, r24
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	2b 81       	ldd	r18, Y+3	; 0x03
     e58:	22 2f       	mov	r18, r18
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	20 5a       	subi	r18, 0xA0	; 160
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	f9 01       	movw	r30, r18
     e66:	20 81       	ld	r18, Z
     e68:	31 81       	ldd	r19, Z+1	; 0x01
     e6a:	f9 01       	movw	r30, r18
     e6c:	20 81       	ld	r18, Z
     e6e:	62 2f       	mov	r22, r18
     e70:	2a 81       	ldd	r18, Y+2	; 0x02
     e72:	42 2f       	mov	r20, r18
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	21 e0       	ldi	r18, 0x01	; 1
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <Port_enuSetPinDirection+0x8a>
     e7c:	22 0f       	add	r18, r18
     e7e:	33 1f       	adc	r19, r19
     e80:	4a 95       	dec	r20
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <Port_enuSetPinDirection+0x86>
     e84:	26 2b       	or	r18, r22
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18
					break;
     e8a:	26 c0       	rjmp	.+76     	; 0xed8 <Port_enuSetPinDirection+0xe2>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	80 5a       	subi	r24, 0xA0	; 160
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	fc 01       	movw	r30, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	2b 81       	ldd	r18, Y+3	; 0x03
     ea2:	22 2f       	mov	r18, r18
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	20 5a       	subi	r18, 0xA0	; 160
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	f9 01       	movw	r30, r18
     eb0:	20 81       	ld	r18, Z
     eb2:	31 81       	ldd	r19, Z+1	; 0x01
     eb4:	f9 01       	movw	r30, r18
     eb6:	20 81       	ld	r18, Z
     eb8:	62 2f       	mov	r22, r18
     eba:	2a 81       	ldd	r18, Y+2	; 0x02
     ebc:	42 2f       	mov	r20, r18
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	21 e0       	ldi	r18, 0x01	; 1
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <Port_enuSetPinDirection+0xd4>
     ec6:	22 0f       	add	r18, r18
     ec8:	33 1f       	adc	r19, r19
     eca:	4a 95       	dec	r20
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <Port_enuSetPinDirection+0xd0>
     ece:	20 95       	com	r18
     ed0:	26 23       	and	r18, r22
     ed2:	fc 01       	movw	r30, r24
     ed4:	20 83       	st	Z, r18
							break;
     ed6:	00 00       	nop

	}



	return Loc_enuState;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <Port_enuSetPinMode+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <Port_enuSetPinMode+0x8>
     ef2:	1f 92       	push	r1
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	8c 83       	std	Y+4, r24	; 0x04
     efa:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     efc:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	87 70       	andi	r24, 0x07	; 7
     f02:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	86 95       	lsr	r24
     f08:	86 95       	lsr	r24
     f0a:	86 95       	lsr	r24
     f0c:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	80 32       	cpi	r24, 0x20	; 32
     f12:	18 f0       	brcs	.+6      	; 0xf1a <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	43 c1       	rjmp	.+646    	; 0x11a0 <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	84 30       	cpi	r24, 0x04	; 4
     f1e:	18 f0       	brcs	.+6      	; 0xf26 <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	3d c1       	rjmp	.+634    	; 0x11a0 <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <Port_enuSetPinMode+0x4a>
     f32:	57 c0       	rjmp	.+174    	; 0xfe2 <Port_enuSetPinMode+0xf8>
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	91 05       	cpc	r25, r1
     f38:	1c f4       	brge	.+6      	; 0xf40 <Port_enuSetPinMode+0x56>
     f3a:	89 2b       	or	r24, r25
     f3c:	49 f0       	breq	.+18     	; 0xf50 <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
     f3e:	30 c1       	rjmp	.+608    	; 0x11a0 <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	91 05       	cpc	r25, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <Port_enuSetPinMode+0x5e>
     f46:	97 c0       	rjmp	.+302    	; 0x1076 <Port_enuSetPinMode+0x18c>
     f48:	03 97       	sbiw	r24, 0x03	; 3
     f4a:	09 f4       	brne	.+2      	; 0xf4e <Port_enuSetPinMode+0x64>
     f4c:	df c0       	rjmp	.+446    	; 0x110c <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
     f4e:	28 c1       	rjmp	.+592    	; 0x11a0 <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	80 5a       	subi	r24, 0xA0	; 160
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	fc 01       	movw	r30, r24
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	2b 81       	ldd	r18, Y+3	; 0x03
     f66:	22 2f       	mov	r18, r18
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	22 0f       	add	r18, r18
     f6c:	33 1f       	adc	r19, r19
     f6e:	20 5a       	subi	r18, 0xA0	; 160
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	f9 01       	movw	r30, r18
     f74:	20 81       	ld	r18, Z
     f76:	31 81       	ldd	r19, Z+1	; 0x01
     f78:	f9 01       	movw	r30, r18
     f7a:	20 81       	ld	r18, Z
     f7c:	62 2f       	mov	r22, r18
     f7e:	2a 81       	ldd	r18, Y+2	; 0x02
     f80:	42 2f       	mov	r20, r18
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <Port_enuSetPinMode+0xa4>
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	4a 95       	dec	r20
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <Port_enuSetPinMode+0xa0>
     f92:	26 2b       	or	r18, r22
     f94:	fc 01       	movw	r30, r24
     f96:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	88 59       	subi	r24, 0x98	; 152
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	fc 01       	movw	r30, r24
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	2b 81       	ldd	r18, Y+3	; 0x03
     fae:	22 2f       	mov	r18, r18
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	22 0f       	add	r18, r18
     fb4:	33 1f       	adc	r19, r19
     fb6:	28 59       	subi	r18, 0x98	; 152
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	f9 01       	movw	r30, r18
     fbc:	20 81       	ld	r18, Z
     fbe:	31 81       	ldd	r19, Z+1	; 0x01
     fc0:	f9 01       	movw	r30, r18
     fc2:	20 81       	ld	r18, Z
     fc4:	62 2f       	mov	r22, r18
     fc6:	2a 81       	ldd	r18, Y+2	; 0x02
     fc8:	42 2f       	mov	r20, r18
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <Port_enuSetPinMode+0xec>
     fd2:	22 0f       	add	r18, r18
     fd4:	33 1f       	adc	r19, r19
     fd6:	4a 95       	dec	r20
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <Port_enuSetPinMode+0xe8>
     fda:	26 2b       	or	r18, r22
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18
					break;
     fe0:	df c0       	rjmp	.+446    	; 0x11a0 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	80 5a       	subi	r24, 0xA0	; 160
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	fc 01       	movw	r30, r24
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	2b 81       	ldd	r18, Y+3	; 0x03
     ff8:	22 2f       	mov	r18, r18
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	20 5a       	subi	r18, 0xA0	; 160
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	f9 01       	movw	r30, r18
    1006:	20 81       	ld	r18, Z
    1008:	31 81       	ldd	r19, Z+1	; 0x01
    100a:	f9 01       	movw	r30, r18
    100c:	20 81       	ld	r18, Z
    100e:	62 2f       	mov	r22, r18
    1010:	2a 81       	ldd	r18, Y+2	; 0x02
    1012:	42 2f       	mov	r20, r18
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	21 e0       	ldi	r18, 0x01	; 1
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <Port_enuSetPinMode+0x136>
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	4a 95       	dec	r20
    1022:	e2 f7       	brpl	.-8      	; 0x101c <Port_enuSetPinMode+0x132>
    1024:	26 2b       	or	r18, r22
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	88 59       	subi	r24, 0x98	; 152
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	fc 01       	movw	r30, r24
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	2b 81       	ldd	r18, Y+3	; 0x03
    1040:	22 2f       	mov	r18, r18
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	28 59       	subi	r18, 0x98	; 152
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	f9 01       	movw	r30, r18
    104e:	20 81       	ld	r18, Z
    1050:	31 81       	ldd	r19, Z+1	; 0x01
    1052:	f9 01       	movw	r30, r18
    1054:	20 81       	ld	r18, Z
    1056:	62 2f       	mov	r22, r18
    1058:	2a 81       	ldd	r18, Y+2	; 0x02
    105a:	42 2f       	mov	r20, r18
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	21 e0       	ldi	r18, 0x01	; 1
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <Port_enuSetPinMode+0x17e>
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	4a 95       	dec	r20
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <Port_enuSetPinMode+0x17a>
    106c:	20 95       	com	r18
    106e:	26 23       	and	r18, r22
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18
							break;
    1074:	95 c0       	rjmp	.+298    	; 0x11a0 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	80 5a       	subi	r24, 0xA0	; 160
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	fc 01       	movw	r30, r24
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	2b 81       	ldd	r18, Y+3	; 0x03
    108c:	22 2f       	mov	r18, r18
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	22 0f       	add	r18, r18
    1092:	33 1f       	adc	r19, r19
    1094:	20 5a       	subi	r18, 0xA0	; 160
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
    1098:	f9 01       	movw	r30, r18
    109a:	20 81       	ld	r18, Z
    109c:	31 81       	ldd	r19, Z+1	; 0x01
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	62 2f       	mov	r22, r18
    10a4:	2a 81       	ldd	r18, Y+2	; 0x02
    10a6:	42 2f       	mov	r20, r18
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	21 e0       	ldi	r18, 0x01	; 1
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <Port_enuSetPinMode+0x1ca>
    10b0:	22 0f       	add	r18, r18
    10b2:	33 1f       	adc	r19, r19
    10b4:	4a 95       	dec	r20
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <Port_enuSetPinMode+0x1c6>
    10b8:	20 95       	com	r18
    10ba:	26 23       	and	r18, r22
    10bc:	fc 01       	movw	r30, r24
    10be:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	88 59       	subi	r24, 0x98	; 152
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	fc 01       	movw	r30, r24
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	2b 81       	ldd	r18, Y+3	; 0x03
    10d6:	22 2f       	mov	r18, r18
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	22 0f       	add	r18, r18
    10dc:	33 1f       	adc	r19, r19
    10de:	28 59       	subi	r18, 0x98	; 152
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
    10e2:	f9 01       	movw	r30, r18
    10e4:	20 81       	ld	r18, Z
    10e6:	31 81       	ldd	r19, Z+1	; 0x01
    10e8:	f9 01       	movw	r30, r18
    10ea:	20 81       	ld	r18, Z
    10ec:	62 2f       	mov	r22, r18
    10ee:	2a 81       	ldd	r18, Y+2	; 0x02
    10f0:	42 2f       	mov	r20, r18
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <Port_enuSetPinMode+0x214>
    10fa:	22 0f       	add	r18, r18
    10fc:	33 1f       	adc	r19, r19
    10fe:	4a 95       	dec	r20
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <Port_enuSetPinMode+0x210>
    1102:	20 95       	com	r18
    1104:	26 23       	and	r18, r22
    1106:	fc 01       	movw	r30, r24
    1108:	20 83       	st	Z, r18
								break;
    110a:	4a c0       	rjmp	.+148    	; 0x11a0 <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	80 5a       	subi	r24, 0xA0	; 160
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	fc 01       	movw	r30, r24
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	2b 81       	ldd	r18, Y+3	; 0x03
    1122:	22 2f       	mov	r18, r18
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	22 0f       	add	r18, r18
    1128:	33 1f       	adc	r19, r19
    112a:	20 5a       	subi	r18, 0xA0	; 160
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	f9 01       	movw	r30, r18
    1130:	20 81       	ld	r18, Z
    1132:	31 81       	ldd	r19, Z+1	; 0x01
    1134:	f9 01       	movw	r30, r18
    1136:	20 81       	ld	r18, Z
    1138:	62 2f       	mov	r22, r18
    113a:	2a 81       	ldd	r18, Y+2	; 0x02
    113c:	42 2f       	mov	r20, r18
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	21 e0       	ldi	r18, 0x01	; 1
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <Port_enuSetPinMode+0x260>
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	4a 95       	dec	r20
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <Port_enuSetPinMode+0x25c>
    114e:	20 95       	com	r18
    1150:	26 23       	and	r18, r22
    1152:	fc 01       	movw	r30, r24
    1154:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	88 59       	subi	r24, 0x98	; 152
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	fc 01       	movw	r30, r24
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	2b 81       	ldd	r18, Y+3	; 0x03
    116c:	22 2f       	mov	r18, r18
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	22 0f       	add	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	28 59       	subi	r18, 0x98	; 152
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	f9 01       	movw	r30, r18
    117a:	20 81       	ld	r18, Z
    117c:	31 81       	ldd	r19, Z+1	; 0x01
    117e:	f9 01       	movw	r30, r18
    1180:	20 81       	ld	r18, Z
    1182:	62 2f       	mov	r22, r18
    1184:	2a 81       	ldd	r18, Y+2	; 0x02
    1186:	42 2f       	mov	r20, r18
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <Port_enuSetPinMode+0x2aa>
    1190:	22 0f       	add	r18, r18
    1192:	33 1f       	adc	r19, r19
    1194:	4a 95       	dec	r20
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <Port_enuSetPinMode+0x2a6>
    1198:	26 2b       	or	r18, r22
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
								break;
    119e:	00 00       	nop



	}

	return Loc_enuState;
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	08 95       	ret

000011b2 <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	1f 92       	push	r1
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    11bc:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
    11be:	8f e5       	ldi	r24, 0x5F	; 95
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	2f e5       	ldi	r18, 0x5F	; 95
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	f9 01       	movw	r30, r18
    11c8:	20 81       	ld	r18, Z
    11ca:	20 68       	ori	r18, 0x80	; 128
    11cc:	fc 01       	movw	r30, r24
    11ce:	20 83       	st	Z, r18

	return Loc_enuGieState;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	1f 92       	push	r1
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    11e4:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
    11e6:	8f e5       	ldi	r24, 0x5F	; 95
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	2f e5       	ldi	r18, 0x5F	; 95
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	f9 01       	movw	r30, r18
    11f0:	20 81       	ld	r18, Z
    11f2:	2f 77       	andi	r18, 0x7F	; 127
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18

		return Loc_enuGieState;
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	00 d0       	rcall	.+0      	; 0x1208 <Gie_enuSetGloablInterrupt+0x6>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    120e:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
    1210:	8f e5       	ldi	r24, 0x5F	; 95
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	2f e5       	ldi	r18, 0x5F	; 95
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	f9 01       	movw	r30, r18
    121a:	20 81       	ld	r18, Z
    121c:	42 2f       	mov	r20, r18
    121e:	4f 77       	andi	r20, 0x7F	; 127
    1220:	2a 81       	ldd	r18, Y+2	; 0x02
    1222:	22 2f       	mov	r18, r18
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	36 95       	lsr	r19
    1228:	32 2f       	mov	r19, r18
    122a:	22 27       	eor	r18, r18
    122c:	37 95       	ror	r19
    122e:	27 95       	ror	r18
    1230:	24 2b       	or	r18, r20
    1232:	fc 01       	movw	r30, r24
    1234:	20 83       	st	Z, r18

			return Loc_enuGieState;
    1236:	89 81       	ldd	r24, Y+1	; 0x01
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	00 d0       	rcall	.+0      	; 0x1248 <Gie_enuGetGloablInterrupt+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <Gie_enuGetGloablInterrupt+0x8>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	8a 83       	std	Y+2, r24	; 0x02
    1250:	7c 83       	std	Y+4, r23	; 0x04
    1252:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1254:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	89 2b       	or	r24, r25
    125c:	19 f4       	brne	.+6      	; 0x1264 <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	0c c0       	rjmp	.+24     	; 0x127c <Gie_enuGetGloablInterrupt+0x3a>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
    1264:	8f e5       	ldi	r24, 0x5F	; 95
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	fc 01       	movw	r30, r24
    126a:	80 81       	ld	r24, Z
    126c:	28 2f       	mov	r18, r24
    126e:	22 1f       	adc	r18, r18
    1270:	22 27       	eor	r18, r18
    1272:	22 1f       	adc	r18, r18
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
    127c:	89 81       	ldd	r24, Y+1	; 0x01
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	00 d0       	rcall	.+0      	; 0x1292 <Exti_enuEnable+0x6>
    1292:	1f 92       	push	r1
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	8a 83       	std	Y+2, r24	; 0x02
    129a:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	18 f0       	brcs	.+6      	; 0x12ac <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    12a6:	83 e0       	ldi	r24, 0x03	; 3
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	8f c0       	rjmp	.+286    	; 0x13ca <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	89 f1       	breq	.+98     	; 0x131a <Exti_enuEnable+0x8e>
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <Exti_enuEnable+0x34>
    12be:	62 c0       	rjmp	.+196    	; 0x1384 <Exti_enuEnable+0xf8>
    12c0:	89 2b       	or	r24, r25
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
    12c4:	82 c0       	rjmp	.+260    	; 0x13ca <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
    12c6:	85 e5       	ldi	r24, 0x55	; 85
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	25 e5       	ldi	r18, 0x55	; 85
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	f9 01       	movw	r30, r18
    12d0:	20 81       	ld	r18, Z
    12d2:	32 2f       	mov	r19, r18
    12d4:	3e 7f       	andi	r19, 0xFE	; 254
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	21 70       	andi	r18, 0x01	; 1
    12da:	23 2b       	or	r18, r19
    12dc:	fc 01       	movw	r30, r24
    12de:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
    12e0:	85 e5       	ldi	r24, 0x55	; 85
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	25 e5       	ldi	r18, 0x55	; 85
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	f9 01       	movw	r30, r18
    12ea:	20 81       	ld	r18, Z
    12ec:	42 2f       	mov	r20, r18
    12ee:	4d 7f       	andi	r20, 0xFD	; 253
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	26 95       	lsr	r18
    12f4:	22 2f       	mov	r18, r18
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	21 70       	andi	r18, 0x01	; 1
    12fa:	33 27       	eor	r19, r19
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	24 2b       	or	r18, r20
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
    1306:	8b e5       	ldi	r24, 0x5B	; 91
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	2b e5       	ldi	r18, 0x5B	; 91
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	f9 01       	movw	r30, r18
    1310:	20 81       	ld	r18, Z
    1312:	20 64       	ori	r18, 0x40	; 64
    1314:	fc 01       	movw	r30, r24
    1316:	20 83       	st	Z, r18

			break;
    1318:	58 c0       	rjmp	.+176    	; 0x13ca <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
    131a:	85 e5       	ldi	r24, 0x55	; 85
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	25 e5       	ldi	r18, 0x55	; 85
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	f9 01       	movw	r30, r18
    1324:	20 81       	ld	r18, Z
    1326:	42 2f       	mov	r20, r18
    1328:	4b 7f       	andi	r20, 0xFB	; 251
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	22 2f       	mov	r18, r18
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	21 70       	andi	r18, 0x01	; 1
    1332:	33 27       	eor	r19, r19
    1334:	22 0f       	add	r18, r18
    1336:	33 1f       	adc	r19, r19
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	24 2b       	or	r18, r20
    133e:	fc 01       	movw	r30, r24
    1340:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
    1342:	85 e5       	ldi	r24, 0x55	; 85
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	25 e5       	ldi	r18, 0x55	; 85
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	20 81       	ld	r18, Z
    134e:	42 2f       	mov	r20, r18
    1350:	47 7f       	andi	r20, 0xF7	; 247
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	26 95       	lsr	r18
    1356:	22 2f       	mov	r18, r18
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	21 70       	andi	r18, 0x01	; 1
    135c:	33 27       	eor	r19, r19
    135e:	22 0f       	add	r18, r18
    1360:	33 1f       	adc	r19, r19
    1362:	22 0f       	add	r18, r18
    1364:	33 1f       	adc	r19, r19
    1366:	22 0f       	add	r18, r18
    1368:	33 1f       	adc	r19, r19
    136a:	24 2b       	or	r18, r20
    136c:	fc 01       	movw	r30, r24
    136e:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
    1370:	8b e5       	ldi	r24, 0x5B	; 91
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	2b e5       	ldi	r18, 0x5B	; 91
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	20 68       	ori	r18, 0x80	; 128
    137e:	fc 01       	movw	r30, r24
    1380:	20 83       	st	Z, r18
			break;
    1382:	23 c0       	rjmp	.+70     	; 0x13ca <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
    1384:	84 e5       	ldi	r24, 0x54	; 84
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	24 e5       	ldi	r18, 0x54	; 84
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	f9 01       	movw	r30, r18
    138e:	20 81       	ld	r18, Z
    1390:	42 2f       	mov	r20, r18
    1392:	4f 7b       	andi	r20, 0xBF	; 191
    1394:	2b 81       	ldd	r18, Y+3	; 0x03
    1396:	22 2f       	mov	r18, r18
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	21 70       	andi	r18, 0x01	; 1
    139c:	33 27       	eor	r19, r19
    139e:	00 24       	eor	r0, r0
    13a0:	36 95       	lsr	r19
    13a2:	27 95       	ror	r18
    13a4:	07 94       	ror	r0
    13a6:	36 95       	lsr	r19
    13a8:	27 95       	ror	r18
    13aa:	07 94       	ror	r0
    13ac:	32 2f       	mov	r19, r18
    13ae:	20 2d       	mov	r18, r0
    13b0:	24 2b       	or	r18, r20
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
    13b6:	8b e5       	ldi	r24, 0x5B	; 91
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	2b e5       	ldi	r18, 0x5B	; 91
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	f9 01       	movw	r30, r18
    13c0:	20 81       	ld	r18, Z
    13c2:	20 62       	ori	r18, 0x20	; 32
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
			break;
    13c8:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    13ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	00 d0       	rcall	.+0      	; 0x13de <Exti_enuDisable+0x6>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	18 f0       	brcs	.+6      	; 0x13f4 <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	2a c0       	rjmp	.+84     	; 0x1448 <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	91 05       	cpc	r25, r1
    13fe:	81 f0       	breq	.+32     	; 0x1420 <Exti_enuDisable+0x48>
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	91 05       	cpc	r25, r1
    1404:	b9 f0       	breq	.+46     	; 0x1434 <Exti_enuDisable+0x5c>
    1406:	89 2b       	or	r24, r25
    1408:	09 f0       	breq	.+2      	; 0x140c <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
    140a:	1e c0       	rjmp	.+60     	; 0x1448 <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
    140c:	8b e5       	ldi	r24, 0x5B	; 91
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	2b e5       	ldi	r18, 0x5B	; 91
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	f9 01       	movw	r30, r18
    1416:	20 81       	ld	r18, Z
    1418:	2f 7b       	andi	r18, 0xBF	; 191
    141a:	fc 01       	movw	r30, r24
    141c:	20 83       	st	Z, r18
			break;
    141e:	14 c0       	rjmp	.+40     	; 0x1448 <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
    1420:	8b e5       	ldi	r24, 0x5B	; 91
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	2b e5       	ldi	r18, 0x5B	; 91
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	f9 01       	movw	r30, r18
    142a:	20 81       	ld	r18, Z
    142c:	2f 77       	andi	r18, 0x7F	; 127
    142e:	fc 01       	movw	r30, r24
    1430:	20 83       	st	Z, r18
			break;
    1432:	0a c0       	rjmp	.+20     	; 0x1448 <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
    1434:	8b e5       	ldi	r24, 0x5B	; 91
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	2b e5       	ldi	r18, 0x5B	; 91
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	f9 01       	movw	r30, r18
    143e:	20 81       	ld	r18, Z
    1440:	2f 7d       	andi	r18, 0xDF	; 223
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18
			break;
    1446:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    1448:	89 81       	ldd	r24, Y+1	; 0x01

}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	00 d0       	rcall	.+0      	; 0x145a <Exti_enuSetCallbackFunction+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <Exti_enuSetCallbackFunction+0x8>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	8a 83       	std	Y+2, r24	; 0x02
    1462:	7c 83       	std	Y+4, r23	; 0x04
    1464:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	83 30       	cpi	r24, 0x03	; 3
    146e:	18 f0       	brcs	.+6      	; 0x1476 <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	13 c0       	rjmp	.+38     	; 0x149c <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	89 2b       	or	r24, r25
    147c:	19 f4       	brne	.+6      	; 0x1484 <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	0c c0       	rjmp	.+24     	; 0x149c <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	89 5e       	subi	r24, 0xE9	; 233
    1490:	9e 4f       	sbci	r25, 0xFE	; 254
    1492:	2b 81       	ldd	r18, Y+3	; 0x03
    1494:	3c 81       	ldd	r19, Y+4	; 0x04
    1496:	fc 01       	movw	r30, r24
    1498:	31 83       	std	Z+1, r19	; 0x01
    149a:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
    149c:	89 81       	ldd	r24, Y+1	; 0x01

}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	4f 93       	push	r20
    14be:	5f 93       	push	r21
    14c0:	6f 93       	push	r22
    14c2:	7f 93       	push	r23
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
    14d8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Exti_InterruptHandler>
    14dc:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Exti_InterruptHandler+0x1>
    14e0:	89 2b       	or	r24, r25
    14e2:	31 f0       	breq	.+12     	; 0x14f0 <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
    14e4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Exti_InterruptHandler>
    14e8:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Exti_InterruptHandler+0x1>
    14ec:	fc 01       	movw	r30, r24
    14ee:	09 95       	icall

}
    14f0:	00 00       	nop
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	ff 91       	pop	r31
    14f8:	ef 91       	pop	r30
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	0f 90       	pop	r0
    1510:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti

0000151a <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    151a:	1f 92       	push	r1
    151c:	0f 92       	push	r0
    151e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1522:	0f 92       	push	r0
    1524:	11 24       	eor	r1, r1
    1526:	2f 93       	push	r18
    1528:	3f 93       	push	r19
    152a:	4f 93       	push	r20
    152c:	5f 93       	push	r21
    152e:	6f 93       	push	r22
    1530:	7f 93       	push	r23
    1532:	8f 93       	push	r24
    1534:	9f 93       	push	r25
    1536:	af 93       	push	r26
    1538:	bf 93       	push	r27
    153a:	ef 93       	push	r30
    153c:	ff 93       	push	r31
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
    1546:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Exti_InterruptHandler+0x2>
    154a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Exti_InterruptHandler+0x3>
    154e:	89 2b       	or	r24, r25
    1550:	31 f0       	breq	.+12     	; 0x155e <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
    1552:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Exti_InterruptHandler+0x2>
    1556:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Exti_InterruptHandler+0x3>
    155a:	fc 01       	movw	r30, r24
    155c:	09 95       	icall

}
    155e:	00 00       	nop
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1582:	0f 90       	pop	r0
    1584:	1f 90       	pop	r1
    1586:	18 95       	reti

00001588 <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1588:	1f 92       	push	r1
    158a:	0f 92       	push	r0
    158c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1590:	0f 92       	push	r0
    1592:	11 24       	eor	r1, r1
    1594:	2f 93       	push	r18
    1596:	3f 93       	push	r19
    1598:	4f 93       	push	r20
    159a:	5f 93       	push	r21
    159c:	6f 93       	push	r22
    159e:	7f 93       	push	r23
    15a0:	8f 93       	push	r24
    15a2:	9f 93       	push	r25
    15a4:	af 93       	push	r26
    15a6:	bf 93       	push	r27
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
    15b4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Exti_InterruptHandler+0x4>
    15b8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Exti_InterruptHandler+0x5>
    15bc:	89 2b       	or	r24, r25
    15be:	31 f0       	breq	.+12     	; 0x15cc <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
    15c0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Exti_InterruptHandler+0x4>
    15c4:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Exti_InterruptHandler+0x5>
    15c8:	fc 01       	movw	r30, r24
    15ca:	09 95       	icall

}
    15cc:	00 00       	nop
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	ff 91       	pop	r31
    15d4:	ef 91       	pop	r30
    15d6:	bf 91       	pop	r27
    15d8:	af 91       	pop	r26
    15da:	9f 91       	pop	r25
    15dc:	8f 91       	pop	r24
    15de:	7f 91       	pop	r23
    15e0:	6f 91       	pop	r22
    15e2:	5f 91       	pop	r21
    15e4:	4f 91       	pop	r20
    15e6:	3f 91       	pop	r19
    15e8:	2f 91       	pop	r18
    15ea:	0f 90       	pop	r0
    15ec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    15f0:	0f 90       	pop	r0
    15f2:	1f 90       	pop	r1
    15f4:	18 95       	reti

000015f6 <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <Dio_enuWriteChannel+0x6>
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <Dio_enuWriteChannel+0x8>
    15fe:	1f 92       	push	r1
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	8c 83       	std	Y+4, r24	; 0x04
    1606:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1608:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
    160a:	8c 81       	ldd	r24, Y+4	; 0x04
    160c:	87 70       	andi	r24, 0x07	; 7
    160e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	86 95       	lsr	r24
    1614:	86 95       	lsr	r24
    1616:	86 95       	lsr	r24
    1618:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	80 32       	cpi	r24, 0x20	; 32
    161e:	18 f0       	brcs	.+6      	; 0x1626 <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	4e c0       	rjmp	.+156    	; 0x16c2 <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	80 59       	subi	r24, 0x90	; 144
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	fc 01       	movw	r30, r24
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	fc 01       	movw	r30, r24
    163c:	80 81       	ld	r24, Z
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	2a 81       	ldd	r18, Y+2	; 0x02
    1644:	22 2f       	mov	r18, r18
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <Dio_enuWriteChannel+0x58>
    164a:	95 95       	asr	r25
    164c:	87 95       	ror	r24
    164e:	2a 95       	dec	r18
    1650:	e2 f7       	brpl	.-8      	; 0x164a <Dio_enuWriteChannel+0x54>
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	99 27       	eor	r25, r25
    1656:	89 2b       	or	r24, r25
    1658:	19 f4       	brne	.+6      	; 0x1660 <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	31 c0       	rjmp	.+98     	; 0x16c2 <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	88 58       	subi	r24, 0x88	; 136
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	fc 01       	movw	r30, r24
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	22 2f       	mov	r18, r18
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	22 0f       	add	r18, r18
    167c:	33 1f       	adc	r19, r19
    167e:	28 58       	subi	r18, 0x88	; 136
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	f9 01       	movw	r30, r18
    1684:	20 81       	ld	r18, Z
    1686:	31 81       	ldd	r19, Z+1	; 0x01
    1688:	f9 01       	movw	r30, r18
    168a:	20 81       	ld	r18, Z
    168c:	62 2f       	mov	r22, r18
    168e:	2a 81       	ldd	r18, Y+2	; 0x02
    1690:	42 2f       	mov	r20, r18
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	21 e0       	ldi	r18, 0x01	; 1
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <Dio_enuWriteChannel+0xa8>
    169a:	22 0f       	add	r18, r18
    169c:	33 1f       	adc	r19, r19
    169e:	4a 95       	dec	r20
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <Dio_enuWriteChannel+0xa4>
    16a2:	20 95       	com	r18
    16a4:	62 23       	and	r22, r18
    16a6:	2d 81       	ldd	r18, Y+5	; 0x05
    16a8:	22 2f       	mov	r18, r18
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a 81       	ldd	r20, Y+2	; 0x02
    16ae:	44 2f       	mov	r20, r20
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <Dio_enuWriteChannel+0xc2>
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	4a 95       	dec	r20
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <Dio_enuWriteChannel+0xbe>
    16bc:	26 2b       	or	r18, r22
    16be:	fc 01       	movw	r30, r24
    16c0:	20 83       	st	Z, r18

}

	return Loc_enuState;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	00 d0       	rcall	.+0      	; 0x16da <Dio_enuReadChannel+0x6>
    16da:	00 d0       	rcall	.+0      	; 0x16dc <Dio_enuReadChannel+0x8>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <Dio_enuReadChannel+0xa>
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	8c 83       	std	Y+4, r24	; 0x04
    16e4:	7e 83       	std	Y+6, r23	; 0x06
    16e6:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    16e8:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	87 70       	andi	r24, 0x07	; 7
    16ee:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	86 95       	lsr	r24
    16f4:	86 95       	lsr	r24
    16f6:	86 95       	lsr	r24
    16f8:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	80 32       	cpi	r24, 0x20	; 32
    16fe:	18 f0       	brcs	.+6      	; 0x1706 <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	40 c0       	rjmp	.+128    	; 0x1786 <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	80 59       	subi	r24, 0x90	; 144
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	fc 01       	movw	r30, r24
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	fc 01       	movw	r30, r24
    171c:	80 81       	ld	r24, Z
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	2a 81       	ldd	r18, Y+2	; 0x02
    1724:	22 2f       	mov	r18, r18
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	02 c0       	rjmp	.+4      	; 0x172e <Dio_enuReadChannel+0x5a>
    172a:	95 95       	asr	r25
    172c:	87 95       	ror	r24
    172e:	2a 95       	dec	r18
    1730:	e2 f7       	brpl	.-8      	; 0x172a <Dio_enuReadChannel+0x56>
    1732:	81 70       	andi	r24, 0x01	; 1
    1734:	99 27       	eor	r25, r25
    1736:	89 2b       	or	r24, r25
    1738:	19 f0       	breq	.+6      	; 0x1740 <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	23 c0       	rjmp	.+70     	; 0x1786 <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	89 2b       	or	r24, r25
    1746:	19 f4       	brne	.+6      	; 0x174e <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    1748:	84 e0       	ldi	r24, 0x04	; 4
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	1c c0       	rjmp	.+56     	; 0x1786 <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	80 58       	subi	r24, 0x80	; 128
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	fc 01       	movw	r30, r24
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01
    1762:	fc 01       	movw	r30, r24
    1764:	80 81       	ld	r24, Z
    1766:	88 2f       	mov	r24, r24
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	2a 81       	ldd	r18, Y+2	; 0x02
    176c:	22 2f       	mov	r18, r18
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <Dio_enuReadChannel+0xa2>
    1772:	95 95       	asr	r25
    1774:	87 95       	ror	r24
    1776:	2a 95       	dec	r18
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <Dio_enuReadChannel+0x9e>
    177a:	28 2f       	mov	r18, r24
    177c:	21 70       	andi	r18, 0x01	; 1
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	fc 01       	movw	r30, r24
    1784:	20 83       	st	Z, r18


	}

		return Loc_enuState;
    1786:	89 81       	ldd	r24, Y+1	; 0x01

}
    1788:	26 96       	adiw	r28, 0x06	; 6
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <Dio_enuWritePort+0x6>
    17a0:	1f 92       	push	r1
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	8a 83       	std	Y+2, r24	; 0x02
    17a8:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    17aa:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	18 f0       	brcs	.+6      	; 0x17b8 <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    17b2:	83 e0       	ldi	r24, 0x03	; 3
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	1e c0       	rjmp	.+60     	; 0x17f4 <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	80 59       	subi	r24, 0x90	; 144
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	fc 01       	movw	r30, r24
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	fc 01       	movw	r30, r24
    17ce:	80 81       	ld	r24, Z
    17d0:	8f 3f       	cpi	r24, 0xFF	; 255
    17d2:	19 f0       	breq	.+6      	; 0x17da <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	88 58       	subi	r24, 0x88	; 136
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	2b 81       	ldd	r18, Y+3	; 0x03
    17f0:	fc 01       	movw	r30, r24
    17f2:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01



}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	00 d0       	rcall	.+0      	; 0x1808 <Dio_enuReadPort+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <Dio_enuReadPort+0x8>
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	8a 83       	std	Y+2, r24	; 0x02
    1810:	7c 83       	std	Y+4, r23	; 0x04
    1812:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1814:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	18 f0       	brcs	.+6      	; 0x1822 <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	28 c0       	rjmp	.+80     	; 0x1872 <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	80 59       	subi	r24, 0x90	; 144
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	fc 01       	movw	r30, r24
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	fc 01       	movw	r30, r24
    1838:	80 81       	ld	r24, Z
    183a:	88 23       	and	r24, r24
    183c:	19 f0       	breq	.+6      	; 0x1844 <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	17 c0       	rjmp	.+46     	; 0x1872 <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	89 2b       	or	r24, r25
    184a:	19 f4       	brne	.+6      	; 0x1852 <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    184c:	84 e0       	ldi	r24, 0x04	; 4
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	10 c0       	rjmp	.+32     	; 0x1872 <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	80 58       	subi	r24, 0x80	; 128
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	fc 01       	movw	r30, r24
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	fc 01       	movw	r30, r24
    1868:	20 81       	ld	r18, Z
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	fc 01       	movw	r30, r24
    1870:	20 83       	st	Z, r18

		}

			return Loc_enuState;
    1872:	89 81       	ldd	r24, Y+1	; 0x01

}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	00 d0       	rcall	.+0      	; 0x1888 <Dio_enuFlipChannel+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <Dio_enuFlipChannel+0x8>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1890:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	87 70       	andi	r24, 0x07	; 7
    1896:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	86 95       	lsr	r24
    189c:	86 95       	lsr	r24
    189e:	86 95       	lsr	r24
    18a0:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	80 32       	cpi	r24, 0x20	; 32
    18a6:	18 f0       	brcs	.+6      	; 0x18ae <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	41 c0       	rjmp	.+130    	; 0x1930 <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	80 59       	subi	r24, 0x90	; 144
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	fc 01       	movw	r30, r24
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	fc 01       	movw	r30, r24
    18c4:	80 81       	ld	r24, Z
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	2a 81       	ldd	r18, Y+2	; 0x02
    18cc:	22 2f       	mov	r18, r18
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <Dio_enuFlipChannel+0x54>
    18d2:	95 95       	asr	r25
    18d4:	87 95       	ror	r24
    18d6:	2a 95       	dec	r18
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <Dio_enuFlipChannel+0x50>
    18da:	81 70       	andi	r24, 0x01	; 1
    18dc:	99 27       	eor	r25, r25
    18de:	89 2b       	or	r24, r25
    18e0:	19 f4       	brne	.+6      	; 0x18e8 <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	24 c0       	rjmp	.+72     	; 0x1930 <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	88 58       	subi	r24, 0x88	; 136
    18f4:	9f 4f       	sbci	r25, 0xFF	; 255
    18f6:	fc 01       	movw	r30, r24
    18f8:	80 81       	ld	r24, Z
    18fa:	91 81       	ldd	r25, Z+1	; 0x01
    18fc:	2b 81       	ldd	r18, Y+3	; 0x03
    18fe:	22 2f       	mov	r18, r18
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	22 0f       	add	r18, r18
    1904:	33 1f       	adc	r19, r19
    1906:	28 58       	subi	r18, 0x88	; 136
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	f9 01       	movw	r30, r18
    190c:	20 81       	ld	r18, Z
    190e:	31 81       	ldd	r19, Z+1	; 0x01
    1910:	f9 01       	movw	r30, r18
    1912:	20 81       	ld	r18, Z
    1914:	62 2f       	mov	r22, r18
    1916:	2a 81       	ldd	r18, Y+2	; 0x02
    1918:	42 2f       	mov	r20, r18
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	21 e0       	ldi	r18, 0x01	; 1
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <Dio_enuFlipChannel+0xa4>
    1922:	22 0f       	add	r18, r18
    1924:	33 1f       	adc	r19, r19
    1926:	4a 95       	dec	r20
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <Dio_enuFlipChannel+0xa0>
    192a:	26 27       	eor	r18, r22
    192c:	fc 01       	movw	r30, r24
    192e:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <Adc_enuInit>:
/********************************** Data Type Declarations ****************************/

/********************************** Software Interfaces Declarations *******************/


Adc_StatusErrorType Adc_enuInit(const Adc_PinConfigType* Address_Adc){
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	00 d0       	rcall	.+0      	; 0x1946 <Adc_enuInit+0x6>
    1946:	1f 92       	push	r1
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9b 83       	std	Y+3, r25	; 0x03
    194e:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	9b 81       	ldd	r25, Y+3	; 0x03
    1958:	89 2b       	or	r24, r25
    195a:	19 f4       	brne	.+6      	; 0x1962 <Adc_enuInit+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	65 c0       	rjmp	.+202    	; 0x1a2c <Adc_enuInit+0xec>
	    }
	    else{
	    	 /* Disable Adc Peripheral */
	    	        Adc_Disable();
    1962:	86 e2       	ldi	r24, 0x26	; 38
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	26 e2       	ldi	r18, 0x26	; 38
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	f9 01       	movw	r30, r18
    196c:	20 81       	ld	r18, Z
    196e:	2f 77       	andi	r18, 0x7F	; 127
    1970:	fc 01       	movw	r30, r24
    1972:	20 83       	st	Z, r18



	    	        /* Choose Conversion Clock  */
	    	        Adc_SelectConversionClock(Address_Adc->conversion_frequancy);
    1974:	86 e2       	ldi	r24, 0x26	; 38
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	26 e2       	ldi	r18, 0x26	; 38
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	f9 01       	movw	r30, r18
    197e:	20 81       	ld	r18, Z
    1980:	42 2f       	mov	r20, r18
    1982:	40 77       	andi	r20, 0x70	; 112
    1984:	2a 81       	ldd	r18, Y+2	; 0x02
    1986:	3b 81       	ldd	r19, Y+3	; 0x03
    1988:	f9 01       	movw	r30, r18
    198a:	23 81       	ldd	r18, Z+3	; 0x03
    198c:	27 70       	andi	r18, 0x07	; 7
    198e:	24 2b       	or	r18, r20
    1990:	fc 01       	movw	r30, r24
    1992:	20 83       	st	Z, r18

	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    1994:	87 e2       	ldi	r24, 0x27	; 39
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	27 e2       	ldi	r18, 0x27	; 39
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	f9 01       	movw	r30, r18
    199e:	20 81       	ld	r18, Z
    19a0:	42 2f       	mov	r20, r18
    19a2:	48 7f       	andi	r20, 0xF8	; 248
    19a4:	2a 81       	ldd	r18, Y+2	; 0x02
    19a6:	3b 81       	ldd	r19, Y+3	; 0x03
    19a8:	f9 01       	movw	r30, r18
    19aa:	20 81       	ld	r18, Z
    19ac:	27 70       	andi	r18, 0x07	; 7
    19ae:	24 2b       	or	r18, r20
    19b0:	fc 01       	movw	r30, r24
    19b2:	20 83       	st	Z, r18


	    	        /*Configure Result Format */
	    	        Adc_SelectResultFormat(Address_Adc->result_format);
    19b4:	87 e2       	ldi	r24, 0x27	; 39
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	27 e2       	ldi	r18, 0x27	; 39
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	f9 01       	movw	r30, r18
    19be:	20 81       	ld	r18, Z
    19c0:	42 2f       	mov	r20, r18
    19c2:	4f 7d       	andi	r20, 0xDF	; 223
    19c4:	2a 81       	ldd	r18, Y+2	; 0x02
    19c6:	3b 81       	ldd	r19, Y+3	; 0x03
    19c8:	f9 01       	movw	r30, r18
    19ca:	22 81       	ldd	r18, Z+2	; 0x02
    19cc:	22 2f       	mov	r18, r18
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	22 95       	swap	r18
    19d6:	32 95       	swap	r19
    19d8:	30 7f       	andi	r19, 0xF0	; 240
    19da:	32 27       	eor	r19, r18
    19dc:	20 7f       	andi	r18, 0xF0	; 240
    19de:	32 27       	eor	r19, r18
    19e0:	24 2b       	or	r18, r20
    19e2:	fc 01       	movw	r30, r24
    19e4:	20 83       	st	Z, r18

	    	        /* Configure Voltage Reference*/
	    	        Adc_SelectRefVoltageSource(Address_Adc->vref_source);
    19e6:	87 e2       	ldi	r24, 0x27	; 39
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	27 e2       	ldi	r18, 0x27	; 39
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	f9 01       	movw	r30, r18
    19f0:	20 81       	ld	r18, Z
    19f2:	42 2f       	mov	r20, r18
    19f4:	4f 73       	andi	r20, 0x3F	; 63
    19f6:	2a 81       	ldd	r18, Y+2	; 0x02
    19f8:	3b 81       	ldd	r19, Y+3	; 0x03
    19fa:	f9 01       	movw	r30, r18
    19fc:	21 81       	ldd	r18, Z+1	; 0x01
    19fe:	22 2f       	mov	r18, r18
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	00 24       	eor	r0, r0
    1a04:	36 95       	lsr	r19
    1a06:	27 95       	ror	r18
    1a08:	07 94       	ror	r0
    1a0a:	36 95       	lsr	r19
    1a0c:	27 95       	ror	r18
    1a0e:	07 94       	ror	r0
    1a10:	32 2f       	mov	r19, r18
    1a12:	20 2d       	mov	r18, r0
    1a14:	24 2b       	or	r18, r20
    1a16:	fc 01       	movw	r30, r24
    1a18:	20 83       	st	Z, r18

	    	        /* Enable Adc Peripheral */
	    	        Adc_Enable();
    1a1a:	86 e2       	ldi	r24, 0x26	; 38
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	26 e2       	ldi	r18, 0x26	; 38
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	f9 01       	movw	r30, r18
    1a24:	20 81       	ld	r18, Z
    1a26:	20 68       	ori	r18, 0x80	; 128
    1a28:	fc 01       	movw	r30, r24
    1a2a:	20 83       	st	Z, r18

	    }

	    return Loc_enuAdcStatus;
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	08 95       	ret

00001a3a <Adc_enuDeInit>:

Adc_StatusErrorType Adc_enuDeInit(void){
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	1f 92       	push	r1
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	89 83       	std	Y+1, r24	; 0x01

	Adc_Disable();
    1a48:	86 e2       	ldi	r24, 0x26	; 38
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	26 e2       	ldi	r18, 0x26	; 38
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	f9 01       	movw	r30, r18
    1a52:	20 81       	ld	r18, Z
    1a54:	2f 77       	andi	r18, 0x7F	; 127
    1a56:	fc 01       	movw	r30, r24
    1a58:	20 83       	st	Z, r18
	    return Loc_enuAdcStatus;
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a5c:	0f 90       	pop	r0
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	08 95       	ret

00001a64 <Adc_enuStartConversionSync>:


Adc_StatusErrorType Adc_enuStartConversionSync(const Adc_PinConfigType* Address_Adc, u16* Address_ResultDigitalVoltage){
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	a6 97       	sbiw	r28, 0x26	; 38
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	9c a3       	std	Y+36, r25	; 0x24
    1a7a:	8b a3       	std	Y+35, r24	; 0x23
    1a7c:	7e a3       	std	Y+38, r23	; 0x26
    1a7e:	6d a3       	std	Y+37, r22	; 0x25

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8AdcInterruptStatus = ZERO_VALUE;
    1a84:	1a 82       	std	Y+2, r1	; 0x02
	    if(NULL == Address_Adc || Address_ResultDigitalVoltage == NULL){
    1a86:	8b a1       	ldd	r24, Y+35	; 0x23
    1a88:	9c a1       	ldd	r25, Y+36	; 0x24
    1a8a:	89 2b       	or	r24, r25
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <Adc_enuStartConversionSync+0x32>
    1a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a90:	9e a1       	ldd	r25, Y+38	; 0x26
    1a92:	89 2b       	or	r24, r25
    1a94:	19 f4       	brne	.+6      	; 0x1a9c <Adc_enuStartConversionSync+0x38>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	54 c1       	rjmp	.+680    	; 0x1d44 <Adc_enuStartConversionSync+0x2e0>
	    }
	    else{

	            /* Read Status of The interrupt */
	    	    Loc_u8AdcInterruptStatus = Adc_GetInterruptEnableStatus();
    1a9c:	86 e2       	ldi	r24, 0x26	; 38
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	80 81       	ld	r24, Z
    1aa4:	86 95       	lsr	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	81 70       	andi	r24, 0x01	; 1
    1aac:	8a 83       	std	Y+2, r24	; 0x02

	            /* Choose Selected Channel */
	            Adc_SelectChannel(Address_Adc->channel_number);
    1aae:	87 e2       	ldi	r24, 0x27	; 39
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	27 e2       	ldi	r18, 0x27	; 39
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	f9 01       	movw	r30, r18
    1ab8:	20 81       	ld	r18, Z
    1aba:	42 2f       	mov	r20, r18
    1abc:	48 7f       	andi	r20, 0xF8	; 248
    1abe:	2b a1       	ldd	r18, Y+35	; 0x23
    1ac0:	3c a1       	ldd	r19, Y+36	; 0x24
    1ac2:	f9 01       	movw	r30, r18
    1ac4:	20 81       	ld	r18, Z
    1ac6:	27 70       	andi	r18, 0x07	; 7
    1ac8:	24 2b       	or	r18, r20
    1aca:	fc 01       	movw	r30, r24
    1acc:	20 83       	st	Z, r18


	            /* Disable Interrupt not to jump after completing*/
	            Adc_SetInterruptEnable(ZERO_VALUE);
    1ace:	86 e2       	ldi	r24, 0x26	; 38
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	26 e2       	ldi	r18, 0x26	; 38
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	20 81       	ld	r18, Z
    1ada:	27 7f       	andi	r18, 0xF7	; 247
    1adc:	fc 01       	movw	r30, r24
    1ade:	20 83       	st	Z, r18


	            /* Start Conversion  */
	            Adc_StartConversion();
    1ae0:	86 e2       	ldi	r24, 0x26	; 38
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	26 e2       	ldi	r18, 0x26	; 38
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	f9 01       	movw	r30, r18
    1aea:	20 81       	ld	r18, Z
    1aec:	20 64       	ori	r18, 0x40	; 64
    1aee:	fc 01       	movw	r30, r24
    1af0:	20 83       	st	Z, r18



	            /* wait =polling for conversion */
	            while( ZERO_VALUE == Adc_IsConversionCompleted() );
    1af2:	00 00       	nop
    1af4:	86 e2       	ldi	r24, 0x26	; 38
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	fc 01       	movw	r30, r24
    1afa:	80 81       	ld	r24, Z
    1afc:	82 95       	swap	r24
    1afe:	86 95       	lsr	r24
    1b00:	86 95       	lsr	r24
    1b02:	83 70       	andi	r24, 0x03	; 3
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	81 70       	andi	r24, 0x01	; 1
    1b0a:	99 27       	eor	r25, r25
    1b0c:	89 2b       	or	r24, r25
    1b0e:	91 f7       	brne	.-28     	; 0x1af4 <Adc_enuStartConversionSync+0x90>
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e2       	ldi	r26, 0x20	; 32
    1b16:	b1 e4       	ldi	r27, 0x41	; 65
    1b18:	8b 83       	std	Y+3, r24	; 0x03
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	ad 83       	std	Y+5, r26	; 0x05
    1b1e:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1b20:	2b ea       	ldi	r18, 0xAB	; 171
    1b22:	3a ea       	ldi	r19, 0xAA	; 170
    1b24:	4a ea       	ldi	r20, 0xAA	; 170
    1b26:	50 e4       	ldi	r21, 0x40	; 64
    1b28:	6b 81       	ldd	r22, Y+3	; 0x03
    1b2a:	7c 81       	ldd	r23, Y+4	; 0x04
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b30:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8f 83       	std	Y+7, r24	; 0x07
    1b3a:	98 87       	std	Y+8, r25	; 0x08
    1b3c:	a9 87       	std	Y+9, r26	; 0x09
    1b3e:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	50 e4       	ldi	r21, 0x40	; 64
    1b48:	6b 81       	ldd	r22, Y+3	; 0x03
    1b4a:	7c 81       	ldd	r23, Y+4	; 0x04
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	8b 87       	std	Y+11, r24	; 0x0b
    1b5a:	9c 87       	std	Y+12, r25	; 0x0c
    1b5c:	ad 87       	std	Y+13, r26	; 0x0d
    1b5e:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6a:	78 85       	ldd	r23, Y+8	; 0x08
    1b6c:	89 85       	ldd	r24, Y+9	; 0x09
    1b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b70:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	1c f4       	brge	.+6      	; 0x1b7e <Adc_enuStartConversionSync+0x11a>
		__ticks = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	8f 87       	std	Y+15, r24	; 0x0f
    1b7c:	b2 c0       	rjmp	.+356    	; 0x1ce2 <Adc_enuStartConversionSync+0x27e>
	else if (__tmp2 > 65535)
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8e:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	0c f0       	brlt	.+2      	; 0x1b98 <Adc_enuStartConversionSync+0x134>
    1b96:	7b c0       	rjmp	.+246    	; 0x1c8e <Adc_enuStartConversionSync+0x22a>
	{
		_delay_ms(__us / 1000.0);
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a e7       	ldi	r20, 0x7A	; 122
    1b9e:	54 e4       	ldi	r21, 0x44	; 68
    1ba0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ba2:	7c 81       	ldd	r23, Y+4	; 0x04
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba8:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__divsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	88 8b       	std	Y+16, r24	; 0x10
    1bb2:	99 8b       	std	Y+17, r25	; 0x11
    1bb4:	aa 8b       	std	Y+18, r26	; 0x12
    1bb6:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a e7       	ldi	r20, 0x7A	; 122
    1bbe:	55 e4       	ldi	r21, 0x45	; 69
    1bc0:	68 89       	ldd	r22, Y+16	; 0x10
    1bc2:	79 89       	ldd	r23, Y+17	; 0x11
    1bc4:	8a 89       	ldd	r24, Y+18	; 0x12
    1bc6:	9b 89       	ldd	r25, Y+19	; 0x13
    1bc8:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8c 8b       	std	Y+20, r24	; 0x14
    1bd2:	9d 8b       	std	Y+21, r25	; 0x15
    1bd4:	ae 8b       	std	Y+22, r26	; 0x16
    1bd6:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	6c 89       	ldd	r22, Y+20	; 0x14
    1be2:	7d 89       	ldd	r23, Y+21	; 0x15
    1be4:	8e 89       	ldd	r24, Y+22	; 0x16
    1be6:	9f 89       	ldd	r25, Y+23	; 0x17
    1be8:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <Adc_enuStartConversionSync+0x196>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	99 8f       	std	Y+25, r25	; 0x19
    1bf6:	88 8f       	std	Y+24, r24	; 0x18
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <Adc_enuStartConversionSync+0x214>
	else if (__tmp > 65535)
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	6c 89       	ldd	r22, Y+20	; 0x14
    1c04:	7d 89       	ldd	r23, Y+21	; 0x15
    1c06:	8e 89       	ldd	r24, Y+22	; 0x16
    1c08:	9f 89       	ldd	r25, Y+23	; 0x17
    1c0a:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <Adc_enuStartConversionSync+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	68 89       	ldd	r22, Y+16	; 0x10
    1c1c:	79 89       	ldd	r23, Y+17	; 0x11
    1c1e:	8a 89       	ldd	r24, Y+18	; 0x12
    1c20:	9b 89       	ldd	r25, Y+19	; 0x13
    1c22:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	99 8f       	std	Y+25, r25	; 0x19
    1c38:	88 8f       	std	Y+24, r24	; 0x18
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <Adc_enuStartConversionSync+0x1f6>
    1c3c:	80 e9       	ldi	r24, 0x90	; 144
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	9b 8f       	std	Y+27, r25	; 0x1b
    1c42:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c46:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <Adc_enuStartConversionSync+0x1e4>
    1c4c:	9b 8f       	std	Y+27, r25	; 0x1b
    1c4e:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	88 8d       	ldd	r24, Y+24	; 0x18
    1c52:	99 8d       	ldd	r25, Y+25	; 0x19
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	99 8f       	std	Y+25, r25	; 0x19
    1c58:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	88 8d       	ldd	r24, Y+24	; 0x18
    1c5c:	99 8d       	ldd	r25, Y+25	; 0x19
    1c5e:	89 2b       	or	r24, r25
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <Adc_enuStartConversionSync+0x1d8>
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <Adc_enuStartConversionSync+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6c 89       	ldd	r22, Y+20	; 0x14
    1c66:	7d 89       	ldd	r23, Y+21	; 0x15
    1c68:	8e 89       	ldd	r24, Y+22	; 0x16
    1c6a:	9f 89       	ldd	r25, Y+23	; 0x17
    1c6c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	99 8f       	std	Y+25, r25	; 0x19
    1c76:	88 8f       	std	Y+24, r24	; 0x18
    1c78:	88 8d       	ldd	r24, Y+24	; 0x18
    1c7a:	99 8d       	ldd	r25, Y+25	; 0x19
    1c7c:	9d 8f       	std	Y+29, r25	; 0x1d
    1c7e:	8c 8f       	std	Y+28, r24	; 0x1c
    1c80:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c82:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <Adc_enuStartConversionSync+0x220>
    1c88:	9d 8f       	std	Y+29, r25	; 0x1d
    1c8a:	8c 8f       	std	Y+28, r24	; 0x1c
    1c8c:	2a c0       	rjmp	.+84     	; 0x1ce2 <Adc_enuStartConversionSync+0x27e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4f e7       	ldi	r20, 0x7F	; 127
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	ac f4       	brge	.+42     	; 0x1cd0 <Adc_enuStartConversionSync+0x26c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9f 8f       	std	Y+31, r25	; 0x1f
    1cb8:	8e 8f       	std	Y+30, r24	; 0x1e
    1cba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cbc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cbe:	99 a3       	std	Y+33, r25	; 0x21
    1cc0:	88 a3       	std	Y+32, r24	; 0x20
    1cc2:	88 a1       	ldd	r24, Y+32	; 0x20
    1cc4:	99 a1       	ldd	r25, Y+33	; 0x21
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <Adc_enuStartConversionSync+0x262>
    1cca:	99 a3       	std	Y+33, r25	; 0x21
    1ccc:	88 a3       	std	Y+32, r24	; 0x20
    1cce:	0f c0       	rjmp	.+30     	; 0x1cee <Adc_enuStartConversionSync+0x28a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	8f 87       	std	Y+15, r24	; 0x0f
    1ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce4:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ce6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ce8:	8a 95       	dec	r24
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <Adc_enuStartConversionSync+0x284>
    1cec:	8a a3       	std	Y+34, r24	; 0x22
	            _delay_us(10);

	            Loc_enuAdcStatus &= Adc_GetResult(Address_Adc->result_format ,Address_ResultDigitalVoltage);
    1cee:	8b a1       	ldd	r24, Y+35	; 0x23
    1cf0:	9c a1       	ldd	r25, Y+36	; 0x24
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	22 81       	ldd	r18, Z+2	; 0x02
    1cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	82 2f       	mov	r24, r18
    1cfe:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <Adc_GetResult>
    1d02:	98 2f       	mov	r25, r24
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	89 23       	and	r24, r25
    1d08:	89 83       	std	Y+1, r24	; 0x01

	            /* Return Status Of The Adc Interrupt*/
	            Adc_ClearInterruptFlag();
    1d0a:	86 e2       	ldi	r24, 0x26	; 38
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	26 e2       	ldi	r18, 0x26	; 38
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	f9 01       	movw	r30, r18
    1d14:	20 81       	ld	r18, Z
    1d16:	20 61       	ori	r18, 0x10	; 16
    1d18:	fc 01       	movw	r30, r24
    1d1a:	20 83       	st	Z, r18
	            Adc_SetInterruptEnable(Loc_u8AdcInterruptStatus);
    1d1c:	86 e2       	ldi	r24, 0x26	; 38
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	26 e2       	ldi	r18, 0x26	; 38
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	f9 01       	movw	r30, r18
    1d26:	20 81       	ld	r18, Z
    1d28:	42 2f       	mov	r20, r18
    1d2a:	47 7f       	andi	r20, 0xF7	; 247
    1d2c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d2e:	22 2f       	mov	r18, r18
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	22 0f       	add	r18, r18
    1d34:	33 1f       	adc	r19, r19
    1d36:	22 0f       	add	r18, r18
    1d38:	33 1f       	adc	r19, r19
    1d3a:	22 0f       	add	r18, r18
    1d3c:	33 1f       	adc	r19, r19
    1d3e:	24 2b       	or	r18, r20
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 83       	st	Z, r18
	        }

	    return Loc_enuAdcStatus;
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d46:	a6 96       	adiw	r28, 0x26	; 38
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <Adc_ConvertResultToVoltage>:



Adc_StatusErrorType Adc_ConvertResultToVoltage( u16 Copy_u16DigitalValue, f32* Address_ResultAnalogVoltage){
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <Adc_ConvertResultToVoltage+0x6>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <Adc_ConvertResultToVoltage+0x8>
    1d60:	1f 92       	push	r1
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	9b 83       	std	Y+3, r25	; 0x03
    1d68:	8a 83       	std	Y+2, r24	; 0x02
    1d6a:	7d 83       	std	Y+5, r23	; 0x05
    1d6c:	6c 83       	std	Y+4, r22	; 0x04

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_ResultAnalogVoltage){
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	9d 81       	ldd	r25, Y+5	; 0x05
    1d76:	89 2b       	or	r24, r25
    1d78:	19 f4       	brne	.+6      	; 0x1d80 <Adc_ConvertResultToVoltage+0x28>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	1c c0       	rjmp	.+56     	; 0x1db8 <Adc_ConvertResultToVoltage+0x60>
	    }
	    else{
	           /* Vanalog = Vdigital * step    */
	           /* Step Size = (Vmax-Vmin)/2^n      */
	           *Address_ResultAnalogVoltage = Copy_u16DigitalValue*0.004883F;
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	cc 01       	movw	r24, r24
    1d86:	a0 e0       	ldi	r26, 0x00	; 0
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	bc 01       	movw	r22, r24
    1d8c:	cd 01       	movw	r24, r26
    1d8e:	0e 94 87 21 	call	0x430e	; 0x430e <__floatunsisf>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	23 e9       	ldi	r18, 0x93	; 147
    1d98:	31 e0       	ldi	r19, 0x01	; 1
    1d9a:	40 ea       	ldi	r20, 0xA0	; 160
    1d9c:	5b e3       	ldi	r21, 0x3B	; 59
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dac:	3d 81       	ldd	r19, Y+5	; 0x05
    1dae:	f9 01       	movw	r30, r18
    1db0:	80 83       	st	Z, r24
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	a2 83       	std	Z+2, r26	; 0x02
    1db6:	b3 83       	std	Z+3, r27	; 0x03
	       }

	    return Loc_enuAdcStatus;
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	08 95       	ret

00001dca <Adc_StartConversionAsync>:


Adc_StatusErrorType Adc_StartConversionAsync(const Adc_PinConfigType* Address_Adc){
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <Adc_StartConversionAsync+0x6>
    1dd0:	1f 92       	push	r1
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	9b 83       	std	Y+3, r25	; 0x03
    1dd8:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	89 2b       	or	r24, r25
    1de4:	19 f4       	brne	.+6      	; 0x1dec <Adc_StartConversionAsync+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	34 c0       	rjmp	.+104    	; 0x1e54 <Adc_StartConversionAsync+0x8a>
	    }
	    else{
	    	 /* You can't start A new Conversion Unless The old One Is Done*/
	    	        while( ZERO_VALUE == Adc_IsConversionCompleted() );
    1dec:	00 00       	nop
    1dee:	86 e2       	ldi	r24, 0x26	; 38
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	fc 01       	movw	r30, r24
    1df4:	80 81       	ld	r24, Z
    1df6:	82 95       	swap	r24
    1df8:	86 95       	lsr	r24
    1dfa:	86 95       	lsr	r24
    1dfc:	83 70       	andi	r24, 0x03	; 3
    1dfe:	88 2f       	mov	r24, r24
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	81 70       	andi	r24, 0x01	; 1
    1e04:	99 27       	eor	r25, r25
    1e06:	89 2b       	or	r24, r25
    1e08:	91 f7       	brne	.-28     	; 0x1dee <Adc_StartConversionAsync+0x24>

	    	        Global_AdcInterruptIndex = (u8)Address_Adc->channel_number;
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0e:	fc 01       	movw	r30, r24
    1e10:	80 81       	ld	r24, Z
    1e12:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Global_AdcInterruptIndex>
	    	        current_format = Address_Adc->result_format;
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <current_format>
	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    1e22:	87 e2       	ldi	r24, 0x27	; 39
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	27 e2       	ldi	r18, 0x27	; 39
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	f9 01       	movw	r30, r18
    1e2c:	20 81       	ld	r18, Z
    1e2e:	42 2f       	mov	r20, r18
    1e30:	48 7f       	andi	r20, 0xF8	; 248
    1e32:	2a 81       	ldd	r18, Y+2	; 0x02
    1e34:	3b 81       	ldd	r19, Y+3	; 0x03
    1e36:	f9 01       	movw	r30, r18
    1e38:	20 81       	ld	r18, Z
    1e3a:	27 70       	andi	r18, 0x07	; 7
    1e3c:	24 2b       	or	r18, r20
    1e3e:	fc 01       	movw	r30, r24
    1e40:	20 83       	st	Z, r18


	    	        /* Start Conversion  */
	    	        Adc_StartConversion();
    1e42:	86 e2       	ldi	r24, 0x26	; 38
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	26 e2       	ldi	r18, 0x26	; 38
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	20 81       	ld	r18, Z
    1e4e:	20 64       	ori	r18, 0x40	; 64
    1e50:	fc 01       	movw	r30, r24
    1e52:	20 83       	st	Z, r18
	    }

	    return Loc_enuAdcStatus;
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	08 95       	ret

00001e62 <Adc_enuEnableInterrupt>:


Adc_StatusErrorType Adc_enuEnableInterrupt(void){
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	1f 92       	push	r1
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	89 83       	std	Y+1, r24	; 0x01
	Adc_EnableInterrupt();
    1e70:	86 e2       	ldi	r24, 0x26	; 38
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	26 e2       	ldi	r18, 0x26	; 38
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	f9 01       	movw	r30, r18
    1e7a:	20 81       	ld	r18, Z
    1e7c:	28 60       	ori	r18, 0x08	; 8
    1e7e:	fc 01       	movw	r30, r24
    1e80:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e84:	0f 90       	pop	r0
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <Adc_enuDisableInterrupt>:


Adc_StatusErrorType Adc_enuDisableInterrupt(void){
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	1f 92       	push	r1
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	89 83       	std	Y+1, r24	; 0x01
	Adc_DisableInterrupt();
    1e9a:	86 e2       	ldi	r24, 0x26	; 38
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	26 e2       	ldi	r18, 0x26	; 38
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	f9 01       	movw	r30, r18
    1ea4:	20 81       	ld	r18, Z
    1ea6:	27 7f       	andi	r18, 0xF7	; 247
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eae:	0f 90       	pop	r0
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	08 95       	ret

00001eb6 <Adc_GetResult>:




////////////////////////////////////////////////Helpers Functions ///////////////////////////
static Adc_StatusErrorType Adc_GetResult(const Adc_ResultFormartType Copy_enuResultFormat, u16* Address_Result){
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <Adc_GetResult+0x6>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <Adc_GetResult+0x8>
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	8a 83       	std	Y+2, r24	; 0x02
    1ec4:	7c 83       	std	Y+4, r23	; 0x04
    1ec6:	6b 83       	std	Y+3, r22	; 0x03

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Result){
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	89 2b       	or	r24, r25
    1ed2:	19 f4       	brne	.+6      	; 0x1eda <Adc_GetResult+0x24>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1ed4:	82 e0       	ldi	r24, 0x02	; 2
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	30 c0       	rjmp	.+96     	; 0x1f3a <Adc_GetResult+0x84>
	    }

	    	else{
	    	        switch(Copy_enuResultFormat){
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	89 2b       	or	r24, r25
    1ee2:	b9 f4       	brne	.+46     	; 0x1f12 <Adc_GetResult+0x5c>

	    	        case ADC_RIGHT_JUSTIFIED:



	    	                *Address_Result = (ADCL) | (ADCH <<8) ;
    1ee4:	84 e2       	ldi	r24, 0x24	; 36
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	fc 01       	movw	r30, r24
    1eea:	80 81       	ld	r24, Z
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	85 e2       	ldi	r24, 0x25	; 37
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	98 2f       	mov	r25, r24
    1efe:	88 27       	eor	r24, r24
    1f00:	82 2b       	or	r24, r18
    1f02:	93 2b       	or	r25, r19
    1f04:	9c 01       	movw	r18, r24
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	31 83       	std	Z+1, r19	; 0x01
    1f0e:	20 83       	st	Z, r18
	    	                break;
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <Adc_GetResult+0x84>

	    	            default:
	    	            	*Address_Result = (ADCHL>>6) & 0x3FF;
    1f12:	84 e2       	ldi	r24, 0x24	; 36
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	fc 01       	movw	r30, r24
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	9c 01       	movw	r18, r24
    1f1e:	00 24       	eor	r0, r0
    1f20:	22 0f       	add	r18, r18
    1f22:	33 1f       	adc	r19, r19
    1f24:	00 1c       	adc	r0, r0
    1f26:	22 0f       	add	r18, r18
    1f28:	33 1f       	adc	r19, r19
    1f2a:	00 1c       	adc	r0, r0
    1f2c:	23 2f       	mov	r18, r19
    1f2e:	30 2d       	mov	r19, r0
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	9c 81       	ldd	r25, Y+4	; 0x04
    1f34:	fc 01       	movw	r30, r24
    1f36:	31 83       	std	Z+1, r19	; 0x01
    1f38:	20 83       	st	Z, r18

	    	        }
	    	    }


	    return Loc_enuAdcStatus;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <Adc_SetCallbackFunction>:

Adc_StatusErrorType Adc_SetCallbackFunction(const Adc_PinConfigType* Address_Adc, void (*callback)(u16)){
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <Adc_SetCallbackFunction+0x6>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <Adc_SetCallbackFunction+0x8>
    1f52:	1f 92       	push	r1
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	9b 83       	std	Y+3, r25	; 0x03
    1f5a:	8a 83       	std	Y+2, r24	; 0x02
    1f5c:	7d 83       	std	Y+5, r23	; 0x05
    1f5e:	6c 83       	std	Y+4, r22	; 0x04
	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
		    if(NULL == Address_Adc){
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	89 2b       	or	r24, r25
    1f6a:	19 f4       	brne	.+6      	; 0x1f72 <Adc_SetCallbackFunction+0x28>
		    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <Adc_SetCallbackFunction+0x46>
		    }
		    else{
		    	Adc_InterruptHandlerArr[Address_Adc->channel_number] = callback;
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	fc 01       	movw	r30, r24
    1f78:	80 81       	ld	r24, Z
    1f7a:	88 2f       	mov	r24, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	83 5e       	subi	r24, 0xE3	; 227
    1f84:	9e 4f       	sbci	r25, 0xFE	; 254
    1f86:	2c 81       	ldd	r18, Y+4	; 0x04
    1f88:	3d 81       	ldd	r19, Y+5	; 0x05
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	31 83       	std	Z+1, r19	; 0x01
    1f8e:	20 83       	st	Z, r18
		    }
		    return Loc_enuAdcStatus;
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	08 95       	ret

00001fa2 <__vector_16>:

// ISR function For ADC
void __vector_16(void) __attribute__((signal));

void __vector_16(void){
    1fa2:	1f 92       	push	r1
    1fa4:	0f 92       	push	r0
    1fa6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1faa:	0f 92       	push	r0
    1fac:	11 24       	eor	r1, r1
    1fae:	2f 93       	push	r18
    1fb0:	3f 93       	push	r19
    1fb2:	4f 93       	push	r20
    1fb4:	5f 93       	push	r21
    1fb6:	6f 93       	push	r22
    1fb8:	7f 93       	push	r23
    1fba:	8f 93       	push	r24
    1fbc:	9f 93       	push	r25
    1fbe:	af 93       	push	r26
    1fc0:	bf 93       	push	r27
    1fc2:	ef 93       	push	r30
    1fc4:	ff 93       	push	r31
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <__vector_16+0x2a>
    1fcc:	1f 92       	push	r1
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62

	    u16 Loc_u16Result;
	    Adc_StatusErrorType Loc_enuAdcStatus  = ADC_STATUS_OK;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	89 83       	std	Y+1, r24	; 0x01

	    Loc_enuAdcStatus = Adc_GetResult(current_format,&Loc_u16Result);
    1fd6:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <current_format>
    1fda:	ce 01       	movw	r24, r28
    1fdc:	02 96       	adiw	r24, 0x02	; 2
    1fde:	bc 01       	movw	r22, r24
    1fe0:	82 2f       	mov	r24, r18
    1fe2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <Adc_GetResult>
    1fe6:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL != Adc_InterruptHandlerArr[Global_AdcInterruptIndex]){
    1fe8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Global_AdcInterruptIndex>
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	83 5e       	subi	r24, 0xE3	; 227
    1ff6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	89 2b       	or	r24, r25
    2000:	79 f0       	breq	.+30     	; 0x2020 <__vector_16+0x7e>
	        Adc_InterruptHandlerArr[Global_AdcInterruptIndex](Loc_u16Result);
    2002:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Global_AdcInterruptIndex>
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	83 5e       	subi	r24, 0xE3	; 227
    2010:	9e 4f       	sbci	r25, 0xFE	; 254
    2012:	fc 01       	movw	r30, r24
    2014:	20 81       	ld	r18, Z
    2016:	31 81       	ldd	r19, Z+1	; 0x01
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	9b 81       	ldd	r25, Y+3	; 0x03
    201c:	f9 01       	movw	r30, r18
    201e:	09 95       	icall
	    }
	    else {/* do nothing , error in declaration */ }

}
    2020:	00 00       	nop
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	ff 91       	pop	r31
    202e:	ef 91       	pop	r30
    2030:	bf 91       	pop	r27
    2032:	af 91       	pop	r26
    2034:	9f 91       	pop	r25
    2036:	8f 91       	pop	r24
    2038:	7f 91       	pop	r23
    203a:	6f 91       	pop	r22
    203c:	5f 91       	pop	r21
    203e:	4f 91       	pop	r20
    2040:	3f 91       	pop	r19
    2042:	2f 91       	pop	r18
    2044:	0f 90       	pop	r0
    2046:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    204a:	0f 90       	pop	r0
    204c:	1f 90       	pop	r1
    204e:	18 95       	reti

00002050 <Seven_Segment_WriteBCDConnection>:



/********************************** Software Interfaces Declarations *******************/

Seven_Segment_StatusErrorType  Seven_Segment_WriteBCDConnection(const Seven_Segment_BCDType* Address_Segment, u8 Copy_u8Value){
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	27 97       	sbiw	r28, 0x07	; 7
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	6f 83       	std	Y+7, r22	; 0x07

	Seven_Segment_StatusErrorType Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_OK;
    206a:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    206c:	1b 82       	std	Y+3, r1	; 0x03
	    u8 Loc_u8FinalBit = DIO_LOW;
    206e:	1c 82       	std	Y+4, r1	; 0x04
	    u8 Loc_u8Counter=ZERO_VALUE;
    2070:	1a 82       	std	Y+2, r1	; 0x02

	    if (NULL == Address_Segment  ){
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	89 2b       	or	r24, r25
    2078:	19 f4       	brne	.+6      	; 0x2080 <Seven_Segment_WriteBCDConnection+0x30>

	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	22 c0       	rjmp	.+68     	; 0x20c4 <Seven_Segment_WriteBCDConnection+0x74>
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    2080:	1a 82       	std	Y+2, r1	; 0x02
    2082:	1d c0       	rjmp	.+58     	; 0x20be <Seven_Segment_WriteBCDConnection+0x6e>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
    2084:	8f 81       	ldd	r24, Y+7	; 0x07
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	2a 81       	ldd	r18, Y+2	; 0x02
    208c:	22 2f       	mov	r18, r18
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <Seven_Segment_WriteBCDConnection+0x46>
    2092:	95 95       	asr	r25
    2094:	87 95       	ror	r24
    2096:	2a 95       	dec	r18
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <Seven_Segment_WriteBCDConnection+0x42>
    209a:	81 70       	andi	r24, 0x01	; 1
    209c:	8c 83       	std	Y+4, r24	; 0x04
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	2d 81       	ldd	r18, Y+5	; 0x05
    20a6:	3e 81       	ldd	r19, Y+6	; 0x06
    20a8:	82 0f       	add	r24, r18
    20aa:	93 1f       	adc	r25, r19
    20ac:	fc 01       	movw	r30, r24
    20ae:	80 81       	ld	r24, Z
    20b0:	6c 81       	ldd	r22, Y+4	; 0x04
    20b2:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    20b6:	8b 83       	std	Y+3, r24	; 0x03
	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	8a 83       	std	Y+2, r24	; 0x02
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	84 30       	cpi	r24, 0x04	; 4
    20c2:	00 f3       	brcs	.-64     	; 0x2084 <Seven_Segment_WriteBCDConnection+0x34>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
	        }
	    }

	    return Loc_enuSegmentState;
    20c4:	89 81       	ldd	r24, Y+1	; 0x01

}
    20c6:	27 96       	adiw	r28, 0x07	; 7
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	08 95       	ret

000020d8 <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	ef 97       	sbiw	r28, 0x3f	; 63
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	9f af       	std	Y+63, r25	; 0x3f
    20ee:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    20f0:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
    20f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    20f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    20f6:	89 2b       	or	r24, r25
    20f8:	19 f4       	brne	.+6      	; 0x2100 <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	0f c2       	rjmp	.+1054   	; 0x251e <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    2100:	8e ad       	ldd	r24, Y+62	; 0x3e
    2102:	9f ad       	ldd	r25, Y+63	; 0x3f
    2104:	68 e3       	ldi	r22, 0x38	; 56
    2106:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a0 ea       	ldi	r26, 0xA0	; 160
    2112:	b0 e4       	ldi	r27, 0x40	; 64
    2114:	8a 83       	std	Y+2, r24	; 0x02
    2116:	9b 83       	std	Y+3, r25	; 0x03
    2118:	ac 83       	std	Y+4, r26	; 0x04
    211a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	4a e7       	ldi	r20, 0x7A	; 122
    2122:	55 e4       	ldi	r21, 0x45	; 69
    2124:	6a 81       	ldd	r22, Y+2	; 0x02
    2126:	7b 81       	ldd	r23, Y+3	; 0x03
    2128:	8c 81       	ldd	r24, Y+4	; 0x04
    212a:	9d 81       	ldd	r25, Y+5	; 0x05
    212c:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	8c ab       	std	Y+52, r24	; 0x34
    2136:	9d ab       	std	Y+53, r25	; 0x35
    2138:	ae ab       	std	Y+54, r26	; 0x36
    213a:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e8       	ldi	r20, 0x80	; 128
    2142:	5f e3       	ldi	r21, 0x3F	; 63
    2144:	6c a9       	ldd	r22, Y+52	; 0x34
    2146:	7d a9       	ldd	r23, Y+53	; 0x35
    2148:	8e a9       	ldd	r24, Y+54	; 0x36
    214a:	9f a9       	ldd	r25, Y+55	; 0x37
    214c:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    2150:	88 23       	and	r24, r24
    2152:	2c f4       	brge	.+10     	; 0x215e <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	99 af       	std	Y+57, r25	; 0x39
    215a:	88 af       	std	Y+56, r24	; 0x38
    215c:	3f c0       	rjmp	.+126    	; 0x21dc <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	57 e4       	ldi	r21, 0x47	; 71
    2166:	6c a9       	ldd	r22, Y+52	; 0x34
    2168:	7d a9       	ldd	r23, Y+53	; 0x35
    216a:	8e a9       	ldd	r24, Y+54	; 0x36
    216c:	9f a9       	ldd	r25, Y+55	; 0x37
    216e:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    2172:	18 16       	cp	r1, r24
    2174:	4c f5       	brge	.+82     	; 0x21c8 <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e2       	ldi	r20, 0x20	; 32
    217c:	51 e4       	ldi	r21, 0x41	; 65
    217e:	6a 81       	ldd	r22, Y+2	; 0x02
    2180:	7b 81       	ldd	r23, Y+3	; 0x03
    2182:	8c 81       	ldd	r24, Y+4	; 0x04
    2184:	9d 81       	ldd	r25, Y+5	; 0x05
    2186:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	99 af       	std	Y+57, r25	; 0x39
    219c:	88 af       	std	Y+56, r24	; 0x38
    219e:	0f c0       	rjmp	.+30     	; 0x21be <Lcd_4bit_enuInit+0xe6>
    21a0:	80 e9       	ldi	r24, 0x90	; 144
    21a2:	91 e0       	ldi	r25, 0x01	; 1
    21a4:	9b af       	std	Y+59, r25	; 0x3b
    21a6:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    21aa:	9b ad       	ldd	r25, Y+59	; 0x3b
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <Lcd_4bit_enuInit+0xd4>
    21b0:	9b af       	std	Y+59, r25	; 0x3b
    21b2:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b4:	88 ad       	ldd	r24, Y+56	; 0x38
    21b6:	99 ad       	ldd	r25, Y+57	; 0x39
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	99 af       	std	Y+57, r25	; 0x39
    21bc:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21be:	88 ad       	ldd	r24, Y+56	; 0x38
    21c0:	99 ad       	ldd	r25, Y+57	; 0x39
    21c2:	89 2b       	or	r24, r25
    21c4:	69 f7       	brne	.-38     	; 0x21a0 <Lcd_4bit_enuInit+0xc8>
    21c6:	14 c0       	rjmp	.+40     	; 0x21f0 <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c8:	6c a9       	ldd	r22, Y+52	; 0x34
    21ca:	7d a9       	ldd	r23, Y+53	; 0x35
    21cc:	8e a9       	ldd	r24, Y+54	; 0x36
    21ce:	9f a9       	ldd	r25, Y+55	; 0x37
    21d0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	99 af       	std	Y+57, r25	; 0x39
    21da:	88 af       	std	Y+56, r24	; 0x38
    21dc:	88 ad       	ldd	r24, Y+56	; 0x38
    21de:	99 ad       	ldd	r25, Y+57	; 0x39
    21e0:	9d af       	std	Y+61, r25	; 0x3d
    21e2:	8c af       	std	Y+60, r24	; 0x3c
    21e4:	8c ad       	ldd	r24, Y+60	; 0x3c
    21e6:	9d ad       	ldd	r25, Y+61	; 0x3d
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <Lcd_4bit_enuInit+0x110>
    21ec:	9d af       	std	Y+61, r25	; 0x3d
    21ee:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    21f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    21f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    21f4:	68 e3       	ldi	r22, 0x38	; 56
    21f6:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a6 e1       	ldi	r26, 0x16	; 22
    2202:	b3 e4       	ldi	r27, 0x43	; 67
    2204:	8e 83       	std	Y+6, r24	; 0x06
    2206:	9f 83       	std	Y+7, r25	; 0x07
    2208:	a8 87       	std	Y+8, r26	; 0x08
    220a:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    220c:	2b ea       	ldi	r18, 0xAB	; 171
    220e:	3a ea       	ldi	r19, 0xAA	; 170
    2210:	4a ea       	ldi	r20, 0xAA	; 170
    2212:	50 e4       	ldi	r21, 0x40	; 64
    2214:	6e 81       	ldd	r22, Y+6	; 0x06
    2216:	7f 81       	ldd	r23, Y+7	; 0x07
    2218:	88 85       	ldd	r24, Y+8	; 0x08
    221a:	99 85       	ldd	r25, Y+9	; 0x09
    221c:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	88 8f       	std	Y+24, r24	; 0x18
    2226:	99 8f       	std	Y+25, r25	; 0x19
    2228:	aa 8f       	std	Y+26, r26	; 0x1a
    222a:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	50 e4       	ldi	r21, 0x40	; 64
    2234:	6e 81       	ldd	r22, Y+6	; 0x06
    2236:	7f 81       	ldd	r23, Y+7	; 0x07
    2238:	88 85       	ldd	r24, Y+8	; 0x08
    223a:	99 85       	ldd	r25, Y+9	; 0x09
    223c:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8c 8f       	std	Y+28, r24	; 0x1c
    2246:	9d 8f       	std	Y+29, r25	; 0x1d
    2248:	ae 8f       	std	Y+30, r26	; 0x1e
    224a:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	68 8d       	ldd	r22, Y+24	; 0x18
    2256:	79 8d       	ldd	r23, Y+25	; 0x19
    2258:	8a 8d       	ldd	r24, Y+26	; 0x1a
    225a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    225c:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    2260:	88 23       	and	r24, r24
    2262:	1c f4       	brge	.+6      	; 0x226a <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	88 a3       	std	Y+32, r24	; 0x20
    2268:	b2 c0       	rjmp	.+356    	; 0x23ce <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2274:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2276:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2278:	9f 8d       	ldd	r25, Y+31	; 0x1f
    227a:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    227e:	18 16       	cp	r1, r24
    2280:	0c f0       	brlt	.+2      	; 0x2284 <Lcd_4bit_enuInit+0x1ac>
    2282:	7b c0       	rjmp	.+246    	; 0x237a <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a e7       	ldi	r20, 0x7A	; 122
    228a:	54 e4       	ldi	r21, 0x44	; 68
    228c:	6e 81       	ldd	r22, Y+6	; 0x06
    228e:	7f 81       	ldd	r23, Y+7	; 0x07
    2290:	88 85       	ldd	r24, Y+8	; 0x08
    2292:	99 85       	ldd	r25, Y+9	; 0x09
    2294:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__divsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	89 a3       	std	Y+33, r24	; 0x21
    229e:	9a a3       	std	Y+34, r25	; 0x22
    22a0:	ab a3       	std	Y+35, r26	; 0x23
    22a2:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a e7       	ldi	r20, 0x7A	; 122
    22aa:	55 e4       	ldi	r21, 0x45	; 69
    22ac:	69 a1       	ldd	r22, Y+33	; 0x21
    22ae:	7a a1       	ldd	r23, Y+34	; 0x22
    22b0:	8b a1       	ldd	r24, Y+35	; 0x23
    22b2:	9c a1       	ldd	r25, Y+36	; 0x24
    22b4:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	8d a3       	std	Y+37, r24	; 0x25
    22be:	9e a3       	std	Y+38, r25	; 0x26
    22c0:	af a3       	std	Y+39, r26	; 0x27
    22c2:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	6d a1       	ldd	r22, Y+37	; 0x25
    22ce:	7e a1       	ldd	r23, Y+38	; 0x26
    22d0:	8f a1       	ldd	r24, Y+39	; 0x27
    22d2:	98 a5       	ldd	r25, Y+40	; 0x28
    22d4:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    22d8:	88 23       	and	r24, r24
    22da:	2c f4       	brge	.+10     	; 0x22e6 <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9a a7       	std	Y+42, r25	; 0x2a
    22e2:	89 a7       	std	Y+41, r24	; 0x29
    22e4:	3f c0       	rjmp	.+126    	; 0x2364 <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	6d a1       	ldd	r22, Y+37	; 0x25
    22f0:	7e a1       	ldd	r23, Y+38	; 0x26
    22f2:	8f a1       	ldd	r24, Y+39	; 0x27
    22f4:	98 a5       	ldd	r25, Y+40	; 0x28
    22f6:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	4c f5       	brge	.+82     	; 0x2350 <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	69 a1       	ldd	r22, Y+33	; 0x21
    2308:	7a a1       	ldd	r23, Y+34	; 0x22
    230a:	8b a1       	ldd	r24, Y+35	; 0x23
    230c:	9c a1       	ldd	r25, Y+36	; 0x24
    230e:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9a a7       	std	Y+42, r25	; 0x2a
    2324:	89 a7       	std	Y+41, r24	; 0x29
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <Lcd_4bit_enuInit+0x26e>
    2328:	80 e9       	ldi	r24, 0x90	; 144
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	9c a7       	std	Y+44, r25	; 0x2c
    232e:	8b a7       	std	Y+43, r24	; 0x2b
    2330:	8b a5       	ldd	r24, Y+43	; 0x2b
    2332:	9c a5       	ldd	r25, Y+44	; 0x2c
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <Lcd_4bit_enuInit+0x25c>
    2338:	9c a7       	std	Y+44, r25	; 0x2c
    233a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233c:	89 a5       	ldd	r24, Y+41	; 0x29
    233e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	9a a7       	std	Y+42, r25	; 0x2a
    2344:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2346:	89 a5       	ldd	r24, Y+41	; 0x29
    2348:	9a a5       	ldd	r25, Y+42	; 0x2a
    234a:	89 2b       	or	r24, r25
    234c:	69 f7       	brne	.-38     	; 0x2328 <Lcd_4bit_enuInit+0x250>
    234e:	3f c0       	rjmp	.+126    	; 0x23ce <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2350:	6d a1       	ldd	r22, Y+37	; 0x25
    2352:	7e a1       	ldd	r23, Y+38	; 0x26
    2354:	8f a1       	ldd	r24, Y+39	; 0x27
    2356:	98 a5       	ldd	r25, Y+40	; 0x28
    2358:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9a a7       	std	Y+42, r25	; 0x2a
    2362:	89 a7       	std	Y+41, r24	; 0x29
    2364:	89 a5       	ldd	r24, Y+41	; 0x29
    2366:	9a a5       	ldd	r25, Y+42	; 0x2a
    2368:	9e a7       	std	Y+46, r25	; 0x2e
    236a:	8d a7       	std	Y+45, r24	; 0x2d
    236c:	8d a5       	ldd	r24, Y+45	; 0x2d
    236e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <Lcd_4bit_enuInit+0x298>
    2374:	9e a7       	std	Y+46, r25	; 0x2e
    2376:	8d a7       	std	Y+45, r24	; 0x2d
    2378:	2a c0       	rjmp	.+84     	; 0x23ce <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4f e7       	ldi	r20, 0x7F	; 127
    2380:	53 e4       	ldi	r21, 0x43	; 67
    2382:	68 8d       	ldd	r22, Y+24	; 0x18
    2384:	79 8d       	ldd	r23, Y+25	; 0x19
    2386:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2388:	9b 8d       	ldd	r25, Y+27	; 0x1b
    238a:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    238e:	18 16       	cp	r1, r24
    2390:	ac f4       	brge	.+42     	; 0x23bc <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2392:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2394:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2396:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2398:	9f 8d       	ldd	r25, Y+31	; 0x1f
    239a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	98 ab       	std	Y+48, r25	; 0x30
    23a4:	8f a7       	std	Y+47, r24	; 0x2f
    23a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a8:	98 a9       	ldd	r25, Y+48	; 0x30
    23aa:	9a ab       	std	Y+50, r25	; 0x32
    23ac:	89 ab       	std	Y+49, r24	; 0x31
    23ae:	89 a9       	ldd	r24, Y+49	; 0x31
    23b0:	9a a9       	ldd	r25, Y+50	; 0x32
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <Lcd_4bit_enuInit+0x2da>
    23b6:	9a ab       	std	Y+50, r25	; 0x32
    23b8:	89 ab       	std	Y+49, r24	; 0x31
    23ba:	0f c0       	rjmp	.+30     	; 0x23da <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23bc:	68 8d       	ldd	r22, Y+24	; 0x18
    23be:	79 8d       	ldd	r23, Y+25	; 0x19
    23c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23c4:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	88 a3       	std	Y+32, r24	; 0x20
    23ce:	88 a1       	ldd	r24, Y+32	; 0x20
    23d0:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23d2:	8b a9       	ldd	r24, Y+51	; 0x33
    23d4:	8a 95       	dec	r24
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <Lcd_4bit_enuInit+0x2fc>
    23d8:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    23da:	8e ad       	ldd	r24, Y+62	; 0x3e
    23dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    23de:	68 e3       	ldi	r22, 0x38	; 56
    23e0:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    23e4:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    23e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    23e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    23f0:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    23f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    23f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23f6:	62 e0       	ldi	r22, 0x02	; 2
    23f8:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    23fc:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    23fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2400:	9f ad       	ldd	r25, Y+63	; 0x3f
    2402:	66 e0       	ldi	r22, 0x06	; 6
    2404:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    2408:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    240a:	8e ad       	ldd	r24, Y+62	; 0x3e
    240c:	9f ad       	ldd	r25, Y+63	; 0x3f
    240e:	6c e0       	ldi	r22, 0x0C	; 12
    2410:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    2414:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    2416:	8e ad       	ldd	r24, Y+62	; 0x3e
    2418:	9f ad       	ldd	r25, Y+63	; 0x3f
    241a:	68 e2       	ldi	r22, 0x28	; 40
    241c:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    2420:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    2422:	8e ad       	ldd	r24, Y+62	; 0x3e
    2424:	9f ad       	ldd	r25, Y+63	; 0x3f
    2426:	60 e8       	ldi	r22, 0x80	; 128
    2428:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    242c:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    242e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2430:	9f ad       	ldd	r25, Y+63	; 0x3f
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	a0 ea       	ldi	r26, 0xA0	; 160
    2440:	b0 e4       	ldi	r27, 0x40	; 64
    2442:	8a 87       	std	Y+10, r24	; 0x0a
    2444:	9b 87       	std	Y+11, r25	; 0x0b
    2446:	ac 87       	std	Y+12, r26	; 0x0c
    2448:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a e7       	ldi	r20, 0x7A	; 122
    2450:	55 e4       	ldi	r21, 0x45	; 69
    2452:	6a 85       	ldd	r22, Y+10	; 0x0a
    2454:	7b 85       	ldd	r23, Y+11	; 0x0b
    2456:	8c 85       	ldd	r24, Y+12	; 0x0c
    2458:	9d 85       	ldd	r25, Y+13	; 0x0d
    245a:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8e 87       	std	Y+14, r24	; 0x0e
    2464:	9f 87       	std	Y+15, r25	; 0x0f
    2466:	a8 8b       	std	Y+16, r26	; 0x10
    2468:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	6e 85       	ldd	r22, Y+14	; 0x0e
    2474:	7f 85       	ldd	r23, Y+15	; 0x0f
    2476:	88 89       	ldd	r24, Y+16	; 0x10
    2478:	99 89       	ldd	r25, Y+17	; 0x11
    247a:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    247e:	88 23       	and	r24, r24
    2480:	2c f4       	brge	.+10     	; 0x248c <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	9b 8b       	std	Y+19, r25	; 0x13
    2488:	8a 8b       	std	Y+18, r24	; 0x12
    248a:	3f c0       	rjmp	.+126    	; 0x250a <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	6e 85       	ldd	r22, Y+14	; 0x0e
    2496:	7f 85       	ldd	r23, Y+15	; 0x0f
    2498:	88 89       	ldd	r24, Y+16	; 0x10
    249a:	99 89       	ldd	r25, Y+17	; 0x11
    249c:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    24a0:	18 16       	cp	r1, r24
    24a2:	4c f5       	brge	.+82     	; 0x24f6 <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	6a 85       	ldd	r22, Y+10	; 0x0a
    24ae:	7b 85       	ldd	r23, Y+11	; 0x0b
    24b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    24b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    24b4:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9b 8b       	std	Y+19, r25	; 0x13
    24ca:	8a 8b       	std	Y+18, r24	; 0x12
    24cc:	0f c0       	rjmp	.+30     	; 0x24ec <Lcd_4bit_enuInit+0x414>
    24ce:	80 e9       	ldi	r24, 0x90	; 144
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	9d 8b       	std	Y+21, r25	; 0x15
    24d4:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24d6:	8c 89       	ldd	r24, Y+20	; 0x14
    24d8:	9d 89       	ldd	r25, Y+21	; 0x15
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <Lcd_4bit_enuInit+0x402>
    24de:	9d 8b       	std	Y+21, r25	; 0x15
    24e0:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e2:	8a 89       	ldd	r24, Y+18	; 0x12
    24e4:	9b 89       	ldd	r25, Y+19	; 0x13
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	9b 8b       	std	Y+19, r25	; 0x13
    24ea:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ec:	8a 89       	ldd	r24, Y+18	; 0x12
    24ee:	9b 89       	ldd	r25, Y+19	; 0x13
    24f0:	89 2b       	or	r24, r25
    24f2:	69 f7       	brne	.-38     	; 0x24ce <Lcd_4bit_enuInit+0x3f6>
    24f4:	14 c0       	rjmp	.+40     	; 0x251e <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f6:	6e 85       	ldd	r22, Y+14	; 0x0e
    24f8:	7f 85       	ldd	r23, Y+15	; 0x0f
    24fa:	88 89       	ldd	r24, Y+16	; 0x10
    24fc:	99 89       	ldd	r25, Y+17	; 0x11
    24fe:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9b 8b       	std	Y+19, r25	; 0x13
    2508:	8a 8b       	std	Y+18, r24	; 0x12
    250a:	8a 89       	ldd	r24, Y+18	; 0x12
    250c:	9b 89       	ldd	r25, Y+19	; 0x13
    250e:	9f 8b       	std	Y+23, r25	; 0x17
    2510:	8e 8b       	std	Y+22, r24	; 0x16
    2512:	8e 89       	ldd	r24, Y+22	; 0x16
    2514:	9f 89       	ldd	r25, Y+23	; 0x17
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <Lcd_4bit_enuInit+0x43e>
    251a:	9f 8b       	std	Y+23, r25	; 0x17
    251c:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    251e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2520:	ef 96       	adiw	r28, 0x3f	; 63
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	08 95       	ret

00002532 <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	00 d0       	rcall	.+0      	; 0x2538 <Lcd_4bit_enuSendCommand+0x6>
    2538:	00 d0       	rcall	.+0      	; 0x253a <Lcd_4bit_enuSendCommand+0x8>
    253a:	1f 92       	push	r1
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2546:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    2548:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	9c 81       	ldd	r25, Y+4	; 0x04
    254e:	89 2b       	or	r24, r25
    2550:	19 f4       	brne	.+6      	; 0x2558 <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	22 c0       	rjmp	.+68     	; 0x259c <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	fc 01       	movw	r30, r24
    255e:	84 81       	ldd	r24, Z+4	; 0x04
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    2566:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	28 2f       	mov	r18, r24
    256c:	22 95       	swap	r18
    256e:	2f 70       	andi	r18, 0x0F	; 15
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	62 2f       	mov	r22, r18
    2576:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <Lcd_4bit_enuSet4BitsOnPins>
    257a:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <Lcd_4bit_enuSendEnableSignal>
    2584:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	6d 81       	ldd	r22, Y+5	; 0x05
    258c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <Lcd_4bit_enuSet4BitsOnPins>
    2590:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <Lcd_4bit_enuSendEnableSignal>
    259a:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    259c:	89 81       	ldd	r24, Y+1	; 0x01

}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	08 95       	ret

000025ae <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <Lcd_4bit_enuDisplayCharacter+0x6>
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <Lcd_4bit_enuDisplayCharacter+0x8>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	9b 83       	std	Y+3, r25	; 0x03
    25bc:	8a 83       	std	Y+2, r24	; 0x02
    25be:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    25c0:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	9b 81       	ldd	r25, Y+3	; 0x03
    25c6:	89 2b       	or	r24, r25
    25c8:	19 f4       	brne	.+6      	; 0x25d0 <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    25ca:	82 e0       	ldi	r24, 0x02	; 2
    25cc:	89 83       	std	Y+1, r24	; 0x01
    25ce:	22 c0       	rjmp	.+68     	; 0x2614 <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	9b 81       	ldd	r25, Y+3	; 0x03
    25d4:	fc 01       	movw	r30, r24
    25d6:	84 81       	ldd	r24, Z+4	; 0x04
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    25de:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    25e0:	8c 81       	ldd	r24, Y+4	; 0x04
    25e2:	28 2f       	mov	r18, r24
    25e4:	22 95       	swap	r18
    25e6:	2f 70       	andi	r18, 0x0F	; 15
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	9b 81       	ldd	r25, Y+3	; 0x03
    25ec:	62 2f       	mov	r22, r18
    25ee:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <Lcd_4bit_enuSet4BitsOnPins>
    25f2:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	9b 81       	ldd	r25, Y+3	; 0x03
    25f8:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <Lcd_4bit_enuSendEnableSignal>
    25fc:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	9b 81       	ldd	r25, Y+3	; 0x03
    2602:	6c 81       	ldd	r22, Y+4	; 0x04
    2604:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <Lcd_4bit_enuSet4BitsOnPins>
    2608:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	9b 81       	ldd	r25, Y+3	; 0x03
    260e:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <Lcd_4bit_enuSendEnableSignal>
    2612:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2614:	89 81       	ldd	r24, Y+1	; 0x01

}
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	08 95       	ret

00002624 <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	00 d0       	rcall	.+0      	; 0x262a <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    262a:	00 d0       	rcall	.+0      	; 0x262c <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    262c:	00 d0       	rcall	.+0      	; 0x262e <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	9b 83       	std	Y+3, r25	; 0x03
    2634:	8a 83       	std	Y+2, r24	; 0x02
    2636:	6c 83       	std	Y+4, r22	; 0x04
    2638:	4d 83       	std	Y+5, r20	; 0x05
    263a:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    263c:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	9b 81       	ldd	r25, Y+3	; 0x03
    2642:	89 2b       	or	r24, r25
    2644:	19 f4       	brne	.+6      	; 0x264c <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	29 c0       	rjmp	.+82     	; 0x269e <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	9b 81       	ldd	r25, Y+3	; 0x03
    2650:	4e 81       	ldd	r20, Y+6	; 0x06
    2652:	6d 81       	ldd	r22, Y+5	; 0x05
    2654:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Lcd_4bit_enuGoToXY>
    2658:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	9b 81       	ldd	r25, Y+3	; 0x03
    265e:	fc 01       	movw	r30, r24
    2660:	84 81       	ldd	r24, Z+4	; 0x04
    2662:	61 e0       	ldi	r22, 0x01	; 1
    2664:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    2668:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	28 2f       	mov	r18, r24
    266e:	22 95       	swap	r18
    2670:	2f 70       	andi	r18, 0x0F	; 15
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	9b 81       	ldd	r25, Y+3	; 0x03
    2676:	62 2f       	mov	r22, r18
    2678:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <Lcd_4bit_enuSet4BitsOnPins>
    267c:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	9b 81       	ldd	r25, Y+3	; 0x03
    2682:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <Lcd_4bit_enuSendEnableSignal>
    2686:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	6c 81       	ldd	r22, Y+4	; 0x04
    268e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <Lcd_4bit_enuSet4BitsOnPins>
    2692:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	9b 81       	ldd	r25, Y+3	; 0x03
    2698:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <Lcd_4bit_enuSendEnableSignal>
    269c:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    269e:	89 81       	ldd	r24, Y+1	; 0x01
}
    26a0:	26 96       	adiw	r28, 0x06	; 6
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	08 95       	ret

000026b2 <Lcd_4bit_enuDisplayStringWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayStringWithPosition(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String, u8 Copy_u8Row, u8 Copy_u8Col){
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	28 97       	sbiw	r28, 0x08	; 8
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	9c 83       	std	Y+4, r25	; 0x04
    26c8:	8b 83       	std	Y+3, r24	; 0x03
    26ca:	7e 83       	std	Y+6, r23	; 0x06
    26cc:	6d 83       	std	Y+5, r22	; 0x05
    26ce:	4f 83       	std	Y+7, r20	; 0x07
    26d0:	28 87       	std	Y+8, r18	; 0x08

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    26d2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    26d4:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	89 2b       	or	r24, r25
    26dc:	21 f0       	breq	.+8      	; 0x26e6 <Lcd_4bit_enuDisplayStringWithPosition+0x34>
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	89 2b       	or	r24, r25
    26e4:	19 f4       	brne	.+6      	; 0x26ec <Lcd_4bit_enuDisplayStringWithPosition+0x3a>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	25 c0       	rjmp	.+74     	; 0x2736 <Lcd_4bit_enuDisplayStringWithPosition+0x84>

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	48 85       	ldd	r20, Y+8	; 0x08
    26f2:	6f 81       	ldd	r22, Y+7	; 0x07
    26f4:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Lcd_4bit_enuGoToXY>
    26f8:	89 83       	std	Y+1, r24	; 0x01
			while(Address_pu8String[Loc_u8Counter] !=0){
    26fa:	12 c0       	rjmp	.+36     	; 0x2720 <Lcd_4bit_enuDisplayStringWithPosition+0x6e>
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	88 2f       	mov	r24, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	2d 81       	ldd	r18, Y+5	; 0x05
    2704:	3e 81       	ldd	r19, Y+6	; 0x06
    2706:	82 0f       	add	r24, r18
    2708:	93 1f       	adc	r25, r19
    270a:	fc 01       	movw	r30, r24
    270c:	20 81       	ld	r18, Z
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	9c 81       	ldd	r25, Y+4	; 0x04
    2712:	62 2f       	mov	r22, r18
    2714:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Lcd_4bit_enuDisplayCharacter>
    2718:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	8f 5f       	subi	r24, 0xFF	; 255
    271e:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
			while(Address_pu8String[Loc_u8Counter] !=0){
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	2d 81       	ldd	r18, Y+5	; 0x05
    2728:	3e 81       	ldd	r19, Y+6	; 0x06
    272a:	82 0f       	add	r24, r18
    272c:	93 1f       	adc	r25, r19
    272e:	fc 01       	movw	r30, r24
    2730:	80 81       	ld	r24, Z
    2732:	88 23       	and	r24, r24
    2734:	19 f7       	brne	.-58     	; 0x26fc <Lcd_4bit_enuDisplayStringWithPosition+0x4a>
		}




		return Loc_enuStatus;
    2736:	89 81       	ldd	r24, Y+1	; 0x01

}
    2738:	28 96       	adiw	r28, 0x08	; 8
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	08 95       	ret

0000274a <Lcd_4bit_enuCreateCustomCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	27 97       	sbiw	r28, 0x07	; 7
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	9c 83       	std	Y+4, r25	; 0x04
    2760:	8b 83       	std	Y+3, r24	; 0x03
    2762:	7e 83       	std	Y+6, r23	; 0x06
    2764:	6d 83       	std	Y+5, r22	; 0x05
    2766:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2768:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    276a:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	89 2b       	or	r24, r25
    2772:	21 f0       	breq	.+8      	; 0x277c <Lcd_4bit_enuCreateCustomCharacter+0x32>
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	9e 81       	ldd	r25, Y+6	; 0x06
    2778:	89 2b       	or	r24, r25
    277a:	19 f4       	brne	.+6      	; 0x2782 <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	30 c0       	rjmp	.+96     	; 0x27e2 <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    2782:	8f 81       	ldd	r24, Y+7	; 0x07
    2784:	88 30       	cpi	r24, 0x08	; 8
    2786:	18 f0       	brcs	.+6      	; 0x278e <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    2788:	83 e0       	ldi	r24, 0x03	; 3
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	2a c0       	rjmp	.+84     	; 0x27e2 <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    278e:	8f 81       	ldd	r24, Y+7	; 0x07
    2790:	88 2f       	mov	r24, r24
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	08 96       	adiw	r24, 0x08	; 8
    2796:	28 2f       	mov	r18, r24
    2798:	22 0f       	add	r18, r18
    279a:	22 0f       	add	r18, r18
    279c:	22 0f       	add	r18, r18
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	62 2f       	mov	r22, r18
    27a4:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    27a8:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    27aa:	1a 82       	std	Y+2, r1	; 0x02
    27ac:	11 c0       	rjmp	.+34     	; 0x27d0 <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	2d 81       	ldd	r18, Y+5	; 0x05
    27b6:	3e 81       	ldd	r19, Y+6	; 0x06
    27b8:	82 0f       	add	r24, r18
    27ba:	93 1f       	adc	r25, r19
    27bc:	fc 01       	movw	r30, r24
    27be:	20 81       	ld	r18, Z
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	9c 81       	ldd	r25, Y+4	; 0x04
    27c4:	62 2f       	mov	r22, r18
    27c6:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	8a 83       	std	Y+2, r24	; 0x02
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	88 30       	cpi	r24, 0x08	; 8
    27d4:	60 f3       	brcs	.-40     	; 0x27ae <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	60 e8       	ldi	r22, 0x80	; 128
    27dc:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    27e0:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    27e4:	27 96       	adiw	r28, 0x07	; 7
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <Lcd_4bit_enuGoToXY+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <Lcd_4bit_enuGoToXY+0x8>
    27fe:	1f 92       	push	r1
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	9b 83       	std	Y+3, r25	; 0x03
    2806:	8a 83       	std	Y+2, r24	; 0x02
    2808:	6c 83       	std	Y+4, r22	; 0x04
    280a:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    280c:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	9b 81       	ldd	r25, Y+3	; 0x03
    2812:	89 2b       	or	r24, r25
    2814:	19 f4       	brne	.+6      	; 0x281c <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	56 c0       	rjmp	.+172    	; 0x28c8 <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    281c:	8c 81       	ldd	r24, Y+4	; 0x04
    281e:	85 30       	cpi	r24, 0x05	; 5
    2820:	18 f0       	brcs	.+6      	; 0x2828 <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    2822:	85 e0       	ldi	r24, 0x05	; 5
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	50 c0       	rjmp	.+160    	; 0x28c8 <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	85 31       	cpi	r24, 0x15	; 21
    282c:	18 f0       	brcs	.+6      	; 0x2834 <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    282e:	84 e0       	ldi	r24, 0x04	; 4
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	4a c0       	rjmp	.+148    	; 0x28c8 <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    2834:	8d 81       	ldd	r24, Y+5	; 0x05
    2836:	81 50       	subi	r24, 0x01	; 1
    2838:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    283a:	8c 81       	ldd	r24, Y+4	; 0x04
    283c:	88 2f       	mov	r24, r24
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	91 05       	cpc	r25, r1
    2844:	c9 f0       	breq	.+50     	; 0x2878 <Lcd_4bit_enuGoToXY+0x82>
    2846:	83 30       	cpi	r24, 0x03	; 3
    2848:	91 05       	cpc	r25, r1
    284a:	1c f4       	brge	.+6      	; 0x2852 <Lcd_4bit_enuGoToXY+0x5c>
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	39 f0       	breq	.+14     	; 0x285e <Lcd_4bit_enuGoToXY+0x68>
    2850:	3a c0       	rjmp	.+116    	; 0x28c6 <Lcd_4bit_enuGoToXY+0xd0>
    2852:	83 30       	cpi	r24, 0x03	; 3
    2854:	91 05       	cpc	r25, r1
    2856:	e9 f0       	breq	.+58     	; 0x2892 <Lcd_4bit_enuGoToXY+0x9c>
    2858:	04 97       	sbiw	r24, 0x04	; 4
    285a:	41 f1       	breq	.+80     	; 0x28ac <Lcd_4bit_enuGoToXY+0xb6>
    285c:	34 c0       	rjmp	.+104    	; 0x28c6 <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	20 e8       	ldi	r18, 0x80	; 128
    2862:	28 0f       	add	r18, r24
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9b 81       	ldd	r25, Y+3	; 0x03
    2868:	62 2f       	mov	r22, r18
    286a:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    286e:	98 2f       	mov	r25, r24
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	89 23       	and	r24, r25
    2874:	89 83       	std	Y+1, r24	; 0x01
			                break;
    2876:	28 c0       	rjmp	.+80     	; 0x28c8 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	20 ec       	ldi	r18, 0xC0	; 192
    287c:	28 0f       	add	r18, r24
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	9b 81       	ldd	r25, Y+3	; 0x03
    2882:	62 2f       	mov	r22, r18
    2884:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    2888:	98 2f       	mov	r25, r24
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	89 23       	and	r24, r25
    288e:	89 83       	std	Y+1, r24	; 0x01
			                break;
    2890:	1b c0       	rjmp	.+54     	; 0x28c8 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	24 e9       	ldi	r18, 0x94	; 148
    2896:	28 0f       	add	r18, r24
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	9b 81       	ldd	r25, Y+3	; 0x03
    289c:	62 2f       	mov	r22, r18
    289e:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    28a2:	98 2f       	mov	r25, r24
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	89 23       	and	r24, r25
    28a8:	89 83       	std	Y+1, r24	; 0x01
			                break;
    28aa:	0e c0       	rjmp	.+28     	; 0x28c8 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	24 ed       	ldi	r18, 0xD4	; 212
    28b0:	28 0f       	add	r18, r24
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	9b 81       	ldd	r25, Y+3	; 0x03
    28b6:	62 2f       	mov	r22, r18
    28b8:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    28bc:	98 2f       	mov	r25, r24
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	89 23       	and	r24, r25
    28c2:	89 83       	std	Y+1, r24	; 0x01
			                break;
    28c4:	01 c0       	rjmp	.+2      	; 0x28c8 <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    28c6:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    28c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <Lcd_4bit_enuDisplayString+0x6>
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <Lcd_4bit_enuDisplayString+0x8>
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <Lcd_4bit_enuDisplayString+0xa>
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	9c 83       	std	Y+4, r25	; 0x04
    28ea:	8b 83       	std	Y+3, r24	; 0x03
    28ec:	7e 83       	std	Y+6, r23	; 0x06
    28ee:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    28f0:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    28f2:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	89 2b       	or	r24, r25
    28fa:	21 f0       	breq	.+8      	; 0x2904 <Lcd_4bit_enuDisplayString+0x2a>
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	89 2b       	or	r24, r25
    2902:	a9 f4       	brne	.+42     	; 0x292e <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	89 83       	std	Y+1, r24	; 0x01
    2908:	1d c0       	rjmp	.+58     	; 0x2944 <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	88 2f       	mov	r24, r24
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	2d 81       	ldd	r18, Y+5	; 0x05
    2912:	3e 81       	ldd	r19, Y+6	; 0x06
    2914:	82 0f       	add	r24, r18
    2916:	93 1f       	adc	r25, r19
    2918:	fc 01       	movw	r30, r24
    291a:	20 81       	ld	r18, Z
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	9c 81       	ldd	r25, Y+4	; 0x04
    2920:	62 2f       	mov	r22, r18
    2922:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Lcd_4bit_enuDisplayCharacter>
    2926:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	2d 81       	ldd	r18, Y+5	; 0x05
    2936:	3e 81       	ldd	r19, Y+6	; 0x06
    2938:	82 0f       	add	r24, r18
    293a:	93 1f       	adc	r25, r19
    293c:	fc 01       	movw	r30, r24
    293e:	80 81       	ld	r24, Z
    2940:	88 23       	and	r24, r24
    2942:	19 f7       	brne	.-58     	; 0x290a <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    2944:	89 81       	ldd	r24, Y+1	; 0x01

}
    2946:	26 96       	adiw	r28, 0x06	; 6
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	08 95       	ret

00002958 <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number){
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	cc 56       	subi	r28, 0x6C	; 108
    2962:	d1 09       	sbc	r29, r1
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	9e 01       	movw	r18, r28
    2970:	29 59       	subi	r18, 0x99	; 153
    2972:	3f 4f       	sbci	r19, 0xFF	; 255
    2974:	f9 01       	movw	r30, r18
    2976:	91 83       	std	Z+1, r25	; 0x01
    2978:	80 83       	st	Z, r24
    297a:	ce 01       	movw	r24, r28
    297c:	87 59       	subi	r24, 0x97	; 151
    297e:	9f 4f       	sbci	r25, 0xFF	; 255
    2980:	fc 01       	movw	r30, r24
    2982:	40 83       	st	Z, r20
    2984:	51 83       	std	Z+1, r21	; 0x01
    2986:	62 83       	std	Z+2, r22	; 0x02
    2988:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    298a:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    298c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    298e:	ce 01       	movw	r24, r28
    2990:	89 59       	subi	r24, 0x99	; 153
    2992:	9f 4f       	sbci	r25, 0xFF	; 255
    2994:	fc 01       	movw	r30, r24
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	89 2b       	or	r24, r25
    299c:	19 f4       	brne	.+6      	; 0x29a4 <Lcd_4bit_enuDisplayNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    299e:	82 e0       	ldi	r24, 0x02	; 2
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	1e c0       	rjmp	.+60     	; 0x29e0 <Lcd_4bit_enuDisplayNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    29a4:	9e 01       	movw	r18, r28
    29a6:	2d 5f       	subi	r18, 0xFD	; 253
    29a8:	3f 4f       	sbci	r19, 0xFF	; 255
    29aa:	ce 01       	movw	r24, r28
    29ac:	87 59       	subi	r24, 0x97	; 151
    29ae:	9f 4f       	sbci	r25, 0xFF	; 255
    29b0:	fc 01       	movw	r30, r24
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	a2 81       	ldd	r26, Z+2	; 0x02
    29b8:	b3 81       	ldd	r27, Z+3	; 0x03
    29ba:	a9 01       	movw	r20, r18
    29bc:	bc 01       	movw	r22, r24
    29be:	cd 01       	movw	r24, r26
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <Convert_IntToString>
    29c4:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    29c6:	9e 01       	movw	r18, r28
    29c8:	2d 5f       	subi	r18, 0xFD	; 253
    29ca:	3f 4f       	sbci	r19, 0xFF	; 255
    29cc:	ce 01       	movw	r24, r28
    29ce:	89 59       	subi	r24, 0x99	; 153
    29d0:	9f 4f       	sbci	r25, 0xFF	; 255
    29d2:	fc 01       	movw	r30, r24
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	b9 01       	movw	r22, r18
    29da:	0e 94 6d 14 	call	0x28da	; 0x28da <Lcd_4bit_enuDisplayString>
    29de:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    29e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    29e2:	c4 59       	subi	r28, 0x94	; 148
    29e4:	df 4f       	sbci	r29, 0xFF	; 255
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	08 95       	ret

000029f6 <Lcd_4bit_enuDisplayNumberWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumberWithPosition(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number, u8 Copy_u8Row, u8 Copy_u8Col){
    29f6:	0f 93       	push	r16
    29f8:	cf 93       	push	r28
    29fa:	df 93       	push	r29
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	ce 56       	subi	r28, 0x6E	; 110
    2a02:	d1 09       	sbc	r29, r1
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e9 59       	subi	r30, 0x99	; 153
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	ce 01       	movw	r24, r28
    2a1a:	87 59       	subi	r24, 0x97	; 151
    2a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1e:	dc 01       	movw	r26, r24
    2a20:	4d 93       	st	X+, r20
    2a22:	5d 93       	st	X+, r21
    2a24:	6d 93       	st	X+, r22
    2a26:	7c 93       	st	X, r23
    2a28:	13 97       	sbiw	r26, 0x03	; 3
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	83 59       	subi	r24, 0x93	; 147
    2a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a30:	fc 01       	movw	r30, r24
    2a32:	20 83       	st	Z, r18
    2a34:	ce 01       	movw	r24, r28
    2a36:	82 59       	subi	r24, 0x92	; 146
    2a38:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	0c 93       	st	X, r16

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2a3e:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    2a40:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    2a42:	ce 01       	movw	r24, r28
    2a44:	89 59       	subi	r24, 0x99	; 153
    2a46:	9f 4f       	sbci	r25, 0xFF	; 255
    2a48:	fc 01       	movw	r30, r24
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	89 2b       	or	r24, r25
    2a50:	19 f4       	brne	.+6      	; 0x2a58 <Lcd_4bit_enuDisplayNumberWithPosition+0x62>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	89 83       	std	Y+1, r24	; 0x01
    2a56:	31 c0       	rjmp	.+98     	; 0x2aba <Lcd_4bit_enuDisplayNumberWithPosition+0xc4>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    2a58:	9e 01       	movw	r18, r28
    2a5a:	2d 5f       	subi	r18, 0xFD	; 253
    2a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5e:	ce 01       	movw	r24, r28
    2a60:	87 59       	subi	r24, 0x97	; 151
    2a62:	9f 4f       	sbci	r25, 0xFF	; 255
    2a64:	fc 01       	movw	r30, r24
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	a2 81       	ldd	r26, Z+2	; 0x02
    2a6c:	b3 81       	ldd	r27, Z+3	; 0x03
    2a6e:	a9 01       	movw	r20, r18
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <Convert_IntToString>
    2a78:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    2a7a:	9e 01       	movw	r18, r28
    2a7c:	22 59       	subi	r18, 0x92	; 146
    2a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a80:	ce 01       	movw	r24, r28
    2a82:	83 59       	subi	r24, 0x93	; 147
    2a84:	9f 4f       	sbci	r25, 0xFF	; 255
    2a86:	ae 01       	movw	r20, r28
    2a88:	49 59       	subi	r20, 0x99	; 153
    2a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8c:	da 01       	movw	r26, r20
    2a8e:	ed 91       	ld	r30, X+
    2a90:	fc 91       	ld	r31, X
    2a92:	d9 01       	movw	r26, r18
    2a94:	4c 91       	ld	r20, X
    2a96:	dc 01       	movw	r26, r24
    2a98:	6c 91       	ld	r22, X
    2a9a:	cf 01       	movw	r24, r30
    2a9c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Lcd_4bit_enuGoToXY>
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    2aa0:	9e 01       	movw	r18, r28
    2aa2:	2d 5f       	subi	r18, 0xFD	; 253
    2aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	89 59       	subi	r24, 0x99	; 153
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	fc 01       	movw	r30, r24
    2aae:	80 81       	ld	r24, Z
    2ab0:	91 81       	ldd	r25, Z+1	; 0x01
    2ab2:	b9 01       	movw	r22, r18
    2ab4:	0e 94 6d 14 	call	0x28da	; 0x28da <Lcd_4bit_enuDisplayString>
    2ab8:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2aba:	89 81       	ldd	r24, Y+1	; 0x01

}
    2abc:	c2 59       	subi	r28, 0x92	; 146
    2abe:	df 4f       	sbci	r29, 0xFF	; 255
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	0f 91       	pop	r16
    2ad0:	08 95       	ret

00002ad2 <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f32 Copy_f32Number){
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	cc 56       	subi	r28, 0x6C	; 108
    2adc:	d1 09       	sbc	r29, r1
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	9e 01       	movw	r18, r28
    2aea:	29 59       	subi	r18, 0x99	; 153
    2aec:	3f 4f       	sbci	r19, 0xFF	; 255
    2aee:	f9 01       	movw	r30, r18
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
    2af4:	ce 01       	movw	r24, r28
    2af6:	87 59       	subi	r24, 0x97	; 151
    2af8:	9f 4f       	sbci	r25, 0xFF	; 255
    2afa:	fc 01       	movw	r30, r24
    2afc:	40 83       	st	Z, r20
    2afe:	51 83       	std	Z+1, r21	; 0x01
    2b00:	62 83       	std	Z+2, r22	; 0x02
    2b02:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2b04:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    2b06:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    2b08:	ce 01       	movw	r24, r28
    2b0a:	89 59       	subi	r24, 0x99	; 153
    2b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0e:	fc 01       	movw	r30, r24
    2b10:	80 81       	ld	r24, Z
    2b12:	91 81       	ldd	r25, Z+1	; 0x01
    2b14:	89 2b       	or	r24, r25
    2b16:	19 f4       	brne	.+6      	; 0x2b1e <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2b18:	82 e0       	ldi	r24, 0x02	; 2
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	32 c0       	rjmp	.+100    	; 0x2b82 <Lcd_4bit_enuDisplayFloatNumber+0xb0>
		}
		else{

//			Loc_enuStdStatus= Convert_FloatToString(Copy_f32Number, Loc_u8ConvertedNumberInArray);
//			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
			sprintf(Loc_u8ConvertedNumberInArray,"%g",Copy_f32Number);
    2b1e:	ce 01       	movw	r24, r28
    2b20:	87 59       	subi	r24, 0x97	; 151
    2b22:	9f 4f       	sbci	r25, 0xFF	; 255
    2b24:	fc 01       	movw	r30, r24
    2b26:	23 81       	ldd	r18, Z+3	; 0x03
    2b28:	2f 93       	push	r18
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	22 81       	ldd	r18, Z+2	; 0x02
    2b2e:	2f 93       	push	r18
    2b30:	fc 01       	movw	r30, r24
    2b32:	21 81       	ldd	r18, Z+1	; 0x01
    2b34:	2f 93       	push	r18
    2b36:	fc 01       	movw	r30, r24
    2b38:	80 81       	ld	r24, Z
    2b3a:	8f 93       	push	r24
    2b3c:	85 eb       	ldi	r24, 0xB5	; 181
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	89 2f       	mov	r24, r25
    2b42:	8f 93       	push	r24
    2b44:	85 eb       	ldi	r24, 0xB5	; 181
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	8f 93       	push	r24
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	03 96       	adiw	r24, 0x03	; 3
    2b4e:	29 2f       	mov	r18, r25
    2b50:	2f 93       	push	r18
    2b52:	8f 93       	push	r24
    2b54:	0e 94 ab 22 	call	0x4556	; 0x4556 <sprintf>
    2b58:	8d b7       	in	r24, 0x3d	; 61
    2b5a:	9e b7       	in	r25, 0x3e	; 62
    2b5c:	08 96       	adiw	r24, 0x08	; 8
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
						Loc_enuStatus = Lcd_4bit_enuDisplayCharacterWithPosition(Address_Lcd, Loc_u8ConvertedNumberInArray[0], 1, 2);
    2b68:	3b 81       	ldd	r19, Y+3	; 0x03
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	89 59       	subi	r24, 0x99	; 153
    2b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b70:	fc 01       	movw	r30, r24
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	22 e0       	ldi	r18, 0x02	; 2
    2b78:	41 e0       	ldi	r20, 0x01	; 1
    2b7a:	63 2f       	mov	r22, r19
    2b7c:	0e 94 12 13 	call	0x2624	; 0x2624 <Lcd_4bit_enuDisplayCharacterWithPosition>
    2b80:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2b82:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b84:	c4 59       	subi	r28, 0x94	; 148
    2b86:	df 4f       	sbci	r29, 0xFF	; 255
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <Lcd_4bit_enuSet4BitsOnPins+0x6>
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <Lcd_4bit_enuSet4BitsOnPins+0x8>
    2ba0:	1f 92       	push	r1
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	9c 83       	std	Y+4, r25	; 0x04
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
    2baa:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2bac:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    2bae:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb4:	89 2b       	or	r24, r25
    2bb6:	19 f4       	brne	.+6      	; 0x2bbe <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2bb8:	82 e0       	ldi	r24, 0x02	; 2
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	22 c0       	rjmp	.+68     	; 0x2c02 <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2bbe:	1a 82       	std	Y+2, r1	; 0x02
    2bc0:	1d c0       	rjmp	.+58     	; 0x2bfc <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    2bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc4:	88 2f       	mov	r24, r24
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	2a 81       	ldd	r18, Y+2	; 0x02
    2bca:	22 2f       	mov	r18, r18
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    2bd0:	95 95       	asr	r25
    2bd2:	87 95       	ror	r24
    2bd4:	2a 95       	dec	r18
    2bd6:	e2 f7       	brpl	.-8      	; 0x2bd0 <Lcd_4bit_enuSet4BitsOnPins+0x38>
    2bd8:	48 2f       	mov	r20, r24
    2bda:	41 70       	andi	r20, 0x01	; 1
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	2b 81       	ldd	r18, Y+3	; 0x03
    2be4:	3c 81       	ldd	r19, Y+4	; 0x04
    2be6:	82 0f       	add	r24, r18
    2be8:	93 1f       	adc	r25, r19
    2bea:	fc 01       	movw	r30, r24
    2bec:	80 81       	ld	r24, Z
    2bee:	64 2f       	mov	r22, r20
    2bf0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    2bf4:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	8f 5f       	subi	r24, 0xFF	; 255
    2bfa:	8a 83       	std	Y+2, r24	; 0x02
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	84 30       	cpi	r24, 0x04	; 4
    2c00:	00 f3       	brcs	.-64     	; 0x2bc2 <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    2c02:	89 81       	ldd	r24, Y+1	; 0x01

}
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	08 95       	ret

00002c14 <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	a3 97       	sbiw	r28, 0x23	; 35
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	9b a3       	std	Y+35, r25	; 0x23
    2c2a:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2c2c:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    2c2e:	8a a1       	ldd	r24, Y+34	; 0x22
    2c30:	9b a1       	ldd	r25, Y+35	; 0x23
    2c32:	89 2b       	or	r24, r25
    2c34:	19 f4       	brne	.+6      	; 0x2c3c <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2c36:	82 e0       	ldi	r24, 0x02	; 2
    2c38:	89 83       	std	Y+1, r24	; 0x01
    2c3a:	ff c0       	rjmp	.+510    	; 0x2e3a <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    2c3c:	8a a1       	ldd	r24, Y+34	; 0x22
    2c3e:	9b a1       	ldd	r25, Y+35	; 0x23
    2c40:	fc 01       	movw	r30, r24
    2c42:	85 81       	ldd	r24, Z+5	; 0x05
    2c44:	61 e0       	ldi	r22, 0x01	; 1
    2c46:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a0 ea       	ldi	r26, 0xA0	; 160
    2c52:	b0 e4       	ldi	r27, 0x40	; 64
    2c54:	8a 83       	std	Y+2, r24	; 0x02
    2c56:	9b 83       	std	Y+3, r25	; 0x03
    2c58:	ac 83       	std	Y+4, r26	; 0x04
    2c5a:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2c5c:	2b ea       	ldi	r18, 0xAB	; 171
    2c5e:	3a ea       	ldi	r19, 0xAA	; 170
    2c60:	4a ea       	ldi	r20, 0xAA	; 170
    2c62:	50 e4       	ldi	r21, 0x40	; 64
    2c64:	6a 81       	ldd	r22, Y+2	; 0x02
    2c66:	7b 81       	ldd	r23, Y+3	; 0x03
    2c68:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6c:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8e 83       	std	Y+6, r24	; 0x06
    2c76:	9f 83       	std	Y+7, r25	; 0x07
    2c78:	a8 87       	std	Y+8, r26	; 0x08
    2c7a:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	50 e4       	ldi	r21, 0x40	; 64
    2c84:	6a 81       	ldd	r22, Y+2	; 0x02
    2c86:	7b 81       	ldd	r23, Y+3	; 0x03
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	8a 87       	std	Y+10, r24	; 0x0a
    2c96:	9b 87       	std	Y+11, r25	; 0x0b
    2c98:	ac 87       	std	Y+12, r26	; 0x0c
    2c9a:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e8       	ldi	r20, 0x80	; 128
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	6e 81       	ldd	r22, Y+6	; 0x06
    2ca6:	7f 81       	ldd	r23, Y+7	; 0x07
    2ca8:	88 85       	ldd	r24, Y+8	; 0x08
    2caa:	99 85       	ldd	r25, Y+9	; 0x09
    2cac:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    2cb0:	88 23       	and	r24, r24
    2cb2:	1c f4       	brge	.+6      	; 0x2cba <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	8e 87       	std	Y+14, r24	; 0x0e
    2cb8:	b2 c0       	rjmp	.+356    	; 0x2e1e <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	6a 85       	ldd	r22, Y+10	; 0x0a
    2cc4:	7b 85       	ldd	r23, Y+11	; 0x0b
    2cc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cca:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    2cce:	18 16       	cp	r1, r24
    2cd0:	0c f0       	brlt	.+2      	; 0x2cd4 <Lcd_4bit_enuSendEnableSignal+0xc0>
    2cd2:	7b c0       	rjmp	.+246    	; 0x2dca <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	4a e7       	ldi	r20, 0x7A	; 122
    2cda:	54 e4       	ldi	r21, 0x44	; 68
    2cdc:	6a 81       	ldd	r22, Y+2	; 0x02
    2cde:	7b 81       	ldd	r23, Y+3	; 0x03
    2ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce4:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__divsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	8f 87       	std	Y+15, r24	; 0x0f
    2cee:	98 8b       	std	Y+16, r25	; 0x10
    2cf0:	a9 8b       	std	Y+17, r26	; 0x11
    2cf2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	4a e7       	ldi	r20, 0x7A	; 122
    2cfa:	55 e4       	ldi	r21, 0x45	; 69
    2cfc:	6f 85       	ldd	r22, Y+15	; 0x0f
    2cfe:	78 89       	ldd	r23, Y+16	; 0x10
    2d00:	89 89       	ldd	r24, Y+17	; 0x11
    2d02:	9a 89       	ldd	r25, Y+18	; 0x12
    2d04:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	8b 8b       	std	Y+19, r24	; 0x13
    2d0e:	9c 8b       	std	Y+20, r25	; 0x14
    2d10:	ad 8b       	std	Y+21, r26	; 0x15
    2d12:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e8       	ldi	r20, 0x80	; 128
    2d1a:	5f e3       	ldi	r21, 0x3F	; 63
    2d1c:	6b 89       	ldd	r22, Y+19	; 0x13
    2d1e:	7c 89       	ldd	r23, Y+20	; 0x14
    2d20:	8d 89       	ldd	r24, Y+21	; 0x15
    2d22:	9e 89       	ldd	r25, Y+22	; 0x16
    2d24:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    2d28:	88 23       	and	r24, r24
    2d2a:	2c f4       	brge	.+10     	; 0x2d36 <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	98 8f       	std	Y+24, r25	; 0x18
    2d32:	8f 8b       	std	Y+23, r24	; 0x17
    2d34:	3f c0       	rjmp	.+126    	; 0x2db4 <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	6b 89       	ldd	r22, Y+19	; 0x13
    2d40:	7c 89       	ldd	r23, Y+20	; 0x14
    2d42:	8d 89       	ldd	r24, Y+21	; 0x15
    2d44:	9e 89       	ldd	r25, Y+22	; 0x16
    2d46:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    2d4a:	18 16       	cp	r1, r24
    2d4c:	4c f5       	brge	.+82     	; 0x2da0 <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e2       	ldi	r20, 0x20	; 32
    2d54:	51 e4       	ldi	r21, 0x41	; 65
    2d56:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d58:	78 89       	ldd	r23, Y+16	; 0x10
    2d5a:	89 89       	ldd	r24, Y+17	; 0x11
    2d5c:	9a 89       	ldd	r25, Y+18	; 0x12
    2d5e:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	bc 01       	movw	r22, r24
    2d68:	cd 01       	movw	r24, r26
    2d6a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	98 8f       	std	Y+24, r25	; 0x18
    2d74:	8f 8b       	std	Y+23, r24	; 0x17
    2d76:	0f c0       	rjmp	.+30     	; 0x2d96 <Lcd_4bit_enuSendEnableSignal+0x182>
    2d78:	80 e9       	ldi	r24, 0x90	; 144
    2d7a:	91 e0       	ldi	r25, 0x01	; 1
    2d7c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d7e:	89 8f       	std	Y+25, r24	; 0x19
    2d80:	89 8d       	ldd	r24, Y+25	; 0x19
    2d82:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <Lcd_4bit_enuSendEnableSignal+0x170>
    2d88:	9a 8f       	std	Y+26, r25	; 0x1a
    2d8a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	98 8f       	std	Y+24, r25	; 0x18
    2d94:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d96:	8f 89       	ldd	r24, Y+23	; 0x17
    2d98:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9a:	89 2b       	or	r24, r25
    2d9c:	69 f7       	brne	.-38     	; 0x2d78 <Lcd_4bit_enuSendEnableSignal+0x164>
    2d9e:	3f c0       	rjmp	.+126    	; 0x2e1e <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da0:	6b 89       	ldd	r22, Y+19	; 0x13
    2da2:	7c 89       	ldd	r23, Y+20	; 0x14
    2da4:	8d 89       	ldd	r24, Y+21	; 0x15
    2da6:	9e 89       	ldd	r25, Y+22	; 0x16
    2da8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	98 8f       	std	Y+24, r25	; 0x18
    2db2:	8f 8b       	std	Y+23, r24	; 0x17
    2db4:	8f 89       	ldd	r24, Y+23	; 0x17
    2db6:	98 8d       	ldd	r25, Y+24	; 0x18
    2db8:	9c 8f       	std	Y+28, r25	; 0x1c
    2dba:	8b 8f       	std	Y+27, r24	; 0x1b
    2dbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <Lcd_4bit_enuSendEnableSignal+0x1ac>
    2dc4:	9c 8f       	std	Y+28, r25	; 0x1c
    2dc6:	8b 8f       	std	Y+27, r24	; 0x1b
    2dc8:	2a c0       	rjmp	.+84     	; 0x2e1e <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	4f e7       	ldi	r20, 0x7F	; 127
    2dd0:	53 e4       	ldi	r21, 0x43	; 67
    2dd2:	6e 81       	ldd	r22, Y+6	; 0x06
    2dd4:	7f 81       	ldd	r23, Y+7	; 0x07
    2dd6:	88 85       	ldd	r24, Y+8	; 0x08
    2dd8:	99 85       	ldd	r25, Y+9	; 0x09
    2dda:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    2dde:	18 16       	cp	r1, r24
    2de0:	ac f4       	brge	.+42     	; 0x2e0c <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2de2:	6a 85       	ldd	r22, Y+10	; 0x0a
    2de4:	7b 85       	ldd	r23, Y+11	; 0x0b
    2de6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2de8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dea:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9e 8f       	std	Y+30, r25	; 0x1e
    2df4:	8d 8f       	std	Y+29, r24	; 0x1d
    2df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2df8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dfa:	98 a3       	std	Y+32, r25	; 0x20
    2dfc:	8f 8f       	std	Y+31, r24	; 0x1f
    2dfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e00:	98 a1       	ldd	r25, Y+32	; 0x20
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <Lcd_4bit_enuSendEnableSignal+0x1ee>
    2e06:	98 a3       	std	Y+32, r25	; 0x20
    2e08:	8f 8f       	std	Y+31, r24	; 0x1f
    2e0a:	0f c0       	rjmp	.+30     	; 0x2e2a <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e0c:	6e 81       	ldd	r22, Y+6	; 0x06
    2e0e:	7f 81       	ldd	r23, Y+7	; 0x07
    2e10:	88 85       	ldd	r24, Y+8	; 0x08
    2e12:	99 85       	ldd	r25, Y+9	; 0x09
    2e14:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	8e 87       	std	Y+14, r24	; 0x0e
    2e1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e20:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e22:	89 a1       	ldd	r24, Y+33	; 0x21
    2e24:	8a 95       	dec	r24
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <Lcd_4bit_enuSendEnableSignal+0x210>
    2e28:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    2e2a:	8a a1       	ldd	r24, Y+34	; 0x22
    2e2c:	9b a1       	ldd	r25, Y+35	; 0x23
    2e2e:	fc 01       	movw	r30, r24
    2e30:	85 81       	ldd	r24, Z+5	; 0x05
    2e32:	60 e0       	ldi	r22, 0x00	; 0
    2e34:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    2e38:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e3c:	a3 96       	adiw	r28, 0x23	; 35
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	08 95       	ret

00002e4e <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	29 97       	sbiw	r28, 0x09	; 9
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	9f 83       	std	Y+7, r25	; 0x07
    2e64:	8e 83       	std	Y+6, r24	; 0x06
    2e66:	79 87       	std	Y+9, r23	; 0x09
    2e68:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    2e6a:	83 e0       	ldi	r24, 0x03	; 3
    2e6c:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    2e6e:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    2e70:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    2e72:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    2e74:	8e 81       	ldd	r24, Y+6	; 0x06
    2e76:	9f 81       	ldd	r25, Y+7	; 0x07
    2e78:	fc 01       	movw	r30, r24
    2e7a:	81 85       	ldd	r24, Z+9	; 0x09
    2e7c:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    2e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e80:	9f 81       	ldd	r25, Y+7	; 0x07
    2e82:	89 2b       	or	r24, r25
    2e84:	21 f0       	breq	.+8      	; 0x2e8e <Keypad_enuRead+0x40>
    2e86:	88 85       	ldd	r24, Y+8	; 0x08
    2e88:	99 85       	ldd	r25, Y+9	; 0x09
    2e8a:	89 2b       	or	r24, r25
    2e8c:	19 f4       	brne	.+6      	; 0x2e94 <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	df c0       	rjmp	.+446    	; 0x3052 <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    2e94:	8e 81       	ldd	r24, Y+6	; 0x06
    2e96:	9f 81       	ldd	r25, Y+7	; 0x07
    2e98:	0e 94 33 18 	call	0x3066	; 0x3066 <Keypad_DisableControlPins>
    2e9c:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    2e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	80 85       	ldd	r24, Z+8	; 0x08
    2ea6:	88 2f       	mov	r24, r24
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	21 f0       	breq	.+8      	; 0x2eb6 <Keypad_enuRead+0x68>
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <Keypad_enuRead+0x66>
    2eb2:	67 c0       	rjmp	.+206    	; 0x2f82 <Keypad_enuRead+0x134>
    2eb4:	cc c0       	rjmp	.+408    	; 0x304e <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    2eb6:	1a 82       	std	Y+2, r1	; 0x02
    2eb8:	5f c0       	rjmp	.+190    	; 0x2f78 <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    2eba:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	91 85       	ldd	r25, Z+9	; 0x09
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	99 23       	and	r25, r25
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <Keypad_enuRead+0x7c>
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	48 2f       	mov	r20, r24
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	88 2f       	mov	r24, r24
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	2e 81       	ldd	r18, Y+6	; 0x06
    2ed4:	3f 81       	ldd	r19, Y+7	; 0x07
    2ed6:	82 0f       	add	r24, r18
    2ed8:	93 1f       	adc	r25, r19
    2eda:	fc 01       	movw	r30, r24
    2edc:	80 81       	ld	r24, Z
    2ede:	64 2f       	mov	r22, r20
    2ee0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    2ee4:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    2ee6:	1b 82       	std	Y+3, r1	; 0x03
    2ee8:	30 c0       	rjmp	.+96     	; 0x2f4a <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	88 2f       	mov	r24, r24
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ef2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ef4:	82 0f       	add	r24, r18
    2ef6:	93 1f       	adc	r25, r19
    2ef8:	04 96       	adiw	r24, 0x04	; 4
    2efa:	fc 01       	movw	r30, r24
    2efc:	20 81       	ld	r18, Z
    2efe:	ce 01       	movw	r24, r28
    2f00:	05 96       	adiw	r24, 0x05	; 5
    2f02:	bc 01       	movw	r22, r24
    2f04:	82 2f       	mov	r24, r18
    2f06:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <Dio_enuReadChannel>
    2f0a:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    2f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f10:	fc 01       	movw	r30, r24
    2f12:	91 85       	ldd	r25, Z+9	; 0x09
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	98 17       	cp	r25, r24
    2f18:	a9 f0       	breq	.+42     	; 0x2f44 <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	88 2f       	mov	r24, r24
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	22 0f       	add	r18, r18
    2f28:	33 1f       	adc	r19, r19
    2f2a:	22 0f       	add	r18, r18
    2f2c:	33 1f       	adc	r19, r19
    2f2e:	82 0f       	add	r24, r18
    2f30:	93 1f       	adc	r25, r19
    2f32:	8e 5f       	subi	r24, 0xFE	; 254
    2f34:	9e 4f       	sbci	r25, 0xFE	; 254
    2f36:	fc 01       	movw	r30, r24
    2f38:	20 81       	ld	r18, Z
    2f3a:	88 85       	ldd	r24, Y+8	; 0x08
    2f3c:	99 85       	ldd	r25, Y+9	; 0x09
    2f3e:	fc 01       	movw	r30, r24
    2f40:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    2f42:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    2f44:	8b 81       	ldd	r24, Y+3	; 0x03
    2f46:	8f 5f       	subi	r24, 0xFF	; 255
    2f48:	8b 83       	std	Y+3, r24	; 0x03
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	84 30       	cpi	r24, 0x04	; 4
    2f4e:	68 f2       	brcs	.-102    	; 0x2eea <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    2f50:	8e 81       	ldd	r24, Y+6	; 0x06
    2f52:	9f 81       	ldd	r25, Y+7	; 0x07
    2f54:	fc 01       	movw	r30, r24
    2f56:	41 85       	ldd	r20, Z+9	; 0x09
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	88 2f       	mov	r24, r24
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f60:	3f 81       	ldd	r19, Y+7	; 0x07
    2f62:	82 0f       	add	r24, r18
    2f64:	93 1f       	adc	r25, r19
    2f66:	fc 01       	movw	r30, r24
    2f68:	80 81       	ld	r24, Z
    2f6a:	64 2f       	mov	r22, r20
    2f6c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    2f70:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	8a 83       	std	Y+2, r24	; 0x02
    2f78:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7a:	84 30       	cpi	r24, 0x04	; 4
    2f7c:	08 f4       	brcc	.+2      	; 0x2f80 <Keypad_enuRead+0x132>
    2f7e:	9d cf       	rjmp	.-198    	; 0x2eba <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    2f80:	68 c0       	rjmp	.+208    	; 0x3052 <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    2f82:	1b 82       	std	Y+3, r1	; 0x03
    2f84:	5f c0       	rjmp	.+190    	; 0x3044 <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    2f86:	8e 81       	ldd	r24, Y+6	; 0x06
    2f88:	9f 81       	ldd	r25, Y+7	; 0x07
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	91 85       	ldd	r25, Z+9	; 0x09
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	99 23       	and	r25, r25
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <Keypad_enuRead+0x148>
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	48 2f       	mov	r20, r24
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	88 2f       	mov	r24, r24
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	2e 81       	ldd	r18, Y+6	; 0x06
    2fa0:	3f 81       	ldd	r19, Y+7	; 0x07
    2fa2:	82 0f       	add	r24, r18
    2fa4:	93 1f       	adc	r25, r19
    2fa6:	04 96       	adiw	r24, 0x04	; 4
    2fa8:	fc 01       	movw	r30, r24
    2faa:	80 81       	ld	r24, Z
    2fac:	64 2f       	mov	r22, r20
    2fae:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    2fb2:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    2fb4:	1a 82       	std	Y+2, r1	; 0x02
    2fb6:	2e c0       	rjmp	.+92     	; 0x3014 <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	88 2f       	mov	r24, r24
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	2e 81       	ldd	r18, Y+6	; 0x06
    2fc0:	3f 81       	ldd	r19, Y+7	; 0x07
    2fc2:	82 0f       	add	r24, r18
    2fc4:	93 1f       	adc	r25, r19
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	20 81       	ld	r18, Z
    2fca:	ce 01       	movw	r24, r28
    2fcc:	05 96       	adiw	r24, 0x05	; 5
    2fce:	bc 01       	movw	r22, r24
    2fd0:	82 2f       	mov	r24, r18
    2fd2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <Dio_enuReadChannel>
    2fd6:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    2fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2fda:	9f 81       	ldd	r25, Y+7	; 0x07
    2fdc:	fc 01       	movw	r30, r24
    2fde:	91 85       	ldd	r25, Z+9	; 0x09
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	98 17       	cp	r25, r24
    2fe4:	a1 f0       	breq	.+40     	; 0x300e <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	88 2f       	mov	r24, r24
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	22 0f       	add	r18, r18
    2ff4:	33 1f       	adc	r19, r19
    2ff6:	22 0f       	add	r18, r18
    2ff8:	33 1f       	adc	r19, r19
    2ffa:	82 0f       	add	r24, r18
    2ffc:	93 1f       	adc	r25, r19
    2ffe:	8e 5f       	subi	r24, 0xFE	; 254
    3000:	9e 4f       	sbci	r25, 0xFE	; 254
    3002:	fc 01       	movw	r30, r24
    3004:	20 81       	ld	r18, Z
    3006:	88 85       	ldd	r24, Y+8	; 0x08
    3008:	99 85       	ldd	r25, Y+9	; 0x09
    300a:	fc 01       	movw	r30, r24
    300c:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	8f 5f       	subi	r24, 0xFF	; 255
    3012:	8a 83       	std	Y+2, r24	; 0x02
    3014:	8a 81       	ldd	r24, Y+2	; 0x02
    3016:	84 30       	cpi	r24, 0x04	; 4
    3018:	78 f2       	brcs	.-98     	; 0x2fb8 <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    301a:	8e 81       	ldd	r24, Y+6	; 0x06
    301c:	9f 81       	ldd	r25, Y+7	; 0x07
    301e:	fc 01       	movw	r30, r24
    3020:	41 85       	ldd	r20, Z+9	; 0x09
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	2e 81       	ldd	r18, Y+6	; 0x06
    302a:	3f 81       	ldd	r19, Y+7	; 0x07
    302c:	82 0f       	add	r24, r18
    302e:	93 1f       	adc	r25, r19
    3030:	04 96       	adiw	r24, 0x04	; 4
    3032:	fc 01       	movw	r30, r24
    3034:	80 81       	ld	r24, Z
    3036:	64 2f       	mov	r22, r20
    3038:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    303c:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	8f 5f       	subi	r24, 0xFF	; 255
    3042:	8b 83       	std	Y+3, r24	; 0x03
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	84 30       	cpi	r24, 0x04	; 4
    3048:	08 f4       	brcc	.+2      	; 0x304c <Keypad_enuRead+0x1fe>
    304a:	9d cf       	rjmp	.-198    	; 0x2f86 <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    3052:	89 81       	ldd	r24, Y+1	; 0x01
}
    3054:	29 96       	adiw	r28, 0x09	; 9
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	08 95       	ret

00003066 <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	00 d0       	rcall	.+0      	; 0x306c <Keypad_DisableControlPins+0x6>
    306c:	00 d0       	rcall	.+0      	; 0x306e <Keypad_DisableControlPins+0x8>
    306e:	1f 92       	push	r1
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	9d 83       	std	Y+5, r25	; 0x05
    3076:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    3078:	83 e0       	ldi	r24, 0x03	; 3
    307a:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    307c:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    307e:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    3080:	8c 81       	ldd	r24, Y+4	; 0x04
    3082:	9d 81       	ldd	r25, Y+5	; 0x05
    3084:	89 2b       	or	r24, r25
    3086:	19 f4       	brne	.+6      	; 0x308e <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    3088:	82 e0       	ldi	r24, 0x02	; 2
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	42 c0       	rjmp	.+132    	; 0x3112 <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    308e:	8c 81       	ldd	r24, Y+4	; 0x04
    3090:	9d 81       	ldd	r25, Y+5	; 0x05
    3092:	fc 01       	movw	r30, r24
    3094:	80 85       	ldd	r24, Z+8	; 0x08
    3096:	88 2f       	mov	r24, r24
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	19 f0       	breq	.+6      	; 0x30a4 <Keypad_DisableControlPins+0x3e>
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	d9 f0       	breq	.+54     	; 0x30d8 <Keypad_DisableControlPins+0x72>
    30a2:	35 c0       	rjmp	.+106    	; 0x310e <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    30a4:	1a 82       	std	Y+2, r1	; 0x02
    30a6:	14 c0       	rjmp	.+40     	; 0x30d0 <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    30a8:	8c 81       	ldd	r24, Y+4	; 0x04
    30aa:	9d 81       	ldd	r25, Y+5	; 0x05
    30ac:	fc 01       	movw	r30, r24
    30ae:	41 85       	ldd	r20, Z+9	; 0x09
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	88 2f       	mov	r24, r24
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	2c 81       	ldd	r18, Y+4	; 0x04
    30b8:	3d 81       	ldd	r19, Y+5	; 0x05
    30ba:	82 0f       	add	r24, r18
    30bc:	93 1f       	adc	r25, r19
    30be:	fc 01       	movw	r30, r24
    30c0:	80 81       	ld	r24, Z
    30c2:	64 2f       	mov	r22, r20
    30c4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    30c8:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    30ca:	8a 81       	ldd	r24, Y+2	; 0x02
    30cc:	8f 5f       	subi	r24, 0xFF	; 255
    30ce:	8a 83       	std	Y+2, r24	; 0x02
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	84 30       	cpi	r24, 0x04	; 4
    30d4:	48 f3       	brcs	.-46     	; 0x30a8 <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    30d6:	1d c0       	rjmp	.+58     	; 0x3112 <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    30d8:	1a 82       	std	Y+2, r1	; 0x02
    30da:	15 c0       	rjmp	.+42     	; 0x3106 <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    30dc:	8c 81       	ldd	r24, Y+4	; 0x04
    30de:	9d 81       	ldd	r25, Y+5	; 0x05
    30e0:	fc 01       	movw	r30, r24
    30e2:	41 85       	ldd	r20, Z+9	; 0x09
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	88 2f       	mov	r24, r24
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	2c 81       	ldd	r18, Y+4	; 0x04
    30ec:	3d 81       	ldd	r19, Y+5	; 0x05
    30ee:	82 0f       	add	r24, r18
    30f0:	93 1f       	adc	r25, r19
    30f2:	04 96       	adiw	r24, 0x04	; 4
    30f4:	fc 01       	movw	r30, r24
    30f6:	80 81       	ld	r24, Z
    30f8:	64 2f       	mov	r22, r20
    30fa:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
    30fe:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	8f 5f       	subi	r24, 0xFF	; 255
    3104:	8a 83       	std	Y+2, r24	; 0x02
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	84 30       	cpi	r24, 0x04	; 4
    310a:	40 f3       	brcs	.-48     	; 0x30dc <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    3112:	89 81       	ldd	r24, Y+1	; 0x01
}
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	08 95       	ret

00003124 <Button_enuRead>:



/********************************** Software Interfaces Declarations *******************/

Button_StatusErrorType Button_enuRead(const Button_ConfigType *Address_Button,Button_PressStatusType* Address_State ){
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29
    3128:	00 d0       	rcall	.+0      	; 0x312a <Button_enuRead+0x6>
    312a:	00 d0       	rcall	.+0      	; 0x312c <Button_enuRead+0x8>
    312c:	00 d0       	rcall	.+0      	; 0x312e <Button_enuRead+0xa>
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	9c 83       	std	Y+4, r25	; 0x04
    3134:	8b 83       	std	Y+3, r24	; 0x03
    3136:	7e 83       	std	Y+6, r23	; 0x06
    3138:	6d 83       	std	Y+5, r22	; 0x05

	Button_StatusErrorType Loc_enuStatus = BUTTON_STATUS_OK;
    313a:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    313c:	1a 82       	std	Y+2, r1	; 0x02
	if( NULL == Address_Button || NULL == Address_State ){
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	9c 81       	ldd	r25, Y+4	; 0x04
    3142:	89 2b       	or	r24, r25
    3144:	21 f0       	breq	.+8      	; 0x314e <Button_enuRead+0x2a>
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	9e 81       	ldd	r25, Y+6	; 0x06
    314a:	89 2b       	or	r24, r25
    314c:	19 f4       	brne	.+6      	; 0x3154 <Button_enuRead+0x30>
		Loc_enuStatus = BUTTON_STATUS_NULL_POINTER_ADDRESS;
    314e:	82 e0       	ldi	r24, 0x02	; 2
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	31 c0       	rjmp	.+98     	; 0x31b6 <Button_enuRead+0x92>

	}
	else{
	        switch(Address_Button->button_connection){
    3154:	8b 81       	ldd	r24, Y+3	; 0x03
    3156:	9c 81       	ldd	r25, Y+4	; 0x04
    3158:	fc 01       	movw	r30, r24
    315a:	81 81       	ldd	r24, Z+1	; 0x01
    315c:	88 2f       	mov	r24, r24
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	00 97       	sbiw	r24, 0x00	; 0
    3162:	71 f0       	breq	.+28     	; 0x3180 <Button_enuRead+0x5c>
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	29 f5       	brne	.+74     	; 0x31b2 <Button_enuRead+0x8e>

	            case BUTTON_CONNECTION_PULL_DOWN:
	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	9c 81       	ldd	r25, Y+4	; 0x04
    316c:	fc 01       	movw	r30, r24
    316e:	20 81       	ld	r18, Z
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	9e 81       	ldd	r25, Y+6	; 0x06
    3174:	bc 01       	movw	r22, r24
    3176:	82 2f       	mov	r24, r18
    3178:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <Dio_enuReadChannel>
    317c:	8a 83       	std	Y+2, r24	; 0x02
	                break;
    317e:	1b c0       	rjmp	.+54     	; 0x31b6 <Button_enuRead+0x92>
	            case BUTTON_CONNECTION_PULL_UP:

	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	9c 81       	ldd	r25, Y+4	; 0x04
    3184:	fc 01       	movw	r30, r24
    3186:	20 81       	ld	r18, Z
    3188:	8d 81       	ldd	r24, Y+5	; 0x05
    318a:	9e 81       	ldd	r25, Y+6	; 0x06
    318c:	bc 01       	movw	r22, r24
    318e:	82 2f       	mov	r24, r18
    3190:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <Dio_enuReadChannel>
    3194:	8a 83       	std	Y+2, r24	; 0x02
	                *Address_State = !(*Address_State);
    3196:	8d 81       	ldd	r24, Y+5	; 0x05
    3198:	9e 81       	ldd	r25, Y+6	; 0x06
    319a:	fc 01       	movw	r30, r24
    319c:	90 81       	ld	r25, Z
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	99 23       	and	r25, r25
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <Button_enuRead+0x82>
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	28 2f       	mov	r18, r24
    31a8:	8d 81       	ldd	r24, Y+5	; 0x05
    31aa:	9e 81       	ldd	r25, Y+6	; 0x06
    31ac:	fc 01       	movw	r30, r24
    31ae:	20 83       	st	Z, r18
	                break;
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <Button_enuRead+0x92>

	            default:
	                Loc_enuStatus = BUTTON_STATUS_FAIL;
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	89 83       	std	Y+1, r24	; 0x01
	    }




	return Loc_enuStatus;
    31b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    31b8:	26 96       	adiw	r28, 0x06	; 6
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	08 95       	ret

000031ca <main>:
void Clock_Isr(void);




int main(void){
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	ac 97       	sbiw	r28, 0x2c	; 44
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61

		u8 Loc_u8KeypadResult=5;
    31de:	85 e0       	ldi	r24, 0x05	; 5
    31e0:	8c a7       	std	Y+44, r24	; 0x2c
		Keypad_ErrorStatusType Loc_KeypadStatus = KEYPAD_STATUS_NOT_PRESSED;
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	89 83       	std	Y+1, r24	; 0x01
		Port_voidInit();
    31e6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Port_voidInit>
		Lcd_4bit_enuInit(&Lcd);
    31ea:	80 e9       	ldi	r24, 0x90	; 144
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <Lcd_4bit_enuInit>



				/////////////

		Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW1, LCD_COL3);
    31f2:	43 e0       	ldi	r20, 0x03	; 3
    31f4:	61 e0       	ldi	r22, 0x01	; 1
    31f6:	80 e9       	ldi	r24, 0x90	; 144
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Lcd_4bit_enuGoToXY>
		Lcd_4bit_enuDisplayString(&Lcd, "Choose Which Mode :");
    31fe:	68 eb       	ldi	r22, 0xB8	; 184
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	80 e9       	ldi	r24, 0x90	; 144
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 6d 14 	call	0x28da	; 0x28da <Lcd_4bit_enuDisplayString>

		Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	63 e0       	ldi	r22, 0x03	; 3
    320e:	80 e9       	ldi	r24, 0x90	; 144
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Lcd_4bit_enuGoToXY>
		Lcd_4bit_enuDisplayString(&Lcd, "1- Alram");
    3216:	6c ec       	ldi	r22, 0xCC	; 204
    3218:	70 e0       	ldi	r23, 0x00	; 0
    321a:	80 e9       	ldi	r24, 0x90	; 144
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	0e 94 6d 14 	call	0x28da	; 0x28da <Lcd_4bit_enuDisplayString>

		Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW4, LCD_COL1);
    3222:	41 e0       	ldi	r20, 0x01	; 1
    3224:	64 e0       	ldi	r22, 0x04	; 4
    3226:	80 e9       	ldi	r24, 0x90	; 144
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Lcd_4bit_enuGoToXY>
		Lcd_4bit_enuDisplayString(&Lcd, "2- Clock");
    322e:	65 ed       	ldi	r22, 0xD5	; 213
    3230:	70 e0       	ldi	r23, 0x00	; 0
    3232:	80 e9       	ldi	r24, 0x90	; 144
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 6d 14 	call	0x28da	; 0x28da <Lcd_4bit_enuDisplayString>
			////////////


		while(1){

			Keypad_enuRead(&Keypad, &Loc_u8KeypadResult);
    323a:	ce 01       	movw	r24, r28
    323c:	8c 96       	adiw	r24, 0x2c	; 44
    323e:	bc 01       	movw	r22, r24
    3240:	87 e9       	ldi	r24, 0x97	; 151
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <Keypad_enuRead>

			if(Loc_u8KeypadResult == '1'){
    3248:	8c a5       	ldd	r24, Y+44	; 0x2c
    324a:	81 33       	cpi	r24, 0x31	; 49
    324c:	09 f0       	breq	.+2      	; 0x3250 <main+0x86>
    324e:	0a c1       	rjmp	.+532    	; 0x3464 <main+0x29a>

				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    3250:	61 e0       	ldi	r22, 0x01	; 1
    3252:	80 e9       	ldi	r24, 0x90	; 144
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e8       	ldi	r25, 0x80	; 128
    325e:	a2 ec       	ldi	r26, 0xC2	; 194
    3260:	b3 e4       	ldi	r27, 0x43	; 67
    3262:	8e 83       	std	Y+6, r24	; 0x06
    3264:	9f 83       	std	Y+7, r25	; 0x07
    3266:	a8 87       	std	Y+8, r26	; 0x08
    3268:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	4a e7       	ldi	r20, 0x7A	; 122
    3270:	55 e4       	ldi	r21, 0x45	; 69
    3272:	6e 81       	ldd	r22, Y+6	; 0x06
    3274:	7f 81       	ldd	r23, Y+7	; 0x07
    3276:	88 85       	ldd	r24, Y+8	; 0x08
    3278:	99 85       	ldd	r25, Y+9	; 0x09
    327a:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	88 8f       	std	Y+24, r24	; 0x18
    3284:	99 8f       	std	Y+25, r25	; 0x19
    3286:	aa 8f       	std	Y+26, r26	; 0x1a
    3288:	bb 8f       	std	Y+27, r27	; 0x1b
	if (__tmp < 1.0)
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	40 e8       	ldi	r20, 0x80	; 128
    3290:	5f e3       	ldi	r21, 0x3F	; 63
    3292:	68 8d       	ldd	r22, Y+24	; 0x18
    3294:	79 8d       	ldd	r23, Y+25	; 0x19
    3296:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3298:	9b 8d       	ldd	r25, Y+27	; 0x1b
    329a:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    329e:	88 23       	and	r24, r24
    32a0:	2c f4       	brge	.+10     	; 0x32ac <main+0xe2>
		__ticks = 1;
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	9d 8f       	std	Y+29, r25	; 0x1d
    32a8:	8c 8f       	std	Y+28, r24	; 0x1c
    32aa:	3f c0       	rjmp	.+126    	; 0x332a <main+0x160>
	else if (__tmp > 65535)
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	3f ef       	ldi	r19, 0xFF	; 255
    32b0:	4f e7       	ldi	r20, 0x7F	; 127
    32b2:	57 e4       	ldi	r21, 0x47	; 71
    32b4:	68 8d       	ldd	r22, Y+24	; 0x18
    32b6:	79 8d       	ldd	r23, Y+25	; 0x19
    32b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32bc:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    32c0:	18 16       	cp	r1, r24
    32c2:	4c f5       	brge	.+82     	; 0x3316 <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e2       	ldi	r20, 0x20	; 32
    32ca:	51 e4       	ldi	r21, 0x41	; 65
    32cc:	6e 81       	ldd	r22, Y+6	; 0x06
    32ce:	7f 81       	ldd	r23, Y+7	; 0x07
    32d0:	88 85       	ldd	r24, Y+8	; 0x08
    32d2:	99 85       	ldd	r25, Y+9	; 0x09
    32d4:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	bc 01       	movw	r22, r24
    32de:	cd 01       	movw	r24, r26
    32e0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	9d 8f       	std	Y+29, r25	; 0x1d
    32ea:	8c 8f       	std	Y+28, r24	; 0x1c
    32ec:	0f c0       	rjmp	.+30     	; 0x330c <main+0x142>
    32ee:	80 e9       	ldi	r24, 0x90	; 144
    32f0:	91 e0       	ldi	r25, 0x01	; 1
    32f2:	9f 8f       	std	Y+31, r25	; 0x1f
    32f4:	8e 8f       	std	Y+30, r24	; 0x1e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32fa:	01 97       	sbiw	r24, 0x01	; 1
    32fc:	f1 f7       	brne	.-4      	; 0x32fa <main+0x130>
    32fe:	9f 8f       	std	Y+31, r25	; 0x1f
    3300:	8e 8f       	std	Y+30, r24	; 0x1e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3302:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3304:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	9d 8f       	std	Y+29, r25	; 0x1d
    330a:	8c 8f       	std	Y+28, r24	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    330c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    330e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3310:	89 2b       	or	r24, r25
    3312:	69 f7       	brne	.-38     	; 0x32ee <main+0x124>
    3314:	14 c0       	rjmp	.+40     	; 0x333e <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3316:	68 8d       	ldd	r22, Y+24	; 0x18
    3318:	79 8d       	ldd	r23, Y+25	; 0x19
    331a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    331c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    331e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	9d 8f       	std	Y+29, r25	; 0x1d
    3328:	8c 8f       	std	Y+28, r24	; 0x1c
    332a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    332c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    332e:	99 a3       	std	Y+33, r25	; 0x21
    3330:	88 a3       	std	Y+32, r24	; 0x20
    3332:	88 a1       	ldd	r24, Y+32	; 0x20
    3334:	99 a1       	ldd	r25, Y+33	; 0x21
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <main+0x16c>
    333a:	99 a3       	std	Y+33, r25	; 0x21
    333c:	88 a3       	std	Y+32, r24	; 0x20
				_delay_ms(KEYPAD_DELAY);



				Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2,LCD_COL1);
    333e:	41 e0       	ldi	r20, 0x01	; 1
    3340:	62 e0       	ldi	r22, 0x02	; 2
    3342:	80 e9       	ldi	r24, 0x90	; 144
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Lcd_4bit_enuGoToXY>
				Lcd_4bit_enuDisplayString(&Lcd, "Alarm: ");
    334a:	6e ed       	ldi	r22, 0xDE	; 222
    334c:	70 e0       	ldi	r23, 0x00	; 0
    334e:	80 e9       	ldi	r24, 0x90	; 144
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 6d 14 	call	0x28da	; 0x28da <Lcd_4bit_enuDisplayString>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	a0 ea       	ldi	r26, 0xA0	; 160
    335c:	b1 e4       	ldi	r27, 0x41	; 65
    335e:	8a 87       	std	Y+10, r24	; 0x0a
    3360:	9b 87       	std	Y+11, r25	; 0x0b
    3362:	ac 87       	std	Y+12, r26	; 0x0c
    3364:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	4a e7       	ldi	r20, 0x7A	; 122
    336c:	55 e4       	ldi	r21, 0x45	; 69
    336e:	6a 85       	ldd	r22, Y+10	; 0x0a
    3370:	7b 85       	ldd	r23, Y+11	; 0x0b
    3372:	8c 85       	ldd	r24, Y+12	; 0x0c
    3374:	9d 85       	ldd	r25, Y+13	; 0x0d
    3376:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	8e 87       	std	Y+14, r24	; 0x0e
    3380:	9f 87       	std	Y+15, r25	; 0x0f
    3382:	a8 8b       	std	Y+16, r26	; 0x10
    3384:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e8       	ldi	r20, 0x80	; 128
    338c:	5f e3       	ldi	r21, 0x3F	; 63
    338e:	6e 85       	ldd	r22, Y+14	; 0x0e
    3390:	7f 85       	ldd	r23, Y+15	; 0x0f
    3392:	88 89       	ldd	r24, Y+16	; 0x10
    3394:	99 89       	ldd	r25, Y+17	; 0x11
    3396:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    339a:	88 23       	and	r24, r24
    339c:	2c f4       	brge	.+10     	; 0x33a8 <main+0x1de>
		__ticks = 1;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	9b 8b       	std	Y+19, r25	; 0x13
    33a4:	8a 8b       	std	Y+18, r24	; 0x12
    33a6:	3f c0       	rjmp	.+126    	; 0x3426 <main+0x25c>
	else if (__tmp > 65535)
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	3f ef       	ldi	r19, 0xFF	; 255
    33ac:	4f e7       	ldi	r20, 0x7F	; 127
    33ae:	57 e4       	ldi	r21, 0x47	; 71
    33b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    33b2:	7f 85       	ldd	r23, Y+15	; 0x0f
    33b4:	88 89       	ldd	r24, Y+16	; 0x10
    33b6:	99 89       	ldd	r25, Y+17	; 0x11
    33b8:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    33bc:	18 16       	cp	r1, r24
    33be:	4c f5       	brge	.+82     	; 0x3412 <main+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e2       	ldi	r20, 0x20	; 32
    33c6:	51 e4       	ldi	r21, 0x41	; 65
    33c8:	6a 85       	ldd	r22, Y+10	; 0x0a
    33ca:	7b 85       	ldd	r23, Y+11	; 0x0b
    33cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    33d0:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	bc 01       	movw	r22, r24
    33da:	cd 01       	movw	r24, r26
    33dc:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	9b 8b       	std	Y+19, r25	; 0x13
    33e6:	8a 8b       	std	Y+18, r24	; 0x12
    33e8:	0f c0       	rjmp	.+30     	; 0x3408 <main+0x23e>
    33ea:	80 e9       	ldi	r24, 0x90	; 144
    33ec:	91 e0       	ldi	r25, 0x01	; 1
    33ee:	9d 8b       	std	Y+21, r25	; 0x15
    33f0:	8c 8b       	std	Y+20, r24	; 0x14
    33f2:	8c 89       	ldd	r24, Y+20	; 0x14
    33f4:	9d 89       	ldd	r25, Y+21	; 0x15
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	f1 f7       	brne	.-4      	; 0x33f6 <main+0x22c>
    33fa:	9d 8b       	std	Y+21, r25	; 0x15
    33fc:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33fe:	8a 89       	ldd	r24, Y+18	; 0x12
    3400:	9b 89       	ldd	r25, Y+19	; 0x13
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	9b 8b       	std	Y+19, r25	; 0x13
    3406:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3408:	8a 89       	ldd	r24, Y+18	; 0x12
    340a:	9b 89       	ldd	r25, Y+19	; 0x13
    340c:	89 2b       	or	r24, r25
    340e:	69 f7       	brne	.-38     	; 0x33ea <main+0x220>
    3410:	14 c0       	rjmp	.+40     	; 0x343a <main+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3412:	6e 85       	ldd	r22, Y+14	; 0x0e
    3414:	7f 85       	ldd	r23, Y+15	; 0x0f
    3416:	88 89       	ldd	r24, Y+16	; 0x10
    3418:	99 89       	ldd	r25, Y+17	; 0x11
    341a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	9b 8b       	std	Y+19, r25	; 0x13
    3424:	8a 8b       	std	Y+18, r24	; 0x12
    3426:	8a 89       	ldd	r24, Y+18	; 0x12
    3428:	9b 89       	ldd	r25, Y+19	; 0x13
    342a:	9f 8b       	std	Y+23, r25	; 0x17
    342c:	8e 8b       	std	Y+22, r24	; 0x16
    342e:	8e 89       	ldd	r24, Y+22	; 0x16
    3430:	9f 89       	ldd	r25, Y+23	; 0x17
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <main+0x268>
    3436:	9f 8b       	std	Y+23, r25	; 0x17
    3438:	8e 8b       	std	Y+22, r24	; 0x16

				_delay_ms(LCD_DISPLAY_DELAY);

				Application_GetKeypadAlarm();
    343a:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <Application_GetKeypadAlarm>

				Timer0_enuInit(&Timer0);
    343e:	87 ea       	ldi	r24, 0xA7	; 167
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	0e 94 94 04 	call	0x928	; 0x928 <Timer0_enuInit>
				Timer0_SetCallbackFunction(&Timer0,Alram_Isr);
    3446:	6e ed       	ldi	r22, 0xDE	; 222
    3448:	7a e1       	ldi	r23, 0x1A	; 26
    344a:	87 ea       	ldi	r24, 0xA7	; 167
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	0e 94 29 06 	call	0xc52	; 0xc52 <Timer0_SetCallbackFunction>
				Timer0_enuEnableInterrupt(&Timer0);
    3452:	87 ea       	ldi	r24, 0xA7	; 167
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	0e 94 64 05 	call	0xac8	; 0xac8 <Timer0_enuEnableInterrupt>
				Gie_enuEnableGlobalInterrupt();
    345a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <Gie_enuEnableGlobalInterrupt>
				Application_AlaramMode();
    345e:	0e 94 a7 1b 	call	0x374e	; 0x374e <Application_AlaramMode>
    3462:	eb ce       	rjmp	.-554    	; 0x323a <main+0x70>

			}

			else if(Loc_u8KeypadResult == '2'){
    3464:	8c a5       	ldd	r24, Y+44	; 0x2c
    3466:	82 33       	cpi	r24, 0x32	; 50
    3468:	09 f0       	breq	.+2      	; 0x346c <main+0x2a2>
    346a:	e7 ce       	rjmp	.-562    	; 0x323a <main+0x70>

								Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    346c:	61 e0       	ldi	r22, 0x01	; 1
    346e:	80 e9       	ldi	r24, 0x90	; 144
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	0e 94 99 12 	call	0x2532	; 0x2532 <Lcd_4bit_enuSendCommand>
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e8       	ldi	r25, 0x80	; 128
    347a:	a2 ec       	ldi	r26, 0xC2	; 194
    347c:	b3 e4       	ldi	r27, 0x43	; 67
    347e:	8a 83       	std	Y+2, r24	; 0x02
    3480:	9b 83       	std	Y+3, r25	; 0x03
    3482:	ac 83       	std	Y+4, r26	; 0x04
    3484:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	4a e7       	ldi	r20, 0x7A	; 122
    348c:	55 e4       	ldi	r21, 0x45	; 69
    348e:	6a 81       	ldd	r22, Y+2	; 0x02
    3490:	7b 81       	ldd	r23, Y+3	; 0x03
    3492:	8c 81       	ldd	r24, Y+4	; 0x04
    3494:	9d 81       	ldd	r25, Y+5	; 0x05
    3496:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	8a a3       	std	Y+34, r24	; 0x22
    34a0:	9b a3       	std	Y+35, r25	; 0x23
    34a2:	ac a3       	std	Y+36, r26	; 0x24
    34a4:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f e3       	ldi	r21, 0x3F	; 63
    34ae:	6a a1       	ldd	r22, Y+34	; 0x22
    34b0:	7b a1       	ldd	r23, Y+35	; 0x23
    34b2:	8c a1       	ldd	r24, Y+36	; 0x24
    34b4:	9d a1       	ldd	r25, Y+37	; 0x25
    34b6:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    34ba:	88 23       	and	r24, r24
    34bc:	2c f4       	brge	.+10     	; 0x34c8 <main+0x2fe>
		__ticks = 1;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	9f a3       	std	Y+39, r25	; 0x27
    34c4:	8e a3       	std	Y+38, r24	; 0x26
    34c6:	3f c0       	rjmp	.+126    	; 0x3546 <main+0x37c>
	else if (__tmp > 65535)
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	3f ef       	ldi	r19, 0xFF	; 255
    34cc:	4f e7       	ldi	r20, 0x7F	; 127
    34ce:	57 e4       	ldi	r21, 0x47	; 71
    34d0:	6a a1       	ldd	r22, Y+34	; 0x22
    34d2:	7b a1       	ldd	r23, Y+35	; 0x23
    34d4:	8c a1       	ldd	r24, Y+36	; 0x24
    34d6:	9d a1       	ldd	r25, Y+37	; 0x25
    34d8:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    34dc:	18 16       	cp	r1, r24
    34de:	4c f5       	brge	.+82     	; 0x3532 <main+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e2       	ldi	r20, 0x20	; 32
    34e6:	51 e4       	ldi	r21, 0x41	; 65
    34e8:	6a 81       	ldd	r22, Y+2	; 0x02
    34ea:	7b 81       	ldd	r23, Y+3	; 0x03
    34ec:	8c 81       	ldd	r24, Y+4	; 0x04
    34ee:	9d 81       	ldd	r25, Y+5	; 0x05
    34f0:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	bc 01       	movw	r22, r24
    34fa:	cd 01       	movw	r24, r26
    34fc:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	9f a3       	std	Y+39, r25	; 0x27
    3506:	8e a3       	std	Y+38, r24	; 0x26
    3508:	0f c0       	rjmp	.+30     	; 0x3528 <main+0x35e>
    350a:	80 e9       	ldi	r24, 0x90	; 144
    350c:	91 e0       	ldi	r25, 0x01	; 1
    350e:	99 a7       	std	Y+41, r25	; 0x29
    3510:	88 a7       	std	Y+40, r24	; 0x28
    3512:	88 a5       	ldd	r24, Y+40	; 0x28
    3514:	99 a5       	ldd	r25, Y+41	; 0x29
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <main+0x34c>
    351a:	99 a7       	std	Y+41, r25	; 0x29
    351c:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351e:	8e a1       	ldd	r24, Y+38	; 0x26
    3520:	9f a1       	ldd	r25, Y+39	; 0x27
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	9f a3       	std	Y+39, r25	; 0x27
    3526:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3528:	8e a1       	ldd	r24, Y+38	; 0x26
    352a:	9f a1       	ldd	r25, Y+39	; 0x27
    352c:	89 2b       	or	r24, r25
    352e:	69 f7       	brne	.-38     	; 0x350a <main+0x340>
    3530:	14 c0       	rjmp	.+40     	; 0x355a <main+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3532:	6a a1       	ldd	r22, Y+34	; 0x22
    3534:	7b a1       	ldd	r23, Y+35	; 0x23
    3536:	8c a1       	ldd	r24, Y+36	; 0x24
    3538:	9d a1       	ldd	r25, Y+37	; 0x25
    353a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	9f a3       	std	Y+39, r25	; 0x27
    3544:	8e a3       	std	Y+38, r24	; 0x26
    3546:	8e a1       	ldd	r24, Y+38	; 0x26
    3548:	9f a1       	ldd	r25, Y+39	; 0x27
    354a:	9b a7       	std	Y+43, r25	; 0x2b
    354c:	8a a7       	std	Y+42, r24	; 0x2a
    354e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3550:	9b a5       	ldd	r25, Y+43	; 0x2b
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <main+0x388>
    3556:	9b a7       	std	Y+43, r25	; 0x2b
    3558:	8a a7       	std	Y+42, r24	; 0x2a
								_delay_ms(KEYPAD_DELAY);

								Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "Clock  ", LCD_ROW2, LCD_COL1);
    355a:	21 e0       	ldi	r18, 0x01	; 1
    355c:	42 e0       	ldi	r20, 0x02	; 2
    355e:	66 ee       	ldi	r22, 0xE6	; 230
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	80 e9       	ldi	r24, 0x90	; 144
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 59 13 	call	0x26b2	; 0x26b2 <Lcd_4bit_enuDisplayStringWithPosition>
								Application_GetKeypadHour();
    356a:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <Application_GetKeypadHour>
								Lcd_4bit_enuDisplayStringWithPosition(&Lcd, ":", LCD_ROW2, LCD_COL10);
    356e:	2a e0       	ldi	r18, 0x0A	; 10
    3570:	42 e0       	ldi	r20, 0x02	; 2
    3572:	6e ee       	ldi	r22, 0xEE	; 238
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	80 e9       	ldi	r24, 0x90	; 144
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	0e 94 59 13 	call	0x26b2	; 0x26b2 <Lcd_4bit_enuDisplayStringWithPosition>
								Application_GetKeypadMin();
    357e:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <Application_GetKeypadMin>
								Lcd_4bit_enuDisplayStringWithPosition(&Lcd, ":", LCD_ROW2, LCD_COL13);
    3582:	2d e0       	ldi	r18, 0x0D	; 13
    3584:	42 e0       	ldi	r20, 0x02	; 2
    3586:	6e ee       	ldi	r22, 0xEE	; 238
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	80 e9       	ldi	r24, 0x90	; 144
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <Lcd_4bit_enuDisplayStringWithPosition>
								Application_GetKeypadSecond();
    3592:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <Application_GetKeypadSecond>

								Timer0_enuInit(&Timer0);
    3596:	87 ea       	ldi	r24, 0xA7	; 167
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 94 04 	call	0x928	; 0x928 <Timer0_enuInit>
								Timer0_SetCallbackFunction(&Timer0,Clock_Isr);
    359e:	65 e0       	ldi	r22, 0x05	; 5
    35a0:	7b e1       	ldi	r23, 0x1B	; 27
    35a2:	87 ea       	ldi	r24, 0xA7	; 167
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0e 94 29 06 	call	0xc52	; 0xc52 <Timer0_SetCallbackFunction>
								Timer0_enuEnableInterrupt(&Timer0);
    35aa:	87 ea       	ldi	r24, 0xA7	; 167
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 64 05 	call	0xac8	; 0xac8 <Timer0_enuEnableInterrupt>
								Gie_enuEnableGlobalInterrupt();
    35b2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <Gie_enuEnableGlobalInterrupt>

								Application_ClockMode();
    35b6:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <Application_ClockMode>
									while(1){

									}
    35ba:	ff cf       	rjmp	.-2      	; 0x35ba <main+0x3f0>

000035bc <Alram_Isr>:





void Alram_Isr(void){
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62

	static volatile u8 Loc_u8Counter = ZERO_VALUE;



	if(Loc_u8Counter ==  61){
    35c4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Loc_u8Counter.2126>
    35c8:	8d 33       	cpi	r24, 0x3D	; 61
    35ca:	b1 f4       	brne	.+44     	; 0x35f8 <Alram_Isr+0x3c>
		Global_u32GlobalAramCounter --;
    35cc:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Global_u32GlobalAramCounter>
    35d0:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <Global_u32GlobalAramCounter+0x1>
    35d4:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <Global_u32GlobalAramCounter+0x2>
    35d8:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <Global_u32GlobalAramCounter+0x3>
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	a1 09       	sbc	r26, r1
    35e0:	b1 09       	sbc	r27, r1
    35e2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Global_u32GlobalAramCounter>
    35e6:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <Global_u32GlobalAramCounter+0x1>
    35ea:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <Global_u32GlobalAramCounter+0x2>
    35ee:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <Global_u32GlobalAramCounter+0x3>

		Loc_u8Counter = ZERO_VALUE;
    35f2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <Loc_u8Counter.2126>
	}

	else{
		Loc_u8Counter++;
	}
}
    35f6:	05 c0       	rjmp	.+10     	; 0x3602 <Alram_Isr+0x46>

		Loc_u8Counter = ZERO_VALUE;
	}

	else{
		Loc_u8Counter++;
    35f8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Loc_u8Counter.2126>
    35fc:	8f 5f       	subi	r24, 0xFF	; 255
    35fe:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Loc_u8Counter.2126>
	}
}
    3602:	00 00       	nop
    3604:	df 91       	pop	r29
    3606:	cf 91       	pop	r28
    3608:	08 95       	ret

0000360a <Clock_Isr>:


void Clock_Isr(void){
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	cd b7       	in	r28, 0x3d	; 61
    3610:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 Loc_u8Counter = ZERO_VALUE;


	if(Loc_u8Counter ==  61){
    3612:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Loc_u8Counter.2130>
    3616:	8d 33       	cpi	r24, 0x3D	; 61
    3618:	09 f0       	breq	.+2      	; 0x361c <Clock_Isr+0x12>
    361a:	90 c0       	rjmp	.+288    	; 0x373c <Clock_Isr+0x132>
		Global_u32GlobalSec ++;
    361c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Global_u32GlobalSec>
    3620:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Global_u32GlobalSec+0x1>
    3624:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <Global_u32GlobalSec+0x2>
    3628:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <Global_u32GlobalSec+0x3>
    362c:	01 96       	adiw	r24, 0x01	; 1
    362e:	a1 1d       	adc	r26, r1
    3630:	b1 1d       	adc	r27, r1
    3632:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Global_u32GlobalSec>
    3636:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <Global_u32GlobalSec+0x1>
    363a:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <Global_u32GlobalSec+0x2>
    363e:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <Global_u32GlobalSec+0x3>
		if(Global_u32GlobalSec == 60){
    3642:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Global_u32GlobalSec>
    3646:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Global_u32GlobalSec+0x1>
    364a:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <Global_u32GlobalSec+0x2>
    364e:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <Global_u32GlobalSec+0x3>
    3652:	cc 97       	sbiw	r24, 0x3c	; 60
    3654:	a1 05       	cpc	r26, r1
    3656:	b1 05       	cpc	r27, r1
    3658:	d9 f4       	brne	.+54     	; 0x3690 <Clock_Isr+0x86>
			Global_u32GlobalSec =0;
    365a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Global_u32GlobalSec>
    365e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <Global_u32GlobalSec+0x1>
    3662:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Global_u32GlobalSec+0x2>
    3666:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <Global_u32GlobalSec+0x3>
			Global_u32GlobalMin++;
    366a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Global_u32GlobalMin>
    366e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Global_u32GlobalMin+0x1>
    3672:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <Global_u32GlobalMin+0x2>
    3676:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <Global_u32GlobalMin+0x3>
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	a1 1d       	adc	r26, r1
    367e:	b1 1d       	adc	r27, r1
    3680:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Global_u32GlobalMin>
    3684:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <Global_u32GlobalMin+0x1>
    3688:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <Global_u32GlobalMin+0x2>
    368c:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <Global_u32GlobalMin+0x3>
		}
		if(Global_u32GlobalMin == 60){
    3690:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Global_u32GlobalMin>
    3694:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Global_u32GlobalMin+0x1>
    3698:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <Global_u32GlobalMin+0x2>
    369c:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <Global_u32GlobalMin+0x3>
    36a0:	cc 97       	sbiw	r24, 0x3c	; 60
    36a2:	a1 05       	cpc	r26, r1
    36a4:	b1 05       	cpc	r27, r1
    36a6:	19 f5       	brne	.+70     	; 0x36ee <Clock_Isr+0xe4>
			Global_u32GlobalSec = 0;
    36a8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Global_u32GlobalSec>
    36ac:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <Global_u32GlobalSec+0x1>
    36b0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Global_u32GlobalSec+0x2>
    36b4:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <Global_u32GlobalSec+0x3>
			Global_u32GlobalMin = 0;
    36b8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Global_u32GlobalMin>
    36bc:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <Global_u32GlobalMin+0x1>
    36c0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Global_u32GlobalMin+0x2>
    36c4:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <Global_u32GlobalMin+0x3>
			Global_u32GlobalHour++;
    36c8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Global_u32GlobalHour>
    36cc:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Global_u32GlobalHour+0x1>
    36d0:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Global_u32GlobalHour+0x2>
    36d4:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Global_u32GlobalHour+0x3>
    36d8:	01 96       	adiw	r24, 0x01	; 1
    36da:	a1 1d       	adc	r26, r1
    36dc:	b1 1d       	adc	r27, r1
    36de:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <Global_u32GlobalHour>
    36e2:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <Global_u32GlobalHour+0x1>
    36e6:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <Global_u32GlobalHour+0x2>
    36ea:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <Global_u32GlobalHour+0x3>
		}
	if(Global_u32GlobalHour == 24){
    36ee:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Global_u32GlobalHour>
    36f2:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Global_u32GlobalHour+0x1>
    36f6:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Global_u32GlobalHour+0x2>
    36fa:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Global_u32GlobalHour+0x3>
    36fe:	48 97       	sbiw	r24, 0x18	; 24
    3700:	a1 05       	cpc	r26, r1
    3702:	b1 05       	cpc	r27, r1
    3704:	c1 f4       	brne	.+48     	; 0x3736 <Clock_Isr+0x12c>
		Global_u32GlobalSec = ZERO_VALUE;
    3706:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Global_u32GlobalSec>
    370a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <Global_u32GlobalSec+0x1>
    370e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Global_u32GlobalSec+0x2>
    3712:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <Global_u32GlobalSec+0x3>
		Global_u32GlobalMin = ZERO_VALUE;
    3716:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Global_u32GlobalMin>
    371a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <Global_u32GlobalMin+0x1>
    371e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Global_u32GlobalMin+0x2>
    3722:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <Global_u32GlobalMin+0x3>
		Global_u32GlobalHour= ZERO_VALUE;
    3726:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <Global_u32GlobalHour>
    372a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <Global_u32GlobalHour+0x1>
    372e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <Global_u32GlobalHour+0x2>
    3732:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Global_u32GlobalHour+0x3>
	}

	Loc_u8Counter = ZERO_VALUE;
    3736:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <Loc_u8Counter.2130>
	}

	else{
		Loc_u8Counter++;
	}
}
    373a:	05 c0       	rjmp	.+10     	; 0x3746 <Clock_Isr+0x13c>

	Loc_u8Counter = ZERO_VALUE;
	}

	else{
		Loc_u8Counter++;
    373c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <Loc_u8Counter.2130>
    3740:	8f 5f       	subi	r24, 0xFF	; 255
    3742:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <Loc_u8Counter.2130>
	}
}
    3746:	00 00       	nop
    3748:	df 91       	pop	r29
    374a:	cf 91       	pop	r28
    374c:	08 95       	ret

0000374e <Application_AlaramMode>:

void Application_AlaramMode(void){
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    3756:	2e 97       	sbiw	r28, 0x0e	; 14
    3758:	0f b6       	in	r0, 0x3f	; 63
    375a:	f8 94       	cli
    375c:	de bf       	out	0x3e, r29	; 62
    375e:	0f be       	out	0x3f, r0	; 63
    3760:	cd bf       	out	0x3d, r28	; 61

	while(1){
		Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2,LCD_COL8);
    3762:	48 e0       	ldi	r20, 0x08	; 8
    3764:	62 e0       	ldi	r22, 0x02	; 2
    3766:	80 e9       	ldi	r24, 0x90	; 144
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Lcd_4bit_enuGoToXY>
		Lcd_4bit_enuDisplayString(&Lcd,"    ");
    376e:	60 ef       	ldi	r22, 0xF0	; 240
    3770:	70 e0       	ldi	r23, 0x00	; 0
    3772:	80 e9       	ldi	r24, 0x90	; 144
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	0e 94 6d 14 	call	0x28da	; 0x28da <Lcd_4bit_enuDisplayString>

		if(Global_u32GlobalAramCounter != 0){
    377a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Global_u32GlobalAramCounter>
    377e:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <Global_u32GlobalAramCounter+0x1>
    3782:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <Global_u32GlobalAramCounter+0x2>
    3786:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <Global_u32GlobalAramCounter+0x3>
    378a:	89 2b       	or	r24, r25
    378c:	8a 2b       	or	r24, r26
    378e:	8b 2b       	or	r24, r27
    3790:	09 f4       	brne	.+2      	; 0x3794 <Application_AlaramMode+0x46>
    3792:	87 c0       	rjmp	.+270    	; 0x38a2 <Application_AlaramMode+0x154>
			Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2,LCD_COL8);
    3794:	48 e0       	ldi	r20, 0x08	; 8
    3796:	62 e0       	ldi	r22, 0x02	; 2
    3798:	80 e9       	ldi	r24, 0x90	; 144
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <Lcd_4bit_enuGoToXY>
			Lcd_4bit_enuDisplayNumber(&Lcd, Global_u32GlobalAramCounter);
    37a0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Global_u32GlobalAramCounter>
    37a4:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <Global_u32GlobalAramCounter+0x1>
    37a8:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <Global_u32GlobalAramCounter+0x2>
    37ac:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <Global_u32GlobalAramCounter+0x3>
    37b0:	ac 01       	movw	r20, r24
    37b2:	bd 01       	movw	r22, r26
    37b4:	80 e9       	ldi	r24, 0x90	; 144
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 ac 14 	call	0x2958	; 0x2958 <Lcd_4bit_enuDisplayNumber>
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	a8 ec       	ldi	r26, 0xC8	; 200
    37c2:	b2 e4       	ldi	r27, 0x42	; 66
    37c4:	89 83       	std	Y+1, r24	; 0x01
    37c6:	9a 83       	std	Y+2, r25	; 0x02
    37c8:	ab 83       	std	Y+3, r26	; 0x03
    37ca:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	4a e7       	ldi	r20, 0x7A	; 122
    37d2:	55 e4       	ldi	r21, 0x45	; 69
    37d4:	69 81       	ldd	r22, Y+1	; 0x01
    37d6:	7a 81       	ldd	r23, Y+2	; 0x02
    37d8:	8b 81       	ldd	r24, Y+3	; 0x03
    37da:	9c 81       	ldd	r25, Y+4	; 0x04
    37dc:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	8d 83       	std	Y+5, r24	; 0x05
    37e6:	9e 83       	std	Y+6, r25	; 0x06
    37e8:	af 83       	std	Y+7, r26	; 0x07
    37ea:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	40 e8       	ldi	r20, 0x80	; 128
    37f2:	5f e3       	ldi	r21, 0x3F	; 63
    37f4:	6d 81       	ldd	r22, Y+5	; 0x05
    37f6:	7e 81       	ldd	r23, Y+6	; 0x06
    37f8:	8f 81       	ldd	r24, Y+7	; 0x07
    37fa:	98 85       	ldd	r25, Y+8	; 0x08
    37fc:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    3800:	88 23       	and	r24, r24
    3802:	2c f4       	brge	.+10     	; 0x380e <Application_AlaramMode+0xc0>
		__ticks = 1;
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	9a 87       	std	Y+10, r25	; 0x0a
    380a:	89 87       	std	Y+9, r24	; 0x09
    380c:	3f c0       	rjmp	.+126    	; 0x388c <Application_AlaramMode+0x13e>
	else if (__tmp > 65535)
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	3f ef       	ldi	r19, 0xFF	; 255
    3812:	4f e7       	ldi	r20, 0x7F	; 127
    3814:	57 e4       	ldi	r21, 0x47	; 71
    3816:	6d 81       	ldd	r22, Y+5	; 0x05
    3818:	7e 81       	ldd	r23, Y+6	; 0x06
    381a:	8f 81       	ldd	r24, Y+7	; 0x07
    381c:	98 85       	ldd	r25, Y+8	; 0x08
    381e:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    3822:	18 16       	cp	r1, r24
    3824:	4c f5       	brge	.+82     	; 0x3878 <Application_AlaramMode+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	40 e2       	ldi	r20, 0x20	; 32
    382c:	51 e4       	ldi	r21, 0x41	; 65
    382e:	69 81       	ldd	r22, Y+1	; 0x01
    3830:	7a 81       	ldd	r23, Y+2	; 0x02
    3832:	8b 81       	ldd	r24, Y+3	; 0x03
    3834:	9c 81       	ldd	r25, Y+4	; 0x04
    3836:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	bc 01       	movw	r22, r24
    3840:	cd 01       	movw	r24, r26
    3842:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	9a 87       	std	Y+10, r25	; 0x0a
    384c:	89 87       	std	Y+9, r24	; 0x09
    384e:	0f c0       	rjmp	.+30     	; 0x386e <Application_AlaramMode+0x120>
    3850:	80 e9       	ldi	r24, 0x90	; 144
    3852:	91 e0       	ldi	r25, 0x01	; 1
    3854:	9c 87       	std	Y+12, r25	; 0x0c
    3856:	8b 87       	std	Y+11, r24	; 0x0b
    3858:	8b 85       	ldd	r24, Y+11	; 0x0b
    385a:	9c 85       	ldd	r25, Y+12	; 0x0c
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	f1 f7       	brne	.-4      	; 0x385c <Application_AlaramMode+0x10e>
    3860:	9c 87       	std	Y+12, r25	; 0x0c
    3862:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3864:	89 85       	ldd	r24, Y+9	; 0x09
    3866:	9a 85       	ldd	r25, Y+10	; 0x0a
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	9a 87       	std	Y+10, r25	; 0x0a
    386c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    386e:	89 85       	ldd	r24, Y+9	; 0x09
    3870:	9a 85       	ldd	r25, Y+10	; 0x0a
    3872:	89 2b       	or	r24, r25
    3874:	69 f7       	brne	.-38     	; 0x3850 <Application_AlaramMode+0x102>
    3876:	26 c0       	rjmp	.+76     	; 0x38c4 <Application_AlaramMode+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3878:	6d 81       	ldd	r22, Y+5	; 0x05
    387a:	7e 81       	ldd	r23, Y+6	; 0x06
    387c:	8f 81       	ldd	r24, Y+7	; 0x07
    387e:	98 85       	ldd	r25, Y+8	; 0x08
    3880:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	9a 87       	std	Y+10, r25	; 0x0a
    388a:	89 87       	std	Y+9, r24	; 0x09
    388c:	89 85       	ldd	r24, Y+9	; 0x09
    388e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3890:	9e 87       	std	Y+14, r25	; 0x0e
    3892:	8d 87       	std	Y+13, r24	; 0x0d
    3894:	8d 85       	ldd	r24, Y+13	; 0x0d
    3896:	9e 85       	ldd	r25, Y+14	; 0x0e
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	f1 f7       	brne	.-4      	; 0x3898 <Application_AlaramMode+0x14a>
    389c:	9e 87       	std	Y+14, r25	; 0x0e
    389e:	8d 87       	std	Y+13, r24	; 0x0d
    38a0:	60 cf       	rjmp	.-320    	; 0x3762 <Application_AlaramMode+0x14>

		_delay_ms(100);
		}
		else {
			Dio_enuWriteChannel(DIO_PINC6_CHANNEL22,DIO_HIGH);
    38a2:	61 e0       	ldi	r22, 0x01	; 1
    38a4:	86 e1       	ldi	r24, 0x16	; 22
    38a6:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <Dio_enuWriteChannel>
			Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "Buzzer is On", LCD_ROW2, LCD_COL8);
    38aa:	28 e0       	ldi	r18, 0x08	; 8
    38ac:	42 e0       	ldi	r20, 0x02	; 2
    38ae:	65 ef       	ldi	r22, 0xF5	; 245
    38b0:	70 e0       	ldi	r23, 0x00	; 0
    38b2:	80 e9       	ldi	r24, 0x90	; 144
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 59 13 	call	0x26b2	; 0x26b2 <Lcd_4bit_enuDisplayStringWithPosition>

			Timer0_enuDisableInterrupt(&Timer0);
    38ba:	87 ea       	ldi	r24, 0xA7	; 167
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	0e 94 95 05 	call	0xb2a	; 0xb2a <Timer0_enuDisableInterrupt>
			while(1);
    38c2:	ff cf       	rjmp	.-2      	; 0x38c2 <Application_AlaramMode+0x174>
		}

	}
    38c4:	4e cf       	rjmp	.-356    	; 0x3762 <Application_AlaramMode+0x14>

000038c6 <Application_ClockMode>:
//								min 11,12
//								sec 14,15



void Application_ClockMode(void){
    38c6:	0f 93       	push	r16
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	2e 97       	sbiw	r28, 0x0e	; 14
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
	while(1){


		if(Global_u32GlobalHour<=9){
    38dc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Global_u32GlobalHour>
    38e0:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Global_u32GlobalHour+0x1>
    38e4:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Global_u32GlobalHour+0x2>
    38e8:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Global_u32GlobalHour+0x3>
    38ec:	0a 97       	sbiw	r24, 0x0a	; 10
    38ee:	a1 05       	cpc	r26, r1
    38f0:	b1 05       	cpc	r27, r1
    38f2:	c0 f4       	brcc	.+48     	; 0x3924 <Application_ClockMode+0x5e>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,'0', LCD_ROW2, LCD_COL8);
    38f4:	28 e0       	ldi	r18, 0x08	; 8
    38f6:	42 e0       	ldi	r20, 0x02	; 2
    38f8:	60 e3       	ldi	r22, 0x30	; 48
    38fa:	80 e9       	ldi	r24, 0x90	; 144
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	0e 94 12 13 	call	0x2624	; 0x2624 <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Global_u32GlobalHour,LCD_ROW2,LCD_COL9);
    3902:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Global_u32GlobalHour>
    3906:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Global_u32GlobalHour+0x1>
    390a:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Global_u32GlobalHour+0x2>
    390e:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Global_u32GlobalHour+0x3>
    3912:	09 e0       	ldi	r16, 0x09	; 9
    3914:	22 e0       	ldi	r18, 0x02	; 2
    3916:	ac 01       	movw	r20, r24
    3918:	bd 01       	movw	r22, r26
    391a:	80 e9       	ldi	r24, 0x90	; 144
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Lcd_4bit_enuDisplayNumberWithPosition>
    3922:	10 c0       	rjmp	.+32     	; 0x3944 <Application_ClockMode+0x7e>
		}
		else{
			Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Global_u32GlobalHour,LCD_ROW2,LCD_COL8);
    3924:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <Global_u32GlobalHour>
    3928:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <Global_u32GlobalHour+0x1>
    392c:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <Global_u32GlobalHour+0x2>
    3930:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <Global_u32GlobalHour+0x3>
    3934:	08 e0       	ldi	r16, 0x08	; 8
    3936:	22 e0       	ldi	r18, 0x02	; 2
    3938:	ac 01       	movw	r20, r24
    393a:	bd 01       	movw	r22, r26
    393c:	80 e9       	ldi	r24, 0x90	; 144
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Lcd_4bit_enuDisplayNumberWithPosition>
		}

		if(Global_u32GlobalMin<=9){
    3944:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Global_u32GlobalMin>
    3948:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Global_u32GlobalMin+0x1>
    394c:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <Global_u32GlobalMin+0x2>
    3950:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <Global_u32GlobalMin+0x3>
    3954:	0a 97       	sbiw	r24, 0x0a	; 10
    3956:	a1 05       	cpc	r26, r1
    3958:	b1 05       	cpc	r27, r1
    395a:	c0 f4       	brcc	.+48     	; 0x398c <Application_ClockMode+0xc6>
					Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,'0', LCD_ROW2, LCD_COL11);
    395c:	2b e0       	ldi	r18, 0x0B	; 11
    395e:	42 e0       	ldi	r20, 0x02	; 2
    3960:	60 e3       	ldi	r22, 0x30	; 48
    3962:	80 e9       	ldi	r24, 0x90	; 144
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0e 94 12 13 	call	0x2624	; 0x2624 <Lcd_4bit_enuDisplayCharacterWithPosition>
					Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Global_u32GlobalMin,LCD_ROW2,LCD_COL12);
    396a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Global_u32GlobalMin>
    396e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Global_u32GlobalMin+0x1>
    3972:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <Global_u32GlobalMin+0x2>
    3976:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <Global_u32GlobalMin+0x3>
    397a:	0c e0       	ldi	r16, 0x0C	; 12
    397c:	22 e0       	ldi	r18, 0x02	; 2
    397e:	ac 01       	movw	r20, r24
    3980:	bd 01       	movw	r22, r26
    3982:	80 e9       	ldi	r24, 0x90	; 144
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Lcd_4bit_enuDisplayNumberWithPosition>
    398a:	10 c0       	rjmp	.+32     	; 0x39ac <Application_ClockMode+0xe6>
				}
				else{
					Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Global_u32GlobalMin,LCD_ROW2,LCD_COL11);
    398c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Global_u32GlobalMin>
    3990:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Global_u32GlobalMin+0x1>
    3994:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <Global_u32GlobalMin+0x2>
    3998:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <Global_u32GlobalMin+0x3>
    399c:	0b e0       	ldi	r16, 0x0B	; 11
    399e:	22 e0       	ldi	r18, 0x02	; 2
    39a0:	ac 01       	movw	r20, r24
    39a2:	bd 01       	movw	r22, r26
    39a4:	80 e9       	ldi	r24, 0x90	; 144
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Lcd_4bit_enuDisplayNumberWithPosition>
				}

		if(Global_u32GlobalSec<=9){
    39ac:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Global_u32GlobalSec>
    39b0:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Global_u32GlobalSec+0x1>
    39b4:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <Global_u32GlobalSec+0x2>
    39b8:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <Global_u32GlobalSec+0x3>
    39bc:	0a 97       	sbiw	r24, 0x0a	; 10
    39be:	a1 05       	cpc	r26, r1
    39c0:	b1 05       	cpc	r27, r1
    39c2:	c0 f4       	brcc	.+48     	; 0x39f4 <Application_ClockMode+0x12e>
					Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,'0', LCD_ROW2, LCD_COL14);
    39c4:	2e e0       	ldi	r18, 0x0E	; 14
    39c6:	42 e0       	ldi	r20, 0x02	; 2
    39c8:	60 e3       	ldi	r22, 0x30	; 48
    39ca:	80 e9       	ldi	r24, 0x90	; 144
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	0e 94 12 13 	call	0x2624	; 0x2624 <Lcd_4bit_enuDisplayCharacterWithPosition>
					Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Global_u32GlobalSec,LCD_ROW2,LCD_COL15);
    39d2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Global_u32GlobalSec>
    39d6:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Global_u32GlobalSec+0x1>
    39da:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <Global_u32GlobalSec+0x2>
    39de:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <Global_u32GlobalSec+0x3>
    39e2:	0f e0       	ldi	r16, 0x0F	; 15
    39e4:	22 e0       	ldi	r18, 0x02	; 2
    39e6:	ac 01       	movw	r20, r24
    39e8:	bd 01       	movw	r22, r26
    39ea:	80 e9       	ldi	r24, 0x90	; 144
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Lcd_4bit_enuDisplayNumberWithPosition>
    39f2:	10 c0       	rjmp	.+32     	; 0x3a14 <Application_ClockMode+0x14e>
				}
				else{
					Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Global_u32GlobalSec,LCD_ROW2,LCD_COL14);
    39f4:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Global_u32GlobalSec>
    39f8:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Global_u32GlobalSec+0x1>
    39fc:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <Global_u32GlobalSec+0x2>
    3a00:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <Global_u32GlobalSec+0x3>
    3a04:	0e e0       	ldi	r16, 0x0E	; 14
    3a06:	22 e0       	ldi	r18, 0x02	; 2
    3a08:	ac 01       	movw	r20, r24
    3a0a:	bd 01       	movw	r22, r26
    3a0c:	80 e9       	ldi	r24, 0x90	; 144
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Lcd_4bit_enuDisplayNumberWithPosition>
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	a0 ea       	ldi	r26, 0xA0	; 160
    3a1a:	b1 e4       	ldi	r27, 0x41	; 65
    3a1c:	89 83       	std	Y+1, r24	; 0x01
    3a1e:	9a 83       	std	Y+2, r25	; 0x02
    3a20:	ab 83       	std	Y+3, r26	; 0x03
    3a22:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	4a e7       	ldi	r20, 0x7A	; 122
    3a2a:	55 e4       	ldi	r21, 0x45	; 69
    3a2c:	69 81       	ldd	r22, Y+1	; 0x01
    3a2e:	7a 81       	ldd	r23, Y+2	; 0x02
    3a30:	8b 81       	ldd	r24, Y+3	; 0x03
    3a32:	9c 81       	ldd	r25, Y+4	; 0x04
    3a34:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	8d 83       	std	Y+5, r24	; 0x05
    3a3e:	9e 83       	std	Y+6, r25	; 0x06
    3a40:	af 83       	std	Y+7, r26	; 0x07
    3a42:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	40 e8       	ldi	r20, 0x80	; 128
    3a4a:	5f e3       	ldi	r21, 0x3F	; 63
    3a4c:	6d 81       	ldd	r22, Y+5	; 0x05
    3a4e:	7e 81       	ldd	r23, Y+6	; 0x06
    3a50:	8f 81       	ldd	r24, Y+7	; 0x07
    3a52:	98 85       	ldd	r25, Y+8	; 0x08
    3a54:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    3a58:	88 23       	and	r24, r24
    3a5a:	2c f4       	brge	.+10     	; 0x3a66 <Application_ClockMode+0x1a0>
		__ticks = 1;
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	9a 87       	std	Y+10, r25	; 0x0a
    3a62:	89 87       	std	Y+9, r24	; 0x09
    3a64:	3f c0       	rjmp	.+126    	; 0x3ae4 <Application_ClockMode+0x21e>
	else if (__tmp > 65535)
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	3f ef       	ldi	r19, 0xFF	; 255
    3a6a:	4f e7       	ldi	r20, 0x7F	; 127
    3a6c:	57 e4       	ldi	r21, 0x47	; 71
    3a6e:	6d 81       	ldd	r22, Y+5	; 0x05
    3a70:	7e 81       	ldd	r23, Y+6	; 0x06
    3a72:	8f 81       	ldd	r24, Y+7	; 0x07
    3a74:	98 85       	ldd	r25, Y+8	; 0x08
    3a76:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    3a7a:	18 16       	cp	r1, r24
    3a7c:	4c f5       	brge	.+82     	; 0x3ad0 <Application_ClockMode+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	40 e2       	ldi	r20, 0x20	; 32
    3a84:	51 e4       	ldi	r21, 0x41	; 65
    3a86:	69 81       	ldd	r22, Y+1	; 0x01
    3a88:	7a 81       	ldd	r23, Y+2	; 0x02
    3a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8e:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	bc 01       	movw	r22, r24
    3a98:	cd 01       	movw	r24, r26
    3a9a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	9a 87       	std	Y+10, r25	; 0x0a
    3aa4:	89 87       	std	Y+9, r24	; 0x09
    3aa6:	0f c0       	rjmp	.+30     	; 0x3ac6 <Application_ClockMode+0x200>
    3aa8:	80 e9       	ldi	r24, 0x90	; 144
    3aaa:	91 e0       	ldi	r25, 0x01	; 1
    3aac:	9c 87       	std	Y+12, r25	; 0x0c
    3aae:	8b 87       	std	Y+11, r24	; 0x0b
    3ab0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ab2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	f1 f7       	brne	.-4      	; 0x3ab4 <Application_ClockMode+0x1ee>
    3ab8:	9c 87       	std	Y+12, r25	; 0x0c
    3aba:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abc:	89 85       	ldd	r24, Y+9	; 0x09
    3abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	9a 87       	std	Y+10, r25	; 0x0a
    3ac4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac6:	89 85       	ldd	r24, Y+9	; 0x09
    3ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aca:	89 2b       	or	r24, r25
    3acc:	69 f7       	brne	.-38     	; 0x3aa8 <Application_ClockMode+0x1e2>
    3ace:	14 c0       	rjmp	.+40     	; 0x3af8 <Application_ClockMode+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad0:	6d 81       	ldd	r22, Y+5	; 0x05
    3ad2:	7e 81       	ldd	r23, Y+6	; 0x06
    3ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ad6:	98 85       	ldd	r25, Y+8	; 0x08
    3ad8:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	9a 87       	std	Y+10, r25	; 0x0a
    3ae2:	89 87       	std	Y+9, r24	; 0x09
    3ae4:	89 85       	ldd	r24, Y+9	; 0x09
    3ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae8:	9e 87       	std	Y+14, r25	; 0x0e
    3aea:	8d 87       	std	Y+13, r24	; 0x0d
    3aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    3af0:	01 97       	sbiw	r24, 0x01	; 1
    3af2:	f1 f7       	brne	.-4      	; 0x3af0 <Application_ClockMode+0x22a>
    3af4:	9e 87       	std	Y+14, r25	; 0x0e
    3af6:	8d 87       	std	Y+13, r24	; 0x0d

			_delay_ms(LCD_DISPLAY_DELAY);



		}
    3af8:	f1 ce       	rjmp	.-542    	; 0x38dc <Application_ClockMode+0x16>

00003afa <Application_GetKeypadAlarm>:
}




void Application_GetKeypadAlarm(void){
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	c6 57       	subi	r28, 0x76	; 118
    3b04:	d1 09       	sbc	r29, r1
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61

	u8 temp='a';
    3b10:	81 e6       	ldi	r24, 0x61	; 97
    3b12:	8a 8b       	std	Y+18, r24	; 0x12
	Keypad_ErrorStatusType Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    3b14:	83 e0       	ldi	r24, 0x03	; 3
    3b16:	8b 83       	std	Y+3, r24	; 0x03
	u8 tempArr[100];
	u8 Loc_u8Index = 0;
    3b18:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Check = ONE_VALUE;
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	8a 83       	std	Y+2, r24	; 0x02

	while(Loc_u8Check == ONE_VALUE){
    3b1e:	9f c0       	rjmp	.+318    	; 0x3c5e <Application_GetKeypadAlarm+0x164>

		Keypad_Status = Keypad_enuRead(&Keypad, &temp);
    3b20:	ce 01       	movw	r24, r28
    3b22:	42 96       	adiw	r24, 0x12	; 18
    3b24:	bc 01       	movw	r22, r24
    3b26:	87 e9       	ldi	r24, 0x97	; 151
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <Keypad_enuRead>
    3b2e:	8b 83       	std	Y+3, r24	; 0x03
		if(Keypad_Status == KEYPAD_IS_PRESSED){
    3b30:	8b 81       	ldd	r24, Y+3	; 0x03
    3b32:	88 23       	and	r24, r24
    3b34:	09 f0       	breq	.+2      	; 0x3b38 <Application_GetKeypadAlarm+0x3e>
    3b36:	93 c0       	rjmp	.+294    	; 0x3c5e <Application_GetKeypadAlarm+0x164>

			if(temp>='0' && temp<='9'){
    3b38:	8a 89       	ldd	r24, Y+18	; 0x12
    3b3a:	80 33       	cpi	r24, 0x30	; 48
    3b3c:	08 f4       	brcc	.+2      	; 0x3b40 <Application_GetKeypadAlarm+0x46>
    3b3e:	8b c0       	rjmp	.+278    	; 0x3c56 <Application_GetKeypadAlarm+0x15c>
    3b40:	8a 89       	ldd	r24, Y+18	; 0x12
    3b42:	8a 33       	cpi	r24, 0x3A	; 58
    3b44:	08 f0       	brcs	.+2      	; 0x3b48 <Application_GetKeypadAlarm+0x4e>
    3b46:	87 c0       	rjmp	.+270    	; 0x3c56 <Application_GetKeypadAlarm+0x15c>
				Lcd_4bit_enuDisplayCharacter(&Lcd, temp);
    3b48:	8a 89       	ldd	r24, Y+18	; 0x12
    3b4a:	68 2f       	mov	r22, r24
    3b4c:	80 e9       	ldi	r24, 0x90	; 144
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Lcd_4bit_enuDisplayCharacter>
				tempArr[Loc_u8Index++]=temp;
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	91 e0       	ldi	r25, 0x01	; 1
    3b58:	98 0f       	add	r25, r24
    3b5a:	99 83       	std	Y+1, r25	; 0x01
    3b5c:	88 2f       	mov	r24, r24
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	4a 89       	ldd	r20, Y+18	; 0x12
    3b62:	9e 01       	movw	r18, r28
    3b64:	2d 5e       	subi	r18, 0xED	; 237
    3b66:	3f 4f       	sbci	r19, 0xFF	; 255
    3b68:	82 0f       	add	r24, r18
    3b6a:	93 1f       	adc	r25, r19
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	40 83       	st	Z, r20
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	90 e8       	ldi	r25, 0x80	; 128
    3b74:	a2 ec       	ldi	r26, 0xC2	; 194
    3b76:	b3 e4       	ldi	r27, 0x43	; 67
    3b78:	8c 83       	std	Y+4, r24	; 0x04
    3b7a:	9d 83       	std	Y+5, r25	; 0x05
    3b7c:	ae 83       	std	Y+6, r26	; 0x06
    3b7e:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	4a e7       	ldi	r20, 0x7A	; 122
    3b86:	55 e4       	ldi	r21, 0x45	; 69
    3b88:	6c 81       	ldd	r22, Y+4	; 0x04
    3b8a:	7d 81       	ldd	r23, Y+5	; 0x05
    3b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    3b90:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	88 87       	std	Y+8, r24	; 0x08
    3b9a:	99 87       	std	Y+9, r25	; 0x09
    3b9c:	aa 87       	std	Y+10, r26	; 0x0a
    3b9e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e8       	ldi	r20, 0x80	; 128
    3ba6:	5f e3       	ldi	r21, 0x3F	; 63
    3ba8:	68 85       	ldd	r22, Y+8	; 0x08
    3baa:	79 85       	ldd	r23, Y+9	; 0x09
    3bac:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bae:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bb0:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    3bb4:	88 23       	and	r24, r24
    3bb6:	2c f4       	brge	.+10     	; 0x3bc2 <Application_GetKeypadAlarm+0xc8>
		__ticks = 1;
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	9d 87       	std	Y+13, r25	; 0x0d
    3bbe:	8c 87       	std	Y+12, r24	; 0x0c
    3bc0:	3f c0       	rjmp	.+126    	; 0x3c40 <Application_GetKeypadAlarm+0x146>
	else if (__tmp > 65535)
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	3f ef       	ldi	r19, 0xFF	; 255
    3bc6:	4f e7       	ldi	r20, 0x7F	; 127
    3bc8:	57 e4       	ldi	r21, 0x47	; 71
    3bca:	68 85       	ldd	r22, Y+8	; 0x08
    3bcc:	79 85       	ldd	r23, Y+9	; 0x09
    3bce:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bd2:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    3bd6:	18 16       	cp	r1, r24
    3bd8:	4c f5       	brge	.+82     	; 0x3c2c <Application_GetKeypadAlarm+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e2       	ldi	r20, 0x20	; 32
    3be0:	51 e4       	ldi	r21, 0x41	; 65
    3be2:	6c 81       	ldd	r22, Y+4	; 0x04
    3be4:	7d 81       	ldd	r23, Y+5	; 0x05
    3be6:	8e 81       	ldd	r24, Y+6	; 0x06
    3be8:	9f 81       	ldd	r25, Y+7	; 0x07
    3bea:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	9d 87       	std	Y+13, r25	; 0x0d
    3c00:	8c 87       	std	Y+12, r24	; 0x0c
    3c02:	0f c0       	rjmp	.+30     	; 0x3c22 <Application_GetKeypadAlarm+0x128>
    3c04:	80 e9       	ldi	r24, 0x90	; 144
    3c06:	91 e0       	ldi	r25, 0x01	; 1
    3c08:	9f 87       	std	Y+15, r25	; 0x0f
    3c0a:	8e 87       	std	Y+14, r24	; 0x0e
    3c0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	f1 f7       	brne	.-4      	; 0x3c10 <Application_GetKeypadAlarm+0x116>
    3c14:	9f 87       	std	Y+15, r25	; 0x0f
    3c16:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c18:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	9d 87       	std	Y+13, r25	; 0x0d
    3c20:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c22:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c24:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c26:	89 2b       	or	r24, r25
    3c28:	69 f7       	brne	.-38     	; 0x3c04 <Application_GetKeypadAlarm+0x10a>
    3c2a:	14 c0       	rjmp	.+40     	; 0x3c54 <Application_GetKeypadAlarm+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c2c:	68 85       	ldd	r22, Y+8	; 0x08
    3c2e:	79 85       	ldd	r23, Y+9	; 0x09
    3c30:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c32:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c34:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	9d 87       	std	Y+13, r25	; 0x0d
    3c3e:	8c 87       	std	Y+12, r24	; 0x0c
    3c40:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c42:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c44:	99 8b       	std	Y+17, r25	; 0x11
    3c46:	88 8b       	std	Y+16, r24	; 0x10
    3c48:	88 89       	ldd	r24, Y+16	; 0x10
    3c4a:	99 89       	ldd	r25, Y+17	; 0x11
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	f1 f7       	brne	.-4      	; 0x3c4c <Application_GetKeypadAlarm+0x152>
    3c50:	99 8b       	std	Y+17, r25	; 0x11
    3c52:	88 8b       	std	Y+16, r24	; 0x10
				_delay_ms(KEYPAD_DELAY);
    3c54:	04 c0       	rjmp	.+8      	; 0x3c5e <Application_GetKeypadAlarm+0x164>
			}
			else if(temp == '='){
    3c56:	8a 89       	ldd	r24, Y+18	; 0x12
    3c58:	8d 33       	cpi	r24, 0x3D	; 61
    3c5a:	09 f4       	brne	.+2      	; 0x3c5e <Application_GetKeypadAlarm+0x164>
				Loc_u8Check = ZERO_VALUE;
    3c5c:	1a 82       	std	Y+2, r1	; 0x02
	Keypad_ErrorStatusType Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
	u8 tempArr[100];
	u8 Loc_u8Index = 0;
	u8 Loc_u8Check = ONE_VALUE;

	while(Loc_u8Check == ONE_VALUE){
    3c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c60:	81 30       	cpi	r24, 0x01	; 1
    3c62:	09 f4       	brne	.+2      	; 0x3c66 <Application_GetKeypadAlarm+0x16c>
    3c64:	5d cf       	rjmp	.-326    	; 0x3b20 <Application_GetKeypadAlarm+0x26>
				Loc_u8Check = ZERO_VALUE;
			}
		}
	}

	tempArr[Loc_u8Index]='\0';
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	88 2f       	mov	r24, r24
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	9e 01       	movw	r18, r28
    3c6e:	2d 5e       	subi	r18, 0xED	; 237
    3c70:	3f 4f       	sbci	r19, 0xFF	; 255
    3c72:	82 0f       	add	r24, r18
    3c74:	93 1f       	adc	r25, r19
    3c76:	fc 01       	movw	r30, r24
    3c78:	10 82       	st	Z, r1
	Convert_StringTou32(&Global_u32GlobalAramCounter, tempArr);
    3c7a:	ce 01       	movw	r24, r28
    3c7c:	43 96       	adiw	r24, 0x13	; 19
    3c7e:	bc 01       	movw	r22, r24
    3c80:	8a ea       	ldi	r24, 0xAA	; 170
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	0e 94 a1 02 	call	0x542	; 0x542 <Convert_StringTou32>

}
    3c88:	00 00       	nop
    3c8a:	ca 58       	subi	r28, 0x8A	; 138
    3c8c:	df 4f       	sbci	r29, 0xFF	; 255
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	08 95       	ret

00003c9e <Application_GetKeypadHour>:

void Application_GetKeypadHour(void){
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	c6 57       	subi	r28, 0x76	; 118
    3ca8:	d1 09       	sbc	r29, r1
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	cd bf       	out	0x3d, r28	; 61
	u8 temp='a';
    3cb4:	81 e6       	ldi	r24, 0x61	; 97
    3cb6:	8a 8b       	std	Y+18, r24	; 0x12
	Keypad_ErrorStatusType Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    3cb8:	83 e0       	ldi	r24, 0x03	; 3
    3cba:	8b 83       	std	Y+3, r24	; 0x03
	u8 tempArr[100];
	u8 Loc_u8Index = 0;
    3cbc:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Check = 2;
    3cbe:	82 e0       	ldi	r24, 0x02	; 2
    3cc0:	8a 83       	std	Y+2, r24	; 0x02

	while(Loc_u8Check != ZERO_VALUE){
    3cc2:	9d c0       	rjmp	.+314    	; 0x3dfe <Application_GetKeypadHour+0x160>

		Keypad_Status = Keypad_enuRead(&Keypad, &temp);
    3cc4:	ce 01       	movw	r24, r28
    3cc6:	42 96       	adiw	r24, 0x12	; 18
    3cc8:	bc 01       	movw	r22, r24
    3cca:	87 e9       	ldi	r24, 0x97	; 151
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <Keypad_enuRead>
    3cd2:	8b 83       	std	Y+3, r24	; 0x03
		if(Keypad_Status == KEYPAD_IS_PRESSED){
    3cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd6:	88 23       	and	r24, r24
    3cd8:	09 f0       	breq	.+2      	; 0x3cdc <Application_GetKeypadHour+0x3e>
    3cda:	91 c0       	rjmp	.+290    	; 0x3dfe <Application_GetKeypadHour+0x160>

			if(temp>='0' && temp<='9'){
    3cdc:	8a 89       	ldd	r24, Y+18	; 0x12
    3cde:	80 33       	cpi	r24, 0x30	; 48
    3ce0:	08 f4       	brcc	.+2      	; 0x3ce4 <Application_GetKeypadHour+0x46>
    3ce2:	8d c0       	rjmp	.+282    	; 0x3dfe <Application_GetKeypadHour+0x160>
    3ce4:	8a 89       	ldd	r24, Y+18	; 0x12
    3ce6:	8a 33       	cpi	r24, 0x3A	; 58
    3ce8:	08 f0       	brcs	.+2      	; 0x3cec <Application_GetKeypadHour+0x4e>
    3cea:	89 c0       	rjmp	.+274    	; 0x3dfe <Application_GetKeypadHour+0x160>
				Lcd_4bit_enuDisplayCharacter(&Lcd, temp);
    3cec:	8a 89       	ldd	r24, Y+18	; 0x12
    3cee:	68 2f       	mov	r22, r24
    3cf0:	80 e9       	ldi	r24, 0x90	; 144
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Lcd_4bit_enuDisplayCharacter>
				tempArr[Loc_u8Index++]=temp;
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	91 e0       	ldi	r25, 0x01	; 1
    3cfc:	98 0f       	add	r25, r24
    3cfe:	99 83       	std	Y+1, r25	; 0x01
    3d00:	88 2f       	mov	r24, r24
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	4a 89       	ldd	r20, Y+18	; 0x12
    3d06:	9e 01       	movw	r18, r28
    3d08:	2d 5e       	subi	r18, 0xED	; 237
    3d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d0c:	82 0f       	add	r24, r18
    3d0e:	93 1f       	adc	r25, r19
    3d10:	fc 01       	movw	r30, r24
    3d12:	40 83       	st	Z, r20

				Loc_u8Check--;
    3d14:	8a 81       	ldd	r24, Y+2	; 0x02
    3d16:	81 50       	subi	r24, 0x01	; 1
    3d18:	8a 83       	std	Y+2, r24	; 0x02
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e8       	ldi	r25, 0x80	; 128
    3d1e:	a2 ec       	ldi	r26, 0xC2	; 194
    3d20:	b3 e4       	ldi	r27, 0x43	; 67
    3d22:	8c 83       	std	Y+4, r24	; 0x04
    3d24:	9d 83       	std	Y+5, r25	; 0x05
    3d26:	ae 83       	std	Y+6, r26	; 0x06
    3d28:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	4a e7       	ldi	r20, 0x7A	; 122
    3d30:	55 e4       	ldi	r21, 0x45	; 69
    3d32:	6c 81       	ldd	r22, Y+4	; 0x04
    3d34:	7d 81       	ldd	r23, Y+5	; 0x05
    3d36:	8e 81       	ldd	r24, Y+6	; 0x06
    3d38:	9f 81       	ldd	r25, Y+7	; 0x07
    3d3a:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	88 87       	std	Y+8, r24	; 0x08
    3d44:	99 87       	std	Y+9, r25	; 0x09
    3d46:	aa 87       	std	Y+10, r26	; 0x0a
    3d48:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	40 e8       	ldi	r20, 0x80	; 128
    3d50:	5f e3       	ldi	r21, 0x3F	; 63
    3d52:	68 85       	ldd	r22, Y+8	; 0x08
    3d54:	79 85       	ldd	r23, Y+9	; 0x09
    3d56:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d58:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d5a:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    3d5e:	88 23       	and	r24, r24
    3d60:	2c f4       	brge	.+10     	; 0x3d6c <Application_GetKeypadHour+0xce>
		__ticks = 1;
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	9d 87       	std	Y+13, r25	; 0x0d
    3d68:	8c 87       	std	Y+12, r24	; 0x0c
    3d6a:	3f c0       	rjmp	.+126    	; 0x3dea <Application_GetKeypadHour+0x14c>
	else if (__tmp > 65535)
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	3f ef       	ldi	r19, 0xFF	; 255
    3d70:	4f e7       	ldi	r20, 0x7F	; 127
    3d72:	57 e4       	ldi	r21, 0x47	; 71
    3d74:	68 85       	ldd	r22, Y+8	; 0x08
    3d76:	79 85       	ldd	r23, Y+9	; 0x09
    3d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d7c:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    3d80:	18 16       	cp	r1, r24
    3d82:	4c f5       	brge	.+82     	; 0x3dd6 <Application_GetKeypadHour+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	40 e2       	ldi	r20, 0x20	; 32
    3d8a:	51 e4       	ldi	r21, 0x41	; 65
    3d8c:	6c 81       	ldd	r22, Y+4	; 0x04
    3d8e:	7d 81       	ldd	r23, Y+5	; 0x05
    3d90:	8e 81       	ldd	r24, Y+6	; 0x06
    3d92:	9f 81       	ldd	r25, Y+7	; 0x07
    3d94:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3da4:	dc 01       	movw	r26, r24
    3da6:	cb 01       	movw	r24, r22
    3da8:	9d 87       	std	Y+13, r25	; 0x0d
    3daa:	8c 87       	std	Y+12, r24	; 0x0c
    3dac:	0f c0       	rjmp	.+30     	; 0x3dcc <Application_GetKeypadHour+0x12e>
    3dae:	80 e9       	ldi	r24, 0x90	; 144
    3db0:	91 e0       	ldi	r25, 0x01	; 1
    3db2:	9f 87       	std	Y+15, r25	; 0x0f
    3db4:	8e 87       	std	Y+14, r24	; 0x0e
    3db6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3db8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <Application_GetKeypadHour+0x11c>
    3dbe:	9f 87       	std	Y+15, r25	; 0x0f
    3dc0:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dc4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	9d 87       	std	Y+13, r25	; 0x0d
    3dca:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dcc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dce:	9d 85       	ldd	r25, Y+13	; 0x0d
    3dd0:	89 2b       	or	r24, r25
    3dd2:	69 f7       	brne	.-38     	; 0x3dae <Application_GetKeypadHour+0x110>
    3dd4:	14 c0       	rjmp	.+40     	; 0x3dfe <Application_GetKeypadHour+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd6:	68 85       	ldd	r22, Y+8	; 0x08
    3dd8:	79 85       	ldd	r23, Y+9	; 0x09
    3dda:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ddc:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dde:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22
    3de6:	9d 87       	std	Y+13, r25	; 0x0d
    3de8:	8c 87       	std	Y+12, r24	; 0x0c
    3dea:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dec:	9d 85       	ldd	r25, Y+13	; 0x0d
    3dee:	99 8b       	std	Y+17, r25	; 0x11
    3df0:	88 8b       	std	Y+16, r24	; 0x10
    3df2:	88 89       	ldd	r24, Y+16	; 0x10
    3df4:	99 89       	ldd	r25, Y+17	; 0x11
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <Application_GetKeypadHour+0x158>
    3dfa:	99 8b       	std	Y+17, r25	; 0x11
    3dfc:	88 8b       	std	Y+16, r24	; 0x10
	Keypad_ErrorStatusType Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
	u8 tempArr[100];
	u8 Loc_u8Index = 0;
	u8 Loc_u8Check = 2;

	while(Loc_u8Check != ZERO_VALUE){
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	88 23       	and	r24, r24
    3e02:	09 f0       	breq	.+2      	; 0x3e06 <Application_GetKeypadHour+0x168>
    3e04:	5f cf       	rjmp	.-322    	; 0x3cc4 <Application_GetKeypadHour+0x26>
			}

		}
	}

	tempArr[Loc_u8Index]='\0';
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	88 2f       	mov	r24, r24
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	9e 01       	movw	r18, r28
    3e0e:	2d 5e       	subi	r18, 0xED	; 237
    3e10:	3f 4f       	sbci	r19, 0xFF	; 255
    3e12:	82 0f       	add	r24, r18
    3e14:	93 1f       	adc	r25, r19
    3e16:	fc 01       	movw	r30, r24
    3e18:	10 82       	st	Z, r1
	Convert_StringTou32(&Global_u32GlobalHour, tempArr);
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	43 96       	adiw	r24, 0x13	; 19
    3e1e:	bc 01       	movw	r22, r24
    3e20:	89 e3       	ldi	r24, 0x39	; 57
    3e22:	91 e0       	ldi	r25, 0x01	; 1
    3e24:	0e 94 a1 02 	call	0x542	; 0x542 <Convert_StringTou32>
}
    3e28:	00 00       	nop
    3e2a:	ca 58       	subi	r28, 0x8A	; 138
    3e2c:	df 4f       	sbci	r29, 0xFF	; 255
    3e2e:	0f b6       	in	r0, 0x3f	; 63
    3e30:	f8 94       	cli
    3e32:	de bf       	out	0x3e, r29	; 62
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	cd bf       	out	0x3d, r28	; 61
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	08 95       	ret

00003e3e <Application_GetKeypadSecond>:


void Application_GetKeypadSecond(void){
    3e3e:	cf 93       	push	r28
    3e40:	df 93       	push	r29
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	c6 57       	subi	r28, 0x76	; 118
    3e48:	d1 09       	sbc	r29, r1
    3e4a:	0f b6       	in	r0, 0x3f	; 63
    3e4c:	f8 94       	cli
    3e4e:	de bf       	out	0x3e, r29	; 62
    3e50:	0f be       	out	0x3f, r0	; 63
    3e52:	cd bf       	out	0x3d, r28	; 61
	u8 temp='a';
    3e54:	81 e6       	ldi	r24, 0x61	; 97
    3e56:	8a 8b       	std	Y+18, r24	; 0x12
	Keypad_ErrorStatusType Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    3e58:	83 e0       	ldi	r24, 0x03	; 3
    3e5a:	8b 83       	std	Y+3, r24	; 0x03
	u8 tempArr[100];
	u8 Loc_u8Index = 0;
    3e5c:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Check = 2;
    3e5e:	82 e0       	ldi	r24, 0x02	; 2
    3e60:	8a 83       	std	Y+2, r24	; 0x02

	while(Loc_u8Check != ZERO_VALUE){
    3e62:	9d c0       	rjmp	.+314    	; 0x3f9e <Application_GetKeypadSecond+0x160>

		Keypad_Status = Keypad_enuRead(&Keypad, &temp);
    3e64:	ce 01       	movw	r24, r28
    3e66:	42 96       	adiw	r24, 0x12	; 18
    3e68:	bc 01       	movw	r22, r24
    3e6a:	87 e9       	ldi	r24, 0x97	; 151
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <Keypad_enuRead>
    3e72:	8b 83       	std	Y+3, r24	; 0x03
		if(Keypad_Status == KEYPAD_IS_PRESSED){
    3e74:	8b 81       	ldd	r24, Y+3	; 0x03
    3e76:	88 23       	and	r24, r24
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <Application_GetKeypadSecond+0x3e>
    3e7a:	91 c0       	rjmp	.+290    	; 0x3f9e <Application_GetKeypadSecond+0x160>

			if(temp>='0' && temp<='9'){
    3e7c:	8a 89       	ldd	r24, Y+18	; 0x12
    3e7e:	80 33       	cpi	r24, 0x30	; 48
    3e80:	08 f4       	brcc	.+2      	; 0x3e84 <Application_GetKeypadSecond+0x46>
    3e82:	8d c0       	rjmp	.+282    	; 0x3f9e <Application_GetKeypadSecond+0x160>
    3e84:	8a 89       	ldd	r24, Y+18	; 0x12
    3e86:	8a 33       	cpi	r24, 0x3A	; 58
    3e88:	08 f0       	brcs	.+2      	; 0x3e8c <Application_GetKeypadSecond+0x4e>
    3e8a:	89 c0       	rjmp	.+274    	; 0x3f9e <Application_GetKeypadSecond+0x160>
				Lcd_4bit_enuDisplayCharacter(&Lcd, temp);
    3e8c:	8a 89       	ldd	r24, Y+18	; 0x12
    3e8e:	68 2f       	mov	r22, r24
    3e90:	80 e9       	ldi	r24, 0x90	; 144
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Lcd_4bit_enuDisplayCharacter>
				tempArr[Loc_u8Index++]=temp;
    3e98:	89 81       	ldd	r24, Y+1	; 0x01
    3e9a:	91 e0       	ldi	r25, 0x01	; 1
    3e9c:	98 0f       	add	r25, r24
    3e9e:	99 83       	std	Y+1, r25	; 0x01
    3ea0:	88 2f       	mov	r24, r24
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	4a 89       	ldd	r20, Y+18	; 0x12
    3ea6:	9e 01       	movw	r18, r28
    3ea8:	2d 5e       	subi	r18, 0xED	; 237
    3eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    3eac:	82 0f       	add	r24, r18
    3eae:	93 1f       	adc	r25, r19
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	40 83       	st	Z, r20

				Loc_u8Check--;
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	81 50       	subi	r24, 0x01	; 1
    3eb8:	8a 83       	std	Y+2, r24	; 0x02
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	90 e8       	ldi	r25, 0x80	; 128
    3ebe:	a2 ec       	ldi	r26, 0xC2	; 194
    3ec0:	b3 e4       	ldi	r27, 0x43	; 67
    3ec2:	8c 83       	std	Y+4, r24	; 0x04
    3ec4:	9d 83       	std	Y+5, r25	; 0x05
    3ec6:	ae 83       	std	Y+6, r26	; 0x06
    3ec8:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3eca:	20 e0       	ldi	r18, 0x00	; 0
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	4a e7       	ldi	r20, 0x7A	; 122
    3ed0:	55 e4       	ldi	r21, 0x45	; 69
    3ed2:	6c 81       	ldd	r22, Y+4	; 0x04
    3ed4:	7d 81       	ldd	r23, Y+5	; 0x05
    3ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eda:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	88 87       	std	Y+8, r24	; 0x08
    3ee4:	99 87       	std	Y+9, r25	; 0x09
    3ee6:	aa 87       	std	Y+10, r26	; 0x0a
    3ee8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	40 e8       	ldi	r20, 0x80	; 128
    3ef0:	5f e3       	ldi	r21, 0x3F	; 63
    3ef2:	68 85       	ldd	r22, Y+8	; 0x08
    3ef4:	79 85       	ldd	r23, Y+9	; 0x09
    3ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ef8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3efa:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    3efe:	88 23       	and	r24, r24
    3f00:	2c f4       	brge	.+10     	; 0x3f0c <Application_GetKeypadSecond+0xce>
		__ticks = 1;
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	9d 87       	std	Y+13, r25	; 0x0d
    3f08:	8c 87       	std	Y+12, r24	; 0x0c
    3f0a:	3f c0       	rjmp	.+126    	; 0x3f8a <Application_GetKeypadSecond+0x14c>
	else if (__tmp > 65535)
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	3f ef       	ldi	r19, 0xFF	; 255
    3f10:	4f e7       	ldi	r20, 0x7F	; 127
    3f12:	57 e4       	ldi	r21, 0x47	; 71
    3f14:	68 85       	ldd	r22, Y+8	; 0x08
    3f16:	79 85       	ldd	r23, Y+9	; 0x09
    3f18:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f1c:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    3f20:	18 16       	cp	r1, r24
    3f22:	4c f5       	brge	.+82     	; 0x3f76 <Application_GetKeypadSecond+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	40 e2       	ldi	r20, 0x20	; 32
    3f2a:	51 e4       	ldi	r21, 0x41	; 65
    3f2c:	6c 81       	ldd	r22, Y+4	; 0x04
    3f2e:	7d 81       	ldd	r23, Y+5	; 0x05
    3f30:	8e 81       	ldd	r24, Y+6	; 0x06
    3f32:	9f 81       	ldd	r25, Y+7	; 0x07
    3f34:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	bc 01       	movw	r22, r24
    3f3e:	cd 01       	movw	r24, r26
    3f40:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3f44:	dc 01       	movw	r26, r24
    3f46:	cb 01       	movw	r24, r22
    3f48:	9d 87       	std	Y+13, r25	; 0x0d
    3f4a:	8c 87       	std	Y+12, r24	; 0x0c
    3f4c:	0f c0       	rjmp	.+30     	; 0x3f6c <Application_GetKeypadSecond+0x12e>
    3f4e:	80 e9       	ldi	r24, 0x90	; 144
    3f50:	91 e0       	ldi	r25, 0x01	; 1
    3f52:	9f 87       	std	Y+15, r25	; 0x0f
    3f54:	8e 87       	std	Y+14, r24	; 0x0e
    3f56:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f58:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f5a:	01 97       	sbiw	r24, 0x01	; 1
    3f5c:	f1 f7       	brne	.-4      	; 0x3f5a <Application_GetKeypadSecond+0x11c>
    3f5e:	9f 87       	std	Y+15, r25	; 0x0f
    3f60:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f62:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f64:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f66:	01 97       	sbiw	r24, 0x01	; 1
    3f68:	9d 87       	std	Y+13, r25	; 0x0d
    3f6a:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f70:	89 2b       	or	r24, r25
    3f72:	69 f7       	brne	.-38     	; 0x3f4e <Application_GetKeypadSecond+0x110>
    3f74:	14 c0       	rjmp	.+40     	; 0x3f9e <Application_GetKeypadSecond+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f76:	68 85       	ldd	r22, Y+8	; 0x08
    3f78:	79 85       	ldd	r23, Y+9	; 0x09
    3f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f7e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	9d 87       	std	Y+13, r25	; 0x0d
    3f88:	8c 87       	std	Y+12, r24	; 0x0c
    3f8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f8e:	99 8b       	std	Y+17, r25	; 0x11
    3f90:	88 8b       	std	Y+16, r24	; 0x10
    3f92:	88 89       	ldd	r24, Y+16	; 0x10
    3f94:	99 89       	ldd	r25, Y+17	; 0x11
    3f96:	01 97       	sbiw	r24, 0x01	; 1
    3f98:	f1 f7       	brne	.-4      	; 0x3f96 <Application_GetKeypadSecond+0x158>
    3f9a:	99 8b       	std	Y+17, r25	; 0x11
    3f9c:	88 8b       	std	Y+16, r24	; 0x10
	Keypad_ErrorStatusType Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
	u8 tempArr[100];
	u8 Loc_u8Index = 0;
	u8 Loc_u8Check = 2;

	while(Loc_u8Check != ZERO_VALUE){
    3f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa0:	88 23       	and	r24, r24
    3fa2:	09 f0       	breq	.+2      	; 0x3fa6 <Application_GetKeypadSecond+0x168>
    3fa4:	5f cf       	rjmp	.-322    	; 0x3e64 <Application_GetKeypadSecond+0x26>
			}

		}
	}

	tempArr[Loc_u8Index]='\0';
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	88 2f       	mov	r24, r24
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	9e 01       	movw	r18, r28
    3fae:	2d 5e       	subi	r18, 0xED	; 237
    3fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb2:	82 0f       	add	r24, r18
    3fb4:	93 1f       	adc	r25, r19
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	10 82       	st	Z, r1
	Convert_StringTou32(&Global_u32GlobalSec, tempArr);
    3fba:	ce 01       	movw	r24, r28
    3fbc:	43 96       	adiw	r24, 0x13	; 19
    3fbe:	bc 01       	movw	r22, r24
    3fc0:	81 e3       	ldi	r24, 0x31	; 49
    3fc2:	91 e0       	ldi	r25, 0x01	; 1
    3fc4:	0e 94 a1 02 	call	0x542	; 0x542 <Convert_StringTou32>
}
    3fc8:	00 00       	nop
    3fca:	ca 58       	subi	r28, 0x8A	; 138
    3fcc:	df 4f       	sbci	r29, 0xFF	; 255
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	f8 94       	cli
    3fd2:	de bf       	out	0x3e, r29	; 62
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	cd bf       	out	0x3d, r28	; 61
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	08 95       	ret

00003fde <Application_GetKeypadMin>:

void Application_GetKeypadMin(void){
    3fde:	cf 93       	push	r28
    3fe0:	df 93       	push	r29
    3fe2:	cd b7       	in	r28, 0x3d	; 61
    3fe4:	de b7       	in	r29, 0x3e	; 62
    3fe6:	c6 57       	subi	r28, 0x76	; 118
    3fe8:	d1 09       	sbc	r29, r1
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
	u8 temp='a';
    3ff4:	81 e6       	ldi	r24, 0x61	; 97
    3ff6:	8a 8b       	std	Y+18, r24	; 0x12
	Keypad_ErrorStatusType Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    3ff8:	83 e0       	ldi	r24, 0x03	; 3
    3ffa:	8b 83       	std	Y+3, r24	; 0x03
	u8 tempArr[100];
	u8 Loc_u8Index = 0;
    3ffc:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Check = 2;
    3ffe:	82 e0       	ldi	r24, 0x02	; 2
    4000:	8a 83       	std	Y+2, r24	; 0x02

	while(Loc_u8Check != ZERO_VALUE){
    4002:	9d c0       	rjmp	.+314    	; 0x413e <Application_GetKeypadMin+0x160>

		Keypad_Status = Keypad_enuRead(&Keypad, &temp);
    4004:	ce 01       	movw	r24, r28
    4006:	42 96       	adiw	r24, 0x12	; 18
    4008:	bc 01       	movw	r22, r24
    400a:	87 e9       	ldi	r24, 0x97	; 151
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <Keypad_enuRead>
    4012:	8b 83       	std	Y+3, r24	; 0x03
		if(Keypad_Status == KEYPAD_IS_PRESSED){
    4014:	8b 81       	ldd	r24, Y+3	; 0x03
    4016:	88 23       	and	r24, r24
    4018:	09 f0       	breq	.+2      	; 0x401c <Application_GetKeypadMin+0x3e>
    401a:	91 c0       	rjmp	.+290    	; 0x413e <Application_GetKeypadMin+0x160>

			if(temp>='0' && temp<='9'){
    401c:	8a 89       	ldd	r24, Y+18	; 0x12
    401e:	80 33       	cpi	r24, 0x30	; 48
    4020:	08 f4       	brcc	.+2      	; 0x4024 <Application_GetKeypadMin+0x46>
    4022:	8d c0       	rjmp	.+282    	; 0x413e <Application_GetKeypadMin+0x160>
    4024:	8a 89       	ldd	r24, Y+18	; 0x12
    4026:	8a 33       	cpi	r24, 0x3A	; 58
    4028:	08 f0       	brcs	.+2      	; 0x402c <Application_GetKeypadMin+0x4e>
    402a:	89 c0       	rjmp	.+274    	; 0x413e <Application_GetKeypadMin+0x160>
				Lcd_4bit_enuDisplayCharacter(&Lcd, temp);
    402c:	8a 89       	ldd	r24, Y+18	; 0x12
    402e:	68 2f       	mov	r22, r24
    4030:	80 e9       	ldi	r24, 0x90	; 144
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Lcd_4bit_enuDisplayCharacter>
				tempArr[Loc_u8Index++]=temp;
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	91 e0       	ldi	r25, 0x01	; 1
    403c:	98 0f       	add	r25, r24
    403e:	99 83       	std	Y+1, r25	; 0x01
    4040:	88 2f       	mov	r24, r24
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	4a 89       	ldd	r20, Y+18	; 0x12
    4046:	9e 01       	movw	r18, r28
    4048:	2d 5e       	subi	r18, 0xED	; 237
    404a:	3f 4f       	sbci	r19, 0xFF	; 255
    404c:	82 0f       	add	r24, r18
    404e:	93 1f       	adc	r25, r19
    4050:	fc 01       	movw	r30, r24
    4052:	40 83       	st	Z, r20

				Loc_u8Check--;
    4054:	8a 81       	ldd	r24, Y+2	; 0x02
    4056:	81 50       	subi	r24, 0x01	; 1
    4058:	8a 83       	std	Y+2, r24	; 0x02
    405a:	80 e0       	ldi	r24, 0x00	; 0
    405c:	90 e8       	ldi	r25, 0x80	; 128
    405e:	a2 ec       	ldi	r26, 0xC2	; 194
    4060:	b3 e4       	ldi	r27, 0x43	; 67
    4062:	8c 83       	std	Y+4, r24	; 0x04
    4064:	9d 83       	std	Y+5, r25	; 0x05
    4066:	ae 83       	std	Y+6, r26	; 0x06
    4068:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	4a e7       	ldi	r20, 0x7A	; 122
    4070:	55 e4       	ldi	r21, 0x45	; 69
    4072:	6c 81       	ldd	r22, Y+4	; 0x04
    4074:	7d 81       	ldd	r23, Y+5	; 0x05
    4076:	8e 81       	ldd	r24, Y+6	; 0x06
    4078:	9f 81       	ldd	r25, Y+7	; 0x07
    407a:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	88 87       	std	Y+8, r24	; 0x08
    4084:	99 87       	std	Y+9, r25	; 0x09
    4086:	aa 87       	std	Y+10, r26	; 0x0a
    4088:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	40 e8       	ldi	r20, 0x80	; 128
    4090:	5f e3       	ldi	r21, 0x3F	; 63
    4092:	68 85       	ldd	r22, Y+8	; 0x08
    4094:	79 85       	ldd	r23, Y+9	; 0x09
    4096:	8a 85       	ldd	r24, Y+10	; 0x0a
    4098:	9b 85       	ldd	r25, Y+11	; 0x0b
    409a:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__cmpsf2>
    409e:	88 23       	and	r24, r24
    40a0:	2c f4       	brge	.+10     	; 0x40ac <Application_GetKeypadMin+0xce>
		__ticks = 1;
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	9d 87       	std	Y+13, r25	; 0x0d
    40a8:	8c 87       	std	Y+12, r24	; 0x0c
    40aa:	3f c0       	rjmp	.+126    	; 0x412a <Application_GetKeypadMin+0x14c>
	else if (__tmp > 65535)
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	3f ef       	ldi	r19, 0xFF	; 255
    40b0:	4f e7       	ldi	r20, 0x7F	; 127
    40b2:	57 e4       	ldi	r21, 0x47	; 71
    40b4:	68 85       	ldd	r22, Y+8	; 0x08
    40b6:	79 85       	ldd	r23, Y+9	; 0x09
    40b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    40ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    40bc:	0e 94 39 22 	call	0x4472	; 0x4472 <__gesf2>
    40c0:	18 16       	cp	r1, r24
    40c2:	4c f5       	brge	.+82     	; 0x4116 <Application_GetKeypadMin+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e2       	ldi	r20, 0x20	; 32
    40ca:	51 e4       	ldi	r21, 0x41	; 65
    40cc:	6c 81       	ldd	r22, Y+4	; 0x04
    40ce:	7d 81       	ldd	r23, Y+5	; 0x05
    40d0:	8e 81       	ldd	r24, Y+6	; 0x06
    40d2:	9f 81       	ldd	r25, Y+7	; 0x07
    40d4:	0e 94 3e 22 	call	0x447c	; 0x447c <__mulsf3>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	bc 01       	movw	r22, r24
    40de:	cd 01       	movw	r24, r26
    40e0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	9d 87       	std	Y+13, r25	; 0x0d
    40ea:	8c 87       	std	Y+12, r24	; 0x0c
    40ec:	0f c0       	rjmp	.+30     	; 0x410c <Application_GetKeypadMin+0x12e>
    40ee:	80 e9       	ldi	r24, 0x90	; 144
    40f0:	91 e0       	ldi	r25, 0x01	; 1
    40f2:	9f 87       	std	Y+15, r25	; 0x0f
    40f4:	8e 87       	std	Y+14, r24	; 0x0e
    40f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    40f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    40fa:	01 97       	sbiw	r24, 0x01	; 1
    40fc:	f1 f7       	brne	.-4      	; 0x40fa <Application_GetKeypadMin+0x11c>
    40fe:	9f 87       	std	Y+15, r25	; 0x0f
    4100:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4102:	8c 85       	ldd	r24, Y+12	; 0x0c
    4104:	9d 85       	ldd	r25, Y+13	; 0x0d
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	9d 87       	std	Y+13, r25	; 0x0d
    410a:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    410c:	8c 85       	ldd	r24, Y+12	; 0x0c
    410e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4110:	89 2b       	or	r24, r25
    4112:	69 f7       	brne	.-38     	; 0x40ee <Application_GetKeypadMin+0x110>
    4114:	14 c0       	rjmp	.+40     	; 0x413e <Application_GetKeypadMin+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4116:	68 85       	ldd	r22, Y+8	; 0x08
    4118:	79 85       	ldd	r23, Y+9	; 0x09
    411a:	8a 85       	ldd	r24, Y+10	; 0x0a
    411c:	9b 85       	ldd	r25, Y+11	; 0x0b
    411e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <__fixunssfsi>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	9d 87       	std	Y+13, r25	; 0x0d
    4128:	8c 87       	std	Y+12, r24	; 0x0c
    412a:	8c 85       	ldd	r24, Y+12	; 0x0c
    412c:	9d 85       	ldd	r25, Y+13	; 0x0d
    412e:	99 8b       	std	Y+17, r25	; 0x11
    4130:	88 8b       	std	Y+16, r24	; 0x10
    4132:	88 89       	ldd	r24, Y+16	; 0x10
    4134:	99 89       	ldd	r25, Y+17	; 0x11
    4136:	01 97       	sbiw	r24, 0x01	; 1
    4138:	f1 f7       	brne	.-4      	; 0x4136 <Application_GetKeypadMin+0x158>
    413a:	99 8b       	std	Y+17, r25	; 0x11
    413c:	88 8b       	std	Y+16, r24	; 0x10
	Keypad_ErrorStatusType Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
	u8 tempArr[100];
	u8 Loc_u8Index = 0;
	u8 Loc_u8Check = 2;

	while(Loc_u8Check != ZERO_VALUE){
    413e:	8a 81       	ldd	r24, Y+2	; 0x02
    4140:	88 23       	and	r24, r24
    4142:	09 f0       	breq	.+2      	; 0x4146 <Application_GetKeypadMin+0x168>
    4144:	5f cf       	rjmp	.-322    	; 0x4004 <Application_GetKeypadMin+0x26>
			}

		}
	}

	tempArr[Loc_u8Index]='\0';
    4146:	89 81       	ldd	r24, Y+1	; 0x01
    4148:	88 2f       	mov	r24, r24
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	9e 01       	movw	r18, r28
    414e:	2d 5e       	subi	r18, 0xED	; 237
    4150:	3f 4f       	sbci	r19, 0xFF	; 255
    4152:	82 0f       	add	r24, r18
    4154:	93 1f       	adc	r25, r19
    4156:	fc 01       	movw	r30, r24
    4158:	10 82       	st	Z, r1
	Convert_StringTou32(&Global_u32GlobalMin, tempArr);
    415a:	ce 01       	movw	r24, r28
    415c:	43 96       	adiw	r24, 0x13	; 19
    415e:	bc 01       	movw	r22, r24
    4160:	85 e3       	ldi	r24, 0x35	; 53
    4162:	91 e0       	ldi	r25, 0x01	; 1
    4164:	0e 94 a1 02 	call	0x542	; 0x542 <Convert_StringTou32>
}
    4168:	00 00       	nop
    416a:	ca 58       	subi	r28, 0x8A	; 138
    416c:	df 4f       	sbci	r29, 0xFF	; 255
    416e:	0f b6       	in	r0, 0x3f	; 63
    4170:	f8 94       	cli
    4172:	de bf       	out	0x3e, r29	; 62
    4174:	0f be       	out	0x3f, r0	; 63
    4176:	cd bf       	out	0x3d, r28	; 61
    4178:	df 91       	pop	r29
    417a:	cf 91       	pop	r28
    417c:	08 95       	ret

0000417e <__ashldi3>:
    417e:	0f 93       	push	r16
    4180:	08 30       	cpi	r16, 0x08	; 8
    4182:	90 f0       	brcs	.+36     	; 0x41a8 <__ashldi3+0x2a>
    4184:	98 2f       	mov	r25, r24
    4186:	87 2f       	mov	r24, r23
    4188:	76 2f       	mov	r23, r22
    418a:	65 2f       	mov	r22, r21
    418c:	54 2f       	mov	r21, r20
    418e:	43 2f       	mov	r20, r19
    4190:	32 2f       	mov	r19, r18
    4192:	22 27       	eor	r18, r18
    4194:	08 50       	subi	r16, 0x08	; 8
    4196:	f4 cf       	rjmp	.-24     	; 0x4180 <__ashldi3+0x2>
    4198:	22 0f       	add	r18, r18
    419a:	33 1f       	adc	r19, r19
    419c:	44 1f       	adc	r20, r20
    419e:	55 1f       	adc	r21, r21
    41a0:	66 1f       	adc	r22, r22
    41a2:	77 1f       	adc	r23, r23
    41a4:	88 1f       	adc	r24, r24
    41a6:	99 1f       	adc	r25, r25
    41a8:	0a 95       	dec	r16
    41aa:	b2 f7       	brpl	.-20     	; 0x4198 <__ashldi3+0x1a>
    41ac:	0f 91       	pop	r16
    41ae:	08 95       	ret

000041b0 <__adddi3>:
    41b0:	2a 0d       	add	r18, r10
    41b2:	3b 1d       	adc	r19, r11
    41b4:	4c 1d       	adc	r20, r12
    41b6:	5d 1d       	adc	r21, r13
    41b8:	6e 1d       	adc	r22, r14
    41ba:	7f 1d       	adc	r23, r15
    41bc:	80 1f       	adc	r24, r16
    41be:	91 1f       	adc	r25, r17
    41c0:	08 95       	ret

000041c2 <__cmpsf2>:
    41c2:	0e 94 c4 21 	call	0x4388	; 0x4388 <__fp_cmp>
    41c6:	08 f4       	brcc	.+2      	; 0x41ca <__cmpsf2+0x8>
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	08 95       	ret

000041cc <__divsf3>:
    41cc:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <__divsf3x>
    41d0:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__fp_round>
    41d4:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <__fp_pscB>
    41d8:	58 f0       	brcs	.+22     	; 0x41f0 <__divsf3+0x24>
    41da:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fp_pscA>
    41de:	40 f0       	brcs	.+16     	; 0x41f0 <__divsf3+0x24>
    41e0:	29 f4       	brne	.+10     	; 0x41ec <__divsf3+0x20>
    41e2:	5f 3f       	cpi	r21, 0xFF	; 255
    41e4:	29 f0       	breq	.+10     	; 0x41f0 <__divsf3+0x24>
    41e6:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    41ea:	51 11       	cpse	r21, r1
    41ec:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>
    41f0:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__fp_nan>

000041f4 <__divsf3x>:
    41f4:	0e 94 10 22 	call	0x4420	; 0x4420 <__fp_split3>
    41f8:	68 f3       	brcs	.-38     	; 0x41d4 <__divsf3+0x8>

000041fa <__divsf3_pse>:
    41fa:	99 23       	and	r25, r25
    41fc:	b1 f3       	breq	.-20     	; 0x41ea <__divsf3+0x1e>
    41fe:	55 23       	and	r21, r21
    4200:	91 f3       	breq	.-28     	; 0x41e6 <__divsf3+0x1a>
    4202:	95 1b       	sub	r25, r21
    4204:	55 0b       	sbc	r21, r21
    4206:	bb 27       	eor	r27, r27
    4208:	aa 27       	eor	r26, r26
    420a:	62 17       	cp	r22, r18
    420c:	73 07       	cpc	r23, r19
    420e:	84 07       	cpc	r24, r20
    4210:	38 f0       	brcs	.+14     	; 0x4220 <__divsf3_pse+0x26>
    4212:	9f 5f       	subi	r25, 0xFF	; 255
    4214:	5f 4f       	sbci	r21, 0xFF	; 255
    4216:	22 0f       	add	r18, r18
    4218:	33 1f       	adc	r19, r19
    421a:	44 1f       	adc	r20, r20
    421c:	aa 1f       	adc	r26, r26
    421e:	a9 f3       	breq	.-22     	; 0x420a <__divsf3_pse+0x10>
    4220:	35 d0       	rcall	.+106    	; 0x428c <__divsf3_pse+0x92>
    4222:	0e 2e       	mov	r0, r30
    4224:	3a f0       	brmi	.+14     	; 0x4234 <__divsf3_pse+0x3a>
    4226:	e0 e8       	ldi	r30, 0x80	; 128
    4228:	32 d0       	rcall	.+100    	; 0x428e <__divsf3_pse+0x94>
    422a:	91 50       	subi	r25, 0x01	; 1
    422c:	50 40       	sbci	r21, 0x00	; 0
    422e:	e6 95       	lsr	r30
    4230:	00 1c       	adc	r0, r0
    4232:	ca f7       	brpl	.-14     	; 0x4226 <__divsf3_pse+0x2c>
    4234:	2b d0       	rcall	.+86     	; 0x428c <__divsf3_pse+0x92>
    4236:	fe 2f       	mov	r31, r30
    4238:	29 d0       	rcall	.+82     	; 0x428c <__divsf3_pse+0x92>
    423a:	66 0f       	add	r22, r22
    423c:	77 1f       	adc	r23, r23
    423e:	88 1f       	adc	r24, r24
    4240:	bb 1f       	adc	r27, r27
    4242:	26 17       	cp	r18, r22
    4244:	37 07       	cpc	r19, r23
    4246:	48 07       	cpc	r20, r24
    4248:	ab 07       	cpc	r26, r27
    424a:	b0 e8       	ldi	r27, 0x80	; 128
    424c:	09 f0       	breq	.+2      	; 0x4250 <__divsf3_pse+0x56>
    424e:	bb 0b       	sbc	r27, r27
    4250:	80 2d       	mov	r24, r0
    4252:	bf 01       	movw	r22, r30
    4254:	ff 27       	eor	r31, r31
    4256:	93 58       	subi	r25, 0x83	; 131
    4258:	5f 4f       	sbci	r21, 0xFF	; 255
    425a:	3a f0       	brmi	.+14     	; 0x426a <__divsf3_pse+0x70>
    425c:	9e 3f       	cpi	r25, 0xFE	; 254
    425e:	51 05       	cpc	r21, r1
    4260:	78 f0       	brcs	.+30     	; 0x4280 <__divsf3_pse+0x86>
    4262:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    4266:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>
    426a:	5f 3f       	cpi	r21, 0xFF	; 255
    426c:	e4 f3       	brlt	.-8      	; 0x4266 <__divsf3_pse+0x6c>
    426e:	98 3e       	cpi	r25, 0xE8	; 232
    4270:	d4 f3       	brlt	.-12     	; 0x4266 <__divsf3_pse+0x6c>
    4272:	86 95       	lsr	r24
    4274:	77 95       	ror	r23
    4276:	67 95       	ror	r22
    4278:	b7 95       	ror	r27
    427a:	f7 95       	ror	r31
    427c:	9f 5f       	subi	r25, 0xFF	; 255
    427e:	c9 f7       	brne	.-14     	; 0x4272 <__divsf3_pse+0x78>
    4280:	88 0f       	add	r24, r24
    4282:	91 1d       	adc	r25, r1
    4284:	96 95       	lsr	r25
    4286:	87 95       	ror	r24
    4288:	97 f9       	bld	r25, 7
    428a:	08 95       	ret
    428c:	e1 e0       	ldi	r30, 0x01	; 1
    428e:	66 0f       	add	r22, r22
    4290:	77 1f       	adc	r23, r23
    4292:	88 1f       	adc	r24, r24
    4294:	bb 1f       	adc	r27, r27
    4296:	62 17       	cp	r22, r18
    4298:	73 07       	cpc	r23, r19
    429a:	84 07       	cpc	r24, r20
    429c:	ba 07       	cpc	r27, r26
    429e:	20 f0       	brcs	.+8      	; 0x42a8 <__divsf3_pse+0xae>
    42a0:	62 1b       	sub	r22, r18
    42a2:	73 0b       	sbc	r23, r19
    42a4:	84 0b       	sbc	r24, r20
    42a6:	ba 0b       	sbc	r27, r26
    42a8:	ee 1f       	adc	r30, r30
    42aa:	88 f7       	brcc	.-30     	; 0x428e <__divsf3_pse+0x94>
    42ac:	e0 95       	com	r30
    42ae:	08 95       	ret

000042b0 <__fixunssfsi>:
    42b0:	0e 94 18 22 	call	0x4430	; 0x4430 <__fp_splitA>
    42b4:	88 f0       	brcs	.+34     	; 0x42d8 <__fixunssfsi+0x28>
    42b6:	9f 57       	subi	r25, 0x7F	; 127
    42b8:	98 f0       	brcs	.+38     	; 0x42e0 <__fixunssfsi+0x30>
    42ba:	b9 2f       	mov	r27, r25
    42bc:	99 27       	eor	r25, r25
    42be:	b7 51       	subi	r27, 0x17	; 23
    42c0:	b0 f0       	brcs	.+44     	; 0x42ee <__fixunssfsi+0x3e>
    42c2:	e1 f0       	breq	.+56     	; 0x42fc <__fixunssfsi+0x4c>
    42c4:	66 0f       	add	r22, r22
    42c6:	77 1f       	adc	r23, r23
    42c8:	88 1f       	adc	r24, r24
    42ca:	99 1f       	adc	r25, r25
    42cc:	1a f0       	brmi	.+6      	; 0x42d4 <__fixunssfsi+0x24>
    42ce:	ba 95       	dec	r27
    42d0:	c9 f7       	brne	.-14     	; 0x42c4 <__fixunssfsi+0x14>
    42d2:	14 c0       	rjmp	.+40     	; 0x42fc <__fixunssfsi+0x4c>
    42d4:	b1 30       	cpi	r27, 0x01	; 1
    42d6:	91 f0       	breq	.+36     	; 0x42fc <__fixunssfsi+0x4c>
    42d8:	0e 94 32 22 	call	0x4464	; 0x4464 <__fp_zero>
    42dc:	b1 e0       	ldi	r27, 0x01	; 1
    42de:	08 95       	ret
    42e0:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__fp_zero>
    42e4:	67 2f       	mov	r22, r23
    42e6:	78 2f       	mov	r23, r24
    42e8:	88 27       	eor	r24, r24
    42ea:	b8 5f       	subi	r27, 0xF8	; 248
    42ec:	39 f0       	breq	.+14     	; 0x42fc <__fixunssfsi+0x4c>
    42ee:	b9 3f       	cpi	r27, 0xF9	; 249
    42f0:	cc f3       	brlt	.-14     	; 0x42e4 <__fixunssfsi+0x34>
    42f2:	86 95       	lsr	r24
    42f4:	77 95       	ror	r23
    42f6:	67 95       	ror	r22
    42f8:	b3 95       	inc	r27
    42fa:	d9 f7       	brne	.-10     	; 0x42f2 <__fixunssfsi+0x42>
    42fc:	3e f4       	brtc	.+14     	; 0x430c <__fixunssfsi+0x5c>
    42fe:	90 95       	com	r25
    4300:	80 95       	com	r24
    4302:	70 95       	com	r23
    4304:	61 95       	neg	r22
    4306:	7f 4f       	sbci	r23, 0xFF	; 255
    4308:	8f 4f       	sbci	r24, 0xFF	; 255
    430a:	9f 4f       	sbci	r25, 0xFF	; 255
    430c:	08 95       	ret

0000430e <__floatunsisf>:
    430e:	e8 94       	clt
    4310:	09 c0       	rjmp	.+18     	; 0x4324 <__floatsisf+0x12>

00004312 <__floatsisf>:
    4312:	97 fb       	bst	r25, 7
    4314:	3e f4       	brtc	.+14     	; 0x4324 <__floatsisf+0x12>
    4316:	90 95       	com	r25
    4318:	80 95       	com	r24
    431a:	70 95       	com	r23
    431c:	61 95       	neg	r22
    431e:	7f 4f       	sbci	r23, 0xFF	; 255
    4320:	8f 4f       	sbci	r24, 0xFF	; 255
    4322:	9f 4f       	sbci	r25, 0xFF	; 255
    4324:	99 23       	and	r25, r25
    4326:	a9 f0       	breq	.+42     	; 0x4352 <__floatsisf+0x40>
    4328:	f9 2f       	mov	r31, r25
    432a:	96 e9       	ldi	r25, 0x96	; 150
    432c:	bb 27       	eor	r27, r27
    432e:	93 95       	inc	r25
    4330:	f6 95       	lsr	r31
    4332:	87 95       	ror	r24
    4334:	77 95       	ror	r23
    4336:	67 95       	ror	r22
    4338:	b7 95       	ror	r27
    433a:	f1 11       	cpse	r31, r1
    433c:	f8 cf       	rjmp	.-16     	; 0x432e <__floatsisf+0x1c>
    433e:	fa f4       	brpl	.+62     	; 0x437e <__floatsisf+0x6c>
    4340:	bb 0f       	add	r27, r27
    4342:	11 f4       	brne	.+4      	; 0x4348 <__floatsisf+0x36>
    4344:	60 ff       	sbrs	r22, 0
    4346:	1b c0       	rjmp	.+54     	; 0x437e <__floatsisf+0x6c>
    4348:	6f 5f       	subi	r22, 0xFF	; 255
    434a:	7f 4f       	sbci	r23, 0xFF	; 255
    434c:	8f 4f       	sbci	r24, 0xFF	; 255
    434e:	9f 4f       	sbci	r25, 0xFF	; 255
    4350:	16 c0       	rjmp	.+44     	; 0x437e <__floatsisf+0x6c>
    4352:	88 23       	and	r24, r24
    4354:	11 f0       	breq	.+4      	; 0x435a <__floatsisf+0x48>
    4356:	96 e9       	ldi	r25, 0x96	; 150
    4358:	11 c0       	rjmp	.+34     	; 0x437c <__floatsisf+0x6a>
    435a:	77 23       	and	r23, r23
    435c:	21 f0       	breq	.+8      	; 0x4366 <__floatsisf+0x54>
    435e:	9e e8       	ldi	r25, 0x8E	; 142
    4360:	87 2f       	mov	r24, r23
    4362:	76 2f       	mov	r23, r22
    4364:	05 c0       	rjmp	.+10     	; 0x4370 <__floatsisf+0x5e>
    4366:	66 23       	and	r22, r22
    4368:	71 f0       	breq	.+28     	; 0x4386 <__floatsisf+0x74>
    436a:	96 e8       	ldi	r25, 0x86	; 134
    436c:	86 2f       	mov	r24, r22
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	60 e0       	ldi	r22, 0x00	; 0
    4372:	2a f0       	brmi	.+10     	; 0x437e <__floatsisf+0x6c>
    4374:	9a 95       	dec	r25
    4376:	66 0f       	add	r22, r22
    4378:	77 1f       	adc	r23, r23
    437a:	88 1f       	adc	r24, r24
    437c:	da f7       	brpl	.-10     	; 0x4374 <__floatsisf+0x62>
    437e:	88 0f       	add	r24, r24
    4380:	96 95       	lsr	r25
    4382:	87 95       	ror	r24
    4384:	97 f9       	bld	r25, 7
    4386:	08 95       	ret

00004388 <__fp_cmp>:
    4388:	99 0f       	add	r25, r25
    438a:	00 08       	sbc	r0, r0
    438c:	55 0f       	add	r21, r21
    438e:	aa 0b       	sbc	r26, r26
    4390:	e0 e8       	ldi	r30, 0x80	; 128
    4392:	fe ef       	ldi	r31, 0xFE	; 254
    4394:	16 16       	cp	r1, r22
    4396:	17 06       	cpc	r1, r23
    4398:	e8 07       	cpc	r30, r24
    439a:	f9 07       	cpc	r31, r25
    439c:	c0 f0       	brcs	.+48     	; 0x43ce <__fp_cmp+0x46>
    439e:	12 16       	cp	r1, r18
    43a0:	13 06       	cpc	r1, r19
    43a2:	e4 07       	cpc	r30, r20
    43a4:	f5 07       	cpc	r31, r21
    43a6:	98 f0       	brcs	.+38     	; 0x43ce <__fp_cmp+0x46>
    43a8:	62 1b       	sub	r22, r18
    43aa:	73 0b       	sbc	r23, r19
    43ac:	84 0b       	sbc	r24, r20
    43ae:	95 0b       	sbc	r25, r21
    43b0:	39 f4       	brne	.+14     	; 0x43c0 <__fp_cmp+0x38>
    43b2:	0a 26       	eor	r0, r26
    43b4:	61 f0       	breq	.+24     	; 0x43ce <__fp_cmp+0x46>
    43b6:	23 2b       	or	r18, r19
    43b8:	24 2b       	or	r18, r20
    43ba:	25 2b       	or	r18, r21
    43bc:	21 f4       	brne	.+8      	; 0x43c6 <__fp_cmp+0x3e>
    43be:	08 95       	ret
    43c0:	0a 26       	eor	r0, r26
    43c2:	09 f4       	brne	.+2      	; 0x43c6 <__fp_cmp+0x3e>
    43c4:	a1 40       	sbci	r26, 0x01	; 1
    43c6:	a6 95       	lsr	r26
    43c8:	8f ef       	ldi	r24, 0xFF	; 255
    43ca:	81 1d       	adc	r24, r1
    43cc:	81 1d       	adc	r24, r1
    43ce:	08 95       	ret

000043d0 <__fp_inf>:
    43d0:	97 f9       	bld	r25, 7
    43d2:	9f 67       	ori	r25, 0x7F	; 127
    43d4:	80 e8       	ldi	r24, 0x80	; 128
    43d6:	70 e0       	ldi	r23, 0x00	; 0
    43d8:	60 e0       	ldi	r22, 0x00	; 0
    43da:	08 95       	ret

000043dc <__fp_nan>:
    43dc:	9f ef       	ldi	r25, 0xFF	; 255
    43de:	80 ec       	ldi	r24, 0xC0	; 192
    43e0:	08 95       	ret

000043e2 <__fp_pscA>:
    43e2:	00 24       	eor	r0, r0
    43e4:	0a 94       	dec	r0
    43e6:	16 16       	cp	r1, r22
    43e8:	17 06       	cpc	r1, r23
    43ea:	18 06       	cpc	r1, r24
    43ec:	09 06       	cpc	r0, r25
    43ee:	08 95       	ret

000043f0 <__fp_pscB>:
    43f0:	00 24       	eor	r0, r0
    43f2:	0a 94       	dec	r0
    43f4:	12 16       	cp	r1, r18
    43f6:	13 06       	cpc	r1, r19
    43f8:	14 06       	cpc	r1, r20
    43fa:	05 06       	cpc	r0, r21
    43fc:	08 95       	ret

000043fe <__fp_round>:
    43fe:	09 2e       	mov	r0, r25
    4400:	03 94       	inc	r0
    4402:	00 0c       	add	r0, r0
    4404:	11 f4       	brne	.+4      	; 0x440a <__fp_round+0xc>
    4406:	88 23       	and	r24, r24
    4408:	52 f0       	brmi	.+20     	; 0x441e <__fp_round+0x20>
    440a:	bb 0f       	add	r27, r27
    440c:	40 f4       	brcc	.+16     	; 0x441e <__fp_round+0x20>
    440e:	bf 2b       	or	r27, r31
    4410:	11 f4       	brne	.+4      	; 0x4416 <__fp_round+0x18>
    4412:	60 ff       	sbrs	r22, 0
    4414:	04 c0       	rjmp	.+8      	; 0x441e <__fp_round+0x20>
    4416:	6f 5f       	subi	r22, 0xFF	; 255
    4418:	7f 4f       	sbci	r23, 0xFF	; 255
    441a:	8f 4f       	sbci	r24, 0xFF	; 255
    441c:	9f 4f       	sbci	r25, 0xFF	; 255
    441e:	08 95       	ret

00004420 <__fp_split3>:
    4420:	57 fd       	sbrc	r21, 7
    4422:	90 58       	subi	r25, 0x80	; 128
    4424:	44 0f       	add	r20, r20
    4426:	55 1f       	adc	r21, r21
    4428:	59 f0       	breq	.+22     	; 0x4440 <__fp_splitA+0x10>
    442a:	5f 3f       	cpi	r21, 0xFF	; 255
    442c:	71 f0       	breq	.+28     	; 0x444a <__fp_splitA+0x1a>
    442e:	47 95       	ror	r20

00004430 <__fp_splitA>:
    4430:	88 0f       	add	r24, r24
    4432:	97 fb       	bst	r25, 7
    4434:	99 1f       	adc	r25, r25
    4436:	61 f0       	breq	.+24     	; 0x4450 <__fp_splitA+0x20>
    4438:	9f 3f       	cpi	r25, 0xFF	; 255
    443a:	79 f0       	breq	.+30     	; 0x445a <__fp_splitA+0x2a>
    443c:	87 95       	ror	r24
    443e:	08 95       	ret
    4440:	12 16       	cp	r1, r18
    4442:	13 06       	cpc	r1, r19
    4444:	14 06       	cpc	r1, r20
    4446:	55 1f       	adc	r21, r21
    4448:	f2 cf       	rjmp	.-28     	; 0x442e <__fp_split3+0xe>
    444a:	46 95       	lsr	r20
    444c:	f1 df       	rcall	.-30     	; 0x4430 <__fp_splitA>
    444e:	08 c0       	rjmp	.+16     	; 0x4460 <__fp_splitA+0x30>
    4450:	16 16       	cp	r1, r22
    4452:	17 06       	cpc	r1, r23
    4454:	18 06       	cpc	r1, r24
    4456:	99 1f       	adc	r25, r25
    4458:	f1 cf       	rjmp	.-30     	; 0x443c <__fp_splitA+0xc>
    445a:	86 95       	lsr	r24
    445c:	71 05       	cpc	r23, r1
    445e:	61 05       	cpc	r22, r1
    4460:	08 94       	sec
    4462:	08 95       	ret

00004464 <__fp_zero>:
    4464:	e8 94       	clt

00004466 <__fp_szero>:
    4466:	bb 27       	eor	r27, r27
    4468:	66 27       	eor	r22, r22
    446a:	77 27       	eor	r23, r23
    446c:	cb 01       	movw	r24, r22
    446e:	97 f9       	bld	r25, 7
    4470:	08 95       	ret

00004472 <__gesf2>:
    4472:	0e 94 c4 21 	call	0x4388	; 0x4388 <__fp_cmp>
    4476:	08 f4       	brcc	.+2      	; 0x447a <__gesf2+0x8>
    4478:	8f ef       	ldi	r24, 0xFF	; 255
    447a:	08 95       	ret

0000447c <__mulsf3>:
    447c:	0e 94 51 22 	call	0x44a2	; 0x44a2 <__mulsf3x>
    4480:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__fp_round>
    4484:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__fp_pscA>
    4488:	38 f0       	brcs	.+14     	; 0x4498 <__mulsf3+0x1c>
    448a:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <__fp_pscB>
    448e:	20 f0       	brcs	.+8      	; 0x4498 <__mulsf3+0x1c>
    4490:	95 23       	and	r25, r21
    4492:	11 f0       	breq	.+4      	; 0x4498 <__mulsf3+0x1c>
    4494:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    4498:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__fp_nan>
    449c:	11 24       	eor	r1, r1
    449e:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>

000044a2 <__mulsf3x>:
    44a2:	0e 94 10 22 	call	0x4420	; 0x4420 <__fp_split3>
    44a6:	70 f3       	brcs	.-36     	; 0x4484 <__mulsf3+0x8>

000044a8 <__mulsf3_pse>:
    44a8:	95 9f       	mul	r25, r21
    44aa:	c1 f3       	breq	.-16     	; 0x449c <__mulsf3+0x20>
    44ac:	95 0f       	add	r25, r21
    44ae:	50 e0       	ldi	r21, 0x00	; 0
    44b0:	55 1f       	adc	r21, r21
    44b2:	62 9f       	mul	r22, r18
    44b4:	f0 01       	movw	r30, r0
    44b6:	72 9f       	mul	r23, r18
    44b8:	bb 27       	eor	r27, r27
    44ba:	f0 0d       	add	r31, r0
    44bc:	b1 1d       	adc	r27, r1
    44be:	63 9f       	mul	r22, r19
    44c0:	aa 27       	eor	r26, r26
    44c2:	f0 0d       	add	r31, r0
    44c4:	b1 1d       	adc	r27, r1
    44c6:	aa 1f       	adc	r26, r26
    44c8:	64 9f       	mul	r22, r20
    44ca:	66 27       	eor	r22, r22
    44cc:	b0 0d       	add	r27, r0
    44ce:	a1 1d       	adc	r26, r1
    44d0:	66 1f       	adc	r22, r22
    44d2:	82 9f       	mul	r24, r18
    44d4:	22 27       	eor	r18, r18
    44d6:	b0 0d       	add	r27, r0
    44d8:	a1 1d       	adc	r26, r1
    44da:	62 1f       	adc	r22, r18
    44dc:	73 9f       	mul	r23, r19
    44de:	b0 0d       	add	r27, r0
    44e0:	a1 1d       	adc	r26, r1
    44e2:	62 1f       	adc	r22, r18
    44e4:	83 9f       	mul	r24, r19
    44e6:	a0 0d       	add	r26, r0
    44e8:	61 1d       	adc	r22, r1
    44ea:	22 1f       	adc	r18, r18
    44ec:	74 9f       	mul	r23, r20
    44ee:	33 27       	eor	r19, r19
    44f0:	a0 0d       	add	r26, r0
    44f2:	61 1d       	adc	r22, r1
    44f4:	23 1f       	adc	r18, r19
    44f6:	84 9f       	mul	r24, r20
    44f8:	60 0d       	add	r22, r0
    44fa:	21 1d       	adc	r18, r1
    44fc:	82 2f       	mov	r24, r18
    44fe:	76 2f       	mov	r23, r22
    4500:	6a 2f       	mov	r22, r26
    4502:	11 24       	eor	r1, r1
    4504:	9f 57       	subi	r25, 0x7F	; 127
    4506:	50 40       	sbci	r21, 0x00	; 0
    4508:	9a f0       	brmi	.+38     	; 0x4530 <__mulsf3_pse+0x88>
    450a:	f1 f0       	breq	.+60     	; 0x4548 <__mulsf3_pse+0xa0>
    450c:	88 23       	and	r24, r24
    450e:	4a f0       	brmi	.+18     	; 0x4522 <__mulsf3_pse+0x7a>
    4510:	ee 0f       	add	r30, r30
    4512:	ff 1f       	adc	r31, r31
    4514:	bb 1f       	adc	r27, r27
    4516:	66 1f       	adc	r22, r22
    4518:	77 1f       	adc	r23, r23
    451a:	88 1f       	adc	r24, r24
    451c:	91 50       	subi	r25, 0x01	; 1
    451e:	50 40       	sbci	r21, 0x00	; 0
    4520:	a9 f7       	brne	.-22     	; 0x450c <__mulsf3_pse+0x64>
    4522:	9e 3f       	cpi	r25, 0xFE	; 254
    4524:	51 05       	cpc	r21, r1
    4526:	80 f0       	brcs	.+32     	; 0x4548 <__mulsf3_pse+0xa0>
    4528:	0c 94 e8 21 	jmp	0x43d0	; 0x43d0 <__fp_inf>
    452c:	0c 94 33 22 	jmp	0x4466	; 0x4466 <__fp_szero>
    4530:	5f 3f       	cpi	r21, 0xFF	; 255
    4532:	e4 f3       	brlt	.-8      	; 0x452c <__mulsf3_pse+0x84>
    4534:	98 3e       	cpi	r25, 0xE8	; 232
    4536:	d4 f3       	brlt	.-12     	; 0x452c <__mulsf3_pse+0x84>
    4538:	86 95       	lsr	r24
    453a:	77 95       	ror	r23
    453c:	67 95       	ror	r22
    453e:	b7 95       	ror	r27
    4540:	f7 95       	ror	r31
    4542:	e7 95       	ror	r30
    4544:	9f 5f       	subi	r25, 0xFF	; 255
    4546:	c1 f7       	brne	.-16     	; 0x4538 <__mulsf3_pse+0x90>
    4548:	fe 2b       	or	r31, r30
    454a:	88 0f       	add	r24, r24
    454c:	91 1d       	adc	r25, r1
    454e:	96 95       	lsr	r25
    4550:	87 95       	ror	r24
    4552:	97 f9       	bld	r25, 7
    4554:	08 95       	ret

00004556 <sprintf>:
    4556:	ae e0       	ldi	r26, 0x0E	; 14
    4558:	b0 e0       	ldi	r27, 0x00	; 0
    455a:	e1 eb       	ldi	r30, 0xB1	; 177
    455c:	f2 e2       	ldi	r31, 0x22	; 34
    455e:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <__prologue_saves__+0x1c>
    4562:	0d 89       	ldd	r16, Y+21	; 0x15
    4564:	1e 89       	ldd	r17, Y+22	; 0x16
    4566:	86 e0       	ldi	r24, 0x06	; 6
    4568:	8c 83       	std	Y+4, r24	; 0x04
    456a:	1a 83       	std	Y+2, r17	; 0x02
    456c:	09 83       	std	Y+1, r16	; 0x01
    456e:	8f ef       	ldi	r24, 0xFF	; 255
    4570:	9f e7       	ldi	r25, 0x7F	; 127
    4572:	9e 83       	std	Y+6, r25	; 0x06
    4574:	8d 83       	std	Y+5, r24	; 0x05
    4576:	ae 01       	movw	r20, r28
    4578:	47 5e       	subi	r20, 0xE7	; 231
    457a:	5f 4f       	sbci	r21, 0xFF	; 255
    457c:	6f 89       	ldd	r22, Y+23	; 0x17
    457e:	78 8d       	ldd	r23, Y+24	; 0x18
    4580:	ce 01       	movw	r24, r28
    4582:	01 96       	adiw	r24, 0x01	; 1
    4584:	0e 94 cd 22 	call	0x459a	; 0x459a <vfprintf>
    4588:	ef 81       	ldd	r30, Y+7	; 0x07
    458a:	f8 85       	ldd	r31, Y+8	; 0x08
    458c:	e0 0f       	add	r30, r16
    458e:	f1 1f       	adc	r31, r17
    4590:	10 82       	st	Z, r1
    4592:	2e 96       	adiw	r28, 0x0e	; 14
    4594:	e4 e0       	ldi	r30, 0x04	; 4
    4596:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <__epilogue_restores__+0x1c>

0000459a <vfprintf>:
    459a:	ab e0       	ldi	r26, 0x0B	; 11
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	e3 ed       	ldi	r30, 0xD3	; 211
    45a0:	f2 e2       	ldi	r31, 0x22	; 34
    45a2:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__prologue_saves__>
    45a6:	6c 01       	movw	r12, r24
    45a8:	7b 01       	movw	r14, r22
    45aa:	8a 01       	movw	r16, r20
    45ac:	fc 01       	movw	r30, r24
    45ae:	17 82       	std	Z+7, r1	; 0x07
    45b0:	16 82       	std	Z+6, r1	; 0x06
    45b2:	83 81       	ldd	r24, Z+3	; 0x03
    45b4:	81 ff       	sbrs	r24, 1
    45b6:	cc c1       	rjmp	.+920    	; 0x4950 <vfprintf+0x3b6>
    45b8:	ce 01       	movw	r24, r28
    45ba:	01 96       	adiw	r24, 0x01	; 1
    45bc:	3c 01       	movw	r6, r24
    45be:	f6 01       	movw	r30, r12
    45c0:	93 81       	ldd	r25, Z+3	; 0x03
    45c2:	f7 01       	movw	r30, r14
    45c4:	93 fd       	sbrc	r25, 3
    45c6:	85 91       	lpm	r24, Z+
    45c8:	93 ff       	sbrs	r25, 3
    45ca:	81 91       	ld	r24, Z+
    45cc:	7f 01       	movw	r14, r30
    45ce:	88 23       	and	r24, r24
    45d0:	09 f4       	brne	.+2      	; 0x45d4 <vfprintf+0x3a>
    45d2:	ba c1       	rjmp	.+884    	; 0x4948 <vfprintf+0x3ae>
    45d4:	85 32       	cpi	r24, 0x25	; 37
    45d6:	39 f4       	brne	.+14     	; 0x45e6 <vfprintf+0x4c>
    45d8:	93 fd       	sbrc	r25, 3
    45da:	85 91       	lpm	r24, Z+
    45dc:	93 ff       	sbrs	r25, 3
    45de:	81 91       	ld	r24, Z+
    45e0:	7f 01       	movw	r14, r30
    45e2:	85 32       	cpi	r24, 0x25	; 37
    45e4:	29 f4       	brne	.+10     	; 0x45f0 <vfprintf+0x56>
    45e6:	b6 01       	movw	r22, r12
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	0e 94 c4 24 	call	0x4988	; 0x4988 <fputc>
    45ee:	e7 cf       	rjmp	.-50     	; 0x45be <vfprintf+0x24>
    45f0:	91 2c       	mov	r9, r1
    45f2:	21 2c       	mov	r2, r1
    45f4:	31 2c       	mov	r3, r1
    45f6:	ff e1       	ldi	r31, 0x1F	; 31
    45f8:	f3 15       	cp	r31, r3
    45fa:	d8 f0       	brcs	.+54     	; 0x4632 <vfprintf+0x98>
    45fc:	8b 32       	cpi	r24, 0x2B	; 43
    45fe:	79 f0       	breq	.+30     	; 0x461e <vfprintf+0x84>
    4600:	38 f4       	brcc	.+14     	; 0x4610 <vfprintf+0x76>
    4602:	80 32       	cpi	r24, 0x20	; 32
    4604:	79 f0       	breq	.+30     	; 0x4624 <vfprintf+0x8a>
    4606:	83 32       	cpi	r24, 0x23	; 35
    4608:	a1 f4       	brne	.+40     	; 0x4632 <vfprintf+0x98>
    460a:	23 2d       	mov	r18, r3
    460c:	20 61       	ori	r18, 0x10	; 16
    460e:	1d c0       	rjmp	.+58     	; 0x464a <vfprintf+0xb0>
    4610:	8d 32       	cpi	r24, 0x2D	; 45
    4612:	61 f0       	breq	.+24     	; 0x462c <vfprintf+0x92>
    4614:	80 33       	cpi	r24, 0x30	; 48
    4616:	69 f4       	brne	.+26     	; 0x4632 <vfprintf+0x98>
    4618:	23 2d       	mov	r18, r3
    461a:	21 60       	ori	r18, 0x01	; 1
    461c:	16 c0       	rjmp	.+44     	; 0x464a <vfprintf+0xb0>
    461e:	83 2d       	mov	r24, r3
    4620:	82 60       	ori	r24, 0x02	; 2
    4622:	38 2e       	mov	r3, r24
    4624:	e3 2d       	mov	r30, r3
    4626:	e4 60       	ori	r30, 0x04	; 4
    4628:	3e 2e       	mov	r3, r30
    462a:	2a c0       	rjmp	.+84     	; 0x4680 <vfprintf+0xe6>
    462c:	f3 2d       	mov	r31, r3
    462e:	f8 60       	ori	r31, 0x08	; 8
    4630:	1d c0       	rjmp	.+58     	; 0x466c <vfprintf+0xd2>
    4632:	37 fc       	sbrc	r3, 7
    4634:	2d c0       	rjmp	.+90     	; 0x4690 <vfprintf+0xf6>
    4636:	20 ed       	ldi	r18, 0xD0	; 208
    4638:	28 0f       	add	r18, r24
    463a:	2a 30       	cpi	r18, 0x0A	; 10
    463c:	40 f0       	brcs	.+16     	; 0x464e <vfprintf+0xb4>
    463e:	8e 32       	cpi	r24, 0x2E	; 46
    4640:	b9 f4       	brne	.+46     	; 0x4670 <vfprintf+0xd6>
    4642:	36 fc       	sbrc	r3, 6
    4644:	81 c1       	rjmp	.+770    	; 0x4948 <vfprintf+0x3ae>
    4646:	23 2d       	mov	r18, r3
    4648:	20 64       	ori	r18, 0x40	; 64
    464a:	32 2e       	mov	r3, r18
    464c:	19 c0       	rjmp	.+50     	; 0x4680 <vfprintf+0xe6>
    464e:	36 fe       	sbrs	r3, 6
    4650:	06 c0       	rjmp	.+12     	; 0x465e <vfprintf+0xc4>
    4652:	8a e0       	ldi	r24, 0x0A	; 10
    4654:	98 9e       	mul	r9, r24
    4656:	20 0d       	add	r18, r0
    4658:	11 24       	eor	r1, r1
    465a:	92 2e       	mov	r9, r18
    465c:	11 c0       	rjmp	.+34     	; 0x4680 <vfprintf+0xe6>
    465e:	ea e0       	ldi	r30, 0x0A	; 10
    4660:	2e 9e       	mul	r2, r30
    4662:	20 0d       	add	r18, r0
    4664:	11 24       	eor	r1, r1
    4666:	22 2e       	mov	r2, r18
    4668:	f3 2d       	mov	r31, r3
    466a:	f0 62       	ori	r31, 0x20	; 32
    466c:	3f 2e       	mov	r3, r31
    466e:	08 c0       	rjmp	.+16     	; 0x4680 <vfprintf+0xe6>
    4670:	8c 36       	cpi	r24, 0x6C	; 108
    4672:	21 f4       	brne	.+8      	; 0x467c <vfprintf+0xe2>
    4674:	83 2d       	mov	r24, r3
    4676:	80 68       	ori	r24, 0x80	; 128
    4678:	38 2e       	mov	r3, r24
    467a:	02 c0       	rjmp	.+4      	; 0x4680 <vfprintf+0xe6>
    467c:	88 36       	cpi	r24, 0x68	; 104
    467e:	41 f4       	brne	.+16     	; 0x4690 <vfprintf+0xf6>
    4680:	f7 01       	movw	r30, r14
    4682:	93 fd       	sbrc	r25, 3
    4684:	85 91       	lpm	r24, Z+
    4686:	93 ff       	sbrs	r25, 3
    4688:	81 91       	ld	r24, Z+
    468a:	7f 01       	movw	r14, r30
    468c:	81 11       	cpse	r24, r1
    468e:	b3 cf       	rjmp	.-154    	; 0x45f6 <vfprintf+0x5c>
    4690:	98 2f       	mov	r25, r24
    4692:	9f 7d       	andi	r25, 0xDF	; 223
    4694:	95 54       	subi	r25, 0x45	; 69
    4696:	93 30       	cpi	r25, 0x03	; 3
    4698:	28 f4       	brcc	.+10     	; 0x46a4 <vfprintf+0x10a>
    469a:	0c 5f       	subi	r16, 0xFC	; 252
    469c:	1f 4f       	sbci	r17, 0xFF	; 255
    469e:	9f e3       	ldi	r25, 0x3F	; 63
    46a0:	99 83       	std	Y+1, r25	; 0x01
    46a2:	0d c0       	rjmp	.+26     	; 0x46be <vfprintf+0x124>
    46a4:	83 36       	cpi	r24, 0x63	; 99
    46a6:	31 f0       	breq	.+12     	; 0x46b4 <vfprintf+0x11a>
    46a8:	83 37       	cpi	r24, 0x73	; 115
    46aa:	71 f0       	breq	.+28     	; 0x46c8 <vfprintf+0x12e>
    46ac:	83 35       	cpi	r24, 0x53	; 83
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <vfprintf+0x118>
    46b0:	59 c0       	rjmp	.+178    	; 0x4764 <vfprintf+0x1ca>
    46b2:	21 c0       	rjmp	.+66     	; 0x46f6 <vfprintf+0x15c>
    46b4:	f8 01       	movw	r30, r16
    46b6:	80 81       	ld	r24, Z
    46b8:	89 83       	std	Y+1, r24	; 0x01
    46ba:	0e 5f       	subi	r16, 0xFE	; 254
    46bc:	1f 4f       	sbci	r17, 0xFF	; 255
    46be:	88 24       	eor	r8, r8
    46c0:	83 94       	inc	r8
    46c2:	91 2c       	mov	r9, r1
    46c4:	53 01       	movw	r10, r6
    46c6:	13 c0       	rjmp	.+38     	; 0x46ee <vfprintf+0x154>
    46c8:	28 01       	movw	r4, r16
    46ca:	f2 e0       	ldi	r31, 0x02	; 2
    46cc:	4f 0e       	add	r4, r31
    46ce:	51 1c       	adc	r5, r1
    46d0:	f8 01       	movw	r30, r16
    46d2:	a0 80       	ld	r10, Z
    46d4:	b1 80       	ldd	r11, Z+1	; 0x01
    46d6:	36 fe       	sbrs	r3, 6
    46d8:	03 c0       	rjmp	.+6      	; 0x46e0 <vfprintf+0x146>
    46da:	69 2d       	mov	r22, r9
    46dc:	70 e0       	ldi	r23, 0x00	; 0
    46de:	02 c0       	rjmp	.+4      	; 0x46e4 <vfprintf+0x14a>
    46e0:	6f ef       	ldi	r22, 0xFF	; 255
    46e2:	7f ef       	ldi	r23, 0xFF	; 255
    46e4:	c5 01       	movw	r24, r10
    46e6:	0e 94 b9 24 	call	0x4972	; 0x4972 <strnlen>
    46ea:	4c 01       	movw	r8, r24
    46ec:	82 01       	movw	r16, r4
    46ee:	f3 2d       	mov	r31, r3
    46f0:	ff 77       	andi	r31, 0x7F	; 127
    46f2:	3f 2e       	mov	r3, r31
    46f4:	16 c0       	rjmp	.+44     	; 0x4722 <vfprintf+0x188>
    46f6:	28 01       	movw	r4, r16
    46f8:	22 e0       	ldi	r18, 0x02	; 2
    46fa:	42 0e       	add	r4, r18
    46fc:	51 1c       	adc	r5, r1
    46fe:	f8 01       	movw	r30, r16
    4700:	a0 80       	ld	r10, Z
    4702:	b1 80       	ldd	r11, Z+1	; 0x01
    4704:	36 fe       	sbrs	r3, 6
    4706:	03 c0       	rjmp	.+6      	; 0x470e <vfprintf+0x174>
    4708:	69 2d       	mov	r22, r9
    470a:	70 e0       	ldi	r23, 0x00	; 0
    470c:	02 c0       	rjmp	.+4      	; 0x4712 <vfprintf+0x178>
    470e:	6f ef       	ldi	r22, 0xFF	; 255
    4710:	7f ef       	ldi	r23, 0xFF	; 255
    4712:	c5 01       	movw	r24, r10
    4714:	0e 94 ae 24 	call	0x495c	; 0x495c <strnlen_P>
    4718:	4c 01       	movw	r8, r24
    471a:	f3 2d       	mov	r31, r3
    471c:	f0 68       	ori	r31, 0x80	; 128
    471e:	3f 2e       	mov	r3, r31
    4720:	82 01       	movw	r16, r4
    4722:	33 fc       	sbrc	r3, 3
    4724:	1b c0       	rjmp	.+54     	; 0x475c <vfprintf+0x1c2>
    4726:	82 2d       	mov	r24, r2
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	88 16       	cp	r8, r24
    472c:	99 06       	cpc	r9, r25
    472e:	b0 f4       	brcc	.+44     	; 0x475c <vfprintf+0x1c2>
    4730:	b6 01       	movw	r22, r12
    4732:	80 e2       	ldi	r24, 0x20	; 32
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	0e 94 c4 24 	call	0x4988	; 0x4988 <fputc>
    473a:	2a 94       	dec	r2
    473c:	f4 cf       	rjmp	.-24     	; 0x4726 <vfprintf+0x18c>
    473e:	f5 01       	movw	r30, r10
    4740:	37 fc       	sbrc	r3, 7
    4742:	85 91       	lpm	r24, Z+
    4744:	37 fe       	sbrs	r3, 7
    4746:	81 91       	ld	r24, Z+
    4748:	5f 01       	movw	r10, r30
    474a:	b6 01       	movw	r22, r12
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	0e 94 c4 24 	call	0x4988	; 0x4988 <fputc>
    4752:	21 10       	cpse	r2, r1
    4754:	2a 94       	dec	r2
    4756:	21 e0       	ldi	r18, 0x01	; 1
    4758:	82 1a       	sub	r8, r18
    475a:	91 08       	sbc	r9, r1
    475c:	81 14       	cp	r8, r1
    475e:	91 04       	cpc	r9, r1
    4760:	71 f7       	brne	.-36     	; 0x473e <vfprintf+0x1a4>
    4762:	e8 c0       	rjmp	.+464    	; 0x4934 <vfprintf+0x39a>
    4764:	84 36       	cpi	r24, 0x64	; 100
    4766:	11 f0       	breq	.+4      	; 0x476c <vfprintf+0x1d2>
    4768:	89 36       	cpi	r24, 0x69	; 105
    476a:	41 f5       	brne	.+80     	; 0x47bc <vfprintf+0x222>
    476c:	f8 01       	movw	r30, r16
    476e:	37 fe       	sbrs	r3, 7
    4770:	07 c0       	rjmp	.+14     	; 0x4780 <vfprintf+0x1e6>
    4772:	60 81       	ld	r22, Z
    4774:	71 81       	ldd	r23, Z+1	; 0x01
    4776:	82 81       	ldd	r24, Z+2	; 0x02
    4778:	93 81       	ldd	r25, Z+3	; 0x03
    477a:	0c 5f       	subi	r16, 0xFC	; 252
    477c:	1f 4f       	sbci	r17, 0xFF	; 255
    477e:	08 c0       	rjmp	.+16     	; 0x4790 <vfprintf+0x1f6>
    4780:	60 81       	ld	r22, Z
    4782:	71 81       	ldd	r23, Z+1	; 0x01
    4784:	07 2e       	mov	r0, r23
    4786:	00 0c       	add	r0, r0
    4788:	88 0b       	sbc	r24, r24
    478a:	99 0b       	sbc	r25, r25
    478c:	0e 5f       	subi	r16, 0xFE	; 254
    478e:	1f 4f       	sbci	r17, 0xFF	; 255
    4790:	f3 2d       	mov	r31, r3
    4792:	ff 76       	andi	r31, 0x6F	; 111
    4794:	3f 2e       	mov	r3, r31
    4796:	97 ff       	sbrs	r25, 7
    4798:	09 c0       	rjmp	.+18     	; 0x47ac <vfprintf+0x212>
    479a:	90 95       	com	r25
    479c:	80 95       	com	r24
    479e:	70 95       	com	r23
    47a0:	61 95       	neg	r22
    47a2:	7f 4f       	sbci	r23, 0xFF	; 255
    47a4:	8f 4f       	sbci	r24, 0xFF	; 255
    47a6:	9f 4f       	sbci	r25, 0xFF	; 255
    47a8:	f0 68       	ori	r31, 0x80	; 128
    47aa:	3f 2e       	mov	r3, r31
    47ac:	2a e0       	ldi	r18, 0x0A	; 10
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	a3 01       	movw	r20, r6
    47b2:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__ultoa_invert>
    47b6:	88 2e       	mov	r8, r24
    47b8:	86 18       	sub	r8, r6
    47ba:	45 c0       	rjmp	.+138    	; 0x4846 <vfprintf+0x2ac>
    47bc:	85 37       	cpi	r24, 0x75	; 117
    47be:	31 f4       	brne	.+12     	; 0x47cc <vfprintf+0x232>
    47c0:	23 2d       	mov	r18, r3
    47c2:	2f 7e       	andi	r18, 0xEF	; 239
    47c4:	b2 2e       	mov	r11, r18
    47c6:	2a e0       	ldi	r18, 0x0A	; 10
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	25 c0       	rjmp	.+74     	; 0x4816 <vfprintf+0x27c>
    47cc:	93 2d       	mov	r25, r3
    47ce:	99 7f       	andi	r25, 0xF9	; 249
    47d0:	b9 2e       	mov	r11, r25
    47d2:	8f 36       	cpi	r24, 0x6F	; 111
    47d4:	c1 f0       	breq	.+48     	; 0x4806 <vfprintf+0x26c>
    47d6:	18 f4       	brcc	.+6      	; 0x47de <vfprintf+0x244>
    47d8:	88 35       	cpi	r24, 0x58	; 88
    47da:	79 f0       	breq	.+30     	; 0x47fa <vfprintf+0x260>
    47dc:	b5 c0       	rjmp	.+362    	; 0x4948 <vfprintf+0x3ae>
    47de:	80 37       	cpi	r24, 0x70	; 112
    47e0:	19 f0       	breq	.+6      	; 0x47e8 <vfprintf+0x24e>
    47e2:	88 37       	cpi	r24, 0x78	; 120
    47e4:	21 f0       	breq	.+8      	; 0x47ee <vfprintf+0x254>
    47e6:	b0 c0       	rjmp	.+352    	; 0x4948 <vfprintf+0x3ae>
    47e8:	e9 2f       	mov	r30, r25
    47ea:	e0 61       	ori	r30, 0x10	; 16
    47ec:	be 2e       	mov	r11, r30
    47ee:	b4 fe       	sbrs	r11, 4
    47f0:	0d c0       	rjmp	.+26     	; 0x480c <vfprintf+0x272>
    47f2:	fb 2d       	mov	r31, r11
    47f4:	f4 60       	ori	r31, 0x04	; 4
    47f6:	bf 2e       	mov	r11, r31
    47f8:	09 c0       	rjmp	.+18     	; 0x480c <vfprintf+0x272>
    47fa:	34 fe       	sbrs	r3, 4
    47fc:	0a c0       	rjmp	.+20     	; 0x4812 <vfprintf+0x278>
    47fe:	29 2f       	mov	r18, r25
    4800:	26 60       	ori	r18, 0x06	; 6
    4802:	b2 2e       	mov	r11, r18
    4804:	06 c0       	rjmp	.+12     	; 0x4812 <vfprintf+0x278>
    4806:	28 e0       	ldi	r18, 0x08	; 8
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	05 c0       	rjmp	.+10     	; 0x4816 <vfprintf+0x27c>
    480c:	20 e1       	ldi	r18, 0x10	; 16
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <vfprintf+0x27c>
    4812:	20 e1       	ldi	r18, 0x10	; 16
    4814:	32 e0       	ldi	r19, 0x02	; 2
    4816:	f8 01       	movw	r30, r16
    4818:	b7 fe       	sbrs	r11, 7
    481a:	07 c0       	rjmp	.+14     	; 0x482a <vfprintf+0x290>
    481c:	60 81       	ld	r22, Z
    481e:	71 81       	ldd	r23, Z+1	; 0x01
    4820:	82 81       	ldd	r24, Z+2	; 0x02
    4822:	93 81       	ldd	r25, Z+3	; 0x03
    4824:	0c 5f       	subi	r16, 0xFC	; 252
    4826:	1f 4f       	sbci	r17, 0xFF	; 255
    4828:	06 c0       	rjmp	.+12     	; 0x4836 <vfprintf+0x29c>
    482a:	60 81       	ld	r22, Z
    482c:	71 81       	ldd	r23, Z+1	; 0x01
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	0e 5f       	subi	r16, 0xFE	; 254
    4834:	1f 4f       	sbci	r17, 0xFF	; 255
    4836:	a3 01       	movw	r20, r6
    4838:	0e 94 00 25 	call	0x4a00	; 0x4a00 <__ultoa_invert>
    483c:	88 2e       	mov	r8, r24
    483e:	86 18       	sub	r8, r6
    4840:	fb 2d       	mov	r31, r11
    4842:	ff 77       	andi	r31, 0x7F	; 127
    4844:	3f 2e       	mov	r3, r31
    4846:	36 fe       	sbrs	r3, 6
    4848:	0d c0       	rjmp	.+26     	; 0x4864 <vfprintf+0x2ca>
    484a:	23 2d       	mov	r18, r3
    484c:	2e 7f       	andi	r18, 0xFE	; 254
    484e:	a2 2e       	mov	r10, r18
    4850:	89 14       	cp	r8, r9
    4852:	58 f4       	brcc	.+22     	; 0x486a <vfprintf+0x2d0>
    4854:	34 fe       	sbrs	r3, 4
    4856:	0b c0       	rjmp	.+22     	; 0x486e <vfprintf+0x2d4>
    4858:	32 fc       	sbrc	r3, 2
    485a:	09 c0       	rjmp	.+18     	; 0x486e <vfprintf+0x2d4>
    485c:	83 2d       	mov	r24, r3
    485e:	8e 7e       	andi	r24, 0xEE	; 238
    4860:	a8 2e       	mov	r10, r24
    4862:	05 c0       	rjmp	.+10     	; 0x486e <vfprintf+0x2d4>
    4864:	b8 2c       	mov	r11, r8
    4866:	a3 2c       	mov	r10, r3
    4868:	03 c0       	rjmp	.+6      	; 0x4870 <vfprintf+0x2d6>
    486a:	b8 2c       	mov	r11, r8
    486c:	01 c0       	rjmp	.+2      	; 0x4870 <vfprintf+0x2d6>
    486e:	b9 2c       	mov	r11, r9
    4870:	a4 fe       	sbrs	r10, 4
    4872:	0f c0       	rjmp	.+30     	; 0x4892 <vfprintf+0x2f8>
    4874:	fe 01       	movw	r30, r28
    4876:	e8 0d       	add	r30, r8
    4878:	f1 1d       	adc	r31, r1
    487a:	80 81       	ld	r24, Z
    487c:	80 33       	cpi	r24, 0x30	; 48
    487e:	21 f4       	brne	.+8      	; 0x4888 <vfprintf+0x2ee>
    4880:	9a 2d       	mov	r25, r10
    4882:	99 7e       	andi	r25, 0xE9	; 233
    4884:	a9 2e       	mov	r10, r25
    4886:	09 c0       	rjmp	.+18     	; 0x489a <vfprintf+0x300>
    4888:	a2 fe       	sbrs	r10, 2
    488a:	06 c0       	rjmp	.+12     	; 0x4898 <vfprintf+0x2fe>
    488c:	b3 94       	inc	r11
    488e:	b3 94       	inc	r11
    4890:	04 c0       	rjmp	.+8      	; 0x489a <vfprintf+0x300>
    4892:	8a 2d       	mov	r24, r10
    4894:	86 78       	andi	r24, 0x86	; 134
    4896:	09 f0       	breq	.+2      	; 0x489a <vfprintf+0x300>
    4898:	b3 94       	inc	r11
    489a:	a3 fc       	sbrc	r10, 3
    489c:	11 c0       	rjmp	.+34     	; 0x48c0 <vfprintf+0x326>
    489e:	a0 fe       	sbrs	r10, 0
    48a0:	06 c0       	rjmp	.+12     	; 0x48ae <vfprintf+0x314>
    48a2:	b2 14       	cp	r11, r2
    48a4:	88 f4       	brcc	.+34     	; 0x48c8 <vfprintf+0x32e>
    48a6:	28 0c       	add	r2, r8
    48a8:	92 2c       	mov	r9, r2
    48aa:	9b 18       	sub	r9, r11
    48ac:	0e c0       	rjmp	.+28     	; 0x48ca <vfprintf+0x330>
    48ae:	b2 14       	cp	r11, r2
    48b0:	60 f4       	brcc	.+24     	; 0x48ca <vfprintf+0x330>
    48b2:	b6 01       	movw	r22, r12
    48b4:	80 e2       	ldi	r24, 0x20	; 32
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	0e 94 c4 24 	call	0x4988	; 0x4988 <fputc>
    48bc:	b3 94       	inc	r11
    48be:	f7 cf       	rjmp	.-18     	; 0x48ae <vfprintf+0x314>
    48c0:	b2 14       	cp	r11, r2
    48c2:	18 f4       	brcc	.+6      	; 0x48ca <vfprintf+0x330>
    48c4:	2b 18       	sub	r2, r11
    48c6:	02 c0       	rjmp	.+4      	; 0x48cc <vfprintf+0x332>
    48c8:	98 2c       	mov	r9, r8
    48ca:	21 2c       	mov	r2, r1
    48cc:	a4 fe       	sbrs	r10, 4
    48ce:	10 c0       	rjmp	.+32     	; 0x48f0 <vfprintf+0x356>
    48d0:	b6 01       	movw	r22, r12
    48d2:	80 e3       	ldi	r24, 0x30	; 48
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	0e 94 c4 24 	call	0x4988	; 0x4988 <fputc>
    48da:	a2 fe       	sbrs	r10, 2
    48dc:	17 c0       	rjmp	.+46     	; 0x490c <vfprintf+0x372>
    48de:	a1 fc       	sbrc	r10, 1
    48e0:	03 c0       	rjmp	.+6      	; 0x48e8 <vfprintf+0x34e>
    48e2:	88 e7       	ldi	r24, 0x78	; 120
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	02 c0       	rjmp	.+4      	; 0x48ec <vfprintf+0x352>
    48e8:	88 e5       	ldi	r24, 0x58	; 88
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	b6 01       	movw	r22, r12
    48ee:	0c c0       	rjmp	.+24     	; 0x4908 <vfprintf+0x36e>
    48f0:	8a 2d       	mov	r24, r10
    48f2:	86 78       	andi	r24, 0x86	; 134
    48f4:	59 f0       	breq	.+22     	; 0x490c <vfprintf+0x372>
    48f6:	a1 fe       	sbrs	r10, 1
    48f8:	02 c0       	rjmp	.+4      	; 0x48fe <vfprintf+0x364>
    48fa:	8b e2       	ldi	r24, 0x2B	; 43
    48fc:	01 c0       	rjmp	.+2      	; 0x4900 <vfprintf+0x366>
    48fe:	80 e2       	ldi	r24, 0x20	; 32
    4900:	a7 fc       	sbrc	r10, 7
    4902:	8d e2       	ldi	r24, 0x2D	; 45
    4904:	b6 01       	movw	r22, r12
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	0e 94 c4 24 	call	0x4988	; 0x4988 <fputc>
    490c:	89 14       	cp	r8, r9
    490e:	38 f4       	brcc	.+14     	; 0x491e <vfprintf+0x384>
    4910:	b6 01       	movw	r22, r12
    4912:	80 e3       	ldi	r24, 0x30	; 48
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	0e 94 c4 24 	call	0x4988	; 0x4988 <fputc>
    491a:	9a 94       	dec	r9
    491c:	f7 cf       	rjmp	.-18     	; 0x490c <vfprintf+0x372>
    491e:	8a 94       	dec	r8
    4920:	f3 01       	movw	r30, r6
    4922:	e8 0d       	add	r30, r8
    4924:	f1 1d       	adc	r31, r1
    4926:	80 81       	ld	r24, Z
    4928:	b6 01       	movw	r22, r12
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	0e 94 c4 24 	call	0x4988	; 0x4988 <fputc>
    4930:	81 10       	cpse	r8, r1
    4932:	f5 cf       	rjmp	.-22     	; 0x491e <vfprintf+0x384>
    4934:	22 20       	and	r2, r2
    4936:	09 f4       	brne	.+2      	; 0x493a <vfprintf+0x3a0>
    4938:	42 ce       	rjmp	.-892    	; 0x45be <vfprintf+0x24>
    493a:	b6 01       	movw	r22, r12
    493c:	80 e2       	ldi	r24, 0x20	; 32
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	0e 94 c4 24 	call	0x4988	; 0x4988 <fputc>
    4944:	2a 94       	dec	r2
    4946:	f6 cf       	rjmp	.-20     	; 0x4934 <vfprintf+0x39a>
    4948:	f6 01       	movw	r30, r12
    494a:	86 81       	ldd	r24, Z+6	; 0x06
    494c:	97 81       	ldd	r25, Z+7	; 0x07
    494e:	02 c0       	rjmp	.+4      	; 0x4954 <vfprintf+0x3ba>
    4950:	8f ef       	ldi	r24, 0xFF	; 255
    4952:	9f ef       	ldi	r25, 0xFF	; 255
    4954:	2b 96       	adiw	r28, 0x0b	; 11
    4956:	e2 e1       	ldi	r30, 0x12	; 18
    4958:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__epilogue_restores__>

0000495c <strnlen_P>:
    495c:	fc 01       	movw	r30, r24
    495e:	05 90       	lpm	r0, Z+
    4960:	61 50       	subi	r22, 0x01	; 1
    4962:	70 40       	sbci	r23, 0x00	; 0
    4964:	01 10       	cpse	r0, r1
    4966:	d8 f7       	brcc	.-10     	; 0x495e <strnlen_P+0x2>
    4968:	80 95       	com	r24
    496a:	90 95       	com	r25
    496c:	8e 0f       	add	r24, r30
    496e:	9f 1f       	adc	r25, r31
    4970:	08 95       	ret

00004972 <strnlen>:
    4972:	fc 01       	movw	r30, r24
    4974:	61 50       	subi	r22, 0x01	; 1
    4976:	70 40       	sbci	r23, 0x00	; 0
    4978:	01 90       	ld	r0, Z+
    497a:	01 10       	cpse	r0, r1
    497c:	d8 f7       	brcc	.-10     	; 0x4974 <strnlen+0x2>
    497e:	80 95       	com	r24
    4980:	90 95       	com	r25
    4982:	8e 0f       	add	r24, r30
    4984:	9f 1f       	adc	r25, r31
    4986:	08 95       	ret

00004988 <fputc>:
    4988:	0f 93       	push	r16
    498a:	1f 93       	push	r17
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	fb 01       	movw	r30, r22
    4992:	23 81       	ldd	r18, Z+3	; 0x03
    4994:	21 fd       	sbrc	r18, 1
    4996:	03 c0       	rjmp	.+6      	; 0x499e <fputc+0x16>
    4998:	8f ef       	ldi	r24, 0xFF	; 255
    499a:	9f ef       	ldi	r25, 0xFF	; 255
    499c:	2c c0       	rjmp	.+88     	; 0x49f6 <fputc+0x6e>
    499e:	22 ff       	sbrs	r18, 2
    49a0:	16 c0       	rjmp	.+44     	; 0x49ce <fputc+0x46>
    49a2:	46 81       	ldd	r20, Z+6	; 0x06
    49a4:	57 81       	ldd	r21, Z+7	; 0x07
    49a6:	24 81       	ldd	r18, Z+4	; 0x04
    49a8:	35 81       	ldd	r19, Z+5	; 0x05
    49aa:	42 17       	cp	r20, r18
    49ac:	53 07       	cpc	r21, r19
    49ae:	44 f4       	brge	.+16     	; 0x49c0 <fputc+0x38>
    49b0:	a0 81       	ld	r26, Z
    49b2:	b1 81       	ldd	r27, Z+1	; 0x01
    49b4:	9d 01       	movw	r18, r26
    49b6:	2f 5f       	subi	r18, 0xFF	; 255
    49b8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ba:	31 83       	std	Z+1, r19	; 0x01
    49bc:	20 83       	st	Z, r18
    49be:	8c 93       	st	X, r24
    49c0:	26 81       	ldd	r18, Z+6	; 0x06
    49c2:	37 81       	ldd	r19, Z+7	; 0x07
    49c4:	2f 5f       	subi	r18, 0xFF	; 255
    49c6:	3f 4f       	sbci	r19, 0xFF	; 255
    49c8:	37 83       	std	Z+7, r19	; 0x07
    49ca:	26 83       	std	Z+6, r18	; 0x06
    49cc:	14 c0       	rjmp	.+40     	; 0x49f6 <fputc+0x6e>
    49ce:	8b 01       	movw	r16, r22
    49d0:	ec 01       	movw	r28, r24
    49d2:	fb 01       	movw	r30, r22
    49d4:	00 84       	ldd	r0, Z+8	; 0x08
    49d6:	f1 85       	ldd	r31, Z+9	; 0x09
    49d8:	e0 2d       	mov	r30, r0
    49da:	09 95       	icall
    49dc:	89 2b       	or	r24, r25
    49de:	e1 f6       	brne	.-72     	; 0x4998 <fputc+0x10>
    49e0:	d8 01       	movw	r26, r16
    49e2:	16 96       	adiw	r26, 0x06	; 6
    49e4:	8d 91       	ld	r24, X+
    49e6:	9c 91       	ld	r25, X
    49e8:	17 97       	sbiw	r26, 0x07	; 7
    49ea:	01 96       	adiw	r24, 0x01	; 1
    49ec:	17 96       	adiw	r26, 0x07	; 7
    49ee:	9c 93       	st	X, r25
    49f0:	8e 93       	st	-X, r24
    49f2:	16 97       	sbiw	r26, 0x06	; 6
    49f4:	ce 01       	movw	r24, r28
    49f6:	df 91       	pop	r29
    49f8:	cf 91       	pop	r28
    49fa:	1f 91       	pop	r17
    49fc:	0f 91       	pop	r16
    49fe:	08 95       	ret

00004a00 <__ultoa_invert>:
    4a00:	fa 01       	movw	r30, r20
    4a02:	aa 27       	eor	r26, r26
    4a04:	28 30       	cpi	r18, 0x08	; 8
    4a06:	51 f1       	breq	.+84     	; 0x4a5c <__ultoa_invert+0x5c>
    4a08:	20 31       	cpi	r18, 0x10	; 16
    4a0a:	81 f1       	breq	.+96     	; 0x4a6c <__ultoa_invert+0x6c>
    4a0c:	e8 94       	clt
    4a0e:	6f 93       	push	r22
    4a10:	6e 7f       	andi	r22, 0xFE	; 254
    4a12:	6e 5f       	subi	r22, 0xFE	; 254
    4a14:	7f 4f       	sbci	r23, 0xFF	; 255
    4a16:	8f 4f       	sbci	r24, 0xFF	; 255
    4a18:	9f 4f       	sbci	r25, 0xFF	; 255
    4a1a:	af 4f       	sbci	r26, 0xFF	; 255
    4a1c:	b1 e0       	ldi	r27, 0x01	; 1
    4a1e:	3e d0       	rcall	.+124    	; 0x4a9c <__ultoa_invert+0x9c>
    4a20:	b4 e0       	ldi	r27, 0x04	; 4
    4a22:	3c d0       	rcall	.+120    	; 0x4a9c <__ultoa_invert+0x9c>
    4a24:	67 0f       	add	r22, r23
    4a26:	78 1f       	adc	r23, r24
    4a28:	89 1f       	adc	r24, r25
    4a2a:	9a 1f       	adc	r25, r26
    4a2c:	a1 1d       	adc	r26, r1
    4a2e:	68 0f       	add	r22, r24
    4a30:	79 1f       	adc	r23, r25
    4a32:	8a 1f       	adc	r24, r26
    4a34:	91 1d       	adc	r25, r1
    4a36:	a1 1d       	adc	r26, r1
    4a38:	6a 0f       	add	r22, r26
    4a3a:	71 1d       	adc	r23, r1
    4a3c:	81 1d       	adc	r24, r1
    4a3e:	91 1d       	adc	r25, r1
    4a40:	a1 1d       	adc	r26, r1
    4a42:	20 d0       	rcall	.+64     	; 0x4a84 <__ultoa_invert+0x84>
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <__ultoa_invert+0x48>
    4a46:	68 94       	set
    4a48:	3f 91       	pop	r19
    4a4a:	2a e0       	ldi	r18, 0x0A	; 10
    4a4c:	26 9f       	mul	r18, r22
    4a4e:	11 24       	eor	r1, r1
    4a50:	30 19       	sub	r19, r0
    4a52:	30 5d       	subi	r19, 0xD0	; 208
    4a54:	31 93       	st	Z+, r19
    4a56:	de f6       	brtc	.-74     	; 0x4a0e <__ultoa_invert+0xe>
    4a58:	cf 01       	movw	r24, r30
    4a5a:	08 95       	ret
    4a5c:	46 2f       	mov	r20, r22
    4a5e:	47 70       	andi	r20, 0x07	; 7
    4a60:	40 5d       	subi	r20, 0xD0	; 208
    4a62:	41 93       	st	Z+, r20
    4a64:	b3 e0       	ldi	r27, 0x03	; 3
    4a66:	0f d0       	rcall	.+30     	; 0x4a86 <__ultoa_invert+0x86>
    4a68:	c9 f7       	brne	.-14     	; 0x4a5c <__ultoa_invert+0x5c>
    4a6a:	f6 cf       	rjmp	.-20     	; 0x4a58 <__ultoa_invert+0x58>
    4a6c:	46 2f       	mov	r20, r22
    4a6e:	4f 70       	andi	r20, 0x0F	; 15
    4a70:	40 5d       	subi	r20, 0xD0	; 208
    4a72:	4a 33       	cpi	r20, 0x3A	; 58
    4a74:	18 f0       	brcs	.+6      	; 0x4a7c <__ultoa_invert+0x7c>
    4a76:	49 5d       	subi	r20, 0xD9	; 217
    4a78:	31 fd       	sbrc	r19, 1
    4a7a:	40 52       	subi	r20, 0x20	; 32
    4a7c:	41 93       	st	Z+, r20
    4a7e:	02 d0       	rcall	.+4      	; 0x4a84 <__ultoa_invert+0x84>
    4a80:	a9 f7       	brne	.-22     	; 0x4a6c <__ultoa_invert+0x6c>
    4a82:	ea cf       	rjmp	.-44     	; 0x4a58 <__ultoa_invert+0x58>
    4a84:	b4 e0       	ldi	r27, 0x04	; 4
    4a86:	a6 95       	lsr	r26
    4a88:	97 95       	ror	r25
    4a8a:	87 95       	ror	r24
    4a8c:	77 95       	ror	r23
    4a8e:	67 95       	ror	r22
    4a90:	ba 95       	dec	r27
    4a92:	c9 f7       	brne	.-14     	; 0x4a86 <__ultoa_invert+0x86>
    4a94:	00 97       	sbiw	r24, 0x00	; 0
    4a96:	61 05       	cpc	r22, r1
    4a98:	71 05       	cpc	r23, r1
    4a9a:	08 95       	ret
    4a9c:	9b 01       	movw	r18, r22
    4a9e:	ac 01       	movw	r20, r24
    4aa0:	0a 2e       	mov	r0, r26
    4aa2:	06 94       	lsr	r0
    4aa4:	57 95       	ror	r21
    4aa6:	47 95       	ror	r20
    4aa8:	37 95       	ror	r19
    4aaa:	27 95       	ror	r18
    4aac:	ba 95       	dec	r27
    4aae:	c9 f7       	brne	.-14     	; 0x4aa2 <__ultoa_invert+0xa2>
    4ab0:	62 0f       	add	r22, r18
    4ab2:	73 1f       	adc	r23, r19
    4ab4:	84 1f       	adc	r24, r20
    4ab6:	95 1f       	adc	r25, r21
    4ab8:	a0 1d       	adc	r26, r0
    4aba:	08 95       	ret

00004abc <__prologue_saves__>:
    4abc:	2f 92       	push	r2
    4abe:	3f 92       	push	r3
    4ac0:	4f 92       	push	r4
    4ac2:	5f 92       	push	r5
    4ac4:	6f 92       	push	r6
    4ac6:	7f 92       	push	r7
    4ac8:	8f 92       	push	r8
    4aca:	9f 92       	push	r9
    4acc:	af 92       	push	r10
    4ace:	bf 92       	push	r11
    4ad0:	cf 92       	push	r12
    4ad2:	df 92       	push	r13
    4ad4:	ef 92       	push	r14
    4ad6:	ff 92       	push	r15
    4ad8:	0f 93       	push	r16
    4ada:	1f 93       	push	r17
    4adc:	cf 93       	push	r28
    4ade:	df 93       	push	r29
    4ae0:	cd b7       	in	r28, 0x3d	; 61
    4ae2:	de b7       	in	r29, 0x3e	; 62
    4ae4:	ca 1b       	sub	r28, r26
    4ae6:	db 0b       	sbc	r29, r27
    4ae8:	0f b6       	in	r0, 0x3f	; 63
    4aea:	f8 94       	cli
    4aec:	de bf       	out	0x3e, r29	; 62
    4aee:	0f be       	out	0x3f, r0	; 63
    4af0:	cd bf       	out	0x3d, r28	; 61
    4af2:	09 94       	ijmp

00004af4 <__epilogue_restores__>:
    4af4:	2a 88       	ldd	r2, Y+18	; 0x12
    4af6:	39 88       	ldd	r3, Y+17	; 0x11
    4af8:	48 88       	ldd	r4, Y+16	; 0x10
    4afa:	5f 84       	ldd	r5, Y+15	; 0x0f
    4afc:	6e 84       	ldd	r6, Y+14	; 0x0e
    4afe:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b00:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b02:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b04:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b06:	b9 84       	ldd	r11, Y+9	; 0x09
    4b08:	c8 84       	ldd	r12, Y+8	; 0x08
    4b0a:	df 80       	ldd	r13, Y+7	; 0x07
    4b0c:	ee 80       	ldd	r14, Y+6	; 0x06
    4b0e:	fd 80       	ldd	r15, Y+5	; 0x05
    4b10:	0c 81       	ldd	r16, Y+4	; 0x04
    4b12:	1b 81       	ldd	r17, Y+3	; 0x03
    4b14:	aa 81       	ldd	r26, Y+2	; 0x02
    4b16:	b9 81       	ldd	r27, Y+1	; 0x01
    4b18:	ce 0f       	add	r28, r30
    4b1a:	d1 1d       	adc	r29, r1
    4b1c:	0f b6       	in	r0, 0x3f	; 63
    4b1e:	f8 94       	cli
    4b20:	de bf       	out	0x3e, r29	; 62
    4b22:	0f be       	out	0x3f, r0	; 63
    4b24:	cd bf       	out	0x3d, r28	; 61
    4b26:	ed 01       	movw	r28, r26
    4b28:	08 95       	ret

00004b2a <_exit>:
    4b2a:	f8 94       	cli

00004b2c <__stop_program>:
    4b2c:	ff cf       	rjmp	.-2      	; 0x4b2c <__stop_program>
