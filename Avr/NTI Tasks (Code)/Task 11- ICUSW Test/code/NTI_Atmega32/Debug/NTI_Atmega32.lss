
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  000047d6  0000486a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  008000e6  008000e6  000048f0  2**0
                  ALLOC
  3 .stab         0000a380  00000000  00000000  000048f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000693a  00000000  00000000  0000ec70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000155aa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000155bc  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  000155f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  00015ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00015f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00015f9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_1>
       8:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__vector_2>
       c:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__vector_3>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__vector_10>
      2c:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_11>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__vector_16>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	f5 07       	cpc	r31, r21
      56:	50 08       	sbc	r5, r0
      58:	f5 07       	cpc	r31, r21
      5a:	50 08       	sbc	r5, r0
      5c:	50 08       	sbc	r5, r0
      5e:	50 08       	sbc	r5, r0
      60:	f5 07       	cpc	r31, r21
      62:	50 08       	sbc	r5, r0
      64:	50 08       	sbc	r5, r0
      66:	24 08       	sbc	r2, r4
      68:	f5 07       	cpc	r31, r21
      6a:	24 08       	sbc	r2, r4
      6c:	50 08       	sbc	r5, r0
      6e:	f7 07       	cpc	r31, r23
      70:	f5 07       	cpc	r31, r21
      72:	f7 07       	cpc	r31, r23

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	10 e0       	ldi	r17, 0x00	; 0
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e6 ed       	ldi	r30, 0xD6	; 214
      88:	f7 e4       	ldi	r31, 0x47	; 71
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a6 3e       	cpi	r26, 0xE6	; 230
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	a6 ee       	ldi	r26, 0xE6	; 230
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	ac 32       	cpi	r26, 0x2C	; 44
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <main>
      aa:	0c 94 e9 23 	jmp	0x47d2	; 0x47d2 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <Convert_IntToString>:
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	27 97       	sbiw	r28, 0x07	; 7
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
      c6:	6a 83       	std	Y+2, r22	; 0x02
      c8:	7b 83       	std	Y+3, r23	; 0x03
      ca:	8c 83       	std	Y+4, r24	; 0x04
      cc:	9d 83       	std	Y+5, r25	; 0x05
      ce:	5f 83       	std	Y+7, r21	; 0x07
      d0:	4e 83       	std	Y+6, r20	; 0x06
      d2:	19 82       	std	Y+1, r1	; 0x01
      d4:	8e 81       	ldd	r24, Y+6	; 0x06
      d6:	9f 81       	ldd	r25, Y+7	; 0x07
      d8:	89 2b       	or	r24, r25
      da:	19 f4       	brne	.+6      	; 0xe2 <Convert_IntToString+0x30>
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	89 83       	std	Y+1, r24	; 0x01
      e0:	1d c0       	rjmp	.+58     	; 0x11c <Convert_IntToString+0x6a>
      e2:	8d 81       	ldd	r24, Y+5	; 0x05
      e4:	8f 93       	push	r24
      e6:	8c 81       	ldd	r24, Y+4	; 0x04
      e8:	8f 93       	push	r24
      ea:	8b 81       	ldd	r24, Y+3	; 0x03
      ec:	8f 93       	push	r24
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	8f 93       	push	r24
      f2:	8a ea       	ldi	r24, 0xAA	; 170
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	89 2f       	mov	r24, r25
      f8:	8f 93       	push	r24
      fa:	8a ea       	ldi	r24, 0xAA	; 170
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	8f 93       	push	r24
     100:	8f 81       	ldd	r24, Y+7	; 0x07
     102:	8f 93       	push	r24
     104:	8e 81       	ldd	r24, Y+6	; 0x06
     106:	8f 93       	push	r24
     108:	0e 94 ff 20 	call	0x41fe	; 0x41fe <sprintf>
     10c:	8d b7       	in	r24, 0x3d	; 61
     10e:	9e b7       	in	r25, 0x3e	; 62
     110:	08 96       	adiw	r24, 0x08	; 8
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	27 96       	adiw	r28, 0x07	; 7
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	f8 94       	cli
     124:	de bf       	out	0x3e, r29	; 62
     126:	0f be       	out	0x3f, r0	; 63
     128:	cd bf       	out	0x3d, r28	; 61
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f64 Copy_f64Number, pu8 Address_str){
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	65 97       	sbiw	r28, 0x15	; 21
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	68 8b       	std	Y+16, r22	; 0x10
     146:	79 8b       	std	Y+17, r23	; 0x11
     148:	8a 8b       	std	Y+18, r24	; 0x12
     14a:	9b 8b       	std	Y+19, r25	; 0x13
     14c:	5d 8b       	std	Y+21, r21	; 0x15
     14e:	4c 8b       	std	Y+20, r20	; 0x14

	//-5.99

	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     150:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8TempSign[2]="";
     152:	1f 86       	std	Y+15, r1	; 0x0f
     154:	1e 86       	std	Y+14, r1	; 0x0e
	s32  Loc_s64IntPart;
	f32 Loc_f32FractionPart;
	s32  Loc_s64FractionPartAsInteger;


		if(NULL == Address_str){
     156:	8c 89       	ldd	r24, Y+20	; 0x14
     158:	9d 89       	ldd	r25, Y+21	; 0x15
     15a:	89 2b       	or	r24, r25
     15c:	19 f4       	brne	.+6      	; 0x164 <Convert_FloatToString+0x34>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	89 83       	std	Y+1, r24	; 0x01
     162:	78 c0       	rjmp	.+240    	; 0x254 <Convert_FloatToString+0x124>
		}

		else{

			if(Copy_f64Number<0){
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	a9 01       	movw	r20, r18
     16a:	68 89       	ldd	r22, Y+16	; 0x10
     16c:	79 89       	ldd	r23, Y+17	; 0x11
     16e:	8a 89       	ldd	r24, Y+18	; 0x12
     170:	9b 89       	ldd	r25, Y+19	; 0x13
     172:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
     176:	88 23       	and	r24, r24
     178:	5c f4       	brge	.+22     	; 0x190 <Convert_FloatToString+0x60>
				Copy_f64Number = -Copy_f64Number ;
     17a:	88 89       	ldd	r24, Y+16	; 0x10
     17c:	99 89       	ldd	r25, Y+17	; 0x11
     17e:	aa 89       	ldd	r26, Y+18	; 0x12
     180:	bb 89       	ldd	r27, Y+19	; 0x13
     182:	b0 58       	subi	r27, 0x80	; 128
     184:	88 8b       	std	Y+16, r24	; 0x10
     186:	99 8b       	std	Y+17, r25	; 0x11
     188:	aa 8b       	std	Y+18, r26	; 0x12
     18a:	bb 8b       	std	Y+19, r27	; 0x13
				Loc_u8TempSign[0] ='-';
     18c:	8d e2       	ldi	r24, 0x2D	; 45
     18e:	8e 87       	std	Y+14, r24	; 0x0e
			}


			Loc_s64IntPart = Copy_f64Number;                  // Get the integer (5).
     190:	68 89       	ldd	r22, Y+16	; 0x10
     192:	79 89       	ldd	r23, Y+17	; 0x11
     194:	8a 89       	ldd	r24, Y+18	; 0x12
     196:	9b 89       	ldd	r25, Y+19	; 0x13
     198:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__fixsfsi>
     19c:	dc 01       	movw	r26, r24
     19e:	cb 01       	movw	r24, r22
     1a0:	8a 83       	std	Y+2, r24	; 0x02
     1a2:	9b 83       	std	Y+3, r25	; 0x03
     1a4:	ac 83       	std	Y+4, r26	; 0x04
     1a6:	bd 83       	std	Y+5, r27	; 0x05
			Loc_f32FractionPart = Copy_f64Number - Loc_s64IntPart;      // Get fraction (.99).
     1a8:	6a 81       	ldd	r22, Y+2	; 0x02
     1aa:	7b 81       	ldd	r23, Y+3	; 0x03
     1ac:	8c 81       	ldd	r24, Y+4	; 0x04
     1ae:	9d 81       	ldd	r25, Y+5	; 0x05
     1b0:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <__floatsisf>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	9c 01       	movw	r18, r24
     1ba:	ad 01       	movw	r20, r26
     1bc:	68 89       	ldd	r22, Y+16	; 0x10
     1be:	79 89       	ldd	r23, Y+17	; 0x11
     1c0:	8a 89       	ldd	r24, Y+18	; 0x12
     1c2:	9b 89       	ldd	r25, Y+19	; 0x13
     1c4:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__subsf3>
     1c8:	dc 01       	movw	r26, r24
     1ca:	cb 01       	movw	r24, r22
     1cc:	8e 83       	std	Y+6, r24	; 0x06
     1ce:	9f 83       	std	Y+7, r25	; 0x07
     1d0:	a8 87       	std	Y+8, r26	; 0x08
     1d2:	b9 87       	std	Y+9, r27	; 0x09
			 Loc_s64FractionPartAsInteger = (Loc_f32FractionPart * 10000);  // Turn into integer (9900).
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e4       	ldi	r19, 0x40	; 64
     1d8:	4c e1       	ldi	r20, 0x1C	; 28
     1da:	56 e4       	ldi	r21, 0x46	; 70
     1dc:	6e 81       	ldd	r22, Y+6	; 0x06
     1de:	7f 81       	ldd	r23, Y+7	; 0x07
     1e0:	88 85       	ldd	r24, Y+8	; 0x08
     1e2:	99 85       	ldd	r25, Y+9	; 0x09
     1e4:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
     1e8:	dc 01       	movw	r26, r24
     1ea:	cb 01       	movw	r24, r22
     1ec:	bc 01       	movw	r22, r24
     1ee:	cd 01       	movw	r24, r26
     1f0:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__fixsfsi>
     1f4:	dc 01       	movw	r26, r24
     1f6:	cb 01       	movw	r24, r22
     1f8:	8a 87       	std	Y+10, r24	; 0x0a
     1fa:	9b 87       	std	Y+11, r25	; 0x0b
     1fc:	ac 87       	std	Y+12, r26	; 0x0c
     1fe:	bd 87       	std	Y+13, r27	; 0x0d

			// Print as parts, note that you need 0-padding for fractional bit.

			sprintf (Address_str, "%s%ld.%04d", Loc_u8TempSign, Loc_s64IntPart, Loc_s64FractionPartAsInteger);
     200:	8d 85       	ldd	r24, Y+13	; 0x0d
     202:	8f 93       	push	r24
     204:	8c 85       	ldd	r24, Y+12	; 0x0c
     206:	8f 93       	push	r24
     208:	8b 85       	ldd	r24, Y+11	; 0x0b
     20a:	8f 93       	push	r24
     20c:	8a 85       	ldd	r24, Y+10	; 0x0a
     20e:	8f 93       	push	r24
     210:	8d 81       	ldd	r24, Y+5	; 0x05
     212:	8f 93       	push	r24
     214:	8c 81       	ldd	r24, Y+4	; 0x04
     216:	8f 93       	push	r24
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	8f 93       	push	r24
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	8f 93       	push	r24
     220:	ce 01       	movw	r24, r28
     222:	0e 96       	adiw	r24, 0x0e	; 14
     224:	29 2f       	mov	r18, r25
     226:	2f 93       	push	r18
     228:	8f 93       	push	r24
     22a:	8e ea       	ldi	r24, 0xAE	; 174
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	89 2f       	mov	r24, r25
     230:	8f 93       	push	r24
     232:	8e ea       	ldi	r24, 0xAE	; 174
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	8f 93       	push	r24
     238:	8d 89       	ldd	r24, Y+21	; 0x15
     23a:	8f 93       	push	r24
     23c:	8c 89       	ldd	r24, Y+20	; 0x14
     23e:	8f 93       	push	r24
     240:	0e 94 ff 20 	call	0x41fe	; 0x41fe <sprintf>
     244:	8d b7       	in	r24, 0x3d	; 61
     246:	9e b7       	in	r25, 0x3e	; 62
     248:	0e 96       	adiw	r24, 0x0e	; 14
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61



		}

		return Loc_enuStatus;
     254:	89 81       	ldd	r24, Y+1	; 0x01


}
     256:	65 96       	adiw	r28, 0x15	; 21
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <Convert_StringTou8>:



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){
     268:	2f 92       	push	r2
     26a:	3f 92       	push	r3
     26c:	4f 92       	push	r4
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	6e 97       	sbiw	r28, 0x1e	; 30
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	9c 87       	std	Y+12, r25	; 0x0c
     29e:	8b 87       	std	Y+11, r24	; 0x0b
     2a0:	7e 87       	std	Y+14, r23	; 0x0e
     2a2:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     2a4:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     2a6:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     2a8:	1b 82       	std	Y+3, r1	; 0x03
     2aa:	1c 82       	std	Y+4, r1	; 0x04
     2ac:	1d 82       	std	Y+5, r1	; 0x05
     2ae:	1e 82       	std	Y+6, r1	; 0x06
     2b0:	1f 82       	std	Y+7, r1	; 0x07
     2b2:	18 86       	std	Y+8, r1	; 0x08
     2b4:	19 86       	std	Y+9, r1	; 0x09
     2b6:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     2b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     2bc:	89 2b       	or	r24, r25
     2be:	21 f0       	breq	.+8      	; 0x2c8 <Convert_StringTou8+0x60>
     2c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c4:	89 2b       	or	r24, r25
     2c6:	19 f4       	brne	.+6      	; 0x2ce <Convert_StringTou8+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	9f c0       	rjmp	.+318    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     2ce:	1a 82       	std	Y+2, r1	; 0x02
     2d0:	8c c0       	rjmp	.+280    	; 0x3ea <Convert_StringTou8+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     2d2:	2b 81       	ldd	r18, Y+3	; 0x03
     2d4:	3c 81       	ldd	r19, Y+4	; 0x04
     2d6:	4d 81       	ldd	r20, Y+5	; 0x05
     2d8:	5e 81       	ldd	r21, Y+6	; 0x06
     2da:	6f 81       	ldd	r22, Y+7	; 0x07
     2dc:	78 85       	ldd	r23, Y+8	; 0x08
     2de:	89 85       	ldd	r24, Y+9	; 0x09
     2e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     2e2:	22 2e       	mov	r2, r18
     2e4:	33 2e       	mov	r3, r19
     2e6:	44 2e       	mov	r4, r20
     2e8:	55 2e       	mov	r5, r21
     2ea:	66 2e       	mov	r6, r22
     2ec:	77 2e       	mov	r7, r23
     2ee:	88 2e       	mov	r8, r24
     2f0:	99 2e       	mov	r9, r25
     2f2:	22 2d       	mov	r18, r2
     2f4:	33 2d       	mov	r19, r3
     2f6:	44 2d       	mov	r20, r4
     2f8:	55 2d       	mov	r21, r5
     2fa:	66 2d       	mov	r22, r6
     2fc:	77 2d       	mov	r23, r7
     2fe:	88 2d       	mov	r24, r8
     300:	99 2d       	mov	r25, r9
     302:	01 e0       	ldi	r16, 0x01	; 1
     304:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__ashldi3>
     308:	a2 2e       	mov	r10, r18
     30a:	b3 2e       	mov	r11, r19
     30c:	c4 2e       	mov	r12, r20
     30e:	d5 2e       	mov	r13, r21
     310:	e6 2e       	mov	r14, r22
     312:	f7 2e       	mov	r15, r23
     314:	08 2f       	mov	r16, r24
     316:	19 2f       	mov	r17, r25
     318:	2a 2c       	mov	r2, r10
     31a:	3b 2c       	mov	r3, r11
     31c:	4c 2c       	mov	r4, r12
     31e:	5d 2c       	mov	r5, r13
     320:	6e 2c       	mov	r6, r14
     322:	7f 2c       	mov	r7, r15
     324:	80 2e       	mov	r8, r16
     326:	91 2e       	mov	r9, r17
     328:	22 2d       	mov	r18, r2
     32a:	33 2d       	mov	r19, r3
     32c:	44 2d       	mov	r20, r4
     32e:	55 2d       	mov	r21, r5
     330:	66 2d       	mov	r22, r6
     332:	77 2d       	mov	r23, r7
     334:	88 2d       	mov	r24, r8
     336:	99 2d       	mov	r25, r9
     338:	02 e0       	ldi	r16, 0x02	; 2
     33a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__ashldi3>
     33e:	2f 8b       	std	Y+23, r18	; 0x17
     340:	38 8f       	std	Y+24, r19	; 0x18
     342:	49 8f       	std	Y+25, r20	; 0x19
     344:	5a 8f       	std	Y+26, r21	; 0x1a
     346:	6b 8f       	std	Y+27, r22	; 0x1b
     348:	7c 8f       	std	Y+28, r23	; 0x1c
     34a:	8d 8f       	std	Y+29, r24	; 0x1d
     34c:	9e 8f       	std	Y+30, r25	; 0x1e
     34e:	22 2d       	mov	r18, r2
     350:	33 2d       	mov	r19, r3
     352:	44 2d       	mov	r20, r4
     354:	55 2d       	mov	r21, r5
     356:	66 2d       	mov	r22, r6
     358:	77 2d       	mov	r23, r7
     35a:	88 2d       	mov	r24, r8
     35c:	99 2d       	mov	r25, r9
     35e:	af 88       	ldd	r10, Y+23	; 0x17
     360:	b8 8c       	ldd	r11, Y+24	; 0x18
     362:	c9 8c       	ldd	r12, Y+25	; 0x19
     364:	da 8c       	ldd	r13, Y+26	; 0x1a
     366:	eb 8c       	ldd	r14, Y+27	; 0x1b
     368:	fc 8c       	ldd	r15, Y+28	; 0x1c
     36a:	0d 8d       	ldd	r16, Y+29	; 0x1d
     36c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     36e:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__adddi3>
     372:	a2 2e       	mov	r10, r18
     374:	b3 2e       	mov	r11, r19
     376:	c4 2e       	mov	r12, r20
     378:	d5 2e       	mov	r13, r21
     37a:	e6 2e       	mov	r14, r22
     37c:	f7 2e       	mov	r15, r23
     37e:	08 2f       	mov	r16, r24
     380:	19 2f       	mov	r17, r25
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	88 2f       	mov	r24, r24
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	2d 85       	ldd	r18, Y+13	; 0x0d
     38a:	3e 85       	ldd	r19, Y+14	; 0x0e
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	fc 01       	movw	r30, r24
     392:	80 81       	ld	r24, Z
     394:	88 2f       	mov	r24, r24
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	c0 97       	sbiw	r24, 0x30	; 48
     39a:	98 8b       	std	Y+16, r25	; 0x10
     39c:	8f 87       	std	Y+15, r24	; 0x0f
     39e:	89 2f       	mov	r24, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	88 0b       	sbc	r24, r24
     3a4:	89 8b       	std	Y+17, r24	; 0x11
     3a6:	8a 8b       	std	Y+18, r24	; 0x12
     3a8:	8b 8b       	std	Y+19, r24	; 0x13
     3aa:	8c 8b       	std	Y+20, r24	; 0x14
     3ac:	8d 8b       	std	Y+21, r24	; 0x15
     3ae:	8e 8b       	std	Y+22, r24	; 0x16
     3b0:	2a 2d       	mov	r18, r10
     3b2:	3b 2d       	mov	r19, r11
     3b4:	4c 2d       	mov	r20, r12
     3b6:	5d 2d       	mov	r21, r13
     3b8:	6e 2d       	mov	r22, r14
     3ba:	7f 2d       	mov	r23, r15
     3bc:	80 2f       	mov	r24, r16
     3be:	91 2f       	mov	r25, r17
     3c0:	af 84       	ldd	r10, Y+15	; 0x0f
     3c2:	b8 88       	ldd	r11, Y+16	; 0x10
     3c4:	c9 88       	ldd	r12, Y+17	; 0x11
     3c6:	da 88       	ldd	r13, Y+18	; 0x12
     3c8:	eb 88       	ldd	r14, Y+19	; 0x13
     3ca:	fc 88       	ldd	r15, Y+20	; 0x14
     3cc:	0d 89       	ldd	r16, Y+21	; 0x15
     3ce:	1e 89       	ldd	r17, Y+22	; 0x16
     3d0:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__adddi3>
     3d4:	2b 83       	std	Y+3, r18	; 0x03
     3d6:	3c 83       	std	Y+4, r19	; 0x04
     3d8:	4d 83       	std	Y+5, r20	; 0x05
     3da:	5e 83       	std	Y+6, r21	; 0x06
     3dc:	6f 83       	std	Y+7, r22	; 0x07
     3de:	78 87       	std	Y+8, r23	; 0x08
     3e0:	89 87       	std	Y+9, r24	; 0x09
     3e2:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	8a 83       	std	Y+2, r24	; 0x02
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	2d 85       	ldd	r18, Y+13	; 0x0d
     3f2:	3e 85       	ldd	r19, Y+14	; 0x0e
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	88 23       	and	r24, r24
     3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	68 cf       	rjmp	.-304    	; 0x2d2 <Convert_StringTou8+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     402:	2b 81       	ldd	r18, Y+3	; 0x03
     404:	8b 85       	ldd	r24, Y+11	; 0x0b
     406:	9c 85       	ldd	r25, Y+12	; 0x0c
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     40c:	89 81       	ldd	r24, Y+1	; 0x01

}
     40e:	6e 96       	adiw	r28, 0x1e	; 30
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	bf 90       	pop	r11
     42c:	af 90       	pop	r10
     42e:	9f 90       	pop	r9
     430:	8f 90       	pop	r8
     432:	7f 90       	pop	r7
     434:	6f 90       	pop	r6
     436:	5f 90       	pop	r5
     438:	4f 90       	pop	r4
     43a:	3f 90       	pop	r3
     43c:	2f 90       	pop	r2
     43e:	08 95       	ret

00000440 <Convert_StringTou16>:


Std_StatusType Convert_StringTou16 (u16* Address_Number, pu8 Address_str){
     440:	2f 92       	push	r2
     442:	3f 92       	push	r3
     444:	4f 92       	push	r4
     446:	5f 92       	push	r5
     448:	6f 92       	push	r6
     44a:	7f 92       	push	r7
     44c:	8f 92       	push	r8
     44e:	9f 92       	push	r9
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	6e 97       	sbiw	r28, 0x1e	; 30
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	9c 87       	std	Y+12, r25	; 0x0c
     476:	8b 87       	std	Y+11, r24	; 0x0b
     478:	7e 87       	std	Y+14, r23	; 0x0e
     47a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     47c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     47e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     480:	1b 82       	std	Y+3, r1	; 0x03
     482:	1c 82       	std	Y+4, r1	; 0x04
     484:	1d 82       	std	Y+5, r1	; 0x05
     486:	1e 82       	std	Y+6, r1	; 0x06
     488:	1f 82       	std	Y+7, r1	; 0x07
     48a:	18 86       	std	Y+8, r1	; 0x08
     48c:	19 86       	std	Y+9, r1	; 0x09
     48e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     490:	8d 85       	ldd	r24, Y+13	; 0x0d
     492:	9e 85       	ldd	r25, Y+14	; 0x0e
     494:	89 2b       	or	r24, r25
     496:	21 f0       	breq	.+8      	; 0x4a0 <Convert_StringTou16+0x60>
     498:	8b 85       	ldd	r24, Y+11	; 0x0b
     49a:	9c 85       	ldd	r25, Y+12	; 0x0c
     49c:	89 2b       	or	r24, r25
     49e:	19 f4       	brne	.+6      	; 0x4a6 <Convert_StringTou16+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	a1 c0       	rjmp	.+322    	; 0x5e8 <Convert_StringTou16+0x1a8>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     4a6:	1a 82       	std	Y+2, r1	; 0x02
     4a8:	8c c0       	rjmp	.+280    	; 0x5c2 <Convert_StringTou16+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     4aa:	2b 81       	ldd	r18, Y+3	; 0x03
     4ac:	3c 81       	ldd	r19, Y+4	; 0x04
     4ae:	4d 81       	ldd	r20, Y+5	; 0x05
     4b0:	5e 81       	ldd	r21, Y+6	; 0x06
     4b2:	6f 81       	ldd	r22, Y+7	; 0x07
     4b4:	78 85       	ldd	r23, Y+8	; 0x08
     4b6:	89 85       	ldd	r24, Y+9	; 0x09
     4b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ba:	22 2e       	mov	r2, r18
     4bc:	33 2e       	mov	r3, r19
     4be:	44 2e       	mov	r4, r20
     4c0:	55 2e       	mov	r5, r21
     4c2:	66 2e       	mov	r6, r22
     4c4:	77 2e       	mov	r7, r23
     4c6:	88 2e       	mov	r8, r24
     4c8:	99 2e       	mov	r9, r25
     4ca:	22 2d       	mov	r18, r2
     4cc:	33 2d       	mov	r19, r3
     4ce:	44 2d       	mov	r20, r4
     4d0:	55 2d       	mov	r21, r5
     4d2:	66 2d       	mov	r22, r6
     4d4:	77 2d       	mov	r23, r7
     4d6:	88 2d       	mov	r24, r8
     4d8:	99 2d       	mov	r25, r9
     4da:	01 e0       	ldi	r16, 0x01	; 1
     4dc:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__ashldi3>
     4e0:	a2 2e       	mov	r10, r18
     4e2:	b3 2e       	mov	r11, r19
     4e4:	c4 2e       	mov	r12, r20
     4e6:	d5 2e       	mov	r13, r21
     4e8:	e6 2e       	mov	r14, r22
     4ea:	f7 2e       	mov	r15, r23
     4ec:	08 2f       	mov	r16, r24
     4ee:	19 2f       	mov	r17, r25
     4f0:	2a 2c       	mov	r2, r10
     4f2:	3b 2c       	mov	r3, r11
     4f4:	4c 2c       	mov	r4, r12
     4f6:	5d 2c       	mov	r5, r13
     4f8:	6e 2c       	mov	r6, r14
     4fa:	7f 2c       	mov	r7, r15
     4fc:	80 2e       	mov	r8, r16
     4fe:	91 2e       	mov	r9, r17
     500:	22 2d       	mov	r18, r2
     502:	33 2d       	mov	r19, r3
     504:	44 2d       	mov	r20, r4
     506:	55 2d       	mov	r21, r5
     508:	66 2d       	mov	r22, r6
     50a:	77 2d       	mov	r23, r7
     50c:	88 2d       	mov	r24, r8
     50e:	99 2d       	mov	r25, r9
     510:	02 e0       	ldi	r16, 0x02	; 2
     512:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__ashldi3>
     516:	2f 8b       	std	Y+23, r18	; 0x17
     518:	38 8f       	std	Y+24, r19	; 0x18
     51a:	49 8f       	std	Y+25, r20	; 0x19
     51c:	5a 8f       	std	Y+26, r21	; 0x1a
     51e:	6b 8f       	std	Y+27, r22	; 0x1b
     520:	7c 8f       	std	Y+28, r23	; 0x1c
     522:	8d 8f       	std	Y+29, r24	; 0x1d
     524:	9e 8f       	std	Y+30, r25	; 0x1e
     526:	22 2d       	mov	r18, r2
     528:	33 2d       	mov	r19, r3
     52a:	44 2d       	mov	r20, r4
     52c:	55 2d       	mov	r21, r5
     52e:	66 2d       	mov	r22, r6
     530:	77 2d       	mov	r23, r7
     532:	88 2d       	mov	r24, r8
     534:	99 2d       	mov	r25, r9
     536:	af 88       	ldd	r10, Y+23	; 0x17
     538:	b8 8c       	ldd	r11, Y+24	; 0x18
     53a:	c9 8c       	ldd	r12, Y+25	; 0x19
     53c:	da 8c       	ldd	r13, Y+26	; 0x1a
     53e:	eb 8c       	ldd	r14, Y+27	; 0x1b
     540:	fc 8c       	ldd	r15, Y+28	; 0x1c
     542:	0d 8d       	ldd	r16, Y+29	; 0x1d
     544:	1e 8d       	ldd	r17, Y+30	; 0x1e
     546:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__adddi3>
     54a:	a2 2e       	mov	r10, r18
     54c:	b3 2e       	mov	r11, r19
     54e:	c4 2e       	mov	r12, r20
     550:	d5 2e       	mov	r13, r21
     552:	e6 2e       	mov	r14, r22
     554:	f7 2e       	mov	r15, r23
     556:	08 2f       	mov	r16, r24
     558:	19 2f       	mov	r17, r25
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	88 2f       	mov	r24, r24
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	2d 85       	ldd	r18, Y+13	; 0x0d
     562:	3e 85       	ldd	r19, Y+14	; 0x0e
     564:	82 0f       	add	r24, r18
     566:	93 1f       	adc	r25, r19
     568:	fc 01       	movw	r30, r24
     56a:	80 81       	ld	r24, Z
     56c:	88 2f       	mov	r24, r24
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	c0 97       	sbiw	r24, 0x30	; 48
     572:	98 8b       	std	Y+16, r25	; 0x10
     574:	8f 87       	std	Y+15, r24	; 0x0f
     576:	89 2f       	mov	r24, r25
     578:	88 0f       	add	r24, r24
     57a:	88 0b       	sbc	r24, r24
     57c:	89 8b       	std	Y+17, r24	; 0x11
     57e:	8a 8b       	std	Y+18, r24	; 0x12
     580:	8b 8b       	std	Y+19, r24	; 0x13
     582:	8c 8b       	std	Y+20, r24	; 0x14
     584:	8d 8b       	std	Y+21, r24	; 0x15
     586:	8e 8b       	std	Y+22, r24	; 0x16
     588:	2a 2d       	mov	r18, r10
     58a:	3b 2d       	mov	r19, r11
     58c:	4c 2d       	mov	r20, r12
     58e:	5d 2d       	mov	r21, r13
     590:	6e 2d       	mov	r22, r14
     592:	7f 2d       	mov	r23, r15
     594:	80 2f       	mov	r24, r16
     596:	91 2f       	mov	r25, r17
     598:	af 84       	ldd	r10, Y+15	; 0x0f
     59a:	b8 88       	ldd	r11, Y+16	; 0x10
     59c:	c9 88       	ldd	r12, Y+17	; 0x11
     59e:	da 88       	ldd	r13, Y+18	; 0x12
     5a0:	eb 88       	ldd	r14, Y+19	; 0x13
     5a2:	fc 88       	ldd	r15, Y+20	; 0x14
     5a4:	0d 89       	ldd	r16, Y+21	; 0x15
     5a6:	1e 89       	ldd	r17, Y+22	; 0x16
     5a8:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__adddi3>
     5ac:	2b 83       	std	Y+3, r18	; 0x03
     5ae:	3c 83       	std	Y+4, r19	; 0x04
     5b0:	4d 83       	std	Y+5, r20	; 0x05
     5b2:	5e 83       	std	Y+6, r21	; 0x06
     5b4:	6f 83       	std	Y+7, r22	; 0x07
     5b6:	78 87       	std	Y+8, r23	; 0x08
     5b8:	89 87       	std	Y+9, r24	; 0x09
     5ba:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	8f 5f       	subi	r24, 0xFF	; 255
     5c0:	8a 83       	std	Y+2, r24	; 0x02
     5c2:	8a 81       	ldd	r24, Y+2	; 0x02
     5c4:	88 2f       	mov	r24, r24
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	2d 85       	ldd	r18, Y+13	; 0x0d
     5ca:	3e 85       	ldd	r19, Y+14	; 0x0e
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	fc 01       	movw	r30, r24
     5d2:	80 81       	ld	r24, Z
     5d4:	88 23       	and	r24, r24
     5d6:	09 f0       	breq	.+2      	; 0x5da <Convert_StringTou16+0x19a>
     5d8:	68 cf       	rjmp	.-304    	; 0x4aa <Convert_StringTou16+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     5da:	2b 81       	ldd	r18, Y+3	; 0x03
     5dc:	3c 81       	ldd	r19, Y+4	; 0x04
     5de:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e2:	fc 01       	movw	r30, r24
     5e4:	31 83       	std	Z+1, r19	; 0x01
     5e6:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     5e8:	89 81       	ldd	r24, Y+1	; 0x01

}
     5ea:	6e 96       	adiw	r28, 0x1e	; 30
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	7f 90       	pop	r7
     610:	6f 90       	pop	r6
     612:	5f 90       	pop	r5
     614:	4f 90       	pop	r4
     616:	3f 90       	pop	r3
     618:	2f 90       	pop	r2
     61a:	08 95       	ret

0000061c <Convert_StringTou32>:


Std_StatusType Convert_StringTou32 (u32* Address_Number, pu8 Address_str){
     61c:	2f 92       	push	r2
     61e:	3f 92       	push	r3
     620:	4f 92       	push	r4
     622:	5f 92       	push	r5
     624:	6f 92       	push	r6
     626:	7f 92       	push	r7
     628:	8f 92       	push	r8
     62a:	9f 92       	push	r9
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	6e 97       	sbiw	r28, 0x1e	; 30
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	9c 87       	std	Y+12, r25	; 0x0c
     652:	8b 87       	std	Y+11, r24	; 0x0b
     654:	7e 87       	std	Y+14, r23	; 0x0e
     656:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     658:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     65a:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     65c:	1b 82       	std	Y+3, r1	; 0x03
     65e:	1c 82       	std	Y+4, r1	; 0x04
     660:	1d 82       	std	Y+5, r1	; 0x05
     662:	1e 82       	std	Y+6, r1	; 0x06
     664:	1f 82       	std	Y+7, r1	; 0x07
     666:	18 86       	std	Y+8, r1	; 0x08
     668:	19 86       	std	Y+9, r1	; 0x09
     66a:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     66c:	8d 85       	ldd	r24, Y+13	; 0x0d
     66e:	9e 85       	ldd	r25, Y+14	; 0x0e
     670:	89 2b       	or	r24, r25
     672:	21 f0       	breq	.+8      	; 0x67c <Convert_StringTou32+0x60>
     674:	8b 85       	ldd	r24, Y+11	; 0x0b
     676:	9c 85       	ldd	r25, Y+12	; 0x0c
     678:	89 2b       	or	r24, r25
     67a:	19 f4       	brne	.+6      	; 0x682 <Convert_StringTou32+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	a5 c0       	rjmp	.+330    	; 0x7cc <Convert_StringTou32+0x1b0>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     682:	1a 82       	std	Y+2, r1	; 0x02
     684:	8c c0       	rjmp	.+280    	; 0x79e <Convert_StringTou32+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     686:	2b 81       	ldd	r18, Y+3	; 0x03
     688:	3c 81       	ldd	r19, Y+4	; 0x04
     68a:	4d 81       	ldd	r20, Y+5	; 0x05
     68c:	5e 81       	ldd	r21, Y+6	; 0x06
     68e:	6f 81       	ldd	r22, Y+7	; 0x07
     690:	78 85       	ldd	r23, Y+8	; 0x08
     692:	89 85       	ldd	r24, Y+9	; 0x09
     694:	9a 85       	ldd	r25, Y+10	; 0x0a
     696:	22 2e       	mov	r2, r18
     698:	33 2e       	mov	r3, r19
     69a:	44 2e       	mov	r4, r20
     69c:	55 2e       	mov	r5, r21
     69e:	66 2e       	mov	r6, r22
     6a0:	77 2e       	mov	r7, r23
     6a2:	88 2e       	mov	r8, r24
     6a4:	99 2e       	mov	r9, r25
     6a6:	22 2d       	mov	r18, r2
     6a8:	33 2d       	mov	r19, r3
     6aa:	44 2d       	mov	r20, r4
     6ac:	55 2d       	mov	r21, r5
     6ae:	66 2d       	mov	r22, r6
     6b0:	77 2d       	mov	r23, r7
     6b2:	88 2d       	mov	r24, r8
     6b4:	99 2d       	mov	r25, r9
     6b6:	01 e0       	ldi	r16, 0x01	; 1
     6b8:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__ashldi3>
     6bc:	a2 2e       	mov	r10, r18
     6be:	b3 2e       	mov	r11, r19
     6c0:	c4 2e       	mov	r12, r20
     6c2:	d5 2e       	mov	r13, r21
     6c4:	e6 2e       	mov	r14, r22
     6c6:	f7 2e       	mov	r15, r23
     6c8:	08 2f       	mov	r16, r24
     6ca:	19 2f       	mov	r17, r25
     6cc:	2a 2c       	mov	r2, r10
     6ce:	3b 2c       	mov	r3, r11
     6d0:	4c 2c       	mov	r4, r12
     6d2:	5d 2c       	mov	r5, r13
     6d4:	6e 2c       	mov	r6, r14
     6d6:	7f 2c       	mov	r7, r15
     6d8:	80 2e       	mov	r8, r16
     6da:	91 2e       	mov	r9, r17
     6dc:	22 2d       	mov	r18, r2
     6de:	33 2d       	mov	r19, r3
     6e0:	44 2d       	mov	r20, r4
     6e2:	55 2d       	mov	r21, r5
     6e4:	66 2d       	mov	r22, r6
     6e6:	77 2d       	mov	r23, r7
     6e8:	88 2d       	mov	r24, r8
     6ea:	99 2d       	mov	r25, r9
     6ec:	02 e0       	ldi	r16, 0x02	; 2
     6ee:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__ashldi3>
     6f2:	2f 8b       	std	Y+23, r18	; 0x17
     6f4:	38 8f       	std	Y+24, r19	; 0x18
     6f6:	49 8f       	std	Y+25, r20	; 0x19
     6f8:	5a 8f       	std	Y+26, r21	; 0x1a
     6fa:	6b 8f       	std	Y+27, r22	; 0x1b
     6fc:	7c 8f       	std	Y+28, r23	; 0x1c
     6fe:	8d 8f       	std	Y+29, r24	; 0x1d
     700:	9e 8f       	std	Y+30, r25	; 0x1e
     702:	22 2d       	mov	r18, r2
     704:	33 2d       	mov	r19, r3
     706:	44 2d       	mov	r20, r4
     708:	55 2d       	mov	r21, r5
     70a:	66 2d       	mov	r22, r6
     70c:	77 2d       	mov	r23, r7
     70e:	88 2d       	mov	r24, r8
     710:	99 2d       	mov	r25, r9
     712:	af 88       	ldd	r10, Y+23	; 0x17
     714:	b8 8c       	ldd	r11, Y+24	; 0x18
     716:	c9 8c       	ldd	r12, Y+25	; 0x19
     718:	da 8c       	ldd	r13, Y+26	; 0x1a
     71a:	eb 8c       	ldd	r14, Y+27	; 0x1b
     71c:	fc 8c       	ldd	r15, Y+28	; 0x1c
     71e:	0d 8d       	ldd	r16, Y+29	; 0x1d
     720:	1e 8d       	ldd	r17, Y+30	; 0x1e
     722:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__adddi3>
     726:	a2 2e       	mov	r10, r18
     728:	b3 2e       	mov	r11, r19
     72a:	c4 2e       	mov	r12, r20
     72c:	d5 2e       	mov	r13, r21
     72e:	e6 2e       	mov	r14, r22
     730:	f7 2e       	mov	r15, r23
     732:	08 2f       	mov	r16, r24
     734:	19 2f       	mov	r17, r25
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2d 85       	ldd	r18, Y+13	; 0x0d
     73e:	3e 85       	ldd	r19, Y+14	; 0x0e
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	88 2f       	mov	r24, r24
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	c0 97       	sbiw	r24, 0x30	; 48
     74e:	98 8b       	std	Y+16, r25	; 0x10
     750:	8f 87       	std	Y+15, r24	; 0x0f
     752:	89 2f       	mov	r24, r25
     754:	88 0f       	add	r24, r24
     756:	88 0b       	sbc	r24, r24
     758:	89 8b       	std	Y+17, r24	; 0x11
     75a:	8a 8b       	std	Y+18, r24	; 0x12
     75c:	8b 8b       	std	Y+19, r24	; 0x13
     75e:	8c 8b       	std	Y+20, r24	; 0x14
     760:	8d 8b       	std	Y+21, r24	; 0x15
     762:	8e 8b       	std	Y+22, r24	; 0x16
     764:	2a 2d       	mov	r18, r10
     766:	3b 2d       	mov	r19, r11
     768:	4c 2d       	mov	r20, r12
     76a:	5d 2d       	mov	r21, r13
     76c:	6e 2d       	mov	r22, r14
     76e:	7f 2d       	mov	r23, r15
     770:	80 2f       	mov	r24, r16
     772:	91 2f       	mov	r25, r17
     774:	af 84       	ldd	r10, Y+15	; 0x0f
     776:	b8 88       	ldd	r11, Y+16	; 0x10
     778:	c9 88       	ldd	r12, Y+17	; 0x11
     77a:	da 88       	ldd	r13, Y+18	; 0x12
     77c:	eb 88       	ldd	r14, Y+19	; 0x13
     77e:	fc 88       	ldd	r15, Y+20	; 0x14
     780:	0d 89       	ldd	r16, Y+21	; 0x15
     782:	1e 89       	ldd	r17, Y+22	; 0x16
     784:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__adddi3>
     788:	2b 83       	std	Y+3, r18	; 0x03
     78a:	3c 83       	std	Y+4, r19	; 0x04
     78c:	4d 83       	std	Y+5, r20	; 0x05
     78e:	5e 83       	std	Y+6, r21	; 0x06
     790:	6f 83       	std	Y+7, r22	; 0x07
     792:	78 87       	std	Y+8, r23	; 0x08
     794:	89 87       	std	Y+9, r24	; 0x09
     796:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     798:	8a 81       	ldd	r24, Y+2	; 0x02
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	8a 83       	std	Y+2, r24	; 0x02
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	2d 85       	ldd	r18, Y+13	; 0x0d
     7a6:	3e 85       	ldd	r19, Y+14	; 0x0e
     7a8:	82 0f       	add	r24, r18
     7aa:	93 1f       	adc	r25, r19
     7ac:	fc 01       	movw	r30, r24
     7ae:	80 81       	ld	r24, Z
     7b0:	88 23       	and	r24, r24
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <Convert_StringTou32+0x19a>
     7b4:	68 cf       	rjmp	.-304    	; 0x686 <Convert_StringTou32+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ba:	ad 81       	ldd	r26, Y+5	; 0x05
     7bc:	be 81       	ldd	r27, Y+6	; 0x06
     7be:	2b 85       	ldd	r18, Y+11	; 0x0b
     7c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     7c2:	f9 01       	movw	r30, r18
     7c4:	80 83       	st	Z, r24
     7c6:	91 83       	std	Z+1, r25	; 0x01
     7c8:	a2 83       	std	Z+2, r26	; 0x02
     7ca:	b3 83       	std	Z+3, r27	; 0x03
			}

			return Loc_enuStatus;
     7cc:	89 81       	ldd	r24, Y+1	; 0x01

}
     7ce:	6e 96       	adiw	r28, 0x1e	; 30
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	3f 90       	pop	r3
     7fc:	2f 90       	pop	r2
     7fe:	08 95       	ret

00000800 <Convert_StringTou64>:


Std_StatusType Convert_StringTou64 (u64* Address_Number, pu8 Address_str){
     800:	2f 92       	push	r2
     802:	3f 92       	push	r3
     804:	4f 92       	push	r4
     806:	5f 92       	push	r5
     808:	6f 92       	push	r6
     80a:	7f 92       	push	r7
     80c:	8f 92       	push	r8
     80e:	9f 92       	push	r9
     810:	af 92       	push	r10
     812:	bf 92       	push	r11
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	6e 97       	sbiw	r28, 0x1e	; 30
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	9c 87       	std	Y+12, r25	; 0x0c
     836:	8b 87       	std	Y+11, r24	; 0x0b
     838:	7e 87       	std	Y+14, r23	; 0x0e
     83a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     83c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     83e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     840:	1b 82       	std	Y+3, r1	; 0x03
     842:	1c 82       	std	Y+4, r1	; 0x04
     844:	1d 82       	std	Y+5, r1	; 0x05
     846:	1e 82       	std	Y+6, r1	; 0x06
     848:	1f 82       	std	Y+7, r1	; 0x07
     84a:	18 86       	std	Y+8, r1	; 0x08
     84c:	19 86       	std	Y+9, r1	; 0x09
     84e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     850:	8d 85       	ldd	r24, Y+13	; 0x0d
     852:	9e 85       	ldd	r25, Y+14	; 0x0e
     854:	89 2b       	or	r24, r25
     856:	21 f0       	breq	.+8      	; 0x860 <__stack+0x1>
     858:	8b 85       	ldd	r24, Y+11	; 0x0b
     85a:	9c 85       	ldd	r25, Y+12	; 0x0c
     85c:	89 2b       	or	r24, r25
     85e:	19 f4       	brne	.+6      	; 0x866 <__stack+0x7>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	b4 c0       	rjmp	.+360    	; 0x9ce <__stack+0x16f>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     866:	1a 82       	std	Y+2, r1	; 0x02
     868:	8c c0       	rjmp	.+280    	; 0x982 <__stack+0x123>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     86a:	2b 81       	ldd	r18, Y+3	; 0x03
     86c:	3c 81       	ldd	r19, Y+4	; 0x04
     86e:	4d 81       	ldd	r20, Y+5	; 0x05
     870:	5e 81       	ldd	r21, Y+6	; 0x06
     872:	6f 81       	ldd	r22, Y+7	; 0x07
     874:	78 85       	ldd	r23, Y+8	; 0x08
     876:	89 85       	ldd	r24, Y+9	; 0x09
     878:	9a 85       	ldd	r25, Y+10	; 0x0a
     87a:	22 2e       	mov	r2, r18
     87c:	33 2e       	mov	r3, r19
     87e:	44 2e       	mov	r4, r20
     880:	55 2e       	mov	r5, r21
     882:	66 2e       	mov	r6, r22
     884:	77 2e       	mov	r7, r23
     886:	88 2e       	mov	r8, r24
     888:	99 2e       	mov	r9, r25
     88a:	22 2d       	mov	r18, r2
     88c:	33 2d       	mov	r19, r3
     88e:	44 2d       	mov	r20, r4
     890:	55 2d       	mov	r21, r5
     892:	66 2d       	mov	r22, r6
     894:	77 2d       	mov	r23, r7
     896:	88 2d       	mov	r24, r8
     898:	99 2d       	mov	r25, r9
     89a:	01 e0       	ldi	r16, 0x01	; 1
     89c:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__ashldi3>
     8a0:	a2 2e       	mov	r10, r18
     8a2:	b3 2e       	mov	r11, r19
     8a4:	c4 2e       	mov	r12, r20
     8a6:	d5 2e       	mov	r13, r21
     8a8:	e6 2e       	mov	r14, r22
     8aa:	f7 2e       	mov	r15, r23
     8ac:	08 2f       	mov	r16, r24
     8ae:	19 2f       	mov	r17, r25
     8b0:	2a 2c       	mov	r2, r10
     8b2:	3b 2c       	mov	r3, r11
     8b4:	4c 2c       	mov	r4, r12
     8b6:	5d 2c       	mov	r5, r13
     8b8:	6e 2c       	mov	r6, r14
     8ba:	7f 2c       	mov	r7, r15
     8bc:	80 2e       	mov	r8, r16
     8be:	91 2e       	mov	r9, r17
     8c0:	22 2d       	mov	r18, r2
     8c2:	33 2d       	mov	r19, r3
     8c4:	44 2d       	mov	r20, r4
     8c6:	55 2d       	mov	r21, r5
     8c8:	66 2d       	mov	r22, r6
     8ca:	77 2d       	mov	r23, r7
     8cc:	88 2d       	mov	r24, r8
     8ce:	99 2d       	mov	r25, r9
     8d0:	02 e0       	ldi	r16, 0x02	; 2
     8d2:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__ashldi3>
     8d6:	2f 8b       	std	Y+23, r18	; 0x17
     8d8:	38 8f       	std	Y+24, r19	; 0x18
     8da:	49 8f       	std	Y+25, r20	; 0x19
     8dc:	5a 8f       	std	Y+26, r21	; 0x1a
     8de:	6b 8f       	std	Y+27, r22	; 0x1b
     8e0:	7c 8f       	std	Y+28, r23	; 0x1c
     8e2:	8d 8f       	std	Y+29, r24	; 0x1d
     8e4:	9e 8f       	std	Y+30, r25	; 0x1e
     8e6:	22 2d       	mov	r18, r2
     8e8:	33 2d       	mov	r19, r3
     8ea:	44 2d       	mov	r20, r4
     8ec:	55 2d       	mov	r21, r5
     8ee:	66 2d       	mov	r22, r6
     8f0:	77 2d       	mov	r23, r7
     8f2:	88 2d       	mov	r24, r8
     8f4:	99 2d       	mov	r25, r9
     8f6:	af 88       	ldd	r10, Y+23	; 0x17
     8f8:	b8 8c       	ldd	r11, Y+24	; 0x18
     8fa:	c9 8c       	ldd	r12, Y+25	; 0x19
     8fc:	da 8c       	ldd	r13, Y+26	; 0x1a
     8fe:	eb 8c       	ldd	r14, Y+27	; 0x1b
     900:	fc 8c       	ldd	r15, Y+28	; 0x1c
     902:	0d 8d       	ldd	r16, Y+29	; 0x1d
     904:	1e 8d       	ldd	r17, Y+30	; 0x1e
     906:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__adddi3>
     90a:	a2 2e       	mov	r10, r18
     90c:	b3 2e       	mov	r11, r19
     90e:	c4 2e       	mov	r12, r20
     910:	d5 2e       	mov	r13, r21
     912:	e6 2e       	mov	r14, r22
     914:	f7 2e       	mov	r15, r23
     916:	08 2f       	mov	r16, r24
     918:	19 2f       	mov	r17, r25
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	2d 85       	ldd	r18, Y+13	; 0x0d
     922:	3e 85       	ldd	r19, Y+14	; 0x0e
     924:	82 0f       	add	r24, r18
     926:	93 1f       	adc	r25, r19
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	c0 97       	sbiw	r24, 0x30	; 48
     932:	98 8b       	std	Y+16, r25	; 0x10
     934:	8f 87       	std	Y+15, r24	; 0x0f
     936:	89 2f       	mov	r24, r25
     938:	88 0f       	add	r24, r24
     93a:	88 0b       	sbc	r24, r24
     93c:	89 8b       	std	Y+17, r24	; 0x11
     93e:	8a 8b       	std	Y+18, r24	; 0x12
     940:	8b 8b       	std	Y+19, r24	; 0x13
     942:	8c 8b       	std	Y+20, r24	; 0x14
     944:	8d 8b       	std	Y+21, r24	; 0x15
     946:	8e 8b       	std	Y+22, r24	; 0x16
     948:	2a 2d       	mov	r18, r10
     94a:	3b 2d       	mov	r19, r11
     94c:	4c 2d       	mov	r20, r12
     94e:	5d 2d       	mov	r21, r13
     950:	6e 2d       	mov	r22, r14
     952:	7f 2d       	mov	r23, r15
     954:	80 2f       	mov	r24, r16
     956:	91 2f       	mov	r25, r17
     958:	af 84       	ldd	r10, Y+15	; 0x0f
     95a:	b8 88       	ldd	r11, Y+16	; 0x10
     95c:	c9 88       	ldd	r12, Y+17	; 0x11
     95e:	da 88       	ldd	r13, Y+18	; 0x12
     960:	eb 88       	ldd	r14, Y+19	; 0x13
     962:	fc 88       	ldd	r15, Y+20	; 0x14
     964:	0d 89       	ldd	r16, Y+21	; 0x15
     966:	1e 89       	ldd	r17, Y+22	; 0x16
     968:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__adddi3>
     96c:	2b 83       	std	Y+3, r18	; 0x03
     96e:	3c 83       	std	Y+4, r19	; 0x04
     970:	4d 83       	std	Y+5, r20	; 0x05
     972:	5e 83       	std	Y+6, r21	; 0x06
     974:	6f 83       	std	Y+7, r22	; 0x07
     976:	78 87       	std	Y+8, r23	; 0x08
     978:	89 87       	std	Y+9, r24	; 0x09
     97a:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	8a 83       	std	Y+2, r24	; 0x02
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	88 2f       	mov	r24, r24
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	2d 85       	ldd	r18, Y+13	; 0x0d
     98a:	3e 85       	ldd	r19, Y+14	; 0x0e
     98c:	82 0f       	add	r24, r18
     98e:	93 1f       	adc	r25, r19
     990:	fc 01       	movw	r30, r24
     992:	80 81       	ld	r24, Z
     994:	88 23       	and	r24, r24
     996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x13b>
     998:	68 cf       	rjmp	.-304    	; 0x86a <__stack+0xb>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     99a:	8b 85       	ldd	r24, Y+11	; 0x0b
     99c:	9c 85       	ldd	r25, Y+12	; 0x0c
     99e:	2b 81       	ldd	r18, Y+3	; 0x03
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
     9a4:	2c 81       	ldd	r18, Y+4	; 0x04
     9a6:	fc 01       	movw	r30, r24
     9a8:	21 83       	std	Z+1, r18	; 0x01
     9aa:	2d 81       	ldd	r18, Y+5	; 0x05
     9ac:	fc 01       	movw	r30, r24
     9ae:	22 83       	std	Z+2, r18	; 0x02
     9b0:	2e 81       	ldd	r18, Y+6	; 0x06
     9b2:	fc 01       	movw	r30, r24
     9b4:	23 83       	std	Z+3, r18	; 0x03
     9b6:	2f 81       	ldd	r18, Y+7	; 0x07
     9b8:	fc 01       	movw	r30, r24
     9ba:	24 83       	std	Z+4, r18	; 0x04
     9bc:	28 85       	ldd	r18, Y+8	; 0x08
     9be:	fc 01       	movw	r30, r24
     9c0:	25 83       	std	Z+5, r18	; 0x05
     9c2:	29 85       	ldd	r18, Y+9	; 0x09
     9c4:	fc 01       	movw	r30, r24
     9c6:	26 83       	std	Z+6, r18	; 0x06
     9c8:	2a 85       	ldd	r18, Y+10	; 0x0a
     9ca:	fc 01       	movw	r30, r24
     9cc:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     9ce:	89 81       	ldd	r24, Y+1	; 0x01

}
     9d0:	6e 96       	adiw	r28, 0x1e	; 30
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	7f 90       	pop	r7
     9f6:	6f 90       	pop	r6
     9f8:	5f 90       	pop	r5
     9fa:	4f 90       	pop	r4
     9fc:	3f 90       	pop	r3
     9fe:	2f 90       	pop	r2
     a00:	08 95       	ret

00000a02 <Wtd_enuSleep>:



/********************************** Software Interfaces Declarations *******************/

Wtd_StatusErrorType Wtd_enuSleep (Wtd_SelectSleepTime Copy_enuSleepTime){
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	00 d0       	rcall	.+0      	; 0xa08 <Wtd_enuSleep+0x6>
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	8a 83       	std	Y+2, r24	; 0x02
	Wtd_StatusErrorType Loc_enuWtdStatus = WTD_STATUS_OK;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	89 83       	std	Y+1, r24	; 0x01

	Wtd_Enable(Copy_enuSleepTime);
     a12:	81 e4       	ldi	r24, 0x41	; 65
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	21 e4       	ldi	r18, 0x41	; 65
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	f9 01       	movw	r30, r18
     a1c:	20 81       	ld	r18, Z
     a1e:	32 2f       	mov	r19, r18
     a20:	30 7e       	andi	r19, 0xE0	; 224
     a22:	2a 81       	ldd	r18, Y+2	; 0x02
     a24:	23 2b       	or	r18, r19
     a26:	28 60       	ori	r18, 0x08	; 8
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18

			return Loc_enuWtdStatus;
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <Wtd_enuDisable>:

Wtd_StatusErrorType Wtd_enuDisable (void){
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	1f 92       	push	r1
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62

	Wtd_StatusErrorType Loc_enuWtdStatus = WTD_STATUS_OK;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	89 83       	std	Y+1, r24	; 0x01
	Wtd_Disable();
     a46:	81 e4       	ldi	r24, 0x41	; 65
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	21 e4       	ldi	r18, 0x41	; 65
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	f9 01       	movw	r30, r18
     a50:	20 81       	ld	r18, Z
     a52:	20 7e       	andi	r18, 0xE0	; 224
     a54:	28 61       	ori	r18, 0x18	; 24
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
     a5a:	81 e4       	ldi	r24, 0x41	; 65
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	fc 01       	movw	r30, r24
     a60:	10 82       	st	Z, r1



	return Loc_enuWtdStatus;
     a62:	89 81       	ldd	r24, Y+1	; 0x01
}
     a64:	0f 90       	pop	r0
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <Timer0_enuInit>:
static  u8 Timer0_InitValue;
/********************************** Software Interfaces Declarations *******************/



Timer0_StatusErrorType Timer0_enuInit(const Timer0_ConfigType* Address_Timer0){
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	00 d0       	rcall	.+0      	; 0xa72 <Timer0_enuInit+0x6>
     a72:	1f 92       	push	r1
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	9b 83       	std	Y+3, r25	; 0x03
     a7a:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     a80:	8a 81       	ldd	r24, Y+2	; 0x02
     a82:	9b 81       	ldd	r25, Y+3	; 0x03
     a84:	89 2b       	or	r24, r25
     a86:	19 f4       	brne	.+6      	; 0xa8e <Timer0_enuInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	97 c0       	rjmp	.+302    	; 0xbbc <Timer0_enuInit+0x150>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	        Timer0_Disable();
     a8e:	83 e5       	ldi	r24, 0x53	; 83
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	23 e5       	ldi	r18, 0x53	; 83
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	f9 01       	movw	r30, r18
     a98:	20 81       	ld	r18, Z
     a9a:	28 7f       	andi	r18, 0xF8	; 248
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18

		    	        /* Select Mode timer */
		    	        Timer0_SelectMode((Address_Timer0->select_mode));
     aa0:	83 e5       	ldi	r24, 0x53	; 83
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	23 e5       	ldi	r18, 0x53	; 83
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	f9 01       	movw	r30, r18
     aaa:	20 81       	ld	r18, Z
     aac:	42 2f       	mov	r20, r18
     aae:	4f 7b       	andi	r20, 0xBF	; 191
     ab0:	2a 81       	ldd	r18, Y+2	; 0x02
     ab2:	3b 81       	ldd	r19, Y+3	; 0x03
     ab4:	f9 01       	movw	r30, r18
     ab6:	21 81       	ldd	r18, Z+1	; 0x01
     ab8:	22 2f       	mov	r18, r18
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	21 70       	andi	r18, 0x01	; 1
     abe:	33 27       	eor	r19, r19
     ac0:	00 24       	eor	r0, r0
     ac2:	36 95       	lsr	r19
     ac4:	27 95       	ror	r18
     ac6:	07 94       	ror	r0
     ac8:	36 95       	lsr	r19
     aca:	27 95       	ror	r18
     acc:	07 94       	ror	r0
     ace:	32 2f       	mov	r19, r18
     ad0:	20 2d       	mov	r18, r0
     ad2:	24 2b       	or	r18, r20
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
     ad8:	83 e5       	ldi	r24, 0x53	; 83
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	23 e5       	ldi	r18, 0x53	; 83
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	f9 01       	movw	r30, r18
     ae2:	20 81       	ld	r18, Z
     ae4:	42 2f       	mov	r20, r18
     ae6:	47 7f       	andi	r20, 0xF7	; 247
     ae8:	2a 81       	ldd	r18, Y+2	; 0x02
     aea:	3b 81       	ldd	r19, Y+3	; 0x03
     aec:	f9 01       	movw	r30, r18
     aee:	21 81       	ldd	r18, Z+1	; 0x01
     af0:	26 95       	lsr	r18
     af2:	22 2f       	mov	r18, r18
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	21 70       	andi	r18, 0x01	; 1
     af8:	33 27       	eor	r19, r19
     afa:	22 0f       	add	r18, r18
     afc:	33 1f       	adc	r19, r19
     afe:	22 0f       	add	r18, r18
     b00:	33 1f       	adc	r19, r19
     b02:	22 0f       	add	r18, r18
     b04:	33 1f       	adc	r19, r19
     b06:	24 2b       	or	r18, r20
     b08:	fc 01       	movw	r30, r24
     b0a:	20 83       	st	Z, r18
     b0c:	83 e5       	ldi	r24, 0x53	; 83
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	23 e5       	ldi	r18, 0x53	; 83
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	f9 01       	movw	r30, r18
     b16:	20 81       	ld	r18, Z
     b18:	42 2f       	mov	r20, r18
     b1a:	4f 7e       	andi	r20, 0xEF	; 239
     b1c:	2a 81       	ldd	r18, Y+2	; 0x02
     b1e:	3b 81       	ldd	r19, Y+3	; 0x03
     b20:	f9 01       	movw	r30, r18
     b22:	21 81       	ldd	r18, Z+1	; 0x01
     b24:	26 95       	lsr	r18
     b26:	26 95       	lsr	r18
     b28:	22 2f       	mov	r18, r18
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	21 70       	andi	r18, 0x01	; 1
     b2e:	33 27       	eor	r19, r19
     b30:	22 95       	swap	r18
     b32:	32 95       	swap	r19
     b34:	30 7f       	andi	r19, 0xF0	; 240
     b36:	32 27       	eor	r19, r18
     b38:	20 7f       	andi	r18, 0xF0	; 240
     b3a:	32 27       	eor	r19, r18
     b3c:	24 2b       	or	r18, r20
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
     b42:	83 e5       	ldi	r24, 0x53	; 83
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	23 e5       	ldi	r18, 0x53	; 83
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	42 2f       	mov	r20, r18
     b50:	4f 7d       	andi	r20, 0xDF	; 223
     b52:	2a 81       	ldd	r18, Y+2	; 0x02
     b54:	3b 81       	ldd	r19, Y+3	; 0x03
     b56:	f9 01       	movw	r30, r18
     b58:	21 81       	ldd	r18, Z+1	; 0x01
     b5a:	26 95       	lsr	r18
     b5c:	26 95       	lsr	r18
     b5e:	26 95       	lsr	r18
     b60:	22 2f       	mov	r18, r18
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	21 70       	andi	r18, 0x01	; 1
     b66:	33 27       	eor	r19, r19
     b68:	22 0f       	add	r18, r18
     b6a:	33 1f       	adc	r19, r19
     b6c:	22 95       	swap	r18
     b6e:	32 95       	swap	r19
     b70:	30 7f       	andi	r19, 0xF0	; 240
     b72:	32 27       	eor	r19, r18
     b74:	20 7f       	andi	r18, 0xF0	; 240
     b76:	32 27       	eor	r19, r18
     b78:	24 2b       	or	r18, r20
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18

		    	        Timer0_InitValue = Address_Timer0->init_value;
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	9b 81       	ldd	r25, Y+3	; 0x03
     b82:	fc 01       	movw	r30, r24
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <Timer0_InitValue>
		    	        /* Update Init Value*/
		    	       Loc_enuTimer0Status= Timer0_enuSetValue(Address_Timer0, Address_Timer0->init_value);
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	9b 81       	ldd	r25, Y+3	; 0x03
     b8e:	fc 01       	movw	r30, r24
     b90:	22 81       	ldd	r18, Z+2	; 0x02
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	9b 81       	ldd	r25, Y+3	; 0x03
     b96:	62 2f       	mov	r22, r18
     b98:	0e 94 68 06 	call	0xcd0	; 0xcd0 <Timer0_enuSetValue>
     b9c:	89 83       	std	Y+1, r24	; 0x01

		    	        /* Enable Timer0 Peripheral */
		    	        Timer0_Enable(Address_Timer0->prescaler_value);
     b9e:	83 e5       	ldi	r24, 0x53	; 83
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	23 e5       	ldi	r18, 0x53	; 83
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	f9 01       	movw	r30, r18
     ba8:	20 81       	ld	r18, Z
     baa:	42 2f       	mov	r20, r18
     bac:	48 7f       	andi	r20, 0xF8	; 248
     bae:	2a 81       	ldd	r18, Y+2	; 0x02
     bb0:	3b 81       	ldd	r19, Y+3	; 0x03
     bb2:	f9 01       	movw	r30, r18
     bb4:	20 81       	ld	r18, Z
     bb6:	24 2b       	or	r18, r20
     bb8:	fc 01       	movw	r30, r24
     bba:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <Timer0_enuDeInit>:

Timer0_StatusErrorType Timer0_enuDeInit(const Timer0_ConfigType* Address_Timer0){
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <Timer0_enuDeInit+0x6>
     bd0:	1f 92       	push	r1
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	9b 83       	std	Y+3, r25	; 0x03
     bd8:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	9b 81       	ldd	r25, Y+3	; 0x03
     be2:	89 2b       	or	r24, r25
     be4:	19 f4       	brne	.+6      	; 0xbec <Timer0_enuDeInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	09 c0       	rjmp	.+18     	; 0xbfe <Timer0_enuDeInit+0x34>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	Timer0_Disable();
     bec:	83 e5       	ldi	r24, 0x53	; 83
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	23 e5       	ldi	r18, 0x53	; 83
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	f9 01       	movw	r30, r18
     bf6:	20 81       	ld	r18, Z
     bf8:	28 7f       	andi	r18, 0xF8	; 248
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <Timer0_enuEnableInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableInterrupt(const Timer0_ConfigType* Address_Timer0){
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	00 d0       	rcall	.+0      	; 0xc12 <Timer0_enuEnableInterrupt+0x6>
     c12:	1f 92       	push	r1
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	9b 83       	std	Y+3, r25	; 0x03
     c1a:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	9b 81       	ldd	r25, Y+3	; 0x03
     c24:	89 2b       	or	r24, r25
     c26:	19 f4       	brne	.+6      	; 0xc2e <Timer0_enuEnableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	19 c0       	rjmp	.+50     	; 0xc60 <Timer0_enuEnableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	9b 81       	ldd	r25, Y+3	; 0x03
     c32:	fc 01       	movw	r30, r24
     c34:	81 81       	ldd	r24, Z+1	; 0x01
     c36:	88 23       	and	r24, r24
     c38:	51 f4       	brne	.+20     	; 0xc4e <Timer0_enuEnableInterrupt+0x42>

		    		Timer0_EnableOverviewInterrupt();
     c3a:	89 e5       	ldi	r24, 0x59	; 89
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	29 e5       	ldi	r18, 0x59	; 89
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	20 81       	ld	r18, Z
     c46:	21 60       	ori	r18, 0x01	; 1
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
     c4c:	09 c0       	rjmp	.+18     	; 0xc60 <Timer0_enuEnableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_EnableComparePwmInterrupt();
     c4e:	89 e5       	ldi	r24, 0x59	; 89
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	29 e5       	ldi	r18, 0x59	; 89
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	f9 01       	movw	r30, r18
     c58:	20 81       	ld	r18, Z
     c5a:	22 60       	ori	r18, 0x02	; 2
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
     c60:	89 81       	ldd	r24, Y+1	; 0x01
}
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <Timer0_enuDisableInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableInterrupt(const Timer0_ConfigType* Address_Timer0){
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
     c72:	00 d0       	rcall	.+0      	; 0xc74 <Timer0_enuDisableInterrupt+0x6>
     c74:	1f 92       	push	r1
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	9b 83       	std	Y+3, r25	; 0x03
     c7c:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	9b 81       	ldd	r25, Y+3	; 0x03
     c86:	89 2b       	or	r24, r25
     c88:	19 f4       	brne	.+6      	; 0xc90 <Timer0_enuDisableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	19 c0       	rjmp	.+50     	; 0xcc2 <Timer0_enuDisableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	9b 81       	ldd	r25, Y+3	; 0x03
     c94:	fc 01       	movw	r30, r24
     c96:	81 81       	ldd	r24, Z+1	; 0x01
     c98:	88 23       	and	r24, r24
     c9a:	51 f4       	brne	.+20     	; 0xcb0 <Timer0_enuDisableInterrupt+0x42>

		    		Timer0_DisableOverviewInterrupt();
     c9c:	89 e5       	ldi	r24, 0x59	; 89
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	29 e5       	ldi	r18, 0x59	; 89
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	f9 01       	movw	r30, r18
     ca6:	20 81       	ld	r18, Z
     ca8:	2e 7f       	andi	r18, 0xFE	; 254
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
     cae:	09 c0       	rjmp	.+18     	; 0xcc2 <Timer0_enuDisableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_DisbleComparePwmInterrupt();
     cb0:	89 e5       	ldi	r24, 0x59	; 89
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	29 e5       	ldi	r18, 0x59	; 89
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	f9 01       	movw	r30, r18
     cba:	20 81       	ld	r18, Z
     cbc:	2d 7f       	andi	r18, 0xFD	; 253
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <Timer0_enuSetValue>:


Timer0_StatusErrorType Timer0_enuSetValue(const Timer0_ConfigType* Address_Timer0, u8 Copy_u8Value){
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <Timer0_enuSetValue+0x6>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <Timer0_enuSetValue+0x8>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9b 83       	std	Y+3, r25	; 0x03
     cde:	8a 83       	std	Y+2, r24	; 0x02
     ce0:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	9b 81       	ldd	r25, Y+3	; 0x03
     cea:	89 2b       	or	r24, r25
     cec:	19 f4       	brne	.+6      	; 0xcf4 <Timer0_enuSetValue+0x24>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	11 c0       	rjmp	.+34     	; 0xd16 <Timer0_enuSetValue+0x46>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	fc 01       	movw	r30, r24
     cfa:	81 81       	ldd	r24, Z+1	; 0x01
     cfc:	88 23       	and	r24, r24
     cfe:	31 f4       	brne	.+12     	; 0xd0c <Timer0_enuSetValue+0x3c>



		    		ASSIGN_REG(TCNT0,Copy_u8Value);
     d00:	82 e5       	ldi	r24, 0x52	; 82
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	2c 81       	ldd	r18, Y+4	; 0x04
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <Timer0_enuSetValue+0x46>

		    	}
		    	else{
		    		ASSIGN_REG(OCR0,Copy_u8Value);
     d0c:	8c e5       	ldi	r24, 0x5C	; 92
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	2c 81       	ldd	r18, Y+4	; 0x04
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18



		    }

		    return Loc_enuTimer0Status;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <Timer0_enuGetTimeElapsed>:
Timer0_StatusErrorType Timer0_enuGetTimeElapsed(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <Timer0_enuGetTimeElapsed+0x6>
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <Timer0_enuGetTimeElapsed+0x8>
     d2e:	1f 92       	push	r1
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	9b 83       	std	Y+3, r25	; 0x03
     d36:	8a 83       	std	Y+2, r24	; 0x02
     d38:	7d 83       	std	Y+5, r23	; 0x05
     d3a:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	89 2b       	or	r24, r25
     d46:	19 f4       	brne	.+6      	; 0xd4e <Timer0_enuGetTimeElapsed+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <Timer0_enuGetTimeElapsed+0x3e>
		    }
		    else{

		    	*Address_Value = TCNT0;
     d4e:	82 e5       	ldi	r24, 0x52	; 82
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	fc 01       	movw	r30, r24
     d54:	80 81       	ld	r24, Z
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	fc 01       	movw	r30, r24
     d60:	31 83       	std	Z+1, r19	; 0x01
     d62:	20 83       	st	Z, r18
		    }

		    return Loc_enuTimer0Status;
     d64:	89 81       	ldd	r24, Y+1	; 0x01
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <Timer0_enuGetRemaining>:
Timer0_StatusErrorType Timer0_enuGetRemaining(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <Timer0_enuGetRemaining+0x6>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <Timer0_enuGetRemaining+0x8>
     d7e:	1f 92       	push	r1
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	9b 83       	std	Y+3, r25	; 0x03
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	7d 83       	std	Y+5, r23	; 0x05
     d8a:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	89 2b       	or	r24, r25
     d96:	11 f4       	brne	.+4      	; 0xd9c <Timer0_enuGetRemaining+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	89 83       	std	Y+1, r24	; 0x01
		    else{


		    }

		    return Loc_enuTimer0Status;
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <Timer0_enuSetCallbackFunction>:


Timer0_StatusErrorType Timer0_enuSetCallbackFunction(const Timer0_ConfigType* Address_Timer0,void (*callback)(void)){
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <Timer0_enuSetCallbackFunction+0x6>
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <Timer0_enuSetCallbackFunction+0x8>
     db6:	1f 92       	push	r1
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	9b 83       	std	Y+3, r25	; 0x03
     dbe:	8a 83       	std	Y+2, r24	; 0x02
     dc0:	7d 83       	std	Y+5, r23	; 0x05
     dc2:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	89 2b       	or	r24, r25
     dce:	19 f4       	brne	.+6      	; 0xdd6 <Timer0_enuSetCallbackFunction+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	13 c0       	rjmp	.+38     	; 0xdfc <Timer0_enuSetCallbackFunction+0x4e>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	9b 81       	ldd	r25, Y+3	; 0x03
     dda:	fc 01       	movw	r30, r24
     ddc:	81 81       	ldd	r24, Z+1	; 0x01
     dde:	88 23       	and	r24, r24
     de0:	39 f4       	brne	.+14     	; 0xdf0 <Timer0_enuSetCallbackFunction+0x42>

		    		Timer0_OverflowInterruptHandler = callback;
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__data_end+0x1>
     dea:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__data_end>
     dee:	06 c0       	rjmp	.+12     	; 0xdfc <Timer0_enuSetCallbackFunction+0x4e>


		    	}
		    	else{
		    		Timer0_CompareInterruptHandler = callback;
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer0_CompareInterruptHandler+0x1>
     df8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer0_CompareInterruptHandler>
		    	}


		    }

		    return Loc_enuTimer0Status;
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <Timer0_enuEnableOverflowInterrupt>:

Timer0_enuEnableOverflowInterrupt(void){
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	1f 92       	push	r1
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableOverviewInterrupt();
     e1c:	89 e5       	ldi	r24, 0x59	; 89
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	29 e5       	ldi	r18, 0x59	; 89
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	f9 01       	movw	r30, r18
     e26:	20 81       	ld	r18, Z
     e28:	21 60       	ori	r18, 0x01	; 1
     e2a:	fc 01       	movw	r30, r24
     e2c:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
}
     e34:	0f 90       	pop	r0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <Timer0_enuEnableCaptureInterrupt>:

Timer0_enuEnableCaptureInterrupt(void){
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	1f 92       	push	r1
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableComparePwmInterrupt();
     e4a:	89 e5       	ldi	r24, 0x59	; 89
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	29 e5       	ldi	r18, 0x59	; 89
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	f9 01       	movw	r30, r18
     e54:	20 81       	ld	r18, Z
     e56:	22 60       	ori	r18, 0x02	; 2
     e58:	fc 01       	movw	r30, r24
     e5a:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	88 2f       	mov	r24, r24
     e60:	90 e0       	ldi	r25, 0x00	; 0
}
     e62:	0f 90       	pop	r0
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	08 95       	ret

00000e6a <Timer0_enuSetCallbackOverflowInterrupt>:


Timer0_enuSetCallbackOverflowInterrupt(void (*callback)(void)){
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <Timer0_enuSetCallbackOverflowInterrupt+0x6>
     e70:	1f 92       	push	r1
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	9b 83       	std	Y+3, r25	; 0x03
     e78:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9b 81       	ldd	r25, Y+3	; 0x03
     e82:	89 2b       	or	r24, r25
     e84:	19 f4       	brne	.+6      	; 0xe8c <Timer0_enuSetCallbackOverflowInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <Timer0_enuSetCallbackOverflowInterrupt+0x2e>
		    }

		    else{
		    		Timer0_OverflowInterruptHandler = callback;
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	9b 81       	ldd	r25, Y+3	; 0x03
     e90:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <__data_end+0x1>
     e94:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__data_end>


		    }

		    return Loc_enuTimer0Status;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
}
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <Timer0_enuSetCallbackCompareInterrupt>:
Timer0_enuSetCallbackCompareInterrupt(void (*callback)(void)){
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <Timer0_enuSetCallbackCompareInterrupt+0x6>
     eb0:	1f 92       	push	r1
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	9b 83       	std	Y+3, r25	; 0x03
     eb8:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	9b 81       	ldd	r25, Y+3	; 0x03
     ec2:	89 2b       	or	r24, r25
     ec4:	19 f4       	brne	.+6      	; 0xecc <Timer0_enuSetCallbackCompareInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <Timer0_enuSetCallbackCompareInterrupt+0x2e>
		    }

		    else{
		    		Timer0_CompareInterruptHandler = callback;
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer0_CompareInterruptHandler+0x1>
     ed4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer0_CompareInterruptHandler>


		    }

		    return Loc_enuTimer0Status;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <Timer0_enuDisableOverflowInterrupt>:


Timer0_enuDisableOverflowInterrupt(void){
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	1f 92       	push	r1
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	89 83       	std	Y+1, r24	; 0x01

			Timer0_DisableOverviewInterrupt();
     ef8:	89 e5       	ldi	r24, 0x59	; 89
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	29 e5       	ldi	r18, 0x59	; 89
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	2e 7f       	andi	r18, 0xFE	; 254
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
}
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <Timer0_enuDisableCaptureInterrupt>:

Timer0_enuDisableCaptureInterrupt(void){
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	1f 92       	push	r1
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62

		Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	89 83       	std	Y+1, r24	; 0x01

	  	Timer0_DisbleComparePwmInterrupt();
     f26:	89 e5       	ldi	r24, 0x59	; 89
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	29 e5       	ldi	r18, 0x59	; 89
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	f9 01       	movw	r30, r18
     f30:	20 81       	ld	r18, Z
     f32:	2d 7f       	andi	r18, 0xFD	; 253
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18

			    return Loc_enuTimer0Status;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0

}
     f3e:	0f 90       	pop	r0
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <Timer0_enuCtcForcePinImmediatly>:



Timer0_StatusErrorType Timer0_enuCtcForcePinImmediatly(const Timer0_ConfigType* Address_Timer0){
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <Timer0_enuCtcForcePinImmediatly+0x6>
     f4c:	1f 92       	push	r1
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	9b 83       	std	Y+3, r25	; 0x03
     f54:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	9b 81       	ldd	r25, Y+3	; 0x03
     f5e:	89 2b       	or	r24, r25
     f60:	19 f4       	brne	.+6      	; 0xf68 <Timer0_enuCtcForcePinImmediatly+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <Timer0_enuCtcForcePinImmediatly+0x34>
		    }
		    else{

		    	SET_BIT(TCCR0,FOC0_BIT);
     f68:	83 e5       	ldi	r24, 0x53	; 83
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	23 e5       	ldi	r18, 0x53	; 83
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	f9 01       	movw	r30, r18
     f72:	20 81       	ld	r18, Z
     f74:	20 68       	ori	r18, 0x80	; 128
     f76:	fc 01       	movw	r30, r24
     f78:	20 83       	st	Z, r18


		    }

		    return Loc_enuTimer0Status;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <Timer0_enuSetDutyCyclePwm>:


Timer0_StatusErrorType Timer0_enuSetDutyCyclePwm(const Timer0_ConfigType* Address_Timer0,u8 Copy_u8DutyCylePrecentage){
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <Timer0_enuSetDutyCyclePwm+0x6>
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <Timer0_enuSetDutyCyclePwm+0x8>
     f90:	1f 92       	push	r1
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	6d 83       	std	Y+5, r22	; 0x05
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	89 83       	std	Y+1, r24	; 0x01

//	u8 Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * 255);
	u8 Loc_u8DutyCycle;

		    if(NULL == Address_Timer0){
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	89 2b       	or	r24, r25
     fa6:	19 f4       	brne	.+6      	; 0xfae <Timer0_enuSetDutyCyclePwm+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	79 c0       	rjmp	.+242    	; 0x10a0 <Timer0_enuSetDutyCyclePwm+0x118>
		    }

		    else {

		    	Copy_u8DutyCylePrecentage = (Copy_u8DutyCylePrecentage >= 100) ? 100 :Copy_u8DutyCylePrecentage;
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	85 36       	cpi	r24, 0x65	; 101
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <Timer0_enuSetDutyCyclePwm+0x2e>
     fb4:	84 e6       	ldi	r24, 0x64	; 100
     fb6:	8d 83       	std	Y+5, r24	; 0x05

		    	switch(Address_Timer0->select_mode){
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	fc 01       	movw	r30, r24
     fbe:	81 81       	ldd	r24, Z+1	; 0x01
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	09 2e       	mov	r0, r25
     fc6:	00 0c       	add	r0, r0
     fc8:	aa 0b       	sbc	r26, r26
     fca:	bb 0b       	sbc	r27, r27
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	2f e0       	ldi	r18, 0x0F	; 15
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	84 1b       	sub	r24, r20
     fd6:	95 0b       	sbc	r25, r21
     fd8:	28 17       	cp	r18, r24
     fda:	39 07       	cpc	r19, r25
     fdc:	08 f4       	brcc	.+2      	; 0xfe0 <Timer0_enuSetDutyCyclePwm+0x58>
     fde:	60 c0       	rjmp	.+192    	; 0x10a0 <Timer0_enuSetDutyCyclePwm+0x118>
     fe0:	86 5d       	subi	r24, 0xD6	; 214
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	fc 01       	movw	r30, r24
     fe6:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <__tablejump2__>
		    	case  TIMER0_SELECT_MODE_NORMAL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_NORMAEL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_TOGGLE :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_CLEAR  :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_SET :
		    		Loc_enuTimer0Status = TIMER0_STATUS_FAIL;
     fea:	19 82       	std	Y+1, r1	; 0x01
		    		break;
     fec:	59 c0       	rjmp	.+178    	; 0x10a0 <Timer0_enuSetDutyCyclePwm+0x118>
		    		/* i don't know what is the usage of this */
		    		break;

		    	case TIMER0_SELECT_MODE_PWM_FAST_INVERTED_OC0_SET_ON_MATCH_CLEAR_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_SET_ON_MATCH_UPCOUNTING_CLEAR_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = TIMER0_FULL_VALUE_IN_REGISTER- (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__floatunsisf>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	48 ec       	ldi	r20, 0xC8	; 200
    100a:	52 e4       	ldi	r21, 0x42	; 66
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__divsf3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	4f e7       	ldi	r20, 0x7F	; 127
    101e:	53 e4       	ldi	r21, 0x43	; 67
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	80 95       	com	r24
    103a:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    103c:	8c e5       	ldi	r24, 0x5C	; 92
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	2a 81       	ldd	r18, Y+2	; 0x02
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18

		    		break;
    1046:	2c c0       	rjmp	.+88     	; 0x10a0 <Timer0_enuSetDutyCyclePwm+0x118>

		    	case TIMER0_SELECT_MODE_PWM_FAST_NOT_INVERTED_OC0_CLEAR_ON_MATCH_SET_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_CLEAR_ON_MATCH_UPCOUNTING_SET_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__floatunsisf>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	48 ec       	ldi	r20, 0xC8	; 200
    1064:	52 e4       	ldi	r21, 0x42	; 66
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__divsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4f e7       	ldi	r20, 0x7F	; 127
    1078:	53 e4       	ldi	r21, 0x43	; 67
    107a:	bc 01       	movw	r22, r24
    107c:	cd 01       	movw	r24, r26
    107e:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    1094:	8c e5       	ldi	r24, 0x5C	; 92
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	2a 81       	ldd	r18, Y+2	; 0x02
    109a:	fc 01       	movw	r30, r24
    109c:	20 83       	st	Z, r18

		    		break;
    109e:	00 00       	nop

		    }


		    }
		    return Loc_enuTimer0Status;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <__vector_10>:


// ISR function For TIMER0 Compare Match
void __vector_10(void) __attribute__((signal));

void __vector_10(void){
    10b2:	1f 92       	push	r1
    10b4:	0f 92       	push	r0
    10b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	2f 93       	push	r18
    10c0:	3f 93       	push	r19
    10c2:	4f 93       	push	r20
    10c4:	5f 93       	push	r21
    10c6:	6f 93       	push	r22
    10c8:	7f 93       	push	r23
    10ca:	8f 93       	push	r24
    10cc:	9f 93       	push	r25
    10ce:	af 93       	push	r26
    10d0:	bf 93       	push	r27
    10d2:	ef 93       	push	r30
    10d4:	ff 93       	push	r31
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62

	    if(NULL !=Timer0_CompareInterruptHandler ){
    10de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <Timer0_CompareInterruptHandler>
    10e2:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <Timer0_CompareInterruptHandler+0x1>
    10e6:	89 2b       	or	r24, r25
    10e8:	31 f0       	breq	.+12     	; 0x10f6 <__vector_10+0x44>
	    	Timer0_CompareInterruptHandler();
    10ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <Timer0_CompareInterruptHandler>
    10ee:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <Timer0_CompareInterruptHandler+0x1>
    10f2:	fc 01       	movw	r30, r24
    10f4:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
    10f6:	00 00       	nop
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_11>:


// ISR function For TIMER0 OverFlow
void __vector_11(void) __attribute__((signal));

void __vector_11(void){
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62

//	Timer0_DisableOverviewInterrupt();



    if(NULL !=Timer0_OverflowInterruptHandler ){
    114c:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <__data_end>
    1150:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <__data_end+0x1>
    1154:	89 2b       	or	r24, r25
    1156:	61 f0       	breq	.+24     	; 0x1170 <__vector_11+0x50>

    	TCNT0 = Timer0_InitValue;
    1158:	82 e5       	ldi	r24, 0x52	; 82
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <Timer0_InitValue>
    1160:	fc 01       	movw	r30, r24
    1162:	20 83       	st	Z, r18
    	Timer0_OverflowInterruptHandler();
    1164:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <__data_end>
    1168:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <__data_end+0x1>
    116c:	fc 01       	movw	r30, r24
    116e:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
    1170:	00 00       	nop
    1172:	df 91       	pop	r29
    1174:	cf 91       	pop	r28
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1194:	0f 90       	pop	r0
    1196:	1f 90       	pop	r1
    1198:	18 95       	reti

0000119a <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    11a2:	8a e3       	ldi	r24, 0x3A	; 58
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	2c e4       	ldi	r18, 0x4C	; 76
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    11ac:	87 e3       	ldi	r24, 0x37	; 55
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	27 ef       	ldi	r18, 0xF7	; 247
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    11b6:	84 e3       	ldi	r24, 0x34	; 52
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	2f ef       	ldi	r18, 0xFF	; 255
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    11c0:	81 e3       	ldi	r24, 0x31	; 49
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	20 e1       	ldi	r18, 0x10	; 16
    11c6:	fc 01       	movw	r30, r24
    11c8:	20 83       	st	Z, r18

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    11ca:	8b e3       	ldi	r24, 0x3B	; 59
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	fc 01       	movw	r30, r24
    11d0:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    11d2:	88 e3       	ldi	r24, 0x38	; 56
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	28 ec       	ldi	r18, 0xC8	; 200
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    11dc:	85 e3       	ldi	r24, 0x35	; 53
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	fc 01       	movw	r30, r24
    11e2:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    11e4:	82 e3       	ldi	r24, 0x32	; 50
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	28 ee       	ldi	r18, 0xE8	; 232
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
    11ee:	00 00       	nop
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <Port_enuSetPinDirection+0x6>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <Port_enuSetPinDirection+0x8>
    11fe:	1f 92       	push	r1
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	8c 83       	std	Y+4, r24	; 0x04
    1206:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    1208:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	87 70       	andi	r24, 0x07	; 7
    120e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	86 95       	lsr	r24
    1214:	86 95       	lsr	r24
    1216:	86 95       	lsr	r24
    1218:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	80 32       	cpi	r24, 0x20	; 32
    121e:	18 f0       	brcs	.+6      	; 0x1226 <Port_enuSetPinDirection+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	59 c0       	rjmp	.+178    	; 0x12d8 <Port_enuSetPinDirection+0xe2>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	18 f0       	brcs	.+6      	; 0x1232 <Port_enuSetPinDirection+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	53 c0       	rjmp	.+166    	; 0x12d8 <Port_enuSetPinDirection+0xe2>
		}

	else{

			switch(Copy_u8PinDirection){
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	41 f1       	breq	.+80     	; 0x128c <Port_enuSetPinDirection+0x96>
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	09 f0       	breq	.+2      	; 0x1242 <Port_enuSetPinDirection+0x4c>
							break;

			default:

				// impossible
					break;
    1240:	4b c0       	rjmp	.+150    	; 0x12d8 <Port_enuSetPinDirection+0xe2>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	80 5a       	subi	r24, 0xA0	; 160
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	fc 01       	movw	r30, r24
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	22 2f       	mov	r18, r18
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	20 5a       	subi	r18, 0xA0	; 160
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	f9 01       	movw	r30, r18
    1266:	20 81       	ld	r18, Z
    1268:	31 81       	ldd	r19, Z+1	; 0x01
    126a:	f9 01       	movw	r30, r18
    126c:	20 81       	ld	r18, Z
    126e:	62 2f       	mov	r22, r18
    1270:	2a 81       	ldd	r18, Y+2	; 0x02
    1272:	42 2f       	mov	r20, r18
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <Port_enuSetPinDirection+0x8a>
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	4a 95       	dec	r20
    1282:	e2 f7       	brpl	.-8      	; 0x127c <Port_enuSetPinDirection+0x86>
    1284:	26 2b       	or	r18, r22
    1286:	fc 01       	movw	r30, r24
    1288:	20 83       	st	Z, r18
					break;
    128a:	26 c0       	rjmp	.+76     	; 0x12d8 <Port_enuSetPinDirection+0xe2>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	80 5a       	subi	r24, 0xA0	; 160
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	fc 01       	movw	r30, r24
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	22 2f       	mov	r18, r18
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	20 5a       	subi	r18, 0xA0	; 160
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	f9 01       	movw	r30, r18
    12b0:	20 81       	ld	r18, Z
    12b2:	31 81       	ldd	r19, Z+1	; 0x01
    12b4:	f9 01       	movw	r30, r18
    12b6:	20 81       	ld	r18, Z
    12b8:	62 2f       	mov	r22, r18
    12ba:	2a 81       	ldd	r18, Y+2	; 0x02
    12bc:	42 2f       	mov	r20, r18
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <Port_enuSetPinDirection+0xd4>
    12c6:	22 0f       	add	r18, r18
    12c8:	33 1f       	adc	r19, r19
    12ca:	4a 95       	dec	r20
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <Port_enuSetPinDirection+0xd0>
    12ce:	20 95       	com	r18
    12d0:	26 23       	and	r18, r22
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
							break;
    12d6:	00 00       	nop

	}



	return Loc_enuState;
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	08 95       	ret

000012ea <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <Port_enuSetPinMode+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <Port_enuSetPinMode+0x8>
    12f2:	1f 92       	push	r1
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	8c 83       	std	Y+4, r24	; 0x04
    12fa:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    12fc:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	87 70       	andi	r24, 0x07	; 7
    1302:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	86 95       	lsr	r24
    1308:	86 95       	lsr	r24
    130a:	86 95       	lsr	r24
    130c:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	80 32       	cpi	r24, 0x20	; 32
    1312:	18 f0       	brcs	.+6      	; 0x131a <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	43 c1       	rjmp	.+646    	; 0x15a0 <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	84 30       	cpi	r24, 0x04	; 4
    131e:	18 f0       	brcs	.+6      	; 0x1326 <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	3d c1       	rjmp	.+634    	; 0x15a0 <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	91 05       	cpc	r25, r1
    1330:	09 f4       	brne	.+2      	; 0x1334 <Port_enuSetPinMode+0x4a>
    1332:	57 c0       	rjmp	.+174    	; 0x13e2 <Port_enuSetPinMode+0xf8>
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	91 05       	cpc	r25, r1
    1338:	1c f4       	brge	.+6      	; 0x1340 <Port_enuSetPinMode+0x56>
    133a:	89 2b       	or	r24, r25
    133c:	49 f0       	breq	.+18     	; 0x1350 <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
    133e:	30 c1       	rjmp	.+608    	; 0x15a0 <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	91 05       	cpc	r25, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <Port_enuSetPinMode+0x5e>
    1346:	97 c0       	rjmp	.+302    	; 0x1476 <Port_enuSetPinMode+0x18c>
    1348:	03 97       	sbiw	r24, 0x03	; 3
    134a:	09 f4       	brne	.+2      	; 0x134e <Port_enuSetPinMode+0x64>
    134c:	df c0       	rjmp	.+446    	; 0x150c <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
    134e:	28 c1       	rjmp	.+592    	; 0x15a0 <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	80 5a       	subi	r24, 0xA0	; 160
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	fc 01       	movw	r30, r24
    1360:	80 81       	ld	r24, Z
    1362:	91 81       	ldd	r25, Z+1	; 0x01
    1364:	2b 81       	ldd	r18, Y+3	; 0x03
    1366:	22 2f       	mov	r18, r18
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	20 5a       	subi	r18, 0xA0	; 160
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	f9 01       	movw	r30, r18
    1374:	20 81       	ld	r18, Z
    1376:	31 81       	ldd	r19, Z+1	; 0x01
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	62 2f       	mov	r22, r18
    137e:	2a 81       	ldd	r18, Y+2	; 0x02
    1380:	42 2f       	mov	r20, r18
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	02 c0       	rjmp	.+4      	; 0x138e <Port_enuSetPinMode+0xa4>
    138a:	22 0f       	add	r18, r18
    138c:	33 1f       	adc	r19, r19
    138e:	4a 95       	dec	r20
    1390:	e2 f7       	brpl	.-8      	; 0x138a <Port_enuSetPinMode+0xa0>
    1392:	26 2b       	or	r18, r22
    1394:	fc 01       	movw	r30, r24
    1396:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	88 59       	subi	r24, 0x98	; 152
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	fc 01       	movw	r30, r24
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	22 2f       	mov	r18, r18
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	22 0f       	add	r18, r18
    13b4:	33 1f       	adc	r19, r19
    13b6:	28 59       	subi	r18, 0x98	; 152
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	f9 01       	movw	r30, r18
    13bc:	20 81       	ld	r18, Z
    13be:	31 81       	ldd	r19, Z+1	; 0x01
    13c0:	f9 01       	movw	r30, r18
    13c2:	20 81       	ld	r18, Z
    13c4:	62 2f       	mov	r22, r18
    13c6:	2a 81       	ldd	r18, Y+2	; 0x02
    13c8:	42 2f       	mov	r20, r18
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <Port_enuSetPinMode+0xec>
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	4a 95       	dec	r20
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <Port_enuSetPinMode+0xe8>
    13da:	26 2b       	or	r18, r22
    13dc:	fc 01       	movw	r30, r24
    13de:	20 83       	st	Z, r18
					break;
    13e0:	df c0       	rjmp	.+446    	; 0x15a0 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	80 5a       	subi	r24, 0xA0	; 160
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	fc 01       	movw	r30, r24
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	2b 81       	ldd	r18, Y+3	; 0x03
    13f8:	22 2f       	mov	r18, r18
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	22 0f       	add	r18, r18
    13fe:	33 1f       	adc	r19, r19
    1400:	20 5a       	subi	r18, 0xA0	; 160
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	f9 01       	movw	r30, r18
    1406:	20 81       	ld	r18, Z
    1408:	31 81       	ldd	r19, Z+1	; 0x01
    140a:	f9 01       	movw	r30, r18
    140c:	20 81       	ld	r18, Z
    140e:	62 2f       	mov	r22, r18
    1410:	2a 81       	ldd	r18, Y+2	; 0x02
    1412:	42 2f       	mov	r20, r18
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	21 e0       	ldi	r18, 0x01	; 1
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <Port_enuSetPinMode+0x136>
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	4a 95       	dec	r20
    1422:	e2 f7       	brpl	.-8      	; 0x141c <Port_enuSetPinMode+0x132>
    1424:	26 2b       	or	r18, r22
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	88 59       	subi	r24, 0x98	; 152
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	fc 01       	movw	r30, r24
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	22 2f       	mov	r18, r18
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	28 59       	subi	r18, 0x98	; 152
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	31 81       	ldd	r19, Z+1	; 0x01
    1452:	f9 01       	movw	r30, r18
    1454:	20 81       	ld	r18, Z
    1456:	62 2f       	mov	r22, r18
    1458:	2a 81       	ldd	r18, Y+2	; 0x02
    145a:	42 2f       	mov	r20, r18
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	21 e0       	ldi	r18, 0x01	; 1
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <Port_enuSetPinMode+0x17e>
    1464:	22 0f       	add	r18, r18
    1466:	33 1f       	adc	r19, r19
    1468:	4a 95       	dec	r20
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <Port_enuSetPinMode+0x17a>
    146c:	20 95       	com	r18
    146e:	26 23       	and	r18, r22
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18
							break;
    1474:	95 c0       	rjmp	.+298    	; 0x15a0 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	80 5a       	subi	r24, 0xA0	; 160
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	fc 01       	movw	r30, r24
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	22 2f       	mov	r18, r18
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	22 0f       	add	r18, r18
    1492:	33 1f       	adc	r19, r19
    1494:	20 5a       	subi	r18, 0xA0	; 160
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	f9 01       	movw	r30, r18
    149a:	20 81       	ld	r18, Z
    149c:	31 81       	ldd	r19, Z+1	; 0x01
    149e:	f9 01       	movw	r30, r18
    14a0:	20 81       	ld	r18, Z
    14a2:	62 2f       	mov	r22, r18
    14a4:	2a 81       	ldd	r18, Y+2	; 0x02
    14a6:	42 2f       	mov	r20, r18
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	21 e0       	ldi	r18, 0x01	; 1
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <Port_enuSetPinMode+0x1ca>
    14b0:	22 0f       	add	r18, r18
    14b2:	33 1f       	adc	r19, r19
    14b4:	4a 95       	dec	r20
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <Port_enuSetPinMode+0x1c6>
    14b8:	20 95       	com	r18
    14ba:	26 23       	and	r18, r22
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	88 59       	subi	r24, 0x98	; 152
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	fc 01       	movw	r30, r24
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	2b 81       	ldd	r18, Y+3	; 0x03
    14d6:	22 2f       	mov	r18, r18
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	22 0f       	add	r18, r18
    14dc:	33 1f       	adc	r19, r19
    14de:	28 59       	subi	r18, 0x98	; 152
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
    14e2:	f9 01       	movw	r30, r18
    14e4:	20 81       	ld	r18, Z
    14e6:	31 81       	ldd	r19, Z+1	; 0x01
    14e8:	f9 01       	movw	r30, r18
    14ea:	20 81       	ld	r18, Z
    14ec:	62 2f       	mov	r22, r18
    14ee:	2a 81       	ldd	r18, Y+2	; 0x02
    14f0:	42 2f       	mov	r20, r18
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	21 e0       	ldi	r18, 0x01	; 1
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <Port_enuSetPinMode+0x214>
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	4a 95       	dec	r20
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <Port_enuSetPinMode+0x210>
    1502:	20 95       	com	r18
    1504:	26 23       	and	r18, r22
    1506:	fc 01       	movw	r30, r24
    1508:	20 83       	st	Z, r18
								break;
    150a:	4a c0       	rjmp	.+148    	; 0x15a0 <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	80 5a       	subi	r24, 0xA0	; 160
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	fc 01       	movw	r30, r24
    151c:	80 81       	ld	r24, Z
    151e:	91 81       	ldd	r25, Z+1	; 0x01
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	22 2f       	mov	r18, r18
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	22 0f       	add	r18, r18
    1528:	33 1f       	adc	r19, r19
    152a:	20 5a       	subi	r18, 0xA0	; 160
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	f9 01       	movw	r30, r18
    1530:	20 81       	ld	r18, Z
    1532:	31 81       	ldd	r19, Z+1	; 0x01
    1534:	f9 01       	movw	r30, r18
    1536:	20 81       	ld	r18, Z
    1538:	62 2f       	mov	r22, r18
    153a:	2a 81       	ldd	r18, Y+2	; 0x02
    153c:	42 2f       	mov	r20, r18
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	21 e0       	ldi	r18, 0x01	; 1
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <Port_enuSetPinMode+0x260>
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	4a 95       	dec	r20
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <Port_enuSetPinMode+0x25c>
    154e:	20 95       	com	r18
    1550:	26 23       	and	r18, r22
    1552:	fc 01       	movw	r30, r24
    1554:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	88 59       	subi	r24, 0x98	; 152
    1562:	9f 4f       	sbci	r25, 0xFF	; 255
    1564:	fc 01       	movw	r30, r24
    1566:	80 81       	ld	r24, Z
    1568:	91 81       	ldd	r25, Z+1	; 0x01
    156a:	2b 81       	ldd	r18, Y+3	; 0x03
    156c:	22 2f       	mov	r18, r18
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	22 0f       	add	r18, r18
    1572:	33 1f       	adc	r19, r19
    1574:	28 59       	subi	r18, 0x98	; 152
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	f9 01       	movw	r30, r18
    157a:	20 81       	ld	r18, Z
    157c:	31 81       	ldd	r19, Z+1	; 0x01
    157e:	f9 01       	movw	r30, r18
    1580:	20 81       	ld	r18, Z
    1582:	62 2f       	mov	r22, r18
    1584:	2a 81       	ldd	r18, Y+2	; 0x02
    1586:	42 2f       	mov	r20, r18
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <Port_enuSetPinMode+0x2aa>
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
    1594:	4a 95       	dec	r20
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <Port_enuSetPinMode+0x2a6>
    1598:	26 2b       	or	r18, r22
    159a:	fc 01       	movw	r30, r24
    159c:	20 83       	st	Z, r18
								break;
    159e:	00 00       	nop



	}

	return Loc_enuState;
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret

000015b2 <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	1f 92       	push	r1
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    15bc:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
    15be:	8f e5       	ldi	r24, 0x5F	; 95
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	2f e5       	ldi	r18, 0x5F	; 95
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	f9 01       	movw	r30, r18
    15c8:	20 81       	ld	r18, Z
    15ca:	20 68       	ori	r18, 0x80	; 128
    15cc:	fc 01       	movw	r30, r24
    15ce:	20 83       	st	Z, r18

	return Loc_enuGieState;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    15d2:	0f 90       	pop	r0
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	1f 92       	push	r1
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    15e4:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
    15e6:	8f e5       	ldi	r24, 0x5F	; 95
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	2f e5       	ldi	r18, 0x5F	; 95
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	f9 01       	movw	r30, r18
    15f0:	20 81       	ld	r18, Z
    15f2:	2f 77       	andi	r18, 0x7F	; 127
    15f4:	fc 01       	movw	r30, r24
    15f6:	20 83       	st	Z, r18

		return Loc_enuGieState;
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fa:	0f 90       	pop	r0
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	00 d0       	rcall	.+0      	; 0x1608 <Gie_enuSetGloablInterrupt+0x6>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    160e:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
    1610:	8f e5       	ldi	r24, 0x5F	; 95
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	2f e5       	ldi	r18, 0x5F	; 95
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	f9 01       	movw	r30, r18
    161a:	20 81       	ld	r18, Z
    161c:	42 2f       	mov	r20, r18
    161e:	4f 77       	andi	r20, 0x7F	; 127
    1620:	2a 81       	ldd	r18, Y+2	; 0x02
    1622:	22 2f       	mov	r18, r18
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	36 95       	lsr	r19
    1628:	32 2f       	mov	r19, r18
    162a:	22 27       	eor	r18, r18
    162c:	37 95       	ror	r19
    162e:	27 95       	ror	r18
    1630:	24 2b       	or	r18, r20
    1632:	fc 01       	movw	r30, r24
    1634:	20 83       	st	Z, r18

			return Loc_enuGieState;
    1636:	89 81       	ldd	r24, Y+1	; 0x01
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	08 95       	ret

00001642 <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	00 d0       	rcall	.+0      	; 0x1648 <Gie_enuGetGloablInterrupt+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <Gie_enuGetGloablInterrupt+0x8>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	7c 83       	std	Y+4, r23	; 0x04
    1652:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1654:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	89 2b       	or	r24, r25
    165c:	19 f4       	brne	.+6      	; 0x1664 <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	0c c0       	rjmp	.+24     	; 0x167c <Gie_enuGetGloablInterrupt+0x3a>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
    1664:	8f e5       	ldi	r24, 0x5F	; 95
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	fc 01       	movw	r30, r24
    166a:	80 81       	ld	r24, Z
    166c:	28 2f       	mov	r18, r24
    166e:	22 1f       	adc	r18, r18
    1670:	22 27       	eor	r18, r18
    1672:	22 1f       	adc	r18, r18
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	fc 01       	movw	r30, r24
    167a:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
    167c:	89 81       	ldd	r24, Y+1	; 0x01
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	00 d0       	rcall	.+0      	; 0x1692 <Exti_enuEnable+0x6>
    1692:	1f 92       	push	r1
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	8a 83       	std	Y+2, r24	; 0x02
    169a:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	83 30       	cpi	r24, 0x03	; 3
    16a4:	18 f0       	brcs	.+6      	; 0x16ac <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	8f c0       	rjmp	.+286    	; 0x17ca <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	91 05       	cpc	r25, r1
    16b6:	89 f1       	breq	.+98     	; 0x171a <Exti_enuEnable+0x8e>
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <Exti_enuEnable+0x34>
    16be:	62 c0       	rjmp	.+196    	; 0x1784 <Exti_enuEnable+0xf8>
    16c0:	89 2b       	or	r24, r25
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
    16c4:	82 c0       	rjmp	.+260    	; 0x17ca <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
    16c6:	85 e5       	ldi	r24, 0x55	; 85
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	25 e5       	ldi	r18, 0x55	; 85
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	f9 01       	movw	r30, r18
    16d0:	20 81       	ld	r18, Z
    16d2:	32 2f       	mov	r19, r18
    16d4:	3e 7f       	andi	r19, 0xFE	; 254
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	21 70       	andi	r18, 0x01	; 1
    16da:	23 2b       	or	r18, r19
    16dc:	fc 01       	movw	r30, r24
    16de:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
    16e0:	85 e5       	ldi	r24, 0x55	; 85
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	25 e5       	ldi	r18, 0x55	; 85
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	f9 01       	movw	r30, r18
    16ea:	20 81       	ld	r18, Z
    16ec:	42 2f       	mov	r20, r18
    16ee:	4d 7f       	andi	r20, 0xFD	; 253
    16f0:	2b 81       	ldd	r18, Y+3	; 0x03
    16f2:	26 95       	lsr	r18
    16f4:	22 2f       	mov	r18, r18
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	21 70       	andi	r18, 0x01	; 1
    16fa:	33 27       	eor	r19, r19
    16fc:	22 0f       	add	r18, r18
    16fe:	33 1f       	adc	r19, r19
    1700:	24 2b       	or	r18, r20
    1702:	fc 01       	movw	r30, r24
    1704:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
    1706:	8b e5       	ldi	r24, 0x5B	; 91
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	2b e5       	ldi	r18, 0x5B	; 91
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	f9 01       	movw	r30, r18
    1710:	20 81       	ld	r18, Z
    1712:	20 64       	ori	r18, 0x40	; 64
    1714:	fc 01       	movw	r30, r24
    1716:	20 83       	st	Z, r18

			break;
    1718:	58 c0       	rjmp	.+176    	; 0x17ca <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
    171a:	85 e5       	ldi	r24, 0x55	; 85
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	25 e5       	ldi	r18, 0x55	; 85
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	f9 01       	movw	r30, r18
    1724:	20 81       	ld	r18, Z
    1726:	42 2f       	mov	r20, r18
    1728:	4b 7f       	andi	r20, 0xFB	; 251
    172a:	2b 81       	ldd	r18, Y+3	; 0x03
    172c:	22 2f       	mov	r18, r18
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	21 70       	andi	r18, 0x01	; 1
    1732:	33 27       	eor	r19, r19
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	24 2b       	or	r18, r20
    173e:	fc 01       	movw	r30, r24
    1740:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
    1742:	85 e5       	ldi	r24, 0x55	; 85
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	25 e5       	ldi	r18, 0x55	; 85
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	f9 01       	movw	r30, r18
    174c:	20 81       	ld	r18, Z
    174e:	42 2f       	mov	r20, r18
    1750:	47 7f       	andi	r20, 0xF7	; 247
    1752:	2b 81       	ldd	r18, Y+3	; 0x03
    1754:	26 95       	lsr	r18
    1756:	22 2f       	mov	r18, r18
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	21 70       	andi	r18, 0x01	; 1
    175c:	33 27       	eor	r19, r19
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	22 0f       	add	r18, r18
    1764:	33 1f       	adc	r19, r19
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	24 2b       	or	r18, r20
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
    1770:	8b e5       	ldi	r24, 0x5B	; 91
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	2b e5       	ldi	r18, 0x5B	; 91
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	f9 01       	movw	r30, r18
    177a:	20 81       	ld	r18, Z
    177c:	20 68       	ori	r18, 0x80	; 128
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18
			break;
    1782:	23 c0       	rjmp	.+70     	; 0x17ca <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
    1784:	84 e5       	ldi	r24, 0x54	; 84
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	24 e5       	ldi	r18, 0x54	; 84
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	f9 01       	movw	r30, r18
    178e:	20 81       	ld	r18, Z
    1790:	42 2f       	mov	r20, r18
    1792:	4f 7b       	andi	r20, 0xBF	; 191
    1794:	2b 81       	ldd	r18, Y+3	; 0x03
    1796:	22 2f       	mov	r18, r18
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	21 70       	andi	r18, 0x01	; 1
    179c:	33 27       	eor	r19, r19
    179e:	00 24       	eor	r0, r0
    17a0:	36 95       	lsr	r19
    17a2:	27 95       	ror	r18
    17a4:	07 94       	ror	r0
    17a6:	36 95       	lsr	r19
    17a8:	27 95       	ror	r18
    17aa:	07 94       	ror	r0
    17ac:	32 2f       	mov	r19, r18
    17ae:	20 2d       	mov	r18, r0
    17b0:	24 2b       	or	r18, r20
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
    17b6:	8b e5       	ldi	r24, 0x5B	; 91
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	2b e5       	ldi	r18, 0x5B	; 91
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	f9 01       	movw	r30, r18
    17c0:	20 81       	ld	r18, Z
    17c2:	20 62       	ori	r18, 0x20	; 32
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
			break;
    17c8:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    17ca:	89 81       	ldd	r24, Y+1	; 0x01

}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	08 95       	ret

000017d8 <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	00 d0       	rcall	.+0      	; 0x17de <Exti_enuDisable+0x6>
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	83 30       	cpi	r24, 0x03	; 3
    17ec:	18 f0       	brcs	.+6      	; 0x17f4 <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	2a c0       	rjmp	.+84     	; 0x1848 <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	81 f0       	breq	.+32     	; 0x1820 <Exti_enuDisable+0x48>
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	91 05       	cpc	r25, r1
    1804:	b9 f0       	breq	.+46     	; 0x1834 <Exti_enuDisable+0x5c>
    1806:	89 2b       	or	r24, r25
    1808:	09 f0       	breq	.+2      	; 0x180c <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
    180a:	1e c0       	rjmp	.+60     	; 0x1848 <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
    180c:	8b e5       	ldi	r24, 0x5B	; 91
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	2b e5       	ldi	r18, 0x5B	; 91
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	f9 01       	movw	r30, r18
    1816:	20 81       	ld	r18, Z
    1818:	2f 7b       	andi	r18, 0xBF	; 191
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
			break;
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
    1820:	8b e5       	ldi	r24, 0x5B	; 91
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	2b e5       	ldi	r18, 0x5B	; 91
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	f9 01       	movw	r30, r18
    182a:	20 81       	ld	r18, Z
    182c:	2f 77       	andi	r18, 0x7F	; 127
    182e:	fc 01       	movw	r30, r24
    1830:	20 83       	st	Z, r18
			break;
    1832:	0a c0       	rjmp	.+20     	; 0x1848 <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
    1834:	8b e5       	ldi	r24, 0x5B	; 91
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	2b e5       	ldi	r18, 0x5B	; 91
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	f9 01       	movw	r30, r18
    183e:	20 81       	ld	r18, Z
    1840:	2f 7d       	andi	r18, 0xDF	; 223
    1842:	fc 01       	movw	r30, r24
    1844:	20 83       	st	Z, r18
			break;
    1846:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    1848:	89 81       	ldd	r24, Y+1	; 0x01

}
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	00 d0       	rcall	.+0      	; 0x185a <Exti_enuSetCallbackFunction+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <Exti_enuSetCallbackFunction+0x8>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	7c 83       	std	Y+4, r23	; 0x04
    1864:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	18 f0       	brcs	.+6      	; 0x1876 <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    1870:	83 e0       	ldi	r24, 0x03	; 3
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	13 c0       	rjmp	.+38     	; 0x189c <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	89 2b       	or	r24, r25
    187c:	19 f4       	brne	.+6      	; 0x1884 <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	0c c0       	rjmp	.+24     	; 0x189c <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	85 51       	subi	r24, 0x15	; 21
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	2b 81       	ldd	r18, Y+3	; 0x03
    1894:	3c 81       	ldd	r19, Y+4	; 0x04
    1896:	fc 01       	movw	r30, r24
    1898:	31 83       	std	Z+1, r19	; 0x01
    189a:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
    189c:	89 81       	ldd	r24, Y+1	; 0x01

}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18b4:	0f 92       	push	r0
    18b6:	11 24       	eor	r1, r1
    18b8:	2f 93       	push	r18
    18ba:	3f 93       	push	r19
    18bc:	4f 93       	push	r20
    18be:	5f 93       	push	r21
    18c0:	6f 93       	push	r22
    18c2:	7f 93       	push	r23
    18c4:	8f 93       	push	r24
    18c6:	9f 93       	push	r25
    18c8:	af 93       	push	r26
    18ca:	bf 93       	push	r27
    18cc:	ef 93       	push	r30
    18ce:	ff 93       	push	r31
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
    18d8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <Exti_InterruptHandler>
    18dc:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <Exti_InterruptHandler+0x1>
    18e0:	89 2b       	or	r24, r25
    18e2:	31 f0       	breq	.+12     	; 0x18f0 <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
    18e4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <Exti_InterruptHandler>
    18e8:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <Exti_InterruptHandler+0x1>
    18ec:	fc 01       	movw	r30, r24
    18ee:	09 95       	icall

}
    18f0:	00 00       	nop
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	ff 91       	pop	r31
    18f8:	ef 91       	pop	r30
    18fa:	bf 91       	pop	r27
    18fc:	af 91       	pop	r26
    18fe:	9f 91       	pop	r25
    1900:	8f 91       	pop	r24
    1902:	7f 91       	pop	r23
    1904:	6f 91       	pop	r22
    1906:	5f 91       	pop	r21
    1908:	4f 91       	pop	r20
    190a:	3f 91       	pop	r19
    190c:	2f 91       	pop	r18
    190e:	0f 90       	pop	r0
    1910:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1914:	0f 90       	pop	r0
    1916:	1f 90       	pop	r1
    1918:	18 95       	reti

0000191a <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    191a:	1f 92       	push	r1
    191c:	0f 92       	push	r0
    191e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1922:	0f 92       	push	r0
    1924:	11 24       	eor	r1, r1
    1926:	2f 93       	push	r18
    1928:	3f 93       	push	r19
    192a:	4f 93       	push	r20
    192c:	5f 93       	push	r21
    192e:	6f 93       	push	r22
    1930:	7f 93       	push	r23
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	af 93       	push	r26
    1938:	bf 93       	push	r27
    193a:	ef 93       	push	r30
    193c:	ff 93       	push	r31
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
    1946:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <Exti_InterruptHandler+0x2>
    194a:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <Exti_InterruptHandler+0x3>
    194e:	89 2b       	or	r24, r25
    1950:	31 f0       	breq	.+12     	; 0x195e <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
    1952:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <Exti_InterruptHandler+0x2>
    1956:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <Exti_InterruptHandler+0x3>
    195a:	fc 01       	movw	r30, r24
    195c:	09 95       	icall

}
    195e:	00 00       	nop
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1982:	0f 90       	pop	r0
    1984:	1f 90       	pop	r1
    1986:	18 95       	reti

00001988 <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1988:	1f 92       	push	r1
    198a:	0f 92       	push	r0
    198c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1990:	0f 92       	push	r0
    1992:	11 24       	eor	r1, r1
    1994:	2f 93       	push	r18
    1996:	3f 93       	push	r19
    1998:	4f 93       	push	r20
    199a:	5f 93       	push	r21
    199c:	6f 93       	push	r22
    199e:	7f 93       	push	r23
    19a0:	8f 93       	push	r24
    19a2:	9f 93       	push	r25
    19a4:	af 93       	push	r26
    19a6:	bf 93       	push	r27
    19a8:	ef 93       	push	r30
    19aa:	ff 93       	push	r31
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
    19b4:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <Exti_InterruptHandler+0x4>
    19b8:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <Exti_InterruptHandler+0x5>
    19bc:	89 2b       	or	r24, r25
    19be:	31 f0       	breq	.+12     	; 0x19cc <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
    19c0:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <Exti_InterruptHandler+0x4>
    19c4:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <Exti_InterruptHandler+0x5>
    19c8:	fc 01       	movw	r30, r24
    19ca:	09 95       	icall

}
    19cc:	00 00       	nop
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	ff 91       	pop	r31
    19d4:	ef 91       	pop	r30
    19d6:	bf 91       	pop	r27
    19d8:	af 91       	pop	r26
    19da:	9f 91       	pop	r25
    19dc:	8f 91       	pop	r24
    19de:	7f 91       	pop	r23
    19e0:	6f 91       	pop	r22
    19e2:	5f 91       	pop	r21
    19e4:	4f 91       	pop	r20
    19e6:	3f 91       	pop	r19
    19e8:	2f 91       	pop	r18
    19ea:	0f 90       	pop	r0
    19ec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    19f0:	0f 90       	pop	r0
    19f2:	1f 90       	pop	r1
    19f4:	18 95       	reti

000019f6 <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <Dio_enuWriteChannel+0x6>
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <Dio_enuWriteChannel+0x8>
    19fe:	1f 92       	push	r1
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	8c 83       	std	Y+4, r24	; 0x04
    1a06:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1a08:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	87 70       	andi	r24, 0x07	; 7
    1a0e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	86 95       	lsr	r24
    1a14:	86 95       	lsr	r24
    1a16:	86 95       	lsr	r24
    1a18:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	80 32       	cpi	r24, 0x20	; 32
    1a1e:	18 f0       	brcs	.+6      	; 0x1a26 <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	4e c0       	rjmp	.+156    	; 0x1ac2 <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	80 59       	subi	r24, 0x90	; 144
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	fc 01       	movw	r30, r24
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	2a 81       	ldd	r18, Y+2	; 0x02
    1a44:	22 2f       	mov	r18, r18
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <Dio_enuWriteChannel+0x58>
    1a4a:	95 95       	asr	r25
    1a4c:	87 95       	ror	r24
    1a4e:	2a 95       	dec	r18
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <Dio_enuWriteChannel+0x54>
    1a52:	81 70       	andi	r24, 0x01	; 1
    1a54:	99 27       	eor	r25, r25
    1a56:	89 2b       	or	r24, r25
    1a58:	19 f4       	brne	.+6      	; 0x1a60 <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	31 c0       	rjmp	.+98     	; 0x1ac2 <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	88 58       	subi	r24, 0x88	; 136
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	fc 01       	movw	r30, r24
    1a70:	80 81       	ld	r24, Z
    1a72:	91 81       	ldd	r25, Z+1	; 0x01
    1a74:	2b 81       	ldd	r18, Y+3	; 0x03
    1a76:	22 2f       	mov	r18, r18
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	22 0f       	add	r18, r18
    1a7c:	33 1f       	adc	r19, r19
    1a7e:	28 58       	subi	r18, 0x88	; 136
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	f9 01       	movw	r30, r18
    1a84:	20 81       	ld	r18, Z
    1a86:	31 81       	ldd	r19, Z+1	; 0x01
    1a88:	f9 01       	movw	r30, r18
    1a8a:	20 81       	ld	r18, Z
    1a8c:	62 2f       	mov	r22, r18
    1a8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a90:	42 2f       	mov	r20, r18
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	21 e0       	ldi	r18, 0x01	; 1
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <Dio_enuWriteChannel+0xa8>
    1a9a:	22 0f       	add	r18, r18
    1a9c:	33 1f       	adc	r19, r19
    1a9e:	4a 95       	dec	r20
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <Dio_enuWriteChannel+0xa4>
    1aa2:	20 95       	com	r18
    1aa4:	62 23       	and	r22, r18
    1aa6:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa8:	22 2f       	mov	r18, r18
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a 81       	ldd	r20, Y+2	; 0x02
    1aae:	44 2f       	mov	r20, r20
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <Dio_enuWriteChannel+0xc2>
    1ab4:	22 0f       	add	r18, r18
    1ab6:	33 1f       	adc	r19, r19
    1ab8:	4a 95       	dec	r20
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <Dio_enuWriteChannel+0xbe>
    1abc:	26 2b       	or	r18, r22
    1abe:	fc 01       	movw	r30, r24
    1ac0:	20 83       	st	Z, r18

}

	return Loc_enuState;
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <Dio_enuReadChannel+0x6>
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <Dio_enuReadChannel+0x8>
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <Dio_enuReadChannel+0xa>
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	8c 83       	std	Y+4, r24	; 0x04
    1ae4:	7e 83       	std	Y+6, r23	; 0x06
    1ae6:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1ae8:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	87 70       	andi	r24, 0x07	; 7
    1aee:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	86 95       	lsr	r24
    1af4:	86 95       	lsr	r24
    1af6:	86 95       	lsr	r24
    1af8:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    1afa:	8c 81       	ldd	r24, Y+4	; 0x04
    1afc:	80 32       	cpi	r24, 0x20	; 32
    1afe:	18 f0       	brcs	.+6      	; 0x1b06 <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	40 c0       	rjmp	.+128    	; 0x1b86 <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	80 59       	subi	r24, 0x90	; 144
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
    1b14:	fc 01       	movw	r30, r24
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	80 81       	ld	r24, Z
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	2a 81       	ldd	r18, Y+2	; 0x02
    1b24:	22 2f       	mov	r18, r18
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <Dio_enuReadChannel+0x5a>
    1b2a:	95 95       	asr	r25
    1b2c:	87 95       	ror	r24
    1b2e:	2a 95       	dec	r18
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <Dio_enuReadChannel+0x56>
    1b32:	81 70       	andi	r24, 0x01	; 1
    1b34:	99 27       	eor	r25, r25
    1b36:	89 2b       	or	r24, r25
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	23 c0       	rjmp	.+70     	; 0x1b86 <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	89 2b       	or	r24, r25
    1b46:	19 f4       	brne	.+6      	; 0x1b4e <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    1b48:	84 e0       	ldi	r24, 0x04	; 4
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	1c c0       	rjmp	.+56     	; 0x1b86 <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	80 58       	subi	r24, 0x80	; 128
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	fc 01       	movw	r30, r24
    1b64:	80 81       	ld	r24, Z
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b6c:	22 2f       	mov	r18, r18
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <Dio_enuReadChannel+0xa2>
    1b72:	95 95       	asr	r25
    1b74:	87 95       	ror	r24
    1b76:	2a 95       	dec	r18
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <Dio_enuReadChannel+0x9e>
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	21 70       	andi	r18, 0x01	; 1
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	fc 01       	movw	r30, r24
    1b84:	20 83       	st	Z, r18


	}

		return Loc_enuState;
    1b86:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b88:	26 96       	adiw	r28, 0x06	; 6
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	08 95       	ret

00001b9a <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <Dio_enuWritePort+0x6>
    1ba0:	1f 92       	push	r1
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	8a 83       	std	Y+2, r24	; 0x02
    1ba8:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1baa:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	18 f0       	brcs	.+6      	; 0x1bb8 <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	1e c0       	rjmp	.+60     	; 0x1bf4 <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	80 59       	subi	r24, 0x90	; 144
    1bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	fc 01       	movw	r30, r24
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	0d c0       	rjmp	.+26     	; 0x1bf4 <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	88 58       	subi	r24, 0x88	; 136
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	fc 01       	movw	r30, r24
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01



}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <Dio_enuReadPort+0x6>
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <Dio_enuReadPort+0x8>
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
    1c10:	7c 83       	std	Y+4, r23	; 0x04
    1c12:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1c14:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	18 f0       	brcs	.+6      	; 0x1c22 <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	28 c0       	rjmp	.+80     	; 0x1c72 <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	88 2f       	mov	r24, r24
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	80 59       	subi	r24, 0x90	; 144
    1c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c30:	fc 01       	movw	r30, r24
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	fc 01       	movw	r30, r24
    1c38:	80 81       	ld	r24, Z
    1c3a:	88 23       	and	r24, r24
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	17 c0       	rjmp	.+46     	; 0x1c72 <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	89 2b       	or	r24, r25
    1c4a:	19 f4       	brne	.+6      	; 0x1c52 <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    1c4c:	84 e0       	ldi	r24, 0x04	; 4
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	10 c0       	rjmp	.+32     	; 0x1c72 <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	80 58       	subi	r24, 0x80	; 128
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	fc 01       	movw	r30, r24
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01
    1c66:	fc 01       	movw	r30, r24
    1c68:	20 81       	ld	r18, Z
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18

		}

			return Loc_enuState;
    1c72:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	08 95       	ret

00001c82 <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <Dio_enuFlipChannel+0x6>
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <Dio_enuFlipChannel+0x8>
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1c90:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    1c92:	8c 81       	ldd	r24, Y+4	; 0x04
    1c94:	87 70       	andi	r24, 0x07	; 7
    1c96:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	86 95       	lsr	r24
    1c9c:	86 95       	lsr	r24
    1c9e:	86 95       	lsr	r24
    1ca0:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	80 32       	cpi	r24, 0x20	; 32
    1ca6:	18 f0       	brcs	.+6      	; 0x1cae <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	41 c0       	rjmp	.+130    	; 0x1d30 <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	80 59       	subi	r24, 0x90	; 144
    1cba:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	80 81       	ld	r24, Z
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	2a 81       	ldd	r18, Y+2	; 0x02
    1ccc:	22 2f       	mov	r18, r18
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <Dio_enuFlipChannel+0x54>
    1cd2:	95 95       	asr	r25
    1cd4:	87 95       	ror	r24
    1cd6:	2a 95       	dec	r18
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <Dio_enuFlipChannel+0x50>
    1cda:	81 70       	andi	r24, 0x01	; 1
    1cdc:	99 27       	eor	r25, r25
    1cde:	89 2b       	or	r24, r25
    1ce0:	19 f4       	brne	.+6      	; 0x1ce8 <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	24 c0       	rjmp	.+72     	; 0x1d30 <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	88 58       	subi	r24, 0x88	; 136
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfe:	22 2f       	mov	r18, r18
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	22 0f       	add	r18, r18
    1d04:	33 1f       	adc	r19, r19
    1d06:	28 58       	subi	r18, 0x88	; 136
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	f9 01       	movw	r30, r18
    1d0c:	20 81       	ld	r18, Z
    1d0e:	31 81       	ldd	r19, Z+1	; 0x01
    1d10:	f9 01       	movw	r30, r18
    1d12:	20 81       	ld	r18, Z
    1d14:	62 2f       	mov	r22, r18
    1d16:	2a 81       	ldd	r18, Y+2	; 0x02
    1d18:	42 2f       	mov	r20, r18
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	21 e0       	ldi	r18, 0x01	; 1
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <Dio_enuFlipChannel+0xa4>
    1d22:	22 0f       	add	r18, r18
    1d24:	33 1f       	adc	r19, r19
    1d26:	4a 95       	dec	r20
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <Dio_enuFlipChannel+0xa0>
    1d2a:	26 27       	eor	r18, r22
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <Adc_enuInit>:
/********************************** Data Type Declarations ****************************/

/********************************** Software Interfaces Declarations *******************/


Adc_StatusErrorType Adc_enuInit(const Adc_PinConfigType* Address_Adc){
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <Adc_enuInit+0x6>
    1d46:	1f 92       	push	r1
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9b 83       	std	Y+3, r25	; 0x03
    1d4e:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	89 2b       	or	r24, r25
    1d5a:	19 f4       	brne	.+6      	; 0x1d62 <Adc_enuInit+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	65 c0       	rjmp	.+202    	; 0x1e2c <Adc_enuInit+0xec>
	    }
	    else{
	    	 /* Disable Adc Peripheral */
	    	        Adc_Disable();
    1d62:	86 e2       	ldi	r24, 0x26	; 38
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	26 e2       	ldi	r18, 0x26	; 38
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	f9 01       	movw	r30, r18
    1d6c:	20 81       	ld	r18, Z
    1d6e:	2f 77       	andi	r18, 0x7F	; 127
    1d70:	fc 01       	movw	r30, r24
    1d72:	20 83       	st	Z, r18



	    	        /* Choose Conversion Clock  */
	    	        Adc_SelectConversionClock(Address_Adc->conversion_frequancy);
    1d74:	86 e2       	ldi	r24, 0x26	; 38
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	26 e2       	ldi	r18, 0x26	; 38
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	f9 01       	movw	r30, r18
    1d7e:	20 81       	ld	r18, Z
    1d80:	42 2f       	mov	r20, r18
    1d82:	40 77       	andi	r20, 0x70	; 112
    1d84:	2a 81       	ldd	r18, Y+2	; 0x02
    1d86:	3b 81       	ldd	r19, Y+3	; 0x03
    1d88:	f9 01       	movw	r30, r18
    1d8a:	23 81       	ldd	r18, Z+3	; 0x03
    1d8c:	27 70       	andi	r18, 0x07	; 7
    1d8e:	24 2b       	or	r18, r20
    1d90:	fc 01       	movw	r30, r24
    1d92:	20 83       	st	Z, r18

	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    1d94:	87 e2       	ldi	r24, 0x27	; 39
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	27 e2       	ldi	r18, 0x27	; 39
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	f9 01       	movw	r30, r18
    1d9e:	20 81       	ld	r18, Z
    1da0:	42 2f       	mov	r20, r18
    1da2:	48 7f       	andi	r20, 0xF8	; 248
    1da4:	2a 81       	ldd	r18, Y+2	; 0x02
    1da6:	3b 81       	ldd	r19, Y+3	; 0x03
    1da8:	f9 01       	movw	r30, r18
    1daa:	20 81       	ld	r18, Z
    1dac:	27 70       	andi	r18, 0x07	; 7
    1dae:	24 2b       	or	r18, r20
    1db0:	fc 01       	movw	r30, r24
    1db2:	20 83       	st	Z, r18


	    	        /*Configure Result Format */
	    	        Adc_SelectResultFormat(Address_Adc->result_format);
    1db4:	87 e2       	ldi	r24, 0x27	; 39
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	27 e2       	ldi	r18, 0x27	; 39
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	f9 01       	movw	r30, r18
    1dbe:	20 81       	ld	r18, Z
    1dc0:	42 2f       	mov	r20, r18
    1dc2:	4f 7d       	andi	r20, 0xDF	; 223
    1dc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc6:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc8:	f9 01       	movw	r30, r18
    1dca:	22 81       	ldd	r18, Z+2	; 0x02
    1dcc:	22 2f       	mov	r18, r18
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	22 0f       	add	r18, r18
    1dd2:	33 1f       	adc	r19, r19
    1dd4:	22 95       	swap	r18
    1dd6:	32 95       	swap	r19
    1dd8:	30 7f       	andi	r19, 0xF0	; 240
    1dda:	32 27       	eor	r19, r18
    1ddc:	20 7f       	andi	r18, 0xF0	; 240
    1dde:	32 27       	eor	r19, r18
    1de0:	24 2b       	or	r18, r20
    1de2:	fc 01       	movw	r30, r24
    1de4:	20 83       	st	Z, r18

	    	        /* Configure Voltage Reference*/
	    	        Adc_SelectRefVoltageSource(Address_Adc->vref_source);
    1de6:	87 e2       	ldi	r24, 0x27	; 39
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	27 e2       	ldi	r18, 0x27	; 39
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	f9 01       	movw	r30, r18
    1df0:	20 81       	ld	r18, Z
    1df2:	42 2f       	mov	r20, r18
    1df4:	4f 73       	andi	r20, 0x3F	; 63
    1df6:	2a 81       	ldd	r18, Y+2	; 0x02
    1df8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfa:	f9 01       	movw	r30, r18
    1dfc:	21 81       	ldd	r18, Z+1	; 0x01
    1dfe:	22 2f       	mov	r18, r18
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	00 24       	eor	r0, r0
    1e04:	36 95       	lsr	r19
    1e06:	27 95       	ror	r18
    1e08:	07 94       	ror	r0
    1e0a:	36 95       	lsr	r19
    1e0c:	27 95       	ror	r18
    1e0e:	07 94       	ror	r0
    1e10:	32 2f       	mov	r19, r18
    1e12:	20 2d       	mov	r18, r0
    1e14:	24 2b       	or	r18, r20
    1e16:	fc 01       	movw	r30, r24
    1e18:	20 83       	st	Z, r18

	    	        /* Enable Adc Peripheral */
	    	        Adc_Enable();
    1e1a:	86 e2       	ldi	r24, 0x26	; 38
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	26 e2       	ldi	r18, 0x26	; 38
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	f9 01       	movw	r30, r18
    1e24:	20 81       	ld	r18, Z
    1e26:	20 68       	ori	r18, 0x80	; 128
    1e28:	fc 01       	movw	r30, r24
    1e2a:	20 83       	st	Z, r18

	    }

	    return Loc_enuAdcStatus;
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	08 95       	ret

00001e3a <Adc_enuDeInit>:

Adc_StatusErrorType Adc_enuDeInit(void){
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	1f 92       	push	r1
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	89 83       	std	Y+1, r24	; 0x01

	Adc_Disable();
    1e48:	86 e2       	ldi	r24, 0x26	; 38
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	26 e2       	ldi	r18, 0x26	; 38
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	f9 01       	movw	r30, r18
    1e52:	20 81       	ld	r18, Z
    1e54:	2f 77       	andi	r18, 0x7F	; 127
    1e56:	fc 01       	movw	r30, r24
    1e58:	20 83       	st	Z, r18
	    return Loc_enuAdcStatus;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5c:	0f 90       	pop	r0
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	08 95       	ret

00001e64 <Adc_enuStartConversionSync>:


Adc_StatusErrorType Adc_enuStartConversionSync(const Adc_PinConfigType* Address_Adc, u16* Address_ResultDigitalVoltage){
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	a6 97       	sbiw	r28, 0x26	; 38
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	9c a3       	std	Y+36, r25	; 0x24
    1e7a:	8b a3       	std	Y+35, r24	; 0x23
    1e7c:	7e a3       	std	Y+38, r23	; 0x26
    1e7e:	6d a3       	std	Y+37, r22	; 0x25

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8AdcInterruptStatus = ZERO_VALUE;
    1e84:	1a 82       	std	Y+2, r1	; 0x02
	    if(NULL == Address_Adc || Address_ResultDigitalVoltage == NULL){
    1e86:	8b a1       	ldd	r24, Y+35	; 0x23
    1e88:	9c a1       	ldd	r25, Y+36	; 0x24
    1e8a:	89 2b       	or	r24, r25
    1e8c:	21 f0       	breq	.+8      	; 0x1e96 <Adc_enuStartConversionSync+0x32>
    1e8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e90:	9e a1       	ldd	r25, Y+38	; 0x26
    1e92:	89 2b       	or	r24, r25
    1e94:	19 f4       	brne	.+6      	; 0x1e9c <Adc_enuStartConversionSync+0x38>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	54 c1       	rjmp	.+680    	; 0x2144 <Adc_enuStartConversionSync+0x2e0>
	    }
	    else{

	            /* Read Status of The interrupt */
	    	    Loc_u8AdcInterruptStatus = Adc_GetInterruptEnableStatus();
    1e9c:	86 e2       	ldi	r24, 0x26	; 38
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	80 81       	ld	r24, Z
    1ea4:	86 95       	lsr	r24
    1ea6:	86 95       	lsr	r24
    1ea8:	86 95       	lsr	r24
    1eaa:	81 70       	andi	r24, 0x01	; 1
    1eac:	8a 83       	std	Y+2, r24	; 0x02

	            /* Choose Selected Channel */
	            Adc_SelectChannel(Address_Adc->channel_number);
    1eae:	87 e2       	ldi	r24, 0x27	; 39
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	27 e2       	ldi	r18, 0x27	; 39
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	f9 01       	movw	r30, r18
    1eb8:	20 81       	ld	r18, Z
    1eba:	42 2f       	mov	r20, r18
    1ebc:	48 7f       	andi	r20, 0xF8	; 248
    1ebe:	2b a1       	ldd	r18, Y+35	; 0x23
    1ec0:	3c a1       	ldd	r19, Y+36	; 0x24
    1ec2:	f9 01       	movw	r30, r18
    1ec4:	20 81       	ld	r18, Z
    1ec6:	27 70       	andi	r18, 0x07	; 7
    1ec8:	24 2b       	or	r18, r20
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 83       	st	Z, r18


	            /* Disable Interrupt not to jump after completing*/
	            Adc_SetInterruptEnable(ZERO_VALUE);
    1ece:	86 e2       	ldi	r24, 0x26	; 38
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	26 e2       	ldi	r18, 0x26	; 38
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	f9 01       	movw	r30, r18
    1ed8:	20 81       	ld	r18, Z
    1eda:	27 7f       	andi	r18, 0xF7	; 247
    1edc:	fc 01       	movw	r30, r24
    1ede:	20 83       	st	Z, r18


	            /* Start Conversion  */
	            Adc_StartConversion();
    1ee0:	86 e2       	ldi	r24, 0x26	; 38
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	26 e2       	ldi	r18, 0x26	; 38
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	f9 01       	movw	r30, r18
    1eea:	20 81       	ld	r18, Z
    1eec:	20 64       	ori	r18, 0x40	; 64
    1eee:	fc 01       	movw	r30, r24
    1ef0:	20 83       	st	Z, r18



	            /* wait =polling for conversion */
	            while( ZERO_VALUE == Adc_IsConversionCompleted() );
    1ef2:	00 00       	nop
    1ef4:	86 e2       	ldi	r24, 0x26	; 38
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	fc 01       	movw	r30, r24
    1efa:	80 81       	ld	r24, Z
    1efc:	82 95       	swap	r24
    1efe:	86 95       	lsr	r24
    1f00:	86 95       	lsr	r24
    1f02:	83 70       	andi	r24, 0x03	; 3
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	81 70       	andi	r24, 0x01	; 1
    1f0a:	99 27       	eor	r25, r25
    1f0c:	89 2b       	or	r24, r25
    1f0e:	91 f7       	brne	.-28     	; 0x1ef4 <Adc_enuStartConversionSync+0x90>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e2       	ldi	r26, 0x20	; 32
    1f16:	b1 e4       	ldi	r27, 0x41	; 65
    1f18:	8b 83       	std	Y+3, r24	; 0x03
    1f1a:	9c 83       	std	Y+4, r25	; 0x04
    1f1c:	ad 83       	std	Y+5, r26	; 0x05
    1f1e:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1f20:	2b ea       	ldi	r18, 0xAB	; 171
    1f22:	3a ea       	ldi	r19, 0xAA	; 170
    1f24:	4a ea       	ldi	r20, 0xAA	; 170
    1f26:	50 e4       	ldi	r21, 0x40	; 64
    1f28:	6b 81       	ldd	r22, Y+3	; 0x03
    1f2a:	7c 81       	ldd	r23, Y+4	; 0x04
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8f 83       	std	Y+7, r24	; 0x07
    1f3a:	98 87       	std	Y+8, r25	; 0x08
    1f3c:	a9 87       	std	Y+9, r26	; 0x09
    1f3e:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	50 e4       	ldi	r21, 0x40	; 64
    1f48:	6b 81       	ldd	r22, Y+3	; 0x03
    1f4a:	7c 81       	ldd	r23, Y+4	; 0x04
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8b 87       	std	Y+11, r24	; 0x0b
    1f5a:	9c 87       	std	Y+12, r25	; 0x0c
    1f5c:	ad 87       	std	Y+13, r26	; 0x0d
    1f5e:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6a:	78 85       	ldd	r23, Y+8	; 0x08
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	1c f4       	brge	.+6      	; 0x1f7e <Adc_enuStartConversionSync+0x11a>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	8f 87       	std	Y+15, r24	; 0x0f
    1f7c:	b2 c0       	rjmp	.+356    	; 0x20e2 <Adc_enuStartConversionSync+0x27e>
	else if (__tmp2 > 65535)
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8e:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	0c f0       	brlt	.+2      	; 0x1f98 <Adc_enuStartConversionSync+0x134>
    1f96:	7b c0       	rjmp	.+246    	; 0x208e <Adc_enuStartConversionSync+0x22a>
	{
		_delay_ms(__us / 1000.0);
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	4a e7       	ldi	r20, 0x7A	; 122
    1f9e:	54 e4       	ldi	r21, 0x44	; 68
    1fa0:	6b 81       	ldd	r22, Y+3	; 0x03
    1fa2:	7c 81       	ldd	r23, Y+4	; 0x04
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa8:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__divsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	88 8b       	std	Y+16, r24	; 0x10
    1fb2:	99 8b       	std	Y+17, r25	; 0x11
    1fb4:	aa 8b       	std	Y+18, r26	; 0x12
    1fb6:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	4a e7       	ldi	r20, 0x7A	; 122
    1fbe:	55 e4       	ldi	r21, 0x45	; 69
    1fc0:	68 89       	ldd	r22, Y+16	; 0x10
    1fc2:	79 89       	ldd	r23, Y+17	; 0x11
    1fc4:	8a 89       	ldd	r24, Y+18	; 0x12
    1fc6:	9b 89       	ldd	r25, Y+19	; 0x13
    1fc8:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	8c 8b       	std	Y+20, r24	; 0x14
    1fd2:	9d 8b       	std	Y+21, r25	; 0x15
    1fd4:	ae 8b       	std	Y+22, r26	; 0x16
    1fd6:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	6c 89       	ldd	r22, Y+20	; 0x14
    1fe2:	7d 89       	ldd	r23, Y+21	; 0x15
    1fe4:	8e 89       	ldd	r24, Y+22	; 0x16
    1fe6:	9f 89       	ldd	r25, Y+23	; 0x17
    1fe8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <Adc_enuStartConversionSync+0x196>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	99 8f       	std	Y+25, r25	; 0x19
    1ff6:	88 8f       	std	Y+24, r24	; 0x18
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <Adc_enuStartConversionSync+0x214>
	else if (__tmp > 65535)
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	3f ef       	ldi	r19, 0xFF	; 255
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	57 e4       	ldi	r21, 0x47	; 71
    2002:	6c 89       	ldd	r22, Y+20	; 0x14
    2004:	7d 89       	ldd	r23, Y+21	; 0x15
    2006:	8e 89       	ldd	r24, Y+22	; 0x16
    2008:	9f 89       	ldd	r25, Y+23	; 0x17
    200a:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <Adc_enuStartConversionSync+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	40 e2       	ldi	r20, 0x20	; 32
    2018:	51 e4       	ldi	r21, 0x41	; 65
    201a:	68 89       	ldd	r22, Y+16	; 0x10
    201c:	79 89       	ldd	r23, Y+17	; 0x11
    201e:	8a 89       	ldd	r24, Y+18	; 0x12
    2020:	9b 89       	ldd	r25, Y+19	; 0x13
    2022:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	99 8f       	std	Y+25, r25	; 0x19
    2038:	88 8f       	std	Y+24, r24	; 0x18
    203a:	0f c0       	rjmp	.+30     	; 0x205a <Adc_enuStartConversionSync+0x1f6>
    203c:	80 e9       	ldi	r24, 0x90	; 144
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	9b 8f       	std	Y+27, r25	; 0x1b
    2042:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2044:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2046:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <Adc_enuStartConversionSync+0x1e4>
    204c:	9b 8f       	std	Y+27, r25	; 0x1b
    204e:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	88 8d       	ldd	r24, Y+24	; 0x18
    2052:	99 8d       	ldd	r25, Y+25	; 0x19
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	99 8f       	std	Y+25, r25	; 0x19
    2058:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	88 8d       	ldd	r24, Y+24	; 0x18
    205c:	99 8d       	ldd	r25, Y+25	; 0x19
    205e:	89 2b       	or	r24, r25
    2060:	69 f7       	brne	.-38     	; 0x203c <Adc_enuStartConversionSync+0x1d8>
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <Adc_enuStartConversionSync+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	6c 89       	ldd	r22, Y+20	; 0x14
    2066:	7d 89       	ldd	r23, Y+21	; 0x15
    2068:	8e 89       	ldd	r24, Y+22	; 0x16
    206a:	9f 89       	ldd	r25, Y+23	; 0x17
    206c:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	99 8f       	std	Y+25, r25	; 0x19
    2076:	88 8f       	std	Y+24, r24	; 0x18
    2078:	88 8d       	ldd	r24, Y+24	; 0x18
    207a:	99 8d       	ldd	r25, Y+25	; 0x19
    207c:	9d 8f       	std	Y+29, r25	; 0x1d
    207e:	8c 8f       	std	Y+28, r24	; 0x1c
    2080:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2082:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <Adc_enuStartConversionSync+0x220>
    2088:	9d 8f       	std	Y+29, r25	; 0x1d
    208a:	8c 8f       	std	Y+28, r24	; 0x1c
    208c:	2a c0       	rjmp	.+84     	; 0x20e2 <Adc_enuStartConversionSync+0x27e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	53 e4       	ldi	r21, 0x43	; 67
    2096:	6f 81       	ldd	r22, Y+7	; 0x07
    2098:	78 85       	ldd	r23, Y+8	; 0x08
    209a:	89 85       	ldd	r24, Y+9	; 0x09
    209c:	9a 85       	ldd	r25, Y+10	; 0x0a
    209e:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	ac f4       	brge	.+42     	; 0x20d0 <Adc_enuStartConversionSync+0x26c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    20a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9f 8f       	std	Y+31, r25	; 0x1f
    20b8:	8e 8f       	std	Y+30, r24	; 0x1e
    20ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20be:	99 a3       	std	Y+33, r25	; 0x21
    20c0:	88 a3       	std	Y+32, r24	; 0x20
    20c2:	88 a1       	ldd	r24, Y+32	; 0x20
    20c4:	99 a1       	ldd	r25, Y+33	; 0x21
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <Adc_enuStartConversionSync+0x262>
    20ca:	99 a3       	std	Y+33, r25	; 0x21
    20cc:	88 a3       	std	Y+32, r24	; 0x20
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <Adc_enuStartConversionSync+0x28a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20d0:	6f 81       	ldd	r22, Y+7	; 0x07
    20d2:	78 85       	ldd	r23, Y+8	; 0x08
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d8:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8f 87       	std	Y+15, r24	; 0x0f
    20e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e4:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20e6:	8a a1       	ldd	r24, Y+34	; 0x22
    20e8:	8a 95       	dec	r24
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <Adc_enuStartConversionSync+0x284>
    20ec:	8a a3       	std	Y+34, r24	; 0x22
	            _delay_us(10);

	            Loc_enuAdcStatus &= Adc_GetResult(Address_Adc->result_format ,Address_ResultDigitalVoltage);
    20ee:	8b a1       	ldd	r24, Y+35	; 0x23
    20f0:	9c a1       	ldd	r25, Y+36	; 0x24
    20f2:	fc 01       	movw	r30, r24
    20f4:	22 81       	ldd	r18, Z+2	; 0x02
    20f6:	8d a1       	ldd	r24, Y+37	; 0x25
    20f8:	9e a1       	ldd	r25, Y+38	; 0x26
    20fa:	bc 01       	movw	r22, r24
    20fc:	82 2f       	mov	r24, r18
    20fe:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <Adc_GetResult>
    2102:	98 2f       	mov	r25, r24
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	89 23       	and	r24, r25
    2108:	89 83       	std	Y+1, r24	; 0x01

	            /* Return Status Of The Adc Interrupt*/
	            Adc_ClearInterruptFlag();
    210a:	86 e2       	ldi	r24, 0x26	; 38
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	26 e2       	ldi	r18, 0x26	; 38
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	f9 01       	movw	r30, r18
    2114:	20 81       	ld	r18, Z
    2116:	20 61       	ori	r18, 0x10	; 16
    2118:	fc 01       	movw	r30, r24
    211a:	20 83       	st	Z, r18
	            Adc_SetInterruptEnable(Loc_u8AdcInterruptStatus);
    211c:	86 e2       	ldi	r24, 0x26	; 38
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	26 e2       	ldi	r18, 0x26	; 38
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	f9 01       	movw	r30, r18
    2126:	20 81       	ld	r18, Z
    2128:	42 2f       	mov	r20, r18
    212a:	47 7f       	andi	r20, 0xF7	; 247
    212c:	2a 81       	ldd	r18, Y+2	; 0x02
    212e:	22 2f       	mov	r18, r18
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	22 0f       	add	r18, r18
    2134:	33 1f       	adc	r19, r19
    2136:	22 0f       	add	r18, r18
    2138:	33 1f       	adc	r19, r19
    213a:	22 0f       	add	r18, r18
    213c:	33 1f       	adc	r19, r19
    213e:	24 2b       	or	r18, r20
    2140:	fc 01       	movw	r30, r24
    2142:	20 83       	st	Z, r18
	        }

	    return Loc_enuAdcStatus;
    2144:	89 81       	ldd	r24, Y+1	; 0x01
}
    2146:	a6 96       	adiw	r28, 0x26	; 38
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	08 95       	ret

00002158 <Adc_ConvertResultToVoltage>:



Adc_StatusErrorType Adc_ConvertResultToVoltage( u16 Copy_u16DigitalValue, f32* Address_ResultAnalogVoltage){
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	00 d0       	rcall	.+0      	; 0x215e <Adc_ConvertResultToVoltage+0x6>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <Adc_ConvertResultToVoltage+0x8>
    2160:	1f 92       	push	r1
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	9b 83       	std	Y+3, r25	; 0x03
    2168:	8a 83       	std	Y+2, r24	; 0x02
    216a:	7d 83       	std	Y+5, r23	; 0x05
    216c:	6c 83       	std	Y+4, r22	; 0x04

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_ResultAnalogVoltage){
    2172:	8c 81       	ldd	r24, Y+4	; 0x04
    2174:	9d 81       	ldd	r25, Y+5	; 0x05
    2176:	89 2b       	or	r24, r25
    2178:	19 f4       	brne	.+6      	; 0x2180 <Adc_ConvertResultToVoltage+0x28>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	1c c0       	rjmp	.+56     	; 0x21b8 <Adc_ConvertResultToVoltage+0x60>
	    }
	    else{
	           /* Vanalog = Vdigital * step    */
	           /* Step Size = (Vmax-Vmin)/2^n      */
	           *Address_ResultAnalogVoltage = Copy_u16DigitalValue*0.004883F;
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	cc 01       	movw	r24, r24
    2186:	a0 e0       	ldi	r26, 0x00	; 0
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__floatunsisf>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	23 e9       	ldi	r18, 0x93	; 147
    2198:	31 e0       	ldi	r19, 0x01	; 1
    219a:	40 ea       	ldi	r20, 0xA0	; 160
    219c:	5b e3       	ldi	r21, 0x3B	; 59
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	2c 81       	ldd	r18, Y+4	; 0x04
    21ac:	3d 81       	ldd	r19, Y+5	; 0x05
    21ae:	f9 01       	movw	r30, r18
    21b0:	80 83       	st	Z, r24
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	a2 83       	std	Z+2, r26	; 0x02
    21b6:	b3 83       	std	Z+3, r27	; 0x03
	       }

	    return Loc_enuAdcStatus;
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <Adc_StartConversionAsync>:


Adc_StatusErrorType Adc_StartConversionAsync(const Adc_PinConfigType* Address_Adc){
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <Adc_StartConversionAsync+0x6>
    21d0:	1f 92       	push	r1
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	9b 83       	std	Y+3, r25	; 0x03
    21d8:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	89 2b       	or	r24, r25
    21e4:	19 f4       	brne	.+6      	; 0x21ec <Adc_StartConversionAsync+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	34 c0       	rjmp	.+104    	; 0x2254 <Adc_StartConversionAsync+0x8a>
	    }
	    else{
	    	 /* You can't start A new Conversion Unless The old One Is Done*/
	    	        while( ZERO_VALUE == Adc_IsConversionCompleted() );
    21ec:	00 00       	nop
    21ee:	86 e2       	ldi	r24, 0x26	; 38
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	fc 01       	movw	r30, r24
    21f4:	80 81       	ld	r24, Z
    21f6:	82 95       	swap	r24
    21f8:	86 95       	lsr	r24
    21fa:	86 95       	lsr	r24
    21fc:	83 70       	andi	r24, 0x03	; 3
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	81 70       	andi	r24, 0x01	; 1
    2204:	99 27       	eor	r25, r25
    2206:	89 2b       	or	r24, r25
    2208:	91 f7       	brne	.-28     	; 0x21ee <Adc_StartConversionAsync+0x24>

	    	        Global_AdcInterruptIndex = (u8)Address_Adc->channel_number;
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	9b 81       	ldd	r25, Y+3	; 0x03
    220e:	fc 01       	movw	r30, r24
    2210:	80 81       	ld	r24, Z
    2212:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Global_AdcInterruptIndex>
	    	        current_format = Address_Adc->result_format;
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	9b 81       	ldd	r25, Y+3	; 0x03
    221a:	fc 01       	movw	r30, r24
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current_format>
	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    2222:	87 e2       	ldi	r24, 0x27	; 39
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	27 e2       	ldi	r18, 0x27	; 39
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	f9 01       	movw	r30, r18
    222c:	20 81       	ld	r18, Z
    222e:	42 2f       	mov	r20, r18
    2230:	48 7f       	andi	r20, 0xF8	; 248
    2232:	2a 81       	ldd	r18, Y+2	; 0x02
    2234:	3b 81       	ldd	r19, Y+3	; 0x03
    2236:	f9 01       	movw	r30, r18
    2238:	20 81       	ld	r18, Z
    223a:	27 70       	andi	r18, 0x07	; 7
    223c:	24 2b       	or	r18, r20
    223e:	fc 01       	movw	r30, r24
    2240:	20 83       	st	Z, r18


	    	        /* Start Conversion  */
	    	        Adc_StartConversion();
    2242:	86 e2       	ldi	r24, 0x26	; 38
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	26 e2       	ldi	r18, 0x26	; 38
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	f9 01       	movw	r30, r18
    224c:	20 81       	ld	r18, Z
    224e:	20 64       	ori	r18, 0x40	; 64
    2250:	fc 01       	movw	r30, r24
    2252:	20 83       	st	Z, r18
	    }

	    return Loc_enuAdcStatus;
    2254:	89 81       	ldd	r24, Y+1	; 0x01
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	08 95       	ret

00002262 <Adc_enuEnableInterrupt>:


Adc_StatusErrorType Adc_enuEnableInterrupt(void){
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	1f 92       	push	r1
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	89 83       	std	Y+1, r24	; 0x01
	Adc_EnableInterrupt();
    2270:	86 e2       	ldi	r24, 0x26	; 38
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	26 e2       	ldi	r18, 0x26	; 38
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	f9 01       	movw	r30, r18
    227a:	20 81       	ld	r18, Z
    227c:	28 60       	ori	r18, 0x08	; 8
    227e:	fc 01       	movw	r30, r24
    2280:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    2282:	89 81       	ldd	r24, Y+1	; 0x01
}
    2284:	0f 90       	pop	r0
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <Adc_enuDisableInterrupt>:


Adc_StatusErrorType Adc_enuDisableInterrupt(void){
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	1f 92       	push	r1
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	89 83       	std	Y+1, r24	; 0x01
	Adc_DisableInterrupt();
    229a:	86 e2       	ldi	r24, 0x26	; 38
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	26 e2       	ldi	r18, 0x26	; 38
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	f9 01       	movw	r30, r18
    22a4:	20 81       	ld	r18, Z
    22a6:	27 7f       	andi	r18, 0xF7	; 247
    22a8:	fc 01       	movw	r30, r24
    22aa:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ae:	0f 90       	pop	r0
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	08 95       	ret

000022b6 <Adc_GetResult>:




////////////////////////////////////////////////Helpers Functions ///////////////////////////
static Adc_StatusErrorType Adc_GetResult(const Adc_ResultFormartType Copy_enuResultFormat, u16* Address_Result){
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <Adc_GetResult+0x6>
    22bc:	00 d0       	rcall	.+0      	; 0x22be <Adc_GetResult+0x8>
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	8a 83       	std	Y+2, r24	; 0x02
    22c4:	7c 83       	std	Y+4, r23	; 0x04
    22c6:	6b 83       	std	Y+3, r22	; 0x03

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Result){
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	89 2b       	or	r24, r25
    22d2:	19 f4       	brne	.+6      	; 0x22da <Adc_GetResult+0x24>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    22d4:	82 e0       	ldi	r24, 0x02	; 2
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	30 c0       	rjmp	.+96     	; 0x233a <Adc_GetResult+0x84>
	    }

	    	else{
	    	        switch(Copy_enuResultFormat){
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	88 2f       	mov	r24, r24
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	89 2b       	or	r24, r25
    22e2:	b9 f4       	brne	.+46     	; 0x2312 <Adc_GetResult+0x5c>

	    	        case ADC_RIGHT_JUSTIFIED:



	    	                *Address_Result = (ADCL) | (ADCH <<8) ;
    22e4:	84 e2       	ldi	r24, 0x24	; 36
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	fc 01       	movw	r30, r24
    22ea:	80 81       	ld	r24, Z
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	85 e2       	ldi	r24, 0x25	; 37
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	fc 01       	movw	r30, r24
    22f6:	80 81       	ld	r24, Z
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	98 2f       	mov	r25, r24
    22fe:	88 27       	eor	r24, r24
    2300:	82 2b       	or	r24, r18
    2302:	93 2b       	or	r25, r19
    2304:	9c 01       	movw	r18, r24
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	fc 01       	movw	r30, r24
    230c:	31 83       	std	Z+1, r19	; 0x01
    230e:	20 83       	st	Z, r18
	    	                break;
    2310:	14 c0       	rjmp	.+40     	; 0x233a <Adc_GetResult+0x84>

	    	            default:
	    	            	*Address_Result = (ADCHL>>6) & 0x3FF;
    2312:	84 e2       	ldi	r24, 0x24	; 36
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	fc 01       	movw	r30, r24
    2318:	80 81       	ld	r24, Z
    231a:	91 81       	ldd	r25, Z+1	; 0x01
    231c:	9c 01       	movw	r18, r24
    231e:	00 24       	eor	r0, r0
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	00 1c       	adc	r0, r0
    2326:	22 0f       	add	r18, r18
    2328:	33 1f       	adc	r19, r19
    232a:	00 1c       	adc	r0, r0
    232c:	23 2f       	mov	r18, r19
    232e:	30 2d       	mov	r19, r0
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	fc 01       	movw	r30, r24
    2336:	31 83       	std	Z+1, r19	; 0x01
    2338:	20 83       	st	Z, r18

	    	        }
	    	    }


	    return Loc_enuAdcStatus;
    233a:	89 81       	ldd	r24, Y+1	; 0x01
}
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <Adc_SetCallbackFunction>:

Adc_StatusErrorType Adc_SetCallbackFunction(const Adc_PinConfigType* Address_Adc, void (*callback)(u16)){
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	00 d0       	rcall	.+0      	; 0x2350 <Adc_SetCallbackFunction+0x6>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <Adc_SetCallbackFunction+0x8>
    2352:	1f 92       	push	r1
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	9b 83       	std	Y+3, r25	; 0x03
    235a:	8a 83       	std	Y+2, r24	; 0x02
    235c:	7d 83       	std	Y+5, r23	; 0x05
    235e:	6c 83       	std	Y+4, r22	; 0x04
	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	89 83       	std	Y+1, r24	; 0x01
		    if(NULL == Address_Adc){
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	9b 81       	ldd	r25, Y+3	; 0x03
    2368:	89 2b       	or	r24, r25
    236a:	19 f4       	brne	.+6      	; 0x2372 <Adc_SetCallbackFunction+0x28>
		    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    236c:	82 e0       	ldi	r24, 0x02	; 2
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <Adc_SetCallbackFunction+0x46>
		    }
		    else{
		    	Adc_InterruptHandlerArr[Address_Adc->channel_number] = callback;
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	9b 81       	ldd	r25, Y+3	; 0x03
    2376:	fc 01       	movw	r30, r24
    2378:	80 81       	ld	r24, Z
    237a:	88 2f       	mov	r24, r24
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	8f 50       	subi	r24, 0x0F	; 15
    2384:	9f 4f       	sbci	r25, 0xFF	; 255
    2386:	2c 81       	ldd	r18, Y+4	; 0x04
    2388:	3d 81       	ldd	r19, Y+5	; 0x05
    238a:	fc 01       	movw	r30, r24
    238c:	31 83       	std	Z+1, r19	; 0x01
    238e:	20 83       	st	Z, r18
		    }
		    return Loc_enuAdcStatus;
    2390:	89 81       	ldd	r24, Y+1	; 0x01
}
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	08 95       	ret

000023a2 <__vector_16>:

// ISR function For ADC
void __vector_16(void) __attribute__((signal));

void __vector_16(void){
    23a2:	1f 92       	push	r1
    23a4:	0f 92       	push	r0
    23a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    23aa:	0f 92       	push	r0
    23ac:	11 24       	eor	r1, r1
    23ae:	2f 93       	push	r18
    23b0:	3f 93       	push	r19
    23b2:	4f 93       	push	r20
    23b4:	5f 93       	push	r21
    23b6:	6f 93       	push	r22
    23b8:	7f 93       	push	r23
    23ba:	8f 93       	push	r24
    23bc:	9f 93       	push	r25
    23be:	af 93       	push	r26
    23c0:	bf 93       	push	r27
    23c2:	ef 93       	push	r30
    23c4:	ff 93       	push	r31
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <__vector_16+0x2a>
    23cc:	1f 92       	push	r1
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62

	    u16 Loc_u16Result;
	    Adc_StatusErrorType Loc_enuAdcStatus  = ADC_STATUS_OK;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	89 83       	std	Y+1, r24	; 0x01

	    Loc_enuAdcStatus = Adc_GetResult(current_format,&Loc_u16Result);
    23d6:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <current_format>
    23da:	ce 01       	movw	r24, r28
    23dc:	02 96       	adiw	r24, 0x02	; 2
    23de:	bc 01       	movw	r22, r24
    23e0:	82 2f       	mov	r24, r18
    23e2:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <Adc_GetResult>
    23e6:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL != Adc_InterruptHandlerArr[Global_AdcInterruptIndex]){
    23e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Global_AdcInterruptIndex>
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	8f 50       	subi	r24, 0x0F	; 15
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	fc 01       	movw	r30, r24
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	89 2b       	or	r24, r25
    2400:	79 f0       	breq	.+30     	; 0x2420 <__vector_16+0x7e>
	        Adc_InterruptHandlerArr[Global_AdcInterruptIndex](Loc_u16Result);
    2402:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Global_AdcInterruptIndex>
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	8f 50       	subi	r24, 0x0F	; 15
    2410:	9f 4f       	sbci	r25, 0xFF	; 255
    2412:	fc 01       	movw	r30, r24
    2414:	20 81       	ld	r18, Z
    2416:	31 81       	ldd	r19, Z+1	; 0x01
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	9b 81       	ldd	r25, Y+3	; 0x03
    241c:	f9 01       	movw	r30, r18
    241e:	09 95       	icall
	    }
	    else {/* do nothing , error in declaration */ }

}
    2420:	00 00       	nop
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	ff 91       	pop	r31
    242e:	ef 91       	pop	r30
    2430:	bf 91       	pop	r27
    2432:	af 91       	pop	r26
    2434:	9f 91       	pop	r25
    2436:	8f 91       	pop	r24
    2438:	7f 91       	pop	r23
    243a:	6f 91       	pop	r22
    243c:	5f 91       	pop	r21
    243e:	4f 91       	pop	r20
    2440:	3f 91       	pop	r19
    2442:	2f 91       	pop	r18
    2444:	0f 90       	pop	r0
    2446:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    244a:	0f 90       	pop	r0
    244c:	1f 90       	pop	r1
    244e:	18 95       	reti

00002450 <Seven_Segment_WriteBCDConnection>:



/********************************** Software Interfaces Declarations *******************/

Seven_Segment_StatusErrorType  Seven_Segment_WriteBCDConnection(const Seven_Segment_BCDType* Address_Segment, u8 Copy_u8Value){
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	27 97       	sbiw	r28, 0x07	; 7
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	8d 83       	std	Y+5, r24	; 0x05
    2468:	6f 83       	std	Y+7, r22	; 0x07

	Seven_Segment_StatusErrorType Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_OK;
    246a:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    246c:	1b 82       	std	Y+3, r1	; 0x03
	    u8 Loc_u8FinalBit = DIO_LOW;
    246e:	1c 82       	std	Y+4, r1	; 0x04
	    u8 Loc_u8Counter=ZERO_VALUE;
    2470:	1a 82       	std	Y+2, r1	; 0x02

	    if (NULL == Address_Segment  ){
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	89 2b       	or	r24, r25
    2478:	19 f4       	brne	.+6      	; 0x2480 <Seven_Segment_WriteBCDConnection+0x30>

	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
    247a:	82 e0       	ldi	r24, 0x02	; 2
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	22 c0       	rjmp	.+68     	; 0x24c4 <Seven_Segment_WriteBCDConnection+0x74>
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    2480:	1a 82       	std	Y+2, r1	; 0x02
    2482:	1d c0       	rjmp	.+58     	; 0x24be <Seven_Segment_WriteBCDConnection+0x6e>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
    2484:	8f 81       	ldd	r24, Y+7	; 0x07
    2486:	88 2f       	mov	r24, r24
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	2a 81       	ldd	r18, Y+2	; 0x02
    248c:	22 2f       	mov	r18, r18
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <Seven_Segment_WriteBCDConnection+0x46>
    2492:	95 95       	asr	r25
    2494:	87 95       	ror	r24
    2496:	2a 95       	dec	r18
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <Seven_Segment_WriteBCDConnection+0x42>
    249a:	81 70       	andi	r24, 0x01	; 1
    249c:	8c 83       	std	Y+4, r24	; 0x04
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	88 2f       	mov	r24, r24
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	2d 81       	ldd	r18, Y+5	; 0x05
    24a6:	3e 81       	ldd	r19, Y+6	; 0x06
    24a8:	82 0f       	add	r24, r18
    24aa:	93 1f       	adc	r25, r19
    24ac:	fc 01       	movw	r30, r24
    24ae:	80 81       	ld	r24, Z
    24b0:	6c 81       	ldd	r22, Y+4	; 0x04
    24b2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    24b6:	8b 83       	std	Y+3, r24	; 0x03
	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	8f 5f       	subi	r24, 0xFF	; 255
    24bc:	8a 83       	std	Y+2, r24	; 0x02
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	84 30       	cpi	r24, 0x04	; 4
    24c2:	00 f3       	brcs	.-64     	; 0x2484 <Seven_Segment_WriteBCDConnection+0x34>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
	        }
	    }

	    return Loc_enuSegmentState;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01

}
    24c6:	27 96       	adiw	r28, 0x07	; 7
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	f8 94       	cli
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	0f be       	out	0x3f, r0	; 63
    24d0:	cd bf       	out	0x3d, r28	; 61
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	08 95       	ret

000024d8 <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	ef 97       	sbiw	r28, 0x3f	; 63
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	9f af       	std	Y+63, r25	; 0x3f
    24ee:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    24f0:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
    24f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    24f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    24f6:	89 2b       	or	r24, r25
    24f8:	19 f4       	brne	.+6      	; 0x2500 <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	0f c2       	rjmp	.+1054   	; 0x291e <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    2500:	8e ad       	ldd	r24, Y+62	; 0x3e
    2502:	9f ad       	ldd	r25, Y+63	; 0x3f
    2504:	68 e3       	ldi	r22, 0x38	; 56
    2506:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a0 ea       	ldi	r26, 0xA0	; 160
    2512:	b0 e4       	ldi	r27, 0x40	; 64
    2514:	8a 83       	std	Y+2, r24	; 0x02
    2516:	9b 83       	std	Y+3, r25	; 0x03
    2518:	ac 83       	std	Y+4, r26	; 0x04
    251a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	55 e4       	ldi	r21, 0x45	; 69
    2524:	6a 81       	ldd	r22, Y+2	; 0x02
    2526:	7b 81       	ldd	r23, Y+3	; 0x03
    2528:	8c 81       	ldd	r24, Y+4	; 0x04
    252a:	9d 81       	ldd	r25, Y+5	; 0x05
    252c:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	8c ab       	std	Y+52, r24	; 0x34
    2536:	9d ab       	std	Y+53, r25	; 0x35
    2538:	ae ab       	std	Y+54, r26	; 0x36
    253a:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e8       	ldi	r20, 0x80	; 128
    2542:	5f e3       	ldi	r21, 0x3F	; 63
    2544:	6c a9       	ldd	r22, Y+52	; 0x34
    2546:	7d a9       	ldd	r23, Y+53	; 0x35
    2548:	8e a9       	ldd	r24, Y+54	; 0x36
    254a:	9f a9       	ldd	r25, Y+55	; 0x37
    254c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	99 af       	std	Y+57, r25	; 0x39
    255a:	88 af       	std	Y+56, r24	; 0x38
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	3f ef       	ldi	r19, 0xFF	; 255
    2562:	4f e7       	ldi	r20, 0x7F	; 127
    2564:	57 e4       	ldi	r21, 0x47	; 71
    2566:	6c a9       	ldd	r22, Y+52	; 0x34
    2568:	7d a9       	ldd	r23, Y+53	; 0x35
    256a:	8e a9       	ldd	r24, Y+54	; 0x36
    256c:	9f a9       	ldd	r25, Y+55	; 0x37
    256e:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e2       	ldi	r20, 0x20	; 32
    257c:	51 e4       	ldi	r21, 0x41	; 65
    257e:	6a 81       	ldd	r22, Y+2	; 0x02
    2580:	7b 81       	ldd	r23, Y+3	; 0x03
    2582:	8c 81       	ldd	r24, Y+4	; 0x04
    2584:	9d 81       	ldd	r25, Y+5	; 0x05
    2586:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	99 af       	std	Y+57, r25	; 0x39
    259c:	88 af       	std	Y+56, r24	; 0x38
    259e:	0f c0       	rjmp	.+30     	; 0x25be <Lcd_4bit_enuInit+0xe6>
    25a0:	80 e9       	ldi	r24, 0x90	; 144
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	9b af       	std	Y+59, r25	; 0x3b
    25a6:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    25aa:	9b ad       	ldd	r25, Y+59	; 0x3b
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <Lcd_4bit_enuInit+0xd4>
    25b0:	9b af       	std	Y+59, r25	; 0x3b
    25b2:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	88 ad       	ldd	r24, Y+56	; 0x38
    25b6:	99 ad       	ldd	r25, Y+57	; 0x39
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	99 af       	std	Y+57, r25	; 0x39
    25bc:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	88 ad       	ldd	r24, Y+56	; 0x38
    25c0:	99 ad       	ldd	r25, Y+57	; 0x39
    25c2:	89 2b       	or	r24, r25
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <Lcd_4bit_enuInit+0xc8>
    25c6:	14 c0       	rjmp	.+40     	; 0x25f0 <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	6c a9       	ldd	r22, Y+52	; 0x34
    25ca:	7d a9       	ldd	r23, Y+53	; 0x35
    25cc:	8e a9       	ldd	r24, Y+54	; 0x36
    25ce:	9f a9       	ldd	r25, Y+55	; 0x37
    25d0:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	99 af       	std	Y+57, r25	; 0x39
    25da:	88 af       	std	Y+56, r24	; 0x38
    25dc:	88 ad       	ldd	r24, Y+56	; 0x38
    25de:	99 ad       	ldd	r25, Y+57	; 0x39
    25e0:	9d af       	std	Y+61, r25	; 0x3d
    25e2:	8c af       	std	Y+60, r24	; 0x3c
    25e4:	8c ad       	ldd	r24, Y+60	; 0x3c
    25e6:	9d ad       	ldd	r25, Y+61	; 0x3d
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <Lcd_4bit_enuInit+0x110>
    25ec:	9d af       	std	Y+61, r25	; 0x3d
    25ee:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    25f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    25f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    25f4:	68 e3       	ldi	r22, 0x38	; 56
    25f6:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	a6 e1       	ldi	r26, 0x16	; 22
    2602:	b3 e4       	ldi	r27, 0x43	; 67
    2604:	8e 83       	std	Y+6, r24	; 0x06
    2606:	9f 83       	std	Y+7, r25	; 0x07
    2608:	a8 87       	std	Y+8, r26	; 0x08
    260a:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    260c:	2b ea       	ldi	r18, 0xAB	; 171
    260e:	3a ea       	ldi	r19, 0xAA	; 170
    2610:	4a ea       	ldi	r20, 0xAA	; 170
    2612:	50 e4       	ldi	r21, 0x40	; 64
    2614:	6e 81       	ldd	r22, Y+6	; 0x06
    2616:	7f 81       	ldd	r23, Y+7	; 0x07
    2618:	88 85       	ldd	r24, Y+8	; 0x08
    261a:	99 85       	ldd	r25, Y+9	; 0x09
    261c:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	88 8f       	std	Y+24, r24	; 0x18
    2626:	99 8f       	std	Y+25, r25	; 0x19
    2628:	aa 8f       	std	Y+26, r26	; 0x1a
    262a:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e8       	ldi	r20, 0x80	; 128
    2632:	50 e4       	ldi	r21, 0x40	; 64
    2634:	6e 81       	ldd	r22, Y+6	; 0x06
    2636:	7f 81       	ldd	r23, Y+7	; 0x07
    2638:	88 85       	ldd	r24, Y+8	; 0x08
    263a:	99 85       	ldd	r25, Y+9	; 0x09
    263c:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	8c 8f       	std	Y+28, r24	; 0x1c
    2646:	9d 8f       	std	Y+29, r25	; 0x1d
    2648:	ae 8f       	std	Y+30, r26	; 0x1e
    264a:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	68 8d       	ldd	r22, Y+24	; 0x18
    2656:	79 8d       	ldd	r23, Y+25	; 0x19
    2658:	8a 8d       	ldd	r24, Y+26	; 0x1a
    265a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    265c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    2660:	88 23       	and	r24, r24
    2662:	1c f4       	brge	.+6      	; 0x266a <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	88 a3       	std	Y+32, r24	; 0x20
    2668:	b2 c0       	rjmp	.+356    	; 0x27ce <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2674:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2676:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2678:	9f 8d       	ldd	r25, Y+31	; 0x1f
    267a:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    267e:	18 16       	cp	r1, r24
    2680:	0c f0       	brlt	.+2      	; 0x2684 <Lcd_4bit_enuInit+0x1ac>
    2682:	7b c0       	rjmp	.+246    	; 0x277a <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a e7       	ldi	r20, 0x7A	; 122
    268a:	54 e4       	ldi	r21, 0x44	; 68
    268c:	6e 81       	ldd	r22, Y+6	; 0x06
    268e:	7f 81       	ldd	r23, Y+7	; 0x07
    2690:	88 85       	ldd	r24, Y+8	; 0x08
    2692:	99 85       	ldd	r25, Y+9	; 0x09
    2694:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__divsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	89 a3       	std	Y+33, r24	; 0x21
    269e:	9a a3       	std	Y+34, r25	; 0x22
    26a0:	ab a3       	std	Y+35, r26	; 0x23
    26a2:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a e7       	ldi	r20, 0x7A	; 122
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	69 a1       	ldd	r22, Y+33	; 0x21
    26ae:	7a a1       	ldd	r23, Y+34	; 0x22
    26b0:	8b a1       	ldd	r24, Y+35	; 0x23
    26b2:	9c a1       	ldd	r25, Y+36	; 0x24
    26b4:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8d a3       	std	Y+37, r24	; 0x25
    26be:	9e a3       	std	Y+38, r25	; 0x26
    26c0:	af a3       	std	Y+39, r26	; 0x27
    26c2:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	6d a1       	ldd	r22, Y+37	; 0x25
    26ce:	7e a1       	ldd	r23, Y+38	; 0x26
    26d0:	8f a1       	ldd	r24, Y+39	; 0x27
    26d2:	98 a5       	ldd	r25, Y+40	; 0x28
    26d4:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    26d8:	88 23       	and	r24, r24
    26da:	2c f4       	brge	.+10     	; 0x26e6 <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9a a7       	std	Y+42, r25	; 0x2a
    26e2:	89 a7       	std	Y+41, r24	; 0x29
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	6d a1       	ldd	r22, Y+37	; 0x25
    26f0:	7e a1       	ldd	r23, Y+38	; 0x26
    26f2:	8f a1       	ldd	r24, Y+39	; 0x27
    26f4:	98 a5       	ldd	r25, Y+40	; 0x28
    26f6:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	4c f5       	brge	.+82     	; 0x2750 <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	69 a1       	ldd	r22, Y+33	; 0x21
    2708:	7a a1       	ldd	r23, Y+34	; 0x22
    270a:	8b a1       	ldd	r24, Y+35	; 0x23
    270c:	9c a1       	ldd	r25, Y+36	; 0x24
    270e:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9a a7       	std	Y+42, r25	; 0x2a
    2724:	89 a7       	std	Y+41, r24	; 0x29
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <Lcd_4bit_enuInit+0x26e>
    2728:	80 e9       	ldi	r24, 0x90	; 144
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	9c a7       	std	Y+44, r25	; 0x2c
    272e:	8b a7       	std	Y+43, r24	; 0x2b
    2730:	8b a5       	ldd	r24, Y+43	; 0x2b
    2732:	9c a5       	ldd	r25, Y+44	; 0x2c
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <Lcd_4bit_enuInit+0x25c>
    2738:	9c a7       	std	Y+44, r25	; 0x2c
    273a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	89 a5       	ldd	r24, Y+41	; 0x29
    273e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9a a7       	std	Y+42, r25	; 0x2a
    2744:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	89 a5       	ldd	r24, Y+41	; 0x29
    2748:	9a a5       	ldd	r25, Y+42	; 0x2a
    274a:	89 2b       	or	r24, r25
    274c:	69 f7       	brne	.-38     	; 0x2728 <Lcd_4bit_enuInit+0x250>
    274e:	3f c0       	rjmp	.+126    	; 0x27ce <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	6d a1       	ldd	r22, Y+37	; 0x25
    2752:	7e a1       	ldd	r23, Y+38	; 0x26
    2754:	8f a1       	ldd	r24, Y+39	; 0x27
    2756:	98 a5       	ldd	r25, Y+40	; 0x28
    2758:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9a a7       	std	Y+42, r25	; 0x2a
    2762:	89 a7       	std	Y+41, r24	; 0x29
    2764:	89 a5       	ldd	r24, Y+41	; 0x29
    2766:	9a a5       	ldd	r25, Y+42	; 0x2a
    2768:	9e a7       	std	Y+46, r25	; 0x2e
    276a:	8d a7       	std	Y+45, r24	; 0x2d
    276c:	8d a5       	ldd	r24, Y+45	; 0x2d
    276e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <Lcd_4bit_enuInit+0x298>
    2774:	9e a7       	std	Y+46, r25	; 0x2e
    2776:	8d a7       	std	Y+45, r24	; 0x2d
    2778:	2a c0       	rjmp	.+84     	; 0x27ce <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4f e7       	ldi	r20, 0x7F	; 127
    2780:	53 e4       	ldi	r21, 0x43	; 67
    2782:	68 8d       	ldd	r22, Y+24	; 0x18
    2784:	79 8d       	ldd	r23, Y+25	; 0x19
    2786:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2788:	9b 8d       	ldd	r25, Y+27	; 0x1b
    278a:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    278e:	18 16       	cp	r1, r24
    2790:	ac f4       	brge	.+42     	; 0x27bc <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2792:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2794:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2796:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2798:	9f 8d       	ldd	r25, Y+31	; 0x1f
    279a:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	98 ab       	std	Y+48, r25	; 0x30
    27a4:	8f a7       	std	Y+47, r24	; 0x2f
    27a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27a8:	98 a9       	ldd	r25, Y+48	; 0x30
    27aa:	9a ab       	std	Y+50, r25	; 0x32
    27ac:	89 ab       	std	Y+49, r24	; 0x31
    27ae:	89 a9       	ldd	r24, Y+49	; 0x31
    27b0:	9a a9       	ldd	r25, Y+50	; 0x32
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <Lcd_4bit_enuInit+0x2da>
    27b6:	9a ab       	std	Y+50, r25	; 0x32
    27b8:	89 ab       	std	Y+49, r24	; 0x31
    27ba:	0f c0       	rjmp	.+30     	; 0x27da <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27bc:	68 8d       	ldd	r22, Y+24	; 0x18
    27be:	79 8d       	ldd	r23, Y+25	; 0x19
    27c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27c4:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	88 a3       	std	Y+32, r24	; 0x20
    27ce:	88 a1       	ldd	r24, Y+32	; 0x20
    27d0:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27d2:	8b a9       	ldd	r24, Y+51	; 0x33
    27d4:	8a 95       	dec	r24
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <Lcd_4bit_enuInit+0x2fc>
    27d8:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    27da:	8e ad       	ldd	r24, Y+62	; 0x3e
    27dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    27de:	68 e3       	ldi	r22, 0x38	; 56
    27e0:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    27e4:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    27e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    27e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    27f0:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    27f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    27f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    27f6:	62 e0       	ldi	r22, 0x02	; 2
    27f8:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    27fc:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    27fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2800:	9f ad       	ldd	r25, Y+63	; 0x3f
    2802:	66 e0       	ldi	r22, 0x06	; 6
    2804:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2808:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    280a:	8e ad       	ldd	r24, Y+62	; 0x3e
    280c:	9f ad       	ldd	r25, Y+63	; 0x3f
    280e:	6c e0       	ldi	r22, 0x0C	; 12
    2810:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2814:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    2816:	8e ad       	ldd	r24, Y+62	; 0x3e
    2818:	9f ad       	ldd	r25, Y+63	; 0x3f
    281a:	68 e2       	ldi	r22, 0x28	; 40
    281c:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2820:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    2822:	8e ad       	ldd	r24, Y+62	; 0x3e
    2824:	9f ad       	ldd	r25, Y+63	; 0x3f
    2826:	60 e8       	ldi	r22, 0x80	; 128
    2828:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    282c:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    282e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2830:	9f ad       	ldd	r25, Y+63	; 0x3f
    2832:	61 e0       	ldi	r22, 0x01	; 1
    2834:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 ea       	ldi	r26, 0xA0	; 160
    2840:	b0 e4       	ldi	r27, 0x40	; 64
    2842:	8a 87       	std	Y+10, r24	; 0x0a
    2844:	9b 87       	std	Y+11, r25	; 0x0b
    2846:	ac 87       	std	Y+12, r26	; 0x0c
    2848:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4a e7       	ldi	r20, 0x7A	; 122
    2850:	55 e4       	ldi	r21, 0x45	; 69
    2852:	6a 85       	ldd	r22, Y+10	; 0x0a
    2854:	7b 85       	ldd	r23, Y+11	; 0x0b
    2856:	8c 85       	ldd	r24, Y+12	; 0x0c
    2858:	9d 85       	ldd	r25, Y+13	; 0x0d
    285a:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	8e 87       	std	Y+14, r24	; 0x0e
    2864:	9f 87       	std	Y+15, r25	; 0x0f
    2866:	a8 8b       	std	Y+16, r26	; 0x10
    2868:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	6e 85       	ldd	r22, Y+14	; 0x0e
    2874:	7f 85       	ldd	r23, Y+15	; 0x0f
    2876:	88 89       	ldd	r24, Y+16	; 0x10
    2878:	99 89       	ldd	r25, Y+17	; 0x11
    287a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    287e:	88 23       	and	r24, r24
    2880:	2c f4       	brge	.+10     	; 0x288c <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9b 8b       	std	Y+19, r25	; 0x13
    2888:	8a 8b       	std	Y+18, r24	; 0x12
    288a:	3f c0       	rjmp	.+126    	; 0x290a <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	4f e7       	ldi	r20, 0x7F	; 127
    2892:	57 e4       	ldi	r21, 0x47	; 71
    2894:	6e 85       	ldd	r22, Y+14	; 0x0e
    2896:	7f 85       	ldd	r23, Y+15	; 0x0f
    2898:	88 89       	ldd	r24, Y+16	; 0x10
    289a:	99 89       	ldd	r25, Y+17	; 0x11
    289c:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e2       	ldi	r20, 0x20	; 32
    28aa:	51 e4       	ldi	r21, 0x41	; 65
    28ac:	6a 85       	ldd	r22, Y+10	; 0x0a
    28ae:	7b 85       	ldd	r23, Y+11	; 0x0b
    28b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    28b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    28b4:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9b 8b       	std	Y+19, r25	; 0x13
    28ca:	8a 8b       	std	Y+18, r24	; 0x12
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <Lcd_4bit_enuInit+0x414>
    28ce:	80 e9       	ldi	r24, 0x90	; 144
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	9d 8b       	std	Y+21, r25	; 0x15
    28d4:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28d6:	8c 89       	ldd	r24, Y+20	; 0x14
    28d8:	9d 89       	ldd	r25, Y+21	; 0x15
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <Lcd_4bit_enuInit+0x402>
    28de:	9d 8b       	std	Y+21, r25	; 0x15
    28e0:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	8a 89       	ldd	r24, Y+18	; 0x12
    28e4:	9b 89       	ldd	r25, Y+19	; 0x13
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	9b 8b       	std	Y+19, r25	; 0x13
    28ea:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	8a 89       	ldd	r24, Y+18	; 0x12
    28ee:	9b 89       	ldd	r25, Y+19	; 0x13
    28f0:	89 2b       	or	r24, r25
    28f2:	69 f7       	brne	.-38     	; 0x28ce <Lcd_4bit_enuInit+0x3f6>
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	6e 85       	ldd	r22, Y+14	; 0x0e
    28f8:	7f 85       	ldd	r23, Y+15	; 0x0f
    28fa:	88 89       	ldd	r24, Y+16	; 0x10
    28fc:	99 89       	ldd	r25, Y+17	; 0x11
    28fe:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9b 8b       	std	Y+19, r25	; 0x13
    2908:	8a 8b       	std	Y+18, r24	; 0x12
    290a:	8a 89       	ldd	r24, Y+18	; 0x12
    290c:	9b 89       	ldd	r25, Y+19	; 0x13
    290e:	9f 8b       	std	Y+23, r25	; 0x17
    2910:	8e 8b       	std	Y+22, r24	; 0x16
    2912:	8e 89       	ldd	r24, Y+22	; 0x16
    2914:	9f 89       	ldd	r25, Y+23	; 0x17
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <Lcd_4bit_enuInit+0x43e>
    291a:	9f 8b       	std	Y+23, r25	; 0x17
    291c:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    291e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2920:	ef 96       	adiw	r28, 0x3f	; 63
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	08 95       	ret

00002932 <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	00 d0       	rcall	.+0      	; 0x2938 <Lcd_4bit_enuSendCommand+0x6>
    2938:	00 d0       	rcall	.+0      	; 0x293a <Lcd_4bit_enuSendCommand+0x8>
    293a:	1f 92       	push	r1
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	8b 83       	std	Y+3, r24	; 0x03
    2944:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2946:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    2948:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	89 2b       	or	r24, r25
    2950:	19 f4       	brne	.+6      	; 0x2958 <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	22 c0       	rjmp	.+68     	; 0x299c <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	fc 01       	movw	r30, r24
    295e:	84 81       	ldd	r24, Z+4	; 0x04
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    2966:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    2968:	8d 81       	ldd	r24, Y+5	; 0x05
    296a:	28 2f       	mov	r18, r24
    296c:	22 95       	swap	r18
    296e:	2f 70       	andi	r18, 0x0F	; 15
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	9c 81       	ldd	r25, Y+4	; 0x04
    2974:	62 2f       	mov	r22, r18
    2976:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <Lcd_4bit_enuSet4BitsOnPins>
    297a:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	0e 94 f6 17 	call	0x2fec	; 0x2fec <Lcd_4bit_enuSendEnableSignal>
    2984:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	6d 81       	ldd	r22, Y+5	; 0x05
    298c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <Lcd_4bit_enuSet4BitsOnPins>
    2990:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	0e 94 f6 17 	call	0x2fec	; 0x2fec <Lcd_4bit_enuSendEnableSignal>
    299a:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    299c:	89 81       	ldd	r24, Y+1	; 0x01

}
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	08 95       	ret

000029ae <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <Lcd_4bit_enuDisplayCharacter+0x6>
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <Lcd_4bit_enuDisplayCharacter+0x8>
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	9b 83       	std	Y+3, r25	; 0x03
    29bc:	8a 83       	std	Y+2, r24	; 0x02
    29be:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    29c0:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	89 2b       	or	r24, r25
    29c8:	19 f4       	brne	.+6      	; 0x29d0 <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    29ca:	82 e0       	ldi	r24, 0x02	; 2
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	22 c0       	rjmp	.+68     	; 0x2a14 <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	9b 81       	ldd	r25, Y+3	; 0x03
    29d4:	fc 01       	movw	r30, r24
    29d6:	84 81       	ldd	r24, Z+4	; 0x04
    29d8:	61 e0       	ldi	r22, 0x01	; 1
    29da:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    29de:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    29e0:	8c 81       	ldd	r24, Y+4	; 0x04
    29e2:	28 2f       	mov	r18, r24
    29e4:	22 95       	swap	r18
    29e6:	2f 70       	andi	r18, 0x0F	; 15
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	9b 81       	ldd	r25, Y+3	; 0x03
    29ec:	62 2f       	mov	r22, r18
    29ee:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <Lcd_4bit_enuSet4BitsOnPins>
    29f2:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	9b 81       	ldd	r25, Y+3	; 0x03
    29f8:	0e 94 f6 17 	call	0x2fec	; 0x2fec <Lcd_4bit_enuSendEnableSignal>
    29fc:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	9b 81       	ldd	r25, Y+3	; 0x03
    2a02:	6c 81       	ldd	r22, Y+4	; 0x04
    2a04:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <Lcd_4bit_enuSet4BitsOnPins>
    2a08:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <Lcd_4bit_enuSendEnableSignal>
    2a12:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2a14:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	08 95       	ret

00002a24 <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	9b 83       	std	Y+3, r25	; 0x03
    2a34:	8a 83       	std	Y+2, r24	; 0x02
    2a36:	6c 83       	std	Y+4, r22	; 0x04
    2a38:	4d 83       	std	Y+5, r20	; 0x05
    2a3a:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2a3c:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	9b 81       	ldd	r25, Y+3	; 0x03
    2a42:	89 2b       	or	r24, r25
    2a44:	19 f4       	brne	.+6      	; 0x2a4c <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	29 c0       	rjmp	.+82     	; 0x2a9e <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a50:	4e 81       	ldd	r20, Y+6	; 0x06
    2a52:	6d 81       	ldd	r22, Y+5	; 0x05
    2a54:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <Lcd_4bit_enuGoToXY>
    2a58:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5e:	fc 01       	movw	r30, r24
    2a60:	84 81       	ldd	r24, Z+4	; 0x04
    2a62:	61 e0       	ldi	r22, 0x01	; 1
    2a64:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    2a68:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    2a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	22 95       	swap	r18
    2a70:	2f 70       	andi	r18, 0x0F	; 15
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	62 2f       	mov	r22, r18
    2a78:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <Lcd_4bit_enuSet4BitsOnPins>
    2a7c:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	0e 94 f6 17 	call	0x2fec	; 0x2fec <Lcd_4bit_enuSendEnableSignal>
    2a86:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	6c 81       	ldd	r22, Y+4	; 0x04
    2a8e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <Lcd_4bit_enuSet4BitsOnPins>
    2a92:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	9b 81       	ldd	r25, Y+3	; 0x03
    2a98:	0e 94 f6 17 	call	0x2fec	; 0x2fec <Lcd_4bit_enuSendEnableSignal>
    2a9c:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aa0:	26 96       	adiw	r28, 0x06	; 6
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	08 95       	ret

00002ab2 <Lcd_4bit_enuDisplayStringWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayStringWithPosition(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String, u8 Copy_u8Row, u8 Copy_u8Col){
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	28 97       	sbiw	r28, 0x08	; 8
    2abc:	0f b6       	in	r0, 0x3f	; 63
    2abe:	f8 94       	cli
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	0f be       	out	0x3f, r0	; 63
    2ac4:	cd bf       	out	0x3d, r28	; 61
    2ac6:	9c 83       	std	Y+4, r25	; 0x04
    2ac8:	8b 83       	std	Y+3, r24	; 0x03
    2aca:	7e 83       	std	Y+6, r23	; 0x06
    2acc:	6d 83       	std	Y+5, r22	; 0x05
    2ace:	4f 83       	std	Y+7, r20	; 0x07
    2ad0:	28 87       	std	Y+8, r18	; 0x08

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2ad2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    2ad4:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	89 2b       	or	r24, r25
    2adc:	21 f0       	breq	.+8      	; 0x2ae6 <Lcd_4bit_enuDisplayStringWithPosition+0x34>
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	89 2b       	or	r24, r25
    2ae4:	19 f4       	brne	.+6      	; 0x2aec <Lcd_4bit_enuDisplayStringWithPosition+0x3a>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	25 c0       	rjmp	.+74     	; 0x2b36 <Lcd_4bit_enuDisplayStringWithPosition+0x84>

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	9c 81       	ldd	r25, Y+4	; 0x04
    2af0:	48 85       	ldd	r20, Y+8	; 0x08
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <Lcd_4bit_enuGoToXY>
    2af8:	89 83       	std	Y+1, r24	; 0x01
			while(Address_pu8String[Loc_u8Counter] !=0){
    2afa:	12 c0       	rjmp	.+36     	; 0x2b20 <Lcd_4bit_enuDisplayStringWithPosition+0x6e>
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	88 2f       	mov	r24, r24
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	2d 81       	ldd	r18, Y+5	; 0x05
    2b04:	3e 81       	ldd	r19, Y+6	; 0x06
    2b06:	82 0f       	add	r24, r18
    2b08:	93 1f       	adc	r25, r19
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	20 81       	ld	r18, Z
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	9c 81       	ldd	r25, Y+4	; 0x04
    2b12:	62 2f       	mov	r22, r18
    2b14:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Lcd_4bit_enuDisplayCharacter>
    2b18:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	8f 5f       	subi	r24, 0xFF	; 255
    2b1e:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
			while(Address_pu8String[Loc_u8Counter] !=0){
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	88 2f       	mov	r24, r24
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	2d 81       	ldd	r18, Y+5	; 0x05
    2b28:	3e 81       	ldd	r19, Y+6	; 0x06
    2b2a:	82 0f       	add	r24, r18
    2b2c:	93 1f       	adc	r25, r19
    2b2e:	fc 01       	movw	r30, r24
    2b30:	80 81       	ld	r24, Z
    2b32:	88 23       	and	r24, r24
    2b34:	19 f7       	brne	.-58     	; 0x2afc <Lcd_4bit_enuDisplayStringWithPosition+0x4a>
		}




		return Loc_enuStatus;
    2b36:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b38:	28 96       	adiw	r28, 0x08	; 8
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	08 95       	ret

00002b4a <Lcd_4bit_enuCreateCustomCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	27 97       	sbiw	r28, 0x07	; 7
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	9c 83       	std	Y+4, r25	; 0x04
    2b60:	8b 83       	std	Y+3, r24	; 0x03
    2b62:	7e 83       	std	Y+6, r23	; 0x06
    2b64:	6d 83       	std	Y+5, r22	; 0x05
    2b66:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2b68:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    2b6a:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	89 2b       	or	r24, r25
    2b72:	21 f0       	breq	.+8      	; 0x2b7c <Lcd_4bit_enuCreateCustomCharacter+0x32>
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	89 2b       	or	r24, r25
    2b7a:	19 f4       	brne	.+6      	; 0x2b82 <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2b7c:	82 e0       	ldi	r24, 0x02	; 2
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	30 c0       	rjmp	.+96     	; 0x2be2 <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    2b82:	8f 81       	ldd	r24, Y+7	; 0x07
    2b84:	88 30       	cpi	r24, 0x08	; 8
    2b86:	18 f0       	brcs	.+6      	; 0x2b8e <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    2b88:	83 e0       	ldi	r24, 0x03	; 3
    2b8a:	89 83       	std	Y+1, r24	; 0x01
    2b8c:	2a c0       	rjmp	.+84     	; 0x2be2 <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    2b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b90:	88 2f       	mov	r24, r24
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	08 96       	adiw	r24, 0x08	; 8
    2b96:	28 2f       	mov	r18, r24
    2b98:	22 0f       	add	r18, r18
    2b9a:	22 0f       	add	r18, r18
    2b9c:	22 0f       	add	r18, r18
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	62 2f       	mov	r22, r18
    2ba4:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2ba8:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    2baa:	1a 82       	std	Y+2, r1	; 0x02
    2bac:	11 c0       	rjmp	.+34     	; 0x2bd0 <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	88 2f       	mov	r24, r24
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	2d 81       	ldd	r18, Y+5	; 0x05
    2bb6:	3e 81       	ldd	r19, Y+6	; 0x06
    2bb8:	82 0f       	add	r24, r18
    2bba:	93 1f       	adc	r25, r19
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	20 81       	ld	r18, Z
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc4:	62 2f       	mov	r22, r18
    2bc6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	8f 5f       	subi	r24, 0xFF	; 255
    2bce:	8a 83       	std	Y+2, r24	; 0x02
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	88 30       	cpi	r24, 0x08	; 8
    2bd4:	60 f3       	brcs	.-40     	; 0x2bae <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bda:	60 e8       	ldi	r22, 0x80	; 128
    2bdc:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2be0:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2be2:	89 81       	ldd	r24, Y+1	; 0x01

}
    2be4:	27 96       	adiw	r28, 0x07	; 7
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	08 95       	ret

00002bf6 <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <Lcd_4bit_enuGoToXY+0x6>
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <Lcd_4bit_enuGoToXY+0x8>
    2bfe:	1f 92       	push	r1
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	9b 83       	std	Y+3, r25	; 0x03
    2c06:	8a 83       	std	Y+2, r24	; 0x02
    2c08:	6c 83       	std	Y+4, r22	; 0x04
    2c0a:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2c0c:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	89 2b       	or	r24, r25
    2c14:	19 f4       	brne	.+6      	; 0x2c1c <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	89 83       	std	Y+1, r24	; 0x01
    2c1a:	56 c0       	rjmp	.+172    	; 0x2cc8 <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    2c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1e:	85 30       	cpi	r24, 0x05	; 5
    2c20:	18 f0       	brcs	.+6      	; 0x2c28 <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    2c22:	85 e0       	ldi	r24, 0x05	; 5
    2c24:	89 83       	std	Y+1, r24	; 0x01
    2c26:	50 c0       	rjmp	.+160    	; 0x2cc8 <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	85 31       	cpi	r24, 0x15	; 21
    2c2c:	18 f0       	brcs	.+6      	; 0x2c34 <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	89 83       	std	Y+1, r24	; 0x01
    2c32:	4a c0       	rjmp	.+148    	; 0x2cc8 <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    2c34:	8d 81       	ldd	r24, Y+5	; 0x05
    2c36:	81 50       	subi	r24, 0x01	; 1
    2c38:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    2c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3c:	88 2f       	mov	r24, r24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	82 30       	cpi	r24, 0x02	; 2
    2c42:	91 05       	cpc	r25, r1
    2c44:	c9 f0       	breq	.+50     	; 0x2c78 <Lcd_4bit_enuGoToXY+0x82>
    2c46:	83 30       	cpi	r24, 0x03	; 3
    2c48:	91 05       	cpc	r25, r1
    2c4a:	1c f4       	brge	.+6      	; 0x2c52 <Lcd_4bit_enuGoToXY+0x5c>
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	39 f0       	breq	.+14     	; 0x2c5e <Lcd_4bit_enuGoToXY+0x68>
    2c50:	3a c0       	rjmp	.+116    	; 0x2cc6 <Lcd_4bit_enuGoToXY+0xd0>
    2c52:	83 30       	cpi	r24, 0x03	; 3
    2c54:	91 05       	cpc	r25, r1
    2c56:	e9 f0       	breq	.+58     	; 0x2c92 <Lcd_4bit_enuGoToXY+0x9c>
    2c58:	04 97       	sbiw	r24, 0x04	; 4
    2c5a:	41 f1       	breq	.+80     	; 0x2cac <Lcd_4bit_enuGoToXY+0xb6>
    2c5c:	34 c0       	rjmp	.+104    	; 0x2cc6 <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	20 e8       	ldi	r18, 0x80	; 128
    2c62:	28 0f       	add	r18, r24
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	9b 81       	ldd	r25, Y+3	; 0x03
    2c68:	62 2f       	mov	r22, r18
    2c6a:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2c6e:	98 2f       	mov	r25, r24
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	89 23       	and	r24, r25
    2c74:	89 83       	std	Y+1, r24	; 0x01
			                break;
    2c76:	28 c0       	rjmp	.+80     	; 0x2cc8 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	20 ec       	ldi	r18, 0xC0	; 192
    2c7c:	28 0f       	add	r18, r24
    2c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c80:	9b 81       	ldd	r25, Y+3	; 0x03
    2c82:	62 2f       	mov	r22, r18
    2c84:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2c88:	98 2f       	mov	r25, r24
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	89 23       	and	r24, r25
    2c8e:	89 83       	std	Y+1, r24	; 0x01
			                break;
    2c90:	1b c0       	rjmp	.+54     	; 0x2cc8 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	24 e9       	ldi	r18, 0x94	; 148
    2c96:	28 0f       	add	r18, r24
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9c:	62 2f       	mov	r22, r18
    2c9e:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2ca2:	98 2f       	mov	r25, r24
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	89 23       	and	r24, r25
    2ca8:	89 83       	std	Y+1, r24	; 0x01
			                break;
    2caa:	0e c0       	rjmp	.+28     	; 0x2cc8 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    2cac:	8d 81       	ldd	r24, Y+5	; 0x05
    2cae:	24 ed       	ldi	r18, 0xD4	; 212
    2cb0:	28 0f       	add	r18, r24
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb6:	62 2f       	mov	r22, r18
    2cb8:	0e 94 99 14 	call	0x2932	; 0x2932 <Lcd_4bit_enuSendCommand>
    2cbc:	98 2f       	mov	r25, r24
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	89 23       	and	r24, r25
    2cc2:	89 83       	std	Y+1, r24	; 0x01
			                break;
    2cc4:	01 c0       	rjmp	.+2      	; 0x2cc8 <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    2cc6:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01

}
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	08 95       	ret

00002cda <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	00 d0       	rcall	.+0      	; 0x2ce0 <Lcd_4bit_enuDisplayString+0x6>
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <Lcd_4bit_enuDisplayString+0x8>
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <Lcd_4bit_enuDisplayString+0xa>
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	9c 83       	std	Y+4, r25	; 0x04
    2cea:	8b 83       	std	Y+3, r24	; 0x03
    2cec:	7e 83       	std	Y+6, r23	; 0x06
    2cee:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2cf0:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    2cf2:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	89 2b       	or	r24, r25
    2cfa:	21 f0       	breq	.+8      	; 0x2d04 <Lcd_4bit_enuDisplayString+0x2a>
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	89 2b       	or	r24, r25
    2d02:	a9 f4       	brne	.+42     	; 0x2d2e <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2d04:	82 e0       	ldi	r24, 0x02	; 2
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	1d c0       	rjmp	.+58     	; 0x2d44 <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	88 2f       	mov	r24, r24
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	2d 81       	ldd	r18, Y+5	; 0x05
    2d12:	3e 81       	ldd	r19, Y+6	; 0x06
    2d14:	82 0f       	add	r24, r18
    2d16:	93 1f       	adc	r25, r19
    2d18:	fc 01       	movw	r30, r24
    2d1a:	20 81       	ld	r18, Z
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	62 2f       	mov	r22, r18
    2d22:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Lcd_4bit_enuDisplayCharacter>
    2d26:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	88 2f       	mov	r24, r24
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	2d 81       	ldd	r18, Y+5	; 0x05
    2d36:	3e 81       	ldd	r19, Y+6	; 0x06
    2d38:	82 0f       	add	r24, r18
    2d3a:	93 1f       	adc	r25, r19
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	80 81       	ld	r24, Z
    2d40:	88 23       	and	r24, r24
    2d42:	19 f7       	brne	.-58     	; 0x2d0a <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    2d44:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d46:	26 96       	adiw	r28, 0x06	; 6
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	08 95       	ret

00002d58 <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number){
    2d58:	cf 93       	push	r28
    2d5a:	df 93       	push	r29
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	cc 56       	subi	r28, 0x6C	; 108
    2d62:	d1 09       	sbc	r29, r1
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	9e 01       	movw	r18, r28
    2d70:	29 59       	subi	r18, 0x99	; 153
    2d72:	3f 4f       	sbci	r19, 0xFF	; 255
    2d74:	f9 01       	movw	r30, r18
    2d76:	91 83       	std	Z+1, r25	; 0x01
    2d78:	80 83       	st	Z, r24
    2d7a:	ce 01       	movw	r24, r28
    2d7c:	87 59       	subi	r24, 0x97	; 151
    2d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d80:	fc 01       	movw	r30, r24
    2d82:	40 83       	st	Z, r20
    2d84:	51 83       	std	Z+1, r21	; 0x01
    2d86:	62 83       	std	Z+2, r22	; 0x02
    2d88:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2d8a:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    2d8c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    2d8e:	ce 01       	movw	r24, r28
    2d90:	89 59       	subi	r24, 0x99	; 153
    2d92:	9f 4f       	sbci	r25, 0xFF	; 255
    2d94:	fc 01       	movw	r30, r24
    2d96:	80 81       	ld	r24, Z
    2d98:	91 81       	ldd	r25, Z+1	; 0x01
    2d9a:	89 2b       	or	r24, r25
    2d9c:	19 f4       	brne	.+6      	; 0x2da4 <Lcd_4bit_enuDisplayNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2d9e:	82 e0       	ldi	r24, 0x02	; 2
    2da0:	89 83       	std	Y+1, r24	; 0x01
    2da2:	1e c0       	rjmp	.+60     	; 0x2de0 <Lcd_4bit_enuDisplayNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    2da4:	9e 01       	movw	r18, r28
    2da6:	2d 5f       	subi	r18, 0xFD	; 253
    2da8:	3f 4f       	sbci	r19, 0xFF	; 255
    2daa:	ce 01       	movw	r24, r28
    2dac:	87 59       	subi	r24, 0x97	; 151
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	fc 01       	movw	r30, r24
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	a2 81       	ldd	r26, Z+2	; 0x02
    2db8:	b3 81       	ldd	r27, Z+3	; 0x03
    2dba:	a9 01       	movw	r20, r18
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	cd 01       	movw	r24, r26
    2dc0:	0e 94 59 00 	call	0xb2	; 0xb2 <Convert_IntToString>
    2dc4:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    2dc6:	9e 01       	movw	r18, r28
    2dc8:	2d 5f       	subi	r18, 0xFD	; 253
    2dca:	3f 4f       	sbci	r19, 0xFF	; 255
    2dcc:	ce 01       	movw	r24, r28
    2dce:	89 59       	subi	r24, 0x99	; 153
    2dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	b9 01       	movw	r22, r18
    2dda:	0e 94 6d 16 	call	0x2cda	; 0x2cda <Lcd_4bit_enuDisplayString>
    2dde:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2de0:	89 81       	ldd	r24, Y+1	; 0x01

}
    2de2:	c4 59       	subi	r28, 0x94	; 148
    2de4:	df 4f       	sbci	r29, 0xFF	; 255
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	08 95       	ret

00002df6 <Lcd_4bit_enuDisplayNumberWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumberWithPosition(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number, u8 Copy_u8Row, u8 Copy_u8Col){
    2df6:	0f 93       	push	r16
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	ce 56       	subi	r28, 0x6E	; 110
    2e02:	d1 09       	sbc	r29, r1
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e9 59       	subi	r30, 0x99	; 153
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	80 83       	st	Z, r24
    2e18:	ce 01       	movw	r24, r28
    2e1a:	87 59       	subi	r24, 0x97	; 151
    2e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1e:	dc 01       	movw	r26, r24
    2e20:	4d 93       	st	X+, r20
    2e22:	5d 93       	st	X+, r21
    2e24:	6d 93       	st	X+, r22
    2e26:	7c 93       	st	X, r23
    2e28:	13 97       	sbiw	r26, 0x03	; 3
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	83 59       	subi	r24, 0x93	; 147
    2e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e30:	fc 01       	movw	r30, r24
    2e32:	20 83       	st	Z, r18
    2e34:	ce 01       	movw	r24, r28
    2e36:	82 59       	subi	r24, 0x92	; 146
    2e38:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	0c 93       	st	X, r16

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2e3e:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    2e40:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    2e42:	ce 01       	movw	r24, r28
    2e44:	89 59       	subi	r24, 0x99	; 153
    2e46:	9f 4f       	sbci	r25, 0xFF	; 255
    2e48:	fc 01       	movw	r30, r24
    2e4a:	80 81       	ld	r24, Z
    2e4c:	91 81       	ldd	r25, Z+1	; 0x01
    2e4e:	89 2b       	or	r24, r25
    2e50:	19 f4       	brne	.+6      	; 0x2e58 <Lcd_4bit_enuDisplayNumberWithPosition+0x62>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2e52:	82 e0       	ldi	r24, 0x02	; 2
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	31 c0       	rjmp	.+98     	; 0x2eba <Lcd_4bit_enuDisplayNumberWithPosition+0xc4>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    2e58:	9e 01       	movw	r18, r28
    2e5a:	2d 5f       	subi	r18, 0xFD	; 253
    2e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5e:	ce 01       	movw	r24, r28
    2e60:	87 59       	subi	r24, 0x97	; 151
    2e62:	9f 4f       	sbci	r25, 0xFF	; 255
    2e64:	fc 01       	movw	r30, r24
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	a2 81       	ldd	r26, Z+2	; 0x02
    2e6c:	b3 81       	ldd	r27, Z+3	; 0x03
    2e6e:	a9 01       	movw	r20, r18
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 59 00 	call	0xb2	; 0xb2 <Convert_IntToString>
    2e78:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    2e7a:	9e 01       	movw	r18, r28
    2e7c:	22 59       	subi	r18, 0x92	; 146
    2e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e80:	ce 01       	movw	r24, r28
    2e82:	83 59       	subi	r24, 0x93	; 147
    2e84:	9f 4f       	sbci	r25, 0xFF	; 255
    2e86:	ae 01       	movw	r20, r28
    2e88:	49 59       	subi	r20, 0x99	; 153
    2e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e8c:	da 01       	movw	r26, r20
    2e8e:	ed 91       	ld	r30, X+
    2e90:	fc 91       	ld	r31, X
    2e92:	d9 01       	movw	r26, r18
    2e94:	4c 91       	ld	r20, X
    2e96:	dc 01       	movw	r26, r24
    2e98:	6c 91       	ld	r22, X
    2e9a:	cf 01       	movw	r24, r30
    2e9c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <Lcd_4bit_enuGoToXY>
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    2ea0:	9e 01       	movw	r18, r28
    2ea2:	2d 5f       	subi	r18, 0xFD	; 253
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	89 59       	subi	r24, 0x99	; 153
    2eaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2eac:	fc 01       	movw	r30, r24
    2eae:	80 81       	ld	r24, Z
    2eb0:	91 81       	ldd	r25, Z+1	; 0x01
    2eb2:	b9 01       	movw	r22, r18
    2eb4:	0e 94 6d 16 	call	0x2cda	; 0x2cda <Lcd_4bit_enuDisplayString>
    2eb8:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2eba:	89 81       	ldd	r24, Y+1	; 0x01

}
    2ebc:	c2 59       	subi	r28, 0x92	; 146
    2ebe:	df 4f       	sbci	r29, 0xFF	; 255
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	0f 91       	pop	r16
    2ed0:	08 95       	ret

00002ed2 <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f64 Copy_f64Number){
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	cc 56       	subi	r28, 0x6C	; 108
    2edc:	d1 09       	sbc	r29, r1
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	9e 01       	movw	r18, r28
    2eea:	29 59       	subi	r18, 0x99	; 153
    2eec:	3f 4f       	sbci	r19, 0xFF	; 255
    2eee:	f9 01       	movw	r30, r18
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	80 83       	st	Z, r24
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	87 59       	subi	r24, 0x97	; 151
    2ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    2efa:	fc 01       	movw	r30, r24
    2efc:	40 83       	st	Z, r20
    2efe:	51 83       	std	Z+1, r21	; 0x01
    2f00:	62 83       	std	Z+2, r22	; 0x02
    2f02:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2f04:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    2f06:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    2f08:	ce 01       	movw	r24, r28
    2f0a:	89 59       	subi	r24, 0x99	; 153
    2f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0e:	fc 01       	movw	r30, r24
    2f10:	80 81       	ld	r24, Z
    2f12:	91 81       	ldd	r25, Z+1	; 0x01
    2f14:	89 2b       	or	r24, r25
    2f16:	19 f4       	brne	.+6      	; 0x2f1e <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	1e c0       	rjmp	.+60     	; 0x2f5a <Lcd_4bit_enuDisplayFloatNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_FloatToString(Copy_f64Number, Loc_u8ConvertedNumberInArray);
    2f1e:	9e 01       	movw	r18, r28
    2f20:	2d 5f       	subi	r18, 0xFD	; 253
    2f22:	3f 4f       	sbci	r19, 0xFF	; 255
    2f24:	ce 01       	movw	r24, r28
    2f26:	87 59       	subi	r24, 0x97	; 151
    2f28:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	a2 81       	ldd	r26, Z+2	; 0x02
    2f32:	b3 81       	ldd	r27, Z+3	; 0x03
    2f34:	a9 01       	movw	r20, r18
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 98 00 	call	0x130	; 0x130 <Convert_FloatToString>
    2f3e:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
				Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd, Loc_u8ConvertedNumberInArray);
    2f40:	9e 01       	movw	r18, r28
    2f42:	2d 5f       	subi	r18, 0xFD	; 253
    2f44:	3f 4f       	sbci	r19, 0xFF	; 255
    2f46:	ce 01       	movw	r24, r28
    2f48:	89 59       	subi	r24, 0x99	; 153
    2f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	80 81       	ld	r24, Z
    2f50:	91 81       	ldd	r25, Z+1	; 0x01
    2f52:	b9 01       	movw	r22, r18
    2f54:	0e 94 6d 16 	call	0x2cda	; 0x2cda <Lcd_4bit_enuDisplayString>
    2f58:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01

}
    2f5c:	c4 59       	subi	r28, 0x94	; 148
    2f5e:	df 4f       	sbci	r29, 0xFF	; 255
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	08 95       	ret

00002f70 <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <Lcd_4bit_enuSet4BitsOnPins+0x6>
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <Lcd_4bit_enuSet4BitsOnPins+0x8>
    2f78:	1f 92       	push	r1
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	9c 83       	std	Y+4, r25	; 0x04
    2f80:	8b 83       	std	Y+3, r24	; 0x03
    2f82:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2f84:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    2f86:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8c:	89 2b       	or	r24, r25
    2f8e:	19 f4       	brne	.+6      	; 0x2f96 <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	22 c0       	rjmp	.+68     	; 0x2fda <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2f96:	1a 82       	std	Y+2, r1	; 0x02
    2f98:	1d c0       	rjmp	.+58     	; 0x2fd4 <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    2f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	2a 81       	ldd	r18, Y+2	; 0x02
    2fa2:	22 2f       	mov	r18, r18
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    2fa8:	95 95       	asr	r25
    2faa:	87 95       	ror	r24
    2fac:	2a 95       	dec	r18
    2fae:	e2 f7       	brpl	.-8      	; 0x2fa8 <Lcd_4bit_enuSet4BitsOnPins+0x38>
    2fb0:	48 2f       	mov	r20, r24
    2fb2:	41 70       	andi	r20, 0x01	; 1
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	2b 81       	ldd	r18, Y+3	; 0x03
    2fbc:	3c 81       	ldd	r19, Y+4	; 0x04
    2fbe:	82 0f       	add	r24, r18
    2fc0:	93 1f       	adc	r25, r19
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	80 81       	ld	r24, Z
    2fc6:	64 2f       	mov	r22, r20
    2fc8:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    2fcc:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2fce:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd0:	8f 5f       	subi	r24, 0xFF	; 255
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	84 30       	cpi	r24, 0x04	; 4
    2fd8:	00 f3       	brcs	.-64     	; 0x2f9a <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    2fda:	89 81       	ldd	r24, Y+1	; 0x01

}
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	08 95       	ret

00002fec <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	a3 97       	sbiw	r28, 0x23	; 35
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
    3000:	9b a3       	std	Y+35, r25	; 0x23
    3002:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    3004:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    3006:	8a a1       	ldd	r24, Y+34	; 0x22
    3008:	9b a1       	ldd	r25, Y+35	; 0x23
    300a:	89 2b       	or	r24, r25
    300c:	19 f4       	brne	.+6      	; 0x3014 <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	89 83       	std	Y+1, r24	; 0x01
    3012:	ff c0       	rjmp	.+510    	; 0x3212 <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    3014:	8a a1       	ldd	r24, Y+34	; 0x22
    3016:	9b a1       	ldd	r25, Y+35	; 0x23
    3018:	fc 01       	movw	r30, r24
    301a:	85 81       	ldd	r24, Z+5	; 0x05
    301c:	61 e0       	ldi	r22, 0x01	; 1
    301e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	a0 ea       	ldi	r26, 0xA0	; 160
    302a:	b0 e4       	ldi	r27, 0x40	; 64
    302c:	8a 83       	std	Y+2, r24	; 0x02
    302e:	9b 83       	std	Y+3, r25	; 0x03
    3030:	ac 83       	std	Y+4, r26	; 0x04
    3032:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    3034:	2b ea       	ldi	r18, 0xAB	; 171
    3036:	3a ea       	ldi	r19, 0xAA	; 170
    3038:	4a ea       	ldi	r20, 0xAA	; 170
    303a:	50 e4       	ldi	r21, 0x40	; 64
    303c:	6a 81       	ldd	r22, Y+2	; 0x02
    303e:	7b 81       	ldd	r23, Y+3	; 0x03
    3040:	8c 81       	ldd	r24, Y+4	; 0x04
    3042:	9d 81       	ldd	r25, Y+5	; 0x05
    3044:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	8e 83       	std	Y+6, r24	; 0x06
    304e:	9f 83       	std	Y+7, r25	; 0x07
    3050:	a8 87       	std	Y+8, r26	; 0x08
    3052:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e8       	ldi	r20, 0x80	; 128
    305a:	50 e4       	ldi	r21, 0x40	; 64
    305c:	6a 81       	ldd	r22, Y+2	; 0x02
    305e:	7b 81       	ldd	r23, Y+3	; 0x03
    3060:	8c 81       	ldd	r24, Y+4	; 0x04
    3062:	9d 81       	ldd	r25, Y+5	; 0x05
    3064:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	8a 87       	std	Y+10, r24	; 0x0a
    306e:	9b 87       	std	Y+11, r25	; 0x0b
    3070:	ac 87       	std	Y+12, r26	; 0x0c
    3072:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e8       	ldi	r20, 0x80	; 128
    307a:	5f e3       	ldi	r21, 0x3F	; 63
    307c:	6e 81       	ldd	r22, Y+6	; 0x06
    307e:	7f 81       	ldd	r23, Y+7	; 0x07
    3080:	88 85       	ldd	r24, Y+8	; 0x08
    3082:	99 85       	ldd	r25, Y+9	; 0x09
    3084:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    3088:	88 23       	and	r24, r24
    308a:	1c f4       	brge	.+6      	; 0x3092 <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	8e 87       	std	Y+14, r24	; 0x0e
    3090:	b2 c0       	rjmp	.+356    	; 0x31f6 <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	3f ef       	ldi	r19, 0xFF	; 255
    3096:	4f e7       	ldi	r20, 0x7F	; 127
    3098:	57 e4       	ldi	r21, 0x47	; 71
    309a:	6a 85       	ldd	r22, Y+10	; 0x0a
    309c:	7b 85       	ldd	r23, Y+11	; 0x0b
    309e:	8c 85       	ldd	r24, Y+12	; 0x0c
    30a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    30a2:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    30a6:	18 16       	cp	r1, r24
    30a8:	0c f0       	brlt	.+2      	; 0x30ac <Lcd_4bit_enuSendEnableSignal+0xc0>
    30aa:	7b c0       	rjmp	.+246    	; 0x31a2 <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	4a e7       	ldi	r20, 0x7A	; 122
    30b2:	54 e4       	ldi	r21, 0x44	; 68
    30b4:	6a 81       	ldd	r22, Y+2	; 0x02
    30b6:	7b 81       	ldd	r23, Y+3	; 0x03
    30b8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ba:	9d 81       	ldd	r25, Y+5	; 0x05
    30bc:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__divsf3>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	8f 87       	std	Y+15, r24	; 0x0f
    30c6:	98 8b       	std	Y+16, r25	; 0x10
    30c8:	a9 8b       	std	Y+17, r26	; 0x11
    30ca:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4a e7       	ldi	r20, 0x7A	; 122
    30d2:	55 e4       	ldi	r21, 0x45	; 69
    30d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    30d6:	78 89       	ldd	r23, Y+16	; 0x10
    30d8:	89 89       	ldd	r24, Y+17	; 0x11
    30da:	9a 89       	ldd	r25, Y+18	; 0x12
    30dc:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	8b 8b       	std	Y+19, r24	; 0x13
    30e6:	9c 8b       	std	Y+20, r25	; 0x14
    30e8:	ad 8b       	std	Y+21, r26	; 0x15
    30ea:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e8       	ldi	r20, 0x80	; 128
    30f2:	5f e3       	ldi	r21, 0x3F	; 63
    30f4:	6b 89       	ldd	r22, Y+19	; 0x13
    30f6:	7c 89       	ldd	r23, Y+20	; 0x14
    30f8:	8d 89       	ldd	r24, Y+21	; 0x15
    30fa:	9e 89       	ldd	r25, Y+22	; 0x16
    30fc:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    3100:	88 23       	and	r24, r24
    3102:	2c f4       	brge	.+10     	; 0x310e <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	98 8f       	std	Y+24, r25	; 0x18
    310a:	8f 8b       	std	Y+23, r24	; 0x17
    310c:	3f c0       	rjmp	.+126    	; 0x318c <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	3f ef       	ldi	r19, 0xFF	; 255
    3112:	4f e7       	ldi	r20, 0x7F	; 127
    3114:	57 e4       	ldi	r21, 0x47	; 71
    3116:	6b 89       	ldd	r22, Y+19	; 0x13
    3118:	7c 89       	ldd	r23, Y+20	; 0x14
    311a:	8d 89       	ldd	r24, Y+21	; 0x15
    311c:	9e 89       	ldd	r25, Y+22	; 0x16
    311e:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    3122:	18 16       	cp	r1, r24
    3124:	4c f5       	brge	.+82     	; 0x3178 <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3130:	78 89       	ldd	r23, Y+16	; 0x10
    3132:	89 89       	ldd	r24, Y+17	; 0x11
    3134:	9a 89       	ldd	r25, Y+18	; 0x12
    3136:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	98 8f       	std	Y+24, r25	; 0x18
    314c:	8f 8b       	std	Y+23, r24	; 0x17
    314e:	0f c0       	rjmp	.+30     	; 0x316e <Lcd_4bit_enuSendEnableSignal+0x182>
    3150:	80 e9       	ldi	r24, 0x90	; 144
    3152:	91 e0       	ldi	r25, 0x01	; 1
    3154:	9a 8f       	std	Y+26, r25	; 0x1a
    3156:	89 8f       	std	Y+25, r24	; 0x19
    3158:	89 8d       	ldd	r24, Y+25	; 0x19
    315a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <Lcd_4bit_enuSendEnableSignal+0x170>
    3160:	9a 8f       	std	Y+26, r25	; 0x1a
    3162:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3164:	8f 89       	ldd	r24, Y+23	; 0x17
    3166:	98 8d       	ldd	r25, Y+24	; 0x18
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	98 8f       	std	Y+24, r25	; 0x18
    316c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316e:	8f 89       	ldd	r24, Y+23	; 0x17
    3170:	98 8d       	ldd	r25, Y+24	; 0x18
    3172:	89 2b       	or	r24, r25
    3174:	69 f7       	brne	.-38     	; 0x3150 <Lcd_4bit_enuSendEnableSignal+0x164>
    3176:	3f c0       	rjmp	.+126    	; 0x31f6 <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3178:	6b 89       	ldd	r22, Y+19	; 0x13
    317a:	7c 89       	ldd	r23, Y+20	; 0x14
    317c:	8d 89       	ldd	r24, Y+21	; 0x15
    317e:	9e 89       	ldd	r25, Y+22	; 0x16
    3180:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	98 8f       	std	Y+24, r25	; 0x18
    318a:	8f 8b       	std	Y+23, r24	; 0x17
    318c:	8f 89       	ldd	r24, Y+23	; 0x17
    318e:	98 8d       	ldd	r25, Y+24	; 0x18
    3190:	9c 8f       	std	Y+28, r25	; 0x1c
    3192:	8b 8f       	std	Y+27, r24	; 0x1b
    3194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	f1 f7       	brne	.-4      	; 0x3198 <Lcd_4bit_enuSendEnableSignal+0x1ac>
    319c:	9c 8f       	std	Y+28, r25	; 0x1c
    319e:	8b 8f       	std	Y+27, r24	; 0x1b
    31a0:	2a c0       	rjmp	.+84     	; 0x31f6 <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	4f e7       	ldi	r20, 0x7F	; 127
    31a8:	53 e4       	ldi	r21, 0x43	; 67
    31aa:	6e 81       	ldd	r22, Y+6	; 0x06
    31ac:	7f 81       	ldd	r23, Y+7	; 0x07
    31ae:	88 85       	ldd	r24, Y+8	; 0x08
    31b0:	99 85       	ldd	r25, Y+9	; 0x09
    31b2:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    31b6:	18 16       	cp	r1, r24
    31b8:	ac f4       	brge	.+42     	; 0x31e4 <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    31ba:	6a 85       	ldd	r22, Y+10	; 0x0a
    31bc:	7b 85       	ldd	r23, Y+11	; 0x0b
    31be:	8c 85       	ldd	r24, Y+12	; 0x0c
    31c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    31c2:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9e 8f       	std	Y+30, r25	; 0x1e
    31cc:	8d 8f       	std	Y+29, r24	; 0x1d
    31ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31d2:	98 a3       	std	Y+32, r25	; 0x20
    31d4:	8f 8f       	std	Y+31, r24	; 0x1f
    31d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31d8:	98 a1       	ldd	r25, Y+32	; 0x20
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <Lcd_4bit_enuSendEnableSignal+0x1ee>
    31de:	98 a3       	std	Y+32, r25	; 0x20
    31e0:	8f 8f       	std	Y+31, r24	; 0x1f
    31e2:	0f c0       	rjmp	.+30     	; 0x3202 <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31e4:	6e 81       	ldd	r22, Y+6	; 0x06
    31e6:	7f 81       	ldd	r23, Y+7	; 0x07
    31e8:	88 85       	ldd	r24, Y+8	; 0x08
    31ea:	99 85       	ldd	r25, Y+9	; 0x09
    31ec:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	8e 87       	std	Y+14, r24	; 0x0e
    31f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31f8:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31fa:	89 a1       	ldd	r24, Y+33	; 0x21
    31fc:	8a 95       	dec	r24
    31fe:	f1 f7       	brne	.-4      	; 0x31fc <Lcd_4bit_enuSendEnableSignal+0x210>
    3200:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    3202:	8a a1       	ldd	r24, Y+34	; 0x22
    3204:	9b a1       	ldd	r25, Y+35	; 0x23
    3206:	fc 01       	movw	r30, r24
    3208:	85 81       	ldd	r24, Z+5	; 0x05
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    3210:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    3212:	89 81       	ldd	r24, Y+1	; 0x01

}
    3214:	a3 96       	adiw	r28, 0x23	; 35
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	08 95       	ret

00003226 <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
    322e:	29 97       	sbiw	r28, 0x09	; 9
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	9f 83       	std	Y+7, r25	; 0x07
    323c:	8e 83       	std	Y+6, r24	; 0x06
    323e:	79 87       	std	Y+9, r23	; 0x09
    3240:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    3242:	83 e0       	ldi	r24, 0x03	; 3
    3244:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    3246:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    3248:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    324a:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    324c:	8e 81       	ldd	r24, Y+6	; 0x06
    324e:	9f 81       	ldd	r25, Y+7	; 0x07
    3250:	fc 01       	movw	r30, r24
    3252:	81 85       	ldd	r24, Z+9	; 0x09
    3254:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    3256:	8e 81       	ldd	r24, Y+6	; 0x06
    3258:	9f 81       	ldd	r25, Y+7	; 0x07
    325a:	89 2b       	or	r24, r25
    325c:	21 f0       	breq	.+8      	; 0x3266 <Keypad_enuRead+0x40>
    325e:	88 85       	ldd	r24, Y+8	; 0x08
    3260:	99 85       	ldd	r25, Y+9	; 0x09
    3262:	89 2b       	or	r24, r25
    3264:	19 f4       	brne	.+6      	; 0x326c <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    3266:	82 e0       	ldi	r24, 0x02	; 2
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	df c0       	rjmp	.+446    	; 0x342a <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    326c:	8e 81       	ldd	r24, Y+6	; 0x06
    326e:	9f 81       	ldd	r25, Y+7	; 0x07
    3270:	0e 94 1f 1a 	call	0x343e	; 0x343e <Keypad_DisableControlPins>
    3274:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    3276:	8e 81       	ldd	r24, Y+6	; 0x06
    3278:	9f 81       	ldd	r25, Y+7	; 0x07
    327a:	fc 01       	movw	r30, r24
    327c:	80 85       	ldd	r24, Z+8	; 0x08
    327e:	88 2f       	mov	r24, r24
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	21 f0       	breq	.+8      	; 0x328e <Keypad_enuRead+0x68>
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	09 f4       	brne	.+2      	; 0x328c <Keypad_enuRead+0x66>
    328a:	67 c0       	rjmp	.+206    	; 0x335a <Keypad_enuRead+0x134>
    328c:	cc c0       	rjmp	.+408    	; 0x3426 <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    328e:	1a 82       	std	Y+2, r1	; 0x02
    3290:	5f c0       	rjmp	.+190    	; 0x3350 <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    3292:	8e 81       	ldd	r24, Y+6	; 0x06
    3294:	9f 81       	ldd	r25, Y+7	; 0x07
    3296:	fc 01       	movw	r30, r24
    3298:	91 85       	ldd	r25, Z+9	; 0x09
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	99 23       	and	r25, r25
    329e:	09 f0       	breq	.+2      	; 0x32a2 <Keypad_enuRead+0x7c>
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	48 2f       	mov	r20, r24
    32a4:	8a 81       	ldd	r24, Y+2	; 0x02
    32a6:	88 2f       	mov	r24, r24
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	2e 81       	ldd	r18, Y+6	; 0x06
    32ac:	3f 81       	ldd	r19, Y+7	; 0x07
    32ae:	82 0f       	add	r24, r18
    32b0:	93 1f       	adc	r25, r19
    32b2:	fc 01       	movw	r30, r24
    32b4:	80 81       	ld	r24, Z
    32b6:	64 2f       	mov	r22, r20
    32b8:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    32bc:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    32be:	1b 82       	std	Y+3, r1	; 0x03
    32c0:	30 c0       	rjmp	.+96     	; 0x3322 <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	88 2f       	mov	r24, r24
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	2e 81       	ldd	r18, Y+6	; 0x06
    32ca:	3f 81       	ldd	r19, Y+7	; 0x07
    32cc:	82 0f       	add	r24, r18
    32ce:	93 1f       	adc	r25, r19
    32d0:	04 96       	adiw	r24, 0x04	; 4
    32d2:	fc 01       	movw	r30, r24
    32d4:	20 81       	ld	r18, Z
    32d6:	ce 01       	movw	r24, r28
    32d8:	05 96       	adiw	r24, 0x05	; 5
    32da:	bc 01       	movw	r22, r24
    32dc:	82 2f       	mov	r24, r18
    32de:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Dio_enuReadChannel>
    32e2:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    32e4:	8e 81       	ldd	r24, Y+6	; 0x06
    32e6:	9f 81       	ldd	r25, Y+7	; 0x07
    32e8:	fc 01       	movw	r30, r24
    32ea:	91 85       	ldd	r25, Z+9	; 0x09
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	98 17       	cp	r25, r24
    32f0:	a9 f0       	breq	.+42     	; 0x331c <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    32f2:	8a 81       	ldd	r24, Y+2	; 0x02
    32f4:	28 2f       	mov	r18, r24
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	88 2f       	mov	r24, r24
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	22 0f       	add	r18, r18
    3300:	33 1f       	adc	r19, r19
    3302:	22 0f       	add	r18, r18
    3304:	33 1f       	adc	r19, r19
    3306:	82 0f       	add	r24, r18
    3308:	93 1f       	adc	r25, r19
    330a:	8a 52       	subi	r24, 0x2A	; 42
    330c:	9f 4f       	sbci	r25, 0xFF	; 255
    330e:	fc 01       	movw	r30, r24
    3310:	20 81       	ld	r18, Z
    3312:	88 85       	ldd	r24, Y+8	; 0x08
    3314:	99 85       	ldd	r25, Y+9	; 0x09
    3316:	fc 01       	movw	r30, r24
    3318:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    331a:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	8b 83       	std	Y+3, r24	; 0x03
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	84 30       	cpi	r24, 0x04	; 4
    3326:	68 f2       	brcs	.-102    	; 0x32c2 <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    3328:	8e 81       	ldd	r24, Y+6	; 0x06
    332a:	9f 81       	ldd	r25, Y+7	; 0x07
    332c:	fc 01       	movw	r30, r24
    332e:	41 85       	ldd	r20, Z+9	; 0x09
    3330:	8a 81       	ldd	r24, Y+2	; 0x02
    3332:	88 2f       	mov	r24, r24
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	2e 81       	ldd	r18, Y+6	; 0x06
    3338:	3f 81       	ldd	r19, Y+7	; 0x07
    333a:	82 0f       	add	r24, r18
    333c:	93 1f       	adc	r25, r19
    333e:	fc 01       	movw	r30, r24
    3340:	80 81       	ld	r24, Z
    3342:	64 2f       	mov	r22, r20
    3344:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    3348:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    334a:	8a 81       	ldd	r24, Y+2	; 0x02
    334c:	8f 5f       	subi	r24, 0xFF	; 255
    334e:	8a 83       	std	Y+2, r24	; 0x02
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	84 30       	cpi	r24, 0x04	; 4
    3354:	08 f4       	brcc	.+2      	; 0x3358 <Keypad_enuRead+0x132>
    3356:	9d cf       	rjmp	.-198    	; 0x3292 <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    3358:	68 c0       	rjmp	.+208    	; 0x342a <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    335a:	1b 82       	std	Y+3, r1	; 0x03
    335c:	5f c0       	rjmp	.+190    	; 0x341c <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    335e:	8e 81       	ldd	r24, Y+6	; 0x06
    3360:	9f 81       	ldd	r25, Y+7	; 0x07
    3362:	fc 01       	movw	r30, r24
    3364:	91 85       	ldd	r25, Z+9	; 0x09
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	99 23       	and	r25, r25
    336a:	09 f0       	breq	.+2      	; 0x336e <Keypad_enuRead+0x148>
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	48 2f       	mov	r20, r24
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	2e 81       	ldd	r18, Y+6	; 0x06
    3378:	3f 81       	ldd	r19, Y+7	; 0x07
    337a:	82 0f       	add	r24, r18
    337c:	93 1f       	adc	r25, r19
    337e:	04 96       	adiw	r24, 0x04	; 4
    3380:	fc 01       	movw	r30, r24
    3382:	80 81       	ld	r24, Z
    3384:	64 2f       	mov	r22, r20
    3386:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    338a:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    338c:	1a 82       	std	Y+2, r1	; 0x02
    338e:	2e c0       	rjmp	.+92     	; 0x33ec <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	88 2f       	mov	r24, r24
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	2e 81       	ldd	r18, Y+6	; 0x06
    3398:	3f 81       	ldd	r19, Y+7	; 0x07
    339a:	82 0f       	add	r24, r18
    339c:	93 1f       	adc	r25, r19
    339e:	fc 01       	movw	r30, r24
    33a0:	20 81       	ld	r18, Z
    33a2:	ce 01       	movw	r24, r28
    33a4:	05 96       	adiw	r24, 0x05	; 5
    33a6:	bc 01       	movw	r22, r24
    33a8:	82 2f       	mov	r24, r18
    33aa:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Dio_enuReadChannel>
    33ae:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    33b0:	8e 81       	ldd	r24, Y+6	; 0x06
    33b2:	9f 81       	ldd	r25, Y+7	; 0x07
    33b4:	fc 01       	movw	r30, r24
    33b6:	91 85       	ldd	r25, Z+9	; 0x09
    33b8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ba:	98 17       	cp	r25, r24
    33bc:	a1 f0       	breq	.+40     	; 0x33e6 <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    33be:	8a 81       	ldd	r24, Y+2	; 0x02
    33c0:	28 2f       	mov	r18, r24
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	8b 81       	ldd	r24, Y+3	; 0x03
    33c6:	88 2f       	mov	r24, r24
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	22 0f       	add	r18, r18
    33cc:	33 1f       	adc	r19, r19
    33ce:	22 0f       	add	r18, r18
    33d0:	33 1f       	adc	r19, r19
    33d2:	82 0f       	add	r24, r18
    33d4:	93 1f       	adc	r25, r19
    33d6:	8a 52       	subi	r24, 0x2A	; 42
    33d8:	9f 4f       	sbci	r25, 0xFF	; 255
    33da:	fc 01       	movw	r30, r24
    33dc:	20 81       	ld	r18, Z
    33de:	88 85       	ldd	r24, Y+8	; 0x08
    33e0:	99 85       	ldd	r25, Y+9	; 0x09
    33e2:	fc 01       	movw	r30, r24
    33e4:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	8f 5f       	subi	r24, 0xFF	; 255
    33ea:	8a 83       	std	Y+2, r24	; 0x02
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	84 30       	cpi	r24, 0x04	; 4
    33f0:	78 f2       	brcs	.-98     	; 0x3390 <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    33f2:	8e 81       	ldd	r24, Y+6	; 0x06
    33f4:	9f 81       	ldd	r25, Y+7	; 0x07
    33f6:	fc 01       	movw	r30, r24
    33f8:	41 85       	ldd	r20, Z+9	; 0x09
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	88 2f       	mov	r24, r24
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	2e 81       	ldd	r18, Y+6	; 0x06
    3402:	3f 81       	ldd	r19, Y+7	; 0x07
    3404:	82 0f       	add	r24, r18
    3406:	93 1f       	adc	r25, r19
    3408:	04 96       	adiw	r24, 0x04	; 4
    340a:	fc 01       	movw	r30, r24
    340c:	80 81       	ld	r24, Z
    340e:	64 2f       	mov	r22, r20
    3410:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    3414:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
    3418:	8f 5f       	subi	r24, 0xFF	; 255
    341a:	8b 83       	std	Y+3, r24	; 0x03
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	84 30       	cpi	r24, 0x04	; 4
    3420:	08 f4       	brcc	.+2      	; 0x3424 <Keypad_enuRead+0x1fe>
    3422:	9d cf       	rjmp	.-198    	; 0x335e <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    3424:	02 c0       	rjmp	.+4      	; 0x342a <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    342a:	89 81       	ldd	r24, Y+1	; 0x01
}
    342c:	29 96       	adiw	r28, 0x09	; 9
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	08 95       	ret

0000343e <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    343e:	cf 93       	push	r28
    3440:	df 93       	push	r29
    3442:	00 d0       	rcall	.+0      	; 0x3444 <Keypad_DisableControlPins+0x6>
    3444:	00 d0       	rcall	.+0      	; 0x3446 <Keypad_DisableControlPins+0x8>
    3446:	1f 92       	push	r1
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
    344c:	9d 83       	std	Y+5, r25	; 0x05
    344e:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    3450:	83 e0       	ldi	r24, 0x03	; 3
    3452:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    3454:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    3456:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    3458:	8c 81       	ldd	r24, Y+4	; 0x04
    345a:	9d 81       	ldd	r25, Y+5	; 0x05
    345c:	89 2b       	or	r24, r25
    345e:	19 f4       	brne	.+6      	; 0x3466 <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    3460:	82 e0       	ldi	r24, 0x02	; 2
    3462:	89 83       	std	Y+1, r24	; 0x01
    3464:	42 c0       	rjmp	.+132    	; 0x34ea <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    3466:	8c 81       	ldd	r24, Y+4	; 0x04
    3468:	9d 81       	ldd	r25, Y+5	; 0x05
    346a:	fc 01       	movw	r30, r24
    346c:	80 85       	ldd	r24, Z+8	; 0x08
    346e:	88 2f       	mov	r24, r24
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	19 f0       	breq	.+6      	; 0x347c <Keypad_DisableControlPins+0x3e>
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	d9 f0       	breq	.+54     	; 0x34b0 <Keypad_DisableControlPins+0x72>
    347a:	35 c0       	rjmp	.+106    	; 0x34e6 <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    347c:	1a 82       	std	Y+2, r1	; 0x02
    347e:	14 c0       	rjmp	.+40     	; 0x34a8 <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    3480:	8c 81       	ldd	r24, Y+4	; 0x04
    3482:	9d 81       	ldd	r25, Y+5	; 0x05
    3484:	fc 01       	movw	r30, r24
    3486:	41 85       	ldd	r20, Z+9	; 0x09
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	88 2f       	mov	r24, r24
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	2c 81       	ldd	r18, Y+4	; 0x04
    3490:	3d 81       	ldd	r19, Y+5	; 0x05
    3492:	82 0f       	add	r24, r18
    3494:	93 1f       	adc	r25, r19
    3496:	fc 01       	movw	r30, r24
    3498:	80 81       	ld	r24, Z
    349a:	64 2f       	mov	r22, r20
    349c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    34a0:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	8f 5f       	subi	r24, 0xFF	; 255
    34a6:	8a 83       	std	Y+2, r24	; 0x02
    34a8:	8a 81       	ldd	r24, Y+2	; 0x02
    34aa:	84 30       	cpi	r24, 0x04	; 4
    34ac:	48 f3       	brcs	.-46     	; 0x3480 <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    34ae:	1d c0       	rjmp	.+58     	; 0x34ea <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    34b0:	1a 82       	std	Y+2, r1	; 0x02
    34b2:	15 c0       	rjmp	.+42     	; 0x34de <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    34b4:	8c 81       	ldd	r24, Y+4	; 0x04
    34b6:	9d 81       	ldd	r25, Y+5	; 0x05
    34b8:	fc 01       	movw	r30, r24
    34ba:	41 85       	ldd	r20, Z+9	; 0x09
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	88 2f       	mov	r24, r24
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	2c 81       	ldd	r18, Y+4	; 0x04
    34c4:	3d 81       	ldd	r19, Y+5	; 0x05
    34c6:	82 0f       	add	r24, r18
    34c8:	93 1f       	adc	r25, r19
    34ca:	04 96       	adiw	r24, 0x04	; 4
    34cc:	fc 01       	movw	r30, r24
    34ce:	80 81       	ld	r24, Z
    34d0:	64 2f       	mov	r22, r20
    34d2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <Dio_enuWriteChannel>
    34d6:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	8f 5f       	subi	r24, 0xFF	; 255
    34dc:	8a 83       	std	Y+2, r24	; 0x02
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	84 30       	cpi	r24, 0x04	; 4
    34e2:	40 f3       	brcs	.-48     	; 0x34b4 <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	0f 90       	pop	r0
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	08 95       	ret

000034fc <Icusw_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Icusw_StatusErrorType Icusw_enuInit(Icusw_ConfigType* Address_Icusw ){
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	00 d0       	rcall	.+0      	; 0x3502 <Icusw_enuInit+0x6>
    3502:	00 d0       	rcall	.+0      	; 0x3504 <Icusw_enuInit+0x8>
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	9c 83       	std	Y+4, r25	; 0x04
    350a:	8b 83       	std	Y+3, r24	; 0x03
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    350c:	19 82       	std	Y+1, r1	; 0x01
	Exti_StatusErrorType Loc_enuExtiswStatus = EXTI_STATUS_OK;
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	8a 83       	std	Y+2, r24	; 0x02

	if(NULL == Address_Icusw){
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	9c 81       	ldd	r25, Y+4	; 0x04
    3516:	89 2b       	or	r24, r25
    3518:	19 f4       	brne	.+6      	; 0x3520 <Icusw_enuInit+0x24>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    351a:	82 e0       	ldi	r24, 0x02	; 2
    351c:	89 83       	std	Y+1, r24	; 0x01
    351e:	68 c0       	rjmp	.+208    	; 0x35f0 <Icusw_enuInit+0xf4>
	}
	else{

		switch(Address_Icusw->exti_Intx_Index){
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	9c 81       	ldd	r25, Y+4	; 0x04
    3524:	fc 01       	movw	r30, r24
    3526:	80 81       	ld	r24, Z
    3528:	88 2f       	mov	r24, r24
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	91 05       	cpc	r25, r1
    3530:	89 f0       	breq	.+34     	; 0x3554 <Icusw_enuInit+0x58>
    3532:	82 30       	cpi	r24, 0x02	; 2
    3534:	91 05       	cpc	r25, r1
    3536:	d1 f0       	breq	.+52     	; 0x356c <Icusw_enuInit+0x70>
    3538:	89 2b       	or	r24, r25
    353a:	21 f5       	brne	.+72     	; 0x3584 <Icusw_enuInit+0x88>
		case EXTI_INT0_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
    353c:	63 e0       	ldi	r22, 0x03	; 3
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	0e 94 46 0b 	call	0x168c	; 0x168c <Exti_enuEnable>
    3544:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT0_INDEX, Icusw_voidINT0Isr);
    3546:	60 ec       	ldi	r22, 0xC0	; 192
    3548:	7b e1       	ldi	r23, 0x1B	; 27
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Exti_enuSetCallbackFunction>
    3550:	8a 83       	std	Y+2, r24	; 0x02

			break;
    3552:	1a c0       	rjmp	.+52     	; 0x3588 <Icusw_enuInit+0x8c>
		case EXTI_INT1_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT1_INDEX,EXTI_INT1_SELECT_RISING_EDGE);
    3554:	63 e0       	ldi	r22, 0x03	; 3
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	0e 94 46 0b 	call	0x168c	; 0x168c <Exti_enuEnable>
    355c:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT1_INDEX, Icusw_voidINT1Isr);
    355e:	68 e5       	ldi	r22, 0x58	; 88
    3560:	7d e1       	ldi	r23, 0x1D	; 29
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Exti_enuSetCallbackFunction>
    3568:	8a 83       	std	Y+2, r24	; 0x02

			break;
    356a:	0e c0       	rjmp	.+28     	; 0x3588 <Icusw_enuInit+0x8c>
		case EXTI_INT2_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT2_INDEX,EXTI_INT2_SELECT_RISING_EDGE);
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	82 e0       	ldi	r24, 0x02	; 2
    3570:	0e 94 46 0b 	call	0x168c	; 0x168c <Exti_enuEnable>
    3574:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT2_INDEX, Icusw_voidINT2Isr);
    3576:	60 e6       	ldi	r22, 0x60	; 96
    3578:	7d e1       	ldi	r23, 0x1D	; 29
    357a:	82 e0       	ldi	r24, 0x02	; 2
    357c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Exti_enuSetCallbackFunction>
    3580:	8a 83       	std	Y+2, r24	; 0x02


			break;
    3582:	02 c0       	rjmp	.+4      	; 0x3588 <Icusw_enuInit+0x8c>
		default:

			Loc_enuExtiswStatus = EXTI_STATUS_FAIL;
    3584:	1a 82       	std	Y+2, r1	; 0x02
			break;
    3586:	00 00       	nop

		}

		switch(Address_Icusw->timer_index){
    3588:	8b 81       	ldd	r24, Y+3	; 0x03
    358a:	9c 81       	ldd	r25, Y+4	; 0x04
    358c:	fc 01       	movw	r30, r24
    358e:	81 81       	ldd	r24, Z+1	; 0x01
    3590:	88 2f       	mov	r24, r24
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	81 30       	cpi	r24, 0x01	; 1
    3596:	91 05       	cpc	r25, r1
    3598:	41 f1       	breq	.+80     	; 0x35ea <Icusw_enuInit+0xee>
    359a:	82 30       	cpi	r24, 0x02	; 2
    359c:	91 05       	cpc	r25, r1
    359e:	39 f1       	breq	.+78     	; 0x35ee <Icusw_enuInit+0xf2>
    35a0:	89 2b       	or	r24, r25
    35a2:	01 f5       	brne	.+64     	; 0x35e4 <Icusw_enuInit+0xe8>

		case ICUSW_TIMER_INDEX_TIMER0 :

			Timer0_enuInit(&Global_StaticTimer0);
    35a4:	81 ea       	ldi	r24, 0xA1	; 161
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	0e 94 36 05 	call	0xa6c	; 0xa6c <Timer0_enuInit>
			Timer0_enuSetCallbackFunction(&Global_StaticTimer0,Timer_voidTimerOverflowIsr);
    35ac:	65 ea       	ldi	r22, 0xA5	; 165
    35ae:	7b e1       	ldi	r23, 0x1B	; 27
    35b0:	81 ea       	ldi	r24, 0xA1	; 161
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	0e 94 d7 06 	call	0xdae	; 0xdae <Timer0_enuSetCallbackFunction>
			Timer0_enuEnableInterrupt(&Global_StaticTimer0);
    35b8:	81 ea       	ldi	r24, 0xA1	; 161
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	0e 94 06 06 	call	0xc0c	; 0xc0c <Timer0_enuEnableInterrupt>
			Global_StaticINTxWhichTimer[Address_Icusw->exti_Intx_Index]=ICUSW_TIMER_INDEX_TIMER0;
    35c0:	8b 81       	ldd	r24, Y+3	; 0x03
    35c2:	9c 81       	ldd	r25, Y+4	; 0x04
    35c4:	fc 01       	movw	r30, r24
    35c6:	80 81       	ld	r24, Z
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	88 0f       	add	r24, r24
    35d2:	99 1f       	adc	r25, r25
    35d4:	8d 5e       	subi	r24, 0xED	; 237
    35d6:	9e 4f       	sbci	r25, 0xFE	; 254
    35d8:	fc 01       	movw	r30, r24
    35da:	10 82       	st	Z, r1
    35dc:	11 82       	std	Z+1, r1	; 0x01
    35de:	12 82       	std	Z+2, r1	; 0x02
    35e0:	13 82       	std	Z+3, r1	; 0x03

			break;
    35e2:	06 c0       	rjmp	.+12     	; 0x35f0 <Icusw_enuInit+0xf4>

			break;

		default:

			Loc_enuIcuswStatus = ICUSW_STATUS_FAIL;
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	89 83       	std	Y+1, r24	; 0x01
			break;
    35e8:	03 c0       	rjmp	.+6      	; 0x35f0 <Icusw_enuInit+0xf4>
			Global_StaticINTxWhichTimer[Address_Icusw->exti_Intx_Index]=ICUSW_TIMER_INDEX_TIMER0;

			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    35ea:	00 00       	nop
    35ec:	01 c0       	rjmp	.+2      	; 0x35f0 <Icusw_enuInit+0xf4>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    35ee:	00 00       	nop
			break;
		}


	}
	Gie_enuEnableGlobalInterrupt();
    35f0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <Gie_enuEnableGlobalInterrupt>

	return Loc_enuIcuswStatus;
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	df 91       	pop	r29
    3600:	cf 91       	pop	r28
    3602:	08 95       	ret

00003604 <Icusw_enuDeint>:

Icusw_StatusErrorType Icusw_enuDeint(Icusw_ConfigType* Address_Icusw ){
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	00 d0       	rcall	.+0      	; 0x360a <Icusw_enuDeint+0x6>
    360a:	1f 92       	push	r1
    360c:	cd b7       	in	r28, 0x3d	; 61
    360e:	de b7       	in	r29, 0x3e	; 62
    3610:	9b 83       	std	Y+3, r25	; 0x03
    3612:	8a 83       	std	Y+2, r24	; 0x02
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    3614:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw){
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	9b 81       	ldd	r25, Y+3	; 0x03
    361a:	89 2b       	or	r24, r25
    361c:	11 f4       	brne	.+4      	; 0x3622 <Icusw_enuDeint+0x1e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	89 83       	std	Y+1, r24	; 0x01
	}
	else{

	}

	return Loc_enuIcuswStatus;
    3622:	89 81       	ldd	r24, Y+1	; 0x01
}
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	0f 90       	pop	r0
    362a:	df 91       	pop	r29
    362c:	cf 91       	pop	r28
    362e:	08 95       	ret

00003630 <Icusw_enuGetOnTimeMilliSeconds>:
Icusw_StatusErrorType Icusw_enuGetOnTimeMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_OnTime){
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	00 d0       	rcall	.+0      	; 0x3636 <Icusw_enuGetOnTimeMilliSeconds+0x6>
    3636:	00 d0       	rcall	.+0      	; 0x3638 <Icusw_enuGetOnTimeMilliSeconds+0x8>
    3638:	1f 92       	push	r1
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	9b 83       	std	Y+3, r25	; 0x03
    3640:	8a 83       	std	Y+2, r24	; 0x02
    3642:	7d 83       	std	Y+5, r23	; 0x05
    3644:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    3646:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw ||NULL == Address_OnTime ){
    3648:	8a 81       	ldd	r24, Y+2	; 0x02
    364a:	9b 81       	ldd	r25, Y+3	; 0x03
    364c:	89 2b       	or	r24, r25
    364e:	21 f0       	breq	.+8      	; 0x3658 <Icusw_enuGetOnTimeMilliSeconds+0x28>
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	9d 81       	ldd	r25, Y+5	; 0x05
    3654:	89 2b       	or	r24, r25
    3656:	19 f4       	brne	.+6      	; 0x365e <Icusw_enuGetOnTimeMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    3658:	82 e0       	ldi	r24, 0x02	; 2
    365a:	89 83       	std	Y+1, r24	; 0x01
    365c:	0f c0       	rjmp	.+30     	; 0x367c <Icusw_enuGetOnTimeMilliSeconds+0x4c>
	}
	else{

		*Address_OnTime = Global_StaticU32OnTime;
    365e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Global_StaticU32OnTime>
    3662:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Global_StaticU32OnTime+0x1>
    3666:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <Global_StaticU32OnTime+0x2>
    366a:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <Global_StaticU32OnTime+0x3>
    366e:	2c 81       	ldd	r18, Y+4	; 0x04
    3670:	3d 81       	ldd	r19, Y+5	; 0x05
    3672:	f9 01       	movw	r30, r18
    3674:	80 83       	st	Z, r24
    3676:	91 83       	std	Z+1, r25	; 0x01
    3678:	a2 83       	std	Z+2, r26	; 0x02
    367a:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    367c:	89 81       	ldd	r24, Y+1	; 0x01
}
    367e:	0f 90       	pop	r0
    3680:	0f 90       	pop	r0
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	df 91       	pop	r29
    368a:	cf 91       	pop	r28
    368c:	08 95       	ret

0000368e <Icusw_enuGetTotalTimeMilliSeconds>:

Icusw_StatusErrorType Icusw_enuGetTotalTimeMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_TotalTime){
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	00 d0       	rcall	.+0      	; 0x3694 <Icusw_enuGetTotalTimeMilliSeconds+0x6>
    3694:	00 d0       	rcall	.+0      	; 0x3696 <Icusw_enuGetTotalTimeMilliSeconds+0x8>
    3696:	1f 92       	push	r1
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	9b 83       	std	Y+3, r25	; 0x03
    369e:	8a 83       	std	Y+2, r24	; 0x02
    36a0:	7d 83       	std	Y+5, r23	; 0x05
    36a2:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    36a4:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw||NULL == Address_TotalTime ){
    36a6:	8a 81       	ldd	r24, Y+2	; 0x02
    36a8:	9b 81       	ldd	r25, Y+3	; 0x03
    36aa:	89 2b       	or	r24, r25
    36ac:	21 f0       	breq	.+8      	; 0x36b6 <Icusw_enuGetTotalTimeMilliSeconds+0x28>
    36ae:	8c 81       	ldd	r24, Y+4	; 0x04
    36b0:	9d 81       	ldd	r25, Y+5	; 0x05
    36b2:	89 2b       	or	r24, r25
    36b4:	19 f4       	brne	.+6      	; 0x36bc <Icusw_enuGetTotalTimeMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    36b6:	82 e0       	ldi	r24, 0x02	; 2
    36b8:	89 83       	std	Y+1, r24	; 0x01
    36ba:	0f c0       	rjmp	.+30     	; 0x36da <Icusw_enuGetTotalTimeMilliSeconds+0x4c>
	}
	else{
		*Address_TotalTime = Global_StaticU32TotalTime;
    36bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Global_StaticU32TotalTime>
    36c0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Global_StaticU32TotalTime+0x1>
    36c4:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <Global_StaticU32TotalTime+0x2>
    36c8:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <Global_StaticU32TotalTime+0x3>
    36cc:	2c 81       	ldd	r18, Y+4	; 0x04
    36ce:	3d 81       	ldd	r19, Y+5	; 0x05
    36d0:	f9 01       	movw	r30, r18
    36d2:	80 83       	st	Z, r24
    36d4:	91 83       	std	Z+1, r25	; 0x01
    36d6:	a2 83       	std	Z+2, r26	; 0x02
    36d8:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    36da:	89 81       	ldd	r24, Y+1	; 0x01
}
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	08 95       	ret

000036ec <Icusw_enuGetDutyCycleMilliSeconds>:

Icusw_StatusErrorType Icusw_enuGetDutyCycleMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_DutyTime){
    36ec:	cf 93       	push	r28
    36ee:	df 93       	push	r29
    36f0:	00 d0       	rcall	.+0      	; 0x36f2 <Icusw_enuGetDutyCycleMilliSeconds+0x6>
    36f2:	00 d0       	rcall	.+0      	; 0x36f4 <Icusw_enuGetDutyCycleMilliSeconds+0x8>
    36f4:	1f 92       	push	r1
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	9b 83       	std	Y+3, r25	; 0x03
    36fc:	8a 83       	std	Y+2, r24	; 0x02
    36fe:	7d 83       	std	Y+5, r23	; 0x05
    3700:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    3702:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw ||NULL ==Address_DutyTime){
    3704:	8a 81       	ldd	r24, Y+2	; 0x02
    3706:	9b 81       	ldd	r25, Y+3	; 0x03
    3708:	89 2b       	or	r24, r25
    370a:	21 f0       	breq	.+8      	; 0x3714 <Icusw_enuGetDutyCycleMilliSeconds+0x28>
    370c:	8c 81       	ldd	r24, Y+4	; 0x04
    370e:	9d 81       	ldd	r25, Y+5	; 0x05
    3710:	89 2b       	or	r24, r25
    3712:	19 f4       	brne	.+6      	; 0x371a <Icusw_enuGetDutyCycleMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    3714:	82 e0       	ldi	r24, 0x02	; 2
    3716:	89 83       	std	Y+1, r24	; 0x01
    3718:	0f c0       	rjmp	.+30     	; 0x3738 <Icusw_enuGetDutyCycleMilliSeconds+0x4c>
	}
	else{
		*Address_DutyTime = Global_StaticU32DutyTime;
    371a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Global_StaticU32DutyTime>
    371e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Global_StaticU32DutyTime+0x1>
    3722:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <Global_StaticU32DutyTime+0x2>
    3726:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <Global_StaticU32DutyTime+0x3>
    372a:	2c 81       	ldd	r18, Y+4	; 0x04
    372c:	3d 81       	ldd	r19, Y+5	; 0x05
    372e:	f9 01       	movw	r30, r18
    3730:	80 83       	st	Z, r24
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	a2 83       	std	Z+2, r26	; 0x02
    3736:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    3738:	89 81       	ldd	r24, Y+1	; 0x01
}
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	08 95       	ret

0000374a <Timer_voidTimerOverflowIsr>:


/************************************Static implementation ************************/

void Timer_voidTimerOverflowIsr(void){
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	cd b7       	in	r28, 0x3d	; 61
    3750:	de b7       	in	r29, 0x3e	; 62
	Global_StaticU32OverflowCounter++;
    3752:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Global_StaticU32OverflowCounter>
    3756:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Global_StaticU32OverflowCounter+0x1>
    375a:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <Global_StaticU32OverflowCounter+0x2>
    375e:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <Global_StaticU32OverflowCounter+0x3>
    3762:	01 96       	adiw	r24, 0x01	; 1
    3764:	a1 1d       	adc	r26, r1
    3766:	b1 1d       	adc	r27, r1
    3768:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Global_StaticU32OverflowCounter>
    376c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <Global_StaticU32OverflowCounter+0x1>
    3770:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <Global_StaticU32OverflowCounter+0x2>
    3774:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <Global_StaticU32OverflowCounter+0x3>

}
    3778:	00 00       	nop
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	08 95       	ret

00003780 <Icusw_voidINT0Isr>:



void Icusw_voidINT0Isr(void){
    3780:	cf 92       	push	r12
    3782:	df 92       	push	r13
    3784:	ef 92       	push	r14
    3786:	ff 92       	push	r15
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62

	static u16 Loc_u32OnTicks = ZERO_VALUE;
	static u16 Loc_u32TotalTicks = ZERO_VALUE;

	// first edge = Rising
	if(Loc_u8Counter == ZERO_VALUE){
    3790:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Loc_u8Counter.1783>
    3794:	88 23       	and	r24, r24
    3796:	89 f5       	brne	.+98     	; 0x37fa <Icusw_voidINT0Isr+0x7a>
		Loc_u8Counter++;
    3798:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Loc_u8Counter.1783>
    379c:	8f 5f       	subi	r24, 0xFF	; 255
    379e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Loc_u8Counter.1783>
		Global_StaticU32OverflowCounter = ZERO_VALUE;
    37a2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Global_StaticU32OverflowCounter>
    37a6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Global_StaticU32OverflowCounter+0x1>
    37aa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Global_StaticU32OverflowCounter+0x2>
    37ae:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Global_StaticU32OverflowCounter+0x3>
		 Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);
    37b2:	62 e0       	ldi	r22, 0x02	; 2
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	0e 94 46 0b 	call	0x168c	; 0x168c <Exti_enuEnable>

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    37ba:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Global_StaticINTxWhichTimer>
    37be:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Global_StaticINTxWhichTimer+0x1>
    37c2:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <Global_StaticINTxWhichTimer+0x2>
    37c6:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <Global_StaticINTxWhichTimer+0x3>
    37ca:	81 30       	cpi	r24, 0x01	; 1
    37cc:	91 05       	cpc	r25, r1
    37ce:	a1 05       	cpc	r26, r1
    37d0:	b1 05       	cpc	r27, r1
    37d2:	09 f4       	brne	.+2      	; 0x37d6 <Icusw_voidINT0Isr+0x56>
    37d4:	5e c1       	rjmp	.+700    	; 0x3a92 <Icusw_voidINT0Isr+0x312>
    37d6:	81 30       	cpi	r24, 0x01	; 1
    37d8:	91 05       	cpc	r25, r1
    37da:	a1 05       	cpc	r26, r1
    37dc:	b1 05       	cpc	r27, r1
    37de:	30 f0       	brcs	.+12     	; 0x37ec <Icusw_voidINT0Isr+0x6c>
    37e0:	02 97       	sbiw	r24, 0x02	; 2
    37e2:	a1 05       	cpc	r26, r1
    37e4:	b1 05       	cpc	r27, r1
    37e6:	09 f4       	brne	.+2      	; 0x37ea <Icusw_voidINT0Isr+0x6a>
    37e8:	56 c1       	rjmp	.+684    	; 0x3a96 <Icusw_voidINT0Isr+0x316>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    37ea:	5a c1       	rjmp	.+692    	; 0x3aa0 <Icusw_voidINT0Isr+0x320>
		 Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16FirstTicks);
    37ec:	60 e2       	ldi	r22, 0x20	; 32
    37ee:	71 e0       	ldi	r23, 0x01	; 1
    37f0:	81 ea       	ldi	r24, 0xA1	; 161
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0e 94 93 06 	call	0xd26	; 0xd26 <Timer0_enuGetTimeElapsed>

			break;
    37f8:	53 c1       	rjmp	.+678    	; 0x3aa0 <Icusw_voidINT0Isr+0x320>
		}


	}

	else if(Loc_u8Counter == ONE_VALUE){
    37fa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Loc_u8Counter.1783>
    37fe:	81 30       	cpi	r24, 0x01	; 1
    3800:	09 f0       	breq	.+2      	; 0x3804 <Icusw_voidINT0Isr+0x84>
    3802:	49 c0       	rjmp	.+146    	; 0x3896 <Icusw_voidINT0Isr+0x116>

		Loc_u8Counter++;
    3804:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Loc_u8Counter.1783>
    3808:	8f 5f       	subi	r24, 0xFF	; 255
    380a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Loc_u8Counter.1783>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
    380e:	63 e0       	ldi	r22, 0x03	; 3
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	0e 94 46 0b 	call	0x168c	; 0x168c <Exti_enuEnable>
		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    3816:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Global_StaticINTxWhichTimer>
    381a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Global_StaticINTxWhichTimer+0x1>
    381e:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <Global_StaticINTxWhichTimer+0x2>
    3822:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <Global_StaticINTxWhichTimer+0x3>
    3826:	81 30       	cpi	r24, 0x01	; 1
    3828:	91 05       	cpc	r25, r1
    382a:	a1 05       	cpc	r26, r1
    382c:	b1 05       	cpc	r27, r1
    382e:	09 f4       	brne	.+2      	; 0x3832 <Icusw_voidINT0Isr+0xb2>
    3830:	34 c1       	rjmp	.+616    	; 0x3a9a <Icusw_voidINT0Isr+0x31a>
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	91 05       	cpc	r25, r1
    3836:	a1 05       	cpc	r26, r1
    3838:	b1 05       	cpc	r27, r1
    383a:	30 f0       	brcs	.+12     	; 0x3848 <Icusw_voidINT0Isr+0xc8>
    383c:	02 97       	sbiw	r24, 0x02	; 2
    383e:	a1 05       	cpc	r26, r1
    3840:	b1 05       	cpc	r27, r1
    3842:	09 f4       	brne	.+2      	; 0x3846 <Icusw_voidINT0Isr+0xc6>
    3844:	2c c1       	rjmp	.+600    	; 0x3a9e <Icusw_voidINT0Isr+0x31e>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    3846:	2c c1       	rjmp	.+600    	; 0x3aa0 <Icusw_voidINT0Isr+0x320>
		Loc_u8Counter++;
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16SecondTicks);
    3848:	62 e2       	ldi	r22, 0x22	; 34
    384a:	71 e0       	ldi	r23, 0x01	; 1
    384c:	81 ea       	ldi	r24, 0xA1	; 161
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	0e 94 93 06 	call	0xd26	; 0xd26 <Timer0_enuGetTimeElapsed>
			Loc_u32OnTicks = Loc_u16SecondTicks + (Global_StaticU32OverflowCounter*255)-Loc_u16FirstTicks;
    3854:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Global_StaticU32OverflowCounter>
    3858:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Global_StaticU32OverflowCounter+0x1>
    385c:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <Global_StaticU32OverflowCounter+0x2>
    3860:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <Global_StaticU32OverflowCounter+0x3>
    3864:	4f ef       	ldi	r20, 0xFF	; 255
    3866:	48 9f       	mul	r20, r24
    3868:	90 01       	movw	r18, r0
    386a:	49 9f       	mul	r20, r25
    386c:	30 0d       	add	r19, r0
    386e:	11 24       	eor	r1, r1
    3870:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Loc_u16SecondTicks.1785>
    3874:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Loc_u16SecondTicks.1785+0x1>
    3878:	28 0f       	add	r18, r24
    387a:	39 1f       	adc	r19, r25
    387c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Loc_u16FirstTicks.1784>
    3880:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Loc_u16FirstTicks.1784+0x1>
    3884:	a9 01       	movw	r20, r18
    3886:	48 1b       	sub	r20, r24
    3888:	59 0b       	sbc	r21, r25
    388a:	ca 01       	movw	r24, r20
    388c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <Loc_u32OnTicks.1787+0x1>
    3890:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Loc_u32OnTicks.1787>



			break;
    3894:	05 c1       	rjmp	.+522    	; 0x3aa0 <Icusw_voidINT0Isr+0x320>
		default:
			break;
		}
	}

	else if(Loc_u8Counter == TWO_VALUE){
    3896:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Loc_u8Counter.1783>
    389a:	82 30       	cpi	r24, 0x02	; 2
    389c:	09 f0       	breq	.+2      	; 0x38a0 <Icusw_voidINT0Isr+0x120>
    389e:	00 c1       	rjmp	.+512    	; 0x3aa0 <Icusw_voidINT0Isr+0x320>
		Loc_u8Counter = ZERO_VALUE;
    38a0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Loc_u8Counter.1783>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);
    38a4:	62 e0       	ldi	r22, 0x02	; 2
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	0e 94 46 0b 	call	0x168c	; 0x168c <Exti_enuEnable>

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    38ac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Global_StaticINTxWhichTimer>
    38b0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Global_StaticINTxWhichTimer+0x1>
    38b4:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <Global_StaticINTxWhichTimer+0x2>
    38b8:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <Global_StaticINTxWhichTimer+0x3>
    38bc:	81 30       	cpi	r24, 0x01	; 1
    38be:	91 05       	cpc	r25, r1
    38c0:	a1 05       	cpc	r26, r1
    38c2:	b1 05       	cpc	r27, r1
    38c4:	89 f1       	breq	.+98     	; 0x3928 <Icusw_voidINT0Isr+0x1a8>
    38c6:	81 30       	cpi	r24, 0x01	; 1
    38c8:	91 05       	cpc	r25, r1
    38ca:	a1 05       	cpc	r26, r1
    38cc:	b1 05       	cpc	r27, r1
    38ce:	28 f0       	brcs	.+10     	; 0x38da <Icusw_voidINT0Isr+0x15a>
    38d0:	02 97       	sbiw	r24, 0x02	; 2
    38d2:	a1 05       	cpc	r26, r1
    38d4:	b1 05       	cpc	r27, r1
    38d6:	51 f1       	breq	.+84     	; 0x392c <Icusw_voidINT0Isr+0x1ac>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    38d8:	2a c0       	rjmp	.+84     	; 0x392e <Icusw_voidINT0Isr+0x1ae>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16ThirdTicks);
    38da:	66 e2       	ldi	r22, 0x26	; 38
    38dc:	71 e0       	ldi	r23, 0x01	; 1
    38de:	81 ea       	ldi	r24, 0xA1	; 161
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	0e 94 93 06 	call	0xd26	; 0xd26 <Timer0_enuGetTimeElapsed>
			Loc_u32TotalTicks = Loc_u16ThirdTicks + (Global_StaticU32OverflowCounter*255)-Loc_u16FirstTicks;
    38e6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Global_StaticU32OverflowCounter>
    38ea:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Global_StaticU32OverflowCounter+0x1>
    38ee:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <Global_StaticU32OverflowCounter+0x2>
    38f2:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <Global_StaticU32OverflowCounter+0x3>
    38f6:	4f ef       	ldi	r20, 0xFF	; 255
    38f8:	48 9f       	mul	r20, r24
    38fa:	90 01       	movw	r18, r0
    38fc:	49 9f       	mul	r20, r25
    38fe:	30 0d       	add	r19, r0
    3900:	11 24       	eor	r1, r1
    3902:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Loc_u16ThirdTicks.1786>
    3906:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <Loc_u16ThirdTicks.1786+0x1>
    390a:	28 0f       	add	r18, r24
    390c:	39 1f       	adc	r19, r25
    390e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Loc_u16FirstTicks.1784>
    3912:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <Loc_u16FirstTicks.1784+0x1>
    3916:	a9 01       	movw	r20, r18
    3918:	48 1b       	sub	r20, r24
    391a:	59 0b       	sbc	r21, r25
    391c:	ca 01       	movw	r24, r20
    391e:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <Loc_u32TotalTicks.1788+0x1>
    3922:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Loc_u32TotalTicks.1788>


			break;
    3926:	03 c0       	rjmp	.+6      	; 0x392e <Icusw_voidINT0Isr+0x1ae>
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    3928:	00 00       	nop
    392a:	01 c0       	rjmp	.+2      	; 0x392e <Icusw_voidINT0Isr+0x1ae>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    392c:	00 00       	nop

		default:
			break;
		}
		if(Global_StaticU32TotalTime > Global_StaticU32OnTime){
    392e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <Global_StaticU32TotalTime>
    3932:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <Global_StaticU32TotalTime+0x1>
    3936:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <Global_StaticU32TotalTime+0x2>
    393a:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <Global_StaticU32TotalTime+0x3>
    393e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Global_StaticU32OnTime>
    3942:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Global_StaticU32OnTime+0x1>
    3946:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <Global_StaticU32OnTime+0x2>
    394a:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <Global_StaticU32OnTime+0x3>
    394e:	82 17       	cp	r24, r18
    3950:	93 07       	cpc	r25, r19
    3952:	a4 07       	cpc	r26, r20
    3954:	b5 07       	cpc	r27, r21
    3956:	18 f4       	brcc	.+6      	; 0x395e <Icusw_voidINT0Isr+0x1de>
			Dio_enuFlipChannel(DIO_PINA6_CHANNEL6);
    3958:	86 e0       	ldi	r24, 0x06	; 6
    395a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <Dio_enuFlipChannel>
		}
		Global_StaticU32TotalTime = Loc_u32TotalTicks*ICUSW_16M_PRESCALER_DIV_1024_TIMER0;
    395e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Loc_u32TotalTicks.1788>
    3962:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <Loc_u32TotalTicks.1788+0x1>
    3966:	cc 01       	movw	r24, r24
    3968:	a0 e0       	ldi	r26, 0x00	; 0
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	bc 01       	movw	r22, r24
    396e:	cd 01       	movw	r24, r26
    3970:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__floatunsisf>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	2f e6       	ldi	r18, 0x6F	; 111
    397a:	32 e1       	ldi	r19, 0x12	; 18
    397c:	43 e8       	ldi	r20, 0x83	; 131
    397e:	5d e3       	ldi	r21, 0x3D	; 61
    3980:	bc 01       	movw	r22, r24
    3982:	cd 01       	movw	r24, r26
    3984:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	bc 01       	movw	r22, r24
    398e:	cd 01       	movw	r24, r26
    3990:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Global_StaticU32TotalTime>
    399c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <Global_StaticU32TotalTime+0x1>
    39a0:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <Global_StaticU32TotalTime+0x2>
    39a4:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <Global_StaticU32TotalTime+0x3>
		Global_StaticU32OnTime = Loc_u32OnTicks*ICUSW_16M_PRESCALER_DIV_1024_TIMER0 ;
    39a8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Loc_u32OnTicks.1787>
    39ac:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <Loc_u32OnTicks.1787+0x1>
    39b0:	cc 01       	movw	r24, r24
    39b2:	a0 e0       	ldi	r26, 0x00	; 0
    39b4:	b0 e0       	ldi	r27, 0x00	; 0
    39b6:	bc 01       	movw	r22, r24
    39b8:	cd 01       	movw	r24, r26
    39ba:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__floatunsisf>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	2f e6       	ldi	r18, 0x6F	; 111
    39c4:	32 e1       	ldi	r19, 0x12	; 18
    39c6:	43 e8       	ldi	r20, 0x83	; 131
    39c8:	5d e3       	ldi	r21, 0x3D	; 61
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	bc 01       	movw	r22, r24
    39d8:	cd 01       	movw	r24, r26
    39da:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Global_StaticU32OnTime>
    39e6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <Global_StaticU32OnTime+0x1>
    39ea:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <Global_StaticU32OnTime+0x2>
    39ee:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <Global_StaticU32OnTime+0x3>
		Global_StaticU32DutyTime = ((f32)Global_StaticU32OnTime /Global_StaticU32TotalTime)*100;
    39f2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Global_StaticU32OnTime>
    39f6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Global_StaticU32OnTime+0x1>
    39fa:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <Global_StaticU32OnTime+0x2>
    39fe:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <Global_StaticU32OnTime+0x3>
    3a02:	bc 01       	movw	r22, r24
    3a04:	cd 01       	movw	r24, r26
    3a06:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__floatunsisf>
    3a0a:	6b 01       	movw	r12, r22
    3a0c:	7c 01       	movw	r14, r24
    3a0e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Global_StaticU32TotalTime>
    3a12:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Global_StaticU32TotalTime+0x1>
    3a16:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <Global_StaticU32TotalTime+0x2>
    3a1a:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <Global_StaticU32TotalTime+0x3>
    3a1e:	bc 01       	movw	r22, r24
    3a20:	cd 01       	movw	r24, r26
    3a22:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <__floatunsisf>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	9c 01       	movw	r18, r24
    3a2c:	ad 01       	movw	r20, r26
    3a2e:	c7 01       	movw	r24, r14
    3a30:	b6 01       	movw	r22, r12
    3a32:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__divsf3>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	48 ec       	ldi	r20, 0xC8	; 200
    3a40:	52 e4       	ldi	r21, 0x42	; 66
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	bc 01       	movw	r22, r24
    3a50:	cd 01       	movw	r24, r26
    3a52:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Global_StaticU32DutyTime>
    3a5e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <Global_StaticU32DutyTime+0x1>
    3a62:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <Global_StaticU32DutyTime+0x2>
    3a66:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <Global_StaticU32DutyTime+0x3>

		Global_StaticU32OverflowCounter = ZERO_VALUE;
    3a6a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Global_StaticU32OverflowCounter>
    3a6e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Global_StaticU32OverflowCounter+0x1>
    3a72:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Global_StaticU32OverflowCounter+0x2>
    3a76:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <Global_StaticU32OverflowCounter+0x3>
		Loc_u8Counter = ONE_VALUE;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Loc_u8Counter.1783>
		Loc_u16FirstTicks =Loc_u16ThirdTicks;
    3a80:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Loc_u16ThirdTicks.1786>
    3a84:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <Loc_u16ThirdTicks.1786+0x1>
    3a88:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <Loc_u16FirstTicks.1784+0x1>
    3a8c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Loc_u16FirstTicks.1784>



	}

}
    3a90:	07 c0       	rjmp	.+14     	; 0x3aa0 <Icusw_voidINT0Isr+0x320>
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16FirstTicks);

			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    3a92:	00 00       	nop
    3a94:	05 c0       	rjmp	.+10     	; 0x3aa0 <Icusw_voidINT0Isr+0x320>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    3a96:	00 00       	nop
    3a98:	03 c0       	rjmp	.+6      	; 0x3aa0 <Icusw_voidINT0Isr+0x320>


			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    3a9a:	00 00       	nop
    3a9c:	01 c0       	rjmp	.+2      	; 0x3aa0 <Icusw_voidINT0Isr+0x320>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    3a9e:	00 00       	nop



	}

}
    3aa0:	00 00       	nop
    3aa2:	df 91       	pop	r29
    3aa4:	cf 91       	pop	r28
    3aa6:	ff 90       	pop	r15
    3aa8:	ef 90       	pop	r14
    3aaa:	df 90       	pop	r13
    3aac:	cf 90       	pop	r12
    3aae:	08 95       	ret

00003ab0 <Icusw_voidINT1Isr>:


void Icusw_voidINT1Isr(void){
    3ab0:	cf 93       	push	r28
    3ab2:	df 93       	push	r29
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62

}
    3ab8:	00 00       	nop
    3aba:	df 91       	pop	r29
    3abc:	cf 91       	pop	r28
    3abe:	08 95       	ret

00003ac0 <Icusw_voidINT2Isr>:
void Icusw_voidINT2Isr(void){
    3ac0:	cf 93       	push	r28
    3ac2:	df 93       	push	r29
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62

}
    3ac8:	00 00       	nop
    3aca:	df 91       	pop	r29
    3acc:	cf 91       	pop	r28
    3ace:	08 95       	ret

00003ad0 <Button_enuRead>:



/********************************** Software Interfaces Declarations *******************/

Button_StatusErrorType Button_enuRead(const Button_ConfigType *Address_Button,Button_PressStatusType* Address_State ){
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	00 d0       	rcall	.+0      	; 0x3ad6 <Button_enuRead+0x6>
    3ad6:	00 d0       	rcall	.+0      	; 0x3ad8 <Button_enuRead+0x8>
    3ad8:	00 d0       	rcall	.+0      	; 0x3ada <Button_enuRead+0xa>
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	9c 83       	std	Y+4, r25	; 0x04
    3ae0:	8b 83       	std	Y+3, r24	; 0x03
    3ae2:	7e 83       	std	Y+6, r23	; 0x06
    3ae4:	6d 83       	std	Y+5, r22	; 0x05

	Button_StatusErrorType Loc_enuStatus = BUTTON_STATUS_OK;
    3ae6:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    3ae8:	1a 82       	std	Y+2, r1	; 0x02
	if( NULL == Address_Button || NULL == Address_State ){
    3aea:	8b 81       	ldd	r24, Y+3	; 0x03
    3aec:	9c 81       	ldd	r25, Y+4	; 0x04
    3aee:	89 2b       	or	r24, r25
    3af0:	21 f0       	breq	.+8      	; 0x3afa <Button_enuRead+0x2a>
    3af2:	8d 81       	ldd	r24, Y+5	; 0x05
    3af4:	9e 81       	ldd	r25, Y+6	; 0x06
    3af6:	89 2b       	or	r24, r25
    3af8:	19 f4       	brne	.+6      	; 0x3b00 <Button_enuRead+0x30>
		Loc_enuStatus = BUTTON_STATUS_NULL_POINTER_ADDRESS;
    3afa:	82 e0       	ldi	r24, 0x02	; 2
    3afc:	89 83       	std	Y+1, r24	; 0x01
    3afe:	31 c0       	rjmp	.+98     	; 0x3b62 <Button_enuRead+0x92>

	}
	else{
	        switch(Address_Button->button_connection){
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	9c 81       	ldd	r25, Y+4	; 0x04
    3b04:	fc 01       	movw	r30, r24
    3b06:	81 81       	ldd	r24, Z+1	; 0x01
    3b08:	88 2f       	mov	r24, r24
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	00 97       	sbiw	r24, 0x00	; 0
    3b0e:	71 f0       	breq	.+28     	; 0x3b2c <Button_enuRead+0x5c>
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	29 f5       	brne	.+74     	; 0x3b5e <Button_enuRead+0x8e>

	            case BUTTON_CONNECTION_PULL_DOWN:
	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    3b14:	8b 81       	ldd	r24, Y+3	; 0x03
    3b16:	9c 81       	ldd	r25, Y+4	; 0x04
    3b18:	fc 01       	movw	r30, r24
    3b1a:	20 81       	ld	r18, Z
    3b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b20:	bc 01       	movw	r22, r24
    3b22:	82 2f       	mov	r24, r18
    3b24:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Dio_enuReadChannel>
    3b28:	8a 83       	std	Y+2, r24	; 0x02
	                break;
    3b2a:	1b c0       	rjmp	.+54     	; 0x3b62 <Button_enuRead+0x92>
	            case BUTTON_CONNECTION_PULL_UP:

	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b30:	fc 01       	movw	r30, r24
    3b32:	20 81       	ld	r18, Z
    3b34:	8d 81       	ldd	r24, Y+5	; 0x05
    3b36:	9e 81       	ldd	r25, Y+6	; 0x06
    3b38:	bc 01       	movw	r22, r24
    3b3a:	82 2f       	mov	r24, r18
    3b3c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <Dio_enuReadChannel>
    3b40:	8a 83       	std	Y+2, r24	; 0x02
	                *Address_State = !(*Address_State);
    3b42:	8d 81       	ldd	r24, Y+5	; 0x05
    3b44:	9e 81       	ldd	r25, Y+6	; 0x06
    3b46:	fc 01       	movw	r30, r24
    3b48:	90 81       	ld	r25, Z
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	99 23       	and	r25, r25
    3b4e:	09 f0       	breq	.+2      	; 0x3b52 <Button_enuRead+0x82>
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	28 2f       	mov	r18, r24
    3b54:	8d 81       	ldd	r24, Y+5	; 0x05
    3b56:	9e 81       	ldd	r25, Y+6	; 0x06
    3b58:	fc 01       	movw	r30, r24
    3b5a:	20 83       	st	Z, r18
	                break;
    3b5c:	02 c0       	rjmp	.+4      	; 0x3b62 <Button_enuRead+0x92>

	            default:
	                Loc_enuStatus = BUTTON_STATUS_FAIL;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	89 83       	std	Y+1, r24	; 0x01
	    }




	return Loc_enuStatus;
    3b62:	89 81       	ldd	r24, Y+1	; 0x01

}
    3b64:	26 96       	adiw	r28, 0x06	; 6
    3b66:	0f b6       	in	r0, 0x3f	; 63
    3b68:	f8 94       	cli
    3b6a:	de bf       	out	0x3e, r29	; 62
    3b6c:	0f be       	out	0x3f, r0	; 63
    3b6e:	cd bf       	out	0x3d, r28	; 61
    3b70:	df 91       	pop	r29
    3b72:	cf 91       	pop	r28
    3b74:	08 95       	ret

00003b76 <main>:
};


extern Lcd_4bitType Lcd;

int main(void){
    3b76:	cf 93       	push	r28
    3b78:	df 93       	push	r29
    3b7a:	cd b7       	in	r28, 0x3d	; 61
    3b7c:	de b7       	in	r29, 0x3e	; 62
    3b7e:	6a 97       	sbiw	r28, 0x1a	; 26
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	cd bf       	out	0x3d, r28	; 61

	Port_voidInit();
    3b8a:	0e 94 cd 08 	call	0x119a	; 0x119a <Port_voidInit>
	Icusw_enuInit(&Icusw0);
    3b8e:	8a e2       	ldi	r24, 0x2A	; 42
    3b90:	91 e0       	ldi	r25, 0x01	; 1
    3b92:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <Icusw_enuInit>
	Lcd_4bit_enuInit(&Lcd);
    3b96:	80 e9       	ldi	r24, 0x90	; 144
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <Lcd_4bit_enuInit>

	u32 Loc_u32Dutycycle = 0;
    3b9e:	1f 86       	std	Y+15, r1	; 0x0f
    3ba0:	18 8a       	std	Y+16, r1	; 0x10
    3ba2:	19 8a       	std	Y+17, r1	; 0x11
    3ba4:	1a 8a       	std	Y+18, r1	; 0x12
	u32 Loc_u32OnTime = 0;
    3ba6:	1b 8a       	std	Y+19, r1	; 0x13
    3ba8:	1c 8a       	std	Y+20, r1	; 0x14
    3baa:	1d 8a       	std	Y+21, r1	; 0x15
    3bac:	1e 8a       	std	Y+22, r1	; 0x16
	u32 Loc_u32TotalTime = 0;
    3bae:	1f 8a       	std	Y+23, r1	; 0x17
    3bb0:	18 8e       	std	Y+24, r1	; 0x18
    3bb2:	19 8e       	std	Y+25, r1	; 0x19
    3bb4:	1a 8e       	std	Y+26, r1	; 0x1a

	while(1){

		Icusw_enuGetOnTimeMilliSeconds(&Icusw0,&Loc_u32OnTime );
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	43 96       	adiw	r24, 0x13	; 19
    3bba:	bc 01       	movw	r22, r24
    3bbc:	8a e2       	ldi	r24, 0x2A	; 42
    3bbe:	91 e0       	ldi	r25, 0x01	; 1
    3bc0:	0e 94 18 1b 	call	0x3630	; 0x3630 <Icusw_enuGetOnTimeMilliSeconds>

		Icusw_enuGetTotalTimeMilliSeconds(&Icusw0,&Loc_u32TotalTime );
    3bc4:	ce 01       	movw	r24, r28
    3bc6:	47 96       	adiw	r24, 0x17	; 23
    3bc8:	bc 01       	movw	r22, r24
    3bca:	8a e2       	ldi	r24, 0x2A	; 42
    3bcc:	91 e0       	ldi	r25, 0x01	; 1
    3bce:	0e 94 47 1b 	call	0x368e	; 0x368e <Icusw_enuGetTotalTimeMilliSeconds>

		Icusw_enuGetDutyCycleMilliSeconds(&Icusw0,&Loc_u32Dutycycle );
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	0f 96       	adiw	r24, 0x0f	; 15
    3bd6:	bc 01       	movw	r22, r24
    3bd8:	8a e2       	ldi	r24, 0x2A	; 42
    3bda:	91 e0       	ldi	r25, 0x01	; 1
    3bdc:	0e 94 76 1b 	call	0x36ec	; 0x36ec <Icusw_enuGetDutyCycleMilliSeconds>

		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "Total Time", LCD_ROW1, LCD_COL1);
    3be0:	21 e0       	ldi	r18, 0x01	; 1
    3be2:	41 e0       	ldi	r20, 0x01	; 1
    3be4:	69 eb       	ldi	r22, 0xB9	; 185
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	80 e9       	ldi	r24, 0x90	; 144
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Lcd_4bit_enuDisplayStringWithPosition>
		Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u32TotalTime);
    3bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    3bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    3bf4:	a9 8d       	ldd	r26, Y+25	; 0x19
    3bf6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3bf8:	ac 01       	movw	r20, r24
    3bfa:	bd 01       	movw	r22, r26
    3bfc:	80 e9       	ldi	r24, 0x90	; 144
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <Lcd_4bit_enuDisplayNumber>
		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "on Time", LCD_ROW2, LCD_COL1);
    3c04:	21 e0       	ldi	r18, 0x01	; 1
    3c06:	42 e0       	ldi	r20, 0x02	; 2
    3c08:	64 ec       	ldi	r22, 0xC4	; 196
    3c0a:	70 e0       	ldi	r23, 0x00	; 0
    3c0c:	80 e9       	ldi	r24, 0x90	; 144
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Lcd_4bit_enuDisplayStringWithPosition>

		Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u32OnTime);
    3c14:	8b 89       	ldd	r24, Y+19	; 0x13
    3c16:	9c 89       	ldd	r25, Y+20	; 0x14
    3c18:	ad 89       	ldd	r26, Y+21	; 0x15
    3c1a:	be 89       	ldd	r27, Y+22	; 0x16
    3c1c:	ac 01       	movw	r20, r24
    3c1e:	bd 01       	movw	r22, r26
    3c20:	80 e9       	ldi	r24, 0x90	; 144
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <Lcd_4bit_enuDisplayNumber>
		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "Duty Time", LCD_ROW3, LCD_COL1);
    3c28:	21 e0       	ldi	r18, 0x01	; 1
    3c2a:	43 e0       	ldi	r20, 0x03	; 3
    3c2c:	6c ec       	ldi	r22, 0xCC	; 204
    3c2e:	70 e0       	ldi	r23, 0x00	; 0
    3c30:	80 e9       	ldi	r24, 0x90	; 144
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Lcd_4bit_enuDisplayStringWithPosition>

		Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u32Dutycycle);
    3c38:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c3a:	98 89       	ldd	r25, Y+16	; 0x10
    3c3c:	a9 89       	ldd	r26, Y+17	; 0x11
    3c3e:	ba 89       	ldd	r27, Y+18	; 0x12
    3c40:	ac 01       	movw	r20, r24
    3c42:	bd 01       	movw	r22, r26
    3c44:	80 e9       	ldi	r24, 0x90	; 144
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <Lcd_4bit_enuDisplayNumber>
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	aa e7       	ldi	r26, 0x7A	; 122
    3c52:	b4 e4       	ldi	r27, 0x44	; 68
    3c54:	89 83       	std	Y+1, r24	; 0x01
    3c56:	9a 83       	std	Y+2, r25	; 0x02
    3c58:	ab 83       	std	Y+3, r26	; 0x03
    3c5a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	4a e7       	ldi	r20, 0x7A	; 122
    3c62:	55 e4       	ldi	r21, 0x45	; 69
    3c64:	69 81       	ldd	r22, Y+1	; 0x01
    3c66:	7a 81       	ldd	r23, Y+2	; 0x02
    3c68:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6c:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	8d 83       	std	Y+5, r24	; 0x05
    3c76:	9e 83       	std	Y+6, r25	; 0x06
    3c78:	af 83       	std	Y+7, r26	; 0x07
    3c7a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	40 e8       	ldi	r20, 0x80	; 128
    3c82:	5f e3       	ldi	r21, 0x3F	; 63
    3c84:	6d 81       	ldd	r22, Y+5	; 0x05
    3c86:	7e 81       	ldd	r23, Y+6	; 0x06
    3c88:	8f 81       	ldd	r24, Y+7	; 0x07
    3c8a:	98 85       	ldd	r25, Y+8	; 0x08
    3c8c:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__cmpsf2>
    3c90:	88 23       	and	r24, r24
    3c92:	2c f4       	brge	.+10     	; 0x3c9e <main+0x128>
		__ticks = 1;
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	9a 87       	std	Y+10, r25	; 0x0a
    3c9a:	89 87       	std	Y+9, r24	; 0x09
    3c9c:	3f c0       	rjmp	.+126    	; 0x3d1c <main+0x1a6>
	else if (__tmp > 65535)
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	3f ef       	ldi	r19, 0xFF	; 255
    3ca2:	4f e7       	ldi	r20, 0x7F	; 127
    3ca4:	57 e4       	ldi	r21, 0x47	; 71
    3ca6:	6d 81       	ldd	r22, Y+5	; 0x05
    3ca8:	7e 81       	ldd	r23, Y+6	; 0x06
    3caa:	8f 81       	ldd	r24, Y+7	; 0x07
    3cac:	98 85       	ldd	r25, Y+8	; 0x08
    3cae:	0e 94 8d 20 	call	0x411a	; 0x411a <__gesf2>
    3cb2:	18 16       	cp	r1, r24
    3cb4:	4c f5       	brge	.+82     	; 0x3d08 <main+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e2       	ldi	r20, 0x20	; 32
    3cbc:	51 e4       	ldi	r21, 0x41	; 65
    3cbe:	69 81       	ldd	r22, Y+1	; 0x01
    3cc0:	7a 81       	ldd	r23, Y+2	; 0x02
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc6:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
    3cca:	dc 01       	movw	r26, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	bc 01       	movw	r22, r24
    3cd0:	cd 01       	movw	r24, r26
    3cd2:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	9a 87       	std	Y+10, r25	; 0x0a
    3cdc:	89 87       	std	Y+9, r24	; 0x09
    3cde:	0f c0       	rjmp	.+30     	; 0x3cfe <main+0x188>
    3ce0:	80 e9       	ldi	r24, 0x90	; 144
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	9c 87       	std	Y+12, r25	; 0x0c
    3ce6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ce8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cea:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <main+0x176>
    3cf0:	9c 87       	std	Y+12, r25	; 0x0c
    3cf2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf4:	89 85       	ldd	r24, Y+9	; 0x09
    3cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf8:	01 97       	sbiw	r24, 0x01	; 1
    3cfa:	9a 87       	std	Y+10, r25	; 0x0a
    3cfc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cfe:	89 85       	ldd	r24, Y+9	; 0x09
    3d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d02:	89 2b       	or	r24, r25
    3d04:	69 f7       	brne	.-38     	; 0x3ce0 <main+0x16a>
    3d06:	14 c0       	rjmp	.+40     	; 0x3d30 <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d08:	6d 81       	ldd	r22, Y+5	; 0x05
    3d0a:	7e 81       	ldd	r23, Y+6	; 0x06
    3d0c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d0e:	98 85       	ldd	r25, Y+8	; 0x08
    3d10:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	9a 87       	std	Y+10, r25	; 0x0a
    3d1a:	89 87       	std	Y+9, r24	; 0x09
    3d1c:	89 85       	ldd	r24, Y+9	; 0x09
    3d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d20:	9e 87       	std	Y+14, r25	; 0x0e
    3d22:	8d 87       	std	Y+13, r24	; 0x0d
    3d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d28:	01 97       	sbiw	r24, 0x01	; 1
    3d2a:	f1 f7       	brne	.-4      	; 0x3d28 <main+0x1b2>
    3d2c:	9e 87       	std	Y+14, r25	; 0x0e
    3d2e:	8d 87       	std	Y+13, r24	; 0x0d

		_delay_ms(1000);


	}
    3d30:	42 cf       	rjmp	.-380    	; 0x3bb6 <main+0x40>

00003d32 <__tablejump2__>:
    3d32:	ee 0f       	add	r30, r30
    3d34:	ff 1f       	adc	r31, r31
    3d36:	05 90       	lpm	r0, Z+
    3d38:	f4 91       	lpm	r31, Z
    3d3a:	e0 2d       	mov	r30, r0
    3d3c:	09 94       	ijmp

00003d3e <__ashldi3>:
    3d3e:	0f 93       	push	r16
    3d40:	08 30       	cpi	r16, 0x08	; 8
    3d42:	90 f0       	brcs	.+36     	; 0x3d68 <__ashldi3+0x2a>
    3d44:	98 2f       	mov	r25, r24
    3d46:	87 2f       	mov	r24, r23
    3d48:	76 2f       	mov	r23, r22
    3d4a:	65 2f       	mov	r22, r21
    3d4c:	54 2f       	mov	r21, r20
    3d4e:	43 2f       	mov	r20, r19
    3d50:	32 2f       	mov	r19, r18
    3d52:	22 27       	eor	r18, r18
    3d54:	08 50       	subi	r16, 0x08	; 8
    3d56:	f4 cf       	rjmp	.-24     	; 0x3d40 <__ashldi3+0x2>
    3d58:	22 0f       	add	r18, r18
    3d5a:	33 1f       	adc	r19, r19
    3d5c:	44 1f       	adc	r20, r20
    3d5e:	55 1f       	adc	r21, r21
    3d60:	66 1f       	adc	r22, r22
    3d62:	77 1f       	adc	r23, r23
    3d64:	88 1f       	adc	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	0a 95       	dec	r16
    3d6a:	b2 f7       	brpl	.-20     	; 0x3d58 <__ashldi3+0x1a>
    3d6c:	0f 91       	pop	r16
    3d6e:	08 95       	ret

00003d70 <__adddi3>:
    3d70:	2a 0d       	add	r18, r10
    3d72:	3b 1d       	adc	r19, r11
    3d74:	4c 1d       	adc	r20, r12
    3d76:	5d 1d       	adc	r21, r13
    3d78:	6e 1d       	adc	r22, r14
    3d7a:	7f 1d       	adc	r23, r15
    3d7c:	80 1f       	adc	r24, r16
    3d7e:	91 1f       	adc	r25, r17
    3d80:	08 95       	ret

00003d82 <__subsf3>:
    3d82:	50 58       	subi	r21, 0x80	; 128

00003d84 <__addsf3>:
    3d84:	bb 27       	eor	r27, r27
    3d86:	aa 27       	eor	r26, r26
    3d88:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <__addsf3x>
    3d8c:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__fp_round>
    3d90:	0e 94 45 20 	call	0x408a	; 0x408a <__fp_pscA>
    3d94:	38 f0       	brcs	.+14     	; 0x3da4 <__addsf3+0x20>
    3d96:	0e 94 4c 20 	call	0x4098	; 0x4098 <__fp_pscB>
    3d9a:	20 f0       	brcs	.+8      	; 0x3da4 <__addsf3+0x20>
    3d9c:	39 f4       	brne	.+14     	; 0x3dac <__addsf3+0x28>
    3d9e:	9f 3f       	cpi	r25, 0xFF	; 255
    3da0:	19 f4       	brne	.+6      	; 0x3da8 <__addsf3+0x24>
    3da2:	26 f4       	brtc	.+8      	; 0x3dac <__addsf3+0x28>
    3da4:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__fp_nan>
    3da8:	0e f4       	brtc	.+2      	; 0x3dac <__addsf3+0x28>
    3daa:	e0 95       	com	r30
    3dac:	e7 fb       	bst	r30, 7
    3dae:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__fp_inf>

00003db2 <__addsf3x>:
    3db2:	e9 2f       	mov	r30, r25
    3db4:	0e 94 64 20 	call	0x40c8	; 0x40c8 <__fp_split3>
    3db8:	58 f3       	brcs	.-42     	; 0x3d90 <__addsf3+0xc>
    3dba:	ba 17       	cp	r27, r26
    3dbc:	62 07       	cpc	r22, r18
    3dbe:	73 07       	cpc	r23, r19
    3dc0:	84 07       	cpc	r24, r20
    3dc2:	95 07       	cpc	r25, r21
    3dc4:	20 f0       	brcs	.+8      	; 0x3dce <__addsf3x+0x1c>
    3dc6:	79 f4       	brne	.+30     	; 0x3de6 <__addsf3x+0x34>
    3dc8:	a6 f5       	brtc	.+104    	; 0x3e32 <__addsf3x+0x80>
    3dca:	0c 94 86 20 	jmp	0x410c	; 0x410c <__fp_zero>
    3dce:	0e f4       	brtc	.+2      	; 0x3dd2 <__addsf3x+0x20>
    3dd0:	e0 95       	com	r30
    3dd2:	0b 2e       	mov	r0, r27
    3dd4:	ba 2f       	mov	r27, r26
    3dd6:	a0 2d       	mov	r26, r0
    3dd8:	0b 01       	movw	r0, r22
    3dda:	b9 01       	movw	r22, r18
    3ddc:	90 01       	movw	r18, r0
    3dde:	0c 01       	movw	r0, r24
    3de0:	ca 01       	movw	r24, r20
    3de2:	a0 01       	movw	r20, r0
    3de4:	11 24       	eor	r1, r1
    3de6:	ff 27       	eor	r31, r31
    3de8:	59 1b       	sub	r21, r25
    3dea:	99 f0       	breq	.+38     	; 0x3e12 <__addsf3x+0x60>
    3dec:	59 3f       	cpi	r21, 0xF9	; 249
    3dee:	50 f4       	brcc	.+20     	; 0x3e04 <__addsf3x+0x52>
    3df0:	50 3e       	cpi	r21, 0xE0	; 224
    3df2:	68 f1       	brcs	.+90     	; 0x3e4e <__addsf3x+0x9c>
    3df4:	1a 16       	cp	r1, r26
    3df6:	f0 40       	sbci	r31, 0x00	; 0
    3df8:	a2 2f       	mov	r26, r18
    3dfa:	23 2f       	mov	r18, r19
    3dfc:	34 2f       	mov	r19, r20
    3dfe:	44 27       	eor	r20, r20
    3e00:	58 5f       	subi	r21, 0xF8	; 248
    3e02:	f3 cf       	rjmp	.-26     	; 0x3dea <__addsf3x+0x38>
    3e04:	46 95       	lsr	r20
    3e06:	37 95       	ror	r19
    3e08:	27 95       	ror	r18
    3e0a:	a7 95       	ror	r26
    3e0c:	f0 40       	sbci	r31, 0x00	; 0
    3e0e:	53 95       	inc	r21
    3e10:	c9 f7       	brne	.-14     	; 0x3e04 <__addsf3x+0x52>
    3e12:	7e f4       	brtc	.+30     	; 0x3e32 <__addsf3x+0x80>
    3e14:	1f 16       	cp	r1, r31
    3e16:	ba 0b       	sbc	r27, r26
    3e18:	62 0b       	sbc	r22, r18
    3e1a:	73 0b       	sbc	r23, r19
    3e1c:	84 0b       	sbc	r24, r20
    3e1e:	ba f0       	brmi	.+46     	; 0x3e4e <__addsf3x+0x9c>
    3e20:	91 50       	subi	r25, 0x01	; 1
    3e22:	a1 f0       	breq	.+40     	; 0x3e4c <__addsf3x+0x9a>
    3e24:	ff 0f       	add	r31, r31
    3e26:	bb 1f       	adc	r27, r27
    3e28:	66 1f       	adc	r22, r22
    3e2a:	77 1f       	adc	r23, r23
    3e2c:	88 1f       	adc	r24, r24
    3e2e:	c2 f7       	brpl	.-16     	; 0x3e20 <__addsf3x+0x6e>
    3e30:	0e c0       	rjmp	.+28     	; 0x3e4e <__addsf3x+0x9c>
    3e32:	ba 0f       	add	r27, r26
    3e34:	62 1f       	adc	r22, r18
    3e36:	73 1f       	adc	r23, r19
    3e38:	84 1f       	adc	r24, r20
    3e3a:	48 f4       	brcc	.+18     	; 0x3e4e <__addsf3x+0x9c>
    3e3c:	87 95       	ror	r24
    3e3e:	77 95       	ror	r23
    3e40:	67 95       	ror	r22
    3e42:	b7 95       	ror	r27
    3e44:	f7 95       	ror	r31
    3e46:	9e 3f       	cpi	r25, 0xFE	; 254
    3e48:	08 f0       	brcs	.+2      	; 0x3e4c <__addsf3x+0x9a>
    3e4a:	b0 cf       	rjmp	.-160    	; 0x3dac <__addsf3+0x28>
    3e4c:	93 95       	inc	r25
    3e4e:	88 0f       	add	r24, r24
    3e50:	08 f0       	brcs	.+2      	; 0x3e54 <__addsf3x+0xa2>
    3e52:	99 27       	eor	r25, r25
    3e54:	ee 0f       	add	r30, r30
    3e56:	97 95       	ror	r25
    3e58:	87 95       	ror	r24
    3e5a:	08 95       	ret

00003e5c <__cmpsf2>:
    3e5c:	0e 94 18 20 	call	0x4030	; 0x4030 <__fp_cmp>
    3e60:	08 f4       	brcc	.+2      	; 0x3e64 <__cmpsf2+0x8>
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	08 95       	ret

00003e66 <__divsf3>:
    3e66:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <__divsf3x>
    3e6a:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__fp_round>
    3e6e:	0e 94 4c 20 	call	0x4098	; 0x4098 <__fp_pscB>
    3e72:	58 f0       	brcs	.+22     	; 0x3e8a <__divsf3+0x24>
    3e74:	0e 94 45 20 	call	0x408a	; 0x408a <__fp_pscA>
    3e78:	40 f0       	brcs	.+16     	; 0x3e8a <__divsf3+0x24>
    3e7a:	29 f4       	brne	.+10     	; 0x3e86 <__divsf3+0x20>
    3e7c:	5f 3f       	cpi	r21, 0xFF	; 255
    3e7e:	29 f0       	breq	.+10     	; 0x3e8a <__divsf3+0x24>
    3e80:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__fp_inf>
    3e84:	51 11       	cpse	r21, r1
    3e86:	0c 94 87 20 	jmp	0x410e	; 0x410e <__fp_szero>
    3e8a:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__fp_nan>

00003e8e <__divsf3x>:
    3e8e:	0e 94 64 20 	call	0x40c8	; 0x40c8 <__fp_split3>
    3e92:	68 f3       	brcs	.-38     	; 0x3e6e <__divsf3+0x8>

00003e94 <__divsf3_pse>:
    3e94:	99 23       	and	r25, r25
    3e96:	b1 f3       	breq	.-20     	; 0x3e84 <__divsf3+0x1e>
    3e98:	55 23       	and	r21, r21
    3e9a:	91 f3       	breq	.-28     	; 0x3e80 <__divsf3+0x1a>
    3e9c:	95 1b       	sub	r25, r21
    3e9e:	55 0b       	sbc	r21, r21
    3ea0:	bb 27       	eor	r27, r27
    3ea2:	aa 27       	eor	r26, r26
    3ea4:	62 17       	cp	r22, r18
    3ea6:	73 07       	cpc	r23, r19
    3ea8:	84 07       	cpc	r24, r20
    3eaa:	38 f0       	brcs	.+14     	; 0x3eba <__divsf3_pse+0x26>
    3eac:	9f 5f       	subi	r25, 0xFF	; 255
    3eae:	5f 4f       	sbci	r21, 0xFF	; 255
    3eb0:	22 0f       	add	r18, r18
    3eb2:	33 1f       	adc	r19, r19
    3eb4:	44 1f       	adc	r20, r20
    3eb6:	aa 1f       	adc	r26, r26
    3eb8:	a9 f3       	breq	.-22     	; 0x3ea4 <__divsf3_pse+0x10>
    3eba:	35 d0       	rcall	.+106    	; 0x3f26 <__divsf3_pse+0x92>
    3ebc:	0e 2e       	mov	r0, r30
    3ebe:	3a f0       	brmi	.+14     	; 0x3ece <__divsf3_pse+0x3a>
    3ec0:	e0 e8       	ldi	r30, 0x80	; 128
    3ec2:	32 d0       	rcall	.+100    	; 0x3f28 <__divsf3_pse+0x94>
    3ec4:	91 50       	subi	r25, 0x01	; 1
    3ec6:	50 40       	sbci	r21, 0x00	; 0
    3ec8:	e6 95       	lsr	r30
    3eca:	00 1c       	adc	r0, r0
    3ecc:	ca f7       	brpl	.-14     	; 0x3ec0 <__divsf3_pse+0x2c>
    3ece:	2b d0       	rcall	.+86     	; 0x3f26 <__divsf3_pse+0x92>
    3ed0:	fe 2f       	mov	r31, r30
    3ed2:	29 d0       	rcall	.+82     	; 0x3f26 <__divsf3_pse+0x92>
    3ed4:	66 0f       	add	r22, r22
    3ed6:	77 1f       	adc	r23, r23
    3ed8:	88 1f       	adc	r24, r24
    3eda:	bb 1f       	adc	r27, r27
    3edc:	26 17       	cp	r18, r22
    3ede:	37 07       	cpc	r19, r23
    3ee0:	48 07       	cpc	r20, r24
    3ee2:	ab 07       	cpc	r26, r27
    3ee4:	b0 e8       	ldi	r27, 0x80	; 128
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <__divsf3_pse+0x56>
    3ee8:	bb 0b       	sbc	r27, r27
    3eea:	80 2d       	mov	r24, r0
    3eec:	bf 01       	movw	r22, r30
    3eee:	ff 27       	eor	r31, r31
    3ef0:	93 58       	subi	r25, 0x83	; 131
    3ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ef4:	3a f0       	brmi	.+14     	; 0x3f04 <__divsf3_pse+0x70>
    3ef6:	9e 3f       	cpi	r25, 0xFE	; 254
    3ef8:	51 05       	cpc	r21, r1
    3efa:	78 f0       	brcs	.+30     	; 0x3f1a <__divsf3_pse+0x86>
    3efc:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__fp_inf>
    3f00:	0c 94 87 20 	jmp	0x410e	; 0x410e <__fp_szero>
    3f04:	5f 3f       	cpi	r21, 0xFF	; 255
    3f06:	e4 f3       	brlt	.-8      	; 0x3f00 <__divsf3_pse+0x6c>
    3f08:	98 3e       	cpi	r25, 0xE8	; 232
    3f0a:	d4 f3       	brlt	.-12     	; 0x3f00 <__divsf3_pse+0x6c>
    3f0c:	86 95       	lsr	r24
    3f0e:	77 95       	ror	r23
    3f10:	67 95       	ror	r22
    3f12:	b7 95       	ror	r27
    3f14:	f7 95       	ror	r31
    3f16:	9f 5f       	subi	r25, 0xFF	; 255
    3f18:	c9 f7       	brne	.-14     	; 0x3f0c <__divsf3_pse+0x78>
    3f1a:	88 0f       	add	r24, r24
    3f1c:	91 1d       	adc	r25, r1
    3f1e:	96 95       	lsr	r25
    3f20:	87 95       	ror	r24
    3f22:	97 f9       	bld	r25, 7
    3f24:	08 95       	ret
    3f26:	e1 e0       	ldi	r30, 0x01	; 1
    3f28:	66 0f       	add	r22, r22
    3f2a:	77 1f       	adc	r23, r23
    3f2c:	88 1f       	adc	r24, r24
    3f2e:	bb 1f       	adc	r27, r27
    3f30:	62 17       	cp	r22, r18
    3f32:	73 07       	cpc	r23, r19
    3f34:	84 07       	cpc	r24, r20
    3f36:	ba 07       	cpc	r27, r26
    3f38:	20 f0       	brcs	.+8      	; 0x3f42 <__divsf3_pse+0xae>
    3f3a:	62 1b       	sub	r22, r18
    3f3c:	73 0b       	sbc	r23, r19
    3f3e:	84 0b       	sbc	r24, r20
    3f40:	ba 0b       	sbc	r27, r26
    3f42:	ee 1f       	adc	r30, r30
    3f44:	88 f7       	brcc	.-30     	; 0x3f28 <__divsf3_pse+0x94>
    3f46:	e0 95       	com	r30
    3f48:	08 95       	ret

00003f4a <__fixsfsi>:
    3f4a:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <__fixunssfsi>
    3f4e:	68 94       	set
    3f50:	b1 11       	cpse	r27, r1
    3f52:	0c 94 87 20 	jmp	0x410e	; 0x410e <__fp_szero>
    3f56:	08 95       	ret

00003f58 <__fixunssfsi>:
    3f58:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__fp_splitA>
    3f5c:	88 f0       	brcs	.+34     	; 0x3f80 <__fixunssfsi+0x28>
    3f5e:	9f 57       	subi	r25, 0x7F	; 127
    3f60:	98 f0       	brcs	.+38     	; 0x3f88 <__fixunssfsi+0x30>
    3f62:	b9 2f       	mov	r27, r25
    3f64:	99 27       	eor	r25, r25
    3f66:	b7 51       	subi	r27, 0x17	; 23
    3f68:	b0 f0       	brcs	.+44     	; 0x3f96 <__fixunssfsi+0x3e>
    3f6a:	e1 f0       	breq	.+56     	; 0x3fa4 <__fixunssfsi+0x4c>
    3f6c:	66 0f       	add	r22, r22
    3f6e:	77 1f       	adc	r23, r23
    3f70:	88 1f       	adc	r24, r24
    3f72:	99 1f       	adc	r25, r25
    3f74:	1a f0       	brmi	.+6      	; 0x3f7c <__fixunssfsi+0x24>
    3f76:	ba 95       	dec	r27
    3f78:	c9 f7       	brne	.-14     	; 0x3f6c <__fixunssfsi+0x14>
    3f7a:	14 c0       	rjmp	.+40     	; 0x3fa4 <__fixunssfsi+0x4c>
    3f7c:	b1 30       	cpi	r27, 0x01	; 1
    3f7e:	91 f0       	breq	.+36     	; 0x3fa4 <__fixunssfsi+0x4c>
    3f80:	0e 94 86 20 	call	0x410c	; 0x410c <__fp_zero>
    3f84:	b1 e0       	ldi	r27, 0x01	; 1
    3f86:	08 95       	ret
    3f88:	0c 94 86 20 	jmp	0x410c	; 0x410c <__fp_zero>
    3f8c:	67 2f       	mov	r22, r23
    3f8e:	78 2f       	mov	r23, r24
    3f90:	88 27       	eor	r24, r24
    3f92:	b8 5f       	subi	r27, 0xF8	; 248
    3f94:	39 f0       	breq	.+14     	; 0x3fa4 <__fixunssfsi+0x4c>
    3f96:	b9 3f       	cpi	r27, 0xF9	; 249
    3f98:	cc f3       	brlt	.-14     	; 0x3f8c <__fixunssfsi+0x34>
    3f9a:	86 95       	lsr	r24
    3f9c:	77 95       	ror	r23
    3f9e:	67 95       	ror	r22
    3fa0:	b3 95       	inc	r27
    3fa2:	d9 f7       	brne	.-10     	; 0x3f9a <__fixunssfsi+0x42>
    3fa4:	3e f4       	brtc	.+14     	; 0x3fb4 <__fixunssfsi+0x5c>
    3fa6:	90 95       	com	r25
    3fa8:	80 95       	com	r24
    3faa:	70 95       	com	r23
    3fac:	61 95       	neg	r22
    3fae:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb0:	8f 4f       	sbci	r24, 0xFF	; 255
    3fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb4:	08 95       	ret

00003fb6 <__floatunsisf>:
    3fb6:	e8 94       	clt
    3fb8:	09 c0       	rjmp	.+18     	; 0x3fcc <__floatsisf+0x12>

00003fba <__floatsisf>:
    3fba:	97 fb       	bst	r25, 7
    3fbc:	3e f4       	brtc	.+14     	; 0x3fcc <__floatsisf+0x12>
    3fbe:	90 95       	com	r25
    3fc0:	80 95       	com	r24
    3fc2:	70 95       	com	r23
    3fc4:	61 95       	neg	r22
    3fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc8:	8f 4f       	sbci	r24, 0xFF	; 255
    3fca:	9f 4f       	sbci	r25, 0xFF	; 255
    3fcc:	99 23       	and	r25, r25
    3fce:	a9 f0       	breq	.+42     	; 0x3ffa <__floatsisf+0x40>
    3fd0:	f9 2f       	mov	r31, r25
    3fd2:	96 e9       	ldi	r25, 0x96	; 150
    3fd4:	bb 27       	eor	r27, r27
    3fd6:	93 95       	inc	r25
    3fd8:	f6 95       	lsr	r31
    3fda:	87 95       	ror	r24
    3fdc:	77 95       	ror	r23
    3fde:	67 95       	ror	r22
    3fe0:	b7 95       	ror	r27
    3fe2:	f1 11       	cpse	r31, r1
    3fe4:	f8 cf       	rjmp	.-16     	; 0x3fd6 <__floatsisf+0x1c>
    3fe6:	fa f4       	brpl	.+62     	; 0x4026 <__floatsisf+0x6c>
    3fe8:	bb 0f       	add	r27, r27
    3fea:	11 f4       	brne	.+4      	; 0x3ff0 <__floatsisf+0x36>
    3fec:	60 ff       	sbrs	r22, 0
    3fee:	1b c0       	rjmp	.+54     	; 0x4026 <__floatsisf+0x6c>
    3ff0:	6f 5f       	subi	r22, 0xFF	; 255
    3ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff8:	16 c0       	rjmp	.+44     	; 0x4026 <__floatsisf+0x6c>
    3ffa:	88 23       	and	r24, r24
    3ffc:	11 f0       	breq	.+4      	; 0x4002 <__floatsisf+0x48>
    3ffe:	96 e9       	ldi	r25, 0x96	; 150
    4000:	11 c0       	rjmp	.+34     	; 0x4024 <__floatsisf+0x6a>
    4002:	77 23       	and	r23, r23
    4004:	21 f0       	breq	.+8      	; 0x400e <__floatsisf+0x54>
    4006:	9e e8       	ldi	r25, 0x8E	; 142
    4008:	87 2f       	mov	r24, r23
    400a:	76 2f       	mov	r23, r22
    400c:	05 c0       	rjmp	.+10     	; 0x4018 <__floatsisf+0x5e>
    400e:	66 23       	and	r22, r22
    4010:	71 f0       	breq	.+28     	; 0x402e <__floatsisf+0x74>
    4012:	96 e8       	ldi	r25, 0x86	; 134
    4014:	86 2f       	mov	r24, r22
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	60 e0       	ldi	r22, 0x00	; 0
    401a:	2a f0       	brmi	.+10     	; 0x4026 <__floatsisf+0x6c>
    401c:	9a 95       	dec	r25
    401e:	66 0f       	add	r22, r22
    4020:	77 1f       	adc	r23, r23
    4022:	88 1f       	adc	r24, r24
    4024:	da f7       	brpl	.-10     	; 0x401c <__floatsisf+0x62>
    4026:	88 0f       	add	r24, r24
    4028:	96 95       	lsr	r25
    402a:	87 95       	ror	r24
    402c:	97 f9       	bld	r25, 7
    402e:	08 95       	ret

00004030 <__fp_cmp>:
    4030:	99 0f       	add	r25, r25
    4032:	00 08       	sbc	r0, r0
    4034:	55 0f       	add	r21, r21
    4036:	aa 0b       	sbc	r26, r26
    4038:	e0 e8       	ldi	r30, 0x80	; 128
    403a:	fe ef       	ldi	r31, 0xFE	; 254
    403c:	16 16       	cp	r1, r22
    403e:	17 06       	cpc	r1, r23
    4040:	e8 07       	cpc	r30, r24
    4042:	f9 07       	cpc	r31, r25
    4044:	c0 f0       	brcs	.+48     	; 0x4076 <__fp_cmp+0x46>
    4046:	12 16       	cp	r1, r18
    4048:	13 06       	cpc	r1, r19
    404a:	e4 07       	cpc	r30, r20
    404c:	f5 07       	cpc	r31, r21
    404e:	98 f0       	brcs	.+38     	; 0x4076 <__fp_cmp+0x46>
    4050:	62 1b       	sub	r22, r18
    4052:	73 0b       	sbc	r23, r19
    4054:	84 0b       	sbc	r24, r20
    4056:	95 0b       	sbc	r25, r21
    4058:	39 f4       	brne	.+14     	; 0x4068 <__fp_cmp+0x38>
    405a:	0a 26       	eor	r0, r26
    405c:	61 f0       	breq	.+24     	; 0x4076 <__fp_cmp+0x46>
    405e:	23 2b       	or	r18, r19
    4060:	24 2b       	or	r18, r20
    4062:	25 2b       	or	r18, r21
    4064:	21 f4       	brne	.+8      	; 0x406e <__fp_cmp+0x3e>
    4066:	08 95       	ret
    4068:	0a 26       	eor	r0, r26
    406a:	09 f4       	brne	.+2      	; 0x406e <__fp_cmp+0x3e>
    406c:	a1 40       	sbci	r26, 0x01	; 1
    406e:	a6 95       	lsr	r26
    4070:	8f ef       	ldi	r24, 0xFF	; 255
    4072:	81 1d       	adc	r24, r1
    4074:	81 1d       	adc	r24, r1
    4076:	08 95       	ret

00004078 <__fp_inf>:
    4078:	97 f9       	bld	r25, 7
    407a:	9f 67       	ori	r25, 0x7F	; 127
    407c:	80 e8       	ldi	r24, 0x80	; 128
    407e:	70 e0       	ldi	r23, 0x00	; 0
    4080:	60 e0       	ldi	r22, 0x00	; 0
    4082:	08 95       	ret

00004084 <__fp_nan>:
    4084:	9f ef       	ldi	r25, 0xFF	; 255
    4086:	80 ec       	ldi	r24, 0xC0	; 192
    4088:	08 95       	ret

0000408a <__fp_pscA>:
    408a:	00 24       	eor	r0, r0
    408c:	0a 94       	dec	r0
    408e:	16 16       	cp	r1, r22
    4090:	17 06       	cpc	r1, r23
    4092:	18 06       	cpc	r1, r24
    4094:	09 06       	cpc	r0, r25
    4096:	08 95       	ret

00004098 <__fp_pscB>:
    4098:	00 24       	eor	r0, r0
    409a:	0a 94       	dec	r0
    409c:	12 16       	cp	r1, r18
    409e:	13 06       	cpc	r1, r19
    40a0:	14 06       	cpc	r1, r20
    40a2:	05 06       	cpc	r0, r21
    40a4:	08 95       	ret

000040a6 <__fp_round>:
    40a6:	09 2e       	mov	r0, r25
    40a8:	03 94       	inc	r0
    40aa:	00 0c       	add	r0, r0
    40ac:	11 f4       	brne	.+4      	; 0x40b2 <__fp_round+0xc>
    40ae:	88 23       	and	r24, r24
    40b0:	52 f0       	brmi	.+20     	; 0x40c6 <__fp_round+0x20>
    40b2:	bb 0f       	add	r27, r27
    40b4:	40 f4       	brcc	.+16     	; 0x40c6 <__fp_round+0x20>
    40b6:	bf 2b       	or	r27, r31
    40b8:	11 f4       	brne	.+4      	; 0x40be <__fp_round+0x18>
    40ba:	60 ff       	sbrs	r22, 0
    40bc:	04 c0       	rjmp	.+8      	; 0x40c6 <__fp_round+0x20>
    40be:	6f 5f       	subi	r22, 0xFF	; 255
    40c0:	7f 4f       	sbci	r23, 0xFF	; 255
    40c2:	8f 4f       	sbci	r24, 0xFF	; 255
    40c4:	9f 4f       	sbci	r25, 0xFF	; 255
    40c6:	08 95       	ret

000040c8 <__fp_split3>:
    40c8:	57 fd       	sbrc	r21, 7
    40ca:	90 58       	subi	r25, 0x80	; 128
    40cc:	44 0f       	add	r20, r20
    40ce:	55 1f       	adc	r21, r21
    40d0:	59 f0       	breq	.+22     	; 0x40e8 <__fp_splitA+0x10>
    40d2:	5f 3f       	cpi	r21, 0xFF	; 255
    40d4:	71 f0       	breq	.+28     	; 0x40f2 <__fp_splitA+0x1a>
    40d6:	47 95       	ror	r20

000040d8 <__fp_splitA>:
    40d8:	88 0f       	add	r24, r24
    40da:	97 fb       	bst	r25, 7
    40dc:	99 1f       	adc	r25, r25
    40de:	61 f0       	breq	.+24     	; 0x40f8 <__fp_splitA+0x20>
    40e0:	9f 3f       	cpi	r25, 0xFF	; 255
    40e2:	79 f0       	breq	.+30     	; 0x4102 <__fp_splitA+0x2a>
    40e4:	87 95       	ror	r24
    40e6:	08 95       	ret
    40e8:	12 16       	cp	r1, r18
    40ea:	13 06       	cpc	r1, r19
    40ec:	14 06       	cpc	r1, r20
    40ee:	55 1f       	adc	r21, r21
    40f0:	f2 cf       	rjmp	.-28     	; 0x40d6 <__fp_split3+0xe>
    40f2:	46 95       	lsr	r20
    40f4:	f1 df       	rcall	.-30     	; 0x40d8 <__fp_splitA>
    40f6:	08 c0       	rjmp	.+16     	; 0x4108 <__fp_splitA+0x30>
    40f8:	16 16       	cp	r1, r22
    40fa:	17 06       	cpc	r1, r23
    40fc:	18 06       	cpc	r1, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	f1 cf       	rjmp	.-30     	; 0x40e4 <__fp_splitA+0xc>
    4102:	86 95       	lsr	r24
    4104:	71 05       	cpc	r23, r1
    4106:	61 05       	cpc	r22, r1
    4108:	08 94       	sec
    410a:	08 95       	ret

0000410c <__fp_zero>:
    410c:	e8 94       	clt

0000410e <__fp_szero>:
    410e:	bb 27       	eor	r27, r27
    4110:	66 27       	eor	r22, r22
    4112:	77 27       	eor	r23, r23
    4114:	cb 01       	movw	r24, r22
    4116:	97 f9       	bld	r25, 7
    4118:	08 95       	ret

0000411a <__gesf2>:
    411a:	0e 94 18 20 	call	0x4030	; 0x4030 <__fp_cmp>
    411e:	08 f4       	brcc	.+2      	; 0x4122 <__gesf2+0x8>
    4120:	8f ef       	ldi	r24, 0xFF	; 255
    4122:	08 95       	ret

00004124 <__mulsf3>:
    4124:	0e 94 a5 20 	call	0x414a	; 0x414a <__mulsf3x>
    4128:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__fp_round>
    412c:	0e 94 45 20 	call	0x408a	; 0x408a <__fp_pscA>
    4130:	38 f0       	brcs	.+14     	; 0x4140 <__mulsf3+0x1c>
    4132:	0e 94 4c 20 	call	0x4098	; 0x4098 <__fp_pscB>
    4136:	20 f0       	brcs	.+8      	; 0x4140 <__mulsf3+0x1c>
    4138:	95 23       	and	r25, r21
    413a:	11 f0       	breq	.+4      	; 0x4140 <__mulsf3+0x1c>
    413c:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__fp_inf>
    4140:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__fp_nan>
    4144:	11 24       	eor	r1, r1
    4146:	0c 94 87 20 	jmp	0x410e	; 0x410e <__fp_szero>

0000414a <__mulsf3x>:
    414a:	0e 94 64 20 	call	0x40c8	; 0x40c8 <__fp_split3>
    414e:	70 f3       	brcs	.-36     	; 0x412c <__mulsf3+0x8>

00004150 <__mulsf3_pse>:
    4150:	95 9f       	mul	r25, r21
    4152:	c1 f3       	breq	.-16     	; 0x4144 <__mulsf3+0x20>
    4154:	95 0f       	add	r25, r21
    4156:	50 e0       	ldi	r21, 0x00	; 0
    4158:	55 1f       	adc	r21, r21
    415a:	62 9f       	mul	r22, r18
    415c:	f0 01       	movw	r30, r0
    415e:	72 9f       	mul	r23, r18
    4160:	bb 27       	eor	r27, r27
    4162:	f0 0d       	add	r31, r0
    4164:	b1 1d       	adc	r27, r1
    4166:	63 9f       	mul	r22, r19
    4168:	aa 27       	eor	r26, r26
    416a:	f0 0d       	add	r31, r0
    416c:	b1 1d       	adc	r27, r1
    416e:	aa 1f       	adc	r26, r26
    4170:	64 9f       	mul	r22, r20
    4172:	66 27       	eor	r22, r22
    4174:	b0 0d       	add	r27, r0
    4176:	a1 1d       	adc	r26, r1
    4178:	66 1f       	adc	r22, r22
    417a:	82 9f       	mul	r24, r18
    417c:	22 27       	eor	r18, r18
    417e:	b0 0d       	add	r27, r0
    4180:	a1 1d       	adc	r26, r1
    4182:	62 1f       	adc	r22, r18
    4184:	73 9f       	mul	r23, r19
    4186:	b0 0d       	add	r27, r0
    4188:	a1 1d       	adc	r26, r1
    418a:	62 1f       	adc	r22, r18
    418c:	83 9f       	mul	r24, r19
    418e:	a0 0d       	add	r26, r0
    4190:	61 1d       	adc	r22, r1
    4192:	22 1f       	adc	r18, r18
    4194:	74 9f       	mul	r23, r20
    4196:	33 27       	eor	r19, r19
    4198:	a0 0d       	add	r26, r0
    419a:	61 1d       	adc	r22, r1
    419c:	23 1f       	adc	r18, r19
    419e:	84 9f       	mul	r24, r20
    41a0:	60 0d       	add	r22, r0
    41a2:	21 1d       	adc	r18, r1
    41a4:	82 2f       	mov	r24, r18
    41a6:	76 2f       	mov	r23, r22
    41a8:	6a 2f       	mov	r22, r26
    41aa:	11 24       	eor	r1, r1
    41ac:	9f 57       	subi	r25, 0x7F	; 127
    41ae:	50 40       	sbci	r21, 0x00	; 0
    41b0:	9a f0       	brmi	.+38     	; 0x41d8 <__mulsf3_pse+0x88>
    41b2:	f1 f0       	breq	.+60     	; 0x41f0 <__mulsf3_pse+0xa0>
    41b4:	88 23       	and	r24, r24
    41b6:	4a f0       	brmi	.+18     	; 0x41ca <__mulsf3_pse+0x7a>
    41b8:	ee 0f       	add	r30, r30
    41ba:	ff 1f       	adc	r31, r31
    41bc:	bb 1f       	adc	r27, r27
    41be:	66 1f       	adc	r22, r22
    41c0:	77 1f       	adc	r23, r23
    41c2:	88 1f       	adc	r24, r24
    41c4:	91 50       	subi	r25, 0x01	; 1
    41c6:	50 40       	sbci	r21, 0x00	; 0
    41c8:	a9 f7       	brne	.-22     	; 0x41b4 <__mulsf3_pse+0x64>
    41ca:	9e 3f       	cpi	r25, 0xFE	; 254
    41cc:	51 05       	cpc	r21, r1
    41ce:	80 f0       	brcs	.+32     	; 0x41f0 <__mulsf3_pse+0xa0>
    41d0:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__fp_inf>
    41d4:	0c 94 87 20 	jmp	0x410e	; 0x410e <__fp_szero>
    41d8:	5f 3f       	cpi	r21, 0xFF	; 255
    41da:	e4 f3       	brlt	.-8      	; 0x41d4 <__mulsf3_pse+0x84>
    41dc:	98 3e       	cpi	r25, 0xE8	; 232
    41de:	d4 f3       	brlt	.-12     	; 0x41d4 <__mulsf3_pse+0x84>
    41e0:	86 95       	lsr	r24
    41e2:	77 95       	ror	r23
    41e4:	67 95       	ror	r22
    41e6:	b7 95       	ror	r27
    41e8:	f7 95       	ror	r31
    41ea:	e7 95       	ror	r30
    41ec:	9f 5f       	subi	r25, 0xFF	; 255
    41ee:	c1 f7       	brne	.-16     	; 0x41e0 <__mulsf3_pse+0x90>
    41f0:	fe 2b       	or	r31, r30
    41f2:	88 0f       	add	r24, r24
    41f4:	91 1d       	adc	r25, r1
    41f6:	96 95       	lsr	r25
    41f8:	87 95       	ror	r24
    41fa:	97 f9       	bld	r25, 7
    41fc:	08 95       	ret

000041fe <sprintf>:
    41fe:	ae e0       	ldi	r26, 0x0E	; 14
    4200:	b0 e0       	ldi	r27, 0x00	; 0
    4202:	e5 e0       	ldi	r30, 0x05	; 5
    4204:	f1 e2       	ldi	r31, 0x21	; 33
    4206:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__prologue_saves__+0x1c>
    420a:	0d 89       	ldd	r16, Y+21	; 0x15
    420c:	1e 89       	ldd	r17, Y+22	; 0x16
    420e:	86 e0       	ldi	r24, 0x06	; 6
    4210:	8c 83       	std	Y+4, r24	; 0x04
    4212:	1a 83       	std	Y+2, r17	; 0x02
    4214:	09 83       	std	Y+1, r16	; 0x01
    4216:	8f ef       	ldi	r24, 0xFF	; 255
    4218:	9f e7       	ldi	r25, 0x7F	; 127
    421a:	9e 83       	std	Y+6, r25	; 0x06
    421c:	8d 83       	std	Y+5, r24	; 0x05
    421e:	ae 01       	movw	r20, r28
    4220:	47 5e       	subi	r20, 0xE7	; 231
    4222:	5f 4f       	sbci	r21, 0xFF	; 255
    4224:	6f 89       	ldd	r22, Y+23	; 0x17
    4226:	78 8d       	ldd	r23, Y+24	; 0x18
    4228:	ce 01       	movw	r24, r28
    422a:	01 96       	adiw	r24, 0x01	; 1
    422c:	0e 94 21 21 	call	0x4242	; 0x4242 <vfprintf>
    4230:	ef 81       	ldd	r30, Y+7	; 0x07
    4232:	f8 85       	ldd	r31, Y+8	; 0x08
    4234:	e0 0f       	add	r30, r16
    4236:	f1 1f       	adc	r31, r17
    4238:	10 82       	st	Z, r1
    423a:	2e 96       	adiw	r28, 0x0e	; 14
    423c:	e4 e0       	ldi	r30, 0x04	; 4
    423e:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__epilogue_restores__+0x1c>

00004242 <vfprintf>:
    4242:	ab e0       	ldi	r26, 0x0B	; 11
    4244:	b0 e0       	ldi	r27, 0x00	; 0
    4246:	e7 e2       	ldi	r30, 0x27	; 39
    4248:	f1 e2       	ldi	r31, 0x21	; 33
    424a:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__prologue_saves__>
    424e:	6c 01       	movw	r12, r24
    4250:	7b 01       	movw	r14, r22
    4252:	8a 01       	movw	r16, r20
    4254:	fc 01       	movw	r30, r24
    4256:	17 82       	std	Z+7, r1	; 0x07
    4258:	16 82       	std	Z+6, r1	; 0x06
    425a:	83 81       	ldd	r24, Z+3	; 0x03
    425c:	81 ff       	sbrs	r24, 1
    425e:	cc c1       	rjmp	.+920    	; 0x45f8 <vfprintf+0x3b6>
    4260:	ce 01       	movw	r24, r28
    4262:	01 96       	adiw	r24, 0x01	; 1
    4264:	3c 01       	movw	r6, r24
    4266:	f6 01       	movw	r30, r12
    4268:	93 81       	ldd	r25, Z+3	; 0x03
    426a:	f7 01       	movw	r30, r14
    426c:	93 fd       	sbrc	r25, 3
    426e:	85 91       	lpm	r24, Z+
    4270:	93 ff       	sbrs	r25, 3
    4272:	81 91       	ld	r24, Z+
    4274:	7f 01       	movw	r14, r30
    4276:	88 23       	and	r24, r24
    4278:	09 f4       	brne	.+2      	; 0x427c <vfprintf+0x3a>
    427a:	ba c1       	rjmp	.+884    	; 0x45f0 <vfprintf+0x3ae>
    427c:	85 32       	cpi	r24, 0x25	; 37
    427e:	39 f4       	brne	.+14     	; 0x428e <vfprintf+0x4c>
    4280:	93 fd       	sbrc	r25, 3
    4282:	85 91       	lpm	r24, Z+
    4284:	93 ff       	sbrs	r25, 3
    4286:	81 91       	ld	r24, Z+
    4288:	7f 01       	movw	r14, r30
    428a:	85 32       	cpi	r24, 0x25	; 37
    428c:	29 f4       	brne	.+10     	; 0x4298 <vfprintf+0x56>
    428e:	b6 01       	movw	r22, r12
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	0e 94 18 23 	call	0x4630	; 0x4630 <fputc>
    4296:	e7 cf       	rjmp	.-50     	; 0x4266 <vfprintf+0x24>
    4298:	91 2c       	mov	r9, r1
    429a:	21 2c       	mov	r2, r1
    429c:	31 2c       	mov	r3, r1
    429e:	ff e1       	ldi	r31, 0x1F	; 31
    42a0:	f3 15       	cp	r31, r3
    42a2:	d8 f0       	brcs	.+54     	; 0x42da <vfprintf+0x98>
    42a4:	8b 32       	cpi	r24, 0x2B	; 43
    42a6:	79 f0       	breq	.+30     	; 0x42c6 <vfprintf+0x84>
    42a8:	38 f4       	brcc	.+14     	; 0x42b8 <vfprintf+0x76>
    42aa:	80 32       	cpi	r24, 0x20	; 32
    42ac:	79 f0       	breq	.+30     	; 0x42cc <vfprintf+0x8a>
    42ae:	83 32       	cpi	r24, 0x23	; 35
    42b0:	a1 f4       	brne	.+40     	; 0x42da <vfprintf+0x98>
    42b2:	23 2d       	mov	r18, r3
    42b4:	20 61       	ori	r18, 0x10	; 16
    42b6:	1d c0       	rjmp	.+58     	; 0x42f2 <vfprintf+0xb0>
    42b8:	8d 32       	cpi	r24, 0x2D	; 45
    42ba:	61 f0       	breq	.+24     	; 0x42d4 <vfprintf+0x92>
    42bc:	80 33       	cpi	r24, 0x30	; 48
    42be:	69 f4       	brne	.+26     	; 0x42da <vfprintf+0x98>
    42c0:	23 2d       	mov	r18, r3
    42c2:	21 60       	ori	r18, 0x01	; 1
    42c4:	16 c0       	rjmp	.+44     	; 0x42f2 <vfprintf+0xb0>
    42c6:	83 2d       	mov	r24, r3
    42c8:	82 60       	ori	r24, 0x02	; 2
    42ca:	38 2e       	mov	r3, r24
    42cc:	e3 2d       	mov	r30, r3
    42ce:	e4 60       	ori	r30, 0x04	; 4
    42d0:	3e 2e       	mov	r3, r30
    42d2:	2a c0       	rjmp	.+84     	; 0x4328 <vfprintf+0xe6>
    42d4:	f3 2d       	mov	r31, r3
    42d6:	f8 60       	ori	r31, 0x08	; 8
    42d8:	1d c0       	rjmp	.+58     	; 0x4314 <vfprintf+0xd2>
    42da:	37 fc       	sbrc	r3, 7
    42dc:	2d c0       	rjmp	.+90     	; 0x4338 <vfprintf+0xf6>
    42de:	20 ed       	ldi	r18, 0xD0	; 208
    42e0:	28 0f       	add	r18, r24
    42e2:	2a 30       	cpi	r18, 0x0A	; 10
    42e4:	40 f0       	brcs	.+16     	; 0x42f6 <vfprintf+0xb4>
    42e6:	8e 32       	cpi	r24, 0x2E	; 46
    42e8:	b9 f4       	brne	.+46     	; 0x4318 <vfprintf+0xd6>
    42ea:	36 fc       	sbrc	r3, 6
    42ec:	81 c1       	rjmp	.+770    	; 0x45f0 <vfprintf+0x3ae>
    42ee:	23 2d       	mov	r18, r3
    42f0:	20 64       	ori	r18, 0x40	; 64
    42f2:	32 2e       	mov	r3, r18
    42f4:	19 c0       	rjmp	.+50     	; 0x4328 <vfprintf+0xe6>
    42f6:	36 fe       	sbrs	r3, 6
    42f8:	06 c0       	rjmp	.+12     	; 0x4306 <vfprintf+0xc4>
    42fa:	8a e0       	ldi	r24, 0x0A	; 10
    42fc:	98 9e       	mul	r9, r24
    42fe:	20 0d       	add	r18, r0
    4300:	11 24       	eor	r1, r1
    4302:	92 2e       	mov	r9, r18
    4304:	11 c0       	rjmp	.+34     	; 0x4328 <vfprintf+0xe6>
    4306:	ea e0       	ldi	r30, 0x0A	; 10
    4308:	2e 9e       	mul	r2, r30
    430a:	20 0d       	add	r18, r0
    430c:	11 24       	eor	r1, r1
    430e:	22 2e       	mov	r2, r18
    4310:	f3 2d       	mov	r31, r3
    4312:	f0 62       	ori	r31, 0x20	; 32
    4314:	3f 2e       	mov	r3, r31
    4316:	08 c0       	rjmp	.+16     	; 0x4328 <vfprintf+0xe6>
    4318:	8c 36       	cpi	r24, 0x6C	; 108
    431a:	21 f4       	brne	.+8      	; 0x4324 <vfprintf+0xe2>
    431c:	83 2d       	mov	r24, r3
    431e:	80 68       	ori	r24, 0x80	; 128
    4320:	38 2e       	mov	r3, r24
    4322:	02 c0       	rjmp	.+4      	; 0x4328 <vfprintf+0xe6>
    4324:	88 36       	cpi	r24, 0x68	; 104
    4326:	41 f4       	brne	.+16     	; 0x4338 <vfprintf+0xf6>
    4328:	f7 01       	movw	r30, r14
    432a:	93 fd       	sbrc	r25, 3
    432c:	85 91       	lpm	r24, Z+
    432e:	93 ff       	sbrs	r25, 3
    4330:	81 91       	ld	r24, Z+
    4332:	7f 01       	movw	r14, r30
    4334:	81 11       	cpse	r24, r1
    4336:	b3 cf       	rjmp	.-154    	; 0x429e <vfprintf+0x5c>
    4338:	98 2f       	mov	r25, r24
    433a:	9f 7d       	andi	r25, 0xDF	; 223
    433c:	95 54       	subi	r25, 0x45	; 69
    433e:	93 30       	cpi	r25, 0x03	; 3
    4340:	28 f4       	brcc	.+10     	; 0x434c <vfprintf+0x10a>
    4342:	0c 5f       	subi	r16, 0xFC	; 252
    4344:	1f 4f       	sbci	r17, 0xFF	; 255
    4346:	9f e3       	ldi	r25, 0x3F	; 63
    4348:	99 83       	std	Y+1, r25	; 0x01
    434a:	0d c0       	rjmp	.+26     	; 0x4366 <vfprintf+0x124>
    434c:	83 36       	cpi	r24, 0x63	; 99
    434e:	31 f0       	breq	.+12     	; 0x435c <vfprintf+0x11a>
    4350:	83 37       	cpi	r24, 0x73	; 115
    4352:	71 f0       	breq	.+28     	; 0x4370 <vfprintf+0x12e>
    4354:	83 35       	cpi	r24, 0x53	; 83
    4356:	09 f0       	breq	.+2      	; 0x435a <vfprintf+0x118>
    4358:	59 c0       	rjmp	.+178    	; 0x440c <vfprintf+0x1ca>
    435a:	21 c0       	rjmp	.+66     	; 0x439e <vfprintf+0x15c>
    435c:	f8 01       	movw	r30, r16
    435e:	80 81       	ld	r24, Z
    4360:	89 83       	std	Y+1, r24	; 0x01
    4362:	0e 5f       	subi	r16, 0xFE	; 254
    4364:	1f 4f       	sbci	r17, 0xFF	; 255
    4366:	88 24       	eor	r8, r8
    4368:	83 94       	inc	r8
    436a:	91 2c       	mov	r9, r1
    436c:	53 01       	movw	r10, r6
    436e:	13 c0       	rjmp	.+38     	; 0x4396 <vfprintf+0x154>
    4370:	28 01       	movw	r4, r16
    4372:	f2 e0       	ldi	r31, 0x02	; 2
    4374:	4f 0e       	add	r4, r31
    4376:	51 1c       	adc	r5, r1
    4378:	f8 01       	movw	r30, r16
    437a:	a0 80       	ld	r10, Z
    437c:	b1 80       	ldd	r11, Z+1	; 0x01
    437e:	36 fe       	sbrs	r3, 6
    4380:	03 c0       	rjmp	.+6      	; 0x4388 <vfprintf+0x146>
    4382:	69 2d       	mov	r22, r9
    4384:	70 e0       	ldi	r23, 0x00	; 0
    4386:	02 c0       	rjmp	.+4      	; 0x438c <vfprintf+0x14a>
    4388:	6f ef       	ldi	r22, 0xFF	; 255
    438a:	7f ef       	ldi	r23, 0xFF	; 255
    438c:	c5 01       	movw	r24, r10
    438e:	0e 94 0d 23 	call	0x461a	; 0x461a <strnlen>
    4392:	4c 01       	movw	r8, r24
    4394:	82 01       	movw	r16, r4
    4396:	f3 2d       	mov	r31, r3
    4398:	ff 77       	andi	r31, 0x7F	; 127
    439a:	3f 2e       	mov	r3, r31
    439c:	16 c0       	rjmp	.+44     	; 0x43ca <vfprintf+0x188>
    439e:	28 01       	movw	r4, r16
    43a0:	22 e0       	ldi	r18, 0x02	; 2
    43a2:	42 0e       	add	r4, r18
    43a4:	51 1c       	adc	r5, r1
    43a6:	f8 01       	movw	r30, r16
    43a8:	a0 80       	ld	r10, Z
    43aa:	b1 80       	ldd	r11, Z+1	; 0x01
    43ac:	36 fe       	sbrs	r3, 6
    43ae:	03 c0       	rjmp	.+6      	; 0x43b6 <vfprintf+0x174>
    43b0:	69 2d       	mov	r22, r9
    43b2:	70 e0       	ldi	r23, 0x00	; 0
    43b4:	02 c0       	rjmp	.+4      	; 0x43ba <vfprintf+0x178>
    43b6:	6f ef       	ldi	r22, 0xFF	; 255
    43b8:	7f ef       	ldi	r23, 0xFF	; 255
    43ba:	c5 01       	movw	r24, r10
    43bc:	0e 94 02 23 	call	0x4604	; 0x4604 <strnlen_P>
    43c0:	4c 01       	movw	r8, r24
    43c2:	f3 2d       	mov	r31, r3
    43c4:	f0 68       	ori	r31, 0x80	; 128
    43c6:	3f 2e       	mov	r3, r31
    43c8:	82 01       	movw	r16, r4
    43ca:	33 fc       	sbrc	r3, 3
    43cc:	1b c0       	rjmp	.+54     	; 0x4404 <vfprintf+0x1c2>
    43ce:	82 2d       	mov	r24, r2
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	88 16       	cp	r8, r24
    43d4:	99 06       	cpc	r9, r25
    43d6:	b0 f4       	brcc	.+44     	; 0x4404 <vfprintf+0x1c2>
    43d8:	b6 01       	movw	r22, r12
    43da:	80 e2       	ldi	r24, 0x20	; 32
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	0e 94 18 23 	call	0x4630	; 0x4630 <fputc>
    43e2:	2a 94       	dec	r2
    43e4:	f4 cf       	rjmp	.-24     	; 0x43ce <vfprintf+0x18c>
    43e6:	f5 01       	movw	r30, r10
    43e8:	37 fc       	sbrc	r3, 7
    43ea:	85 91       	lpm	r24, Z+
    43ec:	37 fe       	sbrs	r3, 7
    43ee:	81 91       	ld	r24, Z+
    43f0:	5f 01       	movw	r10, r30
    43f2:	b6 01       	movw	r22, r12
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	0e 94 18 23 	call	0x4630	; 0x4630 <fputc>
    43fa:	21 10       	cpse	r2, r1
    43fc:	2a 94       	dec	r2
    43fe:	21 e0       	ldi	r18, 0x01	; 1
    4400:	82 1a       	sub	r8, r18
    4402:	91 08       	sbc	r9, r1
    4404:	81 14       	cp	r8, r1
    4406:	91 04       	cpc	r9, r1
    4408:	71 f7       	brne	.-36     	; 0x43e6 <vfprintf+0x1a4>
    440a:	e8 c0       	rjmp	.+464    	; 0x45dc <vfprintf+0x39a>
    440c:	84 36       	cpi	r24, 0x64	; 100
    440e:	11 f0       	breq	.+4      	; 0x4414 <vfprintf+0x1d2>
    4410:	89 36       	cpi	r24, 0x69	; 105
    4412:	41 f5       	brne	.+80     	; 0x4464 <vfprintf+0x222>
    4414:	f8 01       	movw	r30, r16
    4416:	37 fe       	sbrs	r3, 7
    4418:	07 c0       	rjmp	.+14     	; 0x4428 <vfprintf+0x1e6>
    441a:	60 81       	ld	r22, Z
    441c:	71 81       	ldd	r23, Z+1	; 0x01
    441e:	82 81       	ldd	r24, Z+2	; 0x02
    4420:	93 81       	ldd	r25, Z+3	; 0x03
    4422:	0c 5f       	subi	r16, 0xFC	; 252
    4424:	1f 4f       	sbci	r17, 0xFF	; 255
    4426:	08 c0       	rjmp	.+16     	; 0x4438 <vfprintf+0x1f6>
    4428:	60 81       	ld	r22, Z
    442a:	71 81       	ldd	r23, Z+1	; 0x01
    442c:	07 2e       	mov	r0, r23
    442e:	00 0c       	add	r0, r0
    4430:	88 0b       	sbc	r24, r24
    4432:	99 0b       	sbc	r25, r25
    4434:	0e 5f       	subi	r16, 0xFE	; 254
    4436:	1f 4f       	sbci	r17, 0xFF	; 255
    4438:	f3 2d       	mov	r31, r3
    443a:	ff 76       	andi	r31, 0x6F	; 111
    443c:	3f 2e       	mov	r3, r31
    443e:	97 ff       	sbrs	r25, 7
    4440:	09 c0       	rjmp	.+18     	; 0x4454 <vfprintf+0x212>
    4442:	90 95       	com	r25
    4444:	80 95       	com	r24
    4446:	70 95       	com	r23
    4448:	61 95       	neg	r22
    444a:	7f 4f       	sbci	r23, 0xFF	; 255
    444c:	8f 4f       	sbci	r24, 0xFF	; 255
    444e:	9f 4f       	sbci	r25, 0xFF	; 255
    4450:	f0 68       	ori	r31, 0x80	; 128
    4452:	3f 2e       	mov	r3, r31
    4454:	2a e0       	ldi	r18, 0x0A	; 10
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	a3 01       	movw	r20, r6
    445a:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__ultoa_invert>
    445e:	88 2e       	mov	r8, r24
    4460:	86 18       	sub	r8, r6
    4462:	45 c0       	rjmp	.+138    	; 0x44ee <vfprintf+0x2ac>
    4464:	85 37       	cpi	r24, 0x75	; 117
    4466:	31 f4       	brne	.+12     	; 0x4474 <vfprintf+0x232>
    4468:	23 2d       	mov	r18, r3
    446a:	2f 7e       	andi	r18, 0xEF	; 239
    446c:	b2 2e       	mov	r11, r18
    446e:	2a e0       	ldi	r18, 0x0A	; 10
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	25 c0       	rjmp	.+74     	; 0x44be <vfprintf+0x27c>
    4474:	93 2d       	mov	r25, r3
    4476:	99 7f       	andi	r25, 0xF9	; 249
    4478:	b9 2e       	mov	r11, r25
    447a:	8f 36       	cpi	r24, 0x6F	; 111
    447c:	c1 f0       	breq	.+48     	; 0x44ae <vfprintf+0x26c>
    447e:	18 f4       	brcc	.+6      	; 0x4486 <vfprintf+0x244>
    4480:	88 35       	cpi	r24, 0x58	; 88
    4482:	79 f0       	breq	.+30     	; 0x44a2 <vfprintf+0x260>
    4484:	b5 c0       	rjmp	.+362    	; 0x45f0 <vfprintf+0x3ae>
    4486:	80 37       	cpi	r24, 0x70	; 112
    4488:	19 f0       	breq	.+6      	; 0x4490 <vfprintf+0x24e>
    448a:	88 37       	cpi	r24, 0x78	; 120
    448c:	21 f0       	breq	.+8      	; 0x4496 <vfprintf+0x254>
    448e:	b0 c0       	rjmp	.+352    	; 0x45f0 <vfprintf+0x3ae>
    4490:	e9 2f       	mov	r30, r25
    4492:	e0 61       	ori	r30, 0x10	; 16
    4494:	be 2e       	mov	r11, r30
    4496:	b4 fe       	sbrs	r11, 4
    4498:	0d c0       	rjmp	.+26     	; 0x44b4 <vfprintf+0x272>
    449a:	fb 2d       	mov	r31, r11
    449c:	f4 60       	ori	r31, 0x04	; 4
    449e:	bf 2e       	mov	r11, r31
    44a0:	09 c0       	rjmp	.+18     	; 0x44b4 <vfprintf+0x272>
    44a2:	34 fe       	sbrs	r3, 4
    44a4:	0a c0       	rjmp	.+20     	; 0x44ba <vfprintf+0x278>
    44a6:	29 2f       	mov	r18, r25
    44a8:	26 60       	ori	r18, 0x06	; 6
    44aa:	b2 2e       	mov	r11, r18
    44ac:	06 c0       	rjmp	.+12     	; 0x44ba <vfprintf+0x278>
    44ae:	28 e0       	ldi	r18, 0x08	; 8
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	05 c0       	rjmp	.+10     	; 0x44be <vfprintf+0x27c>
    44b4:	20 e1       	ldi	r18, 0x10	; 16
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	02 c0       	rjmp	.+4      	; 0x44be <vfprintf+0x27c>
    44ba:	20 e1       	ldi	r18, 0x10	; 16
    44bc:	32 e0       	ldi	r19, 0x02	; 2
    44be:	f8 01       	movw	r30, r16
    44c0:	b7 fe       	sbrs	r11, 7
    44c2:	07 c0       	rjmp	.+14     	; 0x44d2 <vfprintf+0x290>
    44c4:	60 81       	ld	r22, Z
    44c6:	71 81       	ldd	r23, Z+1	; 0x01
    44c8:	82 81       	ldd	r24, Z+2	; 0x02
    44ca:	93 81       	ldd	r25, Z+3	; 0x03
    44cc:	0c 5f       	subi	r16, 0xFC	; 252
    44ce:	1f 4f       	sbci	r17, 0xFF	; 255
    44d0:	06 c0       	rjmp	.+12     	; 0x44de <vfprintf+0x29c>
    44d2:	60 81       	ld	r22, Z
    44d4:	71 81       	ldd	r23, Z+1	; 0x01
    44d6:	80 e0       	ldi	r24, 0x00	; 0
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	0e 5f       	subi	r16, 0xFE	; 254
    44dc:	1f 4f       	sbci	r17, 0xFF	; 255
    44de:	a3 01       	movw	r20, r6
    44e0:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__ultoa_invert>
    44e4:	88 2e       	mov	r8, r24
    44e6:	86 18       	sub	r8, r6
    44e8:	fb 2d       	mov	r31, r11
    44ea:	ff 77       	andi	r31, 0x7F	; 127
    44ec:	3f 2e       	mov	r3, r31
    44ee:	36 fe       	sbrs	r3, 6
    44f0:	0d c0       	rjmp	.+26     	; 0x450c <vfprintf+0x2ca>
    44f2:	23 2d       	mov	r18, r3
    44f4:	2e 7f       	andi	r18, 0xFE	; 254
    44f6:	a2 2e       	mov	r10, r18
    44f8:	89 14       	cp	r8, r9
    44fa:	58 f4       	brcc	.+22     	; 0x4512 <vfprintf+0x2d0>
    44fc:	34 fe       	sbrs	r3, 4
    44fe:	0b c0       	rjmp	.+22     	; 0x4516 <vfprintf+0x2d4>
    4500:	32 fc       	sbrc	r3, 2
    4502:	09 c0       	rjmp	.+18     	; 0x4516 <vfprintf+0x2d4>
    4504:	83 2d       	mov	r24, r3
    4506:	8e 7e       	andi	r24, 0xEE	; 238
    4508:	a8 2e       	mov	r10, r24
    450a:	05 c0       	rjmp	.+10     	; 0x4516 <vfprintf+0x2d4>
    450c:	b8 2c       	mov	r11, r8
    450e:	a3 2c       	mov	r10, r3
    4510:	03 c0       	rjmp	.+6      	; 0x4518 <vfprintf+0x2d6>
    4512:	b8 2c       	mov	r11, r8
    4514:	01 c0       	rjmp	.+2      	; 0x4518 <vfprintf+0x2d6>
    4516:	b9 2c       	mov	r11, r9
    4518:	a4 fe       	sbrs	r10, 4
    451a:	0f c0       	rjmp	.+30     	; 0x453a <vfprintf+0x2f8>
    451c:	fe 01       	movw	r30, r28
    451e:	e8 0d       	add	r30, r8
    4520:	f1 1d       	adc	r31, r1
    4522:	80 81       	ld	r24, Z
    4524:	80 33       	cpi	r24, 0x30	; 48
    4526:	21 f4       	brne	.+8      	; 0x4530 <vfprintf+0x2ee>
    4528:	9a 2d       	mov	r25, r10
    452a:	99 7e       	andi	r25, 0xE9	; 233
    452c:	a9 2e       	mov	r10, r25
    452e:	09 c0       	rjmp	.+18     	; 0x4542 <vfprintf+0x300>
    4530:	a2 fe       	sbrs	r10, 2
    4532:	06 c0       	rjmp	.+12     	; 0x4540 <vfprintf+0x2fe>
    4534:	b3 94       	inc	r11
    4536:	b3 94       	inc	r11
    4538:	04 c0       	rjmp	.+8      	; 0x4542 <vfprintf+0x300>
    453a:	8a 2d       	mov	r24, r10
    453c:	86 78       	andi	r24, 0x86	; 134
    453e:	09 f0       	breq	.+2      	; 0x4542 <vfprintf+0x300>
    4540:	b3 94       	inc	r11
    4542:	a3 fc       	sbrc	r10, 3
    4544:	11 c0       	rjmp	.+34     	; 0x4568 <vfprintf+0x326>
    4546:	a0 fe       	sbrs	r10, 0
    4548:	06 c0       	rjmp	.+12     	; 0x4556 <vfprintf+0x314>
    454a:	b2 14       	cp	r11, r2
    454c:	88 f4       	brcc	.+34     	; 0x4570 <vfprintf+0x32e>
    454e:	28 0c       	add	r2, r8
    4550:	92 2c       	mov	r9, r2
    4552:	9b 18       	sub	r9, r11
    4554:	0e c0       	rjmp	.+28     	; 0x4572 <vfprintf+0x330>
    4556:	b2 14       	cp	r11, r2
    4558:	60 f4       	brcc	.+24     	; 0x4572 <vfprintf+0x330>
    455a:	b6 01       	movw	r22, r12
    455c:	80 e2       	ldi	r24, 0x20	; 32
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	0e 94 18 23 	call	0x4630	; 0x4630 <fputc>
    4564:	b3 94       	inc	r11
    4566:	f7 cf       	rjmp	.-18     	; 0x4556 <vfprintf+0x314>
    4568:	b2 14       	cp	r11, r2
    456a:	18 f4       	brcc	.+6      	; 0x4572 <vfprintf+0x330>
    456c:	2b 18       	sub	r2, r11
    456e:	02 c0       	rjmp	.+4      	; 0x4574 <vfprintf+0x332>
    4570:	98 2c       	mov	r9, r8
    4572:	21 2c       	mov	r2, r1
    4574:	a4 fe       	sbrs	r10, 4
    4576:	10 c0       	rjmp	.+32     	; 0x4598 <vfprintf+0x356>
    4578:	b6 01       	movw	r22, r12
    457a:	80 e3       	ldi	r24, 0x30	; 48
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	0e 94 18 23 	call	0x4630	; 0x4630 <fputc>
    4582:	a2 fe       	sbrs	r10, 2
    4584:	17 c0       	rjmp	.+46     	; 0x45b4 <vfprintf+0x372>
    4586:	a1 fc       	sbrc	r10, 1
    4588:	03 c0       	rjmp	.+6      	; 0x4590 <vfprintf+0x34e>
    458a:	88 e7       	ldi	r24, 0x78	; 120
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	02 c0       	rjmp	.+4      	; 0x4594 <vfprintf+0x352>
    4590:	88 e5       	ldi	r24, 0x58	; 88
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	b6 01       	movw	r22, r12
    4596:	0c c0       	rjmp	.+24     	; 0x45b0 <vfprintf+0x36e>
    4598:	8a 2d       	mov	r24, r10
    459a:	86 78       	andi	r24, 0x86	; 134
    459c:	59 f0       	breq	.+22     	; 0x45b4 <vfprintf+0x372>
    459e:	a1 fe       	sbrs	r10, 1
    45a0:	02 c0       	rjmp	.+4      	; 0x45a6 <vfprintf+0x364>
    45a2:	8b e2       	ldi	r24, 0x2B	; 43
    45a4:	01 c0       	rjmp	.+2      	; 0x45a8 <vfprintf+0x366>
    45a6:	80 e2       	ldi	r24, 0x20	; 32
    45a8:	a7 fc       	sbrc	r10, 7
    45aa:	8d e2       	ldi	r24, 0x2D	; 45
    45ac:	b6 01       	movw	r22, r12
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	0e 94 18 23 	call	0x4630	; 0x4630 <fputc>
    45b4:	89 14       	cp	r8, r9
    45b6:	38 f4       	brcc	.+14     	; 0x45c6 <vfprintf+0x384>
    45b8:	b6 01       	movw	r22, r12
    45ba:	80 e3       	ldi	r24, 0x30	; 48
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	0e 94 18 23 	call	0x4630	; 0x4630 <fputc>
    45c2:	9a 94       	dec	r9
    45c4:	f7 cf       	rjmp	.-18     	; 0x45b4 <vfprintf+0x372>
    45c6:	8a 94       	dec	r8
    45c8:	f3 01       	movw	r30, r6
    45ca:	e8 0d       	add	r30, r8
    45cc:	f1 1d       	adc	r31, r1
    45ce:	80 81       	ld	r24, Z
    45d0:	b6 01       	movw	r22, r12
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	0e 94 18 23 	call	0x4630	; 0x4630 <fputc>
    45d8:	81 10       	cpse	r8, r1
    45da:	f5 cf       	rjmp	.-22     	; 0x45c6 <vfprintf+0x384>
    45dc:	22 20       	and	r2, r2
    45de:	09 f4       	brne	.+2      	; 0x45e2 <vfprintf+0x3a0>
    45e0:	42 ce       	rjmp	.-892    	; 0x4266 <vfprintf+0x24>
    45e2:	b6 01       	movw	r22, r12
    45e4:	80 e2       	ldi	r24, 0x20	; 32
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	0e 94 18 23 	call	0x4630	; 0x4630 <fputc>
    45ec:	2a 94       	dec	r2
    45ee:	f6 cf       	rjmp	.-20     	; 0x45dc <vfprintf+0x39a>
    45f0:	f6 01       	movw	r30, r12
    45f2:	86 81       	ldd	r24, Z+6	; 0x06
    45f4:	97 81       	ldd	r25, Z+7	; 0x07
    45f6:	02 c0       	rjmp	.+4      	; 0x45fc <vfprintf+0x3ba>
    45f8:	8f ef       	ldi	r24, 0xFF	; 255
    45fa:	9f ef       	ldi	r25, 0xFF	; 255
    45fc:	2b 96       	adiw	r28, 0x0b	; 11
    45fe:	e2 e1       	ldi	r30, 0x12	; 18
    4600:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__epilogue_restores__>

00004604 <strnlen_P>:
    4604:	fc 01       	movw	r30, r24
    4606:	05 90       	lpm	r0, Z+
    4608:	61 50       	subi	r22, 0x01	; 1
    460a:	70 40       	sbci	r23, 0x00	; 0
    460c:	01 10       	cpse	r0, r1
    460e:	d8 f7       	brcc	.-10     	; 0x4606 <strnlen_P+0x2>
    4610:	80 95       	com	r24
    4612:	90 95       	com	r25
    4614:	8e 0f       	add	r24, r30
    4616:	9f 1f       	adc	r25, r31
    4618:	08 95       	ret

0000461a <strnlen>:
    461a:	fc 01       	movw	r30, r24
    461c:	61 50       	subi	r22, 0x01	; 1
    461e:	70 40       	sbci	r23, 0x00	; 0
    4620:	01 90       	ld	r0, Z+
    4622:	01 10       	cpse	r0, r1
    4624:	d8 f7       	brcc	.-10     	; 0x461c <strnlen+0x2>
    4626:	80 95       	com	r24
    4628:	90 95       	com	r25
    462a:	8e 0f       	add	r24, r30
    462c:	9f 1f       	adc	r25, r31
    462e:	08 95       	ret

00004630 <fputc>:
    4630:	0f 93       	push	r16
    4632:	1f 93       	push	r17
    4634:	cf 93       	push	r28
    4636:	df 93       	push	r29
    4638:	fb 01       	movw	r30, r22
    463a:	23 81       	ldd	r18, Z+3	; 0x03
    463c:	21 fd       	sbrc	r18, 1
    463e:	03 c0       	rjmp	.+6      	; 0x4646 <fputc+0x16>
    4640:	8f ef       	ldi	r24, 0xFF	; 255
    4642:	9f ef       	ldi	r25, 0xFF	; 255
    4644:	2c c0       	rjmp	.+88     	; 0x469e <fputc+0x6e>
    4646:	22 ff       	sbrs	r18, 2
    4648:	16 c0       	rjmp	.+44     	; 0x4676 <fputc+0x46>
    464a:	46 81       	ldd	r20, Z+6	; 0x06
    464c:	57 81       	ldd	r21, Z+7	; 0x07
    464e:	24 81       	ldd	r18, Z+4	; 0x04
    4650:	35 81       	ldd	r19, Z+5	; 0x05
    4652:	42 17       	cp	r20, r18
    4654:	53 07       	cpc	r21, r19
    4656:	44 f4       	brge	.+16     	; 0x4668 <fputc+0x38>
    4658:	a0 81       	ld	r26, Z
    465a:	b1 81       	ldd	r27, Z+1	; 0x01
    465c:	9d 01       	movw	r18, r26
    465e:	2f 5f       	subi	r18, 0xFF	; 255
    4660:	3f 4f       	sbci	r19, 0xFF	; 255
    4662:	31 83       	std	Z+1, r19	; 0x01
    4664:	20 83       	st	Z, r18
    4666:	8c 93       	st	X, r24
    4668:	26 81       	ldd	r18, Z+6	; 0x06
    466a:	37 81       	ldd	r19, Z+7	; 0x07
    466c:	2f 5f       	subi	r18, 0xFF	; 255
    466e:	3f 4f       	sbci	r19, 0xFF	; 255
    4670:	37 83       	std	Z+7, r19	; 0x07
    4672:	26 83       	std	Z+6, r18	; 0x06
    4674:	14 c0       	rjmp	.+40     	; 0x469e <fputc+0x6e>
    4676:	8b 01       	movw	r16, r22
    4678:	ec 01       	movw	r28, r24
    467a:	fb 01       	movw	r30, r22
    467c:	00 84       	ldd	r0, Z+8	; 0x08
    467e:	f1 85       	ldd	r31, Z+9	; 0x09
    4680:	e0 2d       	mov	r30, r0
    4682:	09 95       	icall
    4684:	89 2b       	or	r24, r25
    4686:	e1 f6       	brne	.-72     	; 0x4640 <fputc+0x10>
    4688:	d8 01       	movw	r26, r16
    468a:	16 96       	adiw	r26, 0x06	; 6
    468c:	8d 91       	ld	r24, X+
    468e:	9c 91       	ld	r25, X
    4690:	17 97       	sbiw	r26, 0x07	; 7
    4692:	01 96       	adiw	r24, 0x01	; 1
    4694:	17 96       	adiw	r26, 0x07	; 7
    4696:	9c 93       	st	X, r25
    4698:	8e 93       	st	-X, r24
    469a:	16 97       	sbiw	r26, 0x06	; 6
    469c:	ce 01       	movw	r24, r28
    469e:	df 91       	pop	r29
    46a0:	cf 91       	pop	r28
    46a2:	1f 91       	pop	r17
    46a4:	0f 91       	pop	r16
    46a6:	08 95       	ret

000046a8 <__ultoa_invert>:
    46a8:	fa 01       	movw	r30, r20
    46aa:	aa 27       	eor	r26, r26
    46ac:	28 30       	cpi	r18, 0x08	; 8
    46ae:	51 f1       	breq	.+84     	; 0x4704 <__ultoa_invert+0x5c>
    46b0:	20 31       	cpi	r18, 0x10	; 16
    46b2:	81 f1       	breq	.+96     	; 0x4714 <__ultoa_invert+0x6c>
    46b4:	e8 94       	clt
    46b6:	6f 93       	push	r22
    46b8:	6e 7f       	andi	r22, 0xFE	; 254
    46ba:	6e 5f       	subi	r22, 0xFE	; 254
    46bc:	7f 4f       	sbci	r23, 0xFF	; 255
    46be:	8f 4f       	sbci	r24, 0xFF	; 255
    46c0:	9f 4f       	sbci	r25, 0xFF	; 255
    46c2:	af 4f       	sbci	r26, 0xFF	; 255
    46c4:	b1 e0       	ldi	r27, 0x01	; 1
    46c6:	3e d0       	rcall	.+124    	; 0x4744 <__ultoa_invert+0x9c>
    46c8:	b4 e0       	ldi	r27, 0x04	; 4
    46ca:	3c d0       	rcall	.+120    	; 0x4744 <__ultoa_invert+0x9c>
    46cc:	67 0f       	add	r22, r23
    46ce:	78 1f       	adc	r23, r24
    46d0:	89 1f       	adc	r24, r25
    46d2:	9a 1f       	adc	r25, r26
    46d4:	a1 1d       	adc	r26, r1
    46d6:	68 0f       	add	r22, r24
    46d8:	79 1f       	adc	r23, r25
    46da:	8a 1f       	adc	r24, r26
    46dc:	91 1d       	adc	r25, r1
    46de:	a1 1d       	adc	r26, r1
    46e0:	6a 0f       	add	r22, r26
    46e2:	71 1d       	adc	r23, r1
    46e4:	81 1d       	adc	r24, r1
    46e6:	91 1d       	adc	r25, r1
    46e8:	a1 1d       	adc	r26, r1
    46ea:	20 d0       	rcall	.+64     	; 0x472c <__ultoa_invert+0x84>
    46ec:	09 f4       	brne	.+2      	; 0x46f0 <__ultoa_invert+0x48>
    46ee:	68 94       	set
    46f0:	3f 91       	pop	r19
    46f2:	2a e0       	ldi	r18, 0x0A	; 10
    46f4:	26 9f       	mul	r18, r22
    46f6:	11 24       	eor	r1, r1
    46f8:	30 19       	sub	r19, r0
    46fa:	30 5d       	subi	r19, 0xD0	; 208
    46fc:	31 93       	st	Z+, r19
    46fe:	de f6       	brtc	.-74     	; 0x46b6 <__ultoa_invert+0xe>
    4700:	cf 01       	movw	r24, r30
    4702:	08 95       	ret
    4704:	46 2f       	mov	r20, r22
    4706:	47 70       	andi	r20, 0x07	; 7
    4708:	40 5d       	subi	r20, 0xD0	; 208
    470a:	41 93       	st	Z+, r20
    470c:	b3 e0       	ldi	r27, 0x03	; 3
    470e:	0f d0       	rcall	.+30     	; 0x472e <__ultoa_invert+0x86>
    4710:	c9 f7       	brne	.-14     	; 0x4704 <__ultoa_invert+0x5c>
    4712:	f6 cf       	rjmp	.-20     	; 0x4700 <__ultoa_invert+0x58>
    4714:	46 2f       	mov	r20, r22
    4716:	4f 70       	andi	r20, 0x0F	; 15
    4718:	40 5d       	subi	r20, 0xD0	; 208
    471a:	4a 33       	cpi	r20, 0x3A	; 58
    471c:	18 f0       	brcs	.+6      	; 0x4724 <__ultoa_invert+0x7c>
    471e:	49 5d       	subi	r20, 0xD9	; 217
    4720:	31 fd       	sbrc	r19, 1
    4722:	40 52       	subi	r20, 0x20	; 32
    4724:	41 93       	st	Z+, r20
    4726:	02 d0       	rcall	.+4      	; 0x472c <__ultoa_invert+0x84>
    4728:	a9 f7       	brne	.-22     	; 0x4714 <__ultoa_invert+0x6c>
    472a:	ea cf       	rjmp	.-44     	; 0x4700 <__ultoa_invert+0x58>
    472c:	b4 e0       	ldi	r27, 0x04	; 4
    472e:	a6 95       	lsr	r26
    4730:	97 95       	ror	r25
    4732:	87 95       	ror	r24
    4734:	77 95       	ror	r23
    4736:	67 95       	ror	r22
    4738:	ba 95       	dec	r27
    473a:	c9 f7       	brne	.-14     	; 0x472e <__ultoa_invert+0x86>
    473c:	00 97       	sbiw	r24, 0x00	; 0
    473e:	61 05       	cpc	r22, r1
    4740:	71 05       	cpc	r23, r1
    4742:	08 95       	ret
    4744:	9b 01       	movw	r18, r22
    4746:	ac 01       	movw	r20, r24
    4748:	0a 2e       	mov	r0, r26
    474a:	06 94       	lsr	r0
    474c:	57 95       	ror	r21
    474e:	47 95       	ror	r20
    4750:	37 95       	ror	r19
    4752:	27 95       	ror	r18
    4754:	ba 95       	dec	r27
    4756:	c9 f7       	brne	.-14     	; 0x474a <__ultoa_invert+0xa2>
    4758:	62 0f       	add	r22, r18
    475a:	73 1f       	adc	r23, r19
    475c:	84 1f       	adc	r24, r20
    475e:	95 1f       	adc	r25, r21
    4760:	a0 1d       	adc	r26, r0
    4762:	08 95       	ret

00004764 <__prologue_saves__>:
    4764:	2f 92       	push	r2
    4766:	3f 92       	push	r3
    4768:	4f 92       	push	r4
    476a:	5f 92       	push	r5
    476c:	6f 92       	push	r6
    476e:	7f 92       	push	r7
    4770:	8f 92       	push	r8
    4772:	9f 92       	push	r9
    4774:	af 92       	push	r10
    4776:	bf 92       	push	r11
    4778:	cf 92       	push	r12
    477a:	df 92       	push	r13
    477c:	ef 92       	push	r14
    477e:	ff 92       	push	r15
    4780:	0f 93       	push	r16
    4782:	1f 93       	push	r17
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	cd b7       	in	r28, 0x3d	; 61
    478a:	de b7       	in	r29, 0x3e	; 62
    478c:	ca 1b       	sub	r28, r26
    478e:	db 0b       	sbc	r29, r27
    4790:	0f b6       	in	r0, 0x3f	; 63
    4792:	f8 94       	cli
    4794:	de bf       	out	0x3e, r29	; 62
    4796:	0f be       	out	0x3f, r0	; 63
    4798:	cd bf       	out	0x3d, r28	; 61
    479a:	09 94       	ijmp

0000479c <__epilogue_restores__>:
    479c:	2a 88       	ldd	r2, Y+18	; 0x12
    479e:	39 88       	ldd	r3, Y+17	; 0x11
    47a0:	48 88       	ldd	r4, Y+16	; 0x10
    47a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    47a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    47a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    47a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    47aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    47ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    47ae:	b9 84       	ldd	r11, Y+9	; 0x09
    47b0:	c8 84       	ldd	r12, Y+8	; 0x08
    47b2:	df 80       	ldd	r13, Y+7	; 0x07
    47b4:	ee 80       	ldd	r14, Y+6	; 0x06
    47b6:	fd 80       	ldd	r15, Y+5	; 0x05
    47b8:	0c 81       	ldd	r16, Y+4	; 0x04
    47ba:	1b 81       	ldd	r17, Y+3	; 0x03
    47bc:	aa 81       	ldd	r26, Y+2	; 0x02
    47be:	b9 81       	ldd	r27, Y+1	; 0x01
    47c0:	ce 0f       	add	r28, r30
    47c2:	d1 1d       	adc	r29, r1
    47c4:	0f b6       	in	r0, 0x3f	; 63
    47c6:	f8 94       	cli
    47c8:	de bf       	out	0x3e, r29	; 62
    47ca:	0f be       	out	0x3f, r0	; 63
    47cc:	cd bf       	out	0x3d, r28	; 61
    47ce:	ed 01       	movw	r28, r26
    47d0:	08 95       	ret

000047d2 <_exit>:
    47d2:	f8 94       	cli

000047d4 <__stop_program>:
    47d4:	ff cf       	rjmp	.-2      	; 0x47d4 <__stop_program>
