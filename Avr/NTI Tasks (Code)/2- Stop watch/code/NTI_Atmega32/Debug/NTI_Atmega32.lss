
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  000038b0  00003944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000c0  008000c0  000039a4  2**0
                  ALLOC
  3 .stab         00007014  00000000  00000000  000039a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003922  00000000  00000000  0000a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000e2da  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000e2ec  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0000e328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0000e80e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000ecb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000eccb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_1>
       8:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_2>
       c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3c       	cpi	r26, 0xCD	; 205
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 0f 	call	0x1eea	; 0x1eea <main>
      8a:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Convert_IntToString>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <Convert_IntToString+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <Convert_IntToString+0x8>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	8a 83       	std	Y+2, r24	; 0x02
      a0:	7c 83       	std	Y+4, r23	; 0x04
      a2:	6b 83       	std	Y+3, r22	; 0x03
      a4:	19 82       	std	Y+1, r1	; 0x01
      a6:	8b 81       	ldd	r24, Y+3	; 0x03
      a8:	9c 81       	ldd	r25, Y+4	; 0x04
      aa:	89 2b       	or	r24, r25
      ac:	19 f4       	brne	.+6      	; 0xb4 <Convert_IntToString+0x22>
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	89 83       	std	Y+1, r24	; 0x01
      b2:	19 c0       	rjmp	.+50     	; 0xe6 <Convert_IntToString+0x54>
      b4:	8a 81       	ldd	r24, Y+2	; 0x02
      b6:	88 2f       	mov	r24, r24
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	29 2f       	mov	r18, r25
      bc:	2f 93       	push	r18
      be:	8f 93       	push	r24
      c0:	88 ea       	ldi	r24, 0xA8	; 168
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	89 2f       	mov	r24, r25
      c6:	8f 93       	push	r24
      c8:	88 ea       	ldi	r24, 0xA8	; 168
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	8f 93       	push	r24
      ce:	8c 81       	ldd	r24, Y+4	; 0x04
      d0:	8f 93       	push	r24
      d2:	8b 81       	ldd	r24, Y+3	; 0x03
      d4:	8f 93       	push	r24
      d6:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <sprintf>
      da:	0f 90       	pop	r0
      dc:	0f 90       	pop	r0
      de:	0f 90       	pop	r0
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	0f 90       	pop	r0
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	0f 90       	pop	r0
      ee:	0f 90       	pop	r0
      f0:	df 91       	pop	r29
      f2:	cf 91       	pop	r28
      f4:	08 95       	ret

000000f6 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u8Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f32 Copy_f32Number, pu8 Address_str){
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
      fe:	27 97       	sbiw	r28, 0x07	; 7
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	6a 83       	std	Y+2, r22	; 0x02
     10c:	7b 83       	std	Y+3, r23	; 0x03
     10e:	8c 83       	std	Y+4, r24	; 0x04
     110:	9d 83       	std	Y+5, r25	; 0x05
     112:	5f 83       	std	Y+7, r21	; 0x07
     114:	4e 83       	std	Y+6, r20	; 0x06


	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     116:	19 82       	std	Y+1, r1	; 0x01
		if(NULL == Address_str){
     118:	8e 81       	ldd	r24, Y+6	; 0x06
     11a:	9f 81       	ldd	r25, Y+7	; 0x07
     11c:	89 2b       	or	r24, r25
     11e:	19 f4       	brne	.+6      	; 0x126 <Convert_FloatToString+0x30>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	89 83       	std	Y+1, r24	; 0x01
     124:	1d c0       	rjmp	.+58     	; 0x160 <Convert_FloatToString+0x6a>
		}

		else{

			sprintf(Address_str, "%f", Copy_f32Number);
     126:	8d 81       	ldd	r24, Y+5	; 0x05
     128:	8f 93       	push	r24
     12a:	8c 81       	ldd	r24, Y+4	; 0x04
     12c:	8f 93       	push	r24
     12e:	8b 81       	ldd	r24, Y+3	; 0x03
     130:	8f 93       	push	r24
     132:	8a 81       	ldd	r24, Y+2	; 0x02
     134:	8f 93       	push	r24
     136:	8c ea       	ldi	r24, 0xAC	; 172
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	89 2f       	mov	r24, r25
     13c:	8f 93       	push	r24
     13e:	8c ea       	ldi	r24, 0xAC	; 172
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	8f 93       	push	r24
     144:	8f 81       	ldd	r24, Y+7	; 0x07
     146:	8f 93       	push	r24
     148:	8e 81       	ldd	r24, Y+6	; 0x06
     14a:	8f 93       	push	r24
     14c:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <sprintf>
     150:	8d b7       	in	r24, 0x3d	; 61
     152:	9e b7       	in	r25, 0x3e	; 62
     154:	08 96       	adiw	r24, 0x08	; 8
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
		}

		return Loc_enuStatus;
     160:	89 81       	ldd	r24, Y+1	; 0x01


}
     162:	27 96       	adiw	r28, 0x07	; 7
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <Convert_StringToInt>:


Std_StatusType Convert_StringToInt (u64* Address_Number, pu8 Address_str){
     174:	2f 92       	push	r2
     176:	3f 92       	push	r3
     178:	4f 92       	push	r4
     17a:	5f 92       	push	r5
     17c:	6f 92       	push	r6
     17e:	7f 92       	push	r7
     180:	8f 92       	push	r8
     182:	9f 92       	push	r9
     184:	af 92       	push	r10
     186:	bf 92       	push	r11
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	6e 97       	sbiw	r28, 0x1e	; 30
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
     1a8:	9c 87       	std	Y+12, r25	; 0x0c
     1aa:	8b 87       	std	Y+11, r24	; 0x0b
     1ac:	7e 87       	std	Y+14, r23	; 0x0e
     1ae:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     1b0:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     1b2:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     1b4:	1b 82       	std	Y+3, r1	; 0x03
     1b6:	1c 82       	std	Y+4, r1	; 0x04
     1b8:	1d 82       	std	Y+5, r1	; 0x05
     1ba:	1e 82       	std	Y+6, r1	; 0x06
     1bc:	1f 82       	std	Y+7, r1	; 0x07
     1be:	18 86       	std	Y+8, r1	; 0x08
     1c0:	19 86       	std	Y+9, r1	; 0x09
     1c2:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     1c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1c8:	89 2b       	or	r24, r25
     1ca:	21 f0       	breq	.+8      	; 0x1d4 <Convert_StringToInt+0x60>
     1cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     1d0:	89 2b       	or	r24, r25
     1d2:	19 f4       	brne	.+6      	; 0x1da <Convert_StringToInt+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	b4 c0       	rjmp	.+360    	; 0x342 <Convert_StringToInt+0x1ce>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     1da:	1a 82       	std	Y+2, r1	; 0x02
     1dc:	8c c0       	rjmp	.+280    	; 0x2f6 <Convert_StringToInt+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     1de:	2b 81       	ldd	r18, Y+3	; 0x03
     1e0:	3c 81       	ldd	r19, Y+4	; 0x04
     1e2:	4d 81       	ldd	r20, Y+5	; 0x05
     1e4:	5e 81       	ldd	r21, Y+6	; 0x06
     1e6:	6f 81       	ldd	r22, Y+7	; 0x07
     1e8:	78 85       	ldd	r23, Y+8	; 0x08
     1ea:	89 85       	ldd	r24, Y+9	; 0x09
     1ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ee:	22 2e       	mov	r2, r18
     1f0:	33 2e       	mov	r3, r19
     1f2:	44 2e       	mov	r4, r20
     1f4:	55 2e       	mov	r5, r21
     1f6:	66 2e       	mov	r6, r22
     1f8:	77 2e       	mov	r7, r23
     1fa:	88 2e       	mov	r8, r24
     1fc:	99 2e       	mov	r9, r25
     1fe:	22 2d       	mov	r18, r2
     200:	33 2d       	mov	r19, r3
     202:	44 2d       	mov	r20, r4
     204:	55 2d       	mov	r21, r5
     206:	66 2d       	mov	r22, r6
     208:	77 2d       	mov	r23, r7
     20a:	88 2d       	mov	r24, r8
     20c:	99 2d       	mov	r25, r9
     20e:	01 e0       	ldi	r16, 0x01	; 1
     210:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__ashldi3>
     214:	a2 2e       	mov	r10, r18
     216:	b3 2e       	mov	r11, r19
     218:	c4 2e       	mov	r12, r20
     21a:	d5 2e       	mov	r13, r21
     21c:	e6 2e       	mov	r14, r22
     21e:	f7 2e       	mov	r15, r23
     220:	08 2f       	mov	r16, r24
     222:	19 2f       	mov	r17, r25
     224:	2a 2c       	mov	r2, r10
     226:	3b 2c       	mov	r3, r11
     228:	4c 2c       	mov	r4, r12
     22a:	5d 2c       	mov	r5, r13
     22c:	6e 2c       	mov	r6, r14
     22e:	7f 2c       	mov	r7, r15
     230:	80 2e       	mov	r8, r16
     232:	91 2e       	mov	r9, r17
     234:	22 2d       	mov	r18, r2
     236:	33 2d       	mov	r19, r3
     238:	44 2d       	mov	r20, r4
     23a:	55 2d       	mov	r21, r5
     23c:	66 2d       	mov	r22, r6
     23e:	77 2d       	mov	r23, r7
     240:	88 2d       	mov	r24, r8
     242:	99 2d       	mov	r25, r9
     244:	02 e0       	ldi	r16, 0x02	; 2
     246:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <__ashldi3>
     24a:	2f 8b       	std	Y+23, r18	; 0x17
     24c:	38 8f       	std	Y+24, r19	; 0x18
     24e:	49 8f       	std	Y+25, r20	; 0x19
     250:	5a 8f       	std	Y+26, r21	; 0x1a
     252:	6b 8f       	std	Y+27, r22	; 0x1b
     254:	7c 8f       	std	Y+28, r23	; 0x1c
     256:	8d 8f       	std	Y+29, r24	; 0x1d
     258:	9e 8f       	std	Y+30, r25	; 0x1e
     25a:	22 2d       	mov	r18, r2
     25c:	33 2d       	mov	r19, r3
     25e:	44 2d       	mov	r20, r4
     260:	55 2d       	mov	r21, r5
     262:	66 2d       	mov	r22, r6
     264:	77 2d       	mov	r23, r7
     266:	88 2d       	mov	r24, r8
     268:	99 2d       	mov	r25, r9
     26a:	af 88       	ldd	r10, Y+23	; 0x17
     26c:	b8 8c       	ldd	r11, Y+24	; 0x18
     26e:	c9 8c       	ldd	r12, Y+25	; 0x19
     270:	da 8c       	ldd	r13, Y+26	; 0x1a
     272:	eb 8c       	ldd	r14, Y+27	; 0x1b
     274:	fc 8c       	ldd	r15, Y+28	; 0x1c
     276:	0d 8d       	ldd	r16, Y+29	; 0x1d
     278:	1e 8d       	ldd	r17, Y+30	; 0x1e
     27a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__adddi3>
     27e:	a2 2e       	mov	r10, r18
     280:	b3 2e       	mov	r11, r19
     282:	c4 2e       	mov	r12, r20
     284:	d5 2e       	mov	r13, r21
     286:	e6 2e       	mov	r14, r22
     288:	f7 2e       	mov	r15, r23
     28a:	08 2f       	mov	r16, r24
     28c:	19 2f       	mov	r17, r25
     28e:	8a 81       	ldd	r24, Y+2	; 0x02
     290:	88 2f       	mov	r24, r24
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	2d 85       	ldd	r18, Y+13	; 0x0d
     296:	3e 85       	ldd	r19, Y+14	; 0x0e
     298:	82 0f       	add	r24, r18
     29a:	93 1f       	adc	r25, r19
     29c:	fc 01       	movw	r30, r24
     29e:	80 81       	ld	r24, Z
     2a0:	88 2f       	mov	r24, r24
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	c0 97       	sbiw	r24, 0x30	; 48
     2a6:	98 8b       	std	Y+16, r25	; 0x10
     2a8:	8f 87       	std	Y+15, r24	; 0x0f
     2aa:	89 2f       	mov	r24, r25
     2ac:	88 0f       	add	r24, r24
     2ae:	88 0b       	sbc	r24, r24
     2b0:	89 8b       	std	Y+17, r24	; 0x11
     2b2:	8a 8b       	std	Y+18, r24	; 0x12
     2b4:	8b 8b       	std	Y+19, r24	; 0x13
     2b6:	8c 8b       	std	Y+20, r24	; 0x14
     2b8:	8d 8b       	std	Y+21, r24	; 0x15
     2ba:	8e 8b       	std	Y+22, r24	; 0x16
     2bc:	2a 2d       	mov	r18, r10
     2be:	3b 2d       	mov	r19, r11
     2c0:	4c 2d       	mov	r20, r12
     2c2:	5d 2d       	mov	r21, r13
     2c4:	6e 2d       	mov	r22, r14
     2c6:	7f 2d       	mov	r23, r15
     2c8:	80 2f       	mov	r24, r16
     2ca:	91 2f       	mov	r25, r17
     2cc:	af 84       	ldd	r10, Y+15	; 0x0f
     2ce:	b8 88       	ldd	r11, Y+16	; 0x10
     2d0:	c9 88       	ldd	r12, Y+17	; 0x11
     2d2:	da 88       	ldd	r13, Y+18	; 0x12
     2d4:	eb 88       	ldd	r14, Y+19	; 0x13
     2d6:	fc 88       	ldd	r15, Y+20	; 0x14
     2d8:	0d 89       	ldd	r16, Y+21	; 0x15
     2da:	1e 89       	ldd	r17, Y+22	; 0x16
     2dc:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__adddi3>
     2e0:	2b 83       	std	Y+3, r18	; 0x03
     2e2:	3c 83       	std	Y+4, r19	; 0x04
     2e4:	4d 83       	std	Y+5, r20	; 0x05
     2e6:	5e 83       	std	Y+6, r21	; 0x06
     2e8:	6f 83       	std	Y+7, r22	; 0x07
     2ea:	78 87       	std	Y+8, r23	; 0x08
     2ec:	89 87       	std	Y+9, r24	; 0x09
     2ee:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	8f 5f       	subi	r24, 0xFF	; 255
     2f4:	8a 83       	std	Y+2, r24	; 0x02
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	88 2f       	mov	r24, r24
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2fe:	3e 85       	ldd	r19, Y+14	; 0x0e
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	88 23       	and	r24, r24
     30a:	09 f0       	breq	.+2      	; 0x30e <Convert_StringToInt+0x19a>
     30c:	68 cf       	rjmp	.-304    	; 0x1de <Convert_StringToInt+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     30e:	8b 85       	ldd	r24, Y+11	; 0x0b
     310:	9c 85       	ldd	r25, Y+12	; 0x0c
     312:	2b 81       	ldd	r18, Y+3	; 0x03
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
     318:	2c 81       	ldd	r18, Y+4	; 0x04
     31a:	fc 01       	movw	r30, r24
     31c:	21 83       	std	Z+1, r18	; 0x01
     31e:	2d 81       	ldd	r18, Y+5	; 0x05
     320:	fc 01       	movw	r30, r24
     322:	22 83       	std	Z+2, r18	; 0x02
     324:	2e 81       	ldd	r18, Y+6	; 0x06
     326:	fc 01       	movw	r30, r24
     328:	23 83       	std	Z+3, r18	; 0x03
     32a:	2f 81       	ldd	r18, Y+7	; 0x07
     32c:	fc 01       	movw	r30, r24
     32e:	24 83       	std	Z+4, r18	; 0x04
     330:	28 85       	ldd	r18, Y+8	; 0x08
     332:	fc 01       	movw	r30, r24
     334:	25 83       	std	Z+5, r18	; 0x05
     336:	29 85       	ldd	r18, Y+9	; 0x09
     338:	fc 01       	movw	r30, r24
     33a:	26 83       	std	Z+6, r18	; 0x06
     33c:	2a 85       	ldd	r18, Y+10	; 0x0a
     33e:	fc 01       	movw	r30, r24
     340:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     342:	89 81       	ldd	r24, Y+1	; 0x01

}
     344:	6e 96       	adiw	r28, 0x1e	; 30
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
     358:	ff 90       	pop	r15
     35a:	ef 90       	pop	r14
     35c:	df 90       	pop	r13
     35e:	cf 90       	pop	r12
     360:	bf 90       	pop	r11
     362:	af 90       	pop	r10
     364:	9f 90       	pop	r9
     366:	8f 90       	pop	r8
     368:	7f 90       	pop	r7
     36a:	6f 90       	pop	r6
     36c:	5f 90       	pop	r5
     36e:	4f 90       	pop	r4
     370:	3f 90       	pop	r3
     372:	2f 90       	pop	r2
     374:	08 95       	ret

00000376 <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     37e:	8a e3       	ldi	r24, 0x3A	; 58
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	2d e7       	ldi	r18, 0x7D	; 125
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     388:	87 e3       	ldi	r24, 0x37	; 55
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	27 ef       	ldi	r18, 0xF7	; 247
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     392:	84 e3       	ldi	r24, 0x34	; 52
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	2f ef       	ldi	r18, 0xFF	; 255
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     39c:	81 e3       	ldi	r24, 0x31	; 49
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	10 82       	st	Z, r1

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     3a4:	8b e3       	ldi	r24, 0x3B	; 59
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	2c e0       	ldi	r18, 0x0C	; 12
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     3ae:	88 e3       	ldi	r24, 0x38	; 56
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	20 ec       	ldi	r18, 0xC0	; 192
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     3b8:	85 e3       	ldi	r24, 0x35	; 53
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     3c0:	82 e3       	ldi	r24, 0x32	; 50
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	2c ee       	ldi	r18, 0xEC	; 236
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
     3ca:	00 00       	nop
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <Port_enuSetPinDirection+0x6>
     3d8:	00 d0       	rcall	.+0      	; 0x3da <Port_enuSetPinDirection+0x8>
     3da:	1f 92       	push	r1
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	8c 83       	std	Y+4, r24	; 0x04
     3e2:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     3e4:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     3e6:	8c 81       	ldd	r24, Y+4	; 0x04
     3e8:	87 70       	andi	r24, 0x07	; 7
     3ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     3ec:	8c 81       	ldd	r24, Y+4	; 0x04
     3ee:	86 95       	lsr	r24
     3f0:	86 95       	lsr	r24
     3f2:	86 95       	lsr	r24
     3f4:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     3f6:	8c 81       	ldd	r24, Y+4	; 0x04
     3f8:	80 32       	cpi	r24, 0x20	; 32
     3fa:	18 f0       	brcs	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	59 c0       	rjmp	.+178    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	18 f0       	brcs	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	89 83       	std	Y+1, r24	; 0x01
     40c:	53 c0       	rjmp	.+166    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		}

	else{

			switch(Copy_u8PinDirection){
     40e:	8d 81       	ldd	r24, Y+5	; 0x05
     410:	88 2f       	mov	r24, r24
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	00 97       	sbiw	r24, 0x00	; 0
     416:	41 f1       	breq	.+80     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
							break;

			default:

				// impossible
					break;
     41c:	4b c0       	rjmp	.+150    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     41e:	8b 81       	ldd	r24, Y+3	; 0x03
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	80 5a       	subi	r24, 0xA0	; 160
     42a:	9f 4f       	sbci	r25, 0xFF	; 255
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	91 81       	ldd	r25, Z+1	; 0x01
     432:	2b 81       	ldd	r18, Y+3	; 0x03
     434:	22 2f       	mov	r18, r18
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	22 0f       	add	r18, r18
     43a:	33 1f       	adc	r19, r19
     43c:	20 5a       	subi	r18, 0xA0	; 160
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	f9 01       	movw	r30, r18
     442:	20 81       	ld	r18, Z
     444:	31 81       	ldd	r19, Z+1	; 0x01
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	62 2f       	mov	r22, r18
     44c:	2a 81       	ldd	r18, Y+2	; 0x02
     44e:	42 2f       	mov	r20, r18
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	21 e0       	ldi	r18, 0x01	; 1
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	4a 95       	dec	r20
     45e:	e2 f7       	brpl	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     460:	26 2b       	or	r18, r22
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
					break;
     466:	26 c0       	rjmp	.+76     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	88 2f       	mov	r24, r24
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	80 5a       	subi	r24, 0xA0	; 160
     474:	9f 4f       	sbci	r25, 0xFF	; 255
     476:	fc 01       	movw	r30, r24
     478:	80 81       	ld	r24, Z
     47a:	91 81       	ldd	r25, Z+1	; 0x01
     47c:	2b 81       	ldd	r18, Y+3	; 0x03
     47e:	22 2f       	mov	r18, r18
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	22 0f       	add	r18, r18
     484:	33 1f       	adc	r19, r19
     486:	20 5a       	subi	r18, 0xA0	; 160
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	f9 01       	movw	r30, r18
     48c:	20 81       	ld	r18, Z
     48e:	31 81       	ldd	r19, Z+1	; 0x01
     490:	f9 01       	movw	r30, r18
     492:	20 81       	ld	r18, Z
     494:	62 2f       	mov	r22, r18
     496:	2a 81       	ldd	r18, Y+2	; 0x02
     498:	42 2f       	mov	r20, r18
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a2:	22 0f       	add	r18, r18
     4a4:	33 1f       	adc	r19, r19
     4a6:	4a 95       	dec	r20
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4aa:	20 95       	com	r18
     4ac:	26 23       	and	r18, r22
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 83       	st	Z, r18
							break;
     4b2:	00 00       	nop

	}



	return Loc_enuState;
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
}
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <Port_enuSetPinMode+0x6>
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <Port_enuSetPinMode+0x8>
     4ce:	1f 92       	push	r1
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	8c 83       	std	Y+4, r24	; 0x04
     4d6:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     4d8:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     4da:	8c 81       	ldd	r24, Y+4	; 0x04
     4dc:	87 70       	andi	r24, 0x07	; 7
     4de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     4e0:	8c 81       	ldd	r24, Y+4	; 0x04
     4e2:	86 95       	lsr	r24
     4e4:	86 95       	lsr	r24
     4e6:	86 95       	lsr	r24
     4e8:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     4ea:	8c 81       	ldd	r24, Y+4	; 0x04
     4ec:	80 32       	cpi	r24, 0x20	; 32
     4ee:	18 f0       	brcs	.+6      	; 0x4f6 <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	43 c1       	rjmp	.+646    	; 0x77c <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
     4f6:	8d 81       	ldd	r24, Y+5	; 0x05
     4f8:	84 30       	cpi	r24, 0x04	; 4
     4fa:	18 f0       	brcs	.+6      	; 0x502 <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	89 83       	std	Y+1, r24	; 0x01
     500:	3d c1       	rjmp	.+634    	; 0x77c <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
     502:	8d 81       	ldd	r24, Y+5	; 0x05
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	91 05       	cpc	r25, r1
     50c:	09 f4       	brne	.+2      	; 0x510 <Port_enuSetPinMode+0x4a>
     50e:	57 c0       	rjmp	.+174    	; 0x5be <Port_enuSetPinMode+0xf8>
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	91 05       	cpc	r25, r1
     514:	1c f4       	brge	.+6      	; 0x51c <Port_enuSetPinMode+0x56>
     516:	89 2b       	or	r24, r25
     518:	49 f0       	breq	.+18     	; 0x52c <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
     51a:	30 c1       	rjmp	.+608    	; 0x77c <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
     51c:	82 30       	cpi	r24, 0x02	; 2
     51e:	91 05       	cpc	r25, r1
     520:	09 f4       	brne	.+2      	; 0x524 <Port_enuSetPinMode+0x5e>
     522:	97 c0       	rjmp	.+302    	; 0x652 <Port_enuSetPinMode+0x18c>
     524:	03 97       	sbiw	r24, 0x03	; 3
     526:	09 f4       	brne	.+2      	; 0x52a <Port_enuSetPinMode+0x64>
     528:	df c0       	rjmp	.+446    	; 0x6e8 <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
     52a:	28 c1       	rjmp	.+592    	; 0x77c <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	80 5a       	subi	r24, 0xA0	; 160
     538:	9f 4f       	sbci	r25, 0xFF	; 255
     53a:	fc 01       	movw	r30, r24
     53c:	80 81       	ld	r24, Z
     53e:	91 81       	ldd	r25, Z+1	; 0x01
     540:	2b 81       	ldd	r18, Y+3	; 0x03
     542:	22 2f       	mov	r18, r18
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	22 0f       	add	r18, r18
     548:	33 1f       	adc	r19, r19
     54a:	20 5a       	subi	r18, 0xA0	; 160
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
     54e:	f9 01       	movw	r30, r18
     550:	20 81       	ld	r18, Z
     552:	31 81       	ldd	r19, Z+1	; 0x01
     554:	f9 01       	movw	r30, r18
     556:	20 81       	ld	r18, Z
     558:	62 2f       	mov	r22, r18
     55a:	2a 81       	ldd	r18, Y+2	; 0x02
     55c:	42 2f       	mov	r20, r18
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	02 c0       	rjmp	.+4      	; 0x56a <Port_enuSetPinMode+0xa4>
     566:	22 0f       	add	r18, r18
     568:	33 1f       	adc	r19, r19
     56a:	4a 95       	dec	r20
     56c:	e2 f7       	brpl	.-8      	; 0x566 <Port_enuSetPinMode+0xa0>
     56e:	26 2b       	or	r18, r22
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	88 59       	subi	r24, 0x98	; 152
     580:	9f 4f       	sbci	r25, 0xFF	; 255
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
     586:	91 81       	ldd	r25, Z+1	; 0x01
     588:	2b 81       	ldd	r18, Y+3	; 0x03
     58a:	22 2f       	mov	r18, r18
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	22 0f       	add	r18, r18
     590:	33 1f       	adc	r19, r19
     592:	28 59       	subi	r18, 0x98	; 152
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	f9 01       	movw	r30, r18
     598:	20 81       	ld	r18, Z
     59a:	31 81       	ldd	r19, Z+1	; 0x01
     59c:	f9 01       	movw	r30, r18
     59e:	20 81       	ld	r18, Z
     5a0:	62 2f       	mov	r22, r18
     5a2:	2a 81       	ldd	r18, Y+2	; 0x02
     5a4:	42 2f       	mov	r20, r18
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <Port_enuSetPinMode+0xec>
     5ae:	22 0f       	add	r18, r18
     5b0:	33 1f       	adc	r19, r19
     5b2:	4a 95       	dec	r20
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <Port_enuSetPinMode+0xe8>
     5b6:	26 2b       	or	r18, r22
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18
					break;
     5bc:	df c0       	rjmp	.+446    	; 0x77c <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	88 2f       	mov	r24, r24
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	80 5a       	subi	r24, 0xA0	; 160
     5ca:	9f 4f       	sbci	r25, 0xFF	; 255
     5cc:	fc 01       	movw	r30, r24
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	2b 81       	ldd	r18, Y+3	; 0x03
     5d4:	22 2f       	mov	r18, r18
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	22 0f       	add	r18, r18
     5da:	33 1f       	adc	r19, r19
     5dc:	20 5a       	subi	r18, 0xA0	; 160
     5de:	3f 4f       	sbci	r19, 0xFF	; 255
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	31 81       	ldd	r19, Z+1	; 0x01
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	62 2f       	mov	r22, r18
     5ec:	2a 81       	ldd	r18, Y+2	; 0x02
     5ee:	42 2f       	mov	r20, r18
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <Port_enuSetPinMode+0x136>
     5f8:	22 0f       	add	r18, r18
     5fa:	33 1f       	adc	r19, r19
     5fc:	4a 95       	dec	r20
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <Port_enuSetPinMode+0x132>
     600:	26 2b       	or	r18, r22
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	88 2f       	mov	r24, r24
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	88 59       	subi	r24, 0x98	; 152
     612:	9f 4f       	sbci	r25, 0xFF	; 255
     614:	fc 01       	movw	r30, r24
     616:	80 81       	ld	r24, Z
     618:	91 81       	ldd	r25, Z+1	; 0x01
     61a:	2b 81       	ldd	r18, Y+3	; 0x03
     61c:	22 2f       	mov	r18, r18
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	22 0f       	add	r18, r18
     622:	33 1f       	adc	r19, r19
     624:	28 59       	subi	r18, 0x98	; 152
     626:	3f 4f       	sbci	r19, 0xFF	; 255
     628:	f9 01       	movw	r30, r18
     62a:	20 81       	ld	r18, Z
     62c:	31 81       	ldd	r19, Z+1	; 0x01
     62e:	f9 01       	movw	r30, r18
     630:	20 81       	ld	r18, Z
     632:	62 2f       	mov	r22, r18
     634:	2a 81       	ldd	r18, Y+2	; 0x02
     636:	42 2f       	mov	r20, r18
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	02 c0       	rjmp	.+4      	; 0x644 <Port_enuSetPinMode+0x17e>
     640:	22 0f       	add	r18, r18
     642:	33 1f       	adc	r19, r19
     644:	4a 95       	dec	r20
     646:	e2 f7       	brpl	.-8      	; 0x640 <Port_enuSetPinMode+0x17a>
     648:	20 95       	com	r18
     64a:	26 23       	and	r18, r22
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18
							break;
     650:	95 c0       	rjmp	.+298    	; 0x77c <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	88 2f       	mov	r24, r24
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	80 5a       	subi	r24, 0xA0	; 160
     65e:	9f 4f       	sbci	r25, 0xFF	; 255
     660:	fc 01       	movw	r30, r24
     662:	80 81       	ld	r24, Z
     664:	91 81       	ldd	r25, Z+1	; 0x01
     666:	2b 81       	ldd	r18, Y+3	; 0x03
     668:	22 2f       	mov	r18, r18
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	22 0f       	add	r18, r18
     66e:	33 1f       	adc	r19, r19
     670:	20 5a       	subi	r18, 0xA0	; 160
     672:	3f 4f       	sbci	r19, 0xFF	; 255
     674:	f9 01       	movw	r30, r18
     676:	20 81       	ld	r18, Z
     678:	31 81       	ldd	r19, Z+1	; 0x01
     67a:	f9 01       	movw	r30, r18
     67c:	20 81       	ld	r18, Z
     67e:	62 2f       	mov	r22, r18
     680:	2a 81       	ldd	r18, Y+2	; 0x02
     682:	42 2f       	mov	r20, r18
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	02 c0       	rjmp	.+4      	; 0x690 <Port_enuSetPinMode+0x1ca>
     68c:	22 0f       	add	r18, r18
     68e:	33 1f       	adc	r19, r19
     690:	4a 95       	dec	r20
     692:	e2 f7       	brpl	.-8      	; 0x68c <Port_enuSetPinMode+0x1c6>
     694:	20 95       	com	r18
     696:	26 23       	and	r18, r22
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	88 2f       	mov	r24, r24
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	88 59       	subi	r24, 0x98	; 152
     6a8:	9f 4f       	sbci	r25, 0xFF	; 255
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	2b 81       	ldd	r18, Y+3	; 0x03
     6b2:	22 2f       	mov	r18, r18
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	22 0f       	add	r18, r18
     6b8:	33 1f       	adc	r19, r19
     6ba:	28 59       	subi	r18, 0x98	; 152
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	31 81       	ldd	r19, Z+1	; 0x01
     6c4:	f9 01       	movw	r30, r18
     6c6:	20 81       	ld	r18, Z
     6c8:	62 2f       	mov	r22, r18
     6ca:	2a 81       	ldd	r18, Y+2	; 0x02
     6cc:	42 2f       	mov	r20, r18
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	21 e0       	ldi	r18, 0x01	; 1
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <Port_enuSetPinMode+0x214>
     6d6:	22 0f       	add	r18, r18
     6d8:	33 1f       	adc	r19, r19
     6da:	4a 95       	dec	r20
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <Port_enuSetPinMode+0x210>
     6de:	20 95       	com	r18
     6e0:	26 23       	and	r18, r22
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
								break;
     6e6:	4a c0       	rjmp	.+148    	; 0x77c <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	80 5a       	subi	r24, 0xA0	; 160
     6f4:	9f 4f       	sbci	r25, 0xFF	; 255
     6f6:	fc 01       	movw	r30, r24
     6f8:	80 81       	ld	r24, Z
     6fa:	91 81       	ldd	r25, Z+1	; 0x01
     6fc:	2b 81       	ldd	r18, Y+3	; 0x03
     6fe:	22 2f       	mov	r18, r18
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	22 0f       	add	r18, r18
     704:	33 1f       	adc	r19, r19
     706:	20 5a       	subi	r18, 0xA0	; 160
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	f9 01       	movw	r30, r18
     70c:	20 81       	ld	r18, Z
     70e:	31 81       	ldd	r19, Z+1	; 0x01
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	62 2f       	mov	r22, r18
     716:	2a 81       	ldd	r18, Y+2	; 0x02
     718:	42 2f       	mov	r20, r18
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	02 c0       	rjmp	.+4      	; 0x726 <Port_enuSetPinMode+0x260>
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	4a 95       	dec	r20
     728:	e2 f7       	brpl	.-8      	; 0x722 <Port_enuSetPinMode+0x25c>
     72a:	20 95       	com	r18
     72c:	26 23       	and	r18, r22
     72e:	fc 01       	movw	r30, r24
     730:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     732:	8b 81       	ldd	r24, Y+3	; 0x03
     734:	88 2f       	mov	r24, r24
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	88 59       	subi	r24, 0x98	; 152
     73e:	9f 4f       	sbci	r25, 0xFF	; 255
     740:	fc 01       	movw	r30, r24
     742:	80 81       	ld	r24, Z
     744:	91 81       	ldd	r25, Z+1	; 0x01
     746:	2b 81       	ldd	r18, Y+3	; 0x03
     748:	22 2f       	mov	r18, r18
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	22 0f       	add	r18, r18
     74e:	33 1f       	adc	r19, r19
     750:	28 59       	subi	r18, 0x98	; 152
     752:	3f 4f       	sbci	r19, 0xFF	; 255
     754:	f9 01       	movw	r30, r18
     756:	20 81       	ld	r18, Z
     758:	31 81       	ldd	r19, Z+1	; 0x01
     75a:	f9 01       	movw	r30, r18
     75c:	20 81       	ld	r18, Z
     75e:	62 2f       	mov	r22, r18
     760:	2a 81       	ldd	r18, Y+2	; 0x02
     762:	42 2f       	mov	r20, r18
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	21 e0       	ldi	r18, 0x01	; 1
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	02 c0       	rjmp	.+4      	; 0x770 <Port_enuSetPinMode+0x2aa>
     76c:	22 0f       	add	r18, r18
     76e:	33 1f       	adc	r19, r19
     770:	4a 95       	dec	r20
     772:	e2 f7       	brpl	.-8      	; 0x76c <Port_enuSetPinMode+0x2a6>
     774:	26 2b       	or	r18, r22
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
								break;
     77a:	00 00       	nop



	}

	return Loc_enuState;
     77c:	89 81       	ldd	r24, Y+1	; 0x01
}
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	1f 92       	push	r1
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     798:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
     79a:	8f e5       	ldi	r24, 0x5F	; 95
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	2f e5       	ldi	r18, 0x5F	; 95
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	f9 01       	movw	r30, r18
     7a4:	20 81       	ld	r18, Z
     7a6:	20 68       	ori	r18, 0x80	; 128
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18

	return Loc_enuGieState;
     7ac:	89 81       	ldd	r24, Y+1	; 0x01

}
     7ae:	0f 90       	pop	r0
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	1f 92       	push	r1
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     7c0:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
     7c2:	8f e5       	ldi	r24, 0x5F	; 95
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	2f e5       	ldi	r18, 0x5F	; 95
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	f9 01       	movw	r30, r18
     7cc:	20 81       	ld	r18, Z
     7ce:	2f 77       	andi	r18, 0x7F	; 127
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18

		return Loc_enuGieState;
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
}
     7d6:	0f 90       	pop	r0
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <Gie_enuSetGloablInterrupt+0x6>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     7ea:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
     7ec:	8f e5       	ldi	r24, 0x5F	; 95
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	2f e5       	ldi	r18, 0x5F	; 95
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	f9 01       	movw	r30, r18
     7f6:	20 81       	ld	r18, Z
     7f8:	42 2f       	mov	r20, r18
     7fa:	4f 77       	andi	r20, 0x7F	; 127
     7fc:	2a 81       	ldd	r18, Y+2	; 0x02
     7fe:	22 2f       	mov	r18, r18
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	36 95       	lsr	r19
     804:	32 2f       	mov	r19, r18
     806:	22 27       	eor	r18, r18
     808:	37 95       	ror	r19
     80a:	27 95       	ror	r18
     80c:	24 2b       	or	r18, r20
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18

			return Loc_enuGieState;
     812:	89 81       	ldd	r24, Y+1	; 0x01
}
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	00 d0       	rcall	.+0      	; 0x824 <Gie_enuGetGloablInterrupt+0x6>
     824:	00 d0       	rcall	.+0      	; 0x826 <Gie_enuGetGloablInterrupt+0x8>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	8a 83       	std	Y+2, r24	; 0x02
     82c:	7c 83       	std	Y+4, r23	; 0x04
     82e:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     830:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
     832:	8b 81       	ldd	r24, Y+3	; 0x03
     834:	9c 81       	ldd	r25, Y+4	; 0x04
     836:	89 2b       	or	r24, r25
     838:	19 f4       	brne	.+6      	; 0x840 <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	89 83       	std	Y+1, r24	; 0x01
     83e:	0c c0       	rjmp	.+24     	; 0x858 <Gie_enuGetGloablInterrupt+0x3a>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
     840:	8f e5       	ldi	r24, 0x5F	; 95
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	fc 01       	movw	r30, r24
     846:	80 81       	ld	r24, Z
     848:	28 2f       	mov	r18, r24
     84a:	22 1f       	adc	r18, r18
     84c:	22 27       	eor	r18, r18
     84e:	22 1f       	adc	r18, r18
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
     858:	89 81       	ldd	r24, Y+1	; 0x01
}
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	00 d0       	rcall	.+0      	; 0x86e <Exti_enuEnable+0x6>
     86e:	1f 92       	push	r1
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	8a 83       	std	Y+2, r24	; 0x02
     876:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     87c:	8a 81       	ldd	r24, Y+2	; 0x02
     87e:	83 30       	cpi	r24, 0x03	; 3
     880:	18 f0       	brcs	.+6      	; 0x888 <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     882:	83 e0       	ldi	r24, 0x03	; 3
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	8f c0       	rjmp	.+286    	; 0x9a6 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	88 2f       	mov	r24, r24
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	91 05       	cpc	r25, r1
     892:	89 f1       	breq	.+98     	; 0x8f6 <Exti_enuEnable+0x8e>
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	91 05       	cpc	r25, r1
     898:	09 f4       	brne	.+2      	; 0x89c <Exti_enuEnable+0x34>
     89a:	62 c0       	rjmp	.+196    	; 0x960 <Exti_enuEnable+0xf8>
     89c:	89 2b       	or	r24, r25
     89e:	09 f0       	breq	.+2      	; 0x8a2 <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
     8a0:	82 c0       	rjmp	.+260    	; 0x9a6 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
     8a2:	85 e5       	ldi	r24, 0x55	; 85
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	25 e5       	ldi	r18, 0x55	; 85
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	f9 01       	movw	r30, r18
     8ac:	20 81       	ld	r18, Z
     8ae:	32 2f       	mov	r19, r18
     8b0:	3e 7f       	andi	r19, 0xFE	; 254
     8b2:	2b 81       	ldd	r18, Y+3	; 0x03
     8b4:	21 70       	andi	r18, 0x01	; 1
     8b6:	23 2b       	or	r18, r19
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
     8bc:	85 e5       	ldi	r24, 0x55	; 85
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	25 e5       	ldi	r18, 0x55	; 85
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	f9 01       	movw	r30, r18
     8c6:	20 81       	ld	r18, Z
     8c8:	42 2f       	mov	r20, r18
     8ca:	4d 7f       	andi	r20, 0xFD	; 253
     8cc:	2b 81       	ldd	r18, Y+3	; 0x03
     8ce:	26 95       	lsr	r18
     8d0:	22 2f       	mov	r18, r18
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	21 70       	andi	r18, 0x01	; 1
     8d6:	33 27       	eor	r19, r19
     8d8:	22 0f       	add	r18, r18
     8da:	33 1f       	adc	r19, r19
     8dc:	24 2b       	or	r18, r20
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
     8e2:	8b e5       	ldi	r24, 0x5B	; 91
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	2b e5       	ldi	r18, 0x5B	; 91
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	f9 01       	movw	r30, r18
     8ec:	20 81       	ld	r18, Z
     8ee:	20 64       	ori	r18, 0x40	; 64
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18

			break;
     8f4:	58 c0       	rjmp	.+176    	; 0x9a6 <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
     8f6:	85 e5       	ldi	r24, 0x55	; 85
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	25 e5       	ldi	r18, 0x55	; 85
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	f9 01       	movw	r30, r18
     900:	20 81       	ld	r18, Z
     902:	42 2f       	mov	r20, r18
     904:	4b 7f       	andi	r20, 0xFB	; 251
     906:	2b 81       	ldd	r18, Y+3	; 0x03
     908:	22 2f       	mov	r18, r18
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	21 70       	andi	r18, 0x01	; 1
     90e:	33 27       	eor	r19, r19
     910:	22 0f       	add	r18, r18
     912:	33 1f       	adc	r19, r19
     914:	22 0f       	add	r18, r18
     916:	33 1f       	adc	r19, r19
     918:	24 2b       	or	r18, r20
     91a:	fc 01       	movw	r30, r24
     91c:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
     91e:	85 e5       	ldi	r24, 0x55	; 85
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	25 e5       	ldi	r18, 0x55	; 85
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	f9 01       	movw	r30, r18
     928:	20 81       	ld	r18, Z
     92a:	42 2f       	mov	r20, r18
     92c:	47 7f       	andi	r20, 0xF7	; 247
     92e:	2b 81       	ldd	r18, Y+3	; 0x03
     930:	26 95       	lsr	r18
     932:	22 2f       	mov	r18, r18
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	21 70       	andi	r18, 0x01	; 1
     938:	33 27       	eor	r19, r19
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	22 0f       	add	r18, r18
     940:	33 1f       	adc	r19, r19
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	24 2b       	or	r18, r20
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
     94c:	8b e5       	ldi	r24, 0x5B	; 91
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	2b e5       	ldi	r18, 0x5B	; 91
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	f9 01       	movw	r30, r18
     956:	20 81       	ld	r18, Z
     958:	20 68       	ori	r18, 0x80	; 128
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18
			break;
     95e:	23 c0       	rjmp	.+70     	; 0x9a6 <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
     960:	84 e5       	ldi	r24, 0x54	; 84
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	24 e5       	ldi	r18, 0x54	; 84
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	f9 01       	movw	r30, r18
     96a:	20 81       	ld	r18, Z
     96c:	42 2f       	mov	r20, r18
     96e:	4f 7b       	andi	r20, 0xBF	; 191
     970:	2b 81       	ldd	r18, Y+3	; 0x03
     972:	22 2f       	mov	r18, r18
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	21 70       	andi	r18, 0x01	; 1
     978:	33 27       	eor	r19, r19
     97a:	00 24       	eor	r0, r0
     97c:	36 95       	lsr	r19
     97e:	27 95       	ror	r18
     980:	07 94       	ror	r0
     982:	36 95       	lsr	r19
     984:	27 95       	ror	r18
     986:	07 94       	ror	r0
     988:	32 2f       	mov	r19, r18
     98a:	20 2d       	mov	r18, r0
     98c:	24 2b       	or	r18, r20
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
     992:	8b e5       	ldi	r24, 0x5B	; 91
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	2b e5       	ldi	r18, 0x5B	; 91
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	f9 01       	movw	r30, r18
     99c:	20 81       	ld	r18, Z
     99e:	20 62       	ori	r18, 0x20	; 32
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
			break;
     9a4:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
     9a6:	89 81       	ldd	r24, Y+1	; 0x01

}
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <Exti_enuDisable+0x6>
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     9c4:	8a 81       	ldd	r24, Y+2	; 0x02
     9c6:	83 30       	cpi	r24, 0x03	; 3
     9c8:	18 f0       	brcs	.+6      	; 0x9d0 <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     9ca:	83 e0       	ldi	r24, 0x03	; 3
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	2a c0       	rjmp	.+84     	; 0xa24 <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	88 2f       	mov	r24, r24
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	91 05       	cpc	r25, r1
     9da:	81 f0       	breq	.+32     	; 0x9fc <Exti_enuDisable+0x48>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	91 05       	cpc	r25, r1
     9e0:	b9 f0       	breq	.+46     	; 0xa10 <Exti_enuDisable+0x5c>
     9e2:	89 2b       	or	r24, r25
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
     9e6:	1e c0       	rjmp	.+60     	; 0xa24 <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
     9e8:	8b e5       	ldi	r24, 0x5B	; 91
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	2b e5       	ldi	r18, 0x5B	; 91
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	f9 01       	movw	r30, r18
     9f2:	20 81       	ld	r18, Z
     9f4:	2f 7b       	andi	r18, 0xBF	; 191
     9f6:	fc 01       	movw	r30, r24
     9f8:	20 83       	st	Z, r18
			break;
     9fa:	14 c0       	rjmp	.+40     	; 0xa24 <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
     9fc:	8b e5       	ldi	r24, 0x5B	; 91
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	2b e5       	ldi	r18, 0x5B	; 91
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	f9 01       	movw	r30, r18
     a06:	20 81       	ld	r18, Z
     a08:	2f 77       	andi	r18, 0x7F	; 127
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18
			break;
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
     a10:	8b e5       	ldi	r24, 0x5B	; 91
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	2b e5       	ldi	r18, 0x5B	; 91
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	f9 01       	movw	r30, r18
     a1a:	20 81       	ld	r18, Z
     a1c:	2f 7d       	andi	r18, 0xDF	; 223
     a1e:	fc 01       	movw	r30, r24
     a20:	20 83       	st	Z, r18
			break;
     a22:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
     a24:	89 81       	ldd	r24, Y+1	; 0x01

}
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	00 d0       	rcall	.+0      	; 0xa36 <Exti_enuSetCallbackFunction+0x6>
     a36:	00 d0       	rcall	.+0      	; 0xa38 <Exti_enuSetCallbackFunction+0x8>
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	8a 83       	std	Y+2, r24	; 0x02
     a3e:	7c 83       	std	Y+4, r23	; 0x04
     a40:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	83 30       	cpi	r24, 0x03	; 3
     a4a:	18 f0       	brcs	.+6      	; 0xa52 <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	89 83       	std	Y+1, r24	; 0x01
     a50:	13 c0       	rjmp	.+38     	; 0xa78 <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	89 2b       	or	r24, r25
     a58:	19 f4       	brne	.+6      	; 0xa60 <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	0c c0       	rjmp	.+24     	; 0xa78 <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	88 2f       	mov	r24, r24
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	80 54       	subi	r24, 0x40	; 64
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	2b 81       	ldd	r18, Y+3	; 0x03
     a70:	3c 81       	ldd	r19, Y+4	; 0x04
     a72:	fc 01       	movw	r30, r24
     a74:	31 83       	std	Z+1, r19	; 0x01
     a76:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
     a78:	89 81       	ldd	r24, Y+1	; 0x01

}
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a90:	0f 92       	push	r0
     a92:	11 24       	eor	r1, r1
     a94:	2f 93       	push	r18
     a96:	3f 93       	push	r19
     a98:	4f 93       	push	r20
     a9a:	5f 93       	push	r21
     a9c:	6f 93       	push	r22
     a9e:	7f 93       	push	r23
     aa0:	8f 93       	push	r24
     aa2:	9f 93       	push	r25
     aa4:	af 93       	push	r26
     aa6:	bf 93       	push	r27
     aa8:	ef 93       	push	r30
     aaa:	ff 93       	push	r31
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
     ab4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end>
     ab8:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__data_end+0x1>
     abc:	89 2b       	or	r24, r25
     abe:	31 f0       	breq	.+12     	; 0xacc <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
     ac0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end>
     ac4:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__data_end+0x1>
     ac8:	fc 01       	movw	r30, r24
     aca:	09 95       	icall

}
     acc:	00 00       	nop
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	ff 91       	pop	r31
     ad4:	ef 91       	pop	r30
     ad6:	bf 91       	pop	r27
     ad8:	af 91       	pop	r26
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	7f 91       	pop	r23
     ae0:	6f 91       	pop	r22
     ae2:	5f 91       	pop	r21
     ae4:	4f 91       	pop	r20
     ae6:	3f 91       	pop	r19
     ae8:	2f 91       	pop	r18
     aea:	0f 90       	pop	r0
     aec:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     afe:	0f 92       	push	r0
     b00:	11 24       	eor	r1, r1
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
     b22:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end+0x2>
     b26:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x3>
     b2a:	89 2b       	or	r24, r25
     b2c:	31 f0       	breq	.+12     	; 0xb3a <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
     b2e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end+0x2>
     b32:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x3>
     b36:	fc 01       	movw	r30, r24
     b38:	09 95       	icall

}
     b3a:	00 00       	nop
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	7f 91       	pop	r23
     b4e:	6f 91       	pop	r22
     b50:	5f 91       	pop	r21
     b52:	4f 91       	pop	r20
     b54:	3f 91       	pop	r19
     b56:	2f 91       	pop	r18
     b58:	0f 90       	pop	r0
     b5a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
     b64:	1f 92       	push	r1
     b66:	0f 92       	push	r0
     b68:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	2f 93       	push	r18
     b72:	3f 93       	push	r19
     b74:	4f 93       	push	r20
     b76:	5f 93       	push	r21
     b78:	6f 93       	push	r22
     b7a:	7f 93       	push	r23
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
     b90:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end+0x4>
     b94:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__data_end+0x5>
     b98:	89 2b       	or	r24, r25
     b9a:	31 f0       	breq	.+12     	; 0xba8 <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
     b9c:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end+0x4>
     ba0:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__data_end+0x5>
     ba4:	fc 01       	movw	r30, r24
     ba6:	09 95       	icall

}
     ba8:	00 00       	nop
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	7f 91       	pop	r23
     bbc:	6f 91       	pop	r22
     bbe:	5f 91       	pop	r21
     bc0:	4f 91       	pop	r20
     bc2:	3f 91       	pop	r19
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <Dio_enuWriteChannel+0x6>
     bd8:	00 d0       	rcall	.+0      	; 0xbda <Dio_enuWriteChannel+0x8>
     bda:	1f 92       	push	r1
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	8c 83       	std	Y+4, r24	; 0x04
     be2:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     be4:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
     be8:	87 70       	andi	r24, 0x07	; 7
     bea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	86 95       	lsr	r24
     bf0:	86 95       	lsr	r24
     bf2:	86 95       	lsr	r24
     bf4:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
     bf8:	80 32       	cpi	r24, 0x20	; 32
     bfa:	18 f0       	brcs	.+6      	; 0xc02 <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	4e c0       	rjmp	.+156    	; 0xc9e <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	80 59       	subi	r24, 0x90	; 144
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	fc 01       	movw	r30, r24
     c12:	80 81       	ld	r24, Z
     c14:	91 81       	ldd	r25, Z+1	; 0x01
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	2a 81       	ldd	r18, Y+2	; 0x02
     c20:	22 2f       	mov	r18, r18
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <Dio_enuWriteChannel+0x58>
     c26:	95 95       	asr	r25
     c28:	87 95       	ror	r24
     c2a:	2a 95       	dec	r18
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <Dio_enuWriteChannel+0x54>
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	99 27       	eor	r25, r25
     c32:	89 2b       	or	r24, r25
     c34:	19 f4       	brne	.+6      	; 0xc3c <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	89 83       	std	Y+1, r24	; 0x01
     c3a:	31 c0       	rjmp	.+98     	; 0xc9e <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	88 58       	subi	r24, 0x88	; 136
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	fc 01       	movw	r30, r24
     c4c:	80 81       	ld	r24, Z
     c4e:	91 81       	ldd	r25, Z+1	; 0x01
     c50:	2b 81       	ldd	r18, Y+3	; 0x03
     c52:	22 2f       	mov	r18, r18
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	28 58       	subi	r18, 0x88	; 136
     c5c:	3f 4f       	sbci	r19, 0xFF	; 255
     c5e:	f9 01       	movw	r30, r18
     c60:	20 81       	ld	r18, Z
     c62:	31 81       	ldd	r19, Z+1	; 0x01
     c64:	f9 01       	movw	r30, r18
     c66:	20 81       	ld	r18, Z
     c68:	62 2f       	mov	r22, r18
     c6a:	2a 81       	ldd	r18, Y+2	; 0x02
     c6c:	42 2f       	mov	r20, r18
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	21 e0       	ldi	r18, 0x01	; 1
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <Dio_enuWriteChannel+0xa8>
     c76:	22 0f       	add	r18, r18
     c78:	33 1f       	adc	r19, r19
     c7a:	4a 95       	dec	r20
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <Dio_enuWriteChannel+0xa4>
     c7e:	20 95       	com	r18
     c80:	62 23       	and	r22, r18
     c82:	2d 81       	ldd	r18, Y+5	; 0x05
     c84:	22 2f       	mov	r18, r18
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	4a 81       	ldd	r20, Y+2	; 0x02
     c8a:	44 2f       	mov	r20, r20
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <Dio_enuWriteChannel+0xc2>
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	4a 95       	dec	r20
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <Dio_enuWriteChannel+0xbe>
     c98:	26 2b       	or	r18, r22
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 83       	st	Z, r18

}

	return Loc_enuState;
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <Dio_enuReadChannel+0x6>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <Dio_enuReadChannel+0x8>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <Dio_enuReadChannel+0xa>
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	8c 83       	std	Y+4, r24	; 0x04
     cc0:	7e 83       	std	Y+6, r23	; 0x06
     cc2:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     cc4:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     cc6:	8c 81       	ldd	r24, Y+4	; 0x04
     cc8:	87 70       	andi	r24, 0x07	; 7
     cca:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	86 95       	lsr	r24
     cd0:	86 95       	lsr	r24
     cd2:	86 95       	lsr	r24
     cd4:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	80 32       	cpi	r24, 0x20	; 32
     cda:	18 f0       	brcs	.+6      	; 0xce2 <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	40 c0       	rjmp	.+128    	; 0xd62 <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	80 59       	subi	r24, 0x90	; 144
     cee:	9f 4f       	sbci	r25, 0xFF	; 255
     cf0:	fc 01       	movw	r30, r24
     cf2:	80 81       	ld	r24, Z
     cf4:	91 81       	ldd	r25, Z+1	; 0x01
     cf6:	fc 01       	movw	r30, r24
     cf8:	80 81       	ld	r24, Z
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	2a 81       	ldd	r18, Y+2	; 0x02
     d00:	22 2f       	mov	r18, r18
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <Dio_enuReadChannel+0x5a>
     d06:	95 95       	asr	r25
     d08:	87 95       	ror	r24
     d0a:	2a 95       	dec	r18
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <Dio_enuReadChannel+0x56>
     d0e:	81 70       	andi	r24, 0x01	; 1
     d10:	99 27       	eor	r25, r25
     d12:	89 2b       	or	r24, r25
     d14:	19 f0       	breq	.+6      	; 0xd1c <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	23 c0       	rjmp	.+70     	; 0xd62 <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	89 2b       	or	r24, r25
     d22:	19 f4       	brne	.+6      	; 0xd2a <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     d24:	84 e0       	ldi	r24, 0x04	; 4
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	1c c0       	rjmp	.+56     	; 0xd62 <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
     d2a:	8b 81       	ldd	r24, Y+3	; 0x03
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	80 58       	subi	r24, 0x80	; 128
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	fc 01       	movw	r30, r24
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	fc 01       	movw	r30, r24
     d40:	80 81       	ld	r24, Z
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	2a 81       	ldd	r18, Y+2	; 0x02
     d48:	22 2f       	mov	r18, r18
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <Dio_enuReadChannel+0xa2>
     d4e:	95 95       	asr	r25
     d50:	87 95       	ror	r24
     d52:	2a 95       	dec	r18
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <Dio_enuReadChannel+0x9e>
     d56:	28 2f       	mov	r18, r24
     d58:	21 70       	andi	r18, 0x01	; 1
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	9e 81       	ldd	r25, Y+6	; 0x06
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18


	}

		return Loc_enuState;
     d62:	89 81       	ldd	r24, Y+1	; 0x01

}
     d64:	26 96       	adiw	r28, 0x06	; 6
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <Dio_enuWritePort+0x6>
     d7c:	1f 92       	push	r1
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	8a 83       	std	Y+2, r24	; 0x02
     d84:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     d86:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	18 f0       	brcs	.+6      	; 0xd94 <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	1e c0       	rjmp	.+60     	; 0xdd0 <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	80 59       	subi	r24, 0x90	; 144
     da0:	9f 4f       	sbci	r25, 0xFF	; 255
     da2:	fc 01       	movw	r30, r24
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	fc 01       	movw	r30, r24
     daa:	80 81       	ld	r24, Z
     dac:	8f 3f       	cpi	r24, 0xFF	; 255
     dae:	19 f0       	breq	.+6      	; 0xdb6 <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	88 58       	subi	r24, 0x88	; 136
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	2b 81       	ldd	r18, Y+3	; 0x03
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     dd0:	89 81       	ldd	r24, Y+1	; 0x01



}
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	00 d0       	rcall	.+0      	; 0xde4 <Dio_enuReadPort+0x6>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <Dio_enuReadPort+0x8>
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	8a 83       	std	Y+2, r24	; 0x02
     dec:	7c 83       	std	Y+4, r23	; 0x04
     dee:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     df0:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	84 30       	cpi	r24, 0x04	; 4
     df6:	18 f0       	brcs	.+6      	; 0xdfe <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	28 c0       	rjmp	.+80     	; 0xe4e <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	88 2f       	mov	r24, r24
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	80 59       	subi	r24, 0x90	; 144
     e0a:	9f 4f       	sbci	r25, 0xFF	; 255
     e0c:	fc 01       	movw	r30, r24
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	fc 01       	movw	r30, r24
     e14:	80 81       	ld	r24, Z
     e16:	88 23       	and	r24, r24
     e18:	19 f0       	breq	.+6      	; 0xe20 <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	17 c0       	rjmp	.+46     	; 0xe4e <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	89 2b       	or	r24, r25
     e26:	19 f4       	brne	.+6      	; 0xe2e <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     e28:	84 e0       	ldi	r24, 0x04	; 4
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	10 c0       	rjmp	.+32     	; 0xe4e <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	80 58       	subi	r24, 0x80	; 128
     e3a:	9f 4f       	sbci	r25, 0xFF	; 255
     e3c:	fc 01       	movw	r30, r24
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	fc 01       	movw	r30, r24
     e44:	20 81       	ld	r18, Z
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	fc 01       	movw	r30, r24
     e4c:	20 83       	st	Z, r18

		}

			return Loc_enuState;
     e4e:	89 81       	ldd	r24, Y+1	; 0x01

}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	00 d0       	rcall	.+0      	; 0xe64 <Dio_enuFlipChannel+0x6>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <Dio_enuFlipChannel+0x8>
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     e6c:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	87 70       	andi	r24, 0x07	; 7
     e72:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	86 95       	lsr	r24
     e78:	86 95       	lsr	r24
     e7a:	86 95       	lsr	r24
     e7c:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     e7e:	8c 81       	ldd	r24, Y+4	; 0x04
     e80:	80 32       	cpi	r24, 0x20	; 32
     e82:	18 f0       	brcs	.+6      	; 0xe8a <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	41 c0       	rjmp	.+130    	; 0xf0c <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	80 59       	subi	r24, 0x90	; 144
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	fc 01       	movw	r30, r24
     e9a:	80 81       	ld	r24, Z
     e9c:	91 81       	ldd	r25, Z+1	; 0x01
     e9e:	fc 01       	movw	r30, r24
     ea0:	80 81       	ld	r24, Z
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	2a 81       	ldd	r18, Y+2	; 0x02
     ea8:	22 2f       	mov	r18, r18
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <Dio_enuFlipChannel+0x54>
     eae:	95 95       	asr	r25
     eb0:	87 95       	ror	r24
     eb2:	2a 95       	dec	r18
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <Dio_enuFlipChannel+0x50>
     eb6:	81 70       	andi	r24, 0x01	; 1
     eb8:	99 27       	eor	r25, r25
     eba:	89 2b       	or	r24, r25
     ebc:	19 f4       	brne	.+6      	; 0xec4 <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	24 c0       	rjmp	.+72     	; 0xf0c <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	88 58       	subi	r24, 0x88	; 136
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	fc 01       	movw	r30, r24
     ed4:	80 81       	ld	r24, Z
     ed6:	91 81       	ldd	r25, Z+1	; 0x01
     ed8:	2b 81       	ldd	r18, Y+3	; 0x03
     eda:	22 2f       	mov	r18, r18
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	22 0f       	add	r18, r18
     ee0:	33 1f       	adc	r19, r19
     ee2:	28 58       	subi	r18, 0x88	; 136
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	f9 01       	movw	r30, r18
     ee8:	20 81       	ld	r18, Z
     eea:	31 81       	ldd	r19, Z+1	; 0x01
     eec:	f9 01       	movw	r30, r18
     eee:	20 81       	ld	r18, Z
     ef0:	62 2f       	mov	r22, r18
     ef2:	2a 81       	ldd	r18, Y+2	; 0x02
     ef4:	42 2f       	mov	r20, r18
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <Dio_enuFlipChannel+0xa4>
     efe:	22 0f       	add	r18, r18
     f00:	33 1f       	adc	r19, r19
     f02:	4a 95       	dec	r20
     f04:	e2 f7       	brpl	.-8      	; 0xefe <Dio_enuFlipChannel+0xa0>
     f06:	26 27       	eor	r18, r22
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <Seven_Segment_WriteBCDConnection>:



/********************************** Software Interfaces Declarations *******************/

Seven_Segment_StatusErrorType  Seven_Segment_WriteBCDConnection(const Seven_Segment_BCDType* Address_Segment, u8 Copy_u8Value){
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	27 97       	sbiw	r28, 0x07	; 7
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	6f 83       	std	Y+7, r22	; 0x07

	Seven_Segment_StatusErrorType Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_OK;
     f36:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
     f38:	1b 82       	std	Y+3, r1	; 0x03
	    u8 Loc_u8FinalBit = DIO_LOW;
     f3a:	1c 82       	std	Y+4, r1	; 0x04
	    u8 Loc_u8Counter=ZERO_VALUE;
     f3c:	1a 82       	std	Y+2, r1	; 0x02

	    if (NULL == Address_Segment  ){
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	89 2b       	or	r24, r25
     f44:	19 f4       	brne	.+6      	; 0xf4c <Seven_Segment_WriteBCDConnection+0x30>

	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	22 c0       	rjmp	.+68     	; 0xf90 <Seven_Segment_WriteBCDConnection+0x74>
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
     f4c:	1a 82       	std	Y+2, r1	; 0x02
     f4e:	1d c0       	rjmp	.+58     	; 0xf8a <Seven_Segment_WriteBCDConnection+0x6e>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
     f50:	8f 81       	ldd	r24, Y+7	; 0x07
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	2a 81       	ldd	r18, Y+2	; 0x02
     f58:	22 2f       	mov	r18, r18
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <Seven_Segment_WriteBCDConnection+0x46>
     f5e:	95 95       	asr	r25
     f60:	87 95       	ror	r24
     f62:	2a 95       	dec	r18
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <Seven_Segment_WriteBCDConnection+0x42>
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	8c 83       	std	Y+4, r24	; 0x04
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	2d 81       	ldd	r18, Y+5	; 0x05
     f72:	3e 81       	ldd	r19, Y+6	; 0x06
     f74:	82 0f       	add	r24, r18
     f76:	93 1f       	adc	r25, r19
     f78:	fc 01       	movw	r30, r24
     f7a:	80 81       	ld	r24, Z
     f7c:	6c 81       	ldd	r22, Y+4	; 0x04
     f7e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
     f82:	8b 83       	std	Y+3, r24	; 0x03
	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	8a 83       	std	Y+2, r24	; 0x02
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	84 30       	cpi	r24, 0x04	; 4
     f8e:	00 f3       	brcs	.-64     	; 0xf50 <Seven_Segment_WriteBCDConnection+0x34>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
	        }
	    }

	    return Loc_enuSegmentState;
     f90:	89 81       	ldd	r24, Y+1	; 0x01

}
     f92:	27 96       	adiw	r28, 0x07	; 7
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	ef 97       	sbiw	r28, 0x3f	; 63
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	9f af       	std	Y+63, r25	; 0x3f
     fba:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     fbc:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
     fbe:	8e ad       	ldd	r24, Y+62	; 0x3e
     fc0:	9f ad       	ldd	r25, Y+63	; 0x3f
     fc2:	89 2b       	or	r24, r25
     fc4:	19 f4       	brne	.+6      	; 0xfcc <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	0f c2       	rjmp	.+1054   	; 0x13ea <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
     fcc:	8e ad       	ldd	r24, Y+62	; 0x3e
     fce:	9f ad       	ldd	r25, Y+63	; 0x3f
     fd0:	68 e3       	ldi	r22, 0x38	; 56
     fd2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a0 ea       	ldi	r26, 0xA0	; 160
     fde:	b0 e4       	ldi	r27, 0x40	; 64
     fe0:	8a 83       	std	Y+2, r24	; 0x02
     fe2:	9b 83       	std	Y+3, r25	; 0x03
     fe4:	ac 83       	std	Y+4, r26	; 0x04
     fe6:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a ef       	ldi	r20, 0xFA	; 250
     fee:	54 e4       	ldi	r21, 0x44	; 68
     ff0:	6a 81       	ldd	r22, Y+2	; 0x02
     ff2:	7b 81       	ldd	r23, Y+3	; 0x03
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	8c ab       	std	Y+52, r24	; 0x34
    1002:	9d ab       	std	Y+53, r25	; 0x35
    1004:	ae ab       	std	Y+54, r26	; 0x36
    1006:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	6c a9       	ldd	r22, Y+52	; 0x34
    1012:	7d a9       	ldd	r23, Y+53	; 0x35
    1014:	8e a9       	ldd	r24, Y+54	; 0x36
    1016:	9f a9       	ldd	r25, Y+55	; 0x37
    1018:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    101c:	88 23       	and	r24, r24
    101e:	2c f4       	brge	.+10     	; 0x102a <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	99 af       	std	Y+57, r25	; 0x39
    1026:	88 af       	std	Y+56, r24	; 0x38
    1028:	3f c0       	rjmp	.+126    	; 0x10a8 <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	6c a9       	ldd	r22, Y+52	; 0x34
    1034:	7d a9       	ldd	r23, Y+53	; 0x35
    1036:	8e a9       	ldd	r24, Y+54	; 0x36
    1038:	9f a9       	ldd	r25, Y+55	; 0x37
    103a:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    103e:	18 16       	cp	r1, r24
    1040:	4c f5       	brge	.+82     	; 0x1094 <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	6a 81       	ldd	r22, Y+2	; 0x02
    104c:	7b 81       	ldd	r23, Y+3	; 0x03
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	99 af       	std	Y+57, r25	; 0x39
    1068:	88 af       	std	Y+56, r24	; 0x38
    106a:	0f c0       	rjmp	.+30     	; 0x108a <Lcd_4bit_enuInit+0xe6>
    106c:	88 ec       	ldi	r24, 0xC8	; 200
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9b af       	std	Y+59, r25	; 0x3b
    1072:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1074:	8a ad       	ldd	r24, Y+58	; 0x3a
    1076:	9b ad       	ldd	r25, Y+59	; 0x3b
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <Lcd_4bit_enuInit+0xd4>
    107c:	9b af       	std	Y+59, r25	; 0x3b
    107e:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1080:	88 ad       	ldd	r24, Y+56	; 0x38
    1082:	99 ad       	ldd	r25, Y+57	; 0x39
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	99 af       	std	Y+57, r25	; 0x39
    1088:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108a:	88 ad       	ldd	r24, Y+56	; 0x38
    108c:	99 ad       	ldd	r25, Y+57	; 0x39
    108e:	89 2b       	or	r24, r25
    1090:	69 f7       	brne	.-38     	; 0x106c <Lcd_4bit_enuInit+0xc8>
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1094:	6c a9       	ldd	r22, Y+52	; 0x34
    1096:	7d a9       	ldd	r23, Y+53	; 0x35
    1098:	8e a9       	ldd	r24, Y+54	; 0x36
    109a:	9f a9       	ldd	r25, Y+55	; 0x37
    109c:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	99 af       	std	Y+57, r25	; 0x39
    10a6:	88 af       	std	Y+56, r24	; 0x38
    10a8:	88 ad       	ldd	r24, Y+56	; 0x38
    10aa:	99 ad       	ldd	r25, Y+57	; 0x39
    10ac:	9d af       	std	Y+61, r25	; 0x3d
    10ae:	8c af       	std	Y+60, r24	; 0x3c
    10b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    10b2:	9d ad       	ldd	r25, Y+61	; 0x3d
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <Lcd_4bit_enuInit+0x110>
    10b8:	9d af       	std	Y+61, r25	; 0x3d
    10ba:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    10bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    10be:	9f ad       	ldd	r25, Y+63	; 0x3f
    10c0:	68 e3       	ldi	r22, 0x38	; 56
    10c2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a6 e1       	ldi	r26, 0x16	; 22
    10ce:	b3 e4       	ldi	r27, 0x43	; 67
    10d0:	8e 83       	std	Y+6, r24	; 0x06
    10d2:	9f 83       	std	Y+7, r25	; 0x07
    10d4:	a8 87       	std	Y+8, r26	; 0x08
    10d6:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    10d8:	2b ea       	ldi	r18, 0xAB	; 171
    10da:	3a ea       	ldi	r19, 0xAA	; 170
    10dc:	4a e2       	ldi	r20, 0x2A	; 42
    10de:	50 e4       	ldi	r21, 0x40	; 64
    10e0:	6e 81       	ldd	r22, Y+6	; 0x06
    10e2:	7f 81       	ldd	r23, Y+7	; 0x07
    10e4:	88 85       	ldd	r24, Y+8	; 0x08
    10e6:	99 85       	ldd	r25, Y+9	; 0x09
    10e8:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	88 8f       	std	Y+24, r24	; 0x18
    10f2:	99 8f       	std	Y+25, r25	; 0x19
    10f4:	aa 8f       	std	Y+26, r26	; 0x1a
    10f6:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	a8 85       	ldd	r26, Y+8	; 0x08
    10fe:	b9 85       	ldd	r27, Y+9	; 0x09
    1100:	9c 01       	movw	r18, r24
    1102:	ad 01       	movw	r20, r26
    1104:	bc 01       	movw	r22, r24
    1106:	cd 01       	movw	r24, r26
    1108:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__addsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	8c 8f       	std	Y+28, r24	; 0x1c
    1112:	9d 8f       	std	Y+29, r25	; 0x1d
    1114:	ae 8f       	std	Y+30, r26	; 0x1e
    1116:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e8       	ldi	r20, 0x80	; 128
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	68 8d       	ldd	r22, Y+24	; 0x18
    1122:	79 8d       	ldd	r23, Y+25	; 0x19
    1124:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1126:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1128:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    112c:	88 23       	and	r24, r24
    112e:	1c f4       	brge	.+6      	; 0x1136 <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	88 a3       	std	Y+32, r24	; 0x20
    1134:	b2 c0       	rjmp	.+356    	; 0x129a <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	4f e7       	ldi	r20, 0x7F	; 127
    113c:	57 e4       	ldi	r21, 0x47	; 71
    113e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1140:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1142:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1144:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1146:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    114a:	18 16       	cp	r1, r24
    114c:	0c f0       	brlt	.+2      	; 0x1150 <Lcd_4bit_enuInit+0x1ac>
    114e:	7b c0       	rjmp	.+246    	; 0x1246 <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	4a e7       	ldi	r20, 0x7A	; 122
    1156:	54 e4       	ldi	r21, 0x44	; 68
    1158:	6e 81       	ldd	r22, Y+6	; 0x06
    115a:	7f 81       	ldd	r23, Y+7	; 0x07
    115c:	88 85       	ldd	r24, Y+8	; 0x08
    115e:	99 85       	ldd	r25, Y+9	; 0x09
    1160:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__divsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	89 a3       	std	Y+33, r24	; 0x21
    116a:	9a a3       	std	Y+34, r25	; 0x22
    116c:	ab a3       	std	Y+35, r26	; 0x23
    116e:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4a ef       	ldi	r20, 0xFA	; 250
    1176:	54 e4       	ldi	r21, 0x44	; 68
    1178:	69 a1       	ldd	r22, Y+33	; 0x21
    117a:	7a a1       	ldd	r23, Y+34	; 0x22
    117c:	8b a1       	ldd	r24, Y+35	; 0x23
    117e:	9c a1       	ldd	r25, Y+36	; 0x24
    1180:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	8d a3       	std	Y+37, r24	; 0x25
    118a:	9e a3       	std	Y+38, r25	; 0x26
    118c:	af a3       	std	Y+39, r26	; 0x27
    118e:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	6d a1       	ldd	r22, Y+37	; 0x25
    119a:	7e a1       	ldd	r23, Y+38	; 0x26
    119c:	8f a1       	ldd	r24, Y+39	; 0x27
    119e:	98 a5       	ldd	r25, Y+40	; 0x28
    11a0:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    11a4:	88 23       	and	r24, r24
    11a6:	2c f4       	brge	.+10     	; 0x11b2 <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9a a7       	std	Y+42, r25	; 0x2a
    11ae:	89 a7       	std	Y+41, r24	; 0x29
    11b0:	3f c0       	rjmp	.+126    	; 0x1230 <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	4f e7       	ldi	r20, 0x7F	; 127
    11b8:	57 e4       	ldi	r21, 0x47	; 71
    11ba:	6d a1       	ldd	r22, Y+37	; 0x25
    11bc:	7e a1       	ldd	r23, Y+38	; 0x26
    11be:	8f a1       	ldd	r24, Y+39	; 0x27
    11c0:	98 a5       	ldd	r25, Y+40	; 0x28
    11c2:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    11c6:	18 16       	cp	r1, r24
    11c8:	4c f5       	brge	.+82     	; 0x121c <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e2       	ldi	r20, 0x20	; 32
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	69 a1       	ldd	r22, Y+33	; 0x21
    11d4:	7a a1       	ldd	r23, Y+34	; 0x22
    11d6:	8b a1       	ldd	r24, Y+35	; 0x23
    11d8:	9c a1       	ldd	r25, Y+36	; 0x24
    11da:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	9a a7       	std	Y+42, r25	; 0x2a
    11f0:	89 a7       	std	Y+41, r24	; 0x29
    11f2:	0f c0       	rjmp	.+30     	; 0x1212 <Lcd_4bit_enuInit+0x26e>
    11f4:	88 ec       	ldi	r24, 0xC8	; 200
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9c a7       	std	Y+44, r25	; 0x2c
    11fa:	8b a7       	std	Y+43, r24	; 0x2b
    11fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    11fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <Lcd_4bit_enuInit+0x25c>
    1204:	9c a7       	std	Y+44, r25	; 0x2c
    1206:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1208:	89 a5       	ldd	r24, Y+41	; 0x29
    120a:	9a a5       	ldd	r25, Y+42	; 0x2a
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	9a a7       	std	Y+42, r25	; 0x2a
    1210:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1212:	89 a5       	ldd	r24, Y+41	; 0x29
    1214:	9a a5       	ldd	r25, Y+42	; 0x2a
    1216:	89 2b       	or	r24, r25
    1218:	69 f7       	brne	.-38     	; 0x11f4 <Lcd_4bit_enuInit+0x250>
    121a:	3f c0       	rjmp	.+126    	; 0x129a <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121c:	6d a1       	ldd	r22, Y+37	; 0x25
    121e:	7e a1       	ldd	r23, Y+38	; 0x26
    1220:	8f a1       	ldd	r24, Y+39	; 0x27
    1222:	98 a5       	ldd	r25, Y+40	; 0x28
    1224:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	9a a7       	std	Y+42, r25	; 0x2a
    122e:	89 a7       	std	Y+41, r24	; 0x29
    1230:	89 a5       	ldd	r24, Y+41	; 0x29
    1232:	9a a5       	ldd	r25, Y+42	; 0x2a
    1234:	9e a7       	std	Y+46, r25	; 0x2e
    1236:	8d a7       	std	Y+45, r24	; 0x2d
    1238:	8d a5       	ldd	r24, Y+45	; 0x2d
    123a:	9e a5       	ldd	r25, Y+46	; 0x2e
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <Lcd_4bit_enuInit+0x298>
    1240:	9e a7       	std	Y+46, r25	; 0x2e
    1242:	8d a7       	std	Y+45, r24	; 0x2d
    1244:	2a c0       	rjmp	.+84     	; 0x129a <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	53 e4       	ldi	r21, 0x43	; 67
    124e:	68 8d       	ldd	r22, Y+24	; 0x18
    1250:	79 8d       	ldd	r23, Y+25	; 0x19
    1252:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1254:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1256:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    125a:	18 16       	cp	r1, r24
    125c:	ac f4       	brge	.+42     	; 0x1288 <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    125e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1260:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1262:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1264:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1266:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	8f a5       	ldd	r24, Y+47	; 0x2f
    1274:	98 a9       	ldd	r25, Y+48	; 0x30
    1276:	9a ab       	std	Y+50, r25	; 0x32
    1278:	89 ab       	std	Y+49, r24	; 0x31
    127a:	89 a9       	ldd	r24, Y+49	; 0x31
    127c:	9a a9       	ldd	r25, Y+50	; 0x32
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <Lcd_4bit_enuInit+0x2da>
    1282:	9a ab       	std	Y+50, r25	; 0x32
    1284:	89 ab       	std	Y+49, r24	; 0x31
    1286:	0f c0       	rjmp	.+30     	; 0x12a6 <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1288:	68 8d       	ldd	r22, Y+24	; 0x18
    128a:	79 8d       	ldd	r23, Y+25	; 0x19
    128c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    128e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1290:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	88 a3       	std	Y+32, r24	; 0x20
    129a:	88 a1       	ldd	r24, Y+32	; 0x20
    129c:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    129e:	8b a9       	ldd	r24, Y+51	; 0x33
    12a0:	8a 95       	dec	r24
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <Lcd_4bit_enuInit+0x2fc>
    12a4:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    12a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    12a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    12aa:	68 e3       	ldi	r22, 0x38	; 56
    12ac:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    12b0:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    12b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    12b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    12bc:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    12be:	8e ad       	ldd	r24, Y+62	; 0x3e
    12c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    12c2:	62 e0       	ldi	r22, 0x02	; 2
    12c4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    12c8:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    12ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    12cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    12ce:	66 e0       	ldi	r22, 0x06	; 6
    12d0:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    12d4:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    12d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    12d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    12da:	6c e0       	ldi	r22, 0x0C	; 12
    12dc:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    12e0:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    12e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    12e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    12e6:	68 e2       	ldi	r22, 0x28	; 40
    12e8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    12ec:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    12ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    12f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    12f2:	60 e8       	ldi	r22, 0x80	; 128
    12f4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    12f8:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    12fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    12fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 ea       	ldi	r26, 0xA0	; 160
    130c:	b0 e4       	ldi	r27, 0x40	; 64
    130e:	8a 87       	std	Y+10, r24	; 0x0a
    1310:	9b 87       	std	Y+11, r25	; 0x0b
    1312:	ac 87       	std	Y+12, r26	; 0x0c
    1314:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	4a ef       	ldi	r20, 0xFA	; 250
    131c:	54 e4       	ldi	r21, 0x44	; 68
    131e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1320:	7b 85       	ldd	r23, Y+11	; 0x0b
    1322:	8c 85       	ldd	r24, Y+12	; 0x0c
    1324:	9d 85       	ldd	r25, Y+13	; 0x0d
    1326:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	8e 87       	std	Y+14, r24	; 0x0e
    1330:	9f 87       	std	Y+15, r25	; 0x0f
    1332:	a8 8b       	std	Y+16, r26	; 0x10
    1334:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e8       	ldi	r20, 0x80	; 128
    133c:	5f e3       	ldi	r21, 0x3F	; 63
    133e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1340:	7f 85       	ldd	r23, Y+15	; 0x0f
    1342:	88 89       	ldd	r24, Y+16	; 0x10
    1344:	99 89       	ldd	r25, Y+17	; 0x11
    1346:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    134a:	88 23       	and	r24, r24
    134c:	2c f4       	brge	.+10     	; 0x1358 <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	9b 8b       	std	Y+19, r25	; 0x13
    1354:	8a 8b       	std	Y+18, r24	; 0x12
    1356:	3f c0       	rjmp	.+126    	; 0x13d6 <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	3f ef       	ldi	r19, 0xFF	; 255
    135c:	4f e7       	ldi	r20, 0x7F	; 127
    135e:	57 e4       	ldi	r21, 0x47	; 71
    1360:	6e 85       	ldd	r22, Y+14	; 0x0e
    1362:	7f 85       	ldd	r23, Y+15	; 0x0f
    1364:	88 89       	ldd	r24, Y+16	; 0x10
    1366:	99 89       	ldd	r25, Y+17	; 0x11
    1368:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    136c:	18 16       	cp	r1, r24
    136e:	4c f5       	brge	.+82     	; 0x13c2 <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e2       	ldi	r20, 0x20	; 32
    1376:	51 e4       	ldi	r21, 0x41	; 65
    1378:	6a 85       	ldd	r22, Y+10	; 0x0a
    137a:	7b 85       	ldd	r23, Y+11	; 0x0b
    137c:	8c 85       	ldd	r24, Y+12	; 0x0c
    137e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1380:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9b 8b       	std	Y+19, r25	; 0x13
    1396:	8a 8b       	std	Y+18, r24	; 0x12
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <Lcd_4bit_enuInit+0x414>
    139a:	88 ec       	ldi	r24, 0xC8	; 200
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9d 8b       	std	Y+21, r25	; 0x15
    13a0:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a2:	8c 89       	ldd	r24, Y+20	; 0x14
    13a4:	9d 89       	ldd	r25, Y+21	; 0x15
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <Lcd_4bit_enuInit+0x402>
    13aa:	9d 8b       	std	Y+21, r25	; 0x15
    13ac:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ae:	8a 89       	ldd	r24, Y+18	; 0x12
    13b0:	9b 89       	ldd	r25, Y+19	; 0x13
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	9b 8b       	std	Y+19, r25	; 0x13
    13b6:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b8:	8a 89       	ldd	r24, Y+18	; 0x12
    13ba:	9b 89       	ldd	r25, Y+19	; 0x13
    13bc:	89 2b       	or	r24, r25
    13be:	69 f7       	brne	.-38     	; 0x139a <Lcd_4bit_enuInit+0x3f6>
    13c0:	14 c0       	rjmp	.+40     	; 0x13ea <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c2:	6e 85       	ldd	r22, Y+14	; 0x0e
    13c4:	7f 85       	ldd	r23, Y+15	; 0x0f
    13c6:	88 89       	ldd	r24, Y+16	; 0x10
    13c8:	99 89       	ldd	r25, Y+17	; 0x11
    13ca:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	9b 8b       	std	Y+19, r25	; 0x13
    13d4:	8a 8b       	std	Y+18, r24	; 0x12
    13d6:	8a 89       	ldd	r24, Y+18	; 0x12
    13d8:	9b 89       	ldd	r25, Y+19	; 0x13
    13da:	9f 8b       	std	Y+23, r25	; 0x17
    13dc:	8e 8b       	std	Y+22, r24	; 0x16
    13de:	8e 89       	ldd	r24, Y+22	; 0x16
    13e0:	9f 89       	ldd	r25, Y+23	; 0x17
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <Lcd_4bit_enuInit+0x43e>
    13e6:	9f 8b       	std	Y+23, r25	; 0x17
    13e8:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    13ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    13ec:	ef 96       	adiw	r28, 0x3f	; 63
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	00 d0       	rcall	.+0      	; 0x1404 <Lcd_4bit_enuSendCommand+0x6>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <Lcd_4bit_enuSendCommand+0x8>
    1406:	1f 92       	push	r1
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1412:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    1414:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	89 2b       	or	r24, r25
    141c:	19 f4       	brne	.+6      	; 0x1424 <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	22 c0       	rjmp	.+68     	; 0x1468 <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	fc 01       	movw	r30, r24
    142a:	84 81       	ldd	r24, Z+4	; 0x04
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1432:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	28 2f       	mov	r18, r24
    1438:	22 95       	swap	r18
    143a:	2f 70       	andi	r18, 0x0F	; 15
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	62 2f       	mov	r22, r18
    1442:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <Lcd_4bit_enuSet4BitsOnPins>
    1446:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Lcd_4bit_enuSendEnableSignal>
    1450:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	6d 81       	ldd	r22, Y+5	; 0x05
    1458:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <Lcd_4bit_enuSet4BitsOnPins>
    145c:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Lcd_4bit_enuSendEnableSignal>
    1466:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    1468:	89 81       	ldd	r24, Y+1	; 0x01

}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	00 d0       	rcall	.+0      	; 0x1480 <Lcd_4bit_enuDisplayCharacter+0x6>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <Lcd_4bit_enuDisplayCharacter+0x8>
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	9b 83       	std	Y+3, r25	; 0x03
    1488:	8a 83       	std	Y+2, r24	; 0x02
    148a:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    148c:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	89 2b       	or	r24, r25
    1494:	19 f4       	brne	.+6      	; 0x149c <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	22 c0       	rjmp	.+68     	; 0x14e0 <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	fc 01       	movw	r30, r24
    14a2:	84 81       	ldd	r24, Z+4	; 0x04
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    14aa:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	28 2f       	mov	r18, r24
    14b0:	22 95       	swap	r18
    14b2:	2f 70       	andi	r18, 0x0F	; 15
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	9b 81       	ldd	r25, Y+3	; 0x03
    14b8:	62 2f       	mov	r22, r18
    14ba:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <Lcd_4bit_enuSet4BitsOnPins>
    14be:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	9b 81       	ldd	r25, Y+3	; 0x03
    14c4:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Lcd_4bit_enuSendEnableSignal>
    14c8:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	9b 81       	ldd	r25, Y+3	; 0x03
    14ce:	6c 81       	ldd	r22, Y+4	; 0x04
    14d0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <Lcd_4bit_enuSet4BitsOnPins>
    14d4:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	9b 81       	ldd	r25, Y+3	; 0x03
    14da:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Lcd_4bit_enuSendEnableSignal>
    14de:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    14e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	9b 83       	std	Y+3, r25	; 0x03
    1500:	8a 83       	std	Y+2, r24	; 0x02
    1502:	6c 83       	std	Y+4, r22	; 0x04
    1504:	4d 83       	std	Y+5, r20	; 0x05
    1506:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1508:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	9b 81       	ldd	r25, Y+3	; 0x03
    150e:	89 2b       	or	r24, r25
    1510:	19 f4       	brne	.+6      	; 0x1518 <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	29 c0       	rjmp	.+82     	; 0x156a <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	9b 81       	ldd	r25, Y+3	; 0x03
    151c:	4e 81       	ldd	r20, Y+6	; 0x06
    151e:	6d 81       	ldd	r22, Y+5	; 0x05
    1520:	0e 94 15 0b 	call	0x162a	; 0x162a <Lcd_4bit_enuGoToXY>
    1524:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	9b 81       	ldd	r25, Y+3	; 0x03
    152a:	fc 01       	movw	r30, r24
    152c:	84 81       	ldd	r24, Z+4	; 0x04
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1534:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    1536:	8c 81       	ldd	r24, Y+4	; 0x04
    1538:	28 2f       	mov	r18, r24
    153a:	22 95       	swap	r18
    153c:	2f 70       	andi	r18, 0x0F	; 15
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	9b 81       	ldd	r25, Y+3	; 0x03
    1542:	62 2f       	mov	r22, r18
    1544:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <Lcd_4bit_enuSet4BitsOnPins>
    1548:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Lcd_4bit_enuSendEnableSignal>
    1552:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	9b 81       	ldd	r25, Y+3	; 0x03
    1558:	6c 81       	ldd	r22, Y+4	; 0x04
    155a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <Lcd_4bit_enuSet4BitsOnPins>
    155e:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	9b 81       	ldd	r25, Y+3	; 0x03
    1564:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Lcd_4bit_enuSendEnableSignal>
    1568:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	26 96       	adiw	r28, 0x06	; 6
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <Lcd_4bit_enuCreateCustomCharacter>:


Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	27 97       	sbiw	r28, 0x07	; 7
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	9c 83       	std	Y+4, r25	; 0x04
    1594:	8b 83       	std	Y+3, r24	; 0x03
    1596:	7e 83       	std	Y+6, r23	; 0x06
    1598:	6d 83       	std	Y+5, r22	; 0x05
    159a:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    159c:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    159e:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	89 2b       	or	r24, r25
    15a6:	21 f0       	breq	.+8      	; 0x15b0 <Lcd_4bit_enuCreateCustomCharacter+0x32>
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	89 2b       	or	r24, r25
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	30 c0       	rjmp	.+96     	; 0x1616 <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    15b6:	8f 81       	ldd	r24, Y+7	; 0x07
    15b8:	88 30       	cpi	r24, 0x08	; 8
    15ba:	18 f0       	brcs	.+6      	; 0x15c2 <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	2a c0       	rjmp	.+84     	; 0x1616 <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    15c2:	8f 81       	ldd	r24, Y+7	; 0x07
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	08 96       	adiw	r24, 0x08	; 8
    15ca:	28 2f       	mov	r18, r24
    15cc:	22 0f       	add	r18, r18
    15ce:	22 0f       	add	r18, r18
    15d0:	22 0f       	add	r18, r18
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	62 2f       	mov	r22, r18
    15d8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    15dc:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    15de:	1a 82       	std	Y+2, r1	; 0x02
    15e0:	11 c0       	rjmp	.+34     	; 0x1604 <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ea:	3e 81       	ldd	r19, Y+6	; 0x06
    15ec:	82 0f       	add	r24, r18
    15ee:	93 1f       	adc	r25, r19
    15f0:	fc 01       	movw	r30, r24
    15f2:	20 81       	ld	r18, Z
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	62 2f       	mov	r22, r18
    15fa:	0e 94 3d 0a 	call	0x147a	; 0x147a <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	8f 5f       	subi	r24, 0xFF	; 255
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	88 30       	cpi	r24, 0x08	; 8
    1608:	60 f3       	brcs	.-40     	; 0x15e2 <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	9c 81       	ldd	r25, Y+4	; 0x04
    160e:	60 e8       	ldi	r22, 0x80	; 128
    1610:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    1614:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1616:	89 81       	ldd	r24, Y+1	; 0x01

}
    1618:	27 96       	adiw	r28, 0x07	; 7
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	08 95       	ret

0000162a <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	00 d0       	rcall	.+0      	; 0x1630 <Lcd_4bit_enuGoToXY+0x6>
    1630:	00 d0       	rcall	.+0      	; 0x1632 <Lcd_4bit_enuGoToXY+0x8>
    1632:	1f 92       	push	r1
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	9b 83       	std	Y+3, r25	; 0x03
    163a:	8a 83       	std	Y+2, r24	; 0x02
    163c:	6c 83       	std	Y+4, r22	; 0x04
    163e:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1640:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	9b 81       	ldd	r25, Y+3	; 0x03
    1646:	89 2b       	or	r24, r25
    1648:	19 f4       	brne	.+6      	; 0x1650 <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	56 c0       	rjmp	.+172    	; 0x16fc <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	85 30       	cpi	r24, 0x05	; 5
    1654:	18 f0       	brcs	.+6      	; 0x165c <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	50 c0       	rjmp	.+160    	; 0x16fc <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	85 31       	cpi	r24, 0x15	; 21
    1660:	18 f0       	brcs	.+6      	; 0x1668 <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    1662:	84 e0       	ldi	r24, 0x04	; 4
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	4a c0       	rjmp	.+148    	; 0x16fc <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	81 50       	subi	r24, 0x01	; 1
    166c:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    166e:	8c 81       	ldd	r24, Y+4	; 0x04
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	91 05       	cpc	r25, r1
    1678:	c9 f0       	breq	.+50     	; 0x16ac <Lcd_4bit_enuGoToXY+0x82>
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	91 05       	cpc	r25, r1
    167e:	1c f4       	brge	.+6      	; 0x1686 <Lcd_4bit_enuGoToXY+0x5c>
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	39 f0       	breq	.+14     	; 0x1692 <Lcd_4bit_enuGoToXY+0x68>
    1684:	3a c0       	rjmp	.+116    	; 0x16fa <Lcd_4bit_enuGoToXY+0xd0>
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	e9 f0       	breq	.+58     	; 0x16c6 <Lcd_4bit_enuGoToXY+0x9c>
    168c:	04 97       	sbiw	r24, 0x04	; 4
    168e:	41 f1       	breq	.+80     	; 0x16e0 <Lcd_4bit_enuGoToXY+0xb6>
    1690:	34 c0       	rjmp	.+104    	; 0x16fa <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	20 e8       	ldi	r18, 0x80	; 128
    1696:	28 0f       	add	r18, r24
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	9b 81       	ldd	r25, Y+3	; 0x03
    169c:	62 2f       	mov	r22, r18
    169e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    16a2:	98 2f       	mov	r25, r24
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	89 23       	and	r24, r25
    16a8:	89 83       	std	Y+1, r24	; 0x01
			                break;
    16aa:	28 c0       	rjmp	.+80     	; 0x16fc <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	20 ec       	ldi	r18, 0xC0	; 192
    16b0:	28 0f       	add	r18, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	9b 81       	ldd	r25, Y+3	; 0x03
    16b6:	62 2f       	mov	r22, r18
    16b8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    16bc:	98 2f       	mov	r25, r24
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	89 23       	and	r24, r25
    16c2:	89 83       	std	Y+1, r24	; 0x01
			                break;
    16c4:	1b c0       	rjmp	.+54     	; 0x16fc <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	24 e9       	ldi	r18, 0x94	; 148
    16ca:	28 0f       	add	r18, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	9b 81       	ldd	r25, Y+3	; 0x03
    16d0:	62 2f       	mov	r22, r18
    16d2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    16d6:	98 2f       	mov	r25, r24
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	89 23       	and	r24, r25
    16dc:	89 83       	std	Y+1, r24	; 0x01
			                break;
    16de:	0e c0       	rjmp	.+28     	; 0x16fc <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	24 ed       	ldi	r18, 0xD4	; 212
    16e4:	28 0f       	add	r18, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ea:	62 2f       	mov	r22, r18
    16ec:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Lcd_4bit_enuSendCommand>
    16f0:	98 2f       	mov	r25, r24
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	89 23       	and	r24, r25
    16f6:	89 83       	std	Y+1, r24	; 0x01
			                break;
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    16fa:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01

}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	00 d0       	rcall	.+0      	; 0x1714 <Lcd_4bit_enuDisplayString+0x6>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <Lcd_4bit_enuDisplayString+0x8>
    1716:	00 d0       	rcall	.+0      	; 0x1718 <Lcd_4bit_enuDisplayString+0xa>
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
    1720:	7e 83       	std	Y+6, r23	; 0x06
    1722:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1724:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    1726:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	89 2b       	or	r24, r25
    172e:	21 f0       	breq	.+8      	; 0x1738 <Lcd_4bit_enuDisplayString+0x2a>
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	89 2b       	or	r24, r25
    1736:	a9 f4       	brne	.+42     	; 0x1762 <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	1d c0       	rjmp	.+58     	; 0x1778 <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	2d 81       	ldd	r18, Y+5	; 0x05
    1746:	3e 81       	ldd	r19, Y+6	; 0x06
    1748:	82 0f       	add	r24, r18
    174a:	93 1f       	adc	r25, r19
    174c:	fc 01       	movw	r30, r24
    174e:	20 81       	ld	r18, Z
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	62 2f       	mov	r22, r18
    1756:	0e 94 3d 0a 	call	0x147a	; 0x147a <Lcd_4bit_enuDisplayCharacter>
    175a:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	8f 5f       	subi	r24, 0xFF	; 255
    1760:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	2d 81       	ldd	r18, Y+5	; 0x05
    176a:	3e 81       	ldd	r19, Y+6	; 0x06
    176c:	82 0f       	add	r24, r18
    176e:	93 1f       	adc	r25, r19
    1770:	fc 01       	movw	r30, r24
    1772:	80 81       	ld	r24, Z
    1774:	88 23       	and	r24, r24
    1776:	19 f7       	brne	.-58     	; 0x173e <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    1778:	89 81       	ldd	r24, Y+1	; 0x01

}
    177a:	26 96       	adiw	r28, 0x06	; 6
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Number){
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	c9 56       	subi	r28, 0x69	; 105
    1796:	d1 09       	sbc	r29, r1
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	9e 01       	movw	r18, r28
    17a4:	29 59       	subi	r18, 0x99	; 153
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	f9 01       	movw	r30, r18
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	80 83       	st	Z, r24
    17ae:	ce 01       	movw	r24, r28
    17b0:	87 59       	subi	r24, 0x97	; 151
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	fc 01       	movw	r30, r24
    17b6:	60 83       	st	Z, r22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    17b8:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    17ba:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    17bc:	ce 01       	movw	r24, r28
    17be:	89 59       	subi	r24, 0x99	; 153
    17c0:	9f 4f       	sbci	r25, 0xFF	; 255
    17c2:	fc 01       	movw	r30, r24
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	89 2b       	or	r24, r25
    17ca:	19 f4       	brne	.+6      	; 0x17d2 <Lcd_4bit_enuDisplayNumber+0x46>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	19 c0       	rjmp	.+50     	; 0x1804 <Lcd_4bit_enuDisplayNumber+0x78>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u8Number, Loc_u8ConvertedNumberInArray);
    17d2:	9e 01       	movw	r18, r28
    17d4:	2d 5f       	subi	r18, 0xFD	; 253
    17d6:	3f 4f       	sbci	r19, 0xFF	; 255
    17d8:	ce 01       	movw	r24, r28
    17da:	87 59       	subi	r24, 0x97	; 151
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	b9 01       	movw	r22, r18
    17e0:	fc 01       	movw	r30, r24
    17e2:	80 81       	ld	r24, Z
    17e4:	0e 94 49 00 	call	0x92	; 0x92 <Convert_IntToString>
    17e8:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    17ea:	9e 01       	movw	r18, r28
    17ec:	2d 5f       	subi	r18, 0xFD	; 253
    17ee:	3f 4f       	sbci	r19, 0xFF	; 255
    17f0:	ce 01       	movw	r24, r28
    17f2:	89 59       	subi	r24, 0x99	; 153
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	fc 01       	movw	r30, r24
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	b9 01       	movw	r22, r18
    17fe:	0e 94 87 0b 	call	0x170e	; 0x170e <Lcd_4bit_enuDisplayString>
    1802:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1804:	89 81       	ldd	r24, Y+1	; 0x01

}
    1806:	c7 59       	subi	r28, 0x97	; 151
    1808:	df 4f       	sbci	r29, 0xFF	; 255
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f64 Copy_f64Number){
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	cc 56       	subi	r28, 0x6C	; 108
    1824:	d1 09       	sbc	r29, r1
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	9e 01       	movw	r18, r28
    1832:	29 59       	subi	r18, 0x99	; 153
    1834:	3f 4f       	sbci	r19, 0xFF	; 255
    1836:	f9 01       	movw	r30, r18
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	80 83       	st	Z, r24
    183c:	ce 01       	movw	r24, r28
    183e:	87 59       	subi	r24, 0x97	; 151
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	fc 01       	movw	r30, r24
    1844:	40 83       	st	Z, r20
    1846:	51 83       	std	Z+1, r21	; 0x01
    1848:	62 83       	std	Z+2, r22	; 0x02
    184a:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    184c:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    184e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    1850:	ce 01       	movw	r24, r28
    1852:	89 59       	subi	r24, 0x99	; 153
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	fc 01       	movw	r30, r24
    1858:	80 81       	ld	r24, Z
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	89 2b       	or	r24, r25
    185e:	19 f4       	brne	.+6      	; 0x1866 <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	1e c0       	rjmp	.+60     	; 0x18a2 <Lcd_4bit_enuDisplayFloatNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_FloatToString(Copy_f64Number, Loc_u8ConvertedNumberInArray);
    1866:	9e 01       	movw	r18, r28
    1868:	2d 5f       	subi	r18, 0xFD	; 253
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	ce 01       	movw	r24, r28
    186e:	87 59       	subi	r24, 0x97	; 151
    1870:	9f 4f       	sbci	r25, 0xFF	; 255
    1872:	fc 01       	movw	r30, r24
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
    1878:	a2 81       	ldd	r26, Z+2	; 0x02
    187a:	b3 81       	ldd	r27, Z+3	; 0x03
    187c:	a9 01       	movw	r20, r18
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 7b 00 	call	0xf6	; 0xf6 <Convert_FloatToString>
    1886:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    1888:	9e 01       	movw	r18, r28
    188a:	2d 5f       	subi	r18, 0xFD	; 253
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	ce 01       	movw	r24, r28
    1890:	89 59       	subi	r24, 0x99	; 153
    1892:	9f 4f       	sbci	r25, 0xFF	; 255
    1894:	fc 01       	movw	r30, r24
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	b9 01       	movw	r22, r18
    189c:	0e 94 87 0b 	call	0x170e	; 0x170e <Lcd_4bit_enuDisplayString>
    18a0:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01

}
    18a4:	c4 59       	subi	r28, 0x94	; 148
    18a6:	df 4f       	sbci	r29, 0xFF	; 255
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	00 d0       	rcall	.+0      	; 0x18be <Lcd_4bit_enuSet4BitsOnPins+0x6>
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <Lcd_4bit_enuSet4BitsOnPins+0x8>
    18c0:	1f 92       	push	r1
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	9c 83       	std	Y+4, r25	; 0x04
    18c8:	8b 83       	std	Y+3, r24	; 0x03
    18ca:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    18cc:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    18ce:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	89 2b       	or	r24, r25
    18d6:	19 f4       	brne	.+6      	; 0x18de <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	22 c0       	rjmp	.+68     	; 0x1922 <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    18de:	1a 82       	std	Y+2, r1	; 0x02
    18e0:	1d c0       	rjmp	.+58     	; 0x191c <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    18e2:	8d 81       	ldd	r24, Y+5	; 0x05
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	2a 81       	ldd	r18, Y+2	; 0x02
    18ea:	22 2f       	mov	r18, r18
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    18f0:	95 95       	asr	r25
    18f2:	87 95       	ror	r24
    18f4:	2a 95       	dec	r18
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <Lcd_4bit_enuSet4BitsOnPins+0x38>
    18f8:	48 2f       	mov	r20, r24
    18fa:	41 70       	andi	r20, 0x01	; 1
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	2b 81       	ldd	r18, Y+3	; 0x03
    1904:	3c 81       	ldd	r19, Y+4	; 0x04
    1906:	82 0f       	add	r24, r18
    1908:	93 1f       	adc	r25, r19
    190a:	fc 01       	movw	r30, r24
    190c:	80 81       	ld	r24, Z
    190e:	64 2f       	mov	r22, r20
    1910:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1914:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	8a 83       	std	Y+2, r24	; 0x02
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	84 30       	cpi	r24, 0x04	; 4
    1920:	00 f3       	brcs	.-64     	; 0x18e2 <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    1922:	89 81       	ldd	r24, Y+1	; 0x01

}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	a3 97       	sbiw	r28, 0x23	; 35
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	9b a3       	std	Y+35, r25	; 0x23
    194a:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    194c:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    194e:	8a a1       	ldd	r24, Y+34	; 0x22
    1950:	9b a1       	ldd	r25, Y+35	; 0x23
    1952:	89 2b       	or	r24, r25
    1954:	19 f4       	brne	.+6      	; 0x195c <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	ff c0       	rjmp	.+510    	; 0x1b5a <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    195c:	8a a1       	ldd	r24, Y+34	; 0x22
    195e:	9b a1       	ldd	r25, Y+35	; 0x23
    1960:	fc 01       	movw	r30, r24
    1962:	85 81       	ldd	r24, Z+5	; 0x05
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 ea       	ldi	r26, 0xA0	; 160
    1972:	b0 e4       	ldi	r27, 0x40	; 64
    1974:	8a 83       	std	Y+2, r24	; 0x02
    1976:	9b 83       	std	Y+3, r25	; 0x03
    1978:	ac 83       	std	Y+4, r26	; 0x04
    197a:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    197c:	2b ea       	ldi	r18, 0xAB	; 171
    197e:	3a ea       	ldi	r19, 0xAA	; 170
    1980:	4a e2       	ldi	r20, 0x2A	; 42
    1982:	50 e4       	ldi	r21, 0x40	; 64
    1984:	6a 81       	ldd	r22, Y+2	; 0x02
    1986:	7b 81       	ldd	r23, Y+3	; 0x03
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8e 83       	std	Y+6, r24	; 0x06
    1996:	9f 83       	std	Y+7, r25	; 0x07
    1998:	a8 87       	std	Y+8, r26	; 0x08
    199a:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	9b 81       	ldd	r25, Y+3	; 0x03
    19a0:	ac 81       	ldd	r26, Y+4	; 0x04
    19a2:	bd 81       	ldd	r27, Y+5	; 0x05
    19a4:	9c 01       	movw	r18, r24
    19a6:	ad 01       	movw	r20, r26
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__addsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8a 87       	std	Y+10, r24	; 0x0a
    19b6:	9b 87       	std	Y+11, r25	; 0x0b
    19b8:	ac 87       	std	Y+12, r26	; 0x0c
    19ba:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	5f e3       	ldi	r21, 0x3F	; 63
    19c4:	6e 81       	ldd	r22, Y+6	; 0x06
    19c6:	7f 81       	ldd	r23, Y+7	; 0x07
    19c8:	88 85       	ldd	r24, Y+8	; 0x08
    19ca:	99 85       	ldd	r25, Y+9	; 0x09
    19cc:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	1c f4       	brge	.+6      	; 0x19da <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	8e 87       	std	Y+14, r24	; 0x0e
    19d8:	b2 c0       	rjmp	.+356    	; 0x1b3e <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	6a 85       	ldd	r22, Y+10	; 0x0a
    19e4:	7b 85       	ldd	r23, Y+11	; 0x0b
    19e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    19e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    19ea:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	0c f0       	brlt	.+2      	; 0x19f4 <Lcd_4bit_enuSendEnableSignal+0xc0>
    19f2:	7b c0       	rjmp	.+246    	; 0x1aea <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	54 e4       	ldi	r21, 0x44	; 68
    19fc:	6a 81       	ldd	r22, Y+2	; 0x02
    19fe:	7b 81       	ldd	r23, Y+3	; 0x03
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <__divsf3>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	8f 87       	std	Y+15, r24	; 0x0f
    1a0e:	98 8b       	std	Y+16, r25	; 0x10
    1a10:	a9 8b       	std	Y+17, r26	; 0x11
    1a12:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a ef       	ldi	r20, 0xFA	; 250
    1a1a:	54 e4       	ldi	r21, 0x44	; 68
    1a1c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a1e:	78 89       	ldd	r23, Y+16	; 0x10
    1a20:	89 89       	ldd	r24, Y+17	; 0x11
    1a22:	9a 89       	ldd	r25, Y+18	; 0x12
    1a24:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	8b 8b       	std	Y+19, r24	; 0x13
    1a2e:	9c 8b       	std	Y+20, r25	; 0x14
    1a30:	ad 8b       	std	Y+21, r26	; 0x15
    1a32:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	6b 89       	ldd	r22, Y+19	; 0x13
    1a3e:	7c 89       	ldd	r23, Y+20	; 0x14
    1a40:	8d 89       	ldd	r24, Y+21	; 0x15
    1a42:	9e 89       	ldd	r25, Y+22	; 0x16
    1a44:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    1a48:	88 23       	and	r24, r24
    1a4a:	2c f4       	brge	.+10     	; 0x1a56 <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	98 8f       	std	Y+24, r25	; 0x18
    1a52:	8f 8b       	std	Y+23, r24	; 0x17
    1a54:	3f c0       	rjmp	.+126    	; 0x1ad4 <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	6b 89       	ldd	r22, Y+19	; 0x13
    1a60:	7c 89       	ldd	r23, Y+20	; 0x14
    1a62:	8d 89       	ldd	r24, Y+21	; 0x15
    1a64:	9e 89       	ldd	r25, Y+22	; 0x16
    1a66:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	4c f5       	brge	.+82     	; 0x1ac0 <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a78:	78 89       	ldd	r23, Y+16	; 0x10
    1a7a:	89 89       	ldd	r24, Y+17	; 0x11
    1a7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a7e:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	98 8f       	std	Y+24, r25	; 0x18
    1a94:	8f 8b       	std	Y+23, r24	; 0x17
    1a96:	0f c0       	rjmp	.+30     	; 0x1ab6 <Lcd_4bit_enuSendEnableSignal+0x182>
    1a98:	88 ec       	ldi	r24, 0xC8	; 200
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a9e:	89 8f       	std	Y+25, r24	; 0x19
    1aa0:	89 8d       	ldd	r24, Y+25	; 0x19
    1aa2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <Lcd_4bit_enuSendEnableSignal+0x170>
    1aa8:	9a 8f       	std	Y+26, r25	; 0x1a
    1aaa:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	98 8f       	std	Y+24, r25	; 0x18
    1ab4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aba:	89 2b       	or	r24, r25
    1abc:	69 f7       	brne	.-38     	; 0x1a98 <Lcd_4bit_enuSendEnableSignal+0x164>
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ac2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ac4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ac6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ac8:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	98 8f       	std	Y+24, r25	; 0x18
    1ad2:	8f 8b       	std	Y+23, r24	; 0x17
    1ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad8:	9c 8f       	std	Y+28, r25	; 0x1c
    1ada:	8b 8f       	std	Y+27, r24	; 0x1b
    1adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <Lcd_4bit_enuSendEnableSignal+0x1ac>
    1ae4:	9c 8f       	std	Y+28, r25	; 0x1c
    1ae6:	8b 8f       	std	Y+27, r24	; 0x1b
    1ae8:	2a c0       	rjmp	.+84     	; 0x1b3e <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	53 e4       	ldi	r21, 0x43	; 67
    1af2:	6e 81       	ldd	r22, Y+6	; 0x06
    1af4:	7f 81       	ldd	r23, Y+7	; 0x07
    1af6:	88 85       	ldd	r24, Y+8	; 0x08
    1af8:	99 85       	ldd	r25, Y+9	; 0x09
    1afa:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	ac f4       	brge	.+42     	; 0x1b2c <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1b02:	6a 85       	ldd	r22, Y+10	; 0x0a
    1b04:	7b 85       	ldd	r23, Y+11	; 0x0b
    1b06:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b08:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b0a:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9e 8f       	std	Y+30, r25	; 0x1e
    1b14:	8d 8f       	std	Y+29, r24	; 0x1d
    1b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b1a:	98 a3       	std	Y+32, r25	; 0x20
    1b1c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b20:	98 a1       	ldd	r25, Y+32	; 0x20
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <Lcd_4bit_enuSendEnableSignal+0x1ee>
    1b26:	98 a3       	std	Y+32, r25	; 0x20
    1b28:	8f 8f       	std	Y+31, r24	; 0x1f
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b2c:	6e 81       	ldd	r22, Y+6	; 0x06
    1b2e:	7f 81       	ldd	r23, Y+7	; 0x07
    1b30:	88 85       	ldd	r24, Y+8	; 0x08
    1b32:	99 85       	ldd	r25, Y+9	; 0x09
    1b34:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	8e 87       	std	Y+14, r24	; 0x0e
    1b3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b40:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b42:	89 a1       	ldd	r24, Y+33	; 0x21
    1b44:	8a 95       	dec	r24
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <Lcd_4bit_enuSendEnableSignal+0x210>
    1b48:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    1b4a:	8a a1       	ldd	r24, Y+34	; 0x22
    1b4c:	9b a1       	ldd	r25, Y+35	; 0x23
    1b4e:	fc 01       	movw	r30, r24
    1b50:	85 81       	ldd	r24, Z+5	; 0x05
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1b58:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b5c:	a3 96       	adiw	r28, 0x23	; 35
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	08 95       	ret

00001b6e <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	29 97       	sbiw	r28, 0x09	; 9
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	9f 83       	std	Y+7, r25	; 0x07
    1b84:	8e 83       	std	Y+6, r24	; 0x06
    1b86:	79 87       	std	Y+9, r23	; 0x09
    1b88:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    1b8a:	83 e0       	ldi	r24, 0x03	; 3
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    1b8e:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    1b90:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    1b92:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    1b94:	8e 81       	ldd	r24, Y+6	; 0x06
    1b96:	9f 81       	ldd	r25, Y+7	; 0x07
    1b98:	fc 01       	movw	r30, r24
    1b9a:	81 85       	ldd	r24, Z+9	; 0x09
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    1b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba2:	89 2b       	or	r24, r25
    1ba4:	21 f0       	breq	.+8      	; 0x1bae <Keypad_enuRead+0x40>
    1ba6:	88 85       	ldd	r24, Y+8	; 0x08
    1ba8:	99 85       	ldd	r25, Y+9	; 0x09
    1baa:	89 2b       	or	r24, r25
    1bac:	19 f4       	brne	.+6      	; 0x1bb4 <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	df c0       	rjmp	.+446    	; 0x1d72 <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Keypad_DisableControlPins>
    1bbc:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    1bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	80 85       	ldd	r24, Z+8	; 0x08
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	21 f0       	breq	.+8      	; 0x1bd6 <Keypad_enuRead+0x68>
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <Keypad_enuRead+0x66>
    1bd2:	67 c0       	rjmp	.+206    	; 0x1ca2 <Keypad_enuRead+0x134>
    1bd4:	cc c0       	rjmp	.+408    	; 0x1d6e <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    1bd6:	1a 82       	std	Y+2, r1	; 0x02
    1bd8:	5f c0       	rjmp	.+190    	; 0x1c98 <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    1bda:	8e 81       	ldd	r24, Y+6	; 0x06
    1bdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bde:	fc 01       	movw	r30, r24
    1be0:	91 85       	ldd	r25, Z+9	; 0x09
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	99 23       	and	r25, r25
    1be6:	09 f0       	breq	.+2      	; 0x1bea <Keypad_enuRead+0x7c>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	48 2f       	mov	r20, r24
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bf4:	3f 81       	ldd	r19, Y+7	; 0x07
    1bf6:	82 0f       	add	r24, r18
    1bf8:	93 1f       	adc	r25, r19
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	80 81       	ld	r24, Z
    1bfe:	64 2f       	mov	r22, r20
    1c00:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1c04:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1c06:	1b 82       	std	Y+3, r1	; 0x03
    1c08:	30 c0       	rjmp	.+96     	; 0x1c6a <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	2e 81       	ldd	r18, Y+6	; 0x06
    1c12:	3f 81       	ldd	r19, Y+7	; 0x07
    1c14:	82 0f       	add	r24, r18
    1c16:	93 1f       	adc	r25, r19
    1c18:	04 96       	adiw	r24, 0x04	; 4
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	20 81       	ld	r18, Z
    1c1e:	ce 01       	movw	r24, r28
    1c20:	05 96       	adiw	r24, 0x05	; 5
    1c22:	bc 01       	movw	r22, r24
    1c24:	82 2f       	mov	r24, r18
    1c26:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Dio_enuReadChannel>
    1c2a:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    1c2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c30:	fc 01       	movw	r30, r24
    1c32:	91 85       	ldd	r25, Z+9	; 0x09
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	98 17       	cp	r25, r24
    1c38:	a9 f0       	breq	.+42     	; 0x1c64 <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	82 0f       	add	r24, r18
    1c50:	93 1f       	adc	r25, r19
    1c52:	81 55       	subi	r24, 0x51	; 81
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 81       	ld	r18, Z
    1c5a:	88 85       	ldd	r24, Y+8	; 0x08
    1c5c:	99 85       	ldd	r25, Y+9	; 0x09
    1c5e:	fc 01       	movw	r30, r24
    1c60:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    1c62:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	8f 5f       	subi	r24, 0xFF	; 255
    1c68:	8b 83       	std	Y+3, r24	; 0x03
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	84 30       	cpi	r24, 0x04	; 4
    1c6e:	68 f2       	brcs	.-102    	; 0x1c0a <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    1c70:	8e 81       	ldd	r24, Y+6	; 0x06
    1c72:	9f 81       	ldd	r25, Y+7	; 0x07
    1c74:	fc 01       	movw	r30, r24
    1c76:	41 85       	ldd	r20, Z+9	; 0x09
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c80:	3f 81       	ldd	r19, Y+7	; 0x07
    1c82:	82 0f       	add	r24, r18
    1c84:	93 1f       	adc	r25, r19
    1c86:	fc 01       	movw	r30, r24
    1c88:	80 81       	ld	r24, Z
    1c8a:	64 2f       	mov	r22, r20
    1c8c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1c90:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	8f 5f       	subi	r24, 0xFF	; 255
    1c96:	8a 83       	std	Y+2, r24	; 0x02
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	84 30       	cpi	r24, 0x04	; 4
    1c9c:	08 f4       	brcc	.+2      	; 0x1ca0 <Keypad_enuRead+0x132>
    1c9e:	9d cf       	rjmp	.-198    	; 0x1bda <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    1ca0:	68 c0       	rjmp	.+208    	; 0x1d72 <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1ca2:	1b 82       	std	Y+3, r1	; 0x03
    1ca4:	5f c0       	rjmp	.+190    	; 0x1d64 <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    1ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    1caa:	fc 01       	movw	r30, r24
    1cac:	91 85       	ldd	r25, Z+9	; 0x09
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	99 23       	and	r25, r25
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <Keypad_enuRead+0x148>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	48 2f       	mov	r20, r24
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1cc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1cc2:	82 0f       	add	r24, r18
    1cc4:	93 1f       	adc	r25, r19
    1cc6:	04 96       	adiw	r24, 0x04	; 4
    1cc8:	fc 01       	movw	r30, r24
    1cca:	80 81       	ld	r24, Z
    1ccc:	64 2f       	mov	r22, r20
    1cce:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1cd2:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    1cd4:	1a 82       	std	Y+2, r1	; 0x02
    1cd6:	2e c0       	rjmp	.+92     	; 0x1d34 <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce2:	82 0f       	add	r24, r18
    1ce4:	93 1f       	adc	r25, r19
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	20 81       	ld	r18, Z
    1cea:	ce 01       	movw	r24, r28
    1cec:	05 96       	adiw	r24, 0x05	; 5
    1cee:	bc 01       	movw	r22, r24
    1cf0:	82 2f       	mov	r24, r18
    1cf2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Dio_enuReadChannel>
    1cf6:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    1cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	91 85       	ldd	r25, Z+9	; 0x09
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	98 17       	cp	r25, r24
    1d04:	a1 f0       	breq	.+40     	; 0x1d2e <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	82 0f       	add	r24, r18
    1d1c:	93 1f       	adc	r25, r19
    1d1e:	81 55       	subi	r24, 0x51	; 81
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	fc 01       	movw	r30, r24
    1d24:	20 81       	ld	r18, Z
    1d26:	88 85       	ldd	r24, Y+8	; 0x08
    1d28:	99 85       	ldd	r25, Y+9	; 0x09
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	8a 83       	std	Y+2, r24	; 0x02
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	78 f2       	brcs	.-98     	; 0x1cd8 <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    1d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3e:	fc 01       	movw	r30, r24
    1d40:	41 85       	ldd	r20, Z+9	; 0x09
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	88 2f       	mov	r24, r24
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	2e 81       	ldd	r18, Y+6	; 0x06
    1d4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d4c:	82 0f       	add	r24, r18
    1d4e:	93 1f       	adc	r25, r19
    1d50:	04 96       	adiw	r24, 0x04	; 4
    1d52:	fc 01       	movw	r30, r24
    1d54:	80 81       	ld	r24, Z
    1d56:	64 2f       	mov	r22, r20
    1d58:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1d5c:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	8b 83       	std	Y+3, r24	; 0x03
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	08 f4       	brcc	.+2      	; 0x1d6c <Keypad_enuRead+0x1fe>
    1d6a:	9d cf       	rjmp	.-198    	; 0x1ca6 <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d74:	29 96       	adiw	r28, 0x09	; 9
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	08 95       	ret

00001d86 <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <Keypad_DisableControlPins+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <Keypad_DisableControlPins+0x8>
    1d8e:	1f 92       	push	r1
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9d 83       	std	Y+5, r25	; 0x05
    1d96:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    1d98:	83 e0       	ldi	r24, 0x03	; 3
    1d9a:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    1d9c:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    1d9e:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	9d 81       	ldd	r25, Y+5	; 0x05
    1da4:	89 2b       	or	r24, r25
    1da6:	19 f4       	brne	.+6      	; 0x1dae <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	42 c0       	rjmp	.+132    	; 0x1e32 <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    1dae:	8c 81       	ldd	r24, Y+4	; 0x04
    1db0:	9d 81       	ldd	r25, Y+5	; 0x05
    1db2:	fc 01       	movw	r30, r24
    1db4:	80 85       	ldd	r24, Z+8	; 0x08
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	19 f0       	breq	.+6      	; 0x1dc4 <Keypad_DisableControlPins+0x3e>
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	d9 f0       	breq	.+54     	; 0x1df8 <Keypad_DisableControlPins+0x72>
    1dc2:	35 c0       	rjmp	.+106    	; 0x1e2e <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    1dc4:	1a 82       	std	Y+2, r1	; 0x02
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    1dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dca:	9d 81       	ldd	r25, Y+5	; 0x05
    1dcc:	fc 01       	movw	r30, r24
    1dce:	41 85       	ldd	r20, Z+9	; 0x09
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	88 2f       	mov	r24, r24
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	fc 01       	movw	r30, r24
    1de0:	80 81       	ld	r24, Z
    1de2:	64 2f       	mov	r22, r20
    1de4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1de8:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	8f 5f       	subi	r24, 0xFF	; 255
    1dee:	8a 83       	std	Y+2, r24	; 0x02
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	84 30       	cpi	r24, 0x04	; 4
    1df4:	48 f3       	brcs	.-46     	; 0x1dc8 <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    1df6:	1d c0       	rjmp	.+58     	; 0x1e32 <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    1df8:	1a 82       	std	Y+2, r1	; 0x02
    1dfa:	15 c0       	rjmp	.+42     	; 0x1e26 <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    1dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1e00:	fc 01       	movw	r30, r24
    1e02:	41 85       	ldd	r20, Z+9	; 0x09
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e0e:	82 0f       	add	r24, r18
    1e10:	93 1f       	adc	r25, r19
    1e12:	04 96       	adiw	r24, 0x04	; 4
    1e14:	fc 01       	movw	r30, r24
    1e16:	80 81       	ld	r24, Z
    1e18:	64 2f       	mov	r22, r20
    1e1a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
    1e1e:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	8a 83       	std	Y+2, r24	; 0x02
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	84 30       	cpi	r24, 0x04	; 4
    1e2a:	40 f3       	brcs	.-48     	; 0x1dfc <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	08 95       	ret

00001e44 <Button_enuRead>:



/********************************** Software Interfaces Declarations *******************/

Button_StatusErrorType Button_enuRead(const Button_ConfigType *Address_Button,Button_PressStatusType* Address_State ){
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <Button_enuRead+0x6>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <Button_enuRead+0x8>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <Button_enuRead+0xa>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
    1e56:	7e 83       	std	Y+6, r23	; 0x06
    1e58:	6d 83       	std	Y+5, r22	; 0x05

	Button_StatusErrorType Loc_enuStatus = BUTTON_STATUS_OK;
    1e5a:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    1e5c:	1a 82       	std	Y+2, r1	; 0x02
	if( NULL == Address_Button || NULL == Address_State ){
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	89 2b       	or	r24, r25
    1e64:	21 f0       	breq	.+8      	; 0x1e6e <Button_enuRead+0x2a>
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	89 2b       	or	r24, r25
    1e6c:	19 f4       	brne	.+6      	; 0x1e74 <Button_enuRead+0x30>
		Loc_enuStatus = BUTTON_STATUS_NULL_POINTER_ADDRESS;
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	31 c0       	rjmp	.+98     	; 0x1ed6 <Button_enuRead+0x92>

	}
	else{
	        switch(Address_Button->button_connection){
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	fc 01       	movw	r30, r24
    1e7a:	81 81       	ldd	r24, Z+1	; 0x01
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	71 f0       	breq	.+28     	; 0x1ea0 <Button_enuRead+0x5c>
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	29 f5       	brne	.+74     	; 0x1ed2 <Button_enuRead+0x8e>

	            case BUTTON_CONNECTION_PULL_DOWN:
	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	20 81       	ld	r18, Z
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	bc 01       	movw	r22, r24
    1e96:	82 2f       	mov	r24, r18
    1e98:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Dio_enuReadChannel>
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
	                break;
    1e9e:	1b c0       	rjmp	.+54     	; 0x1ed6 <Button_enuRead+0x92>
	            case BUTTON_CONNECTION_PULL_UP:

	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	20 81       	ld	r18, Z
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	bc 01       	movw	r22, r24
    1eae:	82 2f       	mov	r24, r18
    1eb0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Dio_enuReadChannel>
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
	                *Address_State = !(*Address_State);
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	fc 01       	movw	r30, r24
    1ebc:	90 81       	ld	r25, Z
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	99 23       	and	r25, r25
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <Button_enuRead+0x82>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	fc 01       	movw	r30, r24
    1ece:	20 83       	st	Z, r18
	                break;
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <Button_enuRead+0x92>

	            default:
	                Loc_enuStatus = BUTTON_STATUS_FAIL;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	89 83       	std	Y+1, r24	; 0x01
	    }




	return Loc_enuStatus;
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ed8:	26 96       	adiw	r28, 0x06	; 6
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	08 95       	ret

00001eea <main>:
void StopSegments(void);
void ResetSegments(void);

///////////////////////////////////////////////////////////////////////

int main(void){
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62


	Port_voidInit();
    1ef2:	0e 94 bb 01 	call	0x376	; 0x376 <Port_voidInit>

	ResetSegments();
    1ef6:	0e 94 ed 14 	call	0x29da	; 0x29da <ResetSegments>

	while(1){

		switch(Global_u8Flag){
    1efa:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <Global_u8Flag>
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	91 05       	cpc	r25, r1
    1f06:	49 f0       	breq	.+18     	; 0x1f1a <main+0x30>
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	49 f0       	breq	.+18     	; 0x1f20 <main+0x36>
    1f0e:	89 2b       	or	r24, r25
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <main+0x2a>
				break;
			case RESET_FLAG:
				ResetSegments();
				break;
			default:
				break;
    1f12:	09 c0       	rjmp	.+18     	; 0x1f26 <main+0x3c>

	while(1){

		switch(Global_u8Flag){
			case START_FLAG:
				StartSegments();
    1f14:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <StartSegments>
				break;
    1f18:	06 c0       	rjmp	.+12     	; 0x1f26 <main+0x3c>
			case STOP_FLAG:
				StopSegments();
    1f1a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <StopSegments>
				break;
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <main+0x3c>
			case RESET_FLAG:
				ResetSegments();
    1f20:	0e 94 ed 14 	call	0x29da	; 0x29da <ResetSegments>
				break;
    1f24:	00 00       	nop
		}




	}
    1f26:	e9 cf       	rjmp	.-46     	; 0x1efa <main+0x10>

00001f28 <DisableSegment>:
	return 0;
}

void DisableSegment(u8 Copy_u8SegmentCom){
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	1f 92       	push	r1
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	89 83       	std	Y+1, r24	; 0x01

	Dio_enuWriteChannel(Copy_u8SegmentCom, 1);
    1f34:	61 e0       	ldi	r22, 0x01	; 1
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
}
    1f3c:	00 00       	nop
    1f3e:	0f 90       	pop	r0
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	08 95       	ret

00001f46 <EnableSegment>:

void EnableSegment(u8 Copy_u8SegmentCom){
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	1f 92       	push	r1
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	89 83       	std	Y+1, r24	; 0x01

	Dio_enuWriteChannel(Copy_u8SegmentCom, 0);
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Dio_enuWriteChannel>
}
    1f5a:	00 00       	nop
    1f5c:	0f 90       	pop	r0
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	08 95       	ret

00001f64 <StartSegments>:
void StartSegments(void){
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	ec 97       	sbiw	r28, 0x3c	; 60
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61



	u32 Loc_u32Ticks = ZERO_VALUE;
    1f78:	19 82       	std	Y+1, r1	; 0x01
    1f7a:	1a 82       	std	Y+2, r1	; 0x02
    1f7c:	1b 82       	std	Y+3, r1	; 0x03
    1f7e:	1c 82       	std	Y+4, r1	; 0x04
		do{
			do{
				do{


					for( Loc_u32Ticks = 0;Loc_u32Ticks<40;++Loc_u32Ticks){
    1f80:	19 82       	std	Y+1, r1	; 0x01
    1f82:	1a 82       	std	Y+2, r1	; 0x02
    1f84:	1b 82       	std	Y+3, r1	; 0x03
    1f86:	1c 82       	std	Y+4, r1	; 0x04
    1f88:	63 c2       	rjmp	.+1222   	; 0x2450 <StartSegments+0x4ec>

									Button_enuRead(&StopButton, &Stop_ButtonState);
    1f8a:	6b ec       	ldi	r22, 0xCB	; 203
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	83 ea       	ldi	r24, 0xA3	; 163
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
									if(Stop_ButtonState == BUTTON_PRESSED){
    1f96:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <Stop_ButtonState>
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	21 f4       	brne	.+8      	; 0x1fa6 <StartSegments+0x42>
										Global_u8Flag = STOP_FLAG;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8Flag>
										return ;
    1fa4:	8c c2       	rjmp	.+1304   	; 0x24be <StartSegments+0x55a>
									}
									Button_enuRead(&ResetButton, &Reset_ButtonState);
    1fa6:	6c ec       	ldi	r22, 0xCC	; 204
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	85 ea       	ldi	r24, 0xA5	; 165
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
									if(Reset_ButtonState == BUTTON_PRESSED){
    1fb2:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Reset_ButtonState>
    1fb6:	81 30       	cpi	r24, 0x01	; 1
    1fb8:	21 f4       	brne	.+8      	; 0x1fc2 <StartSegments+0x5e>
										Global_u8Flag = RESET_FLAG;
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8Flag>
										return ;
    1fc0:	7e c2       	rjmp	.+1276   	; 0x24be <StartSegments+0x55a>
									}

						Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8ForthDigit);
    1fc2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Global_u8ForthDigit>
    1fc6:	68 2f       	mov	r22, r24
    1fc8:	88 e8       	ldi	r24, 0x88	; 136
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
						DisableSegment(Seven_SegmentCom1);
    1fd0:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <Seven_SegmentCom1>
    1fd4:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
						EnableSegment(Seven_SegmentCom4);
    1fd8:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Seven_SegmentCom4>
    1fdc:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 ea       	ldi	r26, 0xA0	; 160
    1fe6:	b0 e4       	ldi	r27, 0x40	; 64
    1fe8:	89 8b       	std	Y+17, r24	; 0x11
    1fea:	9a 8b       	std	Y+18, r25	; 0x12
    1fec:	ab 8b       	std	Y+19, r26	; 0x13
    1fee:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a ef       	ldi	r20, 0xFA	; 250
    1ff6:	54 e4       	ldi	r21, 0x44	; 68
    1ff8:	69 89       	ldd	r22, Y+17	; 0x11
    1ffa:	7a 89       	ldd	r23, Y+18	; 0x12
    1ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    2000:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	8d 8b       	std	Y+21, r24	; 0x15
    200a:	9e 8b       	std	Y+22, r25	; 0x16
    200c:	af 8b       	std	Y+23, r26	; 0x17
    200e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e8       	ldi	r20, 0x80	; 128
    2016:	5f e3       	ldi	r21, 0x3F	; 63
    2018:	6d 89       	ldd	r22, Y+21	; 0x15
    201a:	7e 89       	ldd	r23, Y+22	; 0x16
    201c:	8f 89       	ldd	r24, Y+23	; 0x17
    201e:	98 8d       	ldd	r25, Y+24	; 0x18
    2020:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    2024:	88 23       	and	r24, r24
    2026:	2c f4       	brge	.+10     	; 0x2032 <StartSegments+0xce>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9a 8f       	std	Y+26, r25	; 0x1a
    202e:	89 8f       	std	Y+25, r24	; 0x19
    2030:	3f c0       	rjmp	.+126    	; 0x20b0 <StartSegments+0x14c>
	else if (__tmp > 65535)
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	4f e7       	ldi	r20, 0x7F	; 127
    2038:	57 e4       	ldi	r21, 0x47	; 71
    203a:	6d 89       	ldd	r22, Y+21	; 0x15
    203c:	7e 89       	ldd	r23, Y+22	; 0x16
    203e:	8f 89       	ldd	r24, Y+23	; 0x17
    2040:	98 8d       	ldd	r25, Y+24	; 0x18
    2042:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    2046:	18 16       	cp	r1, r24
    2048:	4c f5       	brge	.+82     	; 0x209c <StartSegments+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	69 89       	ldd	r22, Y+17	; 0x11
    2054:	7a 89       	ldd	r23, Y+18	; 0x12
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9a 8f       	std	Y+26, r25	; 0x1a
    2070:	89 8f       	std	Y+25, r24	; 0x19
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <StartSegments+0x12e>
    2074:	88 ec       	ldi	r24, 0xC8	; 200
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9c 8f       	std	Y+28, r25	; 0x1c
    207a:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    207c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    207e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <StartSegments+0x11c>
    2084:	9c 8f       	std	Y+28, r25	; 0x1c
    2086:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2088:	89 8d       	ldd	r24, Y+25	; 0x19
    208a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	9a 8f       	std	Y+26, r25	; 0x1a
    2090:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2092:	89 8d       	ldd	r24, Y+25	; 0x19
    2094:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2096:	89 2b       	or	r24, r25
    2098:	69 f7       	brne	.-38     	; 0x2074 <StartSegments+0x110>
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <StartSegments+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9a 8f       	std	Y+26, r25	; 0x1a
    20ae:	89 8f       	std	Y+25, r24	; 0x19
    20b0:	89 8d       	ldd	r24, Y+25	; 0x19
    20b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20b4:	9e 8f       	std	Y+30, r25	; 0x1e
    20b6:	8d 8f       	std	Y+29, r24	; 0x1d
    20b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <StartSegments+0x158>
    20c0:	9e 8f       	std	Y+30, r25	; 0x1e
    20c2:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(5);

													Button_enuRead(&StopButton, &Stop_ButtonState);
    20c4:	6b ec       	ldi	r22, 0xCB	; 203
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	83 ea       	ldi	r24, 0xA3	; 163
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
													if(Stop_ButtonState == BUTTON_PRESSED){
    20d0:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <Stop_ButtonState>
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	21 f4       	brne	.+8      	; 0x20e0 <StartSegments+0x17c>
														Global_u8Flag = STOP_FLAG;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8Flag>
														return ;
    20de:	ef c1       	rjmp	.+990    	; 0x24be <StartSegments+0x55a>
													}
													Button_enuRead(&ResetButton, &Reset_ButtonState);
    20e0:	6c ec       	ldi	r22, 0xCC	; 204
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	85 ea       	ldi	r24, 0xA5	; 165
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
													if(Reset_ButtonState == BUTTON_PRESSED){
    20ec:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Reset_ButtonState>
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	21 f4       	brne	.+8      	; 0x20fc <StartSegments+0x198>
														Global_u8Flag = RESET_FLAG;
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8Flag>
														return ;
    20fa:	e1 c1       	rjmp	.+962    	; 0x24be <StartSegments+0x55a>
													}
						Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8ThirdDigit);
    20fc:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <Global_u8ThirdDigit>
    2100:	68 2f       	mov	r22, r24
    2102:	88 e8       	ldi	r24, 0x88	; 136
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
						DisableSegment(Seven_SegmentCom4);
    210a:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Seven_SegmentCom4>
    210e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
						EnableSegment(Seven_SegmentCom3);
    2112:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Seven_SegmentCom3>
    2116:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a0 ea       	ldi	r26, 0xA0	; 160
    2120:	b0 e4       	ldi	r27, 0x40	; 64
    2122:	8d 87       	std	Y+13, r24	; 0x0d
    2124:	9e 87       	std	Y+14, r25	; 0x0e
    2126:	af 87       	std	Y+15, r26	; 0x0f
    2128:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a ef       	ldi	r20, 0xFA	; 250
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	6d 85       	ldd	r22, Y+13	; 0x0d
    2134:	7e 85       	ldd	r23, Y+14	; 0x0e
    2136:	8f 85       	ldd	r24, Y+15	; 0x0f
    2138:	98 89       	ldd	r25, Y+16	; 0x10
    213a:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	89 a7       	std	Y+41, r24	; 0x29
    2144:	9a a7       	std	Y+42, r25	; 0x2a
    2146:	ab a7       	std	Y+43, r26	; 0x2b
    2148:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	69 a5       	ldd	r22, Y+41	; 0x29
    2154:	7a a5       	ldd	r23, Y+42	; 0x2a
    2156:	8b a5       	ldd	r24, Y+43	; 0x2b
    2158:	9c a5       	ldd	r25, Y+44	; 0x2c
    215a:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    215e:	88 23       	and	r24, r24
    2160:	2c f4       	brge	.+10     	; 0x216c <StartSegments+0x208>
		__ticks = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9e a7       	std	Y+46, r25	; 0x2e
    2168:	8d a7       	std	Y+45, r24	; 0x2d
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <StartSegments+0x286>
	else if (__tmp > 65535)
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	69 a5       	ldd	r22, Y+41	; 0x29
    2176:	7a a5       	ldd	r23, Y+42	; 0x2a
    2178:	8b a5       	ldd	r24, Y+43	; 0x2b
    217a:	9c a5       	ldd	r25, Y+44	; 0x2c
    217c:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    2180:	18 16       	cp	r1, r24
    2182:	4c f5       	brge	.+82     	; 0x21d6 <StartSegments+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	6d 85       	ldd	r22, Y+13	; 0x0d
    218e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2190:	8f 85       	ldd	r24, Y+15	; 0x0f
    2192:	98 89       	ldd	r25, Y+16	; 0x10
    2194:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9e a7       	std	Y+46, r25	; 0x2e
    21aa:	8d a7       	std	Y+45, r24	; 0x2d
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <StartSegments+0x268>
    21ae:	88 ec       	ldi	r24, 0xC8	; 200
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	98 ab       	std	Y+48, r25	; 0x30
    21b4:	8f a7       	std	Y+47, r24	; 0x2f
    21b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b8:	98 a9       	ldd	r25, Y+48	; 0x30
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <StartSegments+0x256>
    21be:	98 ab       	std	Y+48, r25	; 0x30
    21c0:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	9e a7       	std	Y+46, r25	; 0x2e
    21ca:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    21d0:	89 2b       	or	r24, r25
    21d2:	69 f7       	brne	.-38     	; 0x21ae <StartSegments+0x24a>
    21d4:	14 c0       	rjmp	.+40     	; 0x21fe <StartSegments+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d6:	69 a5       	ldd	r22, Y+41	; 0x29
    21d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    21da:	8b a5       	ldd	r24, Y+43	; 0x2b
    21dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21de:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9e a7       	std	Y+46, r25	; 0x2e
    21e8:	8d a7       	std	Y+45, r24	; 0x2d
    21ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    21ee:	9a ab       	std	Y+50, r25	; 0x32
    21f0:	89 ab       	std	Y+49, r24	; 0x31
    21f2:	89 a9       	ldd	r24, Y+49	; 0x31
    21f4:	9a a9       	ldd	r25, Y+50	; 0x32
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <StartSegments+0x292>
    21fa:	9a ab       	std	Y+50, r25	; 0x32
    21fc:	89 ab       	std	Y+49, r24	; 0x31
						_delay_ms(5);


						Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8SecondDigit);
    21fe:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Global_u8SecondDigit>
    2202:	68 2f       	mov	r22, r24
    2204:	88 e8       	ldi	r24, 0x88	; 136
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
						DisableSegment(Seven_SegmentCom3);
    220c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Seven_SegmentCom3>
    2210:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
						EnableSegment(Seven_SegmentCom2);
    2214:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Seven_SegmentCom2>
    2218:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a0 ea       	ldi	r26, 0xA0	; 160
    2222:	b0 e4       	ldi	r27, 0x40	; 64
    2224:	8d 83       	std	Y+5, r24	; 0x05
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	af 83       	std	Y+7, r26	; 0x07
    222a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a ef       	ldi	r20, 0xFA	; 250
    2232:	54 e4       	ldi	r21, 0x44	; 68
    2234:	6d 81       	ldd	r22, Y+5	; 0x05
    2236:	7e 81       	ldd	r23, Y+6	; 0x06
    2238:	8f 81       	ldd	r24, Y+7	; 0x07
    223a:	98 85       	ldd	r25, Y+8	; 0x08
    223c:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8f 8f       	std	Y+31, r24	; 0x1f
    2246:	98 a3       	std	Y+32, r25	; 0x20
    2248:	a9 a3       	std	Y+33, r26	; 0x21
    224a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2256:	78 a1       	ldd	r23, Y+32	; 0x20
    2258:	89 a1       	ldd	r24, Y+33	; 0x21
    225a:	9a a1       	ldd	r25, Y+34	; 0x22
    225c:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <StartSegments+0x30a>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9c a3       	std	Y+36, r25	; 0x24
    226a:	8b a3       	std	Y+35, r24	; 0x23
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <StartSegments+0x388>
	else if (__tmp > 65535)
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2278:	78 a1       	ldd	r23, Y+32	; 0x20
    227a:	89 a1       	ldd	r24, Y+33	; 0x21
    227c:	9a a1       	ldd	r25, Y+34	; 0x22
    227e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <StartSegments+0x374>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	6d 81       	ldd	r22, Y+5	; 0x05
    2290:	7e 81       	ldd	r23, Y+6	; 0x06
    2292:	8f 81       	ldd	r24, Y+7	; 0x07
    2294:	98 85       	ldd	r25, Y+8	; 0x08
    2296:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9c a3       	std	Y+36, r25	; 0x24
    22ac:	8b a3       	std	Y+35, r24	; 0x23
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <StartSegments+0x36a>
    22b0:	88 ec       	ldi	r24, 0xC8	; 200
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9e a3       	std	Y+38, r25	; 0x26
    22b6:	8d a3       	std	Y+37, r24	; 0x25
    22b8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ba:	9e a1       	ldd	r25, Y+38	; 0x26
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <StartSegments+0x358>
    22c0:	9e a3       	std	Y+38, r25	; 0x26
    22c2:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8b a1       	ldd	r24, Y+35	; 0x23
    22c6:	9c a1       	ldd	r25, Y+36	; 0x24
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9c a3       	std	Y+36, r25	; 0x24
    22cc:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8b a1       	ldd	r24, Y+35	; 0x23
    22d0:	9c a1       	ldd	r25, Y+36	; 0x24
    22d2:	89 2b       	or	r24, r25
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <StartSegments+0x34c>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <StartSegments+0x39c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22da:	78 a1       	ldd	r23, Y+32	; 0x20
    22dc:	89 a1       	ldd	r24, Y+33	; 0x21
    22de:	9a a1       	ldd	r25, Y+34	; 0x22
    22e0:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9c a3       	std	Y+36, r25	; 0x24
    22ea:	8b a3       	std	Y+35, r24	; 0x23
    22ec:	8b a1       	ldd	r24, Y+35	; 0x23
    22ee:	9c a1       	ldd	r25, Y+36	; 0x24
    22f0:	98 a7       	std	Y+40, r25	; 0x28
    22f2:	8f a3       	std	Y+39, r24	; 0x27
    22f4:	8f a1       	ldd	r24, Y+39	; 0x27
    22f6:	98 a5       	ldd	r25, Y+40	; 0x28
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <StartSegments+0x394>
    22fc:	98 a7       	std	Y+40, r25	; 0x28
    22fe:	8f a3       	std	Y+39, r24	; 0x27
						_delay_ms(5);

										Button_enuRead(&StopButton, &Stop_ButtonState);
    2300:	6b ec       	ldi	r22, 0xCB	; 203
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	83 ea       	ldi	r24, 0xA3	; 163
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
										if(Stop_ButtonState == BUTTON_PRESSED){
    230c:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <Stop_ButtonState>
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	21 f4       	brne	.+8      	; 0x231c <StartSegments+0x3b8>
											Global_u8Flag = STOP_FLAG;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8Flag>
											return ;
    231a:	d1 c0       	rjmp	.+418    	; 0x24be <StartSegments+0x55a>
										}
										Button_enuRead(&ResetButton, &Reset_ButtonState);
    231c:	6c ec       	ldi	r22, 0xCC	; 204
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	85 ea       	ldi	r24, 0xA5	; 165
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
										if(Reset_ButtonState == BUTTON_PRESSED){
    2328:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Reset_ButtonState>
    232c:	81 30       	cpi	r24, 0x01	; 1
    232e:	21 f4       	brne	.+8      	; 0x2338 <StartSegments+0x3d4>
											Global_u8Flag = RESET_FLAG;
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8Flag>
											return ;
    2336:	c3 c0       	rjmp	.+390    	; 0x24be <StartSegments+0x55a>
										}


						Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8FirstDigit);
    2338:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Global_u8FirstDigit>
    233c:	68 2f       	mov	r22, r24
    233e:	88 e8       	ldi	r24, 0x88	; 136
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
						DisableSegment(Seven_SegmentCom2);
    2346:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Seven_SegmentCom2>
    234a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
						EnableSegment(Seven_SegmentCom1);
    234e:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <Seven_SegmentCom1>
    2352:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e7       	ldi	r26, 0x70	; 112
    235c:	b1 e4       	ldi	r27, 0x41	; 65
    235e:	89 87       	std	Y+9, r24	; 0x09
    2360:	9a 87       	std	Y+10, r25	; 0x0a
    2362:	ab 87       	std	Y+11, r26	; 0x0b
    2364:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a ef       	ldi	r20, 0xFA	; 250
    236c:	54 e4       	ldi	r21, 0x44	; 68
    236e:	69 85       	ldd	r22, Y+9	; 0x09
    2370:	7a 85       	ldd	r23, Y+10	; 0x0a
    2372:	8b 85       	ldd	r24, Y+11	; 0x0b
    2374:	9c 85       	ldd	r25, Y+12	; 0x0c
    2376:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8b ab       	std	Y+51, r24	; 0x33
    2380:	9c ab       	std	Y+52, r25	; 0x34
    2382:	ad ab       	std	Y+53, r26	; 0x35
    2384:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	6b a9       	ldd	r22, Y+51	; 0x33
    2390:	7c a9       	ldd	r23, Y+52	; 0x34
    2392:	8d a9       	ldd	r24, Y+53	; 0x35
    2394:	9e a9       	ldd	r25, Y+54	; 0x36
    2396:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    239a:	88 23       	and	r24, r24
    239c:	2c f4       	brge	.+10     	; 0x23a8 <StartSegments+0x444>
		__ticks = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	98 af       	std	Y+56, r25	; 0x38
    23a4:	8f ab       	std	Y+55, r24	; 0x37
    23a6:	3f c0       	rjmp	.+126    	; 0x2426 <StartSegments+0x4c2>
	else if (__tmp > 65535)
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	6b a9       	ldd	r22, Y+51	; 0x33
    23b2:	7c a9       	ldd	r23, Y+52	; 0x34
    23b4:	8d a9       	ldd	r24, Y+53	; 0x35
    23b6:	9e a9       	ldd	r25, Y+54	; 0x36
    23b8:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    23bc:	18 16       	cp	r1, r24
    23be:	4c f5       	brge	.+82     	; 0x2412 <StartSegments+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	69 85       	ldd	r22, Y+9	; 0x09
    23ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    23cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    23d0:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	98 af       	std	Y+56, r25	; 0x38
    23e6:	8f ab       	std	Y+55, r24	; 0x37
    23e8:	0f c0       	rjmp	.+30     	; 0x2408 <StartSegments+0x4a4>
    23ea:	88 ec       	ldi	r24, 0xC8	; 200
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9a af       	std	Y+58, r25	; 0x3a
    23f0:	89 af       	std	Y+57, r24	; 0x39
    23f2:	89 ad       	ldd	r24, Y+57	; 0x39
    23f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <StartSegments+0x492>
    23fa:	9a af       	std	Y+58, r25	; 0x3a
    23fc:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2400:	98 ad       	ldd	r25, Y+56	; 0x38
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	98 af       	std	Y+56, r25	; 0x38
    2406:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2408:	8f a9       	ldd	r24, Y+55	; 0x37
    240a:	98 ad       	ldd	r25, Y+56	; 0x38
    240c:	89 2b       	or	r24, r25
    240e:	69 f7       	brne	.-38     	; 0x23ea <StartSegments+0x486>
    2410:	14 c0       	rjmp	.+40     	; 0x243a <StartSegments+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2412:	6b a9       	ldd	r22, Y+51	; 0x33
    2414:	7c a9       	ldd	r23, Y+52	; 0x34
    2416:	8d a9       	ldd	r24, Y+53	; 0x35
    2418:	9e a9       	ldd	r25, Y+54	; 0x36
    241a:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	98 af       	std	Y+56, r25	; 0x38
    2424:	8f ab       	std	Y+55, r24	; 0x37
    2426:	8f a9       	ldd	r24, Y+55	; 0x37
    2428:	98 ad       	ldd	r25, Y+56	; 0x38
    242a:	9c af       	std	Y+60, r25	; 0x3c
    242c:	8b af       	std	Y+59, r24	; 0x3b
    242e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2430:	9c ad       	ldd	r25, Y+60	; 0x3c
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <StartSegments+0x4ce>
    2436:	9c af       	std	Y+60, r25	; 0x3c
    2438:	8b af       	std	Y+59, r24	; 0x3b
		do{
			do{
				do{


					for( Loc_u32Ticks = 0;Loc_u32Ticks<40;++Loc_u32Ticks){
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	ab 81       	ldd	r26, Y+3	; 0x03
    2440:	bc 81       	ldd	r27, Y+4	; 0x04
    2442:	01 96       	adiw	r24, 0x01	; 1
    2444:	a1 1d       	adc	r26, r1
    2446:	b1 1d       	adc	r27, r1
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	ab 83       	std	Y+3, r26	; 0x03
    244e:	bc 83       	std	Y+4, r27	; 0x04
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	ab 81       	ldd	r26, Y+3	; 0x03
    2456:	bc 81       	ldd	r27, Y+4	; 0x04
    2458:	88 97       	sbiw	r24, 0x28	; 40
    245a:	a1 05       	cpc	r26, r1
    245c:	b1 05       	cpc	r27, r1
    245e:	08 f4       	brcc	.+2      	; 0x2462 <StartSegments+0x4fe>
    2460:	94 cd       	rjmp	.-1240   	; 0x1f8a <StartSegments+0x26>
						DisableSegment(Seven_SegmentCom2);
						EnableSegment(Seven_SegmentCom1);
						_delay_ms(15);
					}// for

					Global_u8FirstDigit++;
    2462:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Global_u8FirstDigit>
    2466:	8f 5f       	subi	r24, 0xFF	; 255
    2468:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <Global_u8FirstDigit>
				}while(Global_u8FirstDigit<=9);
    246c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Global_u8FirstDigit>
    2470:	8a 30       	cpi	r24, 0x0A	; 10
    2472:	08 f4       	brcc	.+2      	; 0x2476 <StartSegments+0x512>
    2474:	85 cd       	rjmp	.-1270   	; 0x1f80 <StartSegments+0x1c>

				Global_u8FirstDigit = 0;
    2476:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <Global_u8FirstDigit>
				Global_u8SecondDigit++;
    247a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Global_u8SecondDigit>
    247e:	8f 5f       	subi	r24, 0xFF	; 255
    2480:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <Global_u8SecondDigit>
			}while(Global_u8SecondDigit<=9);
    2484:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Global_u8SecondDigit>
    2488:	8a 30       	cpi	r24, 0x0A	; 10
    248a:	08 f4       	brcc	.+2      	; 0x248e <StartSegments+0x52a>
    248c:	79 cd       	rjmp	.-1294   	; 0x1f80 <StartSegments+0x1c>

			Global_u8SecondDigit=0;
    248e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <Global_u8SecondDigit>
			Global_u8ThirdDigit++;
    2492:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <Global_u8ThirdDigit>
    2496:	8f 5f       	subi	r24, 0xFF	; 255
    2498:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <Global_u8ThirdDigit>
		}while(Global_u8ThirdDigit<=9);
    249c:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <Global_u8ThirdDigit>
    24a0:	8a 30       	cpi	r24, 0x0A	; 10
    24a2:	08 f4       	brcc	.+2      	; 0x24a6 <StartSegments+0x542>
    24a4:	6d cd       	rjmp	.-1318   	; 0x1f80 <StartSegments+0x1c>

		Global_u8ThirdDigit=0;
    24a6:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <Global_u8ThirdDigit>
		Global_u8ForthDigit++;
    24aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Global_u8ForthDigit>
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <Global_u8ForthDigit>
	}while(Global_u8ForthDigit<=9);
    24b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Global_u8ForthDigit>
    24b8:	8a 30       	cpi	r24, 0x0A	; 10
    24ba:	08 f4       	brcc	.+2      	; 0x24be <StartSegments+0x55a>
    24bc:	61 cd       	rjmp	.-1342   	; 0x1f80 <StartSegments+0x1c>

}
    24be:	ec 96       	adiw	r28, 0x3c	; 60
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	08 95       	ret

000024d0 <StopSegments>:

void StopSegments(void){
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	ec 97       	sbiw	r28, 0x3c	; 60
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61

	u32 Loc_u32Ticks = ZERO_VALUE;
    24e4:	19 82       	std	Y+1, r1	; 0x01
    24e6:	1a 82       	std	Y+2, r1	; 0x02
    24e8:	1b 82       	std	Y+3, r1	; 0x03
    24ea:	1c 82       	std	Y+4, r1	; 0x04
	for( Loc_u32Ticks = 0;Loc_u32Ticks<40;++Loc_u32Ticks){
    24ec:	19 82       	std	Y+1, r1	; 0x01
    24ee:	1a 82       	std	Y+2, r1	; 0x02
    24f0:	1b 82       	std	Y+3, r1	; 0x03
    24f2:	1c 82       	std	Y+4, r1	; 0x04
    24f4:	60 c2       	rjmp	.+1216   	; 0x29b6 <StopSegments+0x4e6>

				Button_enuRead(&StartButton, &Start_ButtonState);
    24f6:	6a ec       	ldi	r22, 0xCA	; 202
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	81 ea       	ldi	r24, 0xA1	; 161
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
				if(Start_ButtonState == BUTTON_PRESSED){
    2502:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Start_ButtonState>
    2506:	81 30       	cpi	r24, 0x01	; 1
    2508:	19 f4       	brne	.+6      	; 0x2510 <StopSegments+0x40>
					Global_u8Flag = START_FLAG;
    250a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Global_u8Flag>
					return ;
    250e:	5c c2       	rjmp	.+1208   	; 0x29c8 <StopSegments+0x4f8>
				}
				Button_enuRead(&ResetButton, &Reset_ButtonState);
    2510:	6c ec       	ldi	r22, 0xCC	; 204
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	85 ea       	ldi	r24, 0xA5	; 165
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
				if(Reset_ButtonState == BUTTON_PRESSED){
    251c:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Reset_ButtonState>
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	21 f4       	brne	.+8      	; 0x252c <StopSegments+0x5c>
					Global_u8Flag = RESET_FLAG;
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8Flag>
					return ;
    252a:	4e c2       	rjmp	.+1180   	; 0x29c8 <StopSegments+0x4f8>
				}

		Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8ForthDigit);
    252c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Global_u8ForthDigit>
    2530:	68 2f       	mov	r22, r24
    2532:	88 e8       	ldi	r24, 0x88	; 136
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
		DisableSegment(Seven_SegmentCom1);
    253a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <Seven_SegmentCom1>
    253e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
		EnableSegment(Seven_SegmentCom4);
    2542:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Seven_SegmentCom4>
    2546:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	a0 ea       	ldi	r26, 0xA0	; 160
    2550:	b0 e4       	ldi	r27, 0x40	; 64
    2552:	89 87       	std	Y+9, r24	; 0x09
    2554:	9a 87       	std	Y+10, r25	; 0x0a
    2556:	ab 87       	std	Y+11, r26	; 0x0b
    2558:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	4a ef       	ldi	r20, 0xFA	; 250
    2560:	54 e4       	ldi	r21, 0x44	; 68
    2562:	69 85       	ldd	r22, Y+9	; 0x09
    2564:	7a 85       	ldd	r23, Y+10	; 0x0a
    2566:	8b 85       	ldd	r24, Y+11	; 0x0b
    2568:	9c 85       	ldd	r25, Y+12	; 0x0c
    256a:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8f 8f       	std	Y+31, r24	; 0x1f
    2574:	98 a3       	std	Y+32, r25	; 0x20
    2576:	a9 a3       	std	Y+33, r26	; 0x21
    2578:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e8       	ldi	r20, 0x80	; 128
    2580:	5f e3       	ldi	r21, 0x3F	; 63
    2582:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2584:	78 a1       	ldd	r23, Y+32	; 0x20
    2586:	89 a1       	ldd	r24, Y+33	; 0x21
    2588:	9a a1       	ldd	r25, Y+34	; 0x22
    258a:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    258e:	88 23       	and	r24, r24
    2590:	2c f4       	brge	.+10     	; 0x259c <StopSegments+0xcc>
		__ticks = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9c a3       	std	Y+36, r25	; 0x24
    2598:	8b a3       	std	Y+35, r24	; 0x23
    259a:	3f c0       	rjmp	.+126    	; 0x261a <StopSegments+0x14a>
	else if (__tmp > 65535)
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	3f ef       	ldi	r19, 0xFF	; 255
    25a0:	4f e7       	ldi	r20, 0x7F	; 127
    25a2:	57 e4       	ldi	r21, 0x47	; 71
    25a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    25a6:	78 a1       	ldd	r23, Y+32	; 0x20
    25a8:	89 a1       	ldd	r24, Y+33	; 0x21
    25aa:	9a a1       	ldd	r25, Y+34	; 0x22
    25ac:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	4c f5       	brge	.+82     	; 0x2606 <StopSegments+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e2       	ldi	r20, 0x20	; 32
    25ba:	51 e4       	ldi	r21, 0x41	; 65
    25bc:	69 85       	ldd	r22, Y+9	; 0x09
    25be:	7a 85       	ldd	r23, Y+10	; 0x0a
    25c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    25c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    25c4:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9c a3       	std	Y+36, r25	; 0x24
    25da:	8b a3       	std	Y+35, r24	; 0x23
    25dc:	0f c0       	rjmp	.+30     	; 0x25fc <StopSegments+0x12c>
    25de:	88 ec       	ldi	r24, 0xC8	; 200
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9e a3       	std	Y+38, r25	; 0x26
    25e4:	8d a3       	std	Y+37, r24	; 0x25
    25e6:	8d a1       	ldd	r24, Y+37	; 0x25
    25e8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <StopSegments+0x11a>
    25ee:	9e a3       	std	Y+38, r25	; 0x26
    25f0:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	8b a1       	ldd	r24, Y+35	; 0x23
    25f4:	9c a1       	ldd	r25, Y+36	; 0x24
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	9c a3       	std	Y+36, r25	; 0x24
    25fa:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	8b a1       	ldd	r24, Y+35	; 0x23
    25fe:	9c a1       	ldd	r25, Y+36	; 0x24
    2600:	89 2b       	or	r24, r25
    2602:	69 f7       	brne	.-38     	; 0x25de <StopSegments+0x10e>
    2604:	14 c0       	rjmp	.+40     	; 0x262e <StopSegments+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2608:	78 a1       	ldd	r23, Y+32	; 0x20
    260a:	89 a1       	ldd	r24, Y+33	; 0x21
    260c:	9a a1       	ldd	r25, Y+34	; 0x22
    260e:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9c a3       	std	Y+36, r25	; 0x24
    2618:	8b a3       	std	Y+35, r24	; 0x23
    261a:	8b a1       	ldd	r24, Y+35	; 0x23
    261c:	9c a1       	ldd	r25, Y+36	; 0x24
    261e:	98 a7       	std	Y+40, r25	; 0x28
    2620:	8f a3       	std	Y+39, r24	; 0x27
    2622:	8f a1       	ldd	r24, Y+39	; 0x27
    2624:	98 a5       	ldd	r25, Y+40	; 0x28
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <StopSegments+0x156>
    262a:	98 a7       	std	Y+40, r25	; 0x28
    262c:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(5);


		Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8ThirdDigit);
    262e:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <Global_u8ThirdDigit>
    2632:	68 2f       	mov	r22, r24
    2634:	88 e8       	ldi	r24, 0x88	; 136
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
		DisableSegment(Seven_SegmentCom4);
    263c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Seven_SegmentCom4>
    2640:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
		EnableSegment(Seven_SegmentCom3);
    2644:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Seven_SegmentCom3>
    2648:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 ea       	ldi	r26, 0xA0	; 160
    2652:	b0 e4       	ldi	r27, 0x40	; 64
    2654:	89 8b       	std	Y+17, r24	; 0x11
    2656:	9a 8b       	std	Y+18, r25	; 0x12
    2658:	ab 8b       	std	Y+19, r26	; 0x13
    265a:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a ef       	ldi	r20, 0xFA	; 250
    2662:	54 e4       	ldi	r21, 0x44	; 68
    2664:	69 89       	ldd	r22, Y+17	; 0x11
    2666:	7a 89       	ldd	r23, Y+18	; 0x12
    2668:	8b 89       	ldd	r24, Y+19	; 0x13
    266a:	9c 89       	ldd	r25, Y+20	; 0x14
    266c:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	8d 8b       	std	Y+21, r24	; 0x15
    2676:	9e 8b       	std	Y+22, r25	; 0x16
    2678:	af 8b       	std	Y+23, r26	; 0x17
    267a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	6d 89       	ldd	r22, Y+21	; 0x15
    2686:	7e 89       	ldd	r23, Y+22	; 0x16
    2688:	8f 89       	ldd	r24, Y+23	; 0x17
    268a:	98 8d       	ldd	r25, Y+24	; 0x18
    268c:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    2690:	88 23       	and	r24, r24
    2692:	2c f4       	brge	.+10     	; 0x269e <StopSegments+0x1ce>
		__ticks = 1;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9a 8f       	std	Y+26, r25	; 0x1a
    269a:	89 8f       	std	Y+25, r24	; 0x19
    269c:	3f c0       	rjmp	.+126    	; 0x271c <StopSegments+0x24c>
	else if (__tmp > 65535)
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	6d 89       	ldd	r22, Y+21	; 0x15
    26a8:	7e 89       	ldd	r23, Y+22	; 0x16
    26aa:	8f 89       	ldd	r24, Y+23	; 0x17
    26ac:	98 8d       	ldd	r25, Y+24	; 0x18
    26ae:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	4c f5       	brge	.+82     	; 0x2708 <StopSegments+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e2       	ldi	r20, 0x20	; 32
    26bc:	51 e4       	ldi	r21, 0x41	; 65
    26be:	69 89       	ldd	r22, Y+17	; 0x11
    26c0:	7a 89       	ldd	r23, Y+18	; 0x12
    26c2:	8b 89       	ldd	r24, Y+19	; 0x13
    26c4:	9c 89       	ldd	r25, Y+20	; 0x14
    26c6:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9a 8f       	std	Y+26, r25	; 0x1a
    26dc:	89 8f       	std	Y+25, r24	; 0x19
    26de:	0f c0       	rjmp	.+30     	; 0x26fe <StopSegments+0x22e>
    26e0:	88 ec       	ldi	r24, 0xC8	; 200
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	9c 8f       	std	Y+28, r25	; 0x1c
    26e6:	8b 8f       	std	Y+27, r24	; 0x1b
    26e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <StopSegments+0x21c>
    26f0:	9c 8f       	std	Y+28, r25	; 0x1c
    26f2:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f4:	89 8d       	ldd	r24, Y+25	; 0x19
    26f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	9a 8f       	std	Y+26, r25	; 0x1a
    26fc:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2700:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2702:	89 2b       	or	r24, r25
    2704:	69 f7       	brne	.-38     	; 0x26e0 <StopSegments+0x210>
    2706:	14 c0       	rjmp	.+40     	; 0x2730 <StopSegments+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2708:	6d 89       	ldd	r22, Y+21	; 0x15
    270a:	7e 89       	ldd	r23, Y+22	; 0x16
    270c:	8f 89       	ldd	r24, Y+23	; 0x17
    270e:	98 8d       	ldd	r25, Y+24	; 0x18
    2710:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9a 8f       	std	Y+26, r25	; 0x1a
    271a:	89 8f       	std	Y+25, r24	; 0x19
    271c:	89 8d       	ldd	r24, Y+25	; 0x19
    271e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2720:	9e 8f       	std	Y+30, r25	; 0x1e
    2722:	8d 8f       	std	Y+29, r24	; 0x1d
    2724:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2726:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <StopSegments+0x258>
    272c:	9e 8f       	std	Y+30, r25	; 0x1e
    272e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);

					Button_enuRead(&StartButton, &Start_ButtonState);
    2730:	6a ec       	ldi	r22, 0xCA	; 202
    2732:	70 e0       	ldi	r23, 0x00	; 0
    2734:	81 ea       	ldi	r24, 0xA1	; 161
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
					if(Start_ButtonState == BUTTON_PRESSED){
    273c:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Start_ButtonState>
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	19 f4       	brne	.+6      	; 0x274a <StopSegments+0x27a>
						Global_u8Flag = START_FLAG;
    2744:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Global_u8Flag>
						return ;
    2748:	3f c1       	rjmp	.+638    	; 0x29c8 <StopSegments+0x4f8>
					}
					Button_enuRead(&ResetButton, &Reset_ButtonState);
    274a:	6c ec       	ldi	r22, 0xCC	; 204
    274c:	70 e0       	ldi	r23, 0x00	; 0
    274e:	85 ea       	ldi	r24, 0xA5	; 165
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
					if(Reset_ButtonState == BUTTON_PRESSED){
    2756:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Reset_ButtonState>
    275a:	81 30       	cpi	r24, 0x01	; 1
    275c:	21 f4       	brne	.+8      	; 0x2766 <StopSegments+0x296>
						Global_u8Flag = RESET_FLAG;
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8Flag>
						return ;
    2764:	31 c1       	rjmp	.+610    	; 0x29c8 <StopSegments+0x4f8>
					}




		Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8SecondDigit);
    2766:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Global_u8SecondDigit>
    276a:	68 2f       	mov	r22, r24
    276c:	88 e8       	ldi	r24, 0x88	; 136
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
		DisableSegment(Seven_SegmentCom3);
    2774:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Seven_SegmentCom3>
    2778:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
		EnableSegment(Seven_SegmentCom2);
    277c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Seven_SegmentCom2>
    2780:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	a0 ea       	ldi	r26, 0xA0	; 160
    278a:	b0 e4       	ldi	r27, 0x40	; 64
    278c:	8d 83       	std	Y+5, r24	; 0x05
    278e:	9e 83       	std	Y+6, r25	; 0x06
    2790:	af 83       	std	Y+7, r26	; 0x07
    2792:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4a ef       	ldi	r20, 0xFA	; 250
    279a:	54 e4       	ldi	r21, 0x44	; 68
    279c:	6d 81       	ldd	r22, Y+5	; 0x05
    279e:	7e 81       	ldd	r23, Y+6	; 0x06
    27a0:	8f 81       	ldd	r24, Y+7	; 0x07
    27a2:	98 85       	ldd	r25, Y+8	; 0x08
    27a4:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	89 a7       	std	Y+41, r24	; 0x29
    27ae:	9a a7       	std	Y+42, r25	; 0x2a
    27b0:	ab a7       	std	Y+43, r26	; 0x2b
    27b2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	69 a5       	ldd	r22, Y+41	; 0x29
    27be:	7a a5       	ldd	r23, Y+42	; 0x2a
    27c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c4:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    27c8:	88 23       	and	r24, r24
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <StopSegments+0x306>
		__ticks = 1;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9e a7       	std	Y+46, r25	; 0x2e
    27d2:	8d a7       	std	Y+45, r24	; 0x2d
    27d4:	3f c0       	rjmp	.+126    	; 0x2854 <StopSegments+0x384>
	else if (__tmp > 65535)
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	69 a5       	ldd	r22, Y+41	; 0x29
    27e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    27e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27e6:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    27ea:	18 16       	cp	r1, r24
    27ec:	4c f5       	brge	.+82     	; 0x2840 <StopSegments+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	6d 81       	ldd	r22, Y+5	; 0x05
    27f8:	7e 81       	ldd	r23, Y+6	; 0x06
    27fa:	8f 81       	ldd	r24, Y+7	; 0x07
    27fc:	98 85       	ldd	r25, Y+8	; 0x08
    27fe:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9e a7       	std	Y+46, r25	; 0x2e
    2814:	8d a7       	std	Y+45, r24	; 0x2d
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <StopSegments+0x366>
    2818:	88 ec       	ldi	r24, 0xC8	; 200
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	98 ab       	std	Y+48, r25	; 0x30
    281e:	8f a7       	std	Y+47, r24	; 0x2f
    2820:	8f a5       	ldd	r24, Y+47	; 0x2f
    2822:	98 a9       	ldd	r25, Y+48	; 0x30
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <StopSegments+0x354>
    2828:	98 ab       	std	Y+48, r25	; 0x30
    282a:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	8d a5       	ldd	r24, Y+45	; 0x2d
    282e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	9e a7       	std	Y+46, r25	; 0x2e
    2834:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2836:	8d a5       	ldd	r24, Y+45	; 0x2d
    2838:	9e a5       	ldd	r25, Y+46	; 0x2e
    283a:	89 2b       	or	r24, r25
    283c:	69 f7       	brne	.-38     	; 0x2818 <StopSegments+0x348>
    283e:	14 c0       	rjmp	.+40     	; 0x2868 <StopSegments+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2840:	69 a5       	ldd	r22, Y+41	; 0x29
    2842:	7a a5       	ldd	r23, Y+42	; 0x2a
    2844:	8b a5       	ldd	r24, Y+43	; 0x2b
    2846:	9c a5       	ldd	r25, Y+44	; 0x2c
    2848:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	9e a7       	std	Y+46, r25	; 0x2e
    2852:	8d a7       	std	Y+45, r24	; 0x2d
    2854:	8d a5       	ldd	r24, Y+45	; 0x2d
    2856:	9e a5       	ldd	r25, Y+46	; 0x2e
    2858:	9a ab       	std	Y+50, r25	; 0x32
    285a:	89 ab       	std	Y+49, r24	; 0x31
    285c:	89 a9       	ldd	r24, Y+49	; 0x31
    285e:	9a a9       	ldd	r25, Y+50	; 0x32
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <StopSegments+0x390>
    2864:	9a ab       	std	Y+50, r25	; 0x32
    2866:	89 ab       	std	Y+49, r24	; 0x31
		_delay_ms(5);

					Button_enuRead(&StartButton, &Start_ButtonState);
    2868:	6a ec       	ldi	r22, 0xCA	; 202
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	81 ea       	ldi	r24, 0xA1	; 161
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
					if(Start_ButtonState == BUTTON_PRESSED){
    2874:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Start_ButtonState>
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	19 f4       	brne	.+6      	; 0x2882 <StopSegments+0x3b2>
						Global_u8Flag = START_FLAG;
    287c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Global_u8Flag>
						return ;
    2880:	a3 c0       	rjmp	.+326    	; 0x29c8 <StopSegments+0x4f8>
					}
					Button_enuRead(&ResetButton, &Reset_ButtonState);
    2882:	6c ec       	ldi	r22, 0xCC	; 204
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	85 ea       	ldi	r24, 0xA5	; 165
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
					if(Reset_ButtonState == BUTTON_PRESSED){
    288e:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Reset_ButtonState>
    2892:	81 30       	cpi	r24, 0x01	; 1
    2894:	21 f4       	brne	.+8      	; 0x289e <StopSegments+0x3ce>
						Global_u8Flag = RESET_FLAG;
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8Flag>
						return ;
    289c:	95 c0       	rjmp	.+298    	; 0x29c8 <StopSegments+0x4f8>
					}

		Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8FirstDigit);
    289e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Global_u8FirstDigit>
    28a2:	68 2f       	mov	r22, r24
    28a4:	88 e8       	ldi	r24, 0x88	; 136
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
		DisableSegment(Seven_SegmentCom2);
    28ac:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Seven_SegmentCom2>
    28b0:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
		EnableSegment(Seven_SegmentCom1);
    28b4:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <Seven_SegmentCom1>
    28b8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e7       	ldi	r26, 0x70	; 112
    28c2:	b1 e4       	ldi	r27, 0x41	; 65
    28c4:	8d 87       	std	Y+13, r24	; 0x0d
    28c6:	9e 87       	std	Y+14, r25	; 0x0e
    28c8:	af 87       	std	Y+15, r26	; 0x0f
    28ca:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	4a ef       	ldi	r20, 0xFA	; 250
    28d2:	54 e4       	ldi	r21, 0x44	; 68
    28d4:	6d 85       	ldd	r22, Y+13	; 0x0d
    28d6:	7e 85       	ldd	r23, Y+14	; 0x0e
    28d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28da:	98 89       	ldd	r25, Y+16	; 0x10
    28dc:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8b ab       	std	Y+51, r24	; 0x33
    28e6:	9c ab       	std	Y+52, r25	; 0x34
    28e8:	ad ab       	std	Y+53, r26	; 0x35
    28ea:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5f e3       	ldi	r21, 0x3F	; 63
    28f4:	6b a9       	ldd	r22, Y+51	; 0x33
    28f6:	7c a9       	ldd	r23, Y+52	; 0x34
    28f8:	8d a9       	ldd	r24, Y+53	; 0x35
    28fa:	9e a9       	ldd	r25, Y+54	; 0x36
    28fc:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <StopSegments+0x43e>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	98 af       	std	Y+56, r25	; 0x38
    290a:	8f ab       	std	Y+55, r24	; 0x37
    290c:	3f c0       	rjmp	.+126    	; 0x298c <StopSegments+0x4bc>
	else if (__tmp > 65535)
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	3f ef       	ldi	r19, 0xFF	; 255
    2912:	4f e7       	ldi	r20, 0x7F	; 127
    2914:	57 e4       	ldi	r21, 0x47	; 71
    2916:	6b a9       	ldd	r22, Y+51	; 0x33
    2918:	7c a9       	ldd	r23, Y+52	; 0x34
    291a:	8d a9       	ldd	r24, Y+53	; 0x35
    291c:	9e a9       	ldd	r25, Y+54	; 0x36
    291e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <StopSegments+0x4a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e2       	ldi	r20, 0x20	; 32
    292c:	51 e4       	ldi	r21, 0x41	; 65
    292e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2930:	7e 85       	ldd	r23, Y+14	; 0x0e
    2932:	8f 85       	ldd	r24, Y+15	; 0x0f
    2934:	98 89       	ldd	r25, Y+16	; 0x10
    2936:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	98 af       	std	Y+56, r25	; 0x38
    294c:	8f ab       	std	Y+55, r24	; 0x37
    294e:	0f c0       	rjmp	.+30     	; 0x296e <StopSegments+0x49e>
    2950:	88 ec       	ldi	r24, 0xC8	; 200
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	9a af       	std	Y+58, r25	; 0x3a
    2956:	89 af       	std	Y+57, r24	; 0x39
    2958:	89 ad       	ldd	r24, Y+57	; 0x39
    295a:	9a ad       	ldd	r25, Y+58	; 0x3a
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <StopSegments+0x48c>
    2960:	9a af       	std	Y+58, r25	; 0x3a
    2962:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8f a9       	ldd	r24, Y+55	; 0x37
    2966:	98 ad       	ldd	r25, Y+56	; 0x38
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	98 af       	std	Y+56, r25	; 0x38
    296c:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8f a9       	ldd	r24, Y+55	; 0x37
    2970:	98 ad       	ldd	r25, Y+56	; 0x38
    2972:	89 2b       	or	r24, r25
    2974:	69 f7       	brne	.-38     	; 0x2950 <StopSegments+0x480>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <StopSegments+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	6b a9       	ldd	r22, Y+51	; 0x33
    297a:	7c a9       	ldd	r23, Y+52	; 0x34
    297c:	8d a9       	ldd	r24, Y+53	; 0x35
    297e:	9e a9       	ldd	r25, Y+54	; 0x36
    2980:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	98 af       	std	Y+56, r25	; 0x38
    298a:	8f ab       	std	Y+55, r24	; 0x37
    298c:	8f a9       	ldd	r24, Y+55	; 0x37
    298e:	98 ad       	ldd	r25, Y+56	; 0x38
    2990:	9c af       	std	Y+60, r25	; 0x3c
    2992:	8b af       	std	Y+59, r24	; 0x3b
    2994:	8b ad       	ldd	r24, Y+59	; 0x3b
    2996:	9c ad       	ldd	r25, Y+60	; 0x3c
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <StopSegments+0x4c8>
    299c:	9c af       	std	Y+60, r25	; 0x3c
    299e:	8b af       	std	Y+59, r24	; 0x3b
}

void StopSegments(void){

	u32 Loc_u32Ticks = ZERO_VALUE;
	for( Loc_u32Ticks = 0;Loc_u32Ticks<40;++Loc_u32Ticks){
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	ab 81       	ldd	r26, Y+3	; 0x03
    29a6:	bc 81       	ldd	r27, Y+4	; 0x04
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	a1 1d       	adc	r26, r1
    29ac:	b1 1d       	adc	r27, r1
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	9a 83       	std	Y+2, r25	; 0x02
    29b2:	ab 83       	std	Y+3, r26	; 0x03
    29b4:	bc 83       	std	Y+4, r27	; 0x04
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ba:	ab 81       	ldd	r26, Y+3	; 0x03
    29bc:	bc 81       	ldd	r27, Y+4	; 0x04
    29be:	88 97       	sbiw	r24, 0x28	; 40
    29c0:	a1 05       	cpc	r26, r1
    29c2:	b1 05       	cpc	r27, r1
    29c4:	08 f4       	brcc	.+2      	; 0x29c8 <StopSegments+0x4f8>
    29c6:	97 cd       	rjmp	.-1234   	; 0x24f6 <StopSegments+0x26>
		EnableSegment(Seven_SegmentCom1);
		_delay_ms(15);
	}// for


}
    29c8:	ec 96       	adiw	r28, 0x3c	; 60
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	08 95       	ret

000029da <ResetSegments>:


void ResetSegments(void){
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	ec 97       	sbiw	r28, 0x3c	; 60
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61

	u32 Loc_u32Ticks = ZERO_VALUE;
    29ee:	19 82       	std	Y+1, r1	; 0x01
    29f0:	1a 82       	std	Y+2, r1	; 0x02
    29f2:	1b 82       	std	Y+3, r1	; 0x03
    29f4:	1c 82       	std	Y+4, r1	; 0x04

	Global_u8FirstDigit = 0;
    29f6:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <Global_u8FirstDigit>
	Global_u8SecondDigit = 0;
    29fa:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <Global_u8SecondDigit>
	Global_u8ThirdDigit = 0;
    29fe:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <Global_u8ThirdDigit>
	Global_u8ForthDigit = 0;
    2a02:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <Global_u8ForthDigit>

						for( Loc_u32Ticks = 0;Loc_u32Ticks<40;++Loc_u32Ticks){
    2a06:	19 82       	std	Y+1, r1	; 0x01
    2a08:	1a 82       	std	Y+2, r1	; 0x02
    2a0a:	1b 82       	std	Y+3, r1	; 0x03
    2a0c:	1c 82       	std	Y+4, r1	; 0x04
    2a0e:	36 c2       	rjmp	.+1132   	; 0x2e7c <ResetSegments+0x4a2>

								Button_enuRead(&StartButton, &Start_ButtonState);
    2a10:	6a ec       	ldi	r22, 0xCA	; 202
    2a12:	70 e0       	ldi	r23, 0x00	; 0
    2a14:	81 ea       	ldi	r24, 0xA1	; 161
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
								if(Start_ButtonState == BUTTON_PRESSED){
    2a1c:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Start_ButtonState>
    2a20:	81 30       	cpi	r24, 0x01	; 1
    2a22:	19 f4       	brne	.+6      	; 0x2a2a <ResetSegments+0x50>
									Global_u8Flag = START_FLAG;
    2a24:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Global_u8Flag>
									return ;
    2a28:	32 c2       	rjmp	.+1124   	; 0x2e8e <ResetSegments+0x4b4>
								}

							Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8ForthDigit);
    2a2a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <Global_u8ForthDigit>
    2a2e:	68 2f       	mov	r22, r24
    2a30:	88 e8       	ldi	r24, 0x88	; 136
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
							DisableSegment(Seven_SegmentCom1);
    2a38:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <Seven_SegmentCom1>
    2a3c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
							EnableSegment(Seven_SegmentCom4);
    2a40:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Seven_SegmentCom4>
    2a44:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a0 ea       	ldi	r26, 0xA0	; 160
    2a4e:	b0 e4       	ldi	r27, 0x40	; 64
    2a50:	89 87       	std	Y+9, r24	; 0x09
    2a52:	9a 87       	std	Y+10, r25	; 0x0a
    2a54:	ab 87       	std	Y+11, r26	; 0x0b
    2a56:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4a ef       	ldi	r20, 0xFA	; 250
    2a5e:	54 e4       	ldi	r21, 0x44	; 68
    2a60:	69 85       	ldd	r22, Y+9	; 0x09
    2a62:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a64:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a66:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a68:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	8f 8f       	std	Y+31, r24	; 0x1f
    2a72:	98 a3       	std	Y+32, r25	; 0x20
    2a74:	a9 a3       	std	Y+33, r26	; 0x21
    2a76:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e8       	ldi	r20, 0x80	; 128
    2a7e:	5f e3       	ldi	r21, 0x3F	; 63
    2a80:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a82:	78 a1       	ldd	r23, Y+32	; 0x20
    2a84:	89 a1       	ldd	r24, Y+33	; 0x21
    2a86:	9a a1       	ldd	r25, Y+34	; 0x22
    2a88:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    2a8c:	88 23       	and	r24, r24
    2a8e:	2c f4       	brge	.+10     	; 0x2a9a <ResetSegments+0xc0>
		__ticks = 1;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9c a3       	std	Y+36, r25	; 0x24
    2a96:	8b a3       	std	Y+35, r24	; 0x23
    2a98:	3f c0       	rjmp	.+126    	; 0x2b18 <ResetSegments+0x13e>
	else if (__tmp > 65535)
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	3f ef       	ldi	r19, 0xFF	; 255
    2a9e:	4f e7       	ldi	r20, 0x7F	; 127
    2aa0:	57 e4       	ldi	r21, 0x47	; 71
    2aa2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2aa4:	78 a1       	ldd	r23, Y+32	; 0x20
    2aa6:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aaa:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    2aae:	18 16       	cp	r1, r24
    2ab0:	4c f5       	brge	.+82     	; 0x2b04 <ResetSegments+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e2       	ldi	r20, 0x20	; 32
    2ab8:	51 e4       	ldi	r21, 0x41	; 65
    2aba:	69 85       	ldd	r22, Y+9	; 0x09
    2abc:	7a 85       	ldd	r23, Y+10	; 0x0a
    2abe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ac0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ac2:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9c a3       	std	Y+36, r25	; 0x24
    2ad8:	8b a3       	std	Y+35, r24	; 0x23
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <ResetSegments+0x120>
    2adc:	88 ec       	ldi	r24, 0xC8	; 200
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9e a3       	std	Y+38, r25	; 0x26
    2ae2:	8d a3       	std	Y+37, r24	; 0x25
    2ae4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <ResetSegments+0x10e>
    2aec:	9e a3       	std	Y+38, r25	; 0x26
    2aee:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af0:	8b a1       	ldd	r24, Y+35	; 0x23
    2af2:	9c a1       	ldd	r25, Y+36	; 0x24
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9c a3       	std	Y+36, r25	; 0x24
    2af8:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	8b a1       	ldd	r24, Y+35	; 0x23
    2afc:	9c a1       	ldd	r25, Y+36	; 0x24
    2afe:	89 2b       	or	r24, r25
    2b00:	69 f7       	brne	.-38     	; 0x2adc <ResetSegments+0x102>
    2b02:	14 c0       	rjmp	.+40     	; 0x2b2c <ResetSegments+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b04:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b06:	78 a1       	ldd	r23, Y+32	; 0x20
    2b08:	89 a1       	ldd	r24, Y+33	; 0x21
    2b0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b0c:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9c a3       	std	Y+36, r25	; 0x24
    2b16:	8b a3       	std	Y+35, r24	; 0x23
    2b18:	8b a1       	ldd	r24, Y+35	; 0x23
    2b1a:	9c a1       	ldd	r25, Y+36	; 0x24
    2b1c:	98 a7       	std	Y+40, r25	; 0x28
    2b1e:	8f a3       	std	Y+39, r24	; 0x27
    2b20:	8f a1       	ldd	r24, Y+39	; 0x27
    2b22:	98 a5       	ldd	r25, Y+40	; 0x28
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <ResetSegments+0x14a>
    2b28:	98 a7       	std	Y+40, r25	; 0x28
    2b2a:	8f a3       	std	Y+39, r24	; 0x27
							_delay_ms(5);


							Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8ThirdDigit);
    2b2c:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <Global_u8ThirdDigit>
    2b30:	68 2f       	mov	r22, r24
    2b32:	88 e8       	ldi	r24, 0x88	; 136
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
							DisableSegment(Seven_SegmentCom4);
    2b3a:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Seven_SegmentCom4>
    2b3e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
							EnableSegment(Seven_SegmentCom3);
    2b42:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Seven_SegmentCom3>
    2b46:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a0 ea       	ldi	r26, 0xA0	; 160
    2b50:	b0 e4       	ldi	r27, 0x40	; 64
    2b52:	89 8b       	std	Y+17, r24	; 0x11
    2b54:	9a 8b       	std	Y+18, r25	; 0x12
    2b56:	ab 8b       	std	Y+19, r26	; 0x13
    2b58:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	4a ef       	ldi	r20, 0xFA	; 250
    2b60:	54 e4       	ldi	r21, 0x44	; 68
    2b62:	69 89       	ldd	r22, Y+17	; 0x11
    2b64:	7a 89       	ldd	r23, Y+18	; 0x12
    2b66:	8b 89       	ldd	r24, Y+19	; 0x13
    2b68:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6a:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	8d 8b       	std	Y+21, r24	; 0x15
    2b74:	9e 8b       	std	Y+22, r25	; 0x16
    2b76:	af 8b       	std	Y+23, r26	; 0x17
    2b78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e8       	ldi	r20, 0x80	; 128
    2b80:	5f e3       	ldi	r21, 0x3F	; 63
    2b82:	6d 89       	ldd	r22, Y+21	; 0x15
    2b84:	7e 89       	ldd	r23, Y+22	; 0x16
    2b86:	8f 89       	ldd	r24, Y+23	; 0x17
    2b88:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8a:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	2c f4       	brge	.+10     	; 0x2b9c <ResetSegments+0x1c2>
		__ticks = 1;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	9a 8f       	std	Y+26, r25	; 0x1a
    2b98:	89 8f       	std	Y+25, r24	; 0x19
    2b9a:	3f c0       	rjmp	.+126    	; 0x2c1a <ResetSegments+0x240>
	else if (__tmp > 65535)
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ba0:	4f e7       	ldi	r20, 0x7F	; 127
    2ba2:	57 e4       	ldi	r21, 0x47	; 71
    2ba4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    2baa:	98 8d       	ldd	r25, Y+24	; 0x18
    2bac:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    2bb0:	18 16       	cp	r1, r24
    2bb2:	4c f5       	brge	.+82     	; 0x2c06 <ResetSegments+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e2       	ldi	r20, 0x20	; 32
    2bba:	51 e4       	ldi	r21, 0x41	; 65
    2bbc:	69 89       	ldd	r22, Y+17	; 0x11
    2bbe:	7a 89       	ldd	r23, Y+18	; 0x12
    2bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc4:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	bc 01       	movw	r22, r24
    2bce:	cd 01       	movw	r24, r26
    2bd0:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2bda:	89 8f       	std	Y+25, r24	; 0x19
    2bdc:	0f c0       	rjmp	.+30     	; 0x2bfc <ResetSegments+0x222>
    2bde:	88 ec       	ldi	r24, 0xC8	; 200
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	9c 8f       	std	Y+28, r25	; 0x1c
    2be4:	8b 8f       	std	Y+27, r24	; 0x1b
    2be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <ResetSegments+0x210>
    2bee:	9c 8f       	std	Y+28, r25	; 0x1c
    2bf0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf2:	89 8d       	ldd	r24, Y+25	; 0x19
    2bf4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	9a 8f       	std	Y+26, r25	; 0x1a
    2bfa:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	89 8d       	ldd	r24, Y+25	; 0x19
    2bfe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c00:	89 2b       	or	r24, r25
    2c02:	69 f7       	brne	.-38     	; 0x2bde <ResetSegments+0x204>
    2c04:	14 c0       	rjmp	.+40     	; 0x2c2e <ResetSegments+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c06:	6d 89       	ldd	r22, Y+21	; 0x15
    2c08:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0e:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	9a 8f       	std	Y+26, r25	; 0x1a
    2c18:	89 8f       	std	Y+25, r24	; 0x19
    2c1a:	89 8d       	ldd	r24, Y+25	; 0x19
    2c1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c20:	8d 8f       	std	Y+29, r24	; 0x1d
    2c22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <ResetSegments+0x24c>
    2c2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2c:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(5);

									Button_enuRead(&StartButton, &Start_ButtonState);
    2c2e:	6a ec       	ldi	r22, 0xCA	; 202
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	81 ea       	ldi	r24, 0xA1	; 161
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
									if(Start_ButtonState == BUTTON_PRESSED){
    2c3a:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Start_ButtonState>
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	19 f4       	brne	.+6      	; 0x2c48 <ResetSegments+0x26e>
										Global_u8Flag = START_FLAG;
    2c42:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Global_u8Flag>
										return ;
    2c46:	23 c1       	rjmp	.+582    	; 0x2e8e <ResetSegments+0x4b4>
									}




							Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8SecondDigit);
    2c48:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Global_u8SecondDigit>
    2c4c:	68 2f       	mov	r22, r24
    2c4e:	88 e8       	ldi	r24, 0x88	; 136
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
							DisableSegment(Seven_SegmentCom3);
    2c56:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Seven_SegmentCom3>
    2c5a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
							EnableSegment(Seven_SegmentCom2);
    2c5e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Seven_SegmentCom2>
    2c62:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 ea       	ldi	r26, 0xA0	; 160
    2c6c:	b0 e4       	ldi	r27, 0x40	; 64
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	9e 83       	std	Y+6, r25	; 0x06
    2c72:	af 83       	std	Y+7, r26	; 0x07
    2c74:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	4a ef       	ldi	r20, 0xFA	; 250
    2c7c:	54 e4       	ldi	r21, 0x44	; 68
    2c7e:	6d 81       	ldd	r22, Y+5	; 0x05
    2c80:	7e 81       	ldd	r23, Y+6	; 0x06
    2c82:	8f 81       	ldd	r24, Y+7	; 0x07
    2c84:	98 85       	ldd	r25, Y+8	; 0x08
    2c86:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	89 a7       	std	Y+41, r24	; 0x29
    2c90:	9a a7       	std	Y+42, r25	; 0x2a
    2c92:	ab a7       	std	Y+43, r26	; 0x2b
    2c94:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e8       	ldi	r20, 0x80	; 128
    2c9c:	5f e3       	ldi	r21, 0x3F	; 63
    2c9e:	69 a5       	ldd	r22, Y+41	; 0x29
    2ca0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ca2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ca4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ca6:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    2caa:	88 23       	and	r24, r24
    2cac:	2c f4       	brge	.+10     	; 0x2cb8 <ResetSegments+0x2de>
		__ticks = 1;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	9e a7       	std	Y+46, r25	; 0x2e
    2cb4:	8d a7       	std	Y+45, r24	; 0x2d
    2cb6:	3f c0       	rjmp	.+126    	; 0x2d36 <ResetSegments+0x35c>
	else if (__tmp > 65535)
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	3f ef       	ldi	r19, 0xFF	; 255
    2cbc:	4f e7       	ldi	r20, 0x7F	; 127
    2cbe:	57 e4       	ldi	r21, 0x47	; 71
    2cc0:	69 a5       	ldd	r22, Y+41	; 0x29
    2cc2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cc8:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    2ccc:	18 16       	cp	r1, r24
    2cce:	4c f5       	brge	.+82     	; 0x2d22 <ResetSegments+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e2       	ldi	r20, 0x20	; 32
    2cd6:	51 e4       	ldi	r21, 0x41	; 65
    2cd8:	6d 81       	ldd	r22, Y+5	; 0x05
    2cda:	7e 81       	ldd	r23, Y+6	; 0x06
    2cdc:	8f 81       	ldd	r24, Y+7	; 0x07
    2cde:	98 85       	ldd	r25, Y+8	; 0x08
    2ce0:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9e a7       	std	Y+46, r25	; 0x2e
    2cf6:	8d a7       	std	Y+45, r24	; 0x2d
    2cf8:	0f c0       	rjmp	.+30     	; 0x2d18 <ResetSegments+0x33e>
    2cfa:	88 ec       	ldi	r24, 0xC8	; 200
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	98 ab       	std	Y+48, r25	; 0x30
    2d00:	8f a7       	std	Y+47, r24	; 0x2f
    2d02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d04:	98 a9       	ldd	r25, Y+48	; 0x30
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <ResetSegments+0x32c>
    2d0a:	98 ab       	std	Y+48, r25	; 0x30
    2d0c:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d10:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	9e a7       	std	Y+46, r25	; 0x2e
    2d16:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d18:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d1c:	89 2b       	or	r24, r25
    2d1e:	69 f7       	brne	.-38     	; 0x2cfa <ResetSegments+0x320>
    2d20:	14 c0       	rjmp	.+40     	; 0x2d4a <ResetSegments+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d22:	69 a5       	ldd	r22, Y+41	; 0x29
    2d24:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d26:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d28:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d2a:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	9e a7       	std	Y+46, r25	; 0x2e
    2d34:	8d a7       	std	Y+45, r24	; 0x2d
    2d36:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d38:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d3a:	9a ab       	std	Y+50, r25	; 0x32
    2d3c:	89 ab       	std	Y+49, r24	; 0x31
    2d3e:	89 a9       	ldd	r24, Y+49	; 0x31
    2d40:	9a a9       	ldd	r25, Y+50	; 0x32
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <ResetSegments+0x368>
    2d46:	9a ab       	std	Y+50, r25	; 0x32
    2d48:	89 ab       	std	Y+49, r24	; 0x31
							_delay_ms(5);


									Button_enuRead(&StartButton, &Start_ButtonState);
    2d4a:	6a ec       	ldi	r22, 0xCA	; 202
    2d4c:	70 e0       	ldi	r23, 0x00	; 0
    2d4e:	81 ea       	ldi	r24, 0xA1	; 161
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <Button_enuRead>
									if(Start_ButtonState == BUTTON_PRESSED){
    2d56:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <Start_ButtonState>
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	19 f4       	brne	.+6      	; 0x2d64 <ResetSegments+0x38a>
										Global_u8Flag = START_FLAG;
    2d5e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <Global_u8Flag>
										return ;
    2d62:	95 c0       	rjmp	.+298    	; 0x2e8e <ResetSegments+0x4b4>
									}

							Seven_Segment_WriteBCDConnection(&Seven_Segment, Global_u8FirstDigit);
    2d64:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Global_u8FirstDigit>
    2d68:	68 2f       	mov	r22, r24
    2d6a:	88 e8       	ldi	r24, 0x88	; 136
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <Seven_Segment_WriteBCDConnection>
							DisableSegment(Seven_SegmentCom2);
    2d72:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Seven_SegmentCom2>
    2d76:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <DisableSegment>
							EnableSegment(Seven_SegmentCom1);
    2d7a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <Seven_SegmentCom1>
    2d7e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <EnableSegment>
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	a0 e7       	ldi	r26, 0x70	; 112
    2d88:	b1 e4       	ldi	r27, 0x41	; 65
    2d8a:	8d 87       	std	Y+13, r24	; 0x0d
    2d8c:	9e 87       	std	Y+14, r25	; 0x0e
    2d8e:	af 87       	std	Y+15, r26	; 0x0f
    2d90:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	4a ef       	ldi	r20, 0xFA	; 250
    2d98:	54 e4       	ldi	r21, 0x44	; 68
    2d9a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2d9c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da0:	98 89       	ldd	r25, Y+16	; 0x10
    2da2:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	8b ab       	std	Y+51, r24	; 0x33
    2dac:	9c ab       	std	Y+52, r25	; 0x34
    2dae:	ad ab       	std	Y+53, r26	; 0x35
    2db0:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	6b a9       	ldd	r22, Y+51	; 0x33
    2dbc:	7c a9       	ldd	r23, Y+52	; 0x34
    2dbe:	8d a9       	ldd	r24, Y+53	; 0x35
    2dc0:	9e a9       	ldd	r25, Y+54	; 0x36
    2dc2:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <__cmpsf2>
    2dc6:	88 23       	and	r24, r24
    2dc8:	2c f4       	brge	.+10     	; 0x2dd4 <ResetSegments+0x3fa>
		__ticks = 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	98 af       	std	Y+56, r25	; 0x38
    2dd0:	8f ab       	std	Y+55, r24	; 0x37
    2dd2:	3f c0       	rjmp	.+126    	; 0x2e52 <ResetSegments+0x478>
	else if (__tmp > 65535)
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	3f ef       	ldi	r19, 0xFF	; 255
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	57 e4       	ldi	r21, 0x47	; 71
    2ddc:	6b a9       	ldd	r22, Y+51	; 0x33
    2dde:	7c a9       	ldd	r23, Y+52	; 0x34
    2de0:	8d a9       	ldd	r24, Y+53	; 0x35
    2de2:	9e a9       	ldd	r25, Y+54	; 0x36
    2de4:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__gesf2>
    2de8:	18 16       	cp	r1, r24
    2dea:	4c f5       	brge	.+82     	; 0x2e3e <ResetSegments+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e2       	ldi	r20, 0x20	; 32
    2df2:	51 e4       	ldi	r21, 0x41	; 65
    2df4:	6d 85       	ldd	r22, Y+13	; 0x0d
    2df6:	7e 85       	ldd	r23, Y+14	; 0x0e
    2df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfa:	98 89       	ldd	r25, Y+16	; 0x10
    2dfc:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	98 af       	std	Y+56, r25	; 0x38
    2e12:	8f ab       	std	Y+55, r24	; 0x37
    2e14:	0f c0       	rjmp	.+30     	; 0x2e34 <ResetSegments+0x45a>
    2e16:	88 ec       	ldi	r24, 0xC8	; 200
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9a af       	std	Y+58, r25	; 0x3a
    2e1c:	89 af       	std	Y+57, r24	; 0x39
    2e1e:	89 ad       	ldd	r24, Y+57	; 0x39
    2e20:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <ResetSegments+0x448>
    2e26:	9a af       	std	Y+58, r25	; 0x3a
    2e28:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e2c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	98 af       	std	Y+56, r25	; 0x38
    2e32:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e34:	8f a9       	ldd	r24, Y+55	; 0x37
    2e36:	98 ad       	ldd	r25, Y+56	; 0x38
    2e38:	89 2b       	or	r24, r25
    2e3a:	69 f7       	brne	.-38     	; 0x2e16 <ResetSegments+0x43c>
    2e3c:	14 c0       	rjmp	.+40     	; 0x2e66 <ResetSegments+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3e:	6b a9       	ldd	r22, Y+51	; 0x33
    2e40:	7c a9       	ldd	r23, Y+52	; 0x34
    2e42:	8d a9       	ldd	r24, Y+53	; 0x35
    2e44:	9e a9       	ldd	r25, Y+54	; 0x36
    2e46:	0e 94 56 18 	call	0x30ac	; 0x30ac <__fixunssfsi>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	98 af       	std	Y+56, r25	; 0x38
    2e50:	8f ab       	std	Y+55, r24	; 0x37
    2e52:	8f a9       	ldd	r24, Y+55	; 0x37
    2e54:	98 ad       	ldd	r25, Y+56	; 0x38
    2e56:	9c af       	std	Y+60, r25	; 0x3c
    2e58:	8b af       	std	Y+59, r24	; 0x3b
    2e5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e5c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <ResetSegments+0x484>
    2e62:	9c af       	std	Y+60, r25	; 0x3c
    2e64:	8b af       	std	Y+59, r24	; 0x3b
	Global_u8FirstDigit = 0;
	Global_u8SecondDigit = 0;
	Global_u8ThirdDigit = 0;
	Global_u8ForthDigit = 0;

						for( Loc_u32Ticks = 0;Loc_u32Ticks<40;++Loc_u32Ticks){
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6a:	ab 81       	ldd	r26, Y+3	; 0x03
    2e6c:	bc 81       	ldd	r27, Y+4	; 0x04
    2e6e:	01 96       	adiw	r24, 0x01	; 1
    2e70:	a1 1d       	adc	r26, r1
    2e72:	b1 1d       	adc	r27, r1
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	ab 83       	std	Y+3, r26	; 0x03
    2e7a:	bc 83       	std	Y+4, r27	; 0x04
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e80:	ab 81       	ldd	r26, Y+3	; 0x03
    2e82:	bc 81       	ldd	r27, Y+4	; 0x04
    2e84:	88 97       	sbiw	r24, 0x28	; 40
    2e86:	a1 05       	cpc	r26, r1
    2e88:	b1 05       	cpc	r27, r1
    2e8a:	08 f4       	brcc	.+2      	; 0x2e8e <ResetSegments+0x4b4>
    2e8c:	c1 cd       	rjmp	.-1150   	; 0x2a10 <ResetSegments+0x36>
						}// for




}
    2e8e:	ec 96       	adiw	r28, 0x3c	; 60
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	08 95       	ret

00002ea0 <__ashldi3>:
    2ea0:	0f 93       	push	r16
    2ea2:	08 30       	cpi	r16, 0x08	; 8
    2ea4:	90 f0       	brcs	.+36     	; 0x2eca <__ashldi3+0x2a>
    2ea6:	98 2f       	mov	r25, r24
    2ea8:	87 2f       	mov	r24, r23
    2eaa:	76 2f       	mov	r23, r22
    2eac:	65 2f       	mov	r22, r21
    2eae:	54 2f       	mov	r21, r20
    2eb0:	43 2f       	mov	r20, r19
    2eb2:	32 2f       	mov	r19, r18
    2eb4:	22 27       	eor	r18, r18
    2eb6:	08 50       	subi	r16, 0x08	; 8
    2eb8:	f4 cf       	rjmp	.-24     	; 0x2ea2 <__ashldi3+0x2>
    2eba:	22 0f       	add	r18, r18
    2ebc:	33 1f       	adc	r19, r19
    2ebe:	44 1f       	adc	r20, r20
    2ec0:	55 1f       	adc	r21, r21
    2ec2:	66 1f       	adc	r22, r22
    2ec4:	77 1f       	adc	r23, r23
    2ec6:	88 1f       	adc	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	0a 95       	dec	r16
    2ecc:	b2 f7       	brpl	.-20     	; 0x2eba <__ashldi3+0x1a>
    2ece:	0f 91       	pop	r16
    2ed0:	08 95       	ret

00002ed2 <__adddi3>:
    2ed2:	2a 0d       	add	r18, r10
    2ed4:	3b 1d       	adc	r19, r11
    2ed6:	4c 1d       	adc	r20, r12
    2ed8:	5d 1d       	adc	r21, r13
    2eda:	6e 1d       	adc	r22, r14
    2edc:	7f 1d       	adc	r23, r15
    2ede:	80 1f       	adc	r24, r16
    2ee0:	91 1f       	adc	r25, r17
    2ee2:	08 95       	ret

00002ee4 <__subsf3>:
    2ee4:	50 58       	subi	r21, 0x80	; 128

00002ee6 <__addsf3>:
    2ee6:	bb 27       	eor	r27, r27
    2ee8:	aa 27       	eor	r26, r26
    2eea:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__addsf3x>
    2eee:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__fp_round>
    2ef2:	0e 94 b2 18 	call	0x3164	; 0x3164 <__fp_pscA>
    2ef6:	38 f0       	brcs	.+14     	; 0x2f06 <__addsf3+0x20>
    2ef8:	0e 94 b9 18 	call	0x3172	; 0x3172 <__fp_pscB>
    2efc:	20 f0       	brcs	.+8      	; 0x2f06 <__addsf3+0x20>
    2efe:	39 f4       	brne	.+14     	; 0x2f0e <__addsf3+0x28>
    2f00:	9f 3f       	cpi	r25, 0xFF	; 255
    2f02:	19 f4       	brne	.+6      	; 0x2f0a <__addsf3+0x24>
    2f04:	26 f4       	brtc	.+8      	; 0x2f0e <__addsf3+0x28>
    2f06:	0c 94 af 18 	jmp	0x315e	; 0x315e <__fp_nan>
    2f0a:	0e f4       	brtc	.+2      	; 0x2f0e <__addsf3+0x28>
    2f0c:	e0 95       	com	r30
    2f0e:	e7 fb       	bst	r30, 7
    2f10:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__fp_inf>

00002f14 <__addsf3x>:
    2f14:	e9 2f       	mov	r30, r25
    2f16:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__fp_split3>
    2f1a:	58 f3       	brcs	.-42     	; 0x2ef2 <__addsf3+0xc>
    2f1c:	ba 17       	cp	r27, r26
    2f1e:	62 07       	cpc	r22, r18
    2f20:	73 07       	cpc	r23, r19
    2f22:	84 07       	cpc	r24, r20
    2f24:	95 07       	cpc	r25, r21
    2f26:	20 f0       	brcs	.+8      	; 0x2f30 <__addsf3x+0x1c>
    2f28:	79 f4       	brne	.+30     	; 0x2f48 <__addsf3x+0x34>
    2f2a:	a6 f5       	brtc	.+104    	; 0x2f94 <__addsf3x+0x80>
    2f2c:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__fp_zero>
    2f30:	0e f4       	brtc	.+2      	; 0x2f34 <__addsf3x+0x20>
    2f32:	e0 95       	com	r30
    2f34:	0b 2e       	mov	r0, r27
    2f36:	ba 2f       	mov	r27, r26
    2f38:	a0 2d       	mov	r26, r0
    2f3a:	0b 01       	movw	r0, r22
    2f3c:	b9 01       	movw	r22, r18
    2f3e:	90 01       	movw	r18, r0
    2f40:	0c 01       	movw	r0, r24
    2f42:	ca 01       	movw	r24, r20
    2f44:	a0 01       	movw	r20, r0
    2f46:	11 24       	eor	r1, r1
    2f48:	ff 27       	eor	r31, r31
    2f4a:	59 1b       	sub	r21, r25
    2f4c:	99 f0       	breq	.+38     	; 0x2f74 <__addsf3x+0x60>
    2f4e:	59 3f       	cpi	r21, 0xF9	; 249
    2f50:	50 f4       	brcc	.+20     	; 0x2f66 <__addsf3x+0x52>
    2f52:	50 3e       	cpi	r21, 0xE0	; 224
    2f54:	68 f1       	brcs	.+90     	; 0x2fb0 <__addsf3x+0x9c>
    2f56:	1a 16       	cp	r1, r26
    2f58:	f0 40       	sbci	r31, 0x00	; 0
    2f5a:	a2 2f       	mov	r26, r18
    2f5c:	23 2f       	mov	r18, r19
    2f5e:	34 2f       	mov	r19, r20
    2f60:	44 27       	eor	r20, r20
    2f62:	58 5f       	subi	r21, 0xF8	; 248
    2f64:	f3 cf       	rjmp	.-26     	; 0x2f4c <__addsf3x+0x38>
    2f66:	46 95       	lsr	r20
    2f68:	37 95       	ror	r19
    2f6a:	27 95       	ror	r18
    2f6c:	a7 95       	ror	r26
    2f6e:	f0 40       	sbci	r31, 0x00	; 0
    2f70:	53 95       	inc	r21
    2f72:	c9 f7       	brne	.-14     	; 0x2f66 <__addsf3x+0x52>
    2f74:	7e f4       	brtc	.+30     	; 0x2f94 <__addsf3x+0x80>
    2f76:	1f 16       	cp	r1, r31
    2f78:	ba 0b       	sbc	r27, r26
    2f7a:	62 0b       	sbc	r22, r18
    2f7c:	73 0b       	sbc	r23, r19
    2f7e:	84 0b       	sbc	r24, r20
    2f80:	ba f0       	brmi	.+46     	; 0x2fb0 <__addsf3x+0x9c>
    2f82:	91 50       	subi	r25, 0x01	; 1
    2f84:	a1 f0       	breq	.+40     	; 0x2fae <__addsf3x+0x9a>
    2f86:	ff 0f       	add	r31, r31
    2f88:	bb 1f       	adc	r27, r27
    2f8a:	66 1f       	adc	r22, r22
    2f8c:	77 1f       	adc	r23, r23
    2f8e:	88 1f       	adc	r24, r24
    2f90:	c2 f7       	brpl	.-16     	; 0x2f82 <__addsf3x+0x6e>
    2f92:	0e c0       	rjmp	.+28     	; 0x2fb0 <__addsf3x+0x9c>
    2f94:	ba 0f       	add	r27, r26
    2f96:	62 1f       	adc	r22, r18
    2f98:	73 1f       	adc	r23, r19
    2f9a:	84 1f       	adc	r24, r20
    2f9c:	48 f4       	brcc	.+18     	; 0x2fb0 <__addsf3x+0x9c>
    2f9e:	87 95       	ror	r24
    2fa0:	77 95       	ror	r23
    2fa2:	67 95       	ror	r22
    2fa4:	b7 95       	ror	r27
    2fa6:	f7 95       	ror	r31
    2fa8:	9e 3f       	cpi	r25, 0xFE	; 254
    2faa:	08 f0       	brcs	.+2      	; 0x2fae <__addsf3x+0x9a>
    2fac:	b0 cf       	rjmp	.-160    	; 0x2f0e <__addsf3+0x28>
    2fae:	93 95       	inc	r25
    2fb0:	88 0f       	add	r24, r24
    2fb2:	08 f0       	brcs	.+2      	; 0x2fb6 <__addsf3x+0xa2>
    2fb4:	99 27       	eor	r25, r25
    2fb6:	ee 0f       	add	r30, r30
    2fb8:	97 95       	ror	r25
    2fba:	87 95       	ror	r24
    2fbc:	08 95       	ret

00002fbe <__cmpsf2>:
    2fbe:	0e 94 85 18 	call	0x310a	; 0x310a <__fp_cmp>
    2fc2:	08 f4       	brcc	.+2      	; 0x2fc6 <__cmpsf2+0x8>
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	08 95       	ret

00002fc8 <__divsf3>:
    2fc8:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <__divsf3x>
    2fcc:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__fp_round>
    2fd0:	0e 94 b9 18 	call	0x3172	; 0x3172 <__fp_pscB>
    2fd4:	58 f0       	brcs	.+22     	; 0x2fec <__divsf3+0x24>
    2fd6:	0e 94 b2 18 	call	0x3164	; 0x3164 <__fp_pscA>
    2fda:	40 f0       	brcs	.+16     	; 0x2fec <__divsf3+0x24>
    2fdc:	29 f4       	brne	.+10     	; 0x2fe8 <__divsf3+0x20>
    2fde:	5f 3f       	cpi	r21, 0xFF	; 255
    2fe0:	29 f0       	breq	.+10     	; 0x2fec <__divsf3+0x24>
    2fe2:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__fp_inf>
    2fe6:	51 11       	cpse	r21, r1
    2fe8:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__fp_szero>
    2fec:	0c 94 af 18 	jmp	0x315e	; 0x315e <__fp_nan>

00002ff0 <__divsf3x>:
    2ff0:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__fp_split3>
    2ff4:	68 f3       	brcs	.-38     	; 0x2fd0 <__divsf3+0x8>

00002ff6 <__divsf3_pse>:
    2ff6:	99 23       	and	r25, r25
    2ff8:	b1 f3       	breq	.-20     	; 0x2fe6 <__divsf3+0x1e>
    2ffa:	55 23       	and	r21, r21
    2ffc:	91 f3       	breq	.-28     	; 0x2fe2 <__divsf3+0x1a>
    2ffe:	95 1b       	sub	r25, r21
    3000:	55 0b       	sbc	r21, r21
    3002:	bb 27       	eor	r27, r27
    3004:	aa 27       	eor	r26, r26
    3006:	62 17       	cp	r22, r18
    3008:	73 07       	cpc	r23, r19
    300a:	84 07       	cpc	r24, r20
    300c:	38 f0       	brcs	.+14     	; 0x301c <__divsf3_pse+0x26>
    300e:	9f 5f       	subi	r25, 0xFF	; 255
    3010:	5f 4f       	sbci	r21, 0xFF	; 255
    3012:	22 0f       	add	r18, r18
    3014:	33 1f       	adc	r19, r19
    3016:	44 1f       	adc	r20, r20
    3018:	aa 1f       	adc	r26, r26
    301a:	a9 f3       	breq	.-22     	; 0x3006 <__divsf3_pse+0x10>
    301c:	35 d0       	rcall	.+106    	; 0x3088 <__divsf3_pse+0x92>
    301e:	0e 2e       	mov	r0, r30
    3020:	3a f0       	brmi	.+14     	; 0x3030 <__divsf3_pse+0x3a>
    3022:	e0 e8       	ldi	r30, 0x80	; 128
    3024:	32 d0       	rcall	.+100    	; 0x308a <__divsf3_pse+0x94>
    3026:	91 50       	subi	r25, 0x01	; 1
    3028:	50 40       	sbci	r21, 0x00	; 0
    302a:	e6 95       	lsr	r30
    302c:	00 1c       	adc	r0, r0
    302e:	ca f7       	brpl	.-14     	; 0x3022 <__divsf3_pse+0x2c>
    3030:	2b d0       	rcall	.+86     	; 0x3088 <__divsf3_pse+0x92>
    3032:	fe 2f       	mov	r31, r30
    3034:	29 d0       	rcall	.+82     	; 0x3088 <__divsf3_pse+0x92>
    3036:	66 0f       	add	r22, r22
    3038:	77 1f       	adc	r23, r23
    303a:	88 1f       	adc	r24, r24
    303c:	bb 1f       	adc	r27, r27
    303e:	26 17       	cp	r18, r22
    3040:	37 07       	cpc	r19, r23
    3042:	48 07       	cpc	r20, r24
    3044:	ab 07       	cpc	r26, r27
    3046:	b0 e8       	ldi	r27, 0x80	; 128
    3048:	09 f0       	breq	.+2      	; 0x304c <__divsf3_pse+0x56>
    304a:	bb 0b       	sbc	r27, r27
    304c:	80 2d       	mov	r24, r0
    304e:	bf 01       	movw	r22, r30
    3050:	ff 27       	eor	r31, r31
    3052:	93 58       	subi	r25, 0x83	; 131
    3054:	5f 4f       	sbci	r21, 0xFF	; 255
    3056:	3a f0       	brmi	.+14     	; 0x3066 <__divsf3_pse+0x70>
    3058:	9e 3f       	cpi	r25, 0xFE	; 254
    305a:	51 05       	cpc	r21, r1
    305c:	78 f0       	brcs	.+30     	; 0x307c <__divsf3_pse+0x86>
    305e:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__fp_inf>
    3062:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__fp_szero>
    3066:	5f 3f       	cpi	r21, 0xFF	; 255
    3068:	e4 f3       	brlt	.-8      	; 0x3062 <__divsf3_pse+0x6c>
    306a:	98 3e       	cpi	r25, 0xE8	; 232
    306c:	d4 f3       	brlt	.-12     	; 0x3062 <__divsf3_pse+0x6c>
    306e:	86 95       	lsr	r24
    3070:	77 95       	ror	r23
    3072:	67 95       	ror	r22
    3074:	b7 95       	ror	r27
    3076:	f7 95       	ror	r31
    3078:	9f 5f       	subi	r25, 0xFF	; 255
    307a:	c9 f7       	brne	.-14     	; 0x306e <__divsf3_pse+0x78>
    307c:	88 0f       	add	r24, r24
    307e:	91 1d       	adc	r25, r1
    3080:	96 95       	lsr	r25
    3082:	87 95       	ror	r24
    3084:	97 f9       	bld	r25, 7
    3086:	08 95       	ret
    3088:	e1 e0       	ldi	r30, 0x01	; 1
    308a:	66 0f       	add	r22, r22
    308c:	77 1f       	adc	r23, r23
    308e:	88 1f       	adc	r24, r24
    3090:	bb 1f       	adc	r27, r27
    3092:	62 17       	cp	r22, r18
    3094:	73 07       	cpc	r23, r19
    3096:	84 07       	cpc	r24, r20
    3098:	ba 07       	cpc	r27, r26
    309a:	20 f0       	brcs	.+8      	; 0x30a4 <__divsf3_pse+0xae>
    309c:	62 1b       	sub	r22, r18
    309e:	73 0b       	sbc	r23, r19
    30a0:	84 0b       	sbc	r24, r20
    30a2:	ba 0b       	sbc	r27, r26
    30a4:	ee 1f       	adc	r30, r30
    30a6:	88 f7       	brcc	.-30     	; 0x308a <__divsf3_pse+0x94>
    30a8:	e0 95       	com	r30
    30aa:	08 95       	ret

000030ac <__fixunssfsi>:
    30ac:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <__fp_splitA>
    30b0:	88 f0       	brcs	.+34     	; 0x30d4 <__fixunssfsi+0x28>
    30b2:	9f 57       	subi	r25, 0x7F	; 127
    30b4:	98 f0       	brcs	.+38     	; 0x30dc <__fixunssfsi+0x30>
    30b6:	b9 2f       	mov	r27, r25
    30b8:	99 27       	eor	r25, r25
    30ba:	b7 51       	subi	r27, 0x17	; 23
    30bc:	b0 f0       	brcs	.+44     	; 0x30ea <__fixunssfsi+0x3e>
    30be:	e1 f0       	breq	.+56     	; 0x30f8 <__fixunssfsi+0x4c>
    30c0:	66 0f       	add	r22, r22
    30c2:	77 1f       	adc	r23, r23
    30c4:	88 1f       	adc	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	1a f0       	brmi	.+6      	; 0x30d0 <__fixunssfsi+0x24>
    30ca:	ba 95       	dec	r27
    30cc:	c9 f7       	brne	.-14     	; 0x30c0 <__fixunssfsi+0x14>
    30ce:	14 c0       	rjmp	.+40     	; 0x30f8 <__fixunssfsi+0x4c>
    30d0:	b1 30       	cpi	r27, 0x01	; 1
    30d2:	91 f0       	breq	.+36     	; 0x30f8 <__fixunssfsi+0x4c>
    30d4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__fp_zero>
    30d8:	b1 e0       	ldi	r27, 0x01	; 1
    30da:	08 95       	ret
    30dc:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__fp_zero>
    30e0:	67 2f       	mov	r22, r23
    30e2:	78 2f       	mov	r23, r24
    30e4:	88 27       	eor	r24, r24
    30e6:	b8 5f       	subi	r27, 0xF8	; 248
    30e8:	39 f0       	breq	.+14     	; 0x30f8 <__fixunssfsi+0x4c>
    30ea:	b9 3f       	cpi	r27, 0xF9	; 249
    30ec:	cc f3       	brlt	.-14     	; 0x30e0 <__fixunssfsi+0x34>
    30ee:	86 95       	lsr	r24
    30f0:	77 95       	ror	r23
    30f2:	67 95       	ror	r22
    30f4:	b3 95       	inc	r27
    30f6:	d9 f7       	brne	.-10     	; 0x30ee <__fixunssfsi+0x42>
    30f8:	3e f4       	brtc	.+14     	; 0x3108 <__fixunssfsi+0x5c>
    30fa:	90 95       	com	r25
    30fc:	80 95       	com	r24
    30fe:	70 95       	com	r23
    3100:	61 95       	neg	r22
    3102:	7f 4f       	sbci	r23, 0xFF	; 255
    3104:	8f 4f       	sbci	r24, 0xFF	; 255
    3106:	9f 4f       	sbci	r25, 0xFF	; 255
    3108:	08 95       	ret

0000310a <__fp_cmp>:
    310a:	99 0f       	add	r25, r25
    310c:	00 08       	sbc	r0, r0
    310e:	55 0f       	add	r21, r21
    3110:	aa 0b       	sbc	r26, r26
    3112:	e0 e8       	ldi	r30, 0x80	; 128
    3114:	fe ef       	ldi	r31, 0xFE	; 254
    3116:	16 16       	cp	r1, r22
    3118:	17 06       	cpc	r1, r23
    311a:	e8 07       	cpc	r30, r24
    311c:	f9 07       	cpc	r31, r25
    311e:	c0 f0       	brcs	.+48     	; 0x3150 <__fp_cmp+0x46>
    3120:	12 16       	cp	r1, r18
    3122:	13 06       	cpc	r1, r19
    3124:	e4 07       	cpc	r30, r20
    3126:	f5 07       	cpc	r31, r21
    3128:	98 f0       	brcs	.+38     	; 0x3150 <__fp_cmp+0x46>
    312a:	62 1b       	sub	r22, r18
    312c:	73 0b       	sbc	r23, r19
    312e:	84 0b       	sbc	r24, r20
    3130:	95 0b       	sbc	r25, r21
    3132:	39 f4       	brne	.+14     	; 0x3142 <__fp_cmp+0x38>
    3134:	0a 26       	eor	r0, r26
    3136:	61 f0       	breq	.+24     	; 0x3150 <__fp_cmp+0x46>
    3138:	23 2b       	or	r18, r19
    313a:	24 2b       	or	r18, r20
    313c:	25 2b       	or	r18, r21
    313e:	21 f4       	brne	.+8      	; 0x3148 <__fp_cmp+0x3e>
    3140:	08 95       	ret
    3142:	0a 26       	eor	r0, r26
    3144:	09 f4       	brne	.+2      	; 0x3148 <__fp_cmp+0x3e>
    3146:	a1 40       	sbci	r26, 0x01	; 1
    3148:	a6 95       	lsr	r26
    314a:	8f ef       	ldi	r24, 0xFF	; 255
    314c:	81 1d       	adc	r24, r1
    314e:	81 1d       	adc	r24, r1
    3150:	08 95       	ret

00003152 <__fp_inf>:
    3152:	97 f9       	bld	r25, 7
    3154:	9f 67       	ori	r25, 0x7F	; 127
    3156:	80 e8       	ldi	r24, 0x80	; 128
    3158:	70 e0       	ldi	r23, 0x00	; 0
    315a:	60 e0       	ldi	r22, 0x00	; 0
    315c:	08 95       	ret

0000315e <__fp_nan>:
    315e:	9f ef       	ldi	r25, 0xFF	; 255
    3160:	80 ec       	ldi	r24, 0xC0	; 192
    3162:	08 95       	ret

00003164 <__fp_pscA>:
    3164:	00 24       	eor	r0, r0
    3166:	0a 94       	dec	r0
    3168:	16 16       	cp	r1, r22
    316a:	17 06       	cpc	r1, r23
    316c:	18 06       	cpc	r1, r24
    316e:	09 06       	cpc	r0, r25
    3170:	08 95       	ret

00003172 <__fp_pscB>:
    3172:	00 24       	eor	r0, r0
    3174:	0a 94       	dec	r0
    3176:	12 16       	cp	r1, r18
    3178:	13 06       	cpc	r1, r19
    317a:	14 06       	cpc	r1, r20
    317c:	05 06       	cpc	r0, r21
    317e:	08 95       	ret

00003180 <__fp_round>:
    3180:	09 2e       	mov	r0, r25
    3182:	03 94       	inc	r0
    3184:	00 0c       	add	r0, r0
    3186:	11 f4       	brne	.+4      	; 0x318c <__fp_round+0xc>
    3188:	88 23       	and	r24, r24
    318a:	52 f0       	brmi	.+20     	; 0x31a0 <__fp_round+0x20>
    318c:	bb 0f       	add	r27, r27
    318e:	40 f4       	brcc	.+16     	; 0x31a0 <__fp_round+0x20>
    3190:	bf 2b       	or	r27, r31
    3192:	11 f4       	brne	.+4      	; 0x3198 <__fp_round+0x18>
    3194:	60 ff       	sbrs	r22, 0
    3196:	04 c0       	rjmp	.+8      	; 0x31a0 <__fp_round+0x20>
    3198:	6f 5f       	subi	r22, 0xFF	; 255
    319a:	7f 4f       	sbci	r23, 0xFF	; 255
    319c:	8f 4f       	sbci	r24, 0xFF	; 255
    319e:	9f 4f       	sbci	r25, 0xFF	; 255
    31a0:	08 95       	ret

000031a2 <__fp_split3>:
    31a2:	57 fd       	sbrc	r21, 7
    31a4:	90 58       	subi	r25, 0x80	; 128
    31a6:	44 0f       	add	r20, r20
    31a8:	55 1f       	adc	r21, r21
    31aa:	59 f0       	breq	.+22     	; 0x31c2 <__fp_splitA+0x10>
    31ac:	5f 3f       	cpi	r21, 0xFF	; 255
    31ae:	71 f0       	breq	.+28     	; 0x31cc <__fp_splitA+0x1a>
    31b0:	47 95       	ror	r20

000031b2 <__fp_splitA>:
    31b2:	88 0f       	add	r24, r24
    31b4:	97 fb       	bst	r25, 7
    31b6:	99 1f       	adc	r25, r25
    31b8:	61 f0       	breq	.+24     	; 0x31d2 <__fp_splitA+0x20>
    31ba:	9f 3f       	cpi	r25, 0xFF	; 255
    31bc:	79 f0       	breq	.+30     	; 0x31dc <__fp_splitA+0x2a>
    31be:	87 95       	ror	r24
    31c0:	08 95       	ret
    31c2:	12 16       	cp	r1, r18
    31c4:	13 06       	cpc	r1, r19
    31c6:	14 06       	cpc	r1, r20
    31c8:	55 1f       	adc	r21, r21
    31ca:	f2 cf       	rjmp	.-28     	; 0x31b0 <__fp_split3+0xe>
    31cc:	46 95       	lsr	r20
    31ce:	f1 df       	rcall	.-30     	; 0x31b2 <__fp_splitA>
    31d0:	08 c0       	rjmp	.+16     	; 0x31e2 <__fp_splitA+0x30>
    31d2:	16 16       	cp	r1, r22
    31d4:	17 06       	cpc	r1, r23
    31d6:	18 06       	cpc	r1, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	f1 cf       	rjmp	.-30     	; 0x31be <__fp_splitA+0xc>
    31dc:	86 95       	lsr	r24
    31de:	71 05       	cpc	r23, r1
    31e0:	61 05       	cpc	r22, r1
    31e2:	08 94       	sec
    31e4:	08 95       	ret

000031e6 <__fp_zero>:
    31e6:	e8 94       	clt

000031e8 <__fp_szero>:
    31e8:	bb 27       	eor	r27, r27
    31ea:	66 27       	eor	r22, r22
    31ec:	77 27       	eor	r23, r23
    31ee:	cb 01       	movw	r24, r22
    31f0:	97 f9       	bld	r25, 7
    31f2:	08 95       	ret

000031f4 <__gesf2>:
    31f4:	0e 94 85 18 	call	0x310a	; 0x310a <__fp_cmp>
    31f8:	08 f4       	brcc	.+2      	; 0x31fc <__gesf2+0x8>
    31fa:	8f ef       	ldi	r24, 0xFF	; 255
    31fc:	08 95       	ret

000031fe <__mulsf3>:
    31fe:	0e 94 12 19 	call	0x3224	; 0x3224 <__mulsf3x>
    3202:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__fp_round>
    3206:	0e 94 b2 18 	call	0x3164	; 0x3164 <__fp_pscA>
    320a:	38 f0       	brcs	.+14     	; 0x321a <__mulsf3+0x1c>
    320c:	0e 94 b9 18 	call	0x3172	; 0x3172 <__fp_pscB>
    3210:	20 f0       	brcs	.+8      	; 0x321a <__mulsf3+0x1c>
    3212:	95 23       	and	r25, r21
    3214:	11 f0       	breq	.+4      	; 0x321a <__mulsf3+0x1c>
    3216:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__fp_inf>
    321a:	0c 94 af 18 	jmp	0x315e	; 0x315e <__fp_nan>
    321e:	11 24       	eor	r1, r1
    3220:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__fp_szero>

00003224 <__mulsf3x>:
    3224:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__fp_split3>
    3228:	70 f3       	brcs	.-36     	; 0x3206 <__mulsf3+0x8>

0000322a <__mulsf3_pse>:
    322a:	95 9f       	mul	r25, r21
    322c:	c1 f3       	breq	.-16     	; 0x321e <__mulsf3+0x20>
    322e:	95 0f       	add	r25, r21
    3230:	50 e0       	ldi	r21, 0x00	; 0
    3232:	55 1f       	adc	r21, r21
    3234:	62 9f       	mul	r22, r18
    3236:	f0 01       	movw	r30, r0
    3238:	72 9f       	mul	r23, r18
    323a:	bb 27       	eor	r27, r27
    323c:	f0 0d       	add	r31, r0
    323e:	b1 1d       	adc	r27, r1
    3240:	63 9f       	mul	r22, r19
    3242:	aa 27       	eor	r26, r26
    3244:	f0 0d       	add	r31, r0
    3246:	b1 1d       	adc	r27, r1
    3248:	aa 1f       	adc	r26, r26
    324a:	64 9f       	mul	r22, r20
    324c:	66 27       	eor	r22, r22
    324e:	b0 0d       	add	r27, r0
    3250:	a1 1d       	adc	r26, r1
    3252:	66 1f       	adc	r22, r22
    3254:	82 9f       	mul	r24, r18
    3256:	22 27       	eor	r18, r18
    3258:	b0 0d       	add	r27, r0
    325a:	a1 1d       	adc	r26, r1
    325c:	62 1f       	adc	r22, r18
    325e:	73 9f       	mul	r23, r19
    3260:	b0 0d       	add	r27, r0
    3262:	a1 1d       	adc	r26, r1
    3264:	62 1f       	adc	r22, r18
    3266:	83 9f       	mul	r24, r19
    3268:	a0 0d       	add	r26, r0
    326a:	61 1d       	adc	r22, r1
    326c:	22 1f       	adc	r18, r18
    326e:	74 9f       	mul	r23, r20
    3270:	33 27       	eor	r19, r19
    3272:	a0 0d       	add	r26, r0
    3274:	61 1d       	adc	r22, r1
    3276:	23 1f       	adc	r18, r19
    3278:	84 9f       	mul	r24, r20
    327a:	60 0d       	add	r22, r0
    327c:	21 1d       	adc	r18, r1
    327e:	82 2f       	mov	r24, r18
    3280:	76 2f       	mov	r23, r22
    3282:	6a 2f       	mov	r22, r26
    3284:	11 24       	eor	r1, r1
    3286:	9f 57       	subi	r25, 0x7F	; 127
    3288:	50 40       	sbci	r21, 0x00	; 0
    328a:	9a f0       	brmi	.+38     	; 0x32b2 <__mulsf3_pse+0x88>
    328c:	f1 f0       	breq	.+60     	; 0x32ca <__mulsf3_pse+0xa0>
    328e:	88 23       	and	r24, r24
    3290:	4a f0       	brmi	.+18     	; 0x32a4 <__mulsf3_pse+0x7a>
    3292:	ee 0f       	add	r30, r30
    3294:	ff 1f       	adc	r31, r31
    3296:	bb 1f       	adc	r27, r27
    3298:	66 1f       	adc	r22, r22
    329a:	77 1f       	adc	r23, r23
    329c:	88 1f       	adc	r24, r24
    329e:	91 50       	subi	r25, 0x01	; 1
    32a0:	50 40       	sbci	r21, 0x00	; 0
    32a2:	a9 f7       	brne	.-22     	; 0x328e <__mulsf3_pse+0x64>
    32a4:	9e 3f       	cpi	r25, 0xFE	; 254
    32a6:	51 05       	cpc	r21, r1
    32a8:	80 f0       	brcs	.+32     	; 0x32ca <__mulsf3_pse+0xa0>
    32aa:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__fp_inf>
    32ae:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__fp_szero>
    32b2:	5f 3f       	cpi	r21, 0xFF	; 255
    32b4:	e4 f3       	brlt	.-8      	; 0x32ae <__mulsf3_pse+0x84>
    32b6:	98 3e       	cpi	r25, 0xE8	; 232
    32b8:	d4 f3       	brlt	.-12     	; 0x32ae <__mulsf3_pse+0x84>
    32ba:	86 95       	lsr	r24
    32bc:	77 95       	ror	r23
    32be:	67 95       	ror	r22
    32c0:	b7 95       	ror	r27
    32c2:	f7 95       	ror	r31
    32c4:	e7 95       	ror	r30
    32c6:	9f 5f       	subi	r25, 0xFF	; 255
    32c8:	c1 f7       	brne	.-16     	; 0x32ba <__mulsf3_pse+0x90>
    32ca:	fe 2b       	or	r31, r30
    32cc:	88 0f       	add	r24, r24
    32ce:	91 1d       	adc	r25, r1
    32d0:	96 95       	lsr	r25
    32d2:	87 95       	ror	r24
    32d4:	97 f9       	bld	r25, 7
    32d6:	08 95       	ret

000032d8 <sprintf>:
    32d8:	ae e0       	ldi	r26, 0x0E	; 14
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	e2 e7       	ldi	r30, 0x72	; 114
    32de:	f9 e1       	ldi	r31, 0x19	; 25
    32e0:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__+0x1c>
    32e4:	0d 89       	ldd	r16, Y+21	; 0x15
    32e6:	1e 89       	ldd	r17, Y+22	; 0x16
    32e8:	86 e0       	ldi	r24, 0x06	; 6
    32ea:	8c 83       	std	Y+4, r24	; 0x04
    32ec:	1a 83       	std	Y+2, r17	; 0x02
    32ee:	09 83       	std	Y+1, r16	; 0x01
    32f0:	8f ef       	ldi	r24, 0xFF	; 255
    32f2:	9f e7       	ldi	r25, 0x7F	; 127
    32f4:	9e 83       	std	Y+6, r25	; 0x06
    32f6:	8d 83       	std	Y+5, r24	; 0x05
    32f8:	ae 01       	movw	r20, r28
    32fa:	47 5e       	subi	r20, 0xE7	; 231
    32fc:	5f 4f       	sbci	r21, 0xFF	; 255
    32fe:	6f 89       	ldd	r22, Y+23	; 0x17
    3300:	78 8d       	ldd	r23, Y+24	; 0x18
    3302:	ce 01       	movw	r24, r28
    3304:	01 96       	adiw	r24, 0x01	; 1
    3306:	0e 94 8e 19 	call	0x331c	; 0x331c <vfprintf>
    330a:	ef 81       	ldd	r30, Y+7	; 0x07
    330c:	f8 85       	ldd	r31, Y+8	; 0x08
    330e:	e0 0f       	add	r30, r16
    3310:	f1 1f       	adc	r31, r17
    3312:	10 82       	st	Z, r1
    3314:	2e 96       	adiw	r28, 0x0e	; 14
    3316:	e4 e0       	ldi	r30, 0x04	; 4
    3318:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__epilogue_restores__+0x1c>

0000331c <vfprintf>:
    331c:	ab e0       	ldi	r26, 0x0B	; 11
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	e4 e9       	ldi	r30, 0x94	; 148
    3322:	f9 e1       	ldi	r31, 0x19	; 25
    3324:	0c 94 1f 1c 	jmp	0x383e	; 0x383e <__prologue_saves__>
    3328:	6c 01       	movw	r12, r24
    332a:	7b 01       	movw	r14, r22
    332c:	8a 01       	movw	r16, r20
    332e:	fc 01       	movw	r30, r24
    3330:	17 82       	std	Z+7, r1	; 0x07
    3332:	16 82       	std	Z+6, r1	; 0x06
    3334:	83 81       	ldd	r24, Z+3	; 0x03
    3336:	81 ff       	sbrs	r24, 1
    3338:	cc c1       	rjmp	.+920    	; 0x36d2 <vfprintf+0x3b6>
    333a:	ce 01       	movw	r24, r28
    333c:	01 96       	adiw	r24, 0x01	; 1
    333e:	3c 01       	movw	r6, r24
    3340:	f6 01       	movw	r30, r12
    3342:	93 81       	ldd	r25, Z+3	; 0x03
    3344:	f7 01       	movw	r30, r14
    3346:	93 fd       	sbrc	r25, 3
    3348:	85 91       	lpm	r24, Z+
    334a:	93 ff       	sbrs	r25, 3
    334c:	81 91       	ld	r24, Z+
    334e:	7f 01       	movw	r14, r30
    3350:	88 23       	and	r24, r24
    3352:	09 f4       	brne	.+2      	; 0x3356 <vfprintf+0x3a>
    3354:	ba c1       	rjmp	.+884    	; 0x36ca <vfprintf+0x3ae>
    3356:	85 32       	cpi	r24, 0x25	; 37
    3358:	39 f4       	brne	.+14     	; 0x3368 <vfprintf+0x4c>
    335a:	93 fd       	sbrc	r25, 3
    335c:	85 91       	lpm	r24, Z+
    335e:	93 ff       	sbrs	r25, 3
    3360:	81 91       	ld	r24, Z+
    3362:	7f 01       	movw	r14, r30
    3364:	85 32       	cpi	r24, 0x25	; 37
    3366:	29 f4       	brne	.+10     	; 0x3372 <vfprintf+0x56>
    3368:	b6 01       	movw	r22, r12
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	0e 94 85 1b 	call	0x370a	; 0x370a <fputc>
    3370:	e7 cf       	rjmp	.-50     	; 0x3340 <vfprintf+0x24>
    3372:	91 2c       	mov	r9, r1
    3374:	21 2c       	mov	r2, r1
    3376:	31 2c       	mov	r3, r1
    3378:	ff e1       	ldi	r31, 0x1F	; 31
    337a:	f3 15       	cp	r31, r3
    337c:	d8 f0       	brcs	.+54     	; 0x33b4 <vfprintf+0x98>
    337e:	8b 32       	cpi	r24, 0x2B	; 43
    3380:	79 f0       	breq	.+30     	; 0x33a0 <vfprintf+0x84>
    3382:	38 f4       	brcc	.+14     	; 0x3392 <vfprintf+0x76>
    3384:	80 32       	cpi	r24, 0x20	; 32
    3386:	79 f0       	breq	.+30     	; 0x33a6 <vfprintf+0x8a>
    3388:	83 32       	cpi	r24, 0x23	; 35
    338a:	a1 f4       	brne	.+40     	; 0x33b4 <vfprintf+0x98>
    338c:	23 2d       	mov	r18, r3
    338e:	20 61       	ori	r18, 0x10	; 16
    3390:	1d c0       	rjmp	.+58     	; 0x33cc <vfprintf+0xb0>
    3392:	8d 32       	cpi	r24, 0x2D	; 45
    3394:	61 f0       	breq	.+24     	; 0x33ae <vfprintf+0x92>
    3396:	80 33       	cpi	r24, 0x30	; 48
    3398:	69 f4       	brne	.+26     	; 0x33b4 <vfprintf+0x98>
    339a:	23 2d       	mov	r18, r3
    339c:	21 60       	ori	r18, 0x01	; 1
    339e:	16 c0       	rjmp	.+44     	; 0x33cc <vfprintf+0xb0>
    33a0:	83 2d       	mov	r24, r3
    33a2:	82 60       	ori	r24, 0x02	; 2
    33a4:	38 2e       	mov	r3, r24
    33a6:	e3 2d       	mov	r30, r3
    33a8:	e4 60       	ori	r30, 0x04	; 4
    33aa:	3e 2e       	mov	r3, r30
    33ac:	2a c0       	rjmp	.+84     	; 0x3402 <vfprintf+0xe6>
    33ae:	f3 2d       	mov	r31, r3
    33b0:	f8 60       	ori	r31, 0x08	; 8
    33b2:	1d c0       	rjmp	.+58     	; 0x33ee <vfprintf+0xd2>
    33b4:	37 fc       	sbrc	r3, 7
    33b6:	2d c0       	rjmp	.+90     	; 0x3412 <vfprintf+0xf6>
    33b8:	20 ed       	ldi	r18, 0xD0	; 208
    33ba:	28 0f       	add	r18, r24
    33bc:	2a 30       	cpi	r18, 0x0A	; 10
    33be:	40 f0       	brcs	.+16     	; 0x33d0 <vfprintf+0xb4>
    33c0:	8e 32       	cpi	r24, 0x2E	; 46
    33c2:	b9 f4       	brne	.+46     	; 0x33f2 <vfprintf+0xd6>
    33c4:	36 fc       	sbrc	r3, 6
    33c6:	81 c1       	rjmp	.+770    	; 0x36ca <vfprintf+0x3ae>
    33c8:	23 2d       	mov	r18, r3
    33ca:	20 64       	ori	r18, 0x40	; 64
    33cc:	32 2e       	mov	r3, r18
    33ce:	19 c0       	rjmp	.+50     	; 0x3402 <vfprintf+0xe6>
    33d0:	36 fe       	sbrs	r3, 6
    33d2:	06 c0       	rjmp	.+12     	; 0x33e0 <vfprintf+0xc4>
    33d4:	8a e0       	ldi	r24, 0x0A	; 10
    33d6:	98 9e       	mul	r9, r24
    33d8:	20 0d       	add	r18, r0
    33da:	11 24       	eor	r1, r1
    33dc:	92 2e       	mov	r9, r18
    33de:	11 c0       	rjmp	.+34     	; 0x3402 <vfprintf+0xe6>
    33e0:	ea e0       	ldi	r30, 0x0A	; 10
    33e2:	2e 9e       	mul	r2, r30
    33e4:	20 0d       	add	r18, r0
    33e6:	11 24       	eor	r1, r1
    33e8:	22 2e       	mov	r2, r18
    33ea:	f3 2d       	mov	r31, r3
    33ec:	f0 62       	ori	r31, 0x20	; 32
    33ee:	3f 2e       	mov	r3, r31
    33f0:	08 c0       	rjmp	.+16     	; 0x3402 <vfprintf+0xe6>
    33f2:	8c 36       	cpi	r24, 0x6C	; 108
    33f4:	21 f4       	brne	.+8      	; 0x33fe <vfprintf+0xe2>
    33f6:	83 2d       	mov	r24, r3
    33f8:	80 68       	ori	r24, 0x80	; 128
    33fa:	38 2e       	mov	r3, r24
    33fc:	02 c0       	rjmp	.+4      	; 0x3402 <vfprintf+0xe6>
    33fe:	88 36       	cpi	r24, 0x68	; 104
    3400:	41 f4       	brne	.+16     	; 0x3412 <vfprintf+0xf6>
    3402:	f7 01       	movw	r30, r14
    3404:	93 fd       	sbrc	r25, 3
    3406:	85 91       	lpm	r24, Z+
    3408:	93 ff       	sbrs	r25, 3
    340a:	81 91       	ld	r24, Z+
    340c:	7f 01       	movw	r14, r30
    340e:	81 11       	cpse	r24, r1
    3410:	b3 cf       	rjmp	.-154    	; 0x3378 <vfprintf+0x5c>
    3412:	98 2f       	mov	r25, r24
    3414:	9f 7d       	andi	r25, 0xDF	; 223
    3416:	95 54       	subi	r25, 0x45	; 69
    3418:	93 30       	cpi	r25, 0x03	; 3
    341a:	28 f4       	brcc	.+10     	; 0x3426 <vfprintf+0x10a>
    341c:	0c 5f       	subi	r16, 0xFC	; 252
    341e:	1f 4f       	sbci	r17, 0xFF	; 255
    3420:	9f e3       	ldi	r25, 0x3F	; 63
    3422:	99 83       	std	Y+1, r25	; 0x01
    3424:	0d c0       	rjmp	.+26     	; 0x3440 <vfprintf+0x124>
    3426:	83 36       	cpi	r24, 0x63	; 99
    3428:	31 f0       	breq	.+12     	; 0x3436 <vfprintf+0x11a>
    342a:	83 37       	cpi	r24, 0x73	; 115
    342c:	71 f0       	breq	.+28     	; 0x344a <vfprintf+0x12e>
    342e:	83 35       	cpi	r24, 0x53	; 83
    3430:	09 f0       	breq	.+2      	; 0x3434 <vfprintf+0x118>
    3432:	59 c0       	rjmp	.+178    	; 0x34e6 <vfprintf+0x1ca>
    3434:	21 c0       	rjmp	.+66     	; 0x3478 <vfprintf+0x15c>
    3436:	f8 01       	movw	r30, r16
    3438:	80 81       	ld	r24, Z
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	0e 5f       	subi	r16, 0xFE	; 254
    343e:	1f 4f       	sbci	r17, 0xFF	; 255
    3440:	88 24       	eor	r8, r8
    3442:	83 94       	inc	r8
    3444:	91 2c       	mov	r9, r1
    3446:	53 01       	movw	r10, r6
    3448:	13 c0       	rjmp	.+38     	; 0x3470 <vfprintf+0x154>
    344a:	28 01       	movw	r4, r16
    344c:	f2 e0       	ldi	r31, 0x02	; 2
    344e:	4f 0e       	add	r4, r31
    3450:	51 1c       	adc	r5, r1
    3452:	f8 01       	movw	r30, r16
    3454:	a0 80       	ld	r10, Z
    3456:	b1 80       	ldd	r11, Z+1	; 0x01
    3458:	36 fe       	sbrs	r3, 6
    345a:	03 c0       	rjmp	.+6      	; 0x3462 <vfprintf+0x146>
    345c:	69 2d       	mov	r22, r9
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <vfprintf+0x14a>
    3462:	6f ef       	ldi	r22, 0xFF	; 255
    3464:	7f ef       	ldi	r23, 0xFF	; 255
    3466:	c5 01       	movw	r24, r10
    3468:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <strnlen>
    346c:	4c 01       	movw	r8, r24
    346e:	82 01       	movw	r16, r4
    3470:	f3 2d       	mov	r31, r3
    3472:	ff 77       	andi	r31, 0x7F	; 127
    3474:	3f 2e       	mov	r3, r31
    3476:	16 c0       	rjmp	.+44     	; 0x34a4 <vfprintf+0x188>
    3478:	28 01       	movw	r4, r16
    347a:	22 e0       	ldi	r18, 0x02	; 2
    347c:	42 0e       	add	r4, r18
    347e:	51 1c       	adc	r5, r1
    3480:	f8 01       	movw	r30, r16
    3482:	a0 80       	ld	r10, Z
    3484:	b1 80       	ldd	r11, Z+1	; 0x01
    3486:	36 fe       	sbrs	r3, 6
    3488:	03 c0       	rjmp	.+6      	; 0x3490 <vfprintf+0x174>
    348a:	69 2d       	mov	r22, r9
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	02 c0       	rjmp	.+4      	; 0x3494 <vfprintf+0x178>
    3490:	6f ef       	ldi	r22, 0xFF	; 255
    3492:	7f ef       	ldi	r23, 0xFF	; 255
    3494:	c5 01       	movw	r24, r10
    3496:	0e 94 6f 1b 	call	0x36de	; 0x36de <strnlen_P>
    349a:	4c 01       	movw	r8, r24
    349c:	f3 2d       	mov	r31, r3
    349e:	f0 68       	ori	r31, 0x80	; 128
    34a0:	3f 2e       	mov	r3, r31
    34a2:	82 01       	movw	r16, r4
    34a4:	33 fc       	sbrc	r3, 3
    34a6:	1b c0       	rjmp	.+54     	; 0x34de <vfprintf+0x1c2>
    34a8:	82 2d       	mov	r24, r2
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	88 16       	cp	r8, r24
    34ae:	99 06       	cpc	r9, r25
    34b0:	b0 f4       	brcc	.+44     	; 0x34de <vfprintf+0x1c2>
    34b2:	b6 01       	movw	r22, r12
    34b4:	80 e2       	ldi	r24, 0x20	; 32
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	0e 94 85 1b 	call	0x370a	; 0x370a <fputc>
    34bc:	2a 94       	dec	r2
    34be:	f4 cf       	rjmp	.-24     	; 0x34a8 <vfprintf+0x18c>
    34c0:	f5 01       	movw	r30, r10
    34c2:	37 fc       	sbrc	r3, 7
    34c4:	85 91       	lpm	r24, Z+
    34c6:	37 fe       	sbrs	r3, 7
    34c8:	81 91       	ld	r24, Z+
    34ca:	5f 01       	movw	r10, r30
    34cc:	b6 01       	movw	r22, r12
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	0e 94 85 1b 	call	0x370a	; 0x370a <fputc>
    34d4:	21 10       	cpse	r2, r1
    34d6:	2a 94       	dec	r2
    34d8:	21 e0       	ldi	r18, 0x01	; 1
    34da:	82 1a       	sub	r8, r18
    34dc:	91 08       	sbc	r9, r1
    34de:	81 14       	cp	r8, r1
    34e0:	91 04       	cpc	r9, r1
    34e2:	71 f7       	brne	.-36     	; 0x34c0 <vfprintf+0x1a4>
    34e4:	e8 c0       	rjmp	.+464    	; 0x36b6 <vfprintf+0x39a>
    34e6:	84 36       	cpi	r24, 0x64	; 100
    34e8:	11 f0       	breq	.+4      	; 0x34ee <vfprintf+0x1d2>
    34ea:	89 36       	cpi	r24, 0x69	; 105
    34ec:	41 f5       	brne	.+80     	; 0x353e <vfprintf+0x222>
    34ee:	f8 01       	movw	r30, r16
    34f0:	37 fe       	sbrs	r3, 7
    34f2:	07 c0       	rjmp	.+14     	; 0x3502 <vfprintf+0x1e6>
    34f4:	60 81       	ld	r22, Z
    34f6:	71 81       	ldd	r23, Z+1	; 0x01
    34f8:	82 81       	ldd	r24, Z+2	; 0x02
    34fa:	93 81       	ldd	r25, Z+3	; 0x03
    34fc:	0c 5f       	subi	r16, 0xFC	; 252
    34fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3500:	08 c0       	rjmp	.+16     	; 0x3512 <vfprintf+0x1f6>
    3502:	60 81       	ld	r22, Z
    3504:	71 81       	ldd	r23, Z+1	; 0x01
    3506:	07 2e       	mov	r0, r23
    3508:	00 0c       	add	r0, r0
    350a:	88 0b       	sbc	r24, r24
    350c:	99 0b       	sbc	r25, r25
    350e:	0e 5f       	subi	r16, 0xFE	; 254
    3510:	1f 4f       	sbci	r17, 0xFF	; 255
    3512:	f3 2d       	mov	r31, r3
    3514:	ff 76       	andi	r31, 0x6F	; 111
    3516:	3f 2e       	mov	r3, r31
    3518:	97 ff       	sbrs	r25, 7
    351a:	09 c0       	rjmp	.+18     	; 0x352e <vfprintf+0x212>
    351c:	90 95       	com	r25
    351e:	80 95       	com	r24
    3520:	70 95       	com	r23
    3522:	61 95       	neg	r22
    3524:	7f 4f       	sbci	r23, 0xFF	; 255
    3526:	8f 4f       	sbci	r24, 0xFF	; 255
    3528:	9f 4f       	sbci	r25, 0xFF	; 255
    352a:	f0 68       	ori	r31, 0x80	; 128
    352c:	3f 2e       	mov	r3, r31
    352e:	2a e0       	ldi	r18, 0x0A	; 10
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	a3 01       	movw	r20, r6
    3534:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__ultoa_invert>
    3538:	88 2e       	mov	r8, r24
    353a:	86 18       	sub	r8, r6
    353c:	45 c0       	rjmp	.+138    	; 0x35c8 <vfprintf+0x2ac>
    353e:	85 37       	cpi	r24, 0x75	; 117
    3540:	31 f4       	brne	.+12     	; 0x354e <vfprintf+0x232>
    3542:	23 2d       	mov	r18, r3
    3544:	2f 7e       	andi	r18, 0xEF	; 239
    3546:	b2 2e       	mov	r11, r18
    3548:	2a e0       	ldi	r18, 0x0A	; 10
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	25 c0       	rjmp	.+74     	; 0x3598 <vfprintf+0x27c>
    354e:	93 2d       	mov	r25, r3
    3550:	99 7f       	andi	r25, 0xF9	; 249
    3552:	b9 2e       	mov	r11, r25
    3554:	8f 36       	cpi	r24, 0x6F	; 111
    3556:	c1 f0       	breq	.+48     	; 0x3588 <vfprintf+0x26c>
    3558:	18 f4       	brcc	.+6      	; 0x3560 <vfprintf+0x244>
    355a:	88 35       	cpi	r24, 0x58	; 88
    355c:	79 f0       	breq	.+30     	; 0x357c <vfprintf+0x260>
    355e:	b5 c0       	rjmp	.+362    	; 0x36ca <vfprintf+0x3ae>
    3560:	80 37       	cpi	r24, 0x70	; 112
    3562:	19 f0       	breq	.+6      	; 0x356a <vfprintf+0x24e>
    3564:	88 37       	cpi	r24, 0x78	; 120
    3566:	21 f0       	breq	.+8      	; 0x3570 <vfprintf+0x254>
    3568:	b0 c0       	rjmp	.+352    	; 0x36ca <vfprintf+0x3ae>
    356a:	e9 2f       	mov	r30, r25
    356c:	e0 61       	ori	r30, 0x10	; 16
    356e:	be 2e       	mov	r11, r30
    3570:	b4 fe       	sbrs	r11, 4
    3572:	0d c0       	rjmp	.+26     	; 0x358e <vfprintf+0x272>
    3574:	fb 2d       	mov	r31, r11
    3576:	f4 60       	ori	r31, 0x04	; 4
    3578:	bf 2e       	mov	r11, r31
    357a:	09 c0       	rjmp	.+18     	; 0x358e <vfprintf+0x272>
    357c:	34 fe       	sbrs	r3, 4
    357e:	0a c0       	rjmp	.+20     	; 0x3594 <vfprintf+0x278>
    3580:	29 2f       	mov	r18, r25
    3582:	26 60       	ori	r18, 0x06	; 6
    3584:	b2 2e       	mov	r11, r18
    3586:	06 c0       	rjmp	.+12     	; 0x3594 <vfprintf+0x278>
    3588:	28 e0       	ldi	r18, 0x08	; 8
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	05 c0       	rjmp	.+10     	; 0x3598 <vfprintf+0x27c>
    358e:	20 e1       	ldi	r18, 0x10	; 16
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <vfprintf+0x27c>
    3594:	20 e1       	ldi	r18, 0x10	; 16
    3596:	32 e0       	ldi	r19, 0x02	; 2
    3598:	f8 01       	movw	r30, r16
    359a:	b7 fe       	sbrs	r11, 7
    359c:	07 c0       	rjmp	.+14     	; 0x35ac <vfprintf+0x290>
    359e:	60 81       	ld	r22, Z
    35a0:	71 81       	ldd	r23, Z+1	; 0x01
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	0c 5f       	subi	r16, 0xFC	; 252
    35a8:	1f 4f       	sbci	r17, 0xFF	; 255
    35aa:	06 c0       	rjmp	.+12     	; 0x35b8 <vfprintf+0x29c>
    35ac:	60 81       	ld	r22, Z
    35ae:	71 81       	ldd	r23, Z+1	; 0x01
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	0e 5f       	subi	r16, 0xFE	; 254
    35b6:	1f 4f       	sbci	r17, 0xFF	; 255
    35b8:	a3 01       	movw	r20, r6
    35ba:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__ultoa_invert>
    35be:	88 2e       	mov	r8, r24
    35c0:	86 18       	sub	r8, r6
    35c2:	fb 2d       	mov	r31, r11
    35c4:	ff 77       	andi	r31, 0x7F	; 127
    35c6:	3f 2e       	mov	r3, r31
    35c8:	36 fe       	sbrs	r3, 6
    35ca:	0d c0       	rjmp	.+26     	; 0x35e6 <vfprintf+0x2ca>
    35cc:	23 2d       	mov	r18, r3
    35ce:	2e 7f       	andi	r18, 0xFE	; 254
    35d0:	a2 2e       	mov	r10, r18
    35d2:	89 14       	cp	r8, r9
    35d4:	58 f4       	brcc	.+22     	; 0x35ec <vfprintf+0x2d0>
    35d6:	34 fe       	sbrs	r3, 4
    35d8:	0b c0       	rjmp	.+22     	; 0x35f0 <vfprintf+0x2d4>
    35da:	32 fc       	sbrc	r3, 2
    35dc:	09 c0       	rjmp	.+18     	; 0x35f0 <vfprintf+0x2d4>
    35de:	83 2d       	mov	r24, r3
    35e0:	8e 7e       	andi	r24, 0xEE	; 238
    35e2:	a8 2e       	mov	r10, r24
    35e4:	05 c0       	rjmp	.+10     	; 0x35f0 <vfprintf+0x2d4>
    35e6:	b8 2c       	mov	r11, r8
    35e8:	a3 2c       	mov	r10, r3
    35ea:	03 c0       	rjmp	.+6      	; 0x35f2 <vfprintf+0x2d6>
    35ec:	b8 2c       	mov	r11, r8
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <vfprintf+0x2d6>
    35f0:	b9 2c       	mov	r11, r9
    35f2:	a4 fe       	sbrs	r10, 4
    35f4:	0f c0       	rjmp	.+30     	; 0x3614 <vfprintf+0x2f8>
    35f6:	fe 01       	movw	r30, r28
    35f8:	e8 0d       	add	r30, r8
    35fa:	f1 1d       	adc	r31, r1
    35fc:	80 81       	ld	r24, Z
    35fe:	80 33       	cpi	r24, 0x30	; 48
    3600:	21 f4       	brne	.+8      	; 0x360a <vfprintf+0x2ee>
    3602:	9a 2d       	mov	r25, r10
    3604:	99 7e       	andi	r25, 0xE9	; 233
    3606:	a9 2e       	mov	r10, r25
    3608:	09 c0       	rjmp	.+18     	; 0x361c <vfprintf+0x300>
    360a:	a2 fe       	sbrs	r10, 2
    360c:	06 c0       	rjmp	.+12     	; 0x361a <vfprintf+0x2fe>
    360e:	b3 94       	inc	r11
    3610:	b3 94       	inc	r11
    3612:	04 c0       	rjmp	.+8      	; 0x361c <vfprintf+0x300>
    3614:	8a 2d       	mov	r24, r10
    3616:	86 78       	andi	r24, 0x86	; 134
    3618:	09 f0       	breq	.+2      	; 0x361c <vfprintf+0x300>
    361a:	b3 94       	inc	r11
    361c:	a3 fc       	sbrc	r10, 3
    361e:	11 c0       	rjmp	.+34     	; 0x3642 <vfprintf+0x326>
    3620:	a0 fe       	sbrs	r10, 0
    3622:	06 c0       	rjmp	.+12     	; 0x3630 <vfprintf+0x314>
    3624:	b2 14       	cp	r11, r2
    3626:	88 f4       	brcc	.+34     	; 0x364a <vfprintf+0x32e>
    3628:	28 0c       	add	r2, r8
    362a:	92 2c       	mov	r9, r2
    362c:	9b 18       	sub	r9, r11
    362e:	0e c0       	rjmp	.+28     	; 0x364c <vfprintf+0x330>
    3630:	b2 14       	cp	r11, r2
    3632:	60 f4       	brcc	.+24     	; 0x364c <vfprintf+0x330>
    3634:	b6 01       	movw	r22, r12
    3636:	80 e2       	ldi	r24, 0x20	; 32
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 85 1b 	call	0x370a	; 0x370a <fputc>
    363e:	b3 94       	inc	r11
    3640:	f7 cf       	rjmp	.-18     	; 0x3630 <vfprintf+0x314>
    3642:	b2 14       	cp	r11, r2
    3644:	18 f4       	brcc	.+6      	; 0x364c <vfprintf+0x330>
    3646:	2b 18       	sub	r2, r11
    3648:	02 c0       	rjmp	.+4      	; 0x364e <vfprintf+0x332>
    364a:	98 2c       	mov	r9, r8
    364c:	21 2c       	mov	r2, r1
    364e:	a4 fe       	sbrs	r10, 4
    3650:	10 c0       	rjmp	.+32     	; 0x3672 <vfprintf+0x356>
    3652:	b6 01       	movw	r22, r12
    3654:	80 e3       	ldi	r24, 0x30	; 48
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	0e 94 85 1b 	call	0x370a	; 0x370a <fputc>
    365c:	a2 fe       	sbrs	r10, 2
    365e:	17 c0       	rjmp	.+46     	; 0x368e <vfprintf+0x372>
    3660:	a1 fc       	sbrc	r10, 1
    3662:	03 c0       	rjmp	.+6      	; 0x366a <vfprintf+0x34e>
    3664:	88 e7       	ldi	r24, 0x78	; 120
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	02 c0       	rjmp	.+4      	; 0x366e <vfprintf+0x352>
    366a:	88 e5       	ldi	r24, 0x58	; 88
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	b6 01       	movw	r22, r12
    3670:	0c c0       	rjmp	.+24     	; 0x368a <vfprintf+0x36e>
    3672:	8a 2d       	mov	r24, r10
    3674:	86 78       	andi	r24, 0x86	; 134
    3676:	59 f0       	breq	.+22     	; 0x368e <vfprintf+0x372>
    3678:	a1 fe       	sbrs	r10, 1
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <vfprintf+0x364>
    367c:	8b e2       	ldi	r24, 0x2B	; 43
    367e:	01 c0       	rjmp	.+2      	; 0x3682 <vfprintf+0x366>
    3680:	80 e2       	ldi	r24, 0x20	; 32
    3682:	a7 fc       	sbrc	r10, 7
    3684:	8d e2       	ldi	r24, 0x2D	; 45
    3686:	b6 01       	movw	r22, r12
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 85 1b 	call	0x370a	; 0x370a <fputc>
    368e:	89 14       	cp	r8, r9
    3690:	38 f4       	brcc	.+14     	; 0x36a0 <vfprintf+0x384>
    3692:	b6 01       	movw	r22, r12
    3694:	80 e3       	ldi	r24, 0x30	; 48
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0e 94 85 1b 	call	0x370a	; 0x370a <fputc>
    369c:	9a 94       	dec	r9
    369e:	f7 cf       	rjmp	.-18     	; 0x368e <vfprintf+0x372>
    36a0:	8a 94       	dec	r8
    36a2:	f3 01       	movw	r30, r6
    36a4:	e8 0d       	add	r30, r8
    36a6:	f1 1d       	adc	r31, r1
    36a8:	80 81       	ld	r24, Z
    36aa:	b6 01       	movw	r22, r12
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	0e 94 85 1b 	call	0x370a	; 0x370a <fputc>
    36b2:	81 10       	cpse	r8, r1
    36b4:	f5 cf       	rjmp	.-22     	; 0x36a0 <vfprintf+0x384>
    36b6:	22 20       	and	r2, r2
    36b8:	09 f4       	brne	.+2      	; 0x36bc <vfprintf+0x3a0>
    36ba:	42 ce       	rjmp	.-892    	; 0x3340 <vfprintf+0x24>
    36bc:	b6 01       	movw	r22, r12
    36be:	80 e2       	ldi	r24, 0x20	; 32
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	0e 94 85 1b 	call	0x370a	; 0x370a <fputc>
    36c6:	2a 94       	dec	r2
    36c8:	f6 cf       	rjmp	.-20     	; 0x36b6 <vfprintf+0x39a>
    36ca:	f6 01       	movw	r30, r12
    36cc:	86 81       	ldd	r24, Z+6	; 0x06
    36ce:	97 81       	ldd	r25, Z+7	; 0x07
    36d0:	02 c0       	rjmp	.+4      	; 0x36d6 <vfprintf+0x3ba>
    36d2:	8f ef       	ldi	r24, 0xFF	; 255
    36d4:	9f ef       	ldi	r25, 0xFF	; 255
    36d6:	2b 96       	adiw	r28, 0x0b	; 11
    36d8:	e2 e1       	ldi	r30, 0x12	; 18
    36da:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__epilogue_restores__>

000036de <strnlen_P>:
    36de:	fc 01       	movw	r30, r24
    36e0:	05 90       	lpm	r0, Z+
    36e2:	61 50       	subi	r22, 0x01	; 1
    36e4:	70 40       	sbci	r23, 0x00	; 0
    36e6:	01 10       	cpse	r0, r1
    36e8:	d8 f7       	brcc	.-10     	; 0x36e0 <strnlen_P+0x2>
    36ea:	80 95       	com	r24
    36ec:	90 95       	com	r25
    36ee:	8e 0f       	add	r24, r30
    36f0:	9f 1f       	adc	r25, r31
    36f2:	08 95       	ret

000036f4 <strnlen>:
    36f4:	fc 01       	movw	r30, r24
    36f6:	61 50       	subi	r22, 0x01	; 1
    36f8:	70 40       	sbci	r23, 0x00	; 0
    36fa:	01 90       	ld	r0, Z+
    36fc:	01 10       	cpse	r0, r1
    36fe:	d8 f7       	brcc	.-10     	; 0x36f6 <strnlen+0x2>
    3700:	80 95       	com	r24
    3702:	90 95       	com	r25
    3704:	8e 0f       	add	r24, r30
    3706:	9f 1f       	adc	r25, r31
    3708:	08 95       	ret

0000370a <fputc>:
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	cf 93       	push	r28
    3710:	df 93       	push	r29
    3712:	fb 01       	movw	r30, r22
    3714:	23 81       	ldd	r18, Z+3	; 0x03
    3716:	21 fd       	sbrc	r18, 1
    3718:	03 c0       	rjmp	.+6      	; 0x3720 <fputc+0x16>
    371a:	8f ef       	ldi	r24, 0xFF	; 255
    371c:	9f ef       	ldi	r25, 0xFF	; 255
    371e:	2c c0       	rjmp	.+88     	; 0x3778 <fputc+0x6e>
    3720:	22 ff       	sbrs	r18, 2
    3722:	16 c0       	rjmp	.+44     	; 0x3750 <fputc+0x46>
    3724:	46 81       	ldd	r20, Z+6	; 0x06
    3726:	57 81       	ldd	r21, Z+7	; 0x07
    3728:	24 81       	ldd	r18, Z+4	; 0x04
    372a:	35 81       	ldd	r19, Z+5	; 0x05
    372c:	42 17       	cp	r20, r18
    372e:	53 07       	cpc	r21, r19
    3730:	44 f4       	brge	.+16     	; 0x3742 <fputc+0x38>
    3732:	a0 81       	ld	r26, Z
    3734:	b1 81       	ldd	r27, Z+1	; 0x01
    3736:	9d 01       	movw	r18, r26
    3738:	2f 5f       	subi	r18, 0xFF	; 255
    373a:	3f 4f       	sbci	r19, 0xFF	; 255
    373c:	31 83       	std	Z+1, r19	; 0x01
    373e:	20 83       	st	Z, r18
    3740:	8c 93       	st	X, r24
    3742:	26 81       	ldd	r18, Z+6	; 0x06
    3744:	37 81       	ldd	r19, Z+7	; 0x07
    3746:	2f 5f       	subi	r18, 0xFF	; 255
    3748:	3f 4f       	sbci	r19, 0xFF	; 255
    374a:	37 83       	std	Z+7, r19	; 0x07
    374c:	26 83       	std	Z+6, r18	; 0x06
    374e:	14 c0       	rjmp	.+40     	; 0x3778 <fputc+0x6e>
    3750:	8b 01       	movw	r16, r22
    3752:	ec 01       	movw	r28, r24
    3754:	fb 01       	movw	r30, r22
    3756:	00 84       	ldd	r0, Z+8	; 0x08
    3758:	f1 85       	ldd	r31, Z+9	; 0x09
    375a:	e0 2d       	mov	r30, r0
    375c:	09 95       	icall
    375e:	89 2b       	or	r24, r25
    3760:	e1 f6       	brne	.-72     	; 0x371a <fputc+0x10>
    3762:	d8 01       	movw	r26, r16
    3764:	16 96       	adiw	r26, 0x06	; 6
    3766:	8d 91       	ld	r24, X+
    3768:	9c 91       	ld	r25, X
    376a:	17 97       	sbiw	r26, 0x07	; 7
    376c:	01 96       	adiw	r24, 0x01	; 1
    376e:	17 96       	adiw	r26, 0x07	; 7
    3770:	9c 93       	st	X, r25
    3772:	8e 93       	st	-X, r24
    3774:	16 97       	sbiw	r26, 0x06	; 6
    3776:	ce 01       	movw	r24, r28
    3778:	df 91       	pop	r29
    377a:	cf 91       	pop	r28
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
    3780:	08 95       	ret

00003782 <__ultoa_invert>:
    3782:	fa 01       	movw	r30, r20
    3784:	aa 27       	eor	r26, r26
    3786:	28 30       	cpi	r18, 0x08	; 8
    3788:	51 f1       	breq	.+84     	; 0x37de <__ultoa_invert+0x5c>
    378a:	20 31       	cpi	r18, 0x10	; 16
    378c:	81 f1       	breq	.+96     	; 0x37ee <__ultoa_invert+0x6c>
    378e:	e8 94       	clt
    3790:	6f 93       	push	r22
    3792:	6e 7f       	andi	r22, 0xFE	; 254
    3794:	6e 5f       	subi	r22, 0xFE	; 254
    3796:	7f 4f       	sbci	r23, 0xFF	; 255
    3798:	8f 4f       	sbci	r24, 0xFF	; 255
    379a:	9f 4f       	sbci	r25, 0xFF	; 255
    379c:	af 4f       	sbci	r26, 0xFF	; 255
    379e:	b1 e0       	ldi	r27, 0x01	; 1
    37a0:	3e d0       	rcall	.+124    	; 0x381e <__ultoa_invert+0x9c>
    37a2:	b4 e0       	ldi	r27, 0x04	; 4
    37a4:	3c d0       	rcall	.+120    	; 0x381e <__ultoa_invert+0x9c>
    37a6:	67 0f       	add	r22, r23
    37a8:	78 1f       	adc	r23, r24
    37aa:	89 1f       	adc	r24, r25
    37ac:	9a 1f       	adc	r25, r26
    37ae:	a1 1d       	adc	r26, r1
    37b0:	68 0f       	add	r22, r24
    37b2:	79 1f       	adc	r23, r25
    37b4:	8a 1f       	adc	r24, r26
    37b6:	91 1d       	adc	r25, r1
    37b8:	a1 1d       	adc	r26, r1
    37ba:	6a 0f       	add	r22, r26
    37bc:	71 1d       	adc	r23, r1
    37be:	81 1d       	adc	r24, r1
    37c0:	91 1d       	adc	r25, r1
    37c2:	a1 1d       	adc	r26, r1
    37c4:	20 d0       	rcall	.+64     	; 0x3806 <__ultoa_invert+0x84>
    37c6:	09 f4       	brne	.+2      	; 0x37ca <__ultoa_invert+0x48>
    37c8:	68 94       	set
    37ca:	3f 91       	pop	r19
    37cc:	2a e0       	ldi	r18, 0x0A	; 10
    37ce:	26 9f       	mul	r18, r22
    37d0:	11 24       	eor	r1, r1
    37d2:	30 19       	sub	r19, r0
    37d4:	30 5d       	subi	r19, 0xD0	; 208
    37d6:	31 93       	st	Z+, r19
    37d8:	de f6       	brtc	.-74     	; 0x3790 <__ultoa_invert+0xe>
    37da:	cf 01       	movw	r24, r30
    37dc:	08 95       	ret
    37de:	46 2f       	mov	r20, r22
    37e0:	47 70       	andi	r20, 0x07	; 7
    37e2:	40 5d       	subi	r20, 0xD0	; 208
    37e4:	41 93       	st	Z+, r20
    37e6:	b3 e0       	ldi	r27, 0x03	; 3
    37e8:	0f d0       	rcall	.+30     	; 0x3808 <__ultoa_invert+0x86>
    37ea:	c9 f7       	brne	.-14     	; 0x37de <__ultoa_invert+0x5c>
    37ec:	f6 cf       	rjmp	.-20     	; 0x37da <__ultoa_invert+0x58>
    37ee:	46 2f       	mov	r20, r22
    37f0:	4f 70       	andi	r20, 0x0F	; 15
    37f2:	40 5d       	subi	r20, 0xD0	; 208
    37f4:	4a 33       	cpi	r20, 0x3A	; 58
    37f6:	18 f0       	brcs	.+6      	; 0x37fe <__ultoa_invert+0x7c>
    37f8:	49 5d       	subi	r20, 0xD9	; 217
    37fa:	31 fd       	sbrc	r19, 1
    37fc:	40 52       	subi	r20, 0x20	; 32
    37fe:	41 93       	st	Z+, r20
    3800:	02 d0       	rcall	.+4      	; 0x3806 <__ultoa_invert+0x84>
    3802:	a9 f7       	brne	.-22     	; 0x37ee <__ultoa_invert+0x6c>
    3804:	ea cf       	rjmp	.-44     	; 0x37da <__ultoa_invert+0x58>
    3806:	b4 e0       	ldi	r27, 0x04	; 4
    3808:	a6 95       	lsr	r26
    380a:	97 95       	ror	r25
    380c:	87 95       	ror	r24
    380e:	77 95       	ror	r23
    3810:	67 95       	ror	r22
    3812:	ba 95       	dec	r27
    3814:	c9 f7       	brne	.-14     	; 0x3808 <__ultoa_invert+0x86>
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	61 05       	cpc	r22, r1
    381a:	71 05       	cpc	r23, r1
    381c:	08 95       	ret
    381e:	9b 01       	movw	r18, r22
    3820:	ac 01       	movw	r20, r24
    3822:	0a 2e       	mov	r0, r26
    3824:	06 94       	lsr	r0
    3826:	57 95       	ror	r21
    3828:	47 95       	ror	r20
    382a:	37 95       	ror	r19
    382c:	27 95       	ror	r18
    382e:	ba 95       	dec	r27
    3830:	c9 f7       	brne	.-14     	; 0x3824 <__ultoa_invert+0xa2>
    3832:	62 0f       	add	r22, r18
    3834:	73 1f       	adc	r23, r19
    3836:	84 1f       	adc	r24, r20
    3838:	95 1f       	adc	r25, r21
    383a:	a0 1d       	adc	r26, r0
    383c:	08 95       	ret

0000383e <__prologue_saves__>:
    383e:	2f 92       	push	r2
    3840:	3f 92       	push	r3
    3842:	4f 92       	push	r4
    3844:	5f 92       	push	r5
    3846:	6f 92       	push	r6
    3848:	7f 92       	push	r7
    384a:	8f 92       	push	r8
    384c:	9f 92       	push	r9
    384e:	af 92       	push	r10
    3850:	bf 92       	push	r11
    3852:	cf 92       	push	r12
    3854:	df 92       	push	r13
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	ca 1b       	sub	r28, r26
    3868:	db 0b       	sbc	r29, r27
    386a:	0f b6       	in	r0, 0x3f	; 63
    386c:	f8 94       	cli
    386e:	de bf       	out	0x3e, r29	; 62
    3870:	0f be       	out	0x3f, r0	; 63
    3872:	cd bf       	out	0x3d, r28	; 61
    3874:	09 94       	ijmp

00003876 <__epilogue_restores__>:
    3876:	2a 88       	ldd	r2, Y+18	; 0x12
    3878:	39 88       	ldd	r3, Y+17	; 0x11
    387a:	48 88       	ldd	r4, Y+16	; 0x10
    387c:	5f 84       	ldd	r5, Y+15	; 0x0f
    387e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3880:	7d 84       	ldd	r7, Y+13	; 0x0d
    3882:	8c 84       	ldd	r8, Y+12	; 0x0c
    3884:	9b 84       	ldd	r9, Y+11	; 0x0b
    3886:	aa 84       	ldd	r10, Y+10	; 0x0a
    3888:	b9 84       	ldd	r11, Y+9	; 0x09
    388a:	c8 84       	ldd	r12, Y+8	; 0x08
    388c:	df 80       	ldd	r13, Y+7	; 0x07
    388e:	ee 80       	ldd	r14, Y+6	; 0x06
    3890:	fd 80       	ldd	r15, Y+5	; 0x05
    3892:	0c 81       	ldd	r16, Y+4	; 0x04
    3894:	1b 81       	ldd	r17, Y+3	; 0x03
    3896:	aa 81       	ldd	r26, Y+2	; 0x02
    3898:	b9 81       	ldd	r27, Y+1	; 0x01
    389a:	ce 0f       	add	r28, r30
    389c:	d1 1d       	adc	r29, r1
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	ed 01       	movw	r28, r26
    38aa:	08 95       	ret

000038ac <_exit>:
    38ac:	f8 94       	cli

000038ae <__stop_program>:
    38ae:	ff cf       	rjmp	.-2      	; 0x38ae <__stop_program>
