
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  00004b72  00004c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000087  008000e4  008000e4  00004c8a  2**0
                  ALLOC
  3 .stab         00009174  00000000  00000000  00004c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000056c5  00000000  00000000  0000de00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000134c5  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000134d8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00013514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  000139fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00013e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00013eb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__vector_1>
       8:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__vector_2>
       c:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__vector_10>
      2c:	0c 94 ed 06 	jmp	0xdda	; 0xdda <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 ee       	ldi	r26, 0xE4	; 228
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 36       	cpi	r26, 0x6B	; 107
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 19 	call	0x325c	; 0x325c <main>
      8a:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Convert_IntToString>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	6a 83       	std	Y+2, r22	; 0x02
      a8:	7b 83       	std	Y+3, r23	; 0x03
      aa:	8c 83       	std	Y+4, r24	; 0x04
      ac:	9d 83       	std	Y+5, r25	; 0x05
      ae:	5f 83       	std	Y+7, r21	; 0x07
      b0:	4e 83       	std	Y+6, r20	; 0x06
      b2:	19 82       	std	Y+1, r1	; 0x01
      b4:	8e 81       	ldd	r24, Y+6	; 0x06
      b6:	9f 81       	ldd	r25, Y+7	; 0x07
      b8:	89 2b       	or	r24, r25
      ba:	19 f4       	brne	.+6      	; 0xc2 <Convert_IntToString+0x30>
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	1d c0       	rjmp	.+58     	; 0xfc <Convert_IntToString+0x6a>
      c2:	8d 81       	ldd	r24, Y+5	; 0x05
      c4:	8f 93       	push	r24
      c6:	8c 81       	ldd	r24, Y+4	; 0x04
      c8:	8f 93       	push	r24
      ca:	8b 81       	ldd	r24, Y+3	; 0x03
      cc:	8f 93       	push	r24
      ce:	8a 81       	ldd	r24, Y+2	; 0x02
      d0:	8f 93       	push	r24
      d2:	8c ea       	ldi	r24, 0xAC	; 172
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	89 2f       	mov	r24, r25
      d8:	8f 93       	push	r24
      da:	8c ea       	ldi	r24, 0xAC	; 172
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	8f 93       	push	r24
      e0:	8f 81       	ldd	r24, Y+7	; 0x07
      e2:	8f 93       	push	r24
      e4:	8e 81       	ldd	r24, Y+6	; 0x06
      e6:	8f 93       	push	r24
      e8:	0e 94 cd 22 	call	0x459a	; 0x459a <sprintf>
      ec:	8d b7       	in	r24, 0x3d	; 61
      ee:	9e b7       	in	r25, 0x3e	; 62
      f0:	08 96       	adiw	r24, 0x08	; 8
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	f8 94       	cli
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	27 96       	adiw	r28, 0x07	; 7
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f64 Copy_f64Number, pu8 Address_str){
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	65 97       	sbiw	r28, 0x15	; 21
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	68 8b       	std	Y+16, r22	; 0x10
     126:	79 8b       	std	Y+17, r23	; 0x11
     128:	8a 8b       	std	Y+18, r24	; 0x12
     12a:	9b 8b       	std	Y+19, r25	; 0x13
     12c:	5d 8b       	std	Y+21, r21	; 0x15
     12e:	4c 8b       	std	Y+20, r20	; 0x14

	//-5.99

	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     130:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8TempSign[2]="";
     132:	1f 86       	std	Y+15, r1	; 0x0f
     134:	1e 86       	std	Y+14, r1	; 0x0e
	s32  Loc_s64IntPart;
	f32 Loc_f32FractionPart;
	s32  Loc_s64FractionPartAsInteger;


		if(NULL == Address_str){
     136:	8c 89       	ldd	r24, Y+20	; 0x14
     138:	9d 89       	ldd	r25, Y+21	; 0x15
     13a:	89 2b       	or	r24, r25
     13c:	19 f4       	brne	.+6      	; 0x144 <Convert_FloatToString+0x34>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	78 c0       	rjmp	.+240    	; 0x234 <Convert_FloatToString+0x124>
		}

		else{

			if(Copy_f64Number<0){
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	a9 01       	movw	r20, r18
     14a:	68 89       	ldd	r22, Y+16	; 0x10
     14c:	79 89       	ldd	r23, Y+17	; 0x11
     14e:	8a 89       	ldd	r24, Y+18	; 0x12
     150:	9b 89       	ldd	r25, Y+19	; 0x13
     152:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
     156:	88 23       	and	r24, r24
     158:	5c f4       	brge	.+22     	; 0x170 <Convert_FloatToString+0x60>
				Copy_f64Number = -Copy_f64Number ;
     15a:	88 89       	ldd	r24, Y+16	; 0x10
     15c:	99 89       	ldd	r25, Y+17	; 0x11
     15e:	aa 89       	ldd	r26, Y+18	; 0x12
     160:	bb 89       	ldd	r27, Y+19	; 0x13
     162:	b0 58       	subi	r27, 0x80	; 128
     164:	88 8b       	std	Y+16, r24	; 0x10
     166:	99 8b       	std	Y+17, r25	; 0x11
     168:	aa 8b       	std	Y+18, r26	; 0x12
     16a:	bb 8b       	std	Y+19, r27	; 0x13
				Loc_u8TempSign[0] ='-';
     16c:	8d e2       	ldi	r24, 0x2D	; 45
     16e:	8e 87       	std	Y+14, r24	; 0x0e
			}


			Loc_s64IntPart = Copy_f64Number;                  // Get the integer (5).
     170:	68 89       	ldd	r22, Y+16	; 0x10
     172:	79 89       	ldd	r23, Y+17	; 0x11
     174:	8a 89       	ldd	r24, Y+18	; 0x12
     176:	9b 89       	ldd	r25, Y+19	; 0x13
     178:	0e 94 73 21 	call	0x42e6	; 0x42e6 <__fixsfsi>
     17c:	dc 01       	movw	r26, r24
     17e:	cb 01       	movw	r24, r22
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	9b 83       	std	Y+3, r25	; 0x03
     184:	ac 83       	std	Y+4, r26	; 0x04
     186:	bd 83       	std	Y+5, r27	; 0x05
			Loc_f32FractionPart = Copy_f64Number - Loc_s64IntPart;      // Get fraction (.99).
     188:	6a 81       	ldd	r22, Y+2	; 0x02
     18a:	7b 81       	ldd	r23, Y+3	; 0x03
     18c:	8c 81       	ldd	r24, Y+4	; 0x04
     18e:	9d 81       	ldd	r25, Y+5	; 0x05
     190:	0e 94 ab 21 	call	0x4356	; 0x4356 <__floatsisf>
     194:	dc 01       	movw	r26, r24
     196:	cb 01       	movw	r24, r22
     198:	9c 01       	movw	r18, r24
     19a:	ad 01       	movw	r20, r26
     19c:	68 89       	ldd	r22, Y+16	; 0x10
     19e:	79 89       	ldd	r23, Y+17	; 0x11
     1a0:	8a 89       	ldd	r24, Y+18	; 0x12
     1a2:	9b 89       	ldd	r25, Y+19	; 0x13
     1a4:	0e 94 8f 20 	call	0x411e	; 0x411e <__subsf3>
     1a8:	dc 01       	movw	r26, r24
     1aa:	cb 01       	movw	r24, r22
     1ac:	8e 83       	std	Y+6, r24	; 0x06
     1ae:	9f 83       	std	Y+7, r25	; 0x07
     1b0:	a8 87       	std	Y+8, r26	; 0x08
     1b2:	b9 87       	std	Y+9, r27	; 0x09
			 Loc_s64FractionPartAsInteger = (Loc_f32FractionPart * 10000);  // Turn into integer (9900).
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e4       	ldi	r19, 0x40	; 64
     1b8:	4c e1       	ldi	r20, 0x1C	; 28
     1ba:	56 e4       	ldi	r21, 0x46	; 70
     1bc:	6e 81       	ldd	r22, Y+6	; 0x06
     1be:	7f 81       	ldd	r23, Y+7	; 0x07
     1c0:	88 85       	ldd	r24, Y+8	; 0x08
     1c2:	99 85       	ldd	r25, Y+9	; 0x09
     1c4:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
     1c8:	dc 01       	movw	r26, r24
     1ca:	cb 01       	movw	r24, r22
     1cc:	bc 01       	movw	r22, r24
     1ce:	cd 01       	movw	r24, r26
     1d0:	0e 94 73 21 	call	0x42e6	; 0x42e6 <__fixsfsi>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
     1d8:	8a 87       	std	Y+10, r24	; 0x0a
     1da:	9b 87       	std	Y+11, r25	; 0x0b
     1dc:	ac 87       	std	Y+12, r26	; 0x0c
     1de:	bd 87       	std	Y+13, r27	; 0x0d

			// Print as parts, note that you need 0-padding for fractional bit.

			sprintf (Address_str, "%s%ld.%04d", Loc_u8TempSign, Loc_s64IntPart, Loc_s64FractionPartAsInteger);
     1e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     1e2:	8f 93       	push	r24
     1e4:	8c 85       	ldd	r24, Y+12	; 0x0c
     1e6:	8f 93       	push	r24
     1e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ea:	8f 93       	push	r24
     1ec:	8a 85       	ldd	r24, Y+10	; 0x0a
     1ee:	8f 93       	push	r24
     1f0:	8d 81       	ldd	r24, Y+5	; 0x05
     1f2:	8f 93       	push	r24
     1f4:	8c 81       	ldd	r24, Y+4	; 0x04
     1f6:	8f 93       	push	r24
     1f8:	8b 81       	ldd	r24, Y+3	; 0x03
     1fa:	8f 93       	push	r24
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	8f 93       	push	r24
     200:	ce 01       	movw	r24, r28
     202:	0e 96       	adiw	r24, 0x0e	; 14
     204:	29 2f       	mov	r18, r25
     206:	2f 93       	push	r18
     208:	8f 93       	push	r24
     20a:	80 eb       	ldi	r24, 0xB0	; 176
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	89 2f       	mov	r24, r25
     210:	8f 93       	push	r24
     212:	80 eb       	ldi	r24, 0xB0	; 176
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	8f 93       	push	r24
     218:	8d 89       	ldd	r24, Y+21	; 0x15
     21a:	8f 93       	push	r24
     21c:	8c 89       	ldd	r24, Y+20	; 0x14
     21e:	8f 93       	push	r24
     220:	0e 94 cd 22 	call	0x459a	; 0x459a <sprintf>
     224:	8d b7       	in	r24, 0x3d	; 61
     226:	9e b7       	in	r25, 0x3e	; 62
     228:	0e 96       	adiw	r24, 0x0e	; 14
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	de bf       	out	0x3e, r29	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	cd bf       	out	0x3d, r28	; 61



		}

		return Loc_enuStatus;
     234:	89 81       	ldd	r24, Y+1	; 0x01


}
     236:	65 96       	adiw	r28, 0x15	; 21
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	08 95       	ret

00000248 <Convert_StringTou8>:



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){
     248:	2f 92       	push	r2
     24a:	3f 92       	push	r3
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	6e 97       	sbiw	r28, 0x1e	; 30
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	9c 87       	std	Y+12, r25	; 0x0c
     27e:	8b 87       	std	Y+11, r24	; 0x0b
     280:	7e 87       	std	Y+14, r23	; 0x0e
     282:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     284:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     286:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     288:	1b 82       	std	Y+3, r1	; 0x03
     28a:	1c 82       	std	Y+4, r1	; 0x04
     28c:	1d 82       	std	Y+5, r1	; 0x05
     28e:	1e 82       	std	Y+6, r1	; 0x06
     290:	1f 82       	std	Y+7, r1	; 0x07
     292:	18 86       	std	Y+8, r1	; 0x08
     294:	19 86       	std	Y+9, r1	; 0x09
     296:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     298:	8d 85       	ldd	r24, Y+13	; 0x0d
     29a:	9e 85       	ldd	r25, Y+14	; 0x0e
     29c:	89 2b       	or	r24, r25
     29e:	21 f0       	breq	.+8      	; 0x2a8 <Convert_StringTou8+0x60>
     2a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a4:	89 2b       	or	r24, r25
     2a6:	19 f4       	brne	.+6      	; 0x2ae <Convert_StringTou8+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	89 83       	std	Y+1, r24	; 0x01
     2ac:	9f c0       	rjmp	.+318    	; 0x3ec <Convert_StringTou8+0x1a4>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     2ae:	1a 82       	std	Y+2, r1	; 0x02
     2b0:	8c c0       	rjmp	.+280    	; 0x3ca <Convert_StringTou8+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     2b2:	2b 81       	ldd	r18, Y+3	; 0x03
     2b4:	3c 81       	ldd	r19, Y+4	; 0x04
     2b6:	4d 81       	ldd	r20, Y+5	; 0x05
     2b8:	5e 81       	ldd	r21, Y+6	; 0x06
     2ba:	6f 81       	ldd	r22, Y+7	; 0x07
     2bc:	78 85       	ldd	r23, Y+8	; 0x08
     2be:	89 85       	ldd	r24, Y+9	; 0x09
     2c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     2c2:	22 2e       	mov	r2, r18
     2c4:	33 2e       	mov	r3, r19
     2c6:	44 2e       	mov	r4, r20
     2c8:	55 2e       	mov	r5, r21
     2ca:	66 2e       	mov	r6, r22
     2cc:	77 2e       	mov	r7, r23
     2ce:	88 2e       	mov	r8, r24
     2d0:	99 2e       	mov	r9, r25
     2d2:	22 2d       	mov	r18, r2
     2d4:	33 2d       	mov	r19, r3
     2d6:	44 2d       	mov	r20, r4
     2d8:	55 2d       	mov	r21, r5
     2da:	66 2d       	mov	r22, r6
     2dc:	77 2d       	mov	r23, r7
     2de:	88 2d       	mov	r24, r8
     2e0:	99 2d       	mov	r25, r9
     2e2:	01 e0       	ldi	r16, 0x01	; 1
     2e4:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ashldi3>
     2e8:	a2 2e       	mov	r10, r18
     2ea:	b3 2e       	mov	r11, r19
     2ec:	c4 2e       	mov	r12, r20
     2ee:	d5 2e       	mov	r13, r21
     2f0:	e6 2e       	mov	r14, r22
     2f2:	f7 2e       	mov	r15, r23
     2f4:	08 2f       	mov	r16, r24
     2f6:	19 2f       	mov	r17, r25
     2f8:	2a 2c       	mov	r2, r10
     2fa:	3b 2c       	mov	r3, r11
     2fc:	4c 2c       	mov	r4, r12
     2fe:	5d 2c       	mov	r5, r13
     300:	6e 2c       	mov	r6, r14
     302:	7f 2c       	mov	r7, r15
     304:	80 2e       	mov	r8, r16
     306:	91 2e       	mov	r9, r17
     308:	22 2d       	mov	r18, r2
     30a:	33 2d       	mov	r19, r3
     30c:	44 2d       	mov	r20, r4
     30e:	55 2d       	mov	r21, r5
     310:	66 2d       	mov	r22, r6
     312:	77 2d       	mov	r23, r7
     314:	88 2d       	mov	r24, r8
     316:	99 2d       	mov	r25, r9
     318:	02 e0       	ldi	r16, 0x02	; 2
     31a:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ashldi3>
     31e:	2f 8b       	std	Y+23, r18	; 0x17
     320:	38 8f       	std	Y+24, r19	; 0x18
     322:	49 8f       	std	Y+25, r20	; 0x19
     324:	5a 8f       	std	Y+26, r21	; 0x1a
     326:	6b 8f       	std	Y+27, r22	; 0x1b
     328:	7c 8f       	std	Y+28, r23	; 0x1c
     32a:	8d 8f       	std	Y+29, r24	; 0x1d
     32c:	9e 8f       	std	Y+30, r25	; 0x1e
     32e:	22 2d       	mov	r18, r2
     330:	33 2d       	mov	r19, r3
     332:	44 2d       	mov	r20, r4
     334:	55 2d       	mov	r21, r5
     336:	66 2d       	mov	r22, r6
     338:	77 2d       	mov	r23, r7
     33a:	88 2d       	mov	r24, r8
     33c:	99 2d       	mov	r25, r9
     33e:	af 88       	ldd	r10, Y+23	; 0x17
     340:	b8 8c       	ldd	r11, Y+24	; 0x18
     342:	c9 8c       	ldd	r12, Y+25	; 0x19
     344:	da 8c       	ldd	r13, Y+26	; 0x1a
     346:	eb 8c       	ldd	r14, Y+27	; 0x1b
     348:	fc 8c       	ldd	r15, Y+28	; 0x1c
     34a:	0d 8d       	ldd	r16, Y+29	; 0x1d
     34c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     34e:	0e 94 77 20 	call	0x40ee	; 0x40ee <__adddi3>
     352:	a2 2e       	mov	r10, r18
     354:	b3 2e       	mov	r11, r19
     356:	c4 2e       	mov	r12, r20
     358:	d5 2e       	mov	r13, r21
     35a:	e6 2e       	mov	r14, r22
     35c:	f7 2e       	mov	r15, r23
     35e:	08 2f       	mov	r16, r24
     360:	19 2f       	mov	r17, r25
     362:	8a 81       	ldd	r24, Y+2	; 0x02
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	2d 85       	ldd	r18, Y+13	; 0x0d
     36a:	3e 85       	ldd	r19, Y+14	; 0x0e
     36c:	82 0f       	add	r24, r18
     36e:	93 1f       	adc	r25, r19
     370:	fc 01       	movw	r30, r24
     372:	80 81       	ld	r24, Z
     374:	88 2f       	mov	r24, r24
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	c0 97       	sbiw	r24, 0x30	; 48
     37a:	98 8b       	std	Y+16, r25	; 0x10
     37c:	8f 87       	std	Y+15, r24	; 0x0f
     37e:	89 2f       	mov	r24, r25
     380:	88 0f       	add	r24, r24
     382:	88 0b       	sbc	r24, r24
     384:	89 8b       	std	Y+17, r24	; 0x11
     386:	8a 8b       	std	Y+18, r24	; 0x12
     388:	8b 8b       	std	Y+19, r24	; 0x13
     38a:	8c 8b       	std	Y+20, r24	; 0x14
     38c:	8d 8b       	std	Y+21, r24	; 0x15
     38e:	8e 8b       	std	Y+22, r24	; 0x16
     390:	2a 2d       	mov	r18, r10
     392:	3b 2d       	mov	r19, r11
     394:	4c 2d       	mov	r20, r12
     396:	5d 2d       	mov	r21, r13
     398:	6e 2d       	mov	r22, r14
     39a:	7f 2d       	mov	r23, r15
     39c:	80 2f       	mov	r24, r16
     39e:	91 2f       	mov	r25, r17
     3a0:	af 84       	ldd	r10, Y+15	; 0x0f
     3a2:	b8 88       	ldd	r11, Y+16	; 0x10
     3a4:	c9 88       	ldd	r12, Y+17	; 0x11
     3a6:	da 88       	ldd	r13, Y+18	; 0x12
     3a8:	eb 88       	ldd	r14, Y+19	; 0x13
     3aa:	fc 88       	ldd	r15, Y+20	; 0x14
     3ac:	0d 89       	ldd	r16, Y+21	; 0x15
     3ae:	1e 89       	ldd	r17, Y+22	; 0x16
     3b0:	0e 94 77 20 	call	0x40ee	; 0x40ee <__adddi3>
     3b4:	2b 83       	std	Y+3, r18	; 0x03
     3b6:	3c 83       	std	Y+4, r19	; 0x04
     3b8:	4d 83       	std	Y+5, r20	; 0x05
     3ba:	5e 83       	std	Y+6, r21	; 0x06
     3bc:	6f 83       	std	Y+7, r22	; 0x07
     3be:	78 87       	std	Y+8, r23	; 0x08
     3c0:	89 87       	std	Y+9, r24	; 0x09
     3c2:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
     3c8:	8a 83       	std	Y+2, r24	; 0x02
     3ca:	8a 81       	ldd	r24, Y+2	; 0x02
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	2d 85       	ldd	r18, Y+13	; 0x0d
     3d2:	3e 85       	ldd	r19, Y+14	; 0x0e
     3d4:	82 0f       	add	r24, r18
     3d6:	93 1f       	adc	r25, r19
     3d8:	fc 01       	movw	r30, r24
     3da:	80 81       	ld	r24, Z
     3dc:	88 23       	and	r24, r24
     3de:	09 f0       	breq	.+2      	; 0x3e2 <Convert_StringTou8+0x19a>
     3e0:	68 cf       	rjmp	.-304    	; 0x2b2 <Convert_StringTou8+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     3e2:	2b 81       	ldd	r18, Y+3	; 0x03
     3e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     3e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     3ec:	89 81       	ldd	r24, Y+1	; 0x01

}
     3ee:	6e 96       	adiw	r28, 0x1e	; 30
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	0f 91       	pop	r16
     402:	ff 90       	pop	r15
     404:	ef 90       	pop	r14
     406:	df 90       	pop	r13
     408:	cf 90       	pop	r12
     40a:	bf 90       	pop	r11
     40c:	af 90       	pop	r10
     40e:	9f 90       	pop	r9
     410:	8f 90       	pop	r8
     412:	7f 90       	pop	r7
     414:	6f 90       	pop	r6
     416:	5f 90       	pop	r5
     418:	4f 90       	pop	r4
     41a:	3f 90       	pop	r3
     41c:	2f 90       	pop	r2
     41e:	08 95       	ret

00000420 <Convert_StringTou16>:


Std_StatusType Convert_StringTou16 (u16* Address_Number, pu8 Address_str){
     420:	2f 92       	push	r2
     422:	3f 92       	push	r3
     424:	4f 92       	push	r4
     426:	5f 92       	push	r5
     428:	6f 92       	push	r6
     42a:	7f 92       	push	r7
     42c:	8f 92       	push	r8
     42e:	9f 92       	push	r9
     430:	af 92       	push	r10
     432:	bf 92       	push	r11
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	6e 97       	sbiw	r28, 0x1e	; 30
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	9c 87       	std	Y+12, r25	; 0x0c
     456:	8b 87       	std	Y+11, r24	; 0x0b
     458:	7e 87       	std	Y+14, r23	; 0x0e
     45a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     45c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     45e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     460:	1b 82       	std	Y+3, r1	; 0x03
     462:	1c 82       	std	Y+4, r1	; 0x04
     464:	1d 82       	std	Y+5, r1	; 0x05
     466:	1e 82       	std	Y+6, r1	; 0x06
     468:	1f 82       	std	Y+7, r1	; 0x07
     46a:	18 86       	std	Y+8, r1	; 0x08
     46c:	19 86       	std	Y+9, r1	; 0x09
     46e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     470:	8d 85       	ldd	r24, Y+13	; 0x0d
     472:	9e 85       	ldd	r25, Y+14	; 0x0e
     474:	89 2b       	or	r24, r25
     476:	21 f0       	breq	.+8      	; 0x480 <Convert_StringTou16+0x60>
     478:	8b 85       	ldd	r24, Y+11	; 0x0b
     47a:	9c 85       	ldd	r25, Y+12	; 0x0c
     47c:	89 2b       	or	r24, r25
     47e:	19 f4       	brne	.+6      	; 0x486 <Convert_StringTou16+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	89 83       	std	Y+1, r24	; 0x01
     484:	a1 c0       	rjmp	.+322    	; 0x5c8 <Convert_StringTou16+0x1a8>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     486:	1a 82       	std	Y+2, r1	; 0x02
     488:	8c c0       	rjmp	.+280    	; 0x5a2 <Convert_StringTou16+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     48a:	2b 81       	ldd	r18, Y+3	; 0x03
     48c:	3c 81       	ldd	r19, Y+4	; 0x04
     48e:	4d 81       	ldd	r20, Y+5	; 0x05
     490:	5e 81       	ldd	r21, Y+6	; 0x06
     492:	6f 81       	ldd	r22, Y+7	; 0x07
     494:	78 85       	ldd	r23, Y+8	; 0x08
     496:	89 85       	ldd	r24, Y+9	; 0x09
     498:	9a 85       	ldd	r25, Y+10	; 0x0a
     49a:	22 2e       	mov	r2, r18
     49c:	33 2e       	mov	r3, r19
     49e:	44 2e       	mov	r4, r20
     4a0:	55 2e       	mov	r5, r21
     4a2:	66 2e       	mov	r6, r22
     4a4:	77 2e       	mov	r7, r23
     4a6:	88 2e       	mov	r8, r24
     4a8:	99 2e       	mov	r9, r25
     4aa:	22 2d       	mov	r18, r2
     4ac:	33 2d       	mov	r19, r3
     4ae:	44 2d       	mov	r20, r4
     4b0:	55 2d       	mov	r21, r5
     4b2:	66 2d       	mov	r22, r6
     4b4:	77 2d       	mov	r23, r7
     4b6:	88 2d       	mov	r24, r8
     4b8:	99 2d       	mov	r25, r9
     4ba:	01 e0       	ldi	r16, 0x01	; 1
     4bc:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ashldi3>
     4c0:	a2 2e       	mov	r10, r18
     4c2:	b3 2e       	mov	r11, r19
     4c4:	c4 2e       	mov	r12, r20
     4c6:	d5 2e       	mov	r13, r21
     4c8:	e6 2e       	mov	r14, r22
     4ca:	f7 2e       	mov	r15, r23
     4cc:	08 2f       	mov	r16, r24
     4ce:	19 2f       	mov	r17, r25
     4d0:	2a 2c       	mov	r2, r10
     4d2:	3b 2c       	mov	r3, r11
     4d4:	4c 2c       	mov	r4, r12
     4d6:	5d 2c       	mov	r5, r13
     4d8:	6e 2c       	mov	r6, r14
     4da:	7f 2c       	mov	r7, r15
     4dc:	80 2e       	mov	r8, r16
     4de:	91 2e       	mov	r9, r17
     4e0:	22 2d       	mov	r18, r2
     4e2:	33 2d       	mov	r19, r3
     4e4:	44 2d       	mov	r20, r4
     4e6:	55 2d       	mov	r21, r5
     4e8:	66 2d       	mov	r22, r6
     4ea:	77 2d       	mov	r23, r7
     4ec:	88 2d       	mov	r24, r8
     4ee:	99 2d       	mov	r25, r9
     4f0:	02 e0       	ldi	r16, 0x02	; 2
     4f2:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ashldi3>
     4f6:	2f 8b       	std	Y+23, r18	; 0x17
     4f8:	38 8f       	std	Y+24, r19	; 0x18
     4fa:	49 8f       	std	Y+25, r20	; 0x19
     4fc:	5a 8f       	std	Y+26, r21	; 0x1a
     4fe:	6b 8f       	std	Y+27, r22	; 0x1b
     500:	7c 8f       	std	Y+28, r23	; 0x1c
     502:	8d 8f       	std	Y+29, r24	; 0x1d
     504:	9e 8f       	std	Y+30, r25	; 0x1e
     506:	22 2d       	mov	r18, r2
     508:	33 2d       	mov	r19, r3
     50a:	44 2d       	mov	r20, r4
     50c:	55 2d       	mov	r21, r5
     50e:	66 2d       	mov	r22, r6
     510:	77 2d       	mov	r23, r7
     512:	88 2d       	mov	r24, r8
     514:	99 2d       	mov	r25, r9
     516:	af 88       	ldd	r10, Y+23	; 0x17
     518:	b8 8c       	ldd	r11, Y+24	; 0x18
     51a:	c9 8c       	ldd	r12, Y+25	; 0x19
     51c:	da 8c       	ldd	r13, Y+26	; 0x1a
     51e:	eb 8c       	ldd	r14, Y+27	; 0x1b
     520:	fc 8c       	ldd	r15, Y+28	; 0x1c
     522:	0d 8d       	ldd	r16, Y+29	; 0x1d
     524:	1e 8d       	ldd	r17, Y+30	; 0x1e
     526:	0e 94 77 20 	call	0x40ee	; 0x40ee <__adddi3>
     52a:	a2 2e       	mov	r10, r18
     52c:	b3 2e       	mov	r11, r19
     52e:	c4 2e       	mov	r12, r20
     530:	d5 2e       	mov	r13, r21
     532:	e6 2e       	mov	r14, r22
     534:	f7 2e       	mov	r15, r23
     536:	08 2f       	mov	r16, r24
     538:	19 2f       	mov	r17, r25
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	88 2f       	mov	r24, r24
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	2d 85       	ldd	r18, Y+13	; 0x0d
     542:	3e 85       	ldd	r19, Y+14	; 0x0e
     544:	82 0f       	add	r24, r18
     546:	93 1f       	adc	r25, r19
     548:	fc 01       	movw	r30, r24
     54a:	80 81       	ld	r24, Z
     54c:	88 2f       	mov	r24, r24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	c0 97       	sbiw	r24, 0x30	; 48
     552:	98 8b       	std	Y+16, r25	; 0x10
     554:	8f 87       	std	Y+15, r24	; 0x0f
     556:	89 2f       	mov	r24, r25
     558:	88 0f       	add	r24, r24
     55a:	88 0b       	sbc	r24, r24
     55c:	89 8b       	std	Y+17, r24	; 0x11
     55e:	8a 8b       	std	Y+18, r24	; 0x12
     560:	8b 8b       	std	Y+19, r24	; 0x13
     562:	8c 8b       	std	Y+20, r24	; 0x14
     564:	8d 8b       	std	Y+21, r24	; 0x15
     566:	8e 8b       	std	Y+22, r24	; 0x16
     568:	2a 2d       	mov	r18, r10
     56a:	3b 2d       	mov	r19, r11
     56c:	4c 2d       	mov	r20, r12
     56e:	5d 2d       	mov	r21, r13
     570:	6e 2d       	mov	r22, r14
     572:	7f 2d       	mov	r23, r15
     574:	80 2f       	mov	r24, r16
     576:	91 2f       	mov	r25, r17
     578:	af 84       	ldd	r10, Y+15	; 0x0f
     57a:	b8 88       	ldd	r11, Y+16	; 0x10
     57c:	c9 88       	ldd	r12, Y+17	; 0x11
     57e:	da 88       	ldd	r13, Y+18	; 0x12
     580:	eb 88       	ldd	r14, Y+19	; 0x13
     582:	fc 88       	ldd	r15, Y+20	; 0x14
     584:	0d 89       	ldd	r16, Y+21	; 0x15
     586:	1e 89       	ldd	r17, Y+22	; 0x16
     588:	0e 94 77 20 	call	0x40ee	; 0x40ee <__adddi3>
     58c:	2b 83       	std	Y+3, r18	; 0x03
     58e:	3c 83       	std	Y+4, r19	; 0x04
     590:	4d 83       	std	Y+5, r20	; 0x05
     592:	5e 83       	std	Y+6, r21	; 0x06
     594:	6f 83       	std	Y+7, r22	; 0x07
     596:	78 87       	std	Y+8, r23	; 0x08
     598:	89 87       	std	Y+9, r24	; 0x09
     59a:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     59c:	8a 81       	ldd	r24, Y+2	; 0x02
     59e:	8f 5f       	subi	r24, 0xFF	; 255
     5a0:	8a 83       	std	Y+2, r24	; 0x02
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	88 2f       	mov	r24, r24
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	2d 85       	ldd	r18, Y+13	; 0x0d
     5aa:	3e 85       	ldd	r19, Y+14	; 0x0e
     5ac:	82 0f       	add	r24, r18
     5ae:	93 1f       	adc	r25, r19
     5b0:	fc 01       	movw	r30, r24
     5b2:	80 81       	ld	r24, Z
     5b4:	88 23       	and	r24, r24
     5b6:	09 f0       	breq	.+2      	; 0x5ba <Convert_StringTou16+0x19a>
     5b8:	68 cf       	rjmp	.-304    	; 0x48a <Convert_StringTou16+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     5ba:	2b 81       	ldd	r18, Y+3	; 0x03
     5bc:	3c 81       	ldd	r19, Y+4	; 0x04
     5be:	8b 85       	ldd	r24, Y+11	; 0x0b
     5c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5c2:	fc 01       	movw	r30, r24
     5c4:	31 83       	std	Z+1, r19	; 0x01
     5c6:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     5c8:	89 81       	ldd	r24, Y+1	; 0x01

}
     5ca:	6e 96       	adiw	r28, 0x1e	; 30
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	df 90       	pop	r13
     5e4:	cf 90       	pop	r12
     5e6:	bf 90       	pop	r11
     5e8:	af 90       	pop	r10
     5ea:	9f 90       	pop	r9
     5ec:	8f 90       	pop	r8
     5ee:	7f 90       	pop	r7
     5f0:	6f 90       	pop	r6
     5f2:	5f 90       	pop	r5
     5f4:	4f 90       	pop	r4
     5f6:	3f 90       	pop	r3
     5f8:	2f 90       	pop	r2
     5fa:	08 95       	ret

000005fc <Convert_StringTou32>:


Std_StatusType Convert_StringTou32 (u32* Address_Number, pu8 Address_str){
     5fc:	2f 92       	push	r2
     5fe:	3f 92       	push	r3
     600:	4f 92       	push	r4
     602:	5f 92       	push	r5
     604:	6f 92       	push	r6
     606:	7f 92       	push	r7
     608:	8f 92       	push	r8
     60a:	9f 92       	push	r9
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	6e 97       	sbiw	r28, 0x1e	; 30
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	9c 87       	std	Y+12, r25	; 0x0c
     632:	8b 87       	std	Y+11, r24	; 0x0b
     634:	7e 87       	std	Y+14, r23	; 0x0e
     636:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     638:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     63a:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     63c:	1b 82       	std	Y+3, r1	; 0x03
     63e:	1c 82       	std	Y+4, r1	; 0x04
     640:	1d 82       	std	Y+5, r1	; 0x05
     642:	1e 82       	std	Y+6, r1	; 0x06
     644:	1f 82       	std	Y+7, r1	; 0x07
     646:	18 86       	std	Y+8, r1	; 0x08
     648:	19 86       	std	Y+9, r1	; 0x09
     64a:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     64c:	8d 85       	ldd	r24, Y+13	; 0x0d
     64e:	9e 85       	ldd	r25, Y+14	; 0x0e
     650:	89 2b       	or	r24, r25
     652:	21 f0       	breq	.+8      	; 0x65c <Convert_StringTou32+0x60>
     654:	8b 85       	ldd	r24, Y+11	; 0x0b
     656:	9c 85       	ldd	r25, Y+12	; 0x0c
     658:	89 2b       	or	r24, r25
     65a:	19 f4       	brne	.+6      	; 0x662 <Convert_StringTou32+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	89 83       	std	Y+1, r24	; 0x01
     660:	a5 c0       	rjmp	.+330    	; 0x7ac <Convert_StringTou32+0x1b0>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     662:	1a 82       	std	Y+2, r1	; 0x02
     664:	8c c0       	rjmp	.+280    	; 0x77e <Convert_StringTou32+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     666:	2b 81       	ldd	r18, Y+3	; 0x03
     668:	3c 81       	ldd	r19, Y+4	; 0x04
     66a:	4d 81       	ldd	r20, Y+5	; 0x05
     66c:	5e 81       	ldd	r21, Y+6	; 0x06
     66e:	6f 81       	ldd	r22, Y+7	; 0x07
     670:	78 85       	ldd	r23, Y+8	; 0x08
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	9a 85       	ldd	r25, Y+10	; 0x0a
     676:	22 2e       	mov	r2, r18
     678:	33 2e       	mov	r3, r19
     67a:	44 2e       	mov	r4, r20
     67c:	55 2e       	mov	r5, r21
     67e:	66 2e       	mov	r6, r22
     680:	77 2e       	mov	r7, r23
     682:	88 2e       	mov	r8, r24
     684:	99 2e       	mov	r9, r25
     686:	22 2d       	mov	r18, r2
     688:	33 2d       	mov	r19, r3
     68a:	44 2d       	mov	r20, r4
     68c:	55 2d       	mov	r21, r5
     68e:	66 2d       	mov	r22, r6
     690:	77 2d       	mov	r23, r7
     692:	88 2d       	mov	r24, r8
     694:	99 2d       	mov	r25, r9
     696:	01 e0       	ldi	r16, 0x01	; 1
     698:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ashldi3>
     69c:	a2 2e       	mov	r10, r18
     69e:	b3 2e       	mov	r11, r19
     6a0:	c4 2e       	mov	r12, r20
     6a2:	d5 2e       	mov	r13, r21
     6a4:	e6 2e       	mov	r14, r22
     6a6:	f7 2e       	mov	r15, r23
     6a8:	08 2f       	mov	r16, r24
     6aa:	19 2f       	mov	r17, r25
     6ac:	2a 2c       	mov	r2, r10
     6ae:	3b 2c       	mov	r3, r11
     6b0:	4c 2c       	mov	r4, r12
     6b2:	5d 2c       	mov	r5, r13
     6b4:	6e 2c       	mov	r6, r14
     6b6:	7f 2c       	mov	r7, r15
     6b8:	80 2e       	mov	r8, r16
     6ba:	91 2e       	mov	r9, r17
     6bc:	22 2d       	mov	r18, r2
     6be:	33 2d       	mov	r19, r3
     6c0:	44 2d       	mov	r20, r4
     6c2:	55 2d       	mov	r21, r5
     6c4:	66 2d       	mov	r22, r6
     6c6:	77 2d       	mov	r23, r7
     6c8:	88 2d       	mov	r24, r8
     6ca:	99 2d       	mov	r25, r9
     6cc:	02 e0       	ldi	r16, 0x02	; 2
     6ce:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ashldi3>
     6d2:	2f 8b       	std	Y+23, r18	; 0x17
     6d4:	38 8f       	std	Y+24, r19	; 0x18
     6d6:	49 8f       	std	Y+25, r20	; 0x19
     6d8:	5a 8f       	std	Y+26, r21	; 0x1a
     6da:	6b 8f       	std	Y+27, r22	; 0x1b
     6dc:	7c 8f       	std	Y+28, r23	; 0x1c
     6de:	8d 8f       	std	Y+29, r24	; 0x1d
     6e0:	9e 8f       	std	Y+30, r25	; 0x1e
     6e2:	22 2d       	mov	r18, r2
     6e4:	33 2d       	mov	r19, r3
     6e6:	44 2d       	mov	r20, r4
     6e8:	55 2d       	mov	r21, r5
     6ea:	66 2d       	mov	r22, r6
     6ec:	77 2d       	mov	r23, r7
     6ee:	88 2d       	mov	r24, r8
     6f0:	99 2d       	mov	r25, r9
     6f2:	af 88       	ldd	r10, Y+23	; 0x17
     6f4:	b8 8c       	ldd	r11, Y+24	; 0x18
     6f6:	c9 8c       	ldd	r12, Y+25	; 0x19
     6f8:	da 8c       	ldd	r13, Y+26	; 0x1a
     6fa:	eb 8c       	ldd	r14, Y+27	; 0x1b
     6fc:	fc 8c       	ldd	r15, Y+28	; 0x1c
     6fe:	0d 8d       	ldd	r16, Y+29	; 0x1d
     700:	1e 8d       	ldd	r17, Y+30	; 0x1e
     702:	0e 94 77 20 	call	0x40ee	; 0x40ee <__adddi3>
     706:	a2 2e       	mov	r10, r18
     708:	b3 2e       	mov	r11, r19
     70a:	c4 2e       	mov	r12, r20
     70c:	d5 2e       	mov	r13, r21
     70e:	e6 2e       	mov	r14, r22
     710:	f7 2e       	mov	r15, r23
     712:	08 2f       	mov	r16, r24
     714:	19 2f       	mov	r17, r25
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	88 2f       	mov	r24, r24
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	2d 85       	ldd	r18, Y+13	; 0x0d
     71e:	3e 85       	ldd	r19, Y+14	; 0x0e
     720:	82 0f       	add	r24, r18
     722:	93 1f       	adc	r25, r19
     724:	fc 01       	movw	r30, r24
     726:	80 81       	ld	r24, Z
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	c0 97       	sbiw	r24, 0x30	; 48
     72e:	98 8b       	std	Y+16, r25	; 0x10
     730:	8f 87       	std	Y+15, r24	; 0x0f
     732:	89 2f       	mov	r24, r25
     734:	88 0f       	add	r24, r24
     736:	88 0b       	sbc	r24, r24
     738:	89 8b       	std	Y+17, r24	; 0x11
     73a:	8a 8b       	std	Y+18, r24	; 0x12
     73c:	8b 8b       	std	Y+19, r24	; 0x13
     73e:	8c 8b       	std	Y+20, r24	; 0x14
     740:	8d 8b       	std	Y+21, r24	; 0x15
     742:	8e 8b       	std	Y+22, r24	; 0x16
     744:	2a 2d       	mov	r18, r10
     746:	3b 2d       	mov	r19, r11
     748:	4c 2d       	mov	r20, r12
     74a:	5d 2d       	mov	r21, r13
     74c:	6e 2d       	mov	r22, r14
     74e:	7f 2d       	mov	r23, r15
     750:	80 2f       	mov	r24, r16
     752:	91 2f       	mov	r25, r17
     754:	af 84       	ldd	r10, Y+15	; 0x0f
     756:	b8 88       	ldd	r11, Y+16	; 0x10
     758:	c9 88       	ldd	r12, Y+17	; 0x11
     75a:	da 88       	ldd	r13, Y+18	; 0x12
     75c:	eb 88       	ldd	r14, Y+19	; 0x13
     75e:	fc 88       	ldd	r15, Y+20	; 0x14
     760:	0d 89       	ldd	r16, Y+21	; 0x15
     762:	1e 89       	ldd	r17, Y+22	; 0x16
     764:	0e 94 77 20 	call	0x40ee	; 0x40ee <__adddi3>
     768:	2b 83       	std	Y+3, r18	; 0x03
     76a:	3c 83       	std	Y+4, r19	; 0x04
     76c:	4d 83       	std	Y+5, r20	; 0x05
     76e:	5e 83       	std	Y+6, r21	; 0x06
     770:	6f 83       	std	Y+7, r22	; 0x07
     772:	78 87       	std	Y+8, r23	; 0x08
     774:	89 87       	std	Y+9, r24	; 0x09
     776:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	8f 5f       	subi	r24, 0xFF	; 255
     77c:	8a 83       	std	Y+2, r24	; 0x02
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	88 2f       	mov	r24, r24
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	2d 85       	ldd	r18, Y+13	; 0x0d
     786:	3e 85       	ldd	r19, Y+14	; 0x0e
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	fc 01       	movw	r30, r24
     78e:	80 81       	ld	r24, Z
     790:	88 23       	and	r24, r24
     792:	09 f0       	breq	.+2      	; 0x796 <Convert_StringTou32+0x19a>
     794:	68 cf       	rjmp	.-304    	; 0x666 <Convert_StringTou32+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	9c 81       	ldd	r25, Y+4	; 0x04
     79a:	ad 81       	ldd	r26, Y+5	; 0x05
     79c:	be 81       	ldd	r27, Y+6	; 0x06
     79e:	2b 85       	ldd	r18, Y+11	; 0x0b
     7a0:	3c 85       	ldd	r19, Y+12	; 0x0c
     7a2:	f9 01       	movw	r30, r18
     7a4:	80 83       	st	Z, r24
     7a6:	91 83       	std	Z+1, r25	; 0x01
     7a8:	a2 83       	std	Z+2, r26	; 0x02
     7aa:	b3 83       	std	Z+3, r27	; 0x03
			}

			return Loc_enuStatus;
     7ac:	89 81       	ldd	r24, Y+1	; 0x01

}
     7ae:	6e 96       	adiw	r28, 0x1e	; 30
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	ff 90       	pop	r15
     7c4:	ef 90       	pop	r14
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	bf 90       	pop	r11
     7cc:	af 90       	pop	r10
     7ce:	9f 90       	pop	r9
     7d0:	8f 90       	pop	r8
     7d2:	7f 90       	pop	r7
     7d4:	6f 90       	pop	r6
     7d6:	5f 90       	pop	r5
     7d8:	4f 90       	pop	r4
     7da:	3f 90       	pop	r3
     7dc:	2f 90       	pop	r2
     7de:	08 95       	ret

000007e0 <Convert_StringTou64>:


Std_StatusType Convert_StringTou64 (u64* Address_Number, pu8 Address_str){
     7e0:	2f 92       	push	r2
     7e2:	3f 92       	push	r3
     7e4:	4f 92       	push	r4
     7e6:	5f 92       	push	r5
     7e8:	6f 92       	push	r6
     7ea:	7f 92       	push	r7
     7ec:	8f 92       	push	r8
     7ee:	9f 92       	push	r9
     7f0:	af 92       	push	r10
     7f2:	bf 92       	push	r11
     7f4:	cf 92       	push	r12
     7f6:	df 92       	push	r13
     7f8:	ef 92       	push	r14
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	6e 97       	sbiw	r28, 0x1e	; 30
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	9c 87       	std	Y+12, r25	; 0x0c
     816:	8b 87       	std	Y+11, r24	; 0x0b
     818:	7e 87       	std	Y+14, r23	; 0x0e
     81a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     81c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     81e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     820:	1b 82       	std	Y+3, r1	; 0x03
     822:	1c 82       	std	Y+4, r1	; 0x04
     824:	1d 82       	std	Y+5, r1	; 0x05
     826:	1e 82       	std	Y+6, r1	; 0x06
     828:	1f 82       	std	Y+7, r1	; 0x07
     82a:	18 86       	std	Y+8, r1	; 0x08
     82c:	19 86       	std	Y+9, r1	; 0x09
     82e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     830:	8d 85       	ldd	r24, Y+13	; 0x0d
     832:	9e 85       	ldd	r25, Y+14	; 0x0e
     834:	89 2b       	or	r24, r25
     836:	21 f0       	breq	.+8      	; 0x840 <Convert_StringTou64+0x60>
     838:	8b 85       	ldd	r24, Y+11	; 0x0b
     83a:	9c 85       	ldd	r25, Y+12	; 0x0c
     83c:	89 2b       	or	r24, r25
     83e:	19 f4       	brne	.+6      	; 0x846 <Convert_StringTou64+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	b4 c0       	rjmp	.+360    	; 0x9ae <__stack+0x14f>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     846:	1a 82       	std	Y+2, r1	; 0x02
     848:	8c c0       	rjmp	.+280    	; 0x962 <__stack+0x103>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     84a:	2b 81       	ldd	r18, Y+3	; 0x03
     84c:	3c 81       	ldd	r19, Y+4	; 0x04
     84e:	4d 81       	ldd	r20, Y+5	; 0x05
     850:	5e 81       	ldd	r21, Y+6	; 0x06
     852:	6f 81       	ldd	r22, Y+7	; 0x07
     854:	78 85       	ldd	r23, Y+8	; 0x08
     856:	89 85       	ldd	r24, Y+9	; 0x09
     858:	9a 85       	ldd	r25, Y+10	; 0x0a
     85a:	22 2e       	mov	r2, r18
     85c:	33 2e       	mov	r3, r19
     85e:	44 2e       	mov	r4, r20
     860:	55 2e       	mov	r5, r21
     862:	66 2e       	mov	r6, r22
     864:	77 2e       	mov	r7, r23
     866:	88 2e       	mov	r8, r24
     868:	99 2e       	mov	r9, r25
     86a:	22 2d       	mov	r18, r2
     86c:	33 2d       	mov	r19, r3
     86e:	44 2d       	mov	r20, r4
     870:	55 2d       	mov	r21, r5
     872:	66 2d       	mov	r22, r6
     874:	77 2d       	mov	r23, r7
     876:	88 2d       	mov	r24, r8
     878:	99 2d       	mov	r25, r9
     87a:	01 e0       	ldi	r16, 0x01	; 1
     87c:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ashldi3>
     880:	a2 2e       	mov	r10, r18
     882:	b3 2e       	mov	r11, r19
     884:	c4 2e       	mov	r12, r20
     886:	d5 2e       	mov	r13, r21
     888:	e6 2e       	mov	r14, r22
     88a:	f7 2e       	mov	r15, r23
     88c:	08 2f       	mov	r16, r24
     88e:	19 2f       	mov	r17, r25
     890:	2a 2c       	mov	r2, r10
     892:	3b 2c       	mov	r3, r11
     894:	4c 2c       	mov	r4, r12
     896:	5d 2c       	mov	r5, r13
     898:	6e 2c       	mov	r6, r14
     89a:	7f 2c       	mov	r7, r15
     89c:	80 2e       	mov	r8, r16
     89e:	91 2e       	mov	r9, r17
     8a0:	22 2d       	mov	r18, r2
     8a2:	33 2d       	mov	r19, r3
     8a4:	44 2d       	mov	r20, r4
     8a6:	55 2d       	mov	r21, r5
     8a8:	66 2d       	mov	r22, r6
     8aa:	77 2d       	mov	r23, r7
     8ac:	88 2d       	mov	r24, r8
     8ae:	99 2d       	mov	r25, r9
     8b0:	02 e0       	ldi	r16, 0x02	; 2
     8b2:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__ashldi3>
     8b6:	2f 8b       	std	Y+23, r18	; 0x17
     8b8:	38 8f       	std	Y+24, r19	; 0x18
     8ba:	49 8f       	std	Y+25, r20	; 0x19
     8bc:	5a 8f       	std	Y+26, r21	; 0x1a
     8be:	6b 8f       	std	Y+27, r22	; 0x1b
     8c0:	7c 8f       	std	Y+28, r23	; 0x1c
     8c2:	8d 8f       	std	Y+29, r24	; 0x1d
     8c4:	9e 8f       	std	Y+30, r25	; 0x1e
     8c6:	22 2d       	mov	r18, r2
     8c8:	33 2d       	mov	r19, r3
     8ca:	44 2d       	mov	r20, r4
     8cc:	55 2d       	mov	r21, r5
     8ce:	66 2d       	mov	r22, r6
     8d0:	77 2d       	mov	r23, r7
     8d2:	88 2d       	mov	r24, r8
     8d4:	99 2d       	mov	r25, r9
     8d6:	af 88       	ldd	r10, Y+23	; 0x17
     8d8:	b8 8c       	ldd	r11, Y+24	; 0x18
     8da:	c9 8c       	ldd	r12, Y+25	; 0x19
     8dc:	da 8c       	ldd	r13, Y+26	; 0x1a
     8de:	eb 8c       	ldd	r14, Y+27	; 0x1b
     8e0:	fc 8c       	ldd	r15, Y+28	; 0x1c
     8e2:	0d 8d       	ldd	r16, Y+29	; 0x1d
     8e4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8e6:	0e 94 77 20 	call	0x40ee	; 0x40ee <__adddi3>
     8ea:	a2 2e       	mov	r10, r18
     8ec:	b3 2e       	mov	r11, r19
     8ee:	c4 2e       	mov	r12, r20
     8f0:	d5 2e       	mov	r13, r21
     8f2:	e6 2e       	mov	r14, r22
     8f4:	f7 2e       	mov	r15, r23
     8f6:	08 2f       	mov	r16, r24
     8f8:	19 2f       	mov	r17, r25
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	88 2f       	mov	r24, r24
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	2d 85       	ldd	r18, Y+13	; 0x0d
     902:	3e 85       	ldd	r19, Y+14	; 0x0e
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
     908:	fc 01       	movw	r30, r24
     90a:	80 81       	ld	r24, Z
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	c0 97       	sbiw	r24, 0x30	; 48
     912:	98 8b       	std	Y+16, r25	; 0x10
     914:	8f 87       	std	Y+15, r24	; 0x0f
     916:	89 2f       	mov	r24, r25
     918:	88 0f       	add	r24, r24
     91a:	88 0b       	sbc	r24, r24
     91c:	89 8b       	std	Y+17, r24	; 0x11
     91e:	8a 8b       	std	Y+18, r24	; 0x12
     920:	8b 8b       	std	Y+19, r24	; 0x13
     922:	8c 8b       	std	Y+20, r24	; 0x14
     924:	8d 8b       	std	Y+21, r24	; 0x15
     926:	8e 8b       	std	Y+22, r24	; 0x16
     928:	2a 2d       	mov	r18, r10
     92a:	3b 2d       	mov	r19, r11
     92c:	4c 2d       	mov	r20, r12
     92e:	5d 2d       	mov	r21, r13
     930:	6e 2d       	mov	r22, r14
     932:	7f 2d       	mov	r23, r15
     934:	80 2f       	mov	r24, r16
     936:	91 2f       	mov	r25, r17
     938:	af 84       	ldd	r10, Y+15	; 0x0f
     93a:	b8 88       	ldd	r11, Y+16	; 0x10
     93c:	c9 88       	ldd	r12, Y+17	; 0x11
     93e:	da 88       	ldd	r13, Y+18	; 0x12
     940:	eb 88       	ldd	r14, Y+19	; 0x13
     942:	fc 88       	ldd	r15, Y+20	; 0x14
     944:	0d 89       	ldd	r16, Y+21	; 0x15
     946:	1e 89       	ldd	r17, Y+22	; 0x16
     948:	0e 94 77 20 	call	0x40ee	; 0x40ee <__adddi3>
     94c:	2b 83       	std	Y+3, r18	; 0x03
     94e:	3c 83       	std	Y+4, r19	; 0x04
     950:	4d 83       	std	Y+5, r20	; 0x05
     952:	5e 83       	std	Y+6, r21	; 0x06
     954:	6f 83       	std	Y+7, r22	; 0x07
     956:	78 87       	std	Y+8, r23	; 0x08
     958:	89 87       	std	Y+9, r24	; 0x09
     95a:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	8a 83       	std	Y+2, r24	; 0x02
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	88 2f       	mov	r24, r24
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	2d 85       	ldd	r18, Y+13	; 0x0d
     96a:	3e 85       	ldd	r19, Y+14	; 0x0e
     96c:	82 0f       	add	r24, r18
     96e:	93 1f       	adc	r25, r19
     970:	fc 01       	movw	r30, r24
     972:	80 81       	ld	r24, Z
     974:	88 23       	and	r24, r24
     976:	09 f0       	breq	.+2      	; 0x97a <__stack+0x11b>
     978:	68 cf       	rjmp	.-304    	; 0x84a <Convert_StringTou64+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     97a:	8b 85       	ldd	r24, Y+11	; 0x0b
     97c:	9c 85       	ldd	r25, Y+12	; 0x0c
     97e:	2b 81       	ldd	r18, Y+3	; 0x03
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
     984:	2c 81       	ldd	r18, Y+4	; 0x04
     986:	fc 01       	movw	r30, r24
     988:	21 83       	std	Z+1, r18	; 0x01
     98a:	2d 81       	ldd	r18, Y+5	; 0x05
     98c:	fc 01       	movw	r30, r24
     98e:	22 83       	std	Z+2, r18	; 0x02
     990:	2e 81       	ldd	r18, Y+6	; 0x06
     992:	fc 01       	movw	r30, r24
     994:	23 83       	std	Z+3, r18	; 0x03
     996:	2f 81       	ldd	r18, Y+7	; 0x07
     998:	fc 01       	movw	r30, r24
     99a:	24 83       	std	Z+4, r18	; 0x04
     99c:	28 85       	ldd	r18, Y+8	; 0x08
     99e:	fc 01       	movw	r30, r24
     9a0:	25 83       	std	Z+5, r18	; 0x05
     9a2:	29 85       	ldd	r18, Y+9	; 0x09
     9a4:	fc 01       	movw	r30, r24
     9a6:	26 83       	std	Z+6, r18	; 0x06
     9a8:	2a 85       	ldd	r18, Y+10	; 0x0a
     9aa:	fc 01       	movw	r30, r24
     9ac:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     9ae:	89 81       	ldd	r24, Y+1	; 0x01

}
     9b0:	6e 96       	adiw	r28, 0x1e	; 30
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	7f 90       	pop	r7
     9d6:	6f 90       	pop	r6
     9d8:	5f 90       	pop	r5
     9da:	4f 90       	pop	r4
     9dc:	3f 90       	pop	r3
     9de:	2f 90       	pop	r2
     9e0:	08 95       	ret

000009e2 <Timer0_enuInit>:
static  u8 Timer0_InitValue;
/********************************** Software Interfaces Declarations *******************/



Timer0_StatusErrorType Timer0_enuInit(const Timer0_ConfigType* Address_Timer0){
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	00 d0       	rcall	.+0      	; 0x9e8 <Timer0_enuInit+0x6>
     9e8:	1f 92       	push	r1
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	9b 83       	std	Y+3, r25	; 0x03
     9f0:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     9f6:	8a 81       	ldd	r24, Y+2	; 0x02
     9f8:	9b 81       	ldd	r25, Y+3	; 0x03
     9fa:	89 2b       	or	r24, r25
     9fc:	19 f4       	brne	.+6      	; 0xa04 <Timer0_enuInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	89 83       	std	Y+1, r24	; 0x01
     a02:	97 c0       	rjmp	.+302    	; 0xb32 <Timer0_enuInit+0x150>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	        Timer0_Disable();
     a04:	83 e5       	ldi	r24, 0x53	; 83
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	23 e5       	ldi	r18, 0x53	; 83
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	f9 01       	movw	r30, r18
     a0e:	20 81       	ld	r18, Z
     a10:	28 7f       	andi	r18, 0xF8	; 248
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18

		    	        /* Select Mode timer */
		    	        Timer0_SelectMode((Address_Timer0->select_mode));
     a16:	83 e5       	ldi	r24, 0x53	; 83
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	23 e5       	ldi	r18, 0x53	; 83
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	42 2f       	mov	r20, r18
     a24:	4f 7b       	andi	r20, 0xBF	; 191
     a26:	2a 81       	ldd	r18, Y+2	; 0x02
     a28:	3b 81       	ldd	r19, Y+3	; 0x03
     a2a:	f9 01       	movw	r30, r18
     a2c:	21 81       	ldd	r18, Z+1	; 0x01
     a2e:	22 2f       	mov	r18, r18
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	21 70       	andi	r18, 0x01	; 1
     a34:	33 27       	eor	r19, r19
     a36:	00 24       	eor	r0, r0
     a38:	36 95       	lsr	r19
     a3a:	27 95       	ror	r18
     a3c:	07 94       	ror	r0
     a3e:	36 95       	lsr	r19
     a40:	27 95       	ror	r18
     a42:	07 94       	ror	r0
     a44:	32 2f       	mov	r19, r18
     a46:	20 2d       	mov	r18, r0
     a48:	24 2b       	or	r18, r20
     a4a:	fc 01       	movw	r30, r24
     a4c:	20 83       	st	Z, r18
     a4e:	83 e5       	ldi	r24, 0x53	; 83
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	23 e5       	ldi	r18, 0x53	; 83
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	f9 01       	movw	r30, r18
     a58:	20 81       	ld	r18, Z
     a5a:	42 2f       	mov	r20, r18
     a5c:	47 7f       	andi	r20, 0xF7	; 247
     a5e:	2a 81       	ldd	r18, Y+2	; 0x02
     a60:	3b 81       	ldd	r19, Y+3	; 0x03
     a62:	f9 01       	movw	r30, r18
     a64:	21 81       	ldd	r18, Z+1	; 0x01
     a66:	26 95       	lsr	r18
     a68:	22 2f       	mov	r18, r18
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	21 70       	andi	r18, 0x01	; 1
     a6e:	33 27       	eor	r19, r19
     a70:	22 0f       	add	r18, r18
     a72:	33 1f       	adc	r19, r19
     a74:	22 0f       	add	r18, r18
     a76:	33 1f       	adc	r19, r19
     a78:	22 0f       	add	r18, r18
     a7a:	33 1f       	adc	r19, r19
     a7c:	24 2b       	or	r18, r20
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
     a82:	83 e5       	ldi	r24, 0x53	; 83
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	23 e5       	ldi	r18, 0x53	; 83
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	f9 01       	movw	r30, r18
     a8c:	20 81       	ld	r18, Z
     a8e:	42 2f       	mov	r20, r18
     a90:	4f 7e       	andi	r20, 0xEF	; 239
     a92:	2a 81       	ldd	r18, Y+2	; 0x02
     a94:	3b 81       	ldd	r19, Y+3	; 0x03
     a96:	f9 01       	movw	r30, r18
     a98:	21 81       	ldd	r18, Z+1	; 0x01
     a9a:	26 95       	lsr	r18
     a9c:	26 95       	lsr	r18
     a9e:	22 2f       	mov	r18, r18
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	21 70       	andi	r18, 0x01	; 1
     aa4:	33 27       	eor	r19, r19
     aa6:	22 95       	swap	r18
     aa8:	32 95       	swap	r19
     aaa:	30 7f       	andi	r19, 0xF0	; 240
     aac:	32 27       	eor	r19, r18
     aae:	20 7f       	andi	r18, 0xF0	; 240
     ab0:	32 27       	eor	r19, r18
     ab2:	24 2b       	or	r18, r20
     ab4:	fc 01       	movw	r30, r24
     ab6:	20 83       	st	Z, r18
     ab8:	83 e5       	ldi	r24, 0x53	; 83
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	23 e5       	ldi	r18, 0x53	; 83
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	f9 01       	movw	r30, r18
     ac2:	20 81       	ld	r18, Z
     ac4:	42 2f       	mov	r20, r18
     ac6:	4f 7d       	andi	r20, 0xDF	; 223
     ac8:	2a 81       	ldd	r18, Y+2	; 0x02
     aca:	3b 81       	ldd	r19, Y+3	; 0x03
     acc:	f9 01       	movw	r30, r18
     ace:	21 81       	ldd	r18, Z+1	; 0x01
     ad0:	26 95       	lsr	r18
     ad2:	26 95       	lsr	r18
     ad4:	26 95       	lsr	r18
     ad6:	22 2f       	mov	r18, r18
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	21 70       	andi	r18, 0x01	; 1
     adc:	33 27       	eor	r19, r19
     ade:	22 0f       	add	r18, r18
     ae0:	33 1f       	adc	r19, r19
     ae2:	22 95       	swap	r18
     ae4:	32 95       	swap	r19
     ae6:	30 7f       	andi	r19, 0xF0	; 240
     ae8:	32 27       	eor	r19, r18
     aea:	20 7f       	andi	r18, 0xF0	; 240
     aec:	32 27       	eor	r19, r18
     aee:	24 2b       	or	r18, r20
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18

		    	        Timer0_InitValue = Address_Timer0->init_value;
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	9b 81       	ldd	r25, Y+3	; 0x03
     af8:	fc 01       	movw	r30, r24
     afa:	82 81       	ldd	r24, Z+2	; 0x02
     afc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer0_InitValue>
		    	        /* Update Init Value*/
		    	       Loc_enuTimer0Status= Timer0_SetValue(Address_Timer0, Address_Timer0->init_value);
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
     b02:	9b 81       	ldd	r25, Y+3	; 0x03
     b04:	fc 01       	movw	r30, r24
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	8a 81       	ldd	r24, Y+2	; 0x02
     b0a:	9b 81       	ldd	r25, Y+3	; 0x03
     b0c:	62 2f       	mov	r22, r18
     b0e:	0e 94 23 06 	call	0xc46	; 0xc46 <Timer0_SetValue>
     b12:	89 83       	std	Y+1, r24	; 0x01

		    	        /* Enable Timer0 Peripheral */
		    	        Timer0_Enable(Address_Timer0->prescaler_value);
     b14:	83 e5       	ldi	r24, 0x53	; 83
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	23 e5       	ldi	r18, 0x53	; 83
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	f9 01       	movw	r30, r18
     b1e:	20 81       	ld	r18, Z
     b20:	42 2f       	mov	r20, r18
     b22:	48 7f       	andi	r20, 0xF8	; 248
     b24:	2a 81       	ldd	r18, Y+2	; 0x02
     b26:	3b 81       	ldd	r19, Y+3	; 0x03
     b28:	f9 01       	movw	r30, r18
     b2a:	20 81       	ld	r18, Z
     b2c:	24 2b       	or	r18, r20
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
}
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <Timer0_DeInit>:

Timer0_StatusErrorType Timer0_DeInit(const Timer0_ConfigType* Address_Timer0){
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	00 d0       	rcall	.+0      	; 0xb46 <Timer0_DeInit+0x6>
     b46:	1f 92       	push	r1
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	9b 83       	std	Y+3, r25	; 0x03
     b4e:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	9b 81       	ldd	r25, Y+3	; 0x03
     b58:	89 2b       	or	r24, r25
     b5a:	19 f4       	brne	.+6      	; 0xb62 <Timer0_DeInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	89 83       	std	Y+1, r24	; 0x01
     b60:	09 c0       	rjmp	.+18     	; 0xb74 <Timer0_DeInit+0x34>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	Timer0_Disable();
     b62:	83 e5       	ldi	r24, 0x53	; 83
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	23 e5       	ldi	r18, 0x53	; 83
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	f9 01       	movw	r30, r18
     b6c:	20 81       	ld	r18, Z
     b6e:	28 7f       	andi	r18, 0xF8	; 248
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     b74:	89 81       	ldd	r24, Y+1	; 0x01
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <Timer0_enuEnableInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableInterrupt(const Timer0_ConfigType* Address_Timer0){
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	00 d0       	rcall	.+0      	; 0xb88 <Timer0_enuEnableInterrupt+0x6>
     b88:	1f 92       	push	r1
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	9b 83       	std	Y+3, r25	; 0x03
     b90:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	9b 81       	ldd	r25, Y+3	; 0x03
     b9a:	89 2b       	or	r24, r25
     b9c:	19 f4       	brne	.+6      	; 0xba4 <Timer0_enuEnableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	19 c0       	rjmp	.+50     	; 0xbd6 <Timer0_enuEnableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	9b 81       	ldd	r25, Y+3	; 0x03
     ba8:	fc 01       	movw	r30, r24
     baa:	81 81       	ldd	r24, Z+1	; 0x01
     bac:	88 23       	and	r24, r24
     bae:	51 f4       	brne	.+20     	; 0xbc4 <Timer0_enuEnableInterrupt+0x42>

		    		Timer0_EnableOverviewInterrupt();
     bb0:	89 e5       	ldi	r24, 0x59	; 89
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	29 e5       	ldi	r18, 0x59	; 89
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	f9 01       	movw	r30, r18
     bba:	20 81       	ld	r18, Z
     bbc:	21 60       	ori	r18, 0x01	; 1
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
     bc2:	09 c0       	rjmp	.+18     	; 0xbd6 <Timer0_enuEnableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_EnableComparePwmInterrupt();
     bc4:	89 e5       	ldi	r24, 0x59	; 89
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	29 e5       	ldi	r18, 0x59	; 89
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	f9 01       	movw	r30, r18
     bce:	20 81       	ld	r18, Z
     bd0:	22 60       	ori	r18, 0x02	; 2
     bd2:	fc 01       	movw	r30, r24
     bd4:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <Timer0_enuDisableInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableInterrupt(const Timer0_ConfigType* Address_Timer0){
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	00 d0       	rcall	.+0      	; 0xbea <Timer0_enuDisableInterrupt+0x6>
     bea:	1f 92       	push	r1
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	9b 83       	std	Y+3, r25	; 0x03
     bf2:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	9b 81       	ldd	r25, Y+3	; 0x03
     bfc:	89 2b       	or	r24, r25
     bfe:	19 f4       	brne	.+6      	; 0xc06 <Timer0_enuDisableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	19 c0       	rjmp	.+50     	; 0xc38 <Timer0_enuDisableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	9b 81       	ldd	r25, Y+3	; 0x03
     c0a:	fc 01       	movw	r30, r24
     c0c:	81 81       	ldd	r24, Z+1	; 0x01
     c0e:	88 23       	and	r24, r24
     c10:	51 f4       	brne	.+20     	; 0xc26 <Timer0_enuDisableInterrupt+0x42>

		    		Timer0_DisableOverviewInterrupt();
     c12:	89 e5       	ldi	r24, 0x59	; 89
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	29 e5       	ldi	r18, 0x59	; 89
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	f9 01       	movw	r30, r18
     c1c:	20 81       	ld	r18, Z
     c1e:	2e 7f       	andi	r18, 0xFE	; 254
     c20:	fc 01       	movw	r30, r24
     c22:	20 83       	st	Z, r18
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <Timer0_enuDisableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_DisbleComparePwmInterrupt();
     c26:	89 e5       	ldi	r24, 0x59	; 89
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	29 e5       	ldi	r18, 0x59	; 89
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	f9 01       	movw	r30, r18
     c30:	20 81       	ld	r18, Z
     c32:	2d 7f       	andi	r18, 0xFD	; 253
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
     c38:	89 81       	ldd	r24, Y+1	; 0x01
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <Timer0_SetValue>:


Timer0_StatusErrorType Timer0_SetValue(const Timer0_ConfigType* Address_Timer0, u8 Copy_u8Value){
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <Timer0_SetValue+0x6>
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <Timer0_SetValue+0x8>
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	9b 83       	std	Y+3, r25	; 0x03
     c54:	8a 83       	std	Y+2, r24	; 0x02
     c56:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	89 2b       	or	r24, r25
     c62:	19 f4       	brne	.+6      	; 0xc6a <Timer0_SetValue+0x24>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <Timer0_SetValue+0x2e>
		    }
		    else{

		    	TCNT0 =Copy_u8Value;
     c6a:	82 e5       	ldi	r24, 0x52	; 82
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	2c 81       	ldd	r18, Y+4	; 0x04
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     c74:	89 81       	ldd	r24, Y+1	; 0x01
}
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <Timer0_GetTimeElapsed>:
Timer0_StatusErrorType Timer0_GetTimeElapsed(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	00 d0       	rcall	.+0      	; 0xc8a <Timer0_GetTimeElapsed+0x6>
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <Timer0_GetTimeElapsed+0x8>
     c8c:	1f 92       	push	r1
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	9b 83       	std	Y+3, r25	; 0x03
     c94:	8a 83       	std	Y+2, r24	; 0x02
     c96:	7d 83       	std	Y+5, r23	; 0x05
     c98:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	9b 81       	ldd	r25, Y+3	; 0x03
     ca2:	89 2b       	or	r24, r25
     ca4:	11 f4       	brne	.+4      	; 0xcaa <Timer0_GetTimeElapsed+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	89 83       	std	Y+1, r24	; 0x01
		    else{


		    }

		    return Loc_enuTimer0Status;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <Timer0_GetRemaining>:
Timer0_StatusErrorType Timer0_GetRemaining(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <Timer0_GetRemaining+0x6>
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <Timer0_GetRemaining+0x8>
     cc4:	1f 92       	push	r1
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	9b 83       	std	Y+3, r25	; 0x03
     ccc:	8a 83       	std	Y+2, r24	; 0x02
     cce:	7d 83       	std	Y+5, r23	; 0x05
     cd0:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	9b 81       	ldd	r25, Y+3	; 0x03
     cda:	89 2b       	or	r24, r25
     cdc:	19 f4       	brne	.+6      	; 0xce4 <Timer0_GetRemaining+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	0b c0       	rjmp	.+22     	; 0xcfa <Timer0_GetRemaining+0x3e>
		    }
		    else{

		    	*Address_Value = TCNT0;
     ce4:	82 e5       	ldi	r24, 0x52	; 82
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	fc 01       	movw	r30, r24
     cea:	80 81       	ld	r24, Z
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	9d 81       	ldd	r25, Y+5	; 0x05
     cf4:	fc 01       	movw	r30, r24
     cf6:	31 83       	std	Z+1, r19	; 0x01
     cf8:	20 83       	st	Z, r18
		    }

		    return Loc_enuTimer0Status;
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <Timer0_SetCallbackFunction>:


Timer0_StatusErrorType Timer0_SetCallbackFunction(const Timer0_ConfigType* Address_Timer0,void (*callback)(void)){
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	00 d0       	rcall	.+0      	; 0xd12 <Timer0_SetCallbackFunction+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <Timer0_SetCallbackFunction+0x8>
     d14:	1f 92       	push	r1
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	9b 83       	std	Y+3, r25	; 0x03
     d1c:	8a 83       	std	Y+2, r24	; 0x02
     d1e:	7d 83       	std	Y+5, r23	; 0x05
     d20:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	9b 81       	ldd	r25, Y+3	; 0x03
     d2a:	89 2b       	or	r24, r25
     d2c:	19 f4       	brne	.+6      	; 0xd34 <Timer0_SetCallbackFunction+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	13 c0       	rjmp	.+38     	; 0xd5a <Timer0_SetCallbackFunction+0x4e>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	9b 81       	ldd	r25, Y+3	; 0x03
     d38:	fc 01       	movw	r30, r24
     d3a:	81 81       	ldd	r24, Z+1	; 0x01
     d3c:	88 23       	and	r24, r24
     d3e:	39 f4       	brne	.+14     	; 0xd4e <Timer0_SetCallbackFunction+0x42>

		    		Timer0_OverflowInterruptHandler = callback;
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <__data_end+0x1>
     d48:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__data_end>
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <Timer0_SetCallbackFunction+0x4e>


		    	}
		    	else{
		    		Timer0_CompareInterruptHandler = callback;
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	9d 81       	ldd	r25, Y+5	; 0x05
     d52:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <Timer0_CompareInterruptHandler+0x1>
     d56:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <Timer0_CompareInterruptHandler>
		    	}


		    }

		    return Loc_enuTimer0Status;
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <__vector_10>:


// ISR function For TIMER0 Compare Match
void __vector_10(void) __attribute__((signal));

void __vector_10(void){
     d6c:	1f 92       	push	r1
     d6e:	0f 92       	push	r0
     d70:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62

	    if(NULL !=Timer0_CompareInterruptHandler ){
     d98:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <Timer0_CompareInterruptHandler>
     d9c:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <Timer0_CompareInterruptHandler+0x1>
     da0:	89 2b       	or	r24, r25
     da2:	31 f0       	breq	.+12     	; 0xdb0 <__vector_10+0x44>
	    	Timer0_CompareInterruptHandler();
     da4:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <Timer0_CompareInterruptHandler>
     da8:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <Timer0_CompareInterruptHandler+0x1>
     dac:	fc 01       	movw	r30, r24
     dae:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
     db0:	00 00       	nop
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	0f 90       	pop	r0
     dd0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <__vector_11>:


// ISR function For TIMER0 OverFlow
void __vector_11(void) __attribute__((signal));

void __vector_11(void){
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	2f 93       	push	r18
     de8:	3f 93       	push	r19
     dea:	4f 93       	push	r20
     dec:	5f 93       	push	r21
     dee:	6f 93       	push	r22
     df0:	7f 93       	push	r23
     df2:	8f 93       	push	r24
     df4:	9f 93       	push	r25
     df6:	af 93       	push	r26
     df8:	bf 93       	push	r27
     dfa:	ef 93       	push	r30
     dfc:	ff 93       	push	r31
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
//	Timer0_DisableOverviewInterrupt();




    if(NULL !=Timer0_OverflowInterruptHandler ){
     e06:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__data_end>
     e0a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__data_end+0x1>
     e0e:	89 2b       	or	r24, r25
     e10:	61 f0       	breq	.+24     	; 0xe2a <__vector_11+0x50>

    	Timer0_OverflowInterruptHandler();
     e12:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__data_end>
     e16:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__data_end+0x1>
     e1a:	fc 01       	movw	r30, r24
     e1c:	09 95       	icall

    	TCNT0 = Timer0_InitValue;
     e1e:	82 e5       	ldi	r24, 0x52	; 82
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <Timer0_InitValue>
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
     e2a:	00 00       	nop
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	7f 91       	pop	r23
     e3e:	6f 91       	pop	r22
     e40:	5f 91       	pop	r21
     e42:	4f 91       	pop	r20
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     e5c:	8a e3       	ldi	r24, 0x3A	; 58
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	2c e6       	ldi	r18, 0x6C	; 108
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     e66:	87 e3       	ldi	r24, 0x37	; 55
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	27 ef       	ldi	r18, 0xF7	; 247
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     e70:	84 e3       	ldi	r24, 0x34	; 52
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	2f ef       	ldi	r18, 0xFF	; 255
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     e7a:	81 e3       	ldi	r24, 0x31	; 49
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	20 e1       	ldi	r18, 0x10	; 16
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     e84:	8b e3       	ldi	r24, 0x3B	; 59
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	fc 01       	movw	r30, r24
     e8a:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     e8c:	88 e3       	ldi	r24, 0x38	; 56
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	20 ec       	ldi	r18, 0xC0	; 192
     e92:	fc 01       	movw	r30, r24
     e94:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     e96:	85 e3       	ldi	r24, 0x35	; 53
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	fc 01       	movw	r30, r24
     e9c:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     e9e:	82 e3       	ldi	r24, 0x32	; 50
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	2c ee       	ldi	r18, 0xEC	; 236
     ea4:	fc 01       	movw	r30, r24
     ea6:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
     ea8:	00 00       	nop
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <Port_enuSetPinDirection+0x6>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <Port_enuSetPinDirection+0x8>
     eb8:	1f 92       	push	r1
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	8c 83       	std	Y+4, r24	; 0x04
     ec0:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     ec2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	87 70       	andi	r24, 0x07	; 7
     ec8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	86 95       	lsr	r24
     ece:	86 95       	lsr	r24
     ed0:	86 95       	lsr	r24
     ed2:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	80 32       	cpi	r24, 0x20	; 32
     ed8:	18 f0       	brcs	.+6      	; 0xee0 <Port_enuSetPinDirection+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	59 c0       	rjmp	.+178    	; 0xf92 <Port_enuSetPinDirection+0xe2>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	82 30       	cpi	r24, 0x02	; 2
     ee4:	18 f0       	brcs	.+6      	; 0xeec <Port_enuSetPinDirection+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	53 c0       	rjmp	.+166    	; 0xf92 <Port_enuSetPinDirection+0xe2>
		}

	else{

			switch(Copy_u8PinDirection){
     eec:	8d 81       	ldd	r24, Y+5	; 0x05
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	41 f1       	breq	.+80     	; 0xf46 <Port_enuSetPinDirection+0x96>
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	09 f0       	breq	.+2      	; 0xefc <Port_enuSetPinDirection+0x4c>
							break;

			default:

				// impossible
					break;
     efa:	4b c0       	rjmp	.+150    	; 0xf92 <Port_enuSetPinDirection+0xe2>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	80 5a       	subi	r24, 0xA0	; 160
     f08:	9f 4f       	sbci	r25, 0xFF	; 255
     f0a:	fc 01       	movw	r30, r24
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	2b 81       	ldd	r18, Y+3	; 0x03
     f12:	22 2f       	mov	r18, r18
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	22 0f       	add	r18, r18
     f18:	33 1f       	adc	r19, r19
     f1a:	20 5a       	subi	r18, 0xA0	; 160
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	f9 01       	movw	r30, r18
     f20:	20 81       	ld	r18, Z
     f22:	31 81       	ldd	r19, Z+1	; 0x01
     f24:	f9 01       	movw	r30, r18
     f26:	20 81       	ld	r18, Z
     f28:	62 2f       	mov	r22, r18
     f2a:	2a 81       	ldd	r18, Y+2	; 0x02
     f2c:	42 2f       	mov	r20, r18
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <Port_enuSetPinDirection+0x8a>
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	4a 95       	dec	r20
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <Port_enuSetPinDirection+0x86>
     f3e:	26 2b       	or	r18, r22
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18
					break;
     f44:	26 c0       	rjmp	.+76     	; 0xf92 <Port_enuSetPinDirection+0xe2>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	88 2f       	mov	r24, r24
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	80 5a       	subi	r24, 0xA0	; 160
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	fc 01       	movw	r30, r24
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	2b 81       	ldd	r18, Y+3	; 0x03
     f5c:	22 2f       	mov	r18, r18
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	22 0f       	add	r18, r18
     f62:	33 1f       	adc	r19, r19
     f64:	20 5a       	subi	r18, 0xA0	; 160
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	f9 01       	movw	r30, r18
     f6a:	20 81       	ld	r18, Z
     f6c:	31 81       	ldd	r19, Z+1	; 0x01
     f6e:	f9 01       	movw	r30, r18
     f70:	20 81       	ld	r18, Z
     f72:	62 2f       	mov	r22, r18
     f74:	2a 81       	ldd	r18, Y+2	; 0x02
     f76:	42 2f       	mov	r20, r18
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	21 e0       	ldi	r18, 0x01	; 1
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <Port_enuSetPinDirection+0xd4>
     f80:	22 0f       	add	r18, r18
     f82:	33 1f       	adc	r19, r19
     f84:	4a 95       	dec	r20
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <Port_enuSetPinDirection+0xd0>
     f88:	20 95       	com	r18
     f8a:	26 23       	and	r18, r22
     f8c:	fc 01       	movw	r30, r24
     f8e:	20 83       	st	Z, r18
							break;
     f90:	00 00       	nop

	}



	return Loc_enuState;
     f92:	89 81       	ldd	r24, Y+1	; 0x01
}
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <Port_enuSetPinMode+0x6>
     faa:	00 d0       	rcall	.+0      	; 0xfac <Port_enuSetPinMode+0x8>
     fac:	1f 92       	push	r1
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	8c 83       	std	Y+4, r24	; 0x04
     fb4:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     fb6:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	87 70       	andi	r24, 0x07	; 7
     fbc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	86 95       	lsr	r24
     fc2:	86 95       	lsr	r24
     fc4:	86 95       	lsr	r24
     fc6:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	80 32       	cpi	r24, 0x20	; 32
     fcc:	18 f0       	brcs	.+6      	; 0xfd4 <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	43 c1       	rjmp	.+646    	; 0x125a <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	18 f0       	brcs	.+6      	; 0xfe0 <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	3d c1       	rjmp	.+634    	; 0x125a <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <Port_enuSetPinMode+0x4a>
     fec:	57 c0       	rjmp	.+174    	; 0x109c <Port_enuSetPinMode+0xf8>
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	91 05       	cpc	r25, r1
     ff2:	1c f4       	brge	.+6      	; 0xffa <Port_enuSetPinMode+0x56>
     ff4:	89 2b       	or	r24, r25
     ff6:	49 f0       	breq	.+18     	; 0x100a <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
     ff8:	30 c1       	rjmp	.+608    	; 0x125a <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	91 05       	cpc	r25, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <Port_enuSetPinMode+0x5e>
    1000:	97 c0       	rjmp	.+302    	; 0x1130 <Port_enuSetPinMode+0x18c>
    1002:	03 97       	sbiw	r24, 0x03	; 3
    1004:	09 f4       	brne	.+2      	; 0x1008 <Port_enuSetPinMode+0x64>
    1006:	df c0       	rjmp	.+446    	; 0x11c6 <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
    1008:	28 c1       	rjmp	.+592    	; 0x125a <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	80 5a       	subi	r24, 0xA0	; 160
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	fc 01       	movw	r30, r24
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	2b 81       	ldd	r18, Y+3	; 0x03
    1020:	22 2f       	mov	r18, r18
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	22 0f       	add	r18, r18
    1026:	33 1f       	adc	r19, r19
    1028:	20 5a       	subi	r18, 0xA0	; 160
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	f9 01       	movw	r30, r18
    102e:	20 81       	ld	r18, Z
    1030:	31 81       	ldd	r19, Z+1	; 0x01
    1032:	f9 01       	movw	r30, r18
    1034:	20 81       	ld	r18, Z
    1036:	62 2f       	mov	r22, r18
    1038:	2a 81       	ldd	r18, Y+2	; 0x02
    103a:	42 2f       	mov	r20, r18
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	21 e0       	ldi	r18, 0x01	; 1
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <Port_enuSetPinMode+0xa4>
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	4a 95       	dec	r20
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <Port_enuSetPinMode+0xa0>
    104c:	26 2b       	or	r18, r22
    104e:	fc 01       	movw	r30, r24
    1050:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	88 59       	subi	r24, 0x98	; 152
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	22 2f       	mov	r18, r18
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	22 0f       	add	r18, r18
    106e:	33 1f       	adc	r19, r19
    1070:	28 59       	subi	r18, 0x98	; 152
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	f9 01       	movw	r30, r18
    1076:	20 81       	ld	r18, Z
    1078:	31 81       	ldd	r19, Z+1	; 0x01
    107a:	f9 01       	movw	r30, r18
    107c:	20 81       	ld	r18, Z
    107e:	62 2f       	mov	r22, r18
    1080:	2a 81       	ldd	r18, Y+2	; 0x02
    1082:	42 2f       	mov	r20, r18
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	21 e0       	ldi	r18, 0x01	; 1
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <Port_enuSetPinMode+0xec>
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	4a 95       	dec	r20
    1092:	e2 f7       	brpl	.-8      	; 0x108c <Port_enuSetPinMode+0xe8>
    1094:	26 2b       	or	r18, r22
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18
					break;
    109a:	df c0       	rjmp	.+446    	; 0x125a <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	80 5a       	subi	r24, 0xA0	; 160
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	fc 01       	movw	r30, r24
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	2b 81       	ldd	r18, Y+3	; 0x03
    10b2:	22 2f       	mov	r18, r18
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	20 5a       	subi	r18, 0xA0	; 160
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	f9 01       	movw	r30, r18
    10c0:	20 81       	ld	r18, Z
    10c2:	31 81       	ldd	r19, Z+1	; 0x01
    10c4:	f9 01       	movw	r30, r18
    10c6:	20 81       	ld	r18, Z
    10c8:	62 2f       	mov	r22, r18
    10ca:	2a 81       	ldd	r18, Y+2	; 0x02
    10cc:	42 2f       	mov	r20, r18
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <Port_enuSetPinMode+0x136>
    10d6:	22 0f       	add	r18, r18
    10d8:	33 1f       	adc	r19, r19
    10da:	4a 95       	dec	r20
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <Port_enuSetPinMode+0x132>
    10de:	26 2b       	or	r18, r22
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	88 2f       	mov	r24, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	88 59       	subi	r24, 0x98	; 152
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	fc 01       	movw	r30, r24
    10f4:	80 81       	ld	r24, Z
    10f6:	91 81       	ldd	r25, Z+1	; 0x01
    10f8:	2b 81       	ldd	r18, Y+3	; 0x03
    10fa:	22 2f       	mov	r18, r18
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	22 0f       	add	r18, r18
    1100:	33 1f       	adc	r19, r19
    1102:	28 59       	subi	r18, 0x98	; 152
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	f9 01       	movw	r30, r18
    1108:	20 81       	ld	r18, Z
    110a:	31 81       	ldd	r19, Z+1	; 0x01
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	62 2f       	mov	r22, r18
    1112:	2a 81       	ldd	r18, Y+2	; 0x02
    1114:	42 2f       	mov	r20, r18
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <Port_enuSetPinMode+0x17e>
    111e:	22 0f       	add	r18, r18
    1120:	33 1f       	adc	r19, r19
    1122:	4a 95       	dec	r20
    1124:	e2 f7       	brpl	.-8      	; 0x111e <Port_enuSetPinMode+0x17a>
    1126:	20 95       	com	r18
    1128:	26 23       	and	r18, r22
    112a:	fc 01       	movw	r30, r24
    112c:	20 83       	st	Z, r18
							break;
    112e:	95 c0       	rjmp	.+298    	; 0x125a <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	80 5a       	subi	r24, 0xA0	; 160
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	fc 01       	movw	r30, r24
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	22 2f       	mov	r18, r18
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	20 5a       	subi	r18, 0xA0	; 160
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	f9 01       	movw	r30, r18
    1154:	20 81       	ld	r18, Z
    1156:	31 81       	ldd	r19, Z+1	; 0x01
    1158:	f9 01       	movw	r30, r18
    115a:	20 81       	ld	r18, Z
    115c:	62 2f       	mov	r22, r18
    115e:	2a 81       	ldd	r18, Y+2	; 0x02
    1160:	42 2f       	mov	r20, r18
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	21 e0       	ldi	r18, 0x01	; 1
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <Port_enuSetPinMode+0x1ca>
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	4a 95       	dec	r20
    1170:	e2 f7       	brpl	.-8      	; 0x116a <Port_enuSetPinMode+0x1c6>
    1172:	20 95       	com	r18
    1174:	26 23       	and	r18, r22
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	88 59       	subi	r24, 0x98	; 152
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	fc 01       	movw	r30, r24
    118a:	80 81       	ld	r24, Z
    118c:	91 81       	ldd	r25, Z+1	; 0x01
    118e:	2b 81       	ldd	r18, Y+3	; 0x03
    1190:	22 2f       	mov	r18, r18
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	22 0f       	add	r18, r18
    1196:	33 1f       	adc	r19, r19
    1198:	28 59       	subi	r18, 0x98	; 152
    119a:	3f 4f       	sbci	r19, 0xFF	; 255
    119c:	f9 01       	movw	r30, r18
    119e:	20 81       	ld	r18, Z
    11a0:	31 81       	ldd	r19, Z+1	; 0x01
    11a2:	f9 01       	movw	r30, r18
    11a4:	20 81       	ld	r18, Z
    11a6:	62 2f       	mov	r22, r18
    11a8:	2a 81       	ldd	r18, Y+2	; 0x02
    11aa:	42 2f       	mov	r20, r18
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	21 e0       	ldi	r18, 0x01	; 1
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <Port_enuSetPinMode+0x214>
    11b4:	22 0f       	add	r18, r18
    11b6:	33 1f       	adc	r19, r19
    11b8:	4a 95       	dec	r20
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <Port_enuSetPinMode+0x210>
    11bc:	20 95       	com	r18
    11be:	26 23       	and	r18, r22
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18
								break;
    11c4:	4a c0       	rjmp	.+148    	; 0x125a <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	80 5a       	subi	r24, 0xA0	; 160
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	fc 01       	movw	r30, r24
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	2b 81       	ldd	r18, Y+3	; 0x03
    11dc:	22 2f       	mov	r18, r18
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	20 5a       	subi	r18, 0xA0	; 160
    11e6:	3f 4f       	sbci	r19, 0xFF	; 255
    11e8:	f9 01       	movw	r30, r18
    11ea:	20 81       	ld	r18, Z
    11ec:	31 81       	ldd	r19, Z+1	; 0x01
    11ee:	f9 01       	movw	r30, r18
    11f0:	20 81       	ld	r18, Z
    11f2:	62 2f       	mov	r22, r18
    11f4:	2a 81       	ldd	r18, Y+2	; 0x02
    11f6:	42 2f       	mov	r20, r18
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	21 e0       	ldi	r18, 0x01	; 1
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <Port_enuSetPinMode+0x260>
    1200:	22 0f       	add	r18, r18
    1202:	33 1f       	adc	r19, r19
    1204:	4a 95       	dec	r20
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <Port_enuSetPinMode+0x25c>
    1208:	20 95       	com	r18
    120a:	26 23       	and	r18, r22
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	88 59       	subi	r24, 0x98	; 152
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	fc 01       	movw	r30, r24
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	2b 81       	ldd	r18, Y+3	; 0x03
    1226:	22 2f       	mov	r18, r18
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	22 0f       	add	r18, r18
    122c:	33 1f       	adc	r19, r19
    122e:	28 59       	subi	r18, 0x98	; 152
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	f9 01       	movw	r30, r18
    1234:	20 81       	ld	r18, Z
    1236:	31 81       	ldd	r19, Z+1	; 0x01
    1238:	f9 01       	movw	r30, r18
    123a:	20 81       	ld	r18, Z
    123c:	62 2f       	mov	r22, r18
    123e:	2a 81       	ldd	r18, Y+2	; 0x02
    1240:	42 2f       	mov	r20, r18
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	21 e0       	ldi	r18, 0x01	; 1
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	02 c0       	rjmp	.+4      	; 0x124e <Port_enuSetPinMode+0x2aa>
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	4a 95       	dec	r20
    1250:	e2 f7       	brpl	.-8      	; 0x124a <Port_enuSetPinMode+0x2a6>
    1252:	26 2b       	or	r18, r22
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
								break;
    1258:	00 00       	nop



	}

	return Loc_enuState;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	1f 92       	push	r1
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1276:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
    1278:	8f e5       	ldi	r24, 0x5F	; 95
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	2f e5       	ldi	r18, 0x5F	; 95
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	f9 01       	movw	r30, r18
    1282:	20 81       	ld	r18, Z
    1284:	20 68       	ori	r18, 0x80	; 128
    1286:	fc 01       	movw	r30, r24
    1288:	20 83       	st	Z, r18

	return Loc_enuGieState;
    128a:	89 81       	ldd	r24, Y+1	; 0x01

}
    128c:	0f 90       	pop	r0
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	1f 92       	push	r1
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    129e:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
    12a0:	8f e5       	ldi	r24, 0x5F	; 95
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	2f e5       	ldi	r18, 0x5F	; 95
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	f9 01       	movw	r30, r18
    12aa:	20 81       	ld	r18, Z
    12ac:	2f 77       	andi	r18, 0x7F	; 127
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18

		return Loc_enuGieState;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b4:	0f 90       	pop	r0
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <Gie_enuSetGloablInterrupt+0x6>
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    12c8:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
    12ca:	8f e5       	ldi	r24, 0x5F	; 95
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	2f e5       	ldi	r18, 0x5F	; 95
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	20 81       	ld	r18, Z
    12d6:	42 2f       	mov	r20, r18
    12d8:	4f 77       	andi	r20, 0x7F	; 127
    12da:	2a 81       	ldd	r18, Y+2	; 0x02
    12dc:	22 2f       	mov	r18, r18
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	36 95       	lsr	r19
    12e2:	32 2f       	mov	r19, r18
    12e4:	22 27       	eor	r18, r18
    12e6:	37 95       	ror	r19
    12e8:	27 95       	ror	r18
    12ea:	24 2b       	or	r18, r20
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18

			return Loc_enuGieState;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	00 d0       	rcall	.+0      	; 0x1302 <Gie_enuGetGloablInterrupt+0x6>
    1302:	00 d0       	rcall	.+0      	; 0x1304 <Gie_enuGetGloablInterrupt+0x8>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	8a 83       	std	Y+2, r24	; 0x02
    130a:	7c 83       	std	Y+4, r23	; 0x04
    130c:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    130e:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	89 2b       	or	r24, r25
    1316:	19 f4       	brne	.+6      	; 0x131e <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	0c c0       	rjmp	.+24     	; 0x1336 <Gie_enuGetGloablInterrupt+0x3a>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
    131e:	8f e5       	ldi	r24, 0x5F	; 95
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fc 01       	movw	r30, r24
    1324:	80 81       	ld	r24, Z
    1326:	28 2f       	mov	r18, r24
    1328:	22 1f       	adc	r18, r18
    132a:	22 27       	eor	r18, r18
    132c:	22 1f       	adc	r18, r18
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	fc 01       	movw	r30, r24
    1334:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	00 d0       	rcall	.+0      	; 0x134c <Exti_enuEnable+0x6>
    134c:	1f 92       	push	r1
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	8a 83       	std	Y+2, r24	; 0x02
    1354:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	18 f0       	brcs	.+6      	; 0x1366 <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	8f c0       	rjmp	.+286    	; 0x1484 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	91 05       	cpc	r25, r1
    1370:	89 f1       	breq	.+98     	; 0x13d4 <Exti_enuEnable+0x8e>
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	91 05       	cpc	r25, r1
    1376:	09 f4       	brne	.+2      	; 0x137a <Exti_enuEnable+0x34>
    1378:	62 c0       	rjmp	.+196    	; 0x143e <Exti_enuEnable+0xf8>
    137a:	89 2b       	or	r24, r25
    137c:	09 f0       	breq	.+2      	; 0x1380 <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
    137e:	82 c0       	rjmp	.+260    	; 0x1484 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
    1380:	85 e5       	ldi	r24, 0x55	; 85
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	25 e5       	ldi	r18, 0x55	; 85
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	f9 01       	movw	r30, r18
    138a:	20 81       	ld	r18, Z
    138c:	32 2f       	mov	r19, r18
    138e:	3e 7f       	andi	r19, 0xFE	; 254
    1390:	2b 81       	ldd	r18, Y+3	; 0x03
    1392:	21 70       	andi	r18, 0x01	; 1
    1394:	23 2b       	or	r18, r19
    1396:	fc 01       	movw	r30, r24
    1398:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
    139a:	85 e5       	ldi	r24, 0x55	; 85
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	25 e5       	ldi	r18, 0x55	; 85
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	f9 01       	movw	r30, r18
    13a4:	20 81       	ld	r18, Z
    13a6:	42 2f       	mov	r20, r18
    13a8:	4d 7f       	andi	r20, 0xFD	; 253
    13aa:	2b 81       	ldd	r18, Y+3	; 0x03
    13ac:	26 95       	lsr	r18
    13ae:	22 2f       	mov	r18, r18
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	21 70       	andi	r18, 0x01	; 1
    13b4:	33 27       	eor	r19, r19
    13b6:	22 0f       	add	r18, r18
    13b8:	33 1f       	adc	r19, r19
    13ba:	24 2b       	or	r18, r20
    13bc:	fc 01       	movw	r30, r24
    13be:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
    13c0:	8b e5       	ldi	r24, 0x5B	; 91
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	2b e5       	ldi	r18, 0x5B	; 91
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	f9 01       	movw	r30, r18
    13ca:	20 81       	ld	r18, Z
    13cc:	20 64       	ori	r18, 0x40	; 64
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18

			break;
    13d2:	58 c0       	rjmp	.+176    	; 0x1484 <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
    13d4:	85 e5       	ldi	r24, 0x55	; 85
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	25 e5       	ldi	r18, 0x55	; 85
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	42 2f       	mov	r20, r18
    13e2:	4b 7f       	andi	r20, 0xFB	; 251
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	22 2f       	mov	r18, r18
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	21 70       	andi	r18, 0x01	; 1
    13ec:	33 27       	eor	r19, r19
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	24 2b       	or	r18, r20
    13f8:	fc 01       	movw	r30, r24
    13fa:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
    13fc:	85 e5       	ldi	r24, 0x55	; 85
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	25 e5       	ldi	r18, 0x55	; 85
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	f9 01       	movw	r30, r18
    1406:	20 81       	ld	r18, Z
    1408:	42 2f       	mov	r20, r18
    140a:	47 7f       	andi	r20, 0xF7	; 247
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	26 95       	lsr	r18
    1410:	22 2f       	mov	r18, r18
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	21 70       	andi	r18, 0x01	; 1
    1416:	33 27       	eor	r19, r19
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	24 2b       	or	r18, r20
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
    142a:	8b e5       	ldi	r24, 0x5B	; 91
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	2b e5       	ldi	r18, 0x5B	; 91
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	f9 01       	movw	r30, r18
    1434:	20 81       	ld	r18, Z
    1436:	20 68       	ori	r18, 0x80	; 128
    1438:	fc 01       	movw	r30, r24
    143a:	20 83       	st	Z, r18
			break;
    143c:	23 c0       	rjmp	.+70     	; 0x1484 <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
    143e:	84 e5       	ldi	r24, 0x54	; 84
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	24 e5       	ldi	r18, 0x54	; 84
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	f9 01       	movw	r30, r18
    1448:	20 81       	ld	r18, Z
    144a:	42 2f       	mov	r20, r18
    144c:	4f 7b       	andi	r20, 0xBF	; 191
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	22 2f       	mov	r18, r18
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	21 70       	andi	r18, 0x01	; 1
    1456:	33 27       	eor	r19, r19
    1458:	00 24       	eor	r0, r0
    145a:	36 95       	lsr	r19
    145c:	27 95       	ror	r18
    145e:	07 94       	ror	r0
    1460:	36 95       	lsr	r19
    1462:	27 95       	ror	r18
    1464:	07 94       	ror	r0
    1466:	32 2f       	mov	r19, r18
    1468:	20 2d       	mov	r18, r0
    146a:	24 2b       	or	r18, r20
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
    1470:	8b e5       	ldi	r24, 0x5B	; 91
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	2b e5       	ldi	r18, 0x5B	; 91
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	f9 01       	movw	r30, r18
    147a:	20 81       	ld	r18, Z
    147c:	20 62       	ori	r18, 0x20	; 32
    147e:	fc 01       	movw	r30, r24
    1480:	20 83       	st	Z, r18
			break;
    1482:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    1484:	89 81       	ldd	r24, Y+1	; 0x01

}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	08 95       	ret

00001492 <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	00 d0       	rcall	.+0      	; 0x1498 <Exti_enuDisable+0x6>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	18 f0       	brcs	.+6      	; 0x14ae <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	2a c0       	rjmp	.+84     	; 0x1502 <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	81 f0       	breq	.+32     	; 0x14da <Exti_enuDisable+0x48>
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	91 05       	cpc	r25, r1
    14be:	b9 f0       	breq	.+46     	; 0x14ee <Exti_enuDisable+0x5c>
    14c0:	89 2b       	or	r24, r25
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
    14c4:	1e c0       	rjmp	.+60     	; 0x1502 <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
    14c6:	8b e5       	ldi	r24, 0x5B	; 91
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	2b e5       	ldi	r18, 0x5B	; 91
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	f9 01       	movw	r30, r18
    14d0:	20 81       	ld	r18, Z
    14d2:	2f 7b       	andi	r18, 0xBF	; 191
    14d4:	fc 01       	movw	r30, r24
    14d6:	20 83       	st	Z, r18
			break;
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
    14da:	8b e5       	ldi	r24, 0x5B	; 91
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	2b e5       	ldi	r18, 0x5B	; 91
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	f9 01       	movw	r30, r18
    14e4:	20 81       	ld	r18, Z
    14e6:	2f 77       	andi	r18, 0x7F	; 127
    14e8:	fc 01       	movw	r30, r24
    14ea:	20 83       	st	Z, r18
			break;
    14ec:	0a c0       	rjmp	.+20     	; 0x1502 <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
    14ee:	8b e5       	ldi	r24, 0x5B	; 91
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	2b e5       	ldi	r18, 0x5B	; 91
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	f9 01       	movw	r30, r18
    14f8:	20 81       	ld	r18, Z
    14fa:	2f 7d       	andi	r18, 0xDF	; 223
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 83       	st	Z, r18
			break;
    1500:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    1502:	89 81       	ldd	r24, Y+1	; 0x01

}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	00 d0       	rcall	.+0      	; 0x1514 <Exti_enuSetCallbackFunction+0x6>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <Exti_enuSetCallbackFunction+0x8>
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	8a 83       	std	Y+2, r24	; 0x02
    151c:	7c 83       	std	Y+4, r23	; 0x04
    151e:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	18 f0       	brcs	.+6      	; 0x1530 <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	13 c0       	rjmp	.+38     	; 0x1556 <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	89 2b       	or	r24, r25
    1536:	19 f4       	brne	.+6      	; 0x153e <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	0c c0       	rjmp	.+24     	; 0x1556 <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	87 51       	subi	r24, 0x17	; 23
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	2b 81       	ldd	r18, Y+3	; 0x03
    154e:	3c 81       	ldd	r19, Y+4	; 0x04
    1550:	fc 01       	movw	r30, r24
    1552:	31 83       	std	Z+1, r19	; 0x01
    1554:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
    1556:	89 81       	ldd	r24, Y+1	; 0x01

}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret

00001566 <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    1566:	1f 92       	push	r1
    1568:	0f 92       	push	r0
    156a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    156e:	0f 92       	push	r0
    1570:	11 24       	eor	r1, r1
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
    1592:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <Exti_InterruptHandler>
    1596:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <Exti_InterruptHandler+0x1>
    159a:	89 2b       	or	r24, r25
    159c:	31 f0       	breq	.+12     	; 0x15aa <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
    159e:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <Exti_InterruptHandler>
    15a2:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <Exti_InterruptHandler+0x1>
    15a6:	fc 01       	movw	r30, r24
    15a8:	09 95       	icall

}
    15aa:	00 00       	nop
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	ff 91       	pop	r31
    15b2:	ef 91       	pop	r30
    15b4:	bf 91       	pop	r27
    15b6:	af 91       	pop	r26
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	7f 91       	pop	r23
    15be:	6f 91       	pop	r22
    15c0:	5f 91       	pop	r21
    15c2:	4f 91       	pop	r20
    15c4:	3f 91       	pop	r19
    15c6:	2f 91       	pop	r18
    15c8:	0f 90       	pop	r0
    15ca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    15d4:	1f 92       	push	r1
    15d6:	0f 92       	push	r0
    15d8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
    1600:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <Exti_InterruptHandler+0x2>
    1604:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <Exti_InterruptHandler+0x3>
    1608:	89 2b       	or	r24, r25
    160a:	31 f0       	breq	.+12     	; 0x1618 <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
    160c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <Exti_InterruptHandler+0x2>
    1610:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <Exti_InterruptHandler+0x3>
    1614:	fc 01       	movw	r30, r24
    1616:	09 95       	icall

}
    1618:	00 00       	nop
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    164a:	0f 92       	push	r0
    164c:	11 24       	eor	r1, r1
    164e:	2f 93       	push	r18
    1650:	3f 93       	push	r19
    1652:	4f 93       	push	r20
    1654:	5f 93       	push	r21
    1656:	6f 93       	push	r22
    1658:	7f 93       	push	r23
    165a:	8f 93       	push	r24
    165c:	9f 93       	push	r25
    165e:	af 93       	push	r26
    1660:	bf 93       	push	r27
    1662:	ef 93       	push	r30
    1664:	ff 93       	push	r31
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
    166e:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <Exti_InterruptHandler+0x4>
    1672:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <Exti_InterruptHandler+0x5>
    1676:	89 2b       	or	r24, r25
    1678:	31 f0       	breq	.+12     	; 0x1686 <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
    167a:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <Exti_InterruptHandler+0x4>
    167e:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <Exti_InterruptHandler+0x5>
    1682:	fc 01       	movw	r30, r24
    1684:	09 95       	icall

}
    1686:	00 00       	nop
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	7f 91       	pop	r23
    169a:	6f 91       	pop	r22
    169c:	5f 91       	pop	r21
    169e:	4f 91       	pop	r20
    16a0:	3f 91       	pop	r19
    16a2:	2f 91       	pop	r18
    16a4:	0f 90       	pop	r0
    16a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <Dio_enuWriteChannel+0x6>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <Dio_enuWriteChannel+0x8>
    16b8:	1f 92       	push	r1
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	8c 83       	std	Y+4, r24	; 0x04
    16c0:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    16c2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	87 70       	andi	r24, 0x07	; 7
    16c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	86 95       	lsr	r24
    16ce:	86 95       	lsr	r24
    16d0:	86 95       	lsr	r24
    16d2:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	80 32       	cpi	r24, 0x20	; 32
    16d8:	18 f0       	brcs	.+6      	; 0x16e0 <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	4e c0       	rjmp	.+156    	; 0x177c <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	80 59       	subi	r24, 0x90	; 144
    16ec:	9f 4f       	sbci	r25, 0xFF	; 255
    16ee:	fc 01       	movw	r30, r24
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	fc 01       	movw	r30, r24
    16f6:	80 81       	ld	r24, Z
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	2a 81       	ldd	r18, Y+2	; 0x02
    16fe:	22 2f       	mov	r18, r18
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <Dio_enuWriteChannel+0x58>
    1704:	95 95       	asr	r25
    1706:	87 95       	ror	r24
    1708:	2a 95       	dec	r18
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <Dio_enuWriteChannel+0x54>
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	99 27       	eor	r25, r25
    1710:	89 2b       	or	r24, r25
    1712:	19 f4       	brne	.+6      	; 0x171a <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	31 c0       	rjmp	.+98     	; 0x177c <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	88 58       	subi	r24, 0x88	; 136
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	fc 01       	movw	r30, r24
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	2b 81       	ldd	r18, Y+3	; 0x03
    1730:	22 2f       	mov	r18, r18
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	28 58       	subi	r18, 0x88	; 136
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	f9 01       	movw	r30, r18
    173e:	20 81       	ld	r18, Z
    1740:	31 81       	ldd	r19, Z+1	; 0x01
    1742:	f9 01       	movw	r30, r18
    1744:	20 81       	ld	r18, Z
    1746:	62 2f       	mov	r22, r18
    1748:	2a 81       	ldd	r18, Y+2	; 0x02
    174a:	42 2f       	mov	r20, r18
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <Dio_enuWriteChannel+0xa8>
    1754:	22 0f       	add	r18, r18
    1756:	33 1f       	adc	r19, r19
    1758:	4a 95       	dec	r20
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <Dio_enuWriteChannel+0xa4>
    175c:	20 95       	com	r18
    175e:	62 23       	and	r22, r18
    1760:	2d 81       	ldd	r18, Y+5	; 0x05
    1762:	22 2f       	mov	r18, r18
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	4a 81       	ldd	r20, Y+2	; 0x02
    1768:	44 2f       	mov	r20, r20
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <Dio_enuWriteChannel+0xc2>
    176e:	22 0f       	add	r18, r18
    1770:	33 1f       	adc	r19, r19
    1772:	4a 95       	dec	r20
    1774:	e2 f7       	brpl	.-8      	; 0x176e <Dio_enuWriteChannel+0xbe>
    1776:	26 2b       	or	r18, r22
    1778:	fc 01       	movw	r30, r24
    177a:	20 83       	st	Z, r18

}

	return Loc_enuState;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	00 d0       	rcall	.+0      	; 0x1794 <Dio_enuReadChannel+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <Dio_enuReadChannel+0x8>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <Dio_enuReadChannel+0xa>
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	8c 83       	std	Y+4, r24	; 0x04
    179e:	7e 83       	std	Y+6, r23	; 0x06
    17a0:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    17a2:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	87 70       	andi	r24, 0x07	; 7
    17a8:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	86 95       	lsr	r24
    17ae:	86 95       	lsr	r24
    17b0:	86 95       	lsr	r24
    17b2:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	80 32       	cpi	r24, 0x20	; 32
    17b8:	18 f0       	brcs	.+6      	; 0x17c0 <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	40 c0       	rjmp	.+128    	; 0x1840 <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	80 59       	subi	r24, 0x90	; 144
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	fc 01       	movw	r30, r24
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	fc 01       	movw	r30, r24
    17d6:	80 81       	ld	r24, Z
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	2a 81       	ldd	r18, Y+2	; 0x02
    17de:	22 2f       	mov	r18, r18
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <Dio_enuReadChannel+0x5a>
    17e4:	95 95       	asr	r25
    17e6:	87 95       	ror	r24
    17e8:	2a 95       	dec	r18
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <Dio_enuReadChannel+0x56>
    17ec:	81 70       	andi	r24, 0x01	; 1
    17ee:	99 27       	eor	r25, r25
    17f0:	89 2b       	or	r24, r25
    17f2:	19 f0       	breq	.+6      	; 0x17fa <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	23 c0       	rjmp	.+70     	; 0x1840 <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	89 2b       	or	r24, r25
    1800:	19 f4       	brne	.+6      	; 0x1808 <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    1802:	84 e0       	ldi	r24, 0x04	; 4
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	1c c0       	rjmp	.+56     	; 0x1840 <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	80 58       	subi	r24, 0x80	; 128
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	fc 01       	movw	r30, r24
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	fc 01       	movw	r30, r24
    181e:	80 81       	ld	r24, Z
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	2a 81       	ldd	r18, Y+2	; 0x02
    1826:	22 2f       	mov	r18, r18
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <Dio_enuReadChannel+0xa2>
    182c:	95 95       	asr	r25
    182e:	87 95       	ror	r24
    1830:	2a 95       	dec	r18
    1832:	e2 f7       	brpl	.-8      	; 0x182c <Dio_enuReadChannel+0x9e>
    1834:	28 2f       	mov	r18, r24
    1836:	21 70       	andi	r18, 0x01	; 1
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18


	}

		return Loc_enuState;
    1840:	89 81       	ldd	r24, Y+1	; 0x01

}
    1842:	26 96       	adiw	r28, 0x06	; 6
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	00 d0       	rcall	.+0      	; 0x185a <Dio_enuWritePort+0x6>
    185a:	1f 92       	push	r1
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1864:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	84 30       	cpi	r24, 0x04	; 4
    186a:	18 f0       	brcs	.+6      	; 0x1872 <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	1e c0       	rjmp	.+60     	; 0x18ae <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	80 59       	subi	r24, 0x90	; 144
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	fc 01       	movw	r30, r24
    1882:	80 81       	ld	r24, Z
    1884:	91 81       	ldd	r25, Z+1	; 0x01
    1886:	fc 01       	movw	r30, r24
    1888:	80 81       	ld	r24, Z
    188a:	8f 3f       	cpi	r24, 0xFF	; 255
    188c:	19 f0       	breq	.+6      	; 0x1894 <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	0d c0       	rjmp	.+26     	; 0x18ae <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	88 58       	subi	r24, 0x88	; 136
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	fc 01       	movw	r30, r24
    18a4:	80 81       	ld	r24, Z
    18a6:	91 81       	ldd	r25, Z+1	; 0x01
    18a8:	2b 81       	ldd	r18, Y+3	; 0x03
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    18ae:	89 81       	ldd	r24, Y+1	; 0x01



}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <Dio_enuReadPort+0x6>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <Dio_enuReadPort+0x8>
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	7c 83       	std	Y+4, r23	; 0x04
    18cc:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    18ce:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	18 f0       	brcs	.+6      	; 0x18dc <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    18d6:	83 e0       	ldi	r24, 0x03	; 3
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	28 c0       	rjmp	.+80     	; 0x192c <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	80 59       	subi	r24, 0x90	; 144
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	fc 01       	movw	r30, r24
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	fc 01       	movw	r30, r24
    18f2:	80 81       	ld	r24, Z
    18f4:	88 23       	and	r24, r24
    18f6:	19 f0       	breq	.+6      	; 0x18fe <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	17 c0       	rjmp	.+46     	; 0x192c <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	89 2b       	or	r24, r25
    1904:	19 f4       	brne	.+6      	; 0x190c <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    1906:	84 e0       	ldi	r24, 0x04	; 4
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	10 c0       	rjmp	.+32     	; 0x192c <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	80 58       	subi	r24, 0x80	; 128
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	fc 01       	movw	r30, r24
    191c:	80 81       	ld	r24, Z
    191e:	91 81       	ldd	r25, Z+1	; 0x01
    1920:	fc 01       	movw	r30, r24
    1922:	20 81       	ld	r18, Z
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	9c 81       	ldd	r25, Y+4	; 0x04
    1928:	fc 01       	movw	r30, r24
    192a:	20 83       	st	Z, r18

		}

			return Loc_enuState;
    192c:	89 81       	ldd	r24, Y+1	; 0x01

}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	00 d0       	rcall	.+0      	; 0x1942 <Dio_enuFlipChannel+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <Dio_enuFlipChannel+0x8>
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    194a:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	87 70       	andi	r24, 0x07	; 7
    1950:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	86 95       	lsr	r24
    1956:	86 95       	lsr	r24
    1958:	86 95       	lsr	r24
    195a:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	80 32       	cpi	r24, 0x20	; 32
    1960:	18 f0       	brcs	.+6      	; 0x1968 <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	41 c0       	rjmp	.+130    	; 0x19ea <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	80 59       	subi	r24, 0x90	; 144
    1974:	9f 4f       	sbci	r25, 0xFF	; 255
    1976:	fc 01       	movw	r30, r24
    1978:	80 81       	ld	r24, Z
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	fc 01       	movw	r30, r24
    197e:	80 81       	ld	r24, Z
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	2a 81       	ldd	r18, Y+2	; 0x02
    1986:	22 2f       	mov	r18, r18
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <Dio_enuFlipChannel+0x54>
    198c:	95 95       	asr	r25
    198e:	87 95       	ror	r24
    1990:	2a 95       	dec	r18
    1992:	e2 f7       	brpl	.-8      	; 0x198c <Dio_enuFlipChannel+0x50>
    1994:	81 70       	andi	r24, 0x01	; 1
    1996:	99 27       	eor	r25, r25
    1998:	89 2b       	or	r24, r25
    199a:	19 f4       	brne	.+6      	; 0x19a2 <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	24 c0       	rjmp	.+72     	; 0x19ea <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	88 58       	subi	r24, 0x88	; 136
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	fc 01       	movw	r30, r24
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	2b 81       	ldd	r18, Y+3	; 0x03
    19b8:	22 2f       	mov	r18, r18
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	22 0f       	add	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	28 58       	subi	r18, 0x88	; 136
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	f9 01       	movw	r30, r18
    19c6:	20 81       	ld	r18, Z
    19c8:	31 81       	ldd	r19, Z+1	; 0x01
    19ca:	f9 01       	movw	r30, r18
    19cc:	20 81       	ld	r18, Z
    19ce:	62 2f       	mov	r22, r18
    19d0:	2a 81       	ldd	r18, Y+2	; 0x02
    19d2:	42 2f       	mov	r20, r18
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	21 e0       	ldi	r18, 0x01	; 1
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <Dio_enuFlipChannel+0xa4>
    19dc:	22 0f       	add	r18, r18
    19de:	33 1f       	adc	r19, r19
    19e0:	4a 95       	dec	r20
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <Dio_enuFlipChannel+0xa0>
    19e4:	26 27       	eor	r18, r22
    19e6:	fc 01       	movw	r30, r24
    19e8:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <Adc_enuInit>:
/********************************** Data Type Declarations ****************************/

/********************************** Software Interfaces Declarations *******************/


Adc_StatusErrorType Adc_enuInit(const Adc_PinConfigType* Address_Adc){
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <Adc_enuInit+0x6>
    1a00:	1f 92       	push	r1
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	9b 83       	std	Y+3, r25	; 0x03
    1a08:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	9b 81       	ldd	r25, Y+3	; 0x03
    1a12:	89 2b       	or	r24, r25
    1a14:	19 f4       	brne	.+6      	; 0x1a1c <Adc_enuInit+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	65 c0       	rjmp	.+202    	; 0x1ae6 <Adc_enuInit+0xec>
	    }
	    else{
	    	 /* Disable Adc Peripheral */
	    	        Adc_Disable();
    1a1c:	86 e2       	ldi	r24, 0x26	; 38
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	26 e2       	ldi	r18, 0x26	; 38
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	f9 01       	movw	r30, r18
    1a26:	20 81       	ld	r18, Z
    1a28:	2f 77       	andi	r18, 0x7F	; 127
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	20 83       	st	Z, r18



	    	        /* Choose Conversion Clock  */
	    	        Adc_SelectConversionClock(Address_Adc->conversion_frequancy);
    1a2e:	86 e2       	ldi	r24, 0x26	; 38
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	26 e2       	ldi	r18, 0x26	; 38
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	f9 01       	movw	r30, r18
    1a38:	20 81       	ld	r18, Z
    1a3a:	42 2f       	mov	r20, r18
    1a3c:	40 77       	andi	r20, 0x70	; 112
    1a3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a40:	3b 81       	ldd	r19, Y+3	; 0x03
    1a42:	f9 01       	movw	r30, r18
    1a44:	23 81       	ldd	r18, Z+3	; 0x03
    1a46:	27 70       	andi	r18, 0x07	; 7
    1a48:	24 2b       	or	r18, r20
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	20 83       	st	Z, r18

	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    1a4e:	87 e2       	ldi	r24, 0x27	; 39
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	27 e2       	ldi	r18, 0x27	; 39
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	f9 01       	movw	r30, r18
    1a58:	20 81       	ld	r18, Z
    1a5a:	42 2f       	mov	r20, r18
    1a5c:	48 7f       	andi	r20, 0xF8	; 248
    1a5e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a60:	3b 81       	ldd	r19, Y+3	; 0x03
    1a62:	f9 01       	movw	r30, r18
    1a64:	20 81       	ld	r18, Z
    1a66:	27 70       	andi	r18, 0x07	; 7
    1a68:	24 2b       	or	r18, r20
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	20 83       	st	Z, r18


	    	        /*Configure Result Format */
	    	        Adc_SelectResultFormat(Address_Adc->result_format);
    1a6e:	87 e2       	ldi	r24, 0x27	; 39
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	27 e2       	ldi	r18, 0x27	; 39
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	f9 01       	movw	r30, r18
    1a78:	20 81       	ld	r18, Z
    1a7a:	42 2f       	mov	r20, r18
    1a7c:	4f 7d       	andi	r20, 0xDF	; 223
    1a7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1a80:	3b 81       	ldd	r19, Y+3	; 0x03
    1a82:	f9 01       	movw	r30, r18
    1a84:	22 81       	ldd	r18, Z+2	; 0x02
    1a86:	22 2f       	mov	r18, r18
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	22 0f       	add	r18, r18
    1a8c:	33 1f       	adc	r19, r19
    1a8e:	22 95       	swap	r18
    1a90:	32 95       	swap	r19
    1a92:	30 7f       	andi	r19, 0xF0	; 240
    1a94:	32 27       	eor	r19, r18
    1a96:	20 7f       	andi	r18, 0xF0	; 240
    1a98:	32 27       	eor	r19, r18
    1a9a:	24 2b       	or	r18, r20
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	20 83       	st	Z, r18

	    	        /* Configure Voltage Reference*/
	    	        Adc_SelectRefVoltageSource(Address_Adc->vref_source);
    1aa0:	87 e2       	ldi	r24, 0x27	; 39
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	27 e2       	ldi	r18, 0x27	; 39
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	20 81       	ld	r18, Z
    1aac:	42 2f       	mov	r20, r18
    1aae:	4f 73       	andi	r20, 0x3F	; 63
    1ab0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ab2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ab4:	f9 01       	movw	r30, r18
    1ab6:	21 81       	ldd	r18, Z+1	; 0x01
    1ab8:	22 2f       	mov	r18, r18
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	00 24       	eor	r0, r0
    1abe:	36 95       	lsr	r19
    1ac0:	27 95       	ror	r18
    1ac2:	07 94       	ror	r0
    1ac4:	36 95       	lsr	r19
    1ac6:	27 95       	ror	r18
    1ac8:	07 94       	ror	r0
    1aca:	32 2f       	mov	r19, r18
    1acc:	20 2d       	mov	r18, r0
    1ace:	24 2b       	or	r18, r20
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	20 83       	st	Z, r18

	    	        /* Enable Adc Peripheral */
	    	        Adc_Enable();
    1ad4:	86 e2       	ldi	r24, 0x26	; 38
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	26 e2       	ldi	r18, 0x26	; 38
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	f9 01       	movw	r30, r18
    1ade:	20 81       	ld	r18, Z
    1ae0:	20 68       	ori	r18, 0x80	; 128
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	20 83       	st	Z, r18

	    }

	    return Loc_enuAdcStatus;
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	08 95       	ret

00001af4 <Adc_enuDeInit>:

Adc_StatusErrorType Adc_enuDeInit(void){
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	1f 92       	push	r1
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	89 83       	std	Y+1, r24	; 0x01

	Adc_Disable();
    1b02:	86 e2       	ldi	r24, 0x26	; 38
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	26 e2       	ldi	r18, 0x26	; 38
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	f9 01       	movw	r30, r18
    1b0c:	20 81       	ld	r18, Z
    1b0e:	2f 77       	andi	r18, 0x7F	; 127
    1b10:	fc 01       	movw	r30, r24
    1b12:	20 83       	st	Z, r18
	    return Loc_enuAdcStatus;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b16:	0f 90       	pop	r0
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <Adc_enuStartConversionSync>:


Adc_StatusErrorType Adc_enuStartConversionSync(const Adc_PinConfigType* Address_Adc, u16* Address_ResultDigitalVoltage){
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	a6 97       	sbiw	r28, 0x26	; 38
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	9c a3       	std	Y+36, r25	; 0x24
    1b34:	8b a3       	std	Y+35, r24	; 0x23
    1b36:	7e a3       	std	Y+38, r23	; 0x26
    1b38:	6d a3       	std	Y+37, r22	; 0x25

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8AdcInterruptStatus = ZERO_VALUE;
    1b3e:	1a 82       	std	Y+2, r1	; 0x02
	    if(NULL == Address_Adc || Address_ResultDigitalVoltage == NULL){
    1b40:	8b a1       	ldd	r24, Y+35	; 0x23
    1b42:	9c a1       	ldd	r25, Y+36	; 0x24
    1b44:	89 2b       	or	r24, r25
    1b46:	21 f0       	breq	.+8      	; 0x1b50 <Adc_enuStartConversionSync+0x32>
    1b48:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b4c:	89 2b       	or	r24, r25
    1b4e:	19 f4       	brne	.+6      	; 0x1b56 <Adc_enuStartConversionSync+0x38>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	54 c1       	rjmp	.+680    	; 0x1dfe <Adc_enuStartConversionSync+0x2e0>
	    }
	    else{

	            /* Read Status of The interrupt */
	    	    Loc_u8AdcInterruptStatus = Adc_GetInterruptEnableStatus();
    1b56:	86 e2       	ldi	r24, 0x26	; 38
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	80 81       	ld	r24, Z
    1b5e:	86 95       	lsr	r24
    1b60:	86 95       	lsr	r24
    1b62:	86 95       	lsr	r24
    1b64:	81 70       	andi	r24, 0x01	; 1
    1b66:	8a 83       	std	Y+2, r24	; 0x02

	            /* Choose Selected Channel */
	            Adc_SelectChannel(Address_Adc->channel_number);
    1b68:	87 e2       	ldi	r24, 0x27	; 39
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	27 e2       	ldi	r18, 0x27	; 39
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	f9 01       	movw	r30, r18
    1b72:	20 81       	ld	r18, Z
    1b74:	42 2f       	mov	r20, r18
    1b76:	48 7f       	andi	r20, 0xF8	; 248
    1b78:	2b a1       	ldd	r18, Y+35	; 0x23
    1b7a:	3c a1       	ldd	r19, Y+36	; 0x24
    1b7c:	f9 01       	movw	r30, r18
    1b7e:	20 81       	ld	r18, Z
    1b80:	27 70       	andi	r18, 0x07	; 7
    1b82:	24 2b       	or	r18, r20
    1b84:	fc 01       	movw	r30, r24
    1b86:	20 83       	st	Z, r18


	            /* Disable Interrupt not to jump after completing*/
	            Adc_SetInterruptEnable(ZERO_VALUE);
    1b88:	86 e2       	ldi	r24, 0x26	; 38
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	26 e2       	ldi	r18, 0x26	; 38
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	f9 01       	movw	r30, r18
    1b92:	20 81       	ld	r18, Z
    1b94:	27 7f       	andi	r18, 0xF7	; 247
    1b96:	fc 01       	movw	r30, r24
    1b98:	20 83       	st	Z, r18


	            /* Start Conversion  */
	            Adc_StartConversion();
    1b9a:	86 e2       	ldi	r24, 0x26	; 38
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	26 e2       	ldi	r18, 0x26	; 38
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	f9 01       	movw	r30, r18
    1ba4:	20 81       	ld	r18, Z
    1ba6:	20 64       	ori	r18, 0x40	; 64
    1ba8:	fc 01       	movw	r30, r24
    1baa:	20 83       	st	Z, r18



	            /* wait =polling for conversion */
	            while( ZERO_VALUE == Adc_IsConversionCompleted() );
    1bac:	00 00       	nop
    1bae:	86 e2       	ldi	r24, 0x26	; 38
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	80 81       	ld	r24, Z
    1bb6:	82 95       	swap	r24
    1bb8:	86 95       	lsr	r24
    1bba:	86 95       	lsr	r24
    1bbc:	83 70       	andi	r24, 0x03	; 3
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	81 70       	andi	r24, 0x01	; 1
    1bc4:	99 27       	eor	r25, r25
    1bc6:	89 2b       	or	r24, r25
    1bc8:	91 f7       	brne	.-28     	; 0x1bae <Adc_enuStartConversionSync+0x90>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a0 e2       	ldi	r26, 0x20	; 32
    1bd0:	b1 e4       	ldi	r27, 0x41	; 65
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
    1bd4:	9c 83       	std	Y+4, r25	; 0x04
    1bd6:	ad 83       	std	Y+5, r26	; 0x05
    1bd8:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1bda:	2b ea       	ldi	r18, 0xAB	; 171
    1bdc:	3a ea       	ldi	r19, 0xAA	; 170
    1bde:	4a ea       	ldi	r20, 0xAA	; 170
    1be0:	50 e4       	ldi	r21, 0x40	; 64
    1be2:	6b 81       	ldd	r22, Y+3	; 0x03
    1be4:	7c 81       	ldd	r23, Y+4	; 0x04
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8f 83       	std	Y+7, r24	; 0x07
    1bf4:	98 87       	std	Y+8, r25	; 0x08
    1bf6:	a9 87       	std	Y+9, r26	; 0x09
    1bf8:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	50 e4       	ldi	r21, 0x40	; 64
    1c02:	6b 81       	ldd	r22, Y+3	; 0x03
    1c04:	7c 81       	ldd	r23, Y+4	; 0x04
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8b 87       	std	Y+11, r24	; 0x0b
    1c14:	9c 87       	std	Y+12, r25	; 0x0c
    1c16:	ad 87       	std	Y+13, r26	; 0x0d
    1c18:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	6f 81       	ldd	r22, Y+7	; 0x07
    1c24:	78 85       	ldd	r23, Y+8	; 0x08
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	1c f4       	brge	.+6      	; 0x1c38 <Adc_enuStartConversionSync+0x11a>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	8f 87       	std	Y+15, r24	; 0x0f
    1c36:	b2 c0       	rjmp	.+356    	; 0x1d9c <Adc_enuStartConversionSync+0x27e>
	else if (__tmp2 > 65535)
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c48:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    1c4c:	18 16       	cp	r1, r24
    1c4e:	0c f0       	brlt	.+2      	; 0x1c52 <Adc_enuStartConversionSync+0x134>
    1c50:	7b c0       	rjmp	.+246    	; 0x1d48 <Adc_enuStartConversionSync+0x22a>
	{
		_delay_ms(__us / 1000.0);
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a e7       	ldi	r20, 0x7A	; 122
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	6b 81       	ldd	r22, Y+3	; 0x03
    1c5c:	7c 81       	ldd	r23, Y+4	; 0x04
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	0e 94 01 21 	call	0x4202	; 0x4202 <__divsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	88 8b       	std	Y+16, r24	; 0x10
    1c6c:	99 8b       	std	Y+17, r25	; 0x11
    1c6e:	aa 8b       	std	Y+18, r26	; 0x12
    1c70:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a e7       	ldi	r20, 0x7A	; 122
    1c78:	55 e4       	ldi	r21, 0x45	; 69
    1c7a:	68 89       	ldd	r22, Y+16	; 0x10
    1c7c:	79 89       	ldd	r23, Y+17	; 0x11
    1c7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1c80:	9b 89       	ldd	r25, Y+19	; 0x13
    1c82:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	8c 8b       	std	Y+20, r24	; 0x14
    1c8c:	9d 8b       	std	Y+21, r25	; 0x15
    1c8e:	ae 8b       	std	Y+22, r26	; 0x16
    1c90:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	6c 89       	ldd	r22, Y+20	; 0x14
    1c9c:	7d 89       	ldd	r23, Y+21	; 0x15
    1c9e:	8e 89       	ldd	r24, Y+22	; 0x16
    1ca0:	9f 89       	ldd	r25, Y+23	; 0x17
    1ca2:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    1ca6:	88 23       	and	r24, r24
    1ca8:	2c f4       	brge	.+10     	; 0x1cb4 <Adc_enuStartConversionSync+0x196>
		__ticks = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	99 8f       	std	Y+25, r25	; 0x19
    1cb0:	88 8f       	std	Y+24, r24	; 0x18
    1cb2:	3f c0       	rjmp	.+126    	; 0x1d32 <Adc_enuStartConversionSync+0x214>
	else if (__tmp > 65535)
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	6c 89       	ldd	r22, Y+20	; 0x14
    1cbe:	7d 89       	ldd	r23, Y+21	; 0x15
    1cc0:	8e 89       	ldd	r24, Y+22	; 0x16
    1cc2:	9f 89       	ldd	r25, Y+23	; 0x17
    1cc4:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    1cc8:	18 16       	cp	r1, r24
    1cca:	4c f5       	brge	.+82     	; 0x1d1e <Adc_enuStartConversionSync+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	68 89       	ldd	r22, Y+16	; 0x10
    1cd6:	79 89       	ldd	r23, Y+17	; 0x11
    1cd8:	8a 89       	ldd	r24, Y+18	; 0x12
    1cda:	9b 89       	ldd	r25, Y+19	; 0x13
    1cdc:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	99 8f       	std	Y+25, r25	; 0x19
    1cf2:	88 8f       	std	Y+24, r24	; 0x18
    1cf4:	0f c0       	rjmp	.+30     	; 0x1d14 <Adc_enuStartConversionSync+0x1f6>
    1cf6:	80 e9       	ldi	r24, 0x90	; 144
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	9b 8f       	std	Y+27, r25	; 0x1b
    1cfc:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cfe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d00:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <Adc_enuStartConversionSync+0x1e4>
    1d06:	9b 8f       	std	Y+27, r25	; 0x1b
    1d08:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d0c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	99 8f       	std	Y+25, r25	; 0x19
    1d12:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d14:	88 8d       	ldd	r24, Y+24	; 0x18
    1d16:	99 8d       	ldd	r25, Y+25	; 0x19
    1d18:	89 2b       	or	r24, r25
    1d1a:	69 f7       	brne	.-38     	; 0x1cf6 <Adc_enuStartConversionSync+0x1d8>
    1d1c:	3f c0       	rjmp	.+126    	; 0x1d9c <Adc_enuStartConversionSync+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1e:	6c 89       	ldd	r22, Y+20	; 0x14
    1d20:	7d 89       	ldd	r23, Y+21	; 0x15
    1d22:	8e 89       	ldd	r24, Y+22	; 0x16
    1d24:	9f 89       	ldd	r25, Y+23	; 0x17
    1d26:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	99 8f       	std	Y+25, r25	; 0x19
    1d30:	88 8f       	std	Y+24, r24	; 0x18
    1d32:	88 8d       	ldd	r24, Y+24	; 0x18
    1d34:	99 8d       	ldd	r25, Y+25	; 0x19
    1d36:	9d 8f       	std	Y+29, r25	; 0x1d
    1d38:	8c 8f       	std	Y+28, r24	; 0x1c
    1d3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <Adc_enuStartConversionSync+0x220>
    1d42:	9d 8f       	std	Y+29, r25	; 0x1d
    1d44:	8c 8f       	std	Y+28, r24	; 0x1c
    1d46:	2a c0       	rjmp	.+84     	; 0x1d9c <Adc_enuStartConversionSync+0x27e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	53 e4       	ldi	r21, 0x43	; 67
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	ac f4       	brge	.+42     	; 0x1d8a <Adc_enuStartConversionSync+0x26c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d68:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9f 8f       	std	Y+31, r25	; 0x1f
    1d72:	8e 8f       	std	Y+30, r24	; 0x1e
    1d74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d76:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d78:	99 a3       	std	Y+33, r25	; 0x21
    1d7a:	88 a3       	std	Y+32, r24	; 0x20
    1d7c:	88 a1       	ldd	r24, Y+32	; 0x20
    1d7e:	99 a1       	ldd	r25, Y+33	; 0x21
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <Adc_enuStartConversionSync+0x262>
    1d84:	99 a3       	std	Y+33, r25	; 0x21
    1d86:	88 a3       	std	Y+32, r24	; 0x20
    1d88:	0f c0       	rjmp	.+30     	; 0x1da8 <Adc_enuStartConversionSync+0x28a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8c:	78 85       	ldd	r23, Y+8	; 0x08
    1d8e:	89 85       	ldd	r24, Y+9	; 0x09
    1d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d92:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8f 87       	std	Y+15, r24	; 0x0f
    1d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9e:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1da0:	8a a1       	ldd	r24, Y+34	; 0x22
    1da2:	8a 95       	dec	r24
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <Adc_enuStartConversionSync+0x284>
    1da6:	8a a3       	std	Y+34, r24	; 0x22
	            _delay_us(10);

	            Loc_enuAdcStatus &= Adc_GetResult(Address_Adc->result_format ,Address_ResultDigitalVoltage);
    1da8:	8b a1       	ldd	r24, Y+35	; 0x23
    1daa:	9c a1       	ldd	r25, Y+36	; 0x24
    1dac:	fc 01       	movw	r30, r24
    1dae:	22 81       	ldd	r18, Z+2	; 0x02
    1db0:	8d a1       	ldd	r24, Y+37	; 0x25
    1db2:	9e a1       	ldd	r25, Y+38	; 0x26
    1db4:	bc 01       	movw	r22, r24
    1db6:	82 2f       	mov	r24, r18
    1db8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <Adc_GetResult>
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	89 23       	and	r24, r25
    1dc2:	89 83       	std	Y+1, r24	; 0x01

	            /* Return Status Of The Adc Interrupt*/
	            Adc_ClearInterruptFlag();
    1dc4:	86 e2       	ldi	r24, 0x26	; 38
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	26 e2       	ldi	r18, 0x26	; 38
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	f9 01       	movw	r30, r18
    1dce:	20 81       	ld	r18, Z
    1dd0:	20 61       	ori	r18, 0x10	; 16
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	20 83       	st	Z, r18
	            Adc_SetInterruptEnable(Loc_u8AdcInterruptStatus);
    1dd6:	86 e2       	ldi	r24, 0x26	; 38
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	26 e2       	ldi	r18, 0x26	; 38
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	f9 01       	movw	r30, r18
    1de0:	20 81       	ld	r18, Z
    1de2:	42 2f       	mov	r20, r18
    1de4:	47 7f       	andi	r20, 0xF7	; 247
    1de6:	2a 81       	ldd	r18, Y+2	; 0x02
    1de8:	22 2f       	mov	r18, r18
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	22 0f       	add	r18, r18
    1dee:	33 1f       	adc	r19, r19
    1df0:	22 0f       	add	r18, r18
    1df2:	33 1f       	adc	r19, r19
    1df4:	22 0f       	add	r18, r18
    1df6:	33 1f       	adc	r19, r19
    1df8:	24 2b       	or	r18, r20
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	20 83       	st	Z, r18
	        }

	    return Loc_enuAdcStatus;
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e00:	a6 96       	adiw	r28, 0x26	; 38
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	08 95       	ret

00001e12 <Adc_ConvertResultToVoltage>:



Adc_StatusErrorType Adc_ConvertResultToVoltage( u16 Copy_u16DigitalValue, f32* Address_ResultAnalogVoltage){
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <Adc_ConvertResultToVoltage+0x6>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <Adc_ConvertResultToVoltage+0x8>
    1e1a:	1f 92       	push	r1
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	9b 83       	std	Y+3, r25	; 0x03
    1e22:	8a 83       	std	Y+2, r24	; 0x02
    1e24:	7d 83       	std	Y+5, r23	; 0x05
    1e26:	6c 83       	std	Y+4, r22	; 0x04

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_ResultAnalogVoltage){
    1e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e30:	89 2b       	or	r24, r25
    1e32:	19 f4       	brne	.+6      	; 0x1e3a <Adc_ConvertResultToVoltage+0x28>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	1c c0       	rjmp	.+56     	; 0x1e72 <Adc_ConvertResultToVoltage+0x60>
	    }
	    else{
	           /* Vanalog = Vdigital * step    */
	           /* Step Size = (Vmax-Vmin)/2^n      */
	           *Address_ResultAnalogVoltage = Copy_u16DigitalValue*0.004883F;
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	cc 01       	movw	r24, r24
    1e40:	a0 e0       	ldi	r26, 0x00	; 0
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 a9 21 	call	0x4352	; 0x4352 <__floatunsisf>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	23 e9       	ldi	r18, 0x93	; 147
    1e52:	31 e0       	ldi	r19, 0x01	; 1
    1e54:	40 ea       	ldi	r20, 0xA0	; 160
    1e56:	5b e3       	ldi	r21, 0x3B	; 59
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	2c 81       	ldd	r18, Y+4	; 0x04
    1e66:	3d 81       	ldd	r19, Y+5	; 0x05
    1e68:	f9 01       	movw	r30, r18
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	a2 83       	std	Z+2, r26	; 0x02
    1e70:	b3 83       	std	Z+3, r27	; 0x03
	       }

	    return Loc_enuAdcStatus;
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <Adc_StartConversionAsync>:


Adc_StatusErrorType Adc_StartConversionAsync(const Adc_PinConfigType* Address_Adc){
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <Adc_StartConversionAsync+0x6>
    1e8a:	1f 92       	push	r1
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	9b 83       	std	Y+3, r25	; 0x03
    1e92:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	89 2b       	or	r24, r25
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <Adc_StartConversionAsync+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	89 83       	std	Y+1, r24	; 0x01
    1ea4:	34 c0       	rjmp	.+104    	; 0x1f0e <Adc_StartConversionAsync+0x8a>
	    }
	    else{
	    	 /* You can't start A new Conversion Unless The old One Is Done*/
	    	        while( ZERO_VALUE == Adc_IsConversionCompleted() );
    1ea6:	00 00       	nop
    1ea8:	86 e2       	ldi	r24, 0x26	; 38
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	fc 01       	movw	r30, r24
    1eae:	80 81       	ld	r24, Z
    1eb0:	82 95       	swap	r24
    1eb2:	86 95       	lsr	r24
    1eb4:	86 95       	lsr	r24
    1eb6:	83 70       	andi	r24, 0x03	; 3
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	81 70       	andi	r24, 0x01	; 1
    1ebe:	99 27       	eor	r25, r25
    1ec0:	89 2b       	or	r24, r25
    1ec2:	91 f7       	brne	.-28     	; 0x1ea8 <Adc_StartConversionAsync+0x24>

	    	        Global_AdcInterruptIndex = (u8)Address_Adc->channel_number;
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	fc 01       	movw	r30, r24
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Global_AdcInterruptIndex>
	    	        current_format = Address_Adc->result_format;
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <current_format>
	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    1edc:	87 e2       	ldi	r24, 0x27	; 39
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	27 e2       	ldi	r18, 0x27	; 39
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	f9 01       	movw	r30, r18
    1ee6:	20 81       	ld	r18, Z
    1ee8:	42 2f       	mov	r20, r18
    1eea:	48 7f       	andi	r20, 0xF8	; 248
    1eec:	2a 81       	ldd	r18, Y+2	; 0x02
    1eee:	3b 81       	ldd	r19, Y+3	; 0x03
    1ef0:	f9 01       	movw	r30, r18
    1ef2:	20 81       	ld	r18, Z
    1ef4:	27 70       	andi	r18, 0x07	; 7
    1ef6:	24 2b       	or	r18, r20
    1ef8:	fc 01       	movw	r30, r24
    1efa:	20 83       	st	Z, r18


	    	        /* Start Conversion  */
	    	        Adc_StartConversion();
    1efc:	86 e2       	ldi	r24, 0x26	; 38
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	26 e2       	ldi	r18, 0x26	; 38
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	f9 01       	movw	r30, r18
    1f06:	20 81       	ld	r18, Z
    1f08:	20 64       	ori	r18, 0x40	; 64
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	20 83       	st	Z, r18
	    }

	    return Loc_enuAdcStatus;
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	08 95       	ret

00001f1c <Adc_enuEnableInterrupt>:


Adc_StatusErrorType Adc_enuEnableInterrupt(void){
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	1f 92       	push	r1
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	89 83       	std	Y+1, r24	; 0x01
	Adc_EnableInterrupt();
    1f2a:	86 e2       	ldi	r24, 0x26	; 38
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	26 e2       	ldi	r18, 0x26	; 38
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	f9 01       	movw	r30, r18
    1f34:	20 81       	ld	r18, Z
    1f36:	28 60       	ori	r18, 0x08	; 8
    1f38:	fc 01       	movw	r30, r24
    1f3a:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3e:	0f 90       	pop	r0
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	08 95       	ret

00001f46 <Adc_enuDisableInterrupt>:


Adc_StatusErrorType Adc_enuDisableInterrupt(void){
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	1f 92       	push	r1
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	89 83       	std	Y+1, r24	; 0x01
	Adc_DisableInterrupt();
    1f54:	86 e2       	ldi	r24, 0x26	; 38
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	26 e2       	ldi	r18, 0x26	; 38
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	f9 01       	movw	r30, r18
    1f5e:	20 81       	ld	r18, Z
    1f60:	27 7f       	andi	r18, 0xF7	; 247
    1f62:	fc 01       	movw	r30, r24
    1f64:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f68:	0f 90       	pop	r0
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <Adc_GetResult>:




////////////////////////////////////////////////Helpers Functions ///////////////////////////
static Adc_StatusErrorType Adc_GetResult(const Adc_ResultFormartType Copy_enuResultFormat, u16* Address_Result){
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <Adc_GetResult+0x6>
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <Adc_GetResult+0x8>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	8a 83       	std	Y+2, r24	; 0x02
    1f7e:	7c 83       	std	Y+4, r23	; 0x04
    1f80:	6b 83       	std	Y+3, r22	; 0x03

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Result){
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	89 2b       	or	r24, r25
    1f8c:	19 f4       	brne	.+6      	; 0x1f94 <Adc_GetResult+0x24>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	30 c0       	rjmp	.+96     	; 0x1ff4 <Adc_GetResult+0x84>
	    }

	    	else{
	    	        switch(Copy_enuResultFormat){
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	89 2b       	or	r24, r25
    1f9c:	b9 f4       	brne	.+46     	; 0x1fcc <Adc_GetResult+0x5c>

	    	        case ADC_RIGHT_JUSTIFIED:



	    	                *Address_Result = (ADCL) | (ADCH <<8) ;
    1f9e:	84 e2       	ldi	r24, 0x24	; 36
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	80 81       	ld	r24, Z
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	85 e2       	ldi	r24, 0x25	; 37
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	fc 01       	movw	r30, r24
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 2f       	mov	r24, r24
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	98 2f       	mov	r25, r24
    1fb8:	88 27       	eor	r24, r24
    1fba:	82 2b       	or	r24, r18
    1fbc:	93 2b       	or	r25, r19
    1fbe:	9c 01       	movw	r18, r24
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	31 83       	std	Z+1, r19	; 0x01
    1fc8:	20 83       	st	Z, r18
	    	                break;
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <Adc_GetResult+0x84>

	    	            default:
	    	            	*Address_Result = (ADCHL>>6) & 0x3FF;
    1fcc:	84 e2       	ldi	r24, 0x24	; 36
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	9c 01       	movw	r18, r24
    1fd8:	00 24       	eor	r0, r0
    1fda:	22 0f       	add	r18, r18
    1fdc:	33 1f       	adc	r19, r19
    1fde:	00 1c       	adc	r0, r0
    1fe0:	22 0f       	add	r18, r18
    1fe2:	33 1f       	adc	r19, r19
    1fe4:	00 1c       	adc	r0, r0
    1fe6:	23 2f       	mov	r18, r19
    1fe8:	30 2d       	mov	r19, r0
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	fc 01       	movw	r30, r24
    1ff0:	31 83       	std	Z+1, r19	; 0x01
    1ff2:	20 83       	st	Z, r18

	    	        }
	    	    }


	    return Loc_enuAdcStatus;
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	08 95       	ret

00002004 <Adc_SetCallbackFunction>:

Adc_StatusErrorType Adc_SetCallbackFunction(const Adc_PinConfigType* Address_Adc, void (*callback)(u16)){
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	00 d0       	rcall	.+0      	; 0x200a <Adc_SetCallbackFunction+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <Adc_SetCallbackFunction+0x8>
    200c:	1f 92       	push	r1
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9b 83       	std	Y+3, r25	; 0x03
    2014:	8a 83       	std	Y+2, r24	; 0x02
    2016:	7d 83       	std	Y+5, r23	; 0x05
    2018:	6c 83       	std	Y+4, r22	; 0x04
	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	89 83       	std	Y+1, r24	; 0x01
		    if(NULL == Address_Adc){
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	89 2b       	or	r24, r25
    2024:	19 f4       	brne	.+6      	; 0x202c <Adc_SetCallbackFunction+0x28>
		    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	0f c0       	rjmp	.+30     	; 0x204a <Adc_SetCallbackFunction+0x46>
		    }
		    else{
		    	Adc_InterruptHandlerArr[Address_Adc->channel_number] = callback;
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	9b 81       	ldd	r25, Y+3	; 0x03
    2030:	fc 01       	movw	r30, r24
    2032:	80 81       	ld	r24, Z
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	81 51       	subi	r24, 0x11	; 17
    203e:	9f 4f       	sbci	r25, 0xFF	; 255
    2040:	2c 81       	ldd	r18, Y+4	; 0x04
    2042:	3d 81       	ldd	r19, Y+5	; 0x05
    2044:	fc 01       	movw	r30, r24
    2046:	31 83       	std	Z+1, r19	; 0x01
    2048:	20 83       	st	Z, r18
		    }
		    return Loc_enuAdcStatus;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	08 95       	ret

0000205c <__vector_16>:

// ISR function For ADC
void __vector_16(void) __attribute__((signal));

void __vector_16(void){
    205c:	1f 92       	push	r1
    205e:	0f 92       	push	r0
    2060:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2064:	0f 92       	push	r0
    2066:	11 24       	eor	r1, r1
    2068:	2f 93       	push	r18
    206a:	3f 93       	push	r19
    206c:	4f 93       	push	r20
    206e:	5f 93       	push	r21
    2070:	6f 93       	push	r22
    2072:	7f 93       	push	r23
    2074:	8f 93       	push	r24
    2076:	9f 93       	push	r25
    2078:	af 93       	push	r26
    207a:	bf 93       	push	r27
    207c:	ef 93       	push	r30
    207e:	ff 93       	push	r31
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	00 d0       	rcall	.+0      	; 0x2086 <__vector_16+0x2a>
    2086:	1f 92       	push	r1
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62

	    u16 Loc_u16Result;
	    Adc_StatusErrorType Loc_enuAdcStatus  = ADC_STATUS_OK;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	89 83       	std	Y+1, r24	; 0x01

	    Loc_enuAdcStatus = Adc_GetResult(current_format,&Loc_u16Result);
    2090:	20 91 ff 00 	lds	r18, 0x00FF	; 0x8000ff <current_format>
    2094:	ce 01       	movw	r24, r28
    2096:	02 96       	adiw	r24, 0x02	; 2
    2098:	bc 01       	movw	r22, r24
    209a:	82 2f       	mov	r24, r18
    209c:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <Adc_GetResult>
    20a0:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL != Adc_InterruptHandlerArr[Global_AdcInterruptIndex]){
    20a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Global_AdcInterruptIndex>
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	81 51       	subi	r24, 0x11	; 17
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	fc 01       	movw	r30, r24
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	89 2b       	or	r24, r25
    20ba:	79 f0       	breq	.+30     	; 0x20da <__vector_16+0x7e>
	        Adc_InterruptHandlerArr[Global_AdcInterruptIndex](Loc_u16Result);
    20bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Global_AdcInterruptIndex>
    20c0:	88 2f       	mov	r24, r24
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	81 51       	subi	r24, 0x11	; 17
    20ca:	9f 4f       	sbci	r25, 0xFF	; 255
    20cc:	fc 01       	movw	r30, r24
    20ce:	20 81       	ld	r18, Z
    20d0:	31 81       	ldd	r19, Z+1	; 0x01
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	9b 81       	ldd	r25, Y+3	; 0x03
    20d6:	f9 01       	movw	r30, r18
    20d8:	09 95       	icall
	    }
	    else {/* do nothing , error in declaration */ }

}
    20da:	00 00       	nop
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	ff 91       	pop	r31
    20e8:	ef 91       	pop	r30
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2104:	0f 90       	pop	r0
    2106:	1f 90       	pop	r1
    2108:	18 95       	reti

0000210a <Seven_Segment_WriteBCDConnection>:



/********************************** Software Interfaces Declarations *******************/

Seven_Segment_StatusErrorType  Seven_Segment_WriteBCDConnection(const Seven_Segment_BCDType* Address_Segment, u8 Copy_u8Value){
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	27 97       	sbiw	r28, 0x07	; 7
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	6f 83       	std	Y+7, r22	; 0x07

	Seven_Segment_StatusErrorType Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_OK;
    2124:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    2126:	1b 82       	std	Y+3, r1	; 0x03
	    u8 Loc_u8FinalBit = DIO_LOW;
    2128:	1c 82       	std	Y+4, r1	; 0x04
	    u8 Loc_u8Counter=ZERO_VALUE;
    212a:	1a 82       	std	Y+2, r1	; 0x02

	    if (NULL == Address_Segment  ){
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	89 2b       	or	r24, r25
    2132:	19 f4       	brne	.+6      	; 0x213a <Seven_Segment_WriteBCDConnection+0x30>

	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	22 c0       	rjmp	.+68     	; 0x217e <Seven_Segment_WriteBCDConnection+0x74>
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    213a:	1a 82       	std	Y+2, r1	; 0x02
    213c:	1d c0       	rjmp	.+58     	; 0x2178 <Seven_Segment_WriteBCDConnection+0x6e>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
    213e:	8f 81       	ldd	r24, Y+7	; 0x07
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	2a 81       	ldd	r18, Y+2	; 0x02
    2146:	22 2f       	mov	r18, r18
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <Seven_Segment_WriteBCDConnection+0x46>
    214c:	95 95       	asr	r25
    214e:	87 95       	ror	r24
    2150:	2a 95       	dec	r18
    2152:	e2 f7       	brpl	.-8      	; 0x214c <Seven_Segment_WriteBCDConnection+0x42>
    2154:	81 70       	andi	r24, 0x01	; 1
    2156:	8c 83       	std	Y+4, r24	; 0x04
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	2d 81       	ldd	r18, Y+5	; 0x05
    2160:	3e 81       	ldd	r19, Y+6	; 0x06
    2162:	82 0f       	add	r24, r18
    2164:	93 1f       	adc	r25, r19
    2166:	fc 01       	movw	r30, r24
    2168:	80 81       	ld	r24, Z
    216a:	6c 81       	ldd	r22, Y+4	; 0x04
    216c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    2170:	8b 83       	std	Y+3, r24	; 0x03
	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	8f 5f       	subi	r24, 0xFF	; 255
    2176:	8a 83       	std	Y+2, r24	; 0x02
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	84 30       	cpi	r24, 0x04	; 4
    217c:	00 f3       	brcs	.-64     	; 0x213e <Seven_Segment_WriteBCDConnection+0x34>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
	        }
	    }

	    return Loc_enuSegmentState;
    217e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2180:	27 96       	adiw	r28, 0x07	; 7
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	08 95       	ret

00002192 <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	ef 97       	sbiw	r28, 0x3f	; 63
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	9f af       	std	Y+63, r25	; 0x3f
    21a8:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    21aa:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
    21ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    21ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    21b0:	89 2b       	or	r24, r25
    21b2:	19 f4       	brne	.+6      	; 0x21ba <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	0f c2       	rjmp	.+1054   	; 0x25d8 <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    21ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    21bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    21be:	68 e3       	ldi	r22, 0x38	; 56
    21c0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a0 ea       	ldi	r26, 0xA0	; 160
    21cc:	b0 e4       	ldi	r27, 0x40	; 64
    21ce:	8a 83       	std	Y+2, r24	; 0x02
    21d0:	9b 83       	std	Y+3, r25	; 0x03
    21d2:	ac 83       	std	Y+4, r26	; 0x04
    21d4:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a e7       	ldi	r20, 0x7A	; 122
    21dc:	55 e4       	ldi	r21, 0x45	; 69
    21de:	6a 81       	ldd	r22, Y+2	; 0x02
    21e0:	7b 81       	ldd	r23, Y+3	; 0x03
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	9d 81       	ldd	r25, Y+5	; 0x05
    21e6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	8c ab       	std	Y+52, r24	; 0x34
    21f0:	9d ab       	std	Y+53, r25	; 0x35
    21f2:	ae ab       	std	Y+54, r26	; 0x36
    21f4:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	6c a9       	ldd	r22, Y+52	; 0x34
    2200:	7d a9       	ldd	r23, Y+53	; 0x35
    2202:	8e a9       	ldd	r24, Y+54	; 0x36
    2204:	9f a9       	ldd	r25, Y+55	; 0x37
    2206:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    220a:	88 23       	and	r24, r24
    220c:	2c f4       	brge	.+10     	; 0x2218 <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	99 af       	std	Y+57, r25	; 0x39
    2214:	88 af       	std	Y+56, r24	; 0x38
    2216:	3f c0       	rjmp	.+126    	; 0x2296 <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	3f ef       	ldi	r19, 0xFF	; 255
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	57 e4       	ldi	r21, 0x47	; 71
    2220:	6c a9       	ldd	r22, Y+52	; 0x34
    2222:	7d a9       	ldd	r23, Y+53	; 0x35
    2224:	8e a9       	ldd	r24, Y+54	; 0x36
    2226:	9f a9       	ldd	r25, Y+55	; 0x37
    2228:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    222c:	18 16       	cp	r1, r24
    222e:	4c f5       	brge	.+82     	; 0x2282 <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	6a 81       	ldd	r22, Y+2	; 0x02
    223a:	7b 81       	ldd	r23, Y+3	; 0x03
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	9d 81       	ldd	r25, Y+5	; 0x05
    2240:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	99 af       	std	Y+57, r25	; 0x39
    2256:	88 af       	std	Y+56, r24	; 0x38
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <Lcd_4bit_enuInit+0xe6>
    225a:	80 e9       	ldi	r24, 0x90	; 144
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	9b af       	std	Y+59, r25	; 0x3b
    2260:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2262:	8a ad       	ldd	r24, Y+58	; 0x3a
    2264:	9b ad       	ldd	r25, Y+59	; 0x3b
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <Lcd_4bit_enuInit+0xd4>
    226a:	9b af       	std	Y+59, r25	; 0x3b
    226c:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226e:	88 ad       	ldd	r24, Y+56	; 0x38
    2270:	99 ad       	ldd	r25, Y+57	; 0x39
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	99 af       	std	Y+57, r25	; 0x39
    2276:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2278:	88 ad       	ldd	r24, Y+56	; 0x38
    227a:	99 ad       	ldd	r25, Y+57	; 0x39
    227c:	89 2b       	or	r24, r25
    227e:	69 f7       	brne	.-38     	; 0x225a <Lcd_4bit_enuInit+0xc8>
    2280:	14 c0       	rjmp	.+40     	; 0x22aa <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2282:	6c a9       	ldd	r22, Y+52	; 0x34
    2284:	7d a9       	ldd	r23, Y+53	; 0x35
    2286:	8e a9       	ldd	r24, Y+54	; 0x36
    2288:	9f a9       	ldd	r25, Y+55	; 0x37
    228a:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	99 af       	std	Y+57, r25	; 0x39
    2294:	88 af       	std	Y+56, r24	; 0x38
    2296:	88 ad       	ldd	r24, Y+56	; 0x38
    2298:	99 ad       	ldd	r25, Y+57	; 0x39
    229a:	9d af       	std	Y+61, r25	; 0x3d
    229c:	8c af       	std	Y+60, r24	; 0x3c
    229e:	8c ad       	ldd	r24, Y+60	; 0x3c
    22a0:	9d ad       	ldd	r25, Y+61	; 0x3d
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <Lcd_4bit_enuInit+0x110>
    22a6:	9d af       	std	Y+61, r25	; 0x3d
    22a8:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    22aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    22ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    22ae:	68 e3       	ldi	r22, 0x38	; 56
    22b0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a6 e1       	ldi	r26, 0x16	; 22
    22bc:	b3 e4       	ldi	r27, 0x43	; 67
    22be:	8e 83       	std	Y+6, r24	; 0x06
    22c0:	9f 83       	std	Y+7, r25	; 0x07
    22c2:	a8 87       	std	Y+8, r26	; 0x08
    22c4:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    22c6:	2b ea       	ldi	r18, 0xAB	; 171
    22c8:	3a ea       	ldi	r19, 0xAA	; 170
    22ca:	4a ea       	ldi	r20, 0xAA	; 170
    22cc:	50 e4       	ldi	r21, 0x40	; 64
    22ce:	6e 81       	ldd	r22, Y+6	; 0x06
    22d0:	7f 81       	ldd	r23, Y+7	; 0x07
    22d2:	88 85       	ldd	r24, Y+8	; 0x08
    22d4:	99 85       	ldd	r25, Y+9	; 0x09
    22d6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	88 8f       	std	Y+24, r24	; 0x18
    22e0:	99 8f       	std	Y+25, r25	; 0x19
    22e2:	aa 8f       	std	Y+26, r26	; 0x1a
    22e4:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	50 e4       	ldi	r21, 0x40	; 64
    22ee:	6e 81       	ldd	r22, Y+6	; 0x06
    22f0:	7f 81       	ldd	r23, Y+7	; 0x07
    22f2:	88 85       	ldd	r24, Y+8	; 0x08
    22f4:	99 85       	ldd	r25, Y+9	; 0x09
    22f6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8c 8f       	std	Y+28, r24	; 0x1c
    2300:	9d 8f       	std	Y+29, r25	; 0x1d
    2302:	ae 8f       	std	Y+30, r26	; 0x1e
    2304:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	68 8d       	ldd	r22, Y+24	; 0x18
    2310:	79 8d       	ldd	r23, Y+25	; 0x19
    2312:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2314:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2316:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    231a:	88 23       	and	r24, r24
    231c:	1c f4       	brge	.+6      	; 0x2324 <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	88 a3       	std	Y+32, r24	; 0x20
    2322:	b2 c0       	rjmp	.+356    	; 0x2488 <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	3f ef       	ldi	r19, 0xFF	; 255
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	57 e4       	ldi	r21, 0x47	; 71
    232c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    232e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2330:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2332:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2334:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    2338:	18 16       	cp	r1, r24
    233a:	0c f0       	brlt	.+2      	; 0x233e <Lcd_4bit_enuInit+0x1ac>
    233c:	7b c0       	rjmp	.+246    	; 0x2434 <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4a e7       	ldi	r20, 0x7A	; 122
    2344:	54 e4       	ldi	r21, 0x44	; 68
    2346:	6e 81       	ldd	r22, Y+6	; 0x06
    2348:	7f 81       	ldd	r23, Y+7	; 0x07
    234a:	88 85       	ldd	r24, Y+8	; 0x08
    234c:	99 85       	ldd	r25, Y+9	; 0x09
    234e:	0e 94 01 21 	call	0x4202	; 0x4202 <__divsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	89 a3       	std	Y+33, r24	; 0x21
    2358:	9a a3       	std	Y+34, r25	; 0x22
    235a:	ab a3       	std	Y+35, r26	; 0x23
    235c:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a e7       	ldi	r20, 0x7A	; 122
    2364:	55 e4       	ldi	r21, 0x45	; 69
    2366:	69 a1       	ldd	r22, Y+33	; 0x21
    2368:	7a a1       	ldd	r23, Y+34	; 0x22
    236a:	8b a1       	ldd	r24, Y+35	; 0x23
    236c:	9c a1       	ldd	r25, Y+36	; 0x24
    236e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8d a3       	std	Y+37, r24	; 0x25
    2378:	9e a3       	std	Y+38, r25	; 0x26
    237a:	af a3       	std	Y+39, r26	; 0x27
    237c:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	6d a1       	ldd	r22, Y+37	; 0x25
    2388:	7e a1       	ldd	r23, Y+38	; 0x26
    238a:	8f a1       	ldd	r24, Y+39	; 0x27
    238c:	98 a5       	ldd	r25, Y+40	; 0x28
    238e:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9a a7       	std	Y+42, r25	; 0x2a
    239c:	89 a7       	std	Y+41, r24	; 0x29
    239e:	3f c0       	rjmp	.+126    	; 0x241e <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	6d a1       	ldd	r22, Y+37	; 0x25
    23aa:	7e a1       	ldd	r23, Y+38	; 0x26
    23ac:	8f a1       	ldd	r24, Y+39	; 0x27
    23ae:	98 a5       	ldd	r25, Y+40	; 0x28
    23b0:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	69 a1       	ldd	r22, Y+33	; 0x21
    23c2:	7a a1       	ldd	r23, Y+34	; 0x22
    23c4:	8b a1       	ldd	r24, Y+35	; 0x23
    23c6:	9c a1       	ldd	r25, Y+36	; 0x24
    23c8:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9a a7       	std	Y+42, r25	; 0x2a
    23de:	89 a7       	std	Y+41, r24	; 0x29
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <Lcd_4bit_enuInit+0x26e>
    23e2:	80 e9       	ldi	r24, 0x90	; 144
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	9c a7       	std	Y+44, r25	; 0x2c
    23e8:	8b a7       	std	Y+43, r24	; 0x2b
    23ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <Lcd_4bit_enuInit+0x25c>
    23f2:	9c a7       	std	Y+44, r25	; 0x2c
    23f4:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	89 a5       	ldd	r24, Y+41	; 0x29
    23f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9a a7       	std	Y+42, r25	; 0x2a
    23fe:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	89 a5       	ldd	r24, Y+41	; 0x29
    2402:	9a a5       	ldd	r25, Y+42	; 0x2a
    2404:	89 2b       	or	r24, r25
    2406:	69 f7       	brne	.-38     	; 0x23e2 <Lcd_4bit_enuInit+0x250>
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6d a1       	ldd	r22, Y+37	; 0x25
    240c:	7e a1       	ldd	r23, Y+38	; 0x26
    240e:	8f a1       	ldd	r24, Y+39	; 0x27
    2410:	98 a5       	ldd	r25, Y+40	; 0x28
    2412:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9a a7       	std	Y+42, r25	; 0x2a
    241c:	89 a7       	std	Y+41, r24	; 0x29
    241e:	89 a5       	ldd	r24, Y+41	; 0x29
    2420:	9a a5       	ldd	r25, Y+42	; 0x2a
    2422:	9e a7       	std	Y+46, r25	; 0x2e
    2424:	8d a7       	std	Y+45, r24	; 0x2d
    2426:	8d a5       	ldd	r24, Y+45	; 0x2d
    2428:	9e a5       	ldd	r25, Y+46	; 0x2e
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <Lcd_4bit_enuInit+0x298>
    242e:	9e a7       	std	Y+46, r25	; 0x2e
    2430:	8d a7       	std	Y+45, r24	; 0x2d
    2432:	2a c0       	rjmp	.+84     	; 0x2488 <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	53 e4       	ldi	r21, 0x43	; 67
    243c:	68 8d       	ldd	r22, Y+24	; 0x18
    243e:	79 8d       	ldd	r23, Y+25	; 0x19
    2440:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2442:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2444:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    2448:	18 16       	cp	r1, r24
    244a:	ac f4       	brge	.+42     	; 0x2476 <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    244c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    244e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2450:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2452:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2454:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	98 ab       	std	Y+48, r25	; 0x30
    245e:	8f a7       	std	Y+47, r24	; 0x2f
    2460:	8f a5       	ldd	r24, Y+47	; 0x2f
    2462:	98 a9       	ldd	r25, Y+48	; 0x30
    2464:	9a ab       	std	Y+50, r25	; 0x32
    2466:	89 ab       	std	Y+49, r24	; 0x31
    2468:	89 a9       	ldd	r24, Y+49	; 0x31
    246a:	9a a9       	ldd	r25, Y+50	; 0x32
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <Lcd_4bit_enuInit+0x2da>
    2470:	9a ab       	std	Y+50, r25	; 0x32
    2472:	89 ab       	std	Y+49, r24	; 0x31
    2474:	0f c0       	rjmp	.+30     	; 0x2494 <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2476:	68 8d       	ldd	r22, Y+24	; 0x18
    2478:	79 8d       	ldd	r23, Y+25	; 0x19
    247a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    247c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    247e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	88 a3       	std	Y+32, r24	; 0x20
    2488:	88 a1       	ldd	r24, Y+32	; 0x20
    248a:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    248c:	8b a9       	ldd	r24, Y+51	; 0x33
    248e:	8a 95       	dec	r24
    2490:	f1 f7       	brne	.-4      	; 0x248e <Lcd_4bit_enuInit+0x2fc>
    2492:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    2494:	8e ad       	ldd	r24, Y+62	; 0x3e
    2496:	9f ad       	ldd	r25, Y+63	; 0x3f
    2498:	68 e3       	ldi	r22, 0x38	; 56
    249a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    249e:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    24a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    24a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    24aa:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    24ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    24ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    24b0:	62 e0       	ldi	r22, 0x02	; 2
    24b2:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    24b6:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    24b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    24ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    24bc:	66 e0       	ldi	r22, 0x06	; 6
    24be:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    24c2:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    24c4:	8e ad       	ldd	r24, Y+62	; 0x3e
    24c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    24c8:	6c e0       	ldi	r22, 0x0C	; 12
    24ca:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    24ce:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    24d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    24d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    24d4:	68 e2       	ldi	r22, 0x28	; 40
    24d6:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    24da:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    24dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    24de:	9f ad       	ldd	r25, Y+63	; 0x3f
    24e0:	60 e8       	ldi	r22, 0x80	; 128
    24e2:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    24e6:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    24e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    24ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 ea       	ldi	r26, 0xA0	; 160
    24fa:	b0 e4       	ldi	r27, 0x40	; 64
    24fc:	8a 87       	std	Y+10, r24	; 0x0a
    24fe:	9b 87       	std	Y+11, r25	; 0x0b
    2500:	ac 87       	std	Y+12, r26	; 0x0c
    2502:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a e7       	ldi	r20, 0x7A	; 122
    250a:	55 e4       	ldi	r21, 0x45	; 69
    250c:	6a 85       	ldd	r22, Y+10	; 0x0a
    250e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2510:	8c 85       	ldd	r24, Y+12	; 0x0c
    2512:	9d 85       	ldd	r25, Y+13	; 0x0d
    2514:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8e 87       	std	Y+14, r24	; 0x0e
    251e:	9f 87       	std	Y+15, r25	; 0x0f
    2520:	a8 8b       	std	Y+16, r26	; 0x10
    2522:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	6e 85       	ldd	r22, Y+14	; 0x0e
    252e:	7f 85       	ldd	r23, Y+15	; 0x0f
    2530:	88 89       	ldd	r24, Y+16	; 0x10
    2532:	99 89       	ldd	r25, Y+17	; 0x11
    2534:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    2538:	88 23       	and	r24, r24
    253a:	2c f4       	brge	.+10     	; 0x2546 <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9b 8b       	std	Y+19, r25	; 0x13
    2542:	8a 8b       	std	Y+18, r24	; 0x12
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	6e 85       	ldd	r22, Y+14	; 0x0e
    2550:	7f 85       	ldd	r23, Y+15	; 0x0f
    2552:	88 89       	ldd	r24, Y+16	; 0x10
    2554:	99 89       	ldd	r25, Y+17	; 0x11
    2556:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    255a:	18 16       	cp	r1, r24
    255c:	4c f5       	brge	.+82     	; 0x25b0 <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	6a 85       	ldd	r22, Y+10	; 0x0a
    2568:	7b 85       	ldd	r23, Y+11	; 0x0b
    256a:	8c 85       	ldd	r24, Y+12	; 0x0c
    256c:	9d 85       	ldd	r25, Y+13	; 0x0d
    256e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9b 8b       	std	Y+19, r25	; 0x13
    2584:	8a 8b       	std	Y+18, r24	; 0x12
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <Lcd_4bit_enuInit+0x414>
    2588:	80 e9       	ldi	r24, 0x90	; 144
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	9d 8b       	std	Y+21, r25	; 0x15
    258e:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2590:	8c 89       	ldd	r24, Y+20	; 0x14
    2592:	9d 89       	ldd	r25, Y+21	; 0x15
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <Lcd_4bit_enuInit+0x402>
    2598:	9d 8b       	std	Y+21, r25	; 0x15
    259a:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	8a 89       	ldd	r24, Y+18	; 0x12
    259e:	9b 89       	ldd	r25, Y+19	; 0x13
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9b 8b       	std	Y+19, r25	; 0x13
    25a4:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	8a 89       	ldd	r24, Y+18	; 0x12
    25a8:	9b 89       	ldd	r25, Y+19	; 0x13
    25aa:	89 2b       	or	r24, r25
    25ac:	69 f7       	brne	.-38     	; 0x2588 <Lcd_4bit_enuInit+0x3f6>
    25ae:	14 c0       	rjmp	.+40     	; 0x25d8 <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    25b2:	7f 85       	ldd	r23, Y+15	; 0x0f
    25b4:	88 89       	ldd	r24, Y+16	; 0x10
    25b6:	99 89       	ldd	r25, Y+17	; 0x11
    25b8:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9b 8b       	std	Y+19, r25	; 0x13
    25c2:	8a 8b       	std	Y+18, r24	; 0x12
    25c4:	8a 89       	ldd	r24, Y+18	; 0x12
    25c6:	9b 89       	ldd	r25, Y+19	; 0x13
    25c8:	9f 8b       	std	Y+23, r25	; 0x17
    25ca:	8e 8b       	std	Y+22, r24	; 0x16
    25cc:	8e 89       	ldd	r24, Y+22	; 0x16
    25ce:	9f 89       	ldd	r25, Y+23	; 0x17
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <Lcd_4bit_enuInit+0x43e>
    25d4:	9f 8b       	std	Y+23, r25	; 0x17
    25d6:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    25d8:	89 81       	ldd	r24, Y+1	; 0x01

}
    25da:	ef 96       	adiw	r28, 0x3f	; 63
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	08 95       	ret

000025ec <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <Lcd_4bit_enuSendCommand+0x6>
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <Lcd_4bit_enuSendCommand+0x8>
    25f4:	1f 92       	push	r1
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	9c 83       	std	Y+4, r25	; 0x04
    25fc:	8b 83       	std	Y+3, r24	; 0x03
    25fe:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2600:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    2602:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
    2608:	89 2b       	or	r24, r25
    260a:	19 f4       	brne	.+6      	; 0x2612 <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	22 c0       	rjmp	.+68     	; 0x2656 <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	fc 01       	movw	r30, r24
    2618:	84 81       	ldd	r24, Z+4	; 0x04
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    2620:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    2622:	8d 81       	ldd	r24, Y+5	; 0x05
    2624:	28 2f       	mov	r18, r24
    2626:	22 95       	swap	r18
    2628:	2f 70       	andi	r18, 0x0F	; 15
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	62 2f       	mov	r22, r18
    2630:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Lcd_4bit_enuSet4BitsOnPins>
    2634:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	9c 81       	ldd	r25, Y+4	; 0x04
    263a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <Lcd_4bit_enuSendEnableSignal>
    263e:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	6d 81       	ldd	r22, Y+5	; 0x05
    2646:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Lcd_4bit_enuSet4BitsOnPins>
    264a:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <Lcd_4bit_enuSendEnableSignal>
    2654:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    2656:	89 81       	ldd	r24, Y+1	; 0x01

}
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	08 95       	ret

00002668 <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	00 d0       	rcall	.+0      	; 0x266e <Lcd_4bit_enuDisplayCharacter+0x6>
    266e:	00 d0       	rcall	.+0      	; 0x2670 <Lcd_4bit_enuDisplayCharacter+0x8>
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	9b 83       	std	Y+3, r25	; 0x03
    2676:	8a 83       	std	Y+2, r24	; 0x02
    2678:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    267a:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	9b 81       	ldd	r25, Y+3	; 0x03
    2680:	89 2b       	or	r24, r25
    2682:	19 f4       	brne	.+6      	; 0x268a <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2684:	82 e0       	ldi	r24, 0x02	; 2
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	22 c0       	rjmp	.+68     	; 0x26ce <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	9b 81       	ldd	r25, Y+3	; 0x03
    268e:	fc 01       	movw	r30, r24
    2690:	84 81       	ldd	r24, Z+4	; 0x04
    2692:	61 e0       	ldi	r22, 0x01	; 1
    2694:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    2698:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	28 2f       	mov	r18, r24
    269e:	22 95       	swap	r18
    26a0:	2f 70       	andi	r18, 0x0F	; 15
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	9b 81       	ldd	r25, Y+3	; 0x03
    26a6:	62 2f       	mov	r22, r18
    26a8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Lcd_4bit_enuSet4BitsOnPins>
    26ac:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	9b 81       	ldd	r25, Y+3	; 0x03
    26b2:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <Lcd_4bit_enuSendEnableSignal>
    26b6:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	9b 81       	ldd	r25, Y+3	; 0x03
    26bc:	6c 81       	ldd	r22, Y+4	; 0x04
    26be:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Lcd_4bit_enuSet4BitsOnPins>
    26c2:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	9b 81       	ldd	r25, Y+3	; 0x03
    26c8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <Lcd_4bit_enuSendEnableSignal>
    26cc:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    26ce:	89 81       	ldd	r24, Y+1	; 0x01

}
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	08 95       	ret

000026de <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	9b 83       	std	Y+3, r25	; 0x03
    26ee:	8a 83       	std	Y+2, r24	; 0x02
    26f0:	6c 83       	std	Y+4, r22	; 0x04
    26f2:	4d 83       	std	Y+5, r20	; 0x05
    26f4:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    26f6:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	9b 81       	ldd	r25, Y+3	; 0x03
    26fc:	89 2b       	or	r24, r25
    26fe:	19 f4       	brne	.+6      	; 0x2706 <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2700:	82 e0       	ldi	r24, 0x02	; 2
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	29 c0       	rjmp	.+82     	; 0x2758 <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	9b 81       	ldd	r25, Y+3	; 0x03
    270a:	4e 81       	ldd	r20, Y+6	; 0x06
    270c:	6d 81       	ldd	r22, Y+5	; 0x05
    270e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <Lcd_4bit_enuGoToXY>
    2712:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	9b 81       	ldd	r25, Y+3	; 0x03
    2718:	fc 01       	movw	r30, r24
    271a:	84 81       	ldd	r24, Z+4	; 0x04
    271c:	61 e0       	ldi	r22, 0x01	; 1
    271e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    2722:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    2724:	8c 81       	ldd	r24, Y+4	; 0x04
    2726:	28 2f       	mov	r18, r24
    2728:	22 95       	swap	r18
    272a:	2f 70       	andi	r18, 0x0F	; 15
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	62 2f       	mov	r22, r18
    2732:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Lcd_4bit_enuSet4BitsOnPins>
    2736:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	9b 81       	ldd	r25, Y+3	; 0x03
    273c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <Lcd_4bit_enuSendEnableSignal>
    2740:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	9b 81       	ldd	r25, Y+3	; 0x03
    2746:	6c 81       	ldd	r22, Y+4	; 0x04
    2748:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Lcd_4bit_enuSet4BitsOnPins>
    274c:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	9b 81       	ldd	r25, Y+3	; 0x03
    2752:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <Lcd_4bit_enuSendEnableSignal>
    2756:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    2758:	89 81       	ldd	r24, Y+1	; 0x01
}
    275a:	26 96       	adiw	r28, 0x06	; 6
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	08 95       	ret

0000276c <Lcd_4bit_enuDisplayStringWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayStringWithPosition(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String, u8 Copy_u8Row, u8 Copy_u8Col){
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	28 97       	sbiw	r28, 0x08	; 8
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	9c 83       	std	Y+4, r25	; 0x04
    2782:	8b 83       	std	Y+3, r24	; 0x03
    2784:	7e 83       	std	Y+6, r23	; 0x06
    2786:	6d 83       	std	Y+5, r22	; 0x05
    2788:	4f 83       	std	Y+7, r20	; 0x07
    278a:	28 87       	std	Y+8, r18	; 0x08

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    278c:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    278e:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	89 2b       	or	r24, r25
    2796:	21 f0       	breq	.+8      	; 0x27a0 <Lcd_4bit_enuDisplayStringWithPosition+0x34>
    2798:	8d 81       	ldd	r24, Y+5	; 0x05
    279a:	9e 81       	ldd	r25, Y+6	; 0x06
    279c:	89 2b       	or	r24, r25
    279e:	19 f4       	brne	.+6      	; 0x27a6 <Lcd_4bit_enuDisplayStringWithPosition+0x3a>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	25 c0       	rjmp	.+74     	; 0x27f0 <Lcd_4bit_enuDisplayStringWithPosition+0x84>

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	48 85       	ldd	r20, Y+8	; 0x08
    27ac:	6f 81       	ldd	r22, Y+7	; 0x07
    27ae:	0e 94 58 14 	call	0x28b0	; 0x28b0 <Lcd_4bit_enuGoToXY>
    27b2:	89 83       	std	Y+1, r24	; 0x01
			while(Address_pu8String[Loc_u8Counter] !=0){
    27b4:	12 c0       	rjmp	.+36     	; 0x27da <Lcd_4bit_enuDisplayStringWithPosition+0x6e>
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    27b6:	8a 81       	ldd	r24, Y+2	; 0x02
    27b8:	88 2f       	mov	r24, r24
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	2d 81       	ldd	r18, Y+5	; 0x05
    27be:	3e 81       	ldd	r19, Y+6	; 0x06
    27c0:	82 0f       	add	r24, r18
    27c2:	93 1f       	adc	r25, r19
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 81       	ld	r18, Z
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	62 2f       	mov	r22, r18
    27ce:	0e 94 34 13 	call	0x2668	; 0x2668 <Lcd_4bit_enuDisplayCharacter>
    27d2:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	8f 5f       	subi	r24, 0xFF	; 255
    27d8:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
			while(Address_pu8String[Loc_u8Counter] !=0){
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	88 2f       	mov	r24, r24
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	2d 81       	ldd	r18, Y+5	; 0x05
    27e2:	3e 81       	ldd	r19, Y+6	; 0x06
    27e4:	82 0f       	add	r24, r18
    27e6:	93 1f       	adc	r25, r19
    27e8:	fc 01       	movw	r30, r24
    27ea:	80 81       	ld	r24, Z
    27ec:	88 23       	and	r24, r24
    27ee:	19 f7       	brne	.-58     	; 0x27b6 <Lcd_4bit_enuDisplayStringWithPosition+0x4a>
		}




		return Loc_enuStatus;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01

}
    27f2:	28 96       	adiw	r28, 0x08	; 8
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	08 95       	ret

00002804 <Lcd_4bit_enuCreateCustomCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    2804:	cf 93       	push	r28
    2806:	df 93       	push	r29
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	27 97       	sbiw	r28, 0x07	; 7
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	9c 83       	std	Y+4, r25	; 0x04
    281a:	8b 83       	std	Y+3, r24	; 0x03
    281c:	7e 83       	std	Y+6, r23	; 0x06
    281e:	6d 83       	std	Y+5, r22	; 0x05
    2820:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2822:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    2824:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	89 2b       	or	r24, r25
    282c:	21 f0       	breq	.+8      	; 0x2836 <Lcd_4bit_enuCreateCustomCharacter+0x32>
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	89 2b       	or	r24, r25
    2834:	19 f4       	brne	.+6      	; 0x283c <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	30 c0       	rjmp	.+96     	; 0x289c <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    283c:	8f 81       	ldd	r24, Y+7	; 0x07
    283e:	88 30       	cpi	r24, 0x08	; 8
    2840:	18 f0       	brcs	.+6      	; 0x2848 <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    2842:	83 e0       	ldi	r24, 0x03	; 3
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	2a c0       	rjmp	.+84     	; 0x289c <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    2848:	8f 81       	ldd	r24, Y+7	; 0x07
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	08 96       	adiw	r24, 0x08	; 8
    2850:	28 2f       	mov	r18, r24
    2852:	22 0f       	add	r18, r18
    2854:	22 0f       	add	r18, r18
    2856:	22 0f       	add	r18, r18
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	62 2f       	mov	r22, r18
    285e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    2862:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    2864:	1a 82       	std	Y+2, r1	; 0x02
    2866:	11 c0       	rjmp	.+34     	; 0x288a <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	2d 81       	ldd	r18, Y+5	; 0x05
    2870:	3e 81       	ldd	r19, Y+6	; 0x06
    2872:	82 0f       	add	r24, r18
    2874:	93 1f       	adc	r25, r19
    2876:	fc 01       	movw	r30, r24
    2878:	20 81       	ld	r18, Z
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	9c 81       	ldd	r25, Y+4	; 0x04
    287e:	62 2f       	mov	r22, r18
    2880:	0e 94 34 13 	call	0x2668	; 0x2668 <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	8f 5f       	subi	r24, 0xFF	; 255
    2888:	8a 83       	std	Y+2, r24	; 0x02
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	88 30       	cpi	r24, 0x08	; 8
    288e:	60 f3       	brcs	.-40     	; 0x2868 <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	9c 81       	ldd	r25, Y+4	; 0x04
    2894:	60 e8       	ldi	r22, 0x80	; 128
    2896:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    289a:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    289c:	89 81       	ldd	r24, Y+1	; 0x01

}
    289e:	27 96       	adiw	r28, 0x07	; 7
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	08 95       	ret

000028b0 <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <Lcd_4bit_enuGoToXY+0x6>
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <Lcd_4bit_enuGoToXY+0x8>
    28b8:	1f 92       	push	r1
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	9b 83       	std	Y+3, r25	; 0x03
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	6c 83       	std	Y+4, r22	; 0x04
    28c4:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    28c6:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	89 2b       	or	r24, r25
    28ce:	19 f4       	brne	.+6      	; 0x28d6 <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    28d0:	82 e0       	ldi	r24, 0x02	; 2
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	56 c0       	rjmp	.+172    	; 0x2982 <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    28d6:	8c 81       	ldd	r24, Y+4	; 0x04
    28d8:	85 30       	cpi	r24, 0x05	; 5
    28da:	18 f0       	brcs	.+6      	; 0x28e2 <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    28dc:	85 e0       	ldi	r24, 0x05	; 5
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	50 c0       	rjmp	.+160    	; 0x2982 <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	85 31       	cpi	r24, 0x15	; 21
    28e6:	18 f0       	brcs	.+6      	; 0x28ee <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    28e8:	84 e0       	ldi	r24, 0x04	; 4
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	4a c0       	rjmp	.+148    	; 0x2982 <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	81 50       	subi	r24, 0x01	; 1
    28f2:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    28f4:	8c 81       	ldd	r24, Y+4	; 0x04
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	82 30       	cpi	r24, 0x02	; 2
    28fc:	91 05       	cpc	r25, r1
    28fe:	c9 f0       	breq	.+50     	; 0x2932 <Lcd_4bit_enuGoToXY+0x82>
    2900:	83 30       	cpi	r24, 0x03	; 3
    2902:	91 05       	cpc	r25, r1
    2904:	1c f4       	brge	.+6      	; 0x290c <Lcd_4bit_enuGoToXY+0x5c>
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	39 f0       	breq	.+14     	; 0x2918 <Lcd_4bit_enuGoToXY+0x68>
    290a:	3a c0       	rjmp	.+116    	; 0x2980 <Lcd_4bit_enuGoToXY+0xd0>
    290c:	83 30       	cpi	r24, 0x03	; 3
    290e:	91 05       	cpc	r25, r1
    2910:	e9 f0       	breq	.+58     	; 0x294c <Lcd_4bit_enuGoToXY+0x9c>
    2912:	04 97       	sbiw	r24, 0x04	; 4
    2914:	41 f1       	breq	.+80     	; 0x2966 <Lcd_4bit_enuGoToXY+0xb6>
    2916:	34 c0       	rjmp	.+104    	; 0x2980 <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	20 e8       	ldi	r18, 0x80	; 128
    291c:	28 0f       	add	r18, r24
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	9b 81       	ldd	r25, Y+3	; 0x03
    2922:	62 2f       	mov	r22, r18
    2924:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    2928:	98 2f       	mov	r25, r24
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	89 23       	and	r24, r25
    292e:	89 83       	std	Y+1, r24	; 0x01
			                break;
    2930:	28 c0       	rjmp	.+80     	; 0x2982 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	20 ec       	ldi	r18, 0xC0	; 192
    2936:	28 0f       	add	r18, r24
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	9b 81       	ldd	r25, Y+3	; 0x03
    293c:	62 2f       	mov	r22, r18
    293e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    2942:	98 2f       	mov	r25, r24
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	89 23       	and	r24, r25
    2948:	89 83       	std	Y+1, r24	; 0x01
			                break;
    294a:	1b c0       	rjmp	.+54     	; 0x2982 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    294c:	8d 81       	ldd	r24, Y+5	; 0x05
    294e:	24 e9       	ldi	r18, 0x94	; 148
    2950:	28 0f       	add	r18, r24
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	9b 81       	ldd	r25, Y+3	; 0x03
    2956:	62 2f       	mov	r22, r18
    2958:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    295c:	98 2f       	mov	r25, r24
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	89 23       	and	r24, r25
    2962:	89 83       	std	Y+1, r24	; 0x01
			                break;
    2964:	0e c0       	rjmp	.+28     	; 0x2982 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	24 ed       	ldi	r18, 0xD4	; 212
    296a:	28 0f       	add	r18, r24
    296c:	8a 81       	ldd	r24, Y+2	; 0x02
    296e:	9b 81       	ldd	r25, Y+3	; 0x03
    2970:	62 2f       	mov	r22, r18
    2972:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    2976:	98 2f       	mov	r25, r24
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	89 23       	and	r24, r25
    297c:	89 83       	std	Y+1, r24	; 0x01
			                break;
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    2980:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    2982:	89 81       	ldd	r24, Y+1	; 0x01

}
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	08 95       	ret

00002994 <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	00 d0       	rcall	.+0      	; 0x299a <Lcd_4bit_enuDisplayString+0x6>
    299a:	00 d0       	rcall	.+0      	; 0x299c <Lcd_4bit_enuDisplayString+0x8>
    299c:	00 d0       	rcall	.+0      	; 0x299e <Lcd_4bit_enuDisplayString+0xa>
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
    29a6:	7e 83       	std	Y+6, r23	; 0x06
    29a8:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    29aa:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    29ac:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	9c 81       	ldd	r25, Y+4	; 0x04
    29b2:	89 2b       	or	r24, r25
    29b4:	21 f0       	breq	.+8      	; 0x29be <Lcd_4bit_enuDisplayString+0x2a>
    29b6:	8d 81       	ldd	r24, Y+5	; 0x05
    29b8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ba:	89 2b       	or	r24, r25
    29bc:	a9 f4       	brne	.+42     	; 0x29e8 <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	1d c0       	rjmp	.+58     	; 0x29fe <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	2d 81       	ldd	r18, Y+5	; 0x05
    29cc:	3e 81       	ldd	r19, Y+6	; 0x06
    29ce:	82 0f       	add	r24, r18
    29d0:	93 1f       	adc	r25, r19
    29d2:	fc 01       	movw	r30, r24
    29d4:	20 81       	ld	r18, Z
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	9c 81       	ldd	r25, Y+4	; 0x04
    29da:	62 2f       	mov	r22, r18
    29dc:	0e 94 34 13 	call	0x2668	; 0x2668 <Lcd_4bit_enuDisplayCharacter>
    29e0:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    29e2:	8a 81       	ldd	r24, Y+2	; 0x02
    29e4:	8f 5f       	subi	r24, 0xFF	; 255
    29e6:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	2d 81       	ldd	r18, Y+5	; 0x05
    29f0:	3e 81       	ldd	r19, Y+6	; 0x06
    29f2:	82 0f       	add	r24, r18
    29f4:	93 1f       	adc	r25, r19
    29f6:	fc 01       	movw	r30, r24
    29f8:	80 81       	ld	r24, Z
    29fa:	88 23       	and	r24, r24
    29fc:	19 f7       	brne	.-58     	; 0x29c4 <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    29fe:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a00:	26 96       	adiw	r28, 0x06	; 6
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	08 95       	ret

00002a12 <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number){
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	cc 56       	subi	r28, 0x6C	; 108
    2a1c:	d1 09       	sbc	r29, r1
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	9e 01       	movw	r18, r28
    2a2a:	29 59       	subi	r18, 0x99	; 153
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	f9 01       	movw	r30, r18
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
    2a34:	ce 01       	movw	r24, r28
    2a36:	87 59       	subi	r24, 0x97	; 151
    2a38:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	40 83       	st	Z, r20
    2a3e:	51 83       	std	Z+1, r21	; 0x01
    2a40:	62 83       	std	Z+2, r22	; 0x02
    2a42:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2a44:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    2a46:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    2a48:	ce 01       	movw	r24, r28
    2a4a:	89 59       	subi	r24, 0x99	; 153
    2a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4e:	fc 01       	movw	r30, r24
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	89 2b       	or	r24, r25
    2a56:	19 f4       	brne	.+6      	; 0x2a5e <Lcd_4bit_enuDisplayNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2a58:	82 e0       	ldi	r24, 0x02	; 2
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	1e c0       	rjmp	.+60     	; 0x2a9a <Lcd_4bit_enuDisplayNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    2a5e:	9e 01       	movw	r18, r28
    2a60:	2d 5f       	subi	r18, 0xFD	; 253
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	ce 01       	movw	r24, r28
    2a66:	87 59       	subi	r24, 0x97	; 151
    2a68:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	80 81       	ld	r24, Z
    2a6e:	91 81       	ldd	r25, Z+1	; 0x01
    2a70:	a2 81       	ldd	r26, Z+2	; 0x02
    2a72:	b3 81       	ldd	r27, Z+3	; 0x03
    2a74:	a9 01       	movw	r20, r18
    2a76:	bc 01       	movw	r22, r24
    2a78:	cd 01       	movw	r24, r26
    2a7a:	0e 94 49 00 	call	0x92	; 0x92 <Convert_IntToString>
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    2a80:	9e 01       	movw	r18, r28
    2a82:	2d 5f       	subi	r18, 0xFD	; 253
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	ce 01       	movw	r24, r28
    2a88:	89 59       	subi	r24, 0x99	; 153
    2a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	80 81       	ld	r24, Z
    2a90:	91 81       	ldd	r25, Z+1	; 0x01
    2a92:	b9 01       	movw	r22, r18
    2a94:	0e 94 ca 14 	call	0x2994	; 0x2994 <Lcd_4bit_enuDisplayString>
    2a98:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a9c:	c4 59       	subi	r28, 0x94	; 148
    2a9e:	df 4f       	sbci	r29, 0xFF	; 255
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	08 95       	ret

00002ab0 <Lcd_4bit_enuDisplayNumberWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumberWithPosition(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number, u8 Copy_u8Row, u8 Copy_u8Col){
    2ab0:	0f 93       	push	r16
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	ce 56       	subi	r28, 0x6E	; 110
    2abc:	d1 09       	sbc	r29, r1
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e9 59       	subi	r30, 0x99	; 153
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	87 59       	subi	r24, 0x97	; 151
    2ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad8:	dc 01       	movw	r26, r24
    2ada:	4d 93       	st	X+, r20
    2adc:	5d 93       	st	X+, r21
    2ade:	6d 93       	st	X+, r22
    2ae0:	7c 93       	st	X, r23
    2ae2:	13 97       	sbiw	r26, 0x03	; 3
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	83 59       	subi	r24, 0x93	; 147
    2ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aea:	fc 01       	movw	r30, r24
    2aec:	20 83       	st	Z, r18
    2aee:	ce 01       	movw	r24, r28
    2af0:	82 59       	subi	r24, 0x92	; 146
    2af2:	9f 4f       	sbci	r25, 0xFF	; 255
    2af4:	dc 01       	movw	r26, r24
    2af6:	0c 93       	st	X, r16

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2af8:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    2afa:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    2afc:	ce 01       	movw	r24, r28
    2afe:	89 59       	subi	r24, 0x99	; 153
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	fc 01       	movw	r30, r24
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	89 2b       	or	r24, r25
    2b0a:	19 f4       	brne	.+6      	; 0x2b12 <Lcd_4bit_enuDisplayNumberWithPosition+0x62>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2b0c:	82 e0       	ldi	r24, 0x02	; 2
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	31 c0       	rjmp	.+98     	; 0x2b74 <Lcd_4bit_enuDisplayNumberWithPosition+0xc4>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    2b12:	9e 01       	movw	r18, r28
    2b14:	2d 5f       	subi	r18, 0xFD	; 253
    2b16:	3f 4f       	sbci	r19, 0xFF	; 255
    2b18:	ce 01       	movw	r24, r28
    2b1a:	87 59       	subi	r24, 0x97	; 151
    2b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1e:	fc 01       	movw	r30, r24
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	a2 81       	ldd	r26, Z+2	; 0x02
    2b26:	b3 81       	ldd	r27, Z+3	; 0x03
    2b28:	a9 01       	movw	r20, r18
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <Convert_IntToString>
    2b32:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    2b34:	9e 01       	movw	r18, r28
    2b36:	22 59       	subi	r18, 0x92	; 146
    2b38:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	83 59       	subi	r24, 0x93	; 147
    2b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b40:	ae 01       	movw	r20, r28
    2b42:	49 59       	subi	r20, 0x99	; 153
    2b44:	5f 4f       	sbci	r21, 0xFF	; 255
    2b46:	da 01       	movw	r26, r20
    2b48:	ed 91       	ld	r30, X+
    2b4a:	fc 91       	ld	r31, X
    2b4c:	d9 01       	movw	r26, r18
    2b4e:	4c 91       	ld	r20, X
    2b50:	dc 01       	movw	r26, r24
    2b52:	6c 91       	ld	r22, X
    2b54:	cf 01       	movw	r24, r30
    2b56:	0e 94 58 14 	call	0x28b0	; 0x28b0 <Lcd_4bit_enuGoToXY>
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    2b5a:	9e 01       	movw	r18, r28
    2b5c:	2d 5f       	subi	r18, 0xFD	; 253
    2b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b60:	ce 01       	movw	r24, r28
    2b62:	89 59       	subi	r24, 0x99	; 153
    2b64:	9f 4f       	sbci	r25, 0xFF	; 255
    2b66:	fc 01       	movw	r30, r24
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	b9 01       	movw	r22, r18
    2b6e:	0e 94 ca 14 	call	0x2994	; 0x2994 <Lcd_4bit_enuDisplayString>
    2b72:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2b74:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b76:	c2 59       	subi	r28, 0x92	; 146
    2b78:	df 4f       	sbci	r29, 0xFF	; 255
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	0f 91       	pop	r16
    2b8a:	08 95       	ret

00002b8c <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f64 Copy_f64Number){
    2b8c:	cf 93       	push	r28
    2b8e:	df 93       	push	r29
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	cc 56       	subi	r28, 0x6C	; 108
    2b96:	d1 09       	sbc	r29, r1
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	9e 01       	movw	r18, r28
    2ba4:	29 59       	subi	r18, 0x99	; 153
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	f9 01       	movw	r30, r18
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
    2bae:	ce 01       	movw	r24, r28
    2bb0:	87 59       	subi	r24, 0x97	; 151
    2bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	40 83       	st	Z, r20
    2bb8:	51 83       	std	Z+1, r21	; 0x01
    2bba:	62 83       	std	Z+2, r22	; 0x02
    2bbc:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2bbe:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    2bc0:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	89 59       	subi	r24, 0x99	; 153
    2bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc8:	fc 01       	movw	r30, r24
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	89 2b       	or	r24, r25
    2bd0:	19 f4       	brne	.+6      	; 0x2bd8 <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2bd2:	82 e0       	ldi	r24, 0x02	; 2
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	1e c0       	rjmp	.+60     	; 0x2c14 <Lcd_4bit_enuDisplayFloatNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_FloatToString(Copy_f64Number, Loc_u8ConvertedNumberInArray);
    2bd8:	9e 01       	movw	r18, r28
    2bda:	2d 5f       	subi	r18, 0xFD	; 253
    2bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bde:	ce 01       	movw	r24, r28
    2be0:	87 59       	subi	r24, 0x97	; 151
    2be2:	9f 4f       	sbci	r25, 0xFF	; 255
    2be4:	fc 01       	movw	r30, r24
    2be6:	80 81       	ld	r24, Z
    2be8:	91 81       	ldd	r25, Z+1	; 0x01
    2bea:	a2 81       	ldd	r26, Z+2	; 0x02
    2bec:	b3 81       	ldd	r27, Z+3	; 0x03
    2bee:	a9 01       	movw	r20, r18
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 88 00 	call	0x110	; 0x110 <Convert_FloatToString>
    2bf8:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
				Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd, Loc_u8ConvertedNumberInArray);
    2bfa:	9e 01       	movw	r18, r28
    2bfc:	2d 5f       	subi	r18, 0xFD	; 253
    2bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2c00:	ce 01       	movw	r24, r28
    2c02:	89 59       	subi	r24, 0x99	; 153
    2c04:	9f 4f       	sbci	r25, 0xFF	; 255
    2c06:	fc 01       	movw	r30, r24
    2c08:	80 81       	ld	r24, Z
    2c0a:	91 81       	ldd	r25, Z+1	; 0x01
    2c0c:	b9 01       	movw	r22, r18
    2c0e:	0e 94 ca 14 	call	0x2994	; 0x2994 <Lcd_4bit_enuDisplayString>
    2c12:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2c14:	89 81       	ldd	r24, Y+1	; 0x01

}
    2c16:	c4 59       	subi	r28, 0x94	; 148
    2c18:	df 4f       	sbci	r29, 0xFF	; 255
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	08 95       	ret

00002c2a <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <Lcd_4bit_enuSet4BitsOnPins+0x6>
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <Lcd_4bit_enuSet4BitsOnPins+0x8>
    2c32:	1f 92       	push	r1
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	9c 83       	std	Y+4, r25	; 0x04
    2c3a:	8b 83       	std	Y+3, r24	; 0x03
    2c3c:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2c3e:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    2c40:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	89 2b       	or	r24, r25
    2c48:	19 f4       	brne	.+6      	; 0x2c50 <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    2c4e:	22 c0       	rjmp	.+68     	; 0x2c94 <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2c50:	1a 82       	std	Y+2, r1	; 0x02
    2c52:	1d c0       	rjmp	.+58     	; 0x2c8e <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	88 2f       	mov	r24, r24
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	2a 81       	ldd	r18, Y+2	; 0x02
    2c5c:	22 2f       	mov	r18, r18
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    2c62:	95 95       	asr	r25
    2c64:	87 95       	ror	r24
    2c66:	2a 95       	dec	r18
    2c68:	e2 f7       	brpl	.-8      	; 0x2c62 <Lcd_4bit_enuSet4BitsOnPins+0x38>
    2c6a:	48 2f       	mov	r20, r24
    2c6c:	41 70       	andi	r20, 0x01	; 1
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	88 2f       	mov	r24, r24
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	2b 81       	ldd	r18, Y+3	; 0x03
    2c76:	3c 81       	ldd	r19, Y+4	; 0x04
    2c78:	82 0f       	add	r24, r18
    2c7a:	93 1f       	adc	r25, r19
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	80 81       	ld	r24, Z
    2c80:	64 2f       	mov	r22, r20
    2c82:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    2c86:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	8f 5f       	subi	r24, 0xFF	; 255
    2c8c:	8a 83       	std	Y+2, r24	; 0x02
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	84 30       	cpi	r24, 0x04	; 4
    2c92:	00 f3       	brcs	.-64     	; 0x2c54 <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    2c94:	89 81       	ldd	r24, Y+1	; 0x01

}
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	08 95       	ret

00002ca6 <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    2ca6:	cf 93       	push	r28
    2ca8:	df 93       	push	r29
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	a3 97       	sbiw	r28, 0x23	; 35
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	9b a3       	std	Y+35, r25	; 0x23
    2cbc:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2cbe:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    2cc0:	8a a1       	ldd	r24, Y+34	; 0x22
    2cc2:	9b a1       	ldd	r25, Y+35	; 0x23
    2cc4:	89 2b       	or	r24, r25
    2cc6:	19 f4       	brne	.+6      	; 0x2cce <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	ff c0       	rjmp	.+510    	; 0x2ecc <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    2cce:	8a a1       	ldd	r24, Y+34	; 0x22
    2cd0:	9b a1       	ldd	r25, Y+35	; 0x23
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	85 81       	ldd	r24, Z+5	; 0x05
    2cd6:	61 e0       	ldi	r22, 0x01	; 1
    2cd8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ce4:	b0 e4       	ldi	r27, 0x40	; 64
    2ce6:	8a 83       	std	Y+2, r24	; 0x02
    2ce8:	9b 83       	std	Y+3, r25	; 0x03
    2cea:	ac 83       	std	Y+4, r26	; 0x04
    2cec:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2cee:	2b ea       	ldi	r18, 0xAB	; 171
    2cf0:	3a ea       	ldi	r19, 0xAA	; 170
    2cf2:	4a ea       	ldi	r20, 0xAA	; 170
    2cf4:	50 e4       	ldi	r21, 0x40	; 64
    2cf6:	6a 81       	ldd	r22, Y+2	; 0x02
    2cf8:	7b 81       	ldd	r23, Y+3	; 0x03
    2cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cfe:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8e 83       	std	Y+6, r24	; 0x06
    2d08:	9f 83       	std	Y+7, r25	; 0x07
    2d0a:	a8 87       	std	Y+8, r26	; 0x08
    2d0c:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	50 e4       	ldi	r21, 0x40	; 64
    2d16:	6a 81       	ldd	r22, Y+2	; 0x02
    2d18:	7b 81       	ldd	r23, Y+3	; 0x03
    2d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	8a 87       	std	Y+10, r24	; 0x0a
    2d28:	9b 87       	std	Y+11, r25	; 0x0b
    2d2a:	ac 87       	std	Y+12, r26	; 0x0c
    2d2c:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e8       	ldi	r20, 0x80	; 128
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	6e 81       	ldd	r22, Y+6	; 0x06
    2d38:	7f 81       	ldd	r23, Y+7	; 0x07
    2d3a:	88 85       	ldd	r24, Y+8	; 0x08
    2d3c:	99 85       	ldd	r25, Y+9	; 0x09
    2d3e:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    2d42:	88 23       	and	r24, r24
    2d44:	1c f4       	brge	.+6      	; 0x2d4c <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	8e 87       	std	Y+14, r24	; 0x0e
    2d4a:	b2 c0       	rjmp	.+356    	; 0x2eb0 <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	3f ef       	ldi	r19, 0xFF	; 255
    2d50:	4f e7       	ldi	r20, 0x7F	; 127
    2d52:	57 e4       	ldi	r21, 0x47	; 71
    2d54:	6a 85       	ldd	r22, Y+10	; 0x0a
    2d56:	7b 85       	ldd	r23, Y+11	; 0x0b
    2d58:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d5c:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    2d60:	18 16       	cp	r1, r24
    2d62:	0c f0       	brlt	.+2      	; 0x2d66 <Lcd_4bit_enuSendEnableSignal+0xc0>
    2d64:	7b c0       	rjmp	.+246    	; 0x2e5c <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	4a e7       	ldi	r20, 0x7A	; 122
    2d6c:	54 e4       	ldi	r21, 0x44	; 68
    2d6e:	6a 81       	ldd	r22, Y+2	; 0x02
    2d70:	7b 81       	ldd	r23, Y+3	; 0x03
    2d72:	8c 81       	ldd	r24, Y+4	; 0x04
    2d74:	9d 81       	ldd	r25, Y+5	; 0x05
    2d76:	0e 94 01 21 	call	0x4202	; 0x4202 <__divsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	8f 87       	std	Y+15, r24	; 0x0f
    2d80:	98 8b       	std	Y+16, r25	; 0x10
    2d82:	a9 8b       	std	Y+17, r26	; 0x11
    2d84:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	4a e7       	ldi	r20, 0x7A	; 122
    2d8c:	55 e4       	ldi	r21, 0x45	; 69
    2d8e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d90:	78 89       	ldd	r23, Y+16	; 0x10
    2d92:	89 89       	ldd	r24, Y+17	; 0x11
    2d94:	9a 89       	ldd	r25, Y+18	; 0x12
    2d96:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	8b 8b       	std	Y+19, r24	; 0x13
    2da0:	9c 8b       	std	Y+20, r25	; 0x14
    2da2:	ad 8b       	std	Y+21, r26	; 0x15
    2da4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	40 e8       	ldi	r20, 0x80	; 128
    2dac:	5f e3       	ldi	r21, 0x3F	; 63
    2dae:	6b 89       	ldd	r22, Y+19	; 0x13
    2db0:	7c 89       	ldd	r23, Y+20	; 0x14
    2db2:	8d 89       	ldd	r24, Y+21	; 0x15
    2db4:	9e 89       	ldd	r25, Y+22	; 0x16
    2db6:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    2dba:	88 23       	and	r24, r24
    2dbc:	2c f4       	brge	.+10     	; 0x2dc8 <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	98 8f       	std	Y+24, r25	; 0x18
    2dc4:	8f 8b       	std	Y+23, r24	; 0x17
    2dc6:	3f c0       	rjmp	.+126    	; 0x2e46 <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	3f ef       	ldi	r19, 0xFF	; 255
    2dcc:	4f e7       	ldi	r20, 0x7F	; 127
    2dce:	57 e4       	ldi	r21, 0x47	; 71
    2dd0:	6b 89       	ldd	r22, Y+19	; 0x13
    2dd2:	7c 89       	ldd	r23, Y+20	; 0x14
    2dd4:	8d 89       	ldd	r24, Y+21	; 0x15
    2dd6:	9e 89       	ldd	r25, Y+22	; 0x16
    2dd8:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    2ddc:	18 16       	cp	r1, r24
    2dde:	4c f5       	brge	.+82     	; 0x2e32 <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	40 e2       	ldi	r20, 0x20	; 32
    2de6:	51 e4       	ldi	r21, 0x41	; 65
    2de8:	6f 85       	ldd	r22, Y+15	; 0x0f
    2dea:	78 89       	ldd	r23, Y+16	; 0x10
    2dec:	89 89       	ldd	r24, Y+17	; 0x11
    2dee:	9a 89       	ldd	r25, Y+18	; 0x12
    2df0:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	98 8f       	std	Y+24, r25	; 0x18
    2e06:	8f 8b       	std	Y+23, r24	; 0x17
    2e08:	0f c0       	rjmp	.+30     	; 0x2e28 <Lcd_4bit_enuSendEnableSignal+0x182>
    2e0a:	80 e9       	ldi	r24, 0x90	; 144
    2e0c:	91 e0       	ldi	r25, 0x01	; 1
    2e0e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e10:	89 8f       	std	Y+25, r24	; 0x19
    2e12:	89 8d       	ldd	r24, Y+25	; 0x19
    2e14:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <Lcd_4bit_enuSendEnableSignal+0x170>
    2e1a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e1c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e20:	98 8d       	ldd	r25, Y+24	; 0x18
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	98 8f       	std	Y+24, r25	; 0x18
    2e26:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e28:	8f 89       	ldd	r24, Y+23	; 0x17
    2e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2c:	89 2b       	or	r24, r25
    2e2e:	69 f7       	brne	.-38     	; 0x2e0a <Lcd_4bit_enuSendEnableSignal+0x164>
    2e30:	3f c0       	rjmp	.+126    	; 0x2eb0 <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e32:	6b 89       	ldd	r22, Y+19	; 0x13
    2e34:	7c 89       	ldd	r23, Y+20	; 0x14
    2e36:	8d 89       	ldd	r24, Y+21	; 0x15
    2e38:	9e 89       	ldd	r25, Y+22	; 0x16
    2e3a:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	98 8f       	std	Y+24, r25	; 0x18
    2e44:	8f 8b       	std	Y+23, r24	; 0x17
    2e46:	8f 89       	ldd	r24, Y+23	; 0x17
    2e48:	98 8d       	ldd	r25, Y+24	; 0x18
    2e4a:	9c 8f       	std	Y+28, r25	; 0x1c
    2e4c:	8b 8f       	std	Y+27, r24	; 0x1b
    2e4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <Lcd_4bit_enuSendEnableSignal+0x1ac>
    2e56:	9c 8f       	std	Y+28, r25	; 0x1c
    2e58:	8b 8f       	std	Y+27, r24	; 0x1b
    2e5a:	2a c0       	rjmp	.+84     	; 0x2eb0 <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	53 e4       	ldi	r21, 0x43	; 67
    2e64:	6e 81       	ldd	r22, Y+6	; 0x06
    2e66:	7f 81       	ldd	r23, Y+7	; 0x07
    2e68:	88 85       	ldd	r24, Y+8	; 0x08
    2e6a:	99 85       	ldd	r25, Y+9	; 0x09
    2e6c:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    2e70:	18 16       	cp	r1, r24
    2e72:	ac f4       	brge	.+42     	; 0x2e9e <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2e74:	6a 85       	ldd	r22, Y+10	; 0x0a
    2e76:	7b 85       	ldd	r23, Y+11	; 0x0b
    2e78:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e7a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e7c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9e 8f       	std	Y+30, r25	; 0x1e
    2e86:	8d 8f       	std	Y+29, r24	; 0x1d
    2e88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e8c:	98 a3       	std	Y+32, r25	; 0x20
    2e8e:	8f 8f       	std	Y+31, r24	; 0x1f
    2e90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e92:	98 a1       	ldd	r25, Y+32	; 0x20
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <Lcd_4bit_enuSendEnableSignal+0x1ee>
    2e98:	98 a3       	std	Y+32, r25	; 0x20
    2e9a:	8f 8f       	std	Y+31, r24	; 0x1f
    2e9c:	0f c0       	rjmp	.+30     	; 0x2ebc <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e9e:	6e 81       	ldd	r22, Y+6	; 0x06
    2ea0:	7f 81       	ldd	r23, Y+7	; 0x07
    2ea2:	88 85       	ldd	r24, Y+8	; 0x08
    2ea4:	99 85       	ldd	r25, Y+9	; 0x09
    2ea6:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	8e 87       	std	Y+14, r24	; 0x0e
    2eb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eb2:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eb4:	89 a1       	ldd	r24, Y+33	; 0x21
    2eb6:	8a 95       	dec	r24
    2eb8:	f1 f7       	brne	.-4      	; 0x2eb6 <Lcd_4bit_enuSendEnableSignal+0x210>
    2eba:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    2ebc:	8a a1       	ldd	r24, Y+34	; 0x22
    2ebe:	9b a1       	ldd	r25, Y+35	; 0x23
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	85 81       	ldd	r24, Z+5	; 0x05
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    2eca:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01

}
    2ece:	a3 96       	adiw	r28, 0x23	; 35
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	08 95       	ret

00002ee0 <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	29 97       	sbiw	r28, 0x09	; 9
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	9f 83       	std	Y+7, r25	; 0x07
    2ef6:	8e 83       	std	Y+6, r24	; 0x06
    2ef8:	79 87       	std	Y+9, r23	; 0x09
    2efa:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    2efc:	83 e0       	ldi	r24, 0x03	; 3
    2efe:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    2f00:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    2f02:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    2f04:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    2f06:	8e 81       	ldd	r24, Y+6	; 0x06
    2f08:	9f 81       	ldd	r25, Y+7	; 0x07
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	81 85       	ldd	r24, Z+9	; 0x09
    2f0e:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    2f10:	8e 81       	ldd	r24, Y+6	; 0x06
    2f12:	9f 81       	ldd	r25, Y+7	; 0x07
    2f14:	89 2b       	or	r24, r25
    2f16:	21 f0       	breq	.+8      	; 0x2f20 <Keypad_enuRead+0x40>
    2f18:	88 85       	ldd	r24, Y+8	; 0x08
    2f1a:	99 85       	ldd	r25, Y+9	; 0x09
    2f1c:	89 2b       	or	r24, r25
    2f1e:	19 f4       	brne	.+6      	; 0x2f26 <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    2f20:	82 e0       	ldi	r24, 0x02	; 2
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	df c0       	rjmp	.+446    	; 0x30e4 <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    2f26:	8e 81       	ldd	r24, Y+6	; 0x06
    2f28:	9f 81       	ldd	r25, Y+7	; 0x07
    2f2a:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <Keypad_DisableControlPins>
    2f2e:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    2f30:	8e 81       	ldd	r24, Y+6	; 0x06
    2f32:	9f 81       	ldd	r25, Y+7	; 0x07
    2f34:	fc 01       	movw	r30, r24
    2f36:	80 85       	ldd	r24, Z+8	; 0x08
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	21 f0       	breq	.+8      	; 0x2f48 <Keypad_enuRead+0x68>
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	09 f4       	brne	.+2      	; 0x2f46 <Keypad_enuRead+0x66>
    2f44:	67 c0       	rjmp	.+206    	; 0x3014 <Keypad_enuRead+0x134>
    2f46:	cc c0       	rjmp	.+408    	; 0x30e0 <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    2f48:	1a 82       	std	Y+2, r1	; 0x02
    2f4a:	5f c0       	rjmp	.+190    	; 0x300a <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    2f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f50:	fc 01       	movw	r30, r24
    2f52:	91 85       	ldd	r25, Z+9	; 0x09
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	99 23       	and	r25, r25
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <Keypad_enuRead+0x7c>
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	48 2f       	mov	r20, r24
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	2e 81       	ldd	r18, Y+6	; 0x06
    2f66:	3f 81       	ldd	r19, Y+7	; 0x07
    2f68:	82 0f       	add	r24, r18
    2f6a:	93 1f       	adc	r25, r19
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	80 81       	ld	r24, Z
    2f70:	64 2f       	mov	r22, r20
    2f72:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    2f76:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    2f78:	1b 82       	std	Y+3, r1	; 0x03
    2f7a:	30 c0       	rjmp	.+96     	; 0x2fdc <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	2e 81       	ldd	r18, Y+6	; 0x06
    2f84:	3f 81       	ldd	r19, Y+7	; 0x07
    2f86:	82 0f       	add	r24, r18
    2f88:	93 1f       	adc	r25, r19
    2f8a:	04 96       	adiw	r24, 0x04	; 4
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	20 81       	ld	r18, Z
    2f90:	ce 01       	movw	r24, r28
    2f92:	05 96       	adiw	r24, 0x05	; 5
    2f94:	bc 01       	movw	r22, r24
    2f96:	82 2f       	mov	r24, r18
    2f98:	0e 94 c7 0b 	call	0x178e	; 0x178e <Dio_enuReadChannel>
    2f9c:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    2f9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	91 85       	ldd	r25, Z+9	; 0x09
    2fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa8:	98 17       	cp	r25, r24
    2faa:	a9 f0       	breq	.+42     	; 0x2fd6 <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	22 0f       	add	r18, r18
    2fba:	33 1f       	adc	r19, r19
    2fbc:	22 0f       	add	r18, r18
    2fbe:	33 1f       	adc	r19, r19
    2fc0:	82 0f       	add	r24, r18
    2fc2:	93 1f       	adc	r25, r19
    2fc4:	8d 52       	subi	r24, 0x2D	; 45
    2fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc8:	fc 01       	movw	r30, r24
    2fca:	20 81       	ld	r18, Z
    2fcc:	88 85       	ldd	r24, Y+8	; 0x08
    2fce:	99 85       	ldd	r25, Y+9	; 0x09
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    2fd4:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	8f 5f       	subi	r24, 0xFF	; 255
    2fda:	8b 83       	std	Y+3, r24	; 0x03
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	84 30       	cpi	r24, 0x04	; 4
    2fe0:	68 f2       	brcs	.-102    	; 0x2f7c <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    2fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	41 85       	ldd	r20, Z+9	; 0x09
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ff2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ff4:	82 0f       	add	r24, r18
    2ff6:	93 1f       	adc	r25, r19
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	80 81       	ld	r24, Z
    2ffc:	64 2f       	mov	r22, r20
    2ffe:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    3002:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	8f 5f       	subi	r24, 0xFF	; 255
    3008:	8a 83       	std	Y+2, r24	; 0x02
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	84 30       	cpi	r24, 0x04	; 4
    300e:	08 f4       	brcc	.+2      	; 0x3012 <Keypad_enuRead+0x132>
    3010:	9d cf       	rjmp	.-198    	; 0x2f4c <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    3012:	68 c0       	rjmp	.+208    	; 0x30e4 <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    3014:	1b 82       	std	Y+3, r1	; 0x03
    3016:	5f c0       	rjmp	.+190    	; 0x30d6 <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    3018:	8e 81       	ldd	r24, Y+6	; 0x06
    301a:	9f 81       	ldd	r25, Y+7	; 0x07
    301c:	fc 01       	movw	r30, r24
    301e:	91 85       	ldd	r25, Z+9	; 0x09
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	99 23       	and	r25, r25
    3024:	09 f0       	breq	.+2      	; 0x3028 <Keypad_enuRead+0x148>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	48 2f       	mov	r20, r24
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	88 2f       	mov	r24, r24
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	2e 81       	ldd	r18, Y+6	; 0x06
    3032:	3f 81       	ldd	r19, Y+7	; 0x07
    3034:	82 0f       	add	r24, r18
    3036:	93 1f       	adc	r25, r19
    3038:	04 96       	adiw	r24, 0x04	; 4
    303a:	fc 01       	movw	r30, r24
    303c:	80 81       	ld	r24, Z
    303e:	64 2f       	mov	r22, r20
    3040:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    3044:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    3046:	1a 82       	std	Y+2, r1	; 0x02
    3048:	2e c0       	rjmp	.+92     	; 0x30a6 <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    304a:	8a 81       	ldd	r24, Y+2	; 0x02
    304c:	88 2f       	mov	r24, r24
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	2e 81       	ldd	r18, Y+6	; 0x06
    3052:	3f 81       	ldd	r19, Y+7	; 0x07
    3054:	82 0f       	add	r24, r18
    3056:	93 1f       	adc	r25, r19
    3058:	fc 01       	movw	r30, r24
    305a:	20 81       	ld	r18, Z
    305c:	ce 01       	movw	r24, r28
    305e:	05 96       	adiw	r24, 0x05	; 5
    3060:	bc 01       	movw	r22, r24
    3062:	82 2f       	mov	r24, r18
    3064:	0e 94 c7 0b 	call	0x178e	; 0x178e <Dio_enuReadChannel>
    3068:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    306a:	8e 81       	ldd	r24, Y+6	; 0x06
    306c:	9f 81       	ldd	r25, Y+7	; 0x07
    306e:	fc 01       	movw	r30, r24
    3070:	91 85       	ldd	r25, Z+9	; 0x09
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	98 17       	cp	r25, r24
    3076:	a1 f0       	breq	.+40     	; 0x30a0 <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	28 2f       	mov	r18, r24
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	22 0f       	add	r18, r18
    3086:	33 1f       	adc	r19, r19
    3088:	22 0f       	add	r18, r18
    308a:	33 1f       	adc	r19, r19
    308c:	82 0f       	add	r24, r18
    308e:	93 1f       	adc	r25, r19
    3090:	8d 52       	subi	r24, 0x2D	; 45
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	fc 01       	movw	r30, r24
    3096:	20 81       	ld	r18, Z
    3098:	88 85       	ldd	r24, Y+8	; 0x08
    309a:	99 85       	ldd	r25, Y+9	; 0x09
    309c:	fc 01       	movw	r30, r24
    309e:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    30a0:	8a 81       	ldd	r24, Y+2	; 0x02
    30a2:	8f 5f       	subi	r24, 0xFF	; 255
    30a4:	8a 83       	std	Y+2, r24	; 0x02
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	84 30       	cpi	r24, 0x04	; 4
    30aa:	78 f2       	brcs	.-98     	; 0x304a <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    30ac:	8e 81       	ldd	r24, Y+6	; 0x06
    30ae:	9f 81       	ldd	r25, Y+7	; 0x07
    30b0:	fc 01       	movw	r30, r24
    30b2:	41 85       	ldd	r20, Z+9	; 0x09
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	88 2f       	mov	r24, r24
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	2e 81       	ldd	r18, Y+6	; 0x06
    30bc:	3f 81       	ldd	r19, Y+7	; 0x07
    30be:	82 0f       	add	r24, r18
    30c0:	93 1f       	adc	r25, r19
    30c2:	04 96       	adiw	r24, 0x04	; 4
    30c4:	fc 01       	movw	r30, r24
    30c6:	80 81       	ld	r24, Z
    30c8:	64 2f       	mov	r22, r20
    30ca:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    30ce:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	8f 5f       	subi	r24, 0xFF	; 255
    30d4:	8b 83       	std	Y+3, r24	; 0x03
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	84 30       	cpi	r24, 0x04	; 4
    30da:	08 f4       	brcc	.+2      	; 0x30de <Keypad_enuRead+0x1fe>
    30dc:	9d cf       	rjmp	.-198    	; 0x3018 <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    30e6:	29 96       	adiw	r28, 0x09	; 9
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	08 95       	ret

000030f8 <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    30f8:	cf 93       	push	r28
    30fa:	df 93       	push	r29
    30fc:	00 d0       	rcall	.+0      	; 0x30fe <Keypad_DisableControlPins+0x6>
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <Keypad_DisableControlPins+0x8>
    3100:	1f 92       	push	r1
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	9d 83       	std	Y+5, r25	; 0x05
    3108:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    310a:	83 e0       	ldi	r24, 0x03	; 3
    310c:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    310e:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    3110:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    3112:	8c 81       	ldd	r24, Y+4	; 0x04
    3114:	9d 81       	ldd	r25, Y+5	; 0x05
    3116:	89 2b       	or	r24, r25
    3118:	19 f4       	brne	.+6      	; 0x3120 <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    311a:	82 e0       	ldi	r24, 0x02	; 2
    311c:	89 83       	std	Y+1, r24	; 0x01
    311e:	42 c0       	rjmp	.+132    	; 0x31a4 <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    3120:	8c 81       	ldd	r24, Y+4	; 0x04
    3122:	9d 81       	ldd	r25, Y+5	; 0x05
    3124:	fc 01       	movw	r30, r24
    3126:	80 85       	ldd	r24, Z+8	; 0x08
    3128:	88 2f       	mov	r24, r24
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	19 f0       	breq	.+6      	; 0x3136 <Keypad_DisableControlPins+0x3e>
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	d9 f0       	breq	.+54     	; 0x316a <Keypad_DisableControlPins+0x72>
    3134:	35 c0       	rjmp	.+106    	; 0x31a0 <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    3136:	1a 82       	std	Y+2, r1	; 0x02
    3138:	14 c0       	rjmp	.+40     	; 0x3162 <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    313a:	8c 81       	ldd	r24, Y+4	; 0x04
    313c:	9d 81       	ldd	r25, Y+5	; 0x05
    313e:	fc 01       	movw	r30, r24
    3140:	41 85       	ldd	r20, Z+9	; 0x09
    3142:	8a 81       	ldd	r24, Y+2	; 0x02
    3144:	88 2f       	mov	r24, r24
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	2c 81       	ldd	r18, Y+4	; 0x04
    314a:	3d 81       	ldd	r19, Y+5	; 0x05
    314c:	82 0f       	add	r24, r18
    314e:	93 1f       	adc	r25, r19
    3150:	fc 01       	movw	r30, r24
    3152:	80 81       	ld	r24, Z
    3154:	64 2f       	mov	r22, r20
    3156:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    315a:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	8f 5f       	subi	r24, 0xFF	; 255
    3160:	8a 83       	std	Y+2, r24	; 0x02
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	84 30       	cpi	r24, 0x04	; 4
    3166:	48 f3       	brcs	.-46     	; 0x313a <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    3168:	1d c0       	rjmp	.+58     	; 0x31a4 <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    316a:	1a 82       	std	Y+2, r1	; 0x02
    316c:	15 c0       	rjmp	.+42     	; 0x3198 <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    316e:	8c 81       	ldd	r24, Y+4	; 0x04
    3170:	9d 81       	ldd	r25, Y+5	; 0x05
    3172:	fc 01       	movw	r30, r24
    3174:	41 85       	ldd	r20, Z+9	; 0x09
    3176:	8a 81       	ldd	r24, Y+2	; 0x02
    3178:	88 2f       	mov	r24, r24
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	2c 81       	ldd	r18, Y+4	; 0x04
    317e:	3d 81       	ldd	r19, Y+5	; 0x05
    3180:	82 0f       	add	r24, r18
    3182:	93 1f       	adc	r25, r19
    3184:	04 96       	adiw	r24, 0x04	; 4
    3186:	fc 01       	movw	r30, r24
    3188:	80 81       	ld	r24, Z
    318a:	64 2f       	mov	r22, r20
    318c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Dio_enuWriteChannel>
    3190:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	8f 5f       	subi	r24, 0xFF	; 255
    3196:	8a 83       	std	Y+2, r24	; 0x02
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	84 30       	cpi	r24, 0x04	; 4
    319c:	40 f3       	brcs	.-48     	; 0x316e <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	08 95       	ret

000031b6 <Button_enuRead>:



/********************************** Software Interfaces Declarations *******************/

Button_StatusErrorType Button_enuRead(const Button_ConfigType *Address_Button,Button_PressStatusType* Address_State ){
    31b6:	cf 93       	push	r28
    31b8:	df 93       	push	r29
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <Button_enuRead+0x6>
    31bc:	00 d0       	rcall	.+0      	; 0x31be <Button_enuRead+0x8>
    31be:	00 d0       	rcall	.+0      	; 0x31c0 <Button_enuRead+0xa>
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	9c 83       	std	Y+4, r25	; 0x04
    31c6:	8b 83       	std	Y+3, r24	; 0x03
    31c8:	7e 83       	std	Y+6, r23	; 0x06
    31ca:	6d 83       	std	Y+5, r22	; 0x05

	Button_StatusErrorType Loc_enuStatus = BUTTON_STATUS_OK;
    31cc:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    31ce:	1a 82       	std	Y+2, r1	; 0x02
	if( NULL == Address_Button || NULL == Address_State ){
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	9c 81       	ldd	r25, Y+4	; 0x04
    31d4:	89 2b       	or	r24, r25
    31d6:	21 f0       	breq	.+8      	; 0x31e0 <Button_enuRead+0x2a>
    31d8:	8d 81       	ldd	r24, Y+5	; 0x05
    31da:	9e 81       	ldd	r25, Y+6	; 0x06
    31dc:	89 2b       	or	r24, r25
    31de:	19 f4       	brne	.+6      	; 0x31e6 <Button_enuRead+0x30>
		Loc_enuStatus = BUTTON_STATUS_NULL_POINTER_ADDRESS;
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	31 c0       	rjmp	.+98     	; 0x3248 <Button_enuRead+0x92>

	}
	else{
	        switch(Address_Button->button_connection){
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ea:	fc 01       	movw	r30, r24
    31ec:	81 81       	ldd	r24, Z+1	; 0x01
    31ee:	88 2f       	mov	r24, r24
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	71 f0       	breq	.+28     	; 0x3212 <Button_enuRead+0x5c>
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	29 f5       	brne	.+74     	; 0x3244 <Button_enuRead+0x8e>

	            case BUTTON_CONNECTION_PULL_DOWN:
	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	fc 01       	movw	r30, r24
    3200:	20 81       	ld	r18, Z
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	9e 81       	ldd	r25, Y+6	; 0x06
    3206:	bc 01       	movw	r22, r24
    3208:	82 2f       	mov	r24, r18
    320a:	0e 94 c7 0b 	call	0x178e	; 0x178e <Dio_enuReadChannel>
    320e:	8a 83       	std	Y+2, r24	; 0x02
	                break;
    3210:	1b c0       	rjmp	.+54     	; 0x3248 <Button_enuRead+0x92>
	            case BUTTON_CONNECTION_PULL_UP:

	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	fc 01       	movw	r30, r24
    3218:	20 81       	ld	r18, Z
    321a:	8d 81       	ldd	r24, Y+5	; 0x05
    321c:	9e 81       	ldd	r25, Y+6	; 0x06
    321e:	bc 01       	movw	r22, r24
    3220:	82 2f       	mov	r24, r18
    3222:	0e 94 c7 0b 	call	0x178e	; 0x178e <Dio_enuReadChannel>
    3226:	8a 83       	std	Y+2, r24	; 0x02
	                *Address_State = !(*Address_State);
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	fc 01       	movw	r30, r24
    322e:	90 81       	ld	r25, Z
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	99 23       	and	r25, r25
    3234:	09 f0       	breq	.+2      	; 0x3238 <Button_enuRead+0x82>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	28 2f       	mov	r18, r24
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	fc 01       	movw	r30, r24
    3240:	20 83       	st	Z, r18
	                break;
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <Button_enuRead+0x92>

	            default:
	                Loc_enuStatus = BUTTON_STATUS_FAIL;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	89 83       	std	Y+1, r24	; 0x01
	    }




	return Loc_enuStatus;
    3248:	89 81       	ldd	r24, Y+1	; 0x01

}
    324a:	26 96       	adiw	r28, 0x06	; 6
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	08 95       	ret

0000325c <main>:
u8 Global_u8Operations =0;

Calculator_FlagType Global_enuFlag = CALCULATOR_FLAG_OK;
//////////////////////////////////////////////////////////////////

int main(void){
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62

	Port_voidInit();
    3264:	0e 94 2a 07 	call	0xe54	; 0xe54 <Port_voidInit>
	Lcd_4bit_enuInit(&Lcd);
    3268:	80 e9       	ldi	r24, 0x90	; 144
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	0e 94 c9 10 	call	0x2192	; 0x2192 <Lcd_4bit_enuInit>

	Timer0_enuInit(&Timer0);
    3270:	87 ea       	ldi	r24, 0xA7	; 167
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Timer0_enuInit>
	Timer0_SetCallbackFunction(&Timer0,Keypad_IsrRead);
    3278:	6d e0       	ldi	r22, 0x0D	; 13
    327a:	70 e2       	ldi	r23, 0x20	; 32
    327c:	87 ea       	ldi	r24, 0xA7	; 167
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 86 06 	call	0xd0c	; 0xd0c <Timer0_SetCallbackFunction>
	Timer0_enuEnableInterrupt(&Timer0);
    3284:	87 ea       	ldi	r24, 0xA7	; 167
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	0e 94 c1 05 	call	0xb82	; 0xb82 <Timer0_enuEnableInterrupt>
	Gie_enuEnableGlobalInterrupt();
    328c:	0e 94 36 09 	call	0x126c	; 0x126c <Gie_enuEnableGlobalInterrupt>



	while(1){
		Calculator_InitValues();
    3290:	0e 94 28 20 	call	0x4050	; 0x4050 <Calculator_InitValues>
		Calculator_GetEquation();
    3294:	0e 94 4f 19 	call	0x329e	; 0x329e <Calculator_GetEquation>
		Calculator_DisplayResult();
    3298:	0e 94 ee 19 	call	0x33dc	; 0x33dc <Calculator_DisplayResult>




	}
    329c:	f9 cf       	rjmp	.-14     	; 0x3290 <main+0x34>

0000329e <Calculator_GetEquation>:
	return 0;
}
///////////////////////////////////////////////////////////////////

void Calculator_GetEquation(void){
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	1f 92       	push	r1
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62

	u8 Loc_u8Flag = ONE_VALUE;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	89 83       	std	Y+1, r24	; 0x01
	Global_enuFlag = CALCULATOR_FLAG_OK;
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <Global_enuFlag>


	while(Loc_u8Flag != ZERO_VALUE){
    32b2:	83 c0       	rjmp	.+262    	; 0x33ba <Calculator_GetEquation+0x11c>
			if(Keypad_Status == KEYPAD_IS_PRESSED){
    32b4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Keypad_Status>
    32b8:	88 23       	and	r24, r24
    32ba:	09 f0       	breq	.+2      	; 0x32be <Calculator_GetEquation+0x20>
    32bc:	7e c0       	rjmp	.+252    	; 0x33ba <Calculator_GetEquation+0x11c>
				switch(Keypad_Result){
    32be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Keypad_Result>
    32c2:	88 2f       	mov	r24, r24
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	8d 32       	cpi	r24, 0x2D	; 45
    32c8:	91 05       	cpc	r25, r1
    32ca:	f9 f0       	breq	.+62     	; 0x330a <Calculator_GetEquation+0x6c>
    32cc:	8e 32       	cpi	r24, 0x2E	; 46
    32ce:	91 05       	cpc	r25, r1
    32d0:	34 f4       	brge	.+12     	; 0x32de <Calculator_GetEquation+0x40>
    32d2:	8a 32       	cpi	r24, 0x2A	; 42
    32d4:	91 05       	cpc	r25, r1
    32d6:	a1 f1       	breq	.+104    	; 0x3340 <Calculator_GetEquation+0xa2>
    32d8:	8b 97       	sbiw	r24, 0x2b	; 43
    32da:	b9 f0       	breq	.+46     	; 0x330a <Calculator_GetEquation+0x6c>
    32dc:	55 c0       	rjmp	.+170    	; 0x3388 <Calculator_GetEquation+0xea>
    32de:	8d 33       	cpi	r24, 0x3D	; 61
    32e0:	91 05       	cpc	r25, r1
    32e2:	51 f0       	breq	.+20     	; 0x32f8 <Calculator_GetEquation+0x5a>
    32e4:	83 36       	cpi	r24, 0x63	; 99
    32e6:	91 05       	cpc	r25, r1
    32e8:	19 f0       	breq	.+6      	; 0x32f0 <Calculator_GetEquation+0x52>
    32ea:	8f 97       	sbiw	r24, 0x2f	; 47
    32ec:	49 f1       	breq	.+82     	; 0x3340 <Calculator_GetEquation+0xa2>
    32ee:	4c c0       	rjmp	.+152    	; 0x3388 <Calculator_GetEquation+0xea>

				case 'c' :
					Global_enuFlag = CALCULATOR_FLAG_CLEAR;
    32f0:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <Global_enuFlag>
					Loc_u8Flag = ZERO_VALUE;
    32f4:	19 82       	std	Y+1, r1	; 0x01
					break;
    32f6:	5e c0       	rjmp	.+188    	; 0x33b4 <Calculator_GetEquation+0x116>

				case '=' :
					Loc_u8Flag = ZERO_VALUE;
    32f8:	19 82       	std	Y+1, r1	; 0x01
					Lcd_4bit_enuDisplayCharacter(&Lcd, Keypad_Result);
    32fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Keypad_Result>
    32fe:	68 2f       	mov	r22, r24
    3300:	80 e9       	ldi	r24, 0x90	; 144
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	0e 94 34 13 	call	0x2668	; 0x2668 <Lcd_4bit_enuDisplayCharacter>
					break;
    3308:	55 c0       	rjmp	.+170    	; 0x33b4 <Calculator_GetEquation+0x116>


				case '+' :
				case '-' :

					Global_u8EquationArray[Global_u8Index++]=Keypad_Result;
    330a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    330e:	91 e0       	ldi	r25, 0x01	; 1
    3310:	98 0f       	add	r25, r24
    3312:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Global_u8Index>
    3316:	88 2f       	mov	r24, r24
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <Keypad_Result>
    331e:	89 5f       	subi	r24, 0xF9	; 249
    3320:	9e 4f       	sbci	r25, 0xFE	; 254
    3322:	fc 01       	movw	r30, r24
    3324:	20 83       	st	Z, r18
					Global_u8Operations++;
    3326:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Global_u8Operations>
    332a:	8f 5f       	subi	r24, 0xFF	; 255
    332c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Global_u8Operations>
					Lcd_4bit_enuDisplayCharacter(&Lcd, Keypad_Result);
    3330:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Keypad_Result>
    3334:	68 2f       	mov	r22, r24
    3336:	80 e9       	ldi	r24, 0x90	; 144
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 34 13 	call	0x2668	; 0x2668 <Lcd_4bit_enuDisplayCharacter>
					break;
    333e:	3a c0       	rjmp	.+116    	; 0x33b4 <Calculator_GetEquation+0x116>

				case '/' :
				case '*' :

					Global_u8Mul_Divide_Inxdex = Global_u8Index;
    3340:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    3344:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Global_u8Mul_Divide_Inxdex>
					Global_u8EquationArray[Global_u8Index++]=Keypad_Result;
    3348:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    334c:	91 e0       	ldi	r25, 0x01	; 1
    334e:	98 0f       	add	r25, r24
    3350:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Global_u8Index>
    3354:	88 2f       	mov	r24, r24
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <Keypad_Result>
    335c:	89 5f       	subi	r24, 0xF9	; 249
    335e:	9e 4f       	sbci	r25, 0xFE	; 254
    3360:	fc 01       	movw	r30, r24
    3362:	20 83       	st	Z, r18
					Global_u8Mul_Divide_Operations++;
    3364:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Global_u8Mul_Divide_Operations>
    3368:	8f 5f       	subi	r24, 0xFF	; 255
    336a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Global_u8Mul_Divide_Operations>
					Global_u8Operations++;
    336e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Global_u8Operations>
    3372:	8f 5f       	subi	r24, 0xFF	; 255
    3374:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Global_u8Operations>
					Lcd_4bit_enuDisplayCharacter(&Lcd, Keypad_Result);
    3378:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Keypad_Result>
    337c:	68 2f       	mov	r22, r24
    337e:	80 e9       	ldi	r24, 0x90	; 144
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	0e 94 34 13 	call	0x2668	; 0x2668 <Lcd_4bit_enuDisplayCharacter>
					break;
    3386:	16 c0       	rjmp	.+44     	; 0x33b4 <Calculator_GetEquation+0x116>

				default:

					Global_u8EquationArray[Global_u8Index++]=Keypad_Result;
    3388:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    338c:	91 e0       	ldi	r25, 0x01	; 1
    338e:	98 0f       	add	r25, r24
    3390:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Global_u8Index>
    3394:	88 2f       	mov	r24, r24
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <Keypad_Result>
    339c:	89 5f       	subi	r24, 0xF9	; 249
    339e:	9e 4f       	sbci	r25, 0xFE	; 254
    33a0:	fc 01       	movw	r30, r24
    33a2:	20 83       	st	Z, r18

					Lcd_4bit_enuDisplayCharacter(&Lcd, Keypad_Result);
    33a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Keypad_Result>
    33a8:	68 2f       	mov	r22, r24
    33aa:	80 e9       	ldi	r24, 0x90	; 144
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 34 13 	call	0x2668	; 0x2668 <Lcd_4bit_enuDisplayCharacter>
					break;
    33b2:	00 00       	nop





				Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    33b4:	83 e0       	ldi	r24, 0x03	; 3
    33b6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Keypad_Status>

	u8 Loc_u8Flag = ONE_VALUE;
	Global_enuFlag = CALCULATOR_FLAG_OK;


	while(Loc_u8Flag != ZERO_VALUE){
    33ba:	89 81       	ldd	r24, Y+1	; 0x01
    33bc:	88 23       	and	r24, r24
    33be:	09 f0       	breq	.+2      	; 0x33c2 <Calculator_GetEquation+0x124>
    33c0:	79 cf       	rjmp	.-270    	; 0x32b4 <Calculator_GetEquation+0x16>

				Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
			}
	}

	Global_u8EquationArray[Global_u8Index]='\0';
    33c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    33c6:	88 2f       	mov	r24, r24
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	89 5f       	subi	r24, 0xF9	; 249
    33cc:	9e 4f       	sbci	r25, 0xFE	; 254
    33ce:	fc 01       	movw	r30, r24
    33d0:	10 82       	st	Z, r1

}
    33d2:	00 00       	nop
    33d4:	0f 90       	pop	r0
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	08 95       	ret

000033dc <Calculator_DisplayResult>:


void Calculator_DisplayResult(void){
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
    33e0:	1f 92       	push	r1
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62

	u8 Loc_u8Flag = ONE_VALUE;
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	89 83       	std	Y+1, r24	; 0x01


	switch(Global_enuFlag){
    33ea:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Global_enuFlag>
    33ee:	88 2f       	mov	r24, r24
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	19 f0       	breq	.+6      	; 0x33fc <Calculator_DisplayResult+0x20>
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	21 f0       	breq	.+8      	; 0x3402 <Calculator_DisplayResult+0x26>
			}

		break;

	default :
			break;
    33fa:	94 c0       	rjmp	.+296    	; 0x3524 <Calculator_DisplayResult+0x148>


	switch(Global_enuFlag){

	case CALCULATOR_FLAG_CLEAR:
		Calculator_Clear();
    33fc:	0e 94 bd 1b 	call	0x377a	; 0x377a <Calculator_Clear>
		break;
    3400:	91 c0       	rjmp	.+290    	; 0x3524 <Calculator_DisplayResult+0x148>

	case CALCULATOR_FLAG_OK :

			if(Global_u8Mul_Divide_Operations >1 || (Global_u8EquationArray[0]=='*' ||Global_u8EquationArray[0]=='/') ){
    3402:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Global_u8Mul_Divide_Operations>
    3406:	82 30       	cpi	r24, 0x02	; 2
    3408:	40 f4       	brcc	.+16     	; 0x341a <Calculator_DisplayResult+0x3e>
    340a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Global_u8EquationArray>
    340e:	8a 32       	cpi	r24, 0x2A	; 42
    3410:	21 f0       	breq	.+8      	; 0x341a <Calculator_DisplayResult+0x3e>
    3412:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Global_u8EquationArray>
    3416:	8f 32       	cpi	r24, 0x2F	; 47
    3418:	19 f4       	brne	.+6      	; 0x3420 <Calculator_DisplayResult+0x44>
				// more than one * /
				Calculator_DisplaySyntxError();
    341a:	0e 94 97 1a 	call	0x352e	; 0x352e <Calculator_DisplaySyntxError>
    341e:	81 c0       	rjmp	.+258    	; 0x3522 <Calculator_DisplayResult+0x146>
			}
			else if(Global_u8EquationArray[Global_u8Index-1]=='*' ||Global_u8EquationArray[Global_u8Index-1]=='/' ||
    3420:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    3424:	88 2f       	mov	r24, r24
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	89 5f       	subi	r24, 0xF9	; 249
    342c:	9e 4f       	sbci	r25, 0xFE	; 254
    342e:	fc 01       	movw	r30, r24
    3430:	80 81       	ld	r24, Z
    3432:	8a 32       	cpi	r24, 0x2A	; 42
    3434:	09 f1       	breq	.+66     	; 0x3478 <Calculator_DisplayResult+0x9c>
    3436:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    343a:	88 2f       	mov	r24, r24
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	89 5f       	subi	r24, 0xF9	; 249
    3442:	9e 4f       	sbci	r25, 0xFE	; 254
    3444:	fc 01       	movw	r30, r24
    3446:	80 81       	ld	r24, Z
    3448:	8f 32       	cpi	r24, 0x2F	; 47
    344a:	b1 f0       	breq	.+44     	; 0x3478 <Calculator_DisplayResult+0x9c>
					Global_u8EquationArray[Global_u8Index-1]=='-' || Global_u8EquationArray[Global_u8Index-1]=='+'  ) {
    344c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    3450:	88 2f       	mov	r24, r24
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	89 5f       	subi	r24, 0xF9	; 249
    3458:	9e 4f       	sbci	r25, 0xFE	; 254
    345a:	fc 01       	movw	r30, r24
    345c:	80 81       	ld	r24, Z

			if(Global_u8Mul_Divide_Operations >1 || (Global_u8EquationArray[0]=='*' ||Global_u8EquationArray[0]=='/') ){
				// more than one * /
				Calculator_DisplaySyntxError();
			}
			else if(Global_u8EquationArray[Global_u8Index-1]=='*' ||Global_u8EquationArray[Global_u8Index-1]=='/' ||
    345e:	8d 32       	cpi	r24, 0x2D	; 45
    3460:	59 f0       	breq	.+22     	; 0x3478 <Calculator_DisplayResult+0x9c>
					Global_u8EquationArray[Global_u8Index-1]=='-' || Global_u8EquationArray[Global_u8Index-1]=='+'  ) {
    3462:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	89 5f       	subi	r24, 0xF9	; 249
    346e:	9e 4f       	sbci	r25, 0xFE	; 254
    3470:	fc 01       	movw	r30, r24
    3472:	80 81       	ld	r24, Z
    3474:	8b 32       	cpi	r24, 0x2B	; 43
    3476:	19 f4       	brne	.+6      	; 0x347e <Calculator_DisplayResult+0xa2>
				// ends with += -=
				Calculator_DisplaySyntxError();
    3478:	0e 94 97 1a 	call	0x352e	; 0x352e <Calculator_DisplaySyntxError>
    347c:	52 c0       	rjmp	.+164    	; 0x3522 <Calculator_DisplayResult+0x146>
			}

			else if(Global_u8Operations == 0){
    347e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Global_u8Operations>
    3482:	88 23       	and	r24, r24
    3484:	49 f4       	brne	.+18     	; 0x3498 <Calculator_DisplayResult+0xbc>

				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, Global_u8EquationArray,LCD_ROW3,LCD_COL5);
    3486:	25 e0       	ldi	r18, 0x05	; 5
    3488:	43 e0       	ldi	r20, 0x03	; 3
    348a:	67 e0       	ldi	r22, 0x07	; 7
    348c:	71 e0       	ldi	r23, 0x01	; 1
    348e:	80 e9       	ldi	r24, 0x90	; 144
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	0e 94 b6 13 	call	0x276c	; 0x276c <Lcd_4bit_enuDisplayStringWithPosition>

							}
						}
			}

		break;
    3496:	45 c0       	rjmp	.+138    	; 0x3522 <Calculator_DisplayResult+0x146>
			else if(Global_u8Operations == 0){

				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, Global_u8EquationArray,LCD_ROW3,LCD_COL5);

			}
			else if(Global_u8Mul_Divide_Inxdex != 0 && (Global_u8EquationArray[Global_u8Mul_Divide_Inxdex-1]=='*' ||Global_u8EquationArray[Global_u8Mul_Divide_Inxdex-1]=='/'||
    3498:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Global_u8Mul_Divide_Inxdex>
    349c:	88 23       	and	r24, r24
    349e:	79 f1       	breq	.+94     	; 0x34fe <Calculator_DisplayResult+0x122>
    34a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Global_u8Mul_Divide_Inxdex>
    34a4:	88 2f       	mov	r24, r24
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	89 5f       	subi	r24, 0xF9	; 249
    34ac:	9e 4f       	sbci	r25, 0xFE	; 254
    34ae:	fc 01       	movw	r30, r24
    34b0:	80 81       	ld	r24, Z
    34b2:	8a 32       	cpi	r24, 0x2A	; 42
    34b4:	09 f1       	breq	.+66     	; 0x34f8 <Calculator_DisplayResult+0x11c>
    34b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Global_u8Mul_Divide_Inxdex>
    34ba:	88 2f       	mov	r24, r24
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	89 5f       	subi	r24, 0xF9	; 249
    34c2:	9e 4f       	sbci	r25, 0xFE	; 254
    34c4:	fc 01       	movw	r30, r24
    34c6:	80 81       	ld	r24, Z
    34c8:	8f 32       	cpi	r24, 0x2F	; 47
    34ca:	b1 f0       	breq	.+44     	; 0x34f8 <Calculator_DisplayResult+0x11c>
					Global_u8EquationArray[Global_u8Mul_Divide_Inxdex-1]=='-' || Global_u8EquationArray[Global_u8Mul_Divide_Inxdex-1]=='+'  )  ){
    34cc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Global_u8Mul_Divide_Inxdex>
    34d0:	88 2f       	mov	r24, r24
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	89 5f       	subi	r24, 0xF9	; 249
    34d8:	9e 4f       	sbci	r25, 0xFE	; 254
    34da:	fc 01       	movw	r30, r24
    34dc:	80 81       	ld	r24, Z
			else if(Global_u8Operations == 0){

				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, Global_u8EquationArray,LCD_ROW3,LCD_COL5);

			}
			else if(Global_u8Mul_Divide_Inxdex != 0 && (Global_u8EquationArray[Global_u8Mul_Divide_Inxdex-1]=='*' ||Global_u8EquationArray[Global_u8Mul_Divide_Inxdex-1]=='/'||
    34de:	8d 32       	cpi	r24, 0x2D	; 45
    34e0:	59 f0       	breq	.+22     	; 0x34f8 <Calculator_DisplayResult+0x11c>
					Global_u8EquationArray[Global_u8Mul_Divide_Inxdex-1]=='-' || Global_u8EquationArray[Global_u8Mul_Divide_Inxdex-1]=='+'  )  ){
    34e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Global_u8Mul_Divide_Inxdex>
    34e6:	88 2f       	mov	r24, r24
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	89 5f       	subi	r24, 0xF9	; 249
    34ee:	9e 4f       	sbci	r25, 0xFE	; 254
    34f0:	fc 01       	movw	r30, r24
    34f2:	80 81       	ld	r24, Z
    34f4:	8b 32       	cpi	r24, 0x2B	; 43
    34f6:	19 f4       	brne	.+6      	; 0x34fe <Calculator_DisplayResult+0x122>
						Calculator_DisplaySyntxError();
    34f8:	0e 94 97 1a 	call	0x352e	; 0x352e <Calculator_DisplaySyntxError>
    34fc:	12 c0       	rjmp	.+36     	; 0x3522 <Calculator_DisplayResult+0x146>
			}
			else{

				Calculator_DoOperations();
    34fe:	0e 94 48 1c 	call	0x3890	; 0x3890 <Calculator_DoOperations>

				// poing til press Clear
						while(Loc_u8Flag != ZERO_VALUE){
    3502:	0b c0       	rjmp	.+22     	; 0x351a <Calculator_DisplayResult+0x13e>
							if(Keypad_Status == KEYPAD_IS_PRESSED && Keypad_Result =='c'){
    3504:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Keypad_Status>
    3508:	88 23       	and	r24, r24
    350a:	39 f4       	brne	.+14     	; 0x351a <Calculator_DisplayResult+0x13e>
    350c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Keypad_Result>
    3510:	83 36       	cpi	r24, 0x63	; 99
    3512:	19 f4       	brne	.+6      	; 0x351a <Calculator_DisplayResult+0x13e>
								Calculator_Clear();
    3514:	0e 94 bd 1b 	call	0x377a	; 0x377a <Calculator_Clear>

								Loc_u8Flag = ZERO_VALUE;
    3518:	19 82       	std	Y+1, r1	; 0x01
			else{

				Calculator_DoOperations();

				// poing til press Clear
						while(Loc_u8Flag != ZERO_VALUE){
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	88 23       	and	r24, r24
    351e:	91 f7       	brne	.-28     	; 0x3504 <Calculator_DisplayResult+0x128>

							}
						}
			}

		break;
    3520:	00 c0       	rjmp	.+0      	; 0x3522 <Calculator_DisplayResult+0x146>
    3522:	00 00       	nop

	default :
			break;

	}
}
    3524:	00 00       	nop
    3526:	0f 90       	pop	r0
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	08 95       	ret

0000352e <Calculator_DisplaySyntxError>:

///////////////////////////////////////////////////////////////////



void Calculator_DisplaySyntxError(void){
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	2e 97       	sbiw	r28, 0x0e	; 14
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	de bf       	out	0x3e, r29	; 62
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	cd bf       	out	0x3d, r28	; 61

	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    3542:	61 e0       	ldi	r22, 0x01	; 1
    3544:	80 e9       	ldi	r24, 0x90	; 144
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	a0 e8       	ldi	r26, 0x80	; 128
    3552:	b0 e4       	ldi	r27, 0x40	; 64
    3554:	89 83       	std	Y+1, r24	; 0x01
    3556:	9a 83       	std	Y+2, r25	; 0x02
    3558:	ab 83       	std	Y+3, r26	; 0x03
    355a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	4a e7       	ldi	r20, 0x7A	; 122
    3562:	55 e4       	ldi	r21, 0x45	; 69
    3564:	69 81       	ldd	r22, Y+1	; 0x01
    3566:	7a 81       	ldd	r23, Y+2	; 0x02
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	9c 81       	ldd	r25, Y+4	; 0x04
    356c:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	8d 83       	std	Y+5, r24	; 0x05
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	af 83       	std	Y+7, r26	; 0x07
    357a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e8       	ldi	r20, 0x80	; 128
    3582:	5f e3       	ldi	r21, 0x3F	; 63
    3584:	6d 81       	ldd	r22, Y+5	; 0x05
    3586:	7e 81       	ldd	r23, Y+6	; 0x06
    3588:	8f 81       	ldd	r24, Y+7	; 0x07
    358a:	98 85       	ldd	r25, Y+8	; 0x08
    358c:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    3590:	88 23       	and	r24, r24
    3592:	2c f4       	brge	.+10     	; 0x359e <Calculator_DisplaySyntxError+0x70>
		__ticks = 1;
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	9a 87       	std	Y+10, r25	; 0x0a
    359a:	89 87       	std	Y+9, r24	; 0x09
    359c:	3f c0       	rjmp	.+126    	; 0x361c <Calculator_DisplaySyntxError+0xee>
	else if (__tmp > 65535)
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	3f ef       	ldi	r19, 0xFF	; 255
    35a2:	4f e7       	ldi	r20, 0x7F	; 127
    35a4:	57 e4       	ldi	r21, 0x47	; 71
    35a6:	6d 81       	ldd	r22, Y+5	; 0x05
    35a8:	7e 81       	ldd	r23, Y+6	; 0x06
    35aa:	8f 81       	ldd	r24, Y+7	; 0x07
    35ac:	98 85       	ldd	r25, Y+8	; 0x08
    35ae:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    35b2:	18 16       	cp	r1, r24
    35b4:	4c f5       	brge	.+82     	; 0x3608 <Calculator_DisplaySyntxError+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e2       	ldi	r20, 0x20	; 32
    35bc:	51 e4       	ldi	r21, 0x41	; 65
    35be:	69 81       	ldd	r22, Y+1	; 0x01
    35c0:	7a 81       	ldd	r23, Y+2	; 0x02
    35c2:	8b 81       	ldd	r24, Y+3	; 0x03
    35c4:	9c 81       	ldd	r25, Y+4	; 0x04
    35c6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	bc 01       	movw	r22, r24
    35d0:	cd 01       	movw	r24, r26
    35d2:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	9a 87       	std	Y+10, r25	; 0x0a
    35dc:	89 87       	std	Y+9, r24	; 0x09
    35de:	0f c0       	rjmp	.+30     	; 0x35fe <Calculator_DisplaySyntxError+0xd0>
    35e0:	80 e9       	ldi	r24, 0x90	; 144
    35e2:	91 e0       	ldi	r25, 0x01	; 1
    35e4:	9c 87       	std	Y+12, r25	; 0x0c
    35e6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    35ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <Calculator_DisplaySyntxError+0xbe>
    35f0:	9c 87       	std	Y+12, r25	; 0x0c
    35f2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f4:	89 85       	ldd	r24, Y+9	; 0x09
    35f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	9a 87       	std	Y+10, r25	; 0x0a
    35fc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fe:	89 85       	ldd	r24, Y+9	; 0x09
    3600:	9a 85       	ldd	r25, Y+10	; 0x0a
    3602:	89 2b       	or	r24, r25
    3604:	69 f7       	brne	.-38     	; 0x35e0 <Calculator_DisplaySyntxError+0xb2>
    3606:	14 c0       	rjmp	.+40     	; 0x3630 <Calculator_DisplaySyntxError+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3608:	6d 81       	ldd	r22, Y+5	; 0x05
    360a:	7e 81       	ldd	r23, Y+6	; 0x06
    360c:	8f 81       	ldd	r24, Y+7	; 0x07
    360e:	98 85       	ldd	r25, Y+8	; 0x08
    3610:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	9a 87       	std	Y+10, r25	; 0x0a
    361a:	89 87       	std	Y+9, r24	; 0x09
    361c:	89 85       	ldd	r24, Y+9	; 0x09
    361e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3620:	9e 87       	std	Y+14, r25	; 0x0e
    3622:	8d 87       	std	Y+13, r24	; 0x0d
    3624:	8d 85       	ldd	r24, Y+13	; 0x0d
    3626:	9e 85       	ldd	r25, Y+14	; 0x0e
    3628:	01 97       	sbiw	r24, 0x01	; 1
    362a:	f1 f7       	brne	.-4      	; 0x3628 <Calculator_DisplaySyntxError+0xfa>
    362c:	9e 87       	std	Y+14, r25	; 0x0e
    362e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(LCD_CLEAR_DELAY);
	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "Syntax Error", LCD_ROW2, LCD_COL2);
    3630:	22 e0       	ldi	r18, 0x02	; 2
    3632:	42 e0       	ldi	r20, 0x02	; 2
    3634:	6b eb       	ldi	r22, 0xBB	; 187
    3636:	70 e0       	ldi	r23, 0x00	; 0
    3638:	80 e9       	ldi	r24, 0x90	; 144
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	0e 94 b6 13 	call	0x276c	; 0x276c <Lcd_4bit_enuDisplayStringWithPosition>
}
    3640:	00 00       	nop
    3642:	2e 96       	adiw	r28, 0x0e	; 14
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	08 95       	ret

00003654 <Calculator_DisplayMathError>:


void Calculator_DisplayMathError(void){
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	2e 97       	sbiw	r28, 0x0e	; 14
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	de bf       	out	0x3e, r29	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	cd bf       	out	0x3d, r28	; 61
	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    3668:	61 e0       	ldi	r22, 0x01	; 1
    366a:	80 e9       	ldi	r24, 0x90	; 144
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	a0 e8       	ldi	r26, 0x80	; 128
    3678:	b0 e4       	ldi	r27, 0x40	; 64
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	ab 83       	std	Y+3, r26	; 0x03
    3680:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	4a e7       	ldi	r20, 0x7A	; 122
    3688:	55 e4       	ldi	r21, 0x45	; 69
    368a:	69 81       	ldd	r22, Y+1	; 0x01
    368c:	7a 81       	ldd	r23, Y+2	; 0x02
    368e:	8b 81       	ldd	r24, Y+3	; 0x03
    3690:	9c 81       	ldd	r25, Y+4	; 0x04
    3692:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	8d 83       	std	Y+5, r24	; 0x05
    369c:	9e 83       	std	Y+6, r25	; 0x06
    369e:	af 83       	std	Y+7, r26	; 0x07
    36a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e8       	ldi	r20, 0x80	; 128
    36a8:	5f e3       	ldi	r21, 0x3F	; 63
    36aa:	6d 81       	ldd	r22, Y+5	; 0x05
    36ac:	7e 81       	ldd	r23, Y+6	; 0x06
    36ae:	8f 81       	ldd	r24, Y+7	; 0x07
    36b0:	98 85       	ldd	r25, Y+8	; 0x08
    36b2:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    36b6:	88 23       	and	r24, r24
    36b8:	2c f4       	brge	.+10     	; 0x36c4 <Calculator_DisplayMathError+0x70>
		__ticks = 1;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9a 87       	std	Y+10, r25	; 0x0a
    36c0:	89 87       	std	Y+9, r24	; 0x09
    36c2:	3f c0       	rjmp	.+126    	; 0x3742 <Calculator_DisplayMathError+0xee>
	else if (__tmp > 65535)
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	3f ef       	ldi	r19, 0xFF	; 255
    36c8:	4f e7       	ldi	r20, 0x7F	; 127
    36ca:	57 e4       	ldi	r21, 0x47	; 71
    36cc:	6d 81       	ldd	r22, Y+5	; 0x05
    36ce:	7e 81       	ldd	r23, Y+6	; 0x06
    36d0:	8f 81       	ldd	r24, Y+7	; 0x07
    36d2:	98 85       	ldd	r25, Y+8	; 0x08
    36d4:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    36d8:	18 16       	cp	r1, r24
    36da:	4c f5       	brge	.+82     	; 0x372e <Calculator_DisplayMathError+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e2       	ldi	r20, 0x20	; 32
    36e2:	51 e4       	ldi	r21, 0x41	; 65
    36e4:	69 81       	ldd	r22, Y+1	; 0x01
    36e6:	7a 81       	ldd	r23, Y+2	; 0x02
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	9c 81       	ldd	r25, Y+4	; 0x04
    36ec:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	9a 87       	std	Y+10, r25	; 0x0a
    3702:	89 87       	std	Y+9, r24	; 0x09
    3704:	0f c0       	rjmp	.+30     	; 0x3724 <Calculator_DisplayMathError+0xd0>
    3706:	80 e9       	ldi	r24, 0x90	; 144
    3708:	91 e0       	ldi	r25, 0x01	; 1
    370a:	9c 87       	std	Y+12, r25	; 0x0c
    370c:	8b 87       	std	Y+11, r24	; 0x0b
    370e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3710:	9c 85       	ldd	r25, Y+12	; 0x0c
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	f1 f7       	brne	.-4      	; 0x3712 <Calculator_DisplayMathError+0xbe>
    3716:	9c 87       	std	Y+12, r25	; 0x0c
    3718:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371a:	89 85       	ldd	r24, Y+9	; 0x09
    371c:	9a 85       	ldd	r25, Y+10	; 0x0a
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	9a 87       	std	Y+10, r25	; 0x0a
    3722:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3724:	89 85       	ldd	r24, Y+9	; 0x09
    3726:	9a 85       	ldd	r25, Y+10	; 0x0a
    3728:	89 2b       	or	r24, r25
    372a:	69 f7       	brne	.-38     	; 0x3706 <Calculator_DisplayMathError+0xb2>
    372c:	14 c0       	rjmp	.+40     	; 0x3756 <Calculator_DisplayMathError+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372e:	6d 81       	ldd	r22, Y+5	; 0x05
    3730:	7e 81       	ldd	r23, Y+6	; 0x06
    3732:	8f 81       	ldd	r24, Y+7	; 0x07
    3734:	98 85       	ldd	r25, Y+8	; 0x08
    3736:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9a 87       	std	Y+10, r25	; 0x0a
    3740:	89 87       	std	Y+9, r24	; 0x09
    3742:	89 85       	ldd	r24, Y+9	; 0x09
    3744:	9a 85       	ldd	r25, Y+10	; 0x0a
    3746:	9e 87       	std	Y+14, r25	; 0x0e
    3748:	8d 87       	std	Y+13, r24	; 0x0d
    374a:	8d 85       	ldd	r24, Y+13	; 0x0d
    374c:	9e 85       	ldd	r25, Y+14	; 0x0e
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	f1 f7       	brne	.-4      	; 0x374e <Calculator_DisplayMathError+0xfa>
    3752:	9e 87       	std	Y+14, r25	; 0x0e
    3754:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(LCD_CLEAR_DELAY);
	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "Math Error", LCD_ROW2, LCD_COL2);
    3756:	22 e0       	ldi	r18, 0x02	; 2
    3758:	42 e0       	ldi	r20, 0x02	; 2
    375a:	68 ec       	ldi	r22, 0xC8	; 200
    375c:	70 e0       	ldi	r23, 0x00	; 0
    375e:	80 e9       	ldi	r24, 0x90	; 144
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	0e 94 b6 13 	call	0x276c	; 0x276c <Lcd_4bit_enuDisplayStringWithPosition>
}
    3766:	00 00       	nop
    3768:	2e 96       	adiw	r28, 0x0e	; 14
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	0f be       	out	0x3f, r0	; 63
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	df 91       	pop	r29
    3776:	cf 91       	pop	r28
    3778:	08 95       	ret

0000377a <Calculator_Clear>:

void Calculator_Clear(void){
    377a:	cf 93       	push	r28
    377c:	df 93       	push	r29
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    3782:	2e 97       	sbiw	r28, 0x0e	; 14
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	de bf       	out	0x3e, r29	; 62
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	cd bf       	out	0x3d, r28	; 61
	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    378e:	61 e0       	ldi	r22, 0x01	; 1
    3790:	80 e9       	ldi	r24, 0x90	; 144
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Lcd_4bit_enuSendCommand>
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	a0 e8       	ldi	r26, 0x80	; 128
    379e:	b0 e4       	ldi	r27, 0x40	; 64
    37a0:	89 83       	std	Y+1, r24	; 0x01
    37a2:	9a 83       	std	Y+2, r25	; 0x02
    37a4:	ab 83       	std	Y+3, r26	; 0x03
    37a6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	4a e7       	ldi	r20, 0x7A	; 122
    37ae:	55 e4       	ldi	r21, 0x45	; 69
    37b0:	69 81       	ldd	r22, Y+1	; 0x01
    37b2:	7a 81       	ldd	r23, Y+2	; 0x02
    37b4:	8b 81       	ldd	r24, Y+3	; 0x03
    37b6:	9c 81       	ldd	r25, Y+4	; 0x04
    37b8:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    37bc:	dc 01       	movw	r26, r24
    37be:	cb 01       	movw	r24, r22
    37c0:	8d 83       	std	Y+5, r24	; 0x05
    37c2:	9e 83       	std	Y+6, r25	; 0x06
    37c4:	af 83       	std	Y+7, r26	; 0x07
    37c6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	40 e8       	ldi	r20, 0x80	; 128
    37ce:	5f e3       	ldi	r21, 0x3F	; 63
    37d0:	6d 81       	ldd	r22, Y+5	; 0x05
    37d2:	7e 81       	ldd	r23, Y+6	; 0x06
    37d4:	8f 81       	ldd	r24, Y+7	; 0x07
    37d6:	98 85       	ldd	r25, Y+8	; 0x08
    37d8:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__cmpsf2>
    37dc:	88 23       	and	r24, r24
    37de:	2c f4       	brge	.+10     	; 0x37ea <Calculator_Clear+0x70>
		__ticks = 1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	9a 87       	std	Y+10, r25	; 0x0a
    37e6:	89 87       	std	Y+9, r24	; 0x09
    37e8:	3f c0       	rjmp	.+126    	; 0x3868 <Calculator_Clear+0xee>
	else if (__tmp > 65535)
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	3f ef       	ldi	r19, 0xFF	; 255
    37ee:	4f e7       	ldi	r20, 0x7F	; 127
    37f0:	57 e4       	ldi	r21, 0x47	; 71
    37f2:	6d 81       	ldd	r22, Y+5	; 0x05
    37f4:	7e 81       	ldd	r23, Y+6	; 0x06
    37f6:	8f 81       	ldd	r24, Y+7	; 0x07
    37f8:	98 85       	ldd	r25, Y+8	; 0x08
    37fa:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__gesf2>
    37fe:	18 16       	cp	r1, r24
    3800:	4c f5       	brge	.+82     	; 0x3854 <Calculator_Clear+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	40 e2       	ldi	r20, 0x20	; 32
    3808:	51 e4       	ldi	r21, 0x41	; 65
    380a:	69 81       	ldd	r22, Y+1	; 0x01
    380c:	7a 81       	ldd	r23, Y+2	; 0x02
    380e:	8b 81       	ldd	r24, Y+3	; 0x03
    3810:	9c 81       	ldd	r25, Y+4	; 0x04
    3812:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__mulsf3>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	bc 01       	movw	r22, r24
    381c:	cd 01       	movw	r24, r26
    381e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	9a 87       	std	Y+10, r25	; 0x0a
    3828:	89 87       	std	Y+9, r24	; 0x09
    382a:	0f c0       	rjmp	.+30     	; 0x384a <Calculator_Clear+0xd0>
    382c:	80 e9       	ldi	r24, 0x90	; 144
    382e:	91 e0       	ldi	r25, 0x01	; 1
    3830:	9c 87       	std	Y+12, r25	; 0x0c
    3832:	8b 87       	std	Y+11, r24	; 0x0b
    3834:	8b 85       	ldd	r24, Y+11	; 0x0b
    3836:	9c 85       	ldd	r25, Y+12	; 0x0c
    3838:	01 97       	sbiw	r24, 0x01	; 1
    383a:	f1 f7       	brne	.-4      	; 0x3838 <Calculator_Clear+0xbe>
    383c:	9c 87       	std	Y+12, r25	; 0x0c
    383e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3840:	89 85       	ldd	r24, Y+9	; 0x09
    3842:	9a 85       	ldd	r25, Y+10	; 0x0a
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	9a 87       	std	Y+10, r25	; 0x0a
    3848:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    384a:	89 85       	ldd	r24, Y+9	; 0x09
    384c:	9a 85       	ldd	r25, Y+10	; 0x0a
    384e:	89 2b       	or	r24, r25
    3850:	69 f7       	brne	.-38     	; 0x382c <Calculator_Clear+0xb2>
	_delay_ms(LCD_CLEAR_DELAY);
}
    3852:	14 c0       	rjmp	.+40     	; 0x387c <Calculator_Clear+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3854:	6d 81       	ldd	r22, Y+5	; 0x05
    3856:	7e 81       	ldd	r23, Y+6	; 0x06
    3858:	8f 81       	ldd	r24, Y+7	; 0x07
    385a:	98 85       	ldd	r25, Y+8	; 0x08
    385c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	9a 87       	std	Y+10, r25	; 0x0a
    3866:	89 87       	std	Y+9, r24	; 0x09
    3868:	89 85       	ldd	r24, Y+9	; 0x09
    386a:	9a 85       	ldd	r25, Y+10	; 0x0a
    386c:	9e 87       	std	Y+14, r25	; 0x0e
    386e:	8d 87       	std	Y+13, r24	; 0x0d
    3870:	8d 85       	ldd	r24, Y+13	; 0x0d
    3872:	9e 85       	ldd	r25, Y+14	; 0x0e
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <Calculator_Clear+0xfa>
    3878:	9e 87       	std	Y+14, r25	; 0x0e
    387a:	8d 87       	std	Y+13, r24	; 0x0d
    387c:	00 00       	nop
    387e:	2e 96       	adiw	r28, 0x0e	; 14
    3880:	0f b6       	in	r0, 0x3f	; 63
    3882:	f8 94       	cli
    3884:	de bf       	out	0x3e, r29	; 62
    3886:	0f be       	out	0x3f, r0	; 63
    3888:	cd bf       	out	0x3d, r28	; 61
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	08 95       	ret

00003890 <Calculator_DoOperations>:

///////////////////////////////////////////////////////////////////

void Calculator_DoOperations(void){
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62


			if(Global_u8Mul_Divide_Operations != 0){  // it's mul or division
    3898:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Global_u8Mul_Divide_Operations>
    389c:	88 23       	and	r24, r24
    389e:	19 f0       	breq	.+6      	; 0x38a6 <Calculator_DoOperations+0x16>
				Calculator_DoMulandDivide();
    38a0:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <Calculator_DoMulandDivide>

		// it's + - operations
			else{
				Calculator_DoSumandSub();
			}
}
    38a4:	02 c0       	rjmp	.+4      	; 0x38aa <Calculator_DoOperations+0x1a>
				Calculator_DoMulandDivide();
			}

		// it's + - operations
			else{
				Calculator_DoSumandSub();
    38a6:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <Calculator_DoSumandSub>
			}
}
    38aa:	00 00       	nop
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	08 95       	ret

000038b2 <Calculator_DoMulandDivide>:


///////////////////////////////////////////////////////////////////


void Calculator_DoMulandDivide(void){
    38b2:	cf 92       	push	r12
    38b4:	df 92       	push	r13
    38b6:	ef 92       	push	r14
    38b8:	ff 92       	push	r15
    38ba:	0f 93       	push	r16
    38bc:	cf 93       	push	r28
    38be:	df 93       	push	r29
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    38c4:	c3 54       	subi	r28, 0x43	; 67
    38c6:	d1 40       	sbci	r29, 0x01	; 1
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	f8 94       	cli
    38cc:	de bf       	out	0x3e, r29	; 62
    38ce:	0f be       	out	0x3f, r0	; 63
    38d0:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8Counter = ZERO_VALUE;
    38d2:	19 82       	std	Y+1, r1	; 0x01

	s8 Loc_s8FirstOperandSign = 1;
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8FirstOperandArr[100] ;
	u8 Loc_u8FirstOperandIndex = 0;
    38d8:	1b 82       	std	Y+3, r1	; 0x03
	u32 Loc_u32FirstOperand;

	u8 Loc_u8Operation ;


	s8 Loc_s8SecondOperandSign = 1;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	8c 83       	std	Y+4, r24	; 0x04
	u8 Loc_u8SecondOperandArr[100] ;
	u8 Loc_u8SecondOperandIndex = 0;
    38de:	1d 82       	std	Y+5, r1	; 0x05
	u32 Loc_u32SecondOperand;


	s8 Loc_s8ResultSign = 1;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	8e 83       	std	Y+6, r24	; 0x06
	u32 Loc_u32ResultOperand;
	f32 Loc_f32ResultOperandInFloat;
	u8 Loc_u8ArrResultOperandInFloat[100];
	while( (Global_u8EquationArray[Loc_u8Counter] != '/') && (Global_u8EquationArray[Loc_u8Counter] != '*') ){
    38e4:	36 c0       	rjmp	.+108    	; 0x3952 <Calculator_DoMulandDivide+0xa0>

		if (Global_u8EquationArray[Loc_u8Counter] == '-'){
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	88 2f       	mov	r24, r24
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	89 5f       	subi	r24, 0xF9	; 249
    38ee:	9e 4f       	sbci	r25, 0xFE	; 254
    38f0:	fc 01       	movw	r30, r24
    38f2:	80 81       	ld	r24, Z
    38f4:	8d 32       	cpi	r24, 0x2D	; 45
    38f6:	21 f4       	brne	.+8      	; 0x3900 <Calculator_DoMulandDivide+0x4e>
			Loc_s8FirstOperandSign*=-1;
    38f8:	8a 81       	ldd	r24, Y+2	; 0x02
    38fa:	81 95       	neg	r24
    38fc:	8a 83       	std	Y+2, r24	; 0x02
    38fe:	26 c0       	rjmp	.+76     	; 0x394c <Calculator_DoMulandDivide+0x9a>
		}
		else if(Global_u8EquationArray[Loc_u8Counter] >= '0' && Global_u8EquationArray[Loc_u8Counter] <= '9' ){
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	88 2f       	mov	r24, r24
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	89 5f       	subi	r24, 0xF9	; 249
    3908:	9e 4f       	sbci	r25, 0xFE	; 254
    390a:	fc 01       	movw	r30, r24
    390c:	80 81       	ld	r24, Z
    390e:	80 33       	cpi	r24, 0x30	; 48
    3910:	e8 f0       	brcs	.+58     	; 0x394c <Calculator_DoMulandDivide+0x9a>
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	88 2f       	mov	r24, r24
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	89 5f       	subi	r24, 0xF9	; 249
    391a:	9e 4f       	sbci	r25, 0xFE	; 254
    391c:	fc 01       	movw	r30, r24
    391e:	80 81       	ld	r24, Z
    3920:	8a 33       	cpi	r24, 0x3A	; 58
    3922:	a0 f4       	brcc	.+40     	; 0x394c <Calculator_DoMulandDivide+0x9a>
			Loc_u8FirstOperandArr[Loc_u8FirstOperandIndex++]= Global_u8EquationArray[Loc_u8Counter];
    3924:	8b 81       	ldd	r24, Y+3	; 0x03
    3926:	91 e0       	ldi	r25, 0x01	; 1
    3928:	98 0f       	add	r25, r24
    392a:	9b 83       	std	Y+3, r25	; 0x03
    392c:	88 2f       	mov	r24, r24
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	29 81       	ldd	r18, Y+1	; 0x01
    3932:	22 2f       	mov	r18, r18
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	29 5f       	subi	r18, 0xF9	; 249
    3938:	3e 4f       	sbci	r19, 0xFE	; 254
    393a:	f9 01       	movw	r30, r18
    393c:	40 81       	ld	r20, Z
    393e:	9e 01       	movw	r18, r28
    3940:	20 5f       	subi	r18, 0xF0	; 240
    3942:	3f 4f       	sbci	r19, 0xFF	; 255
    3944:	82 0f       	add	r24, r18
    3946:	93 1f       	adc	r25, r19
    3948:	fc 01       	movw	r30, r24
    394a:	40 83       	st	Z, r20


		}

		Loc_u8Counter++;
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	8f 5f       	subi	r24, 0xFF	; 255
    3950:	89 83       	std	Y+1, r24	; 0x01

	s8 Loc_s8ResultSign = 1;
	u32 Loc_u32ResultOperand;
	f32 Loc_f32ResultOperandInFloat;
	u8 Loc_u8ArrResultOperandInFloat[100];
	while( (Global_u8EquationArray[Loc_u8Counter] != '/') && (Global_u8EquationArray[Loc_u8Counter] != '*') ){
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	88 2f       	mov	r24, r24
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	89 5f       	subi	r24, 0xF9	; 249
    395a:	9e 4f       	sbci	r25, 0xFE	; 254
    395c:	fc 01       	movw	r30, r24
    395e:	80 81       	ld	r24, Z
    3960:	8f 32       	cpi	r24, 0x2F	; 47
    3962:	51 f0       	breq	.+20     	; 0x3978 <Calculator_DoMulandDivide+0xc6>
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	88 2f       	mov	r24, r24
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	89 5f       	subi	r24, 0xF9	; 249
    396c:	9e 4f       	sbci	r25, 0xFE	; 254
    396e:	fc 01       	movw	r30, r24
    3970:	80 81       	ld	r24, Z
    3972:	8a 32       	cpi	r24, 0x2A	; 42
    3974:	09 f0       	breq	.+2      	; 0x3978 <Calculator_DoMulandDivide+0xc6>
    3976:	b7 cf       	rjmp	.-146    	; 0x38e6 <Calculator_DoMulandDivide+0x34>
		Loc_u8Counter++;
	}



	Loc_u8FirstOperandArr[Loc_u8FirstOperandIndex]= '\0';
    3978:	8b 81       	ldd	r24, Y+3	; 0x03
    397a:	88 2f       	mov	r24, r24
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	9e 01       	movw	r18, r28
    3980:	20 5f       	subi	r18, 0xF0	; 240
    3982:	3f 4f       	sbci	r19, 0xFF	; 255
    3984:	82 0f       	add	r24, r18
    3986:	93 1f       	adc	r25, r19
    3988:	fc 01       	movw	r30, r24
    398a:	10 82       	st	Z, r1
	Convert_StringTou32(&Loc_u32FirstOperand, Loc_u8FirstOperandArr);
    398c:	9e 01       	movw	r18, r28
    398e:	20 5f       	subi	r18, 0xF0	; 240
    3990:	3f 4f       	sbci	r19, 0xFF	; 255
    3992:	ce 01       	movw	r24, r28
    3994:	8c 58       	subi	r24, 0x8C	; 140
    3996:	9f 4f       	sbci	r25, 0xFF	; 255
    3998:	b9 01       	movw	r22, r18
    399a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Convert_StringTou32>



	Loc_u8Operation = Global_u8EquationArray[Loc_u8Counter];
    399e:	89 81       	ldd	r24, Y+1	; 0x01
    39a0:	88 2f       	mov	r24, r24
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	89 5f       	subi	r24, 0xF9	; 249
    39a6:	9e 4f       	sbci	r25, 0xFE	; 254
    39a8:	fc 01       	movw	r30, r24
    39aa:	80 81       	ld	r24, Z
    39ac:	8f 83       	std	Y+7, r24	; 0x07



	for(Loc_u8Counter= Loc_u8Counter+1;Loc_u8Counter<Global_u8Index;Loc_u8Counter++){
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	8f 5f       	subi	r24, 0xFF	; 255
    39b2:	89 83       	std	Y+1, r24	; 0x01
    39b4:	36 c0       	rjmp	.+108    	; 0x3a22 <Calculator_DoMulandDivide+0x170>
		if (Global_u8EquationArray[Loc_u8Counter] == '-'){
    39b6:	89 81       	ldd	r24, Y+1	; 0x01
    39b8:	88 2f       	mov	r24, r24
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	89 5f       	subi	r24, 0xF9	; 249
    39be:	9e 4f       	sbci	r25, 0xFE	; 254
    39c0:	fc 01       	movw	r30, r24
    39c2:	80 81       	ld	r24, Z
    39c4:	8d 32       	cpi	r24, 0x2D	; 45
    39c6:	21 f4       	brne	.+8      	; 0x39d0 <Calculator_DoMulandDivide+0x11e>
			Loc_s8SecondOperandSign*=-1;
    39c8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ca:	81 95       	neg	r24
    39cc:	8c 83       	std	Y+4, r24	; 0x04
    39ce:	26 c0       	rjmp	.+76     	; 0x3a1c <Calculator_DoMulandDivide+0x16a>
		}
		else if(Global_u8EquationArray[Loc_u8Counter] >= '0' && Global_u8EquationArray[Loc_u8Counter] <= '9' ){
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	88 2f       	mov	r24, r24
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	89 5f       	subi	r24, 0xF9	; 249
    39d8:	9e 4f       	sbci	r25, 0xFE	; 254
    39da:	fc 01       	movw	r30, r24
    39dc:	80 81       	ld	r24, Z
    39de:	80 33       	cpi	r24, 0x30	; 48
    39e0:	e8 f0       	brcs	.+58     	; 0x3a1c <Calculator_DoMulandDivide+0x16a>
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	88 2f       	mov	r24, r24
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	89 5f       	subi	r24, 0xF9	; 249
    39ea:	9e 4f       	sbci	r25, 0xFE	; 254
    39ec:	fc 01       	movw	r30, r24
    39ee:	80 81       	ld	r24, Z
    39f0:	8a 33       	cpi	r24, 0x3A	; 58
    39f2:	a0 f4       	brcc	.+40     	; 0x3a1c <Calculator_DoMulandDivide+0x16a>
			Loc_u8SecondOperandArr[Loc_u8SecondOperandIndex++]= Global_u8EquationArray[Loc_u8Counter];
    39f4:	8d 81       	ldd	r24, Y+5	; 0x05
    39f6:	91 e0       	ldi	r25, 0x01	; 1
    39f8:	98 0f       	add	r25, r24
    39fa:	9d 83       	std	Y+5, r25	; 0x05
    39fc:	88 2f       	mov	r24, r24
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	29 81       	ldd	r18, Y+1	; 0x01
    3a02:	22 2f       	mov	r18, r18
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	29 5f       	subi	r18, 0xF9	; 249
    3a08:	3e 4f       	sbci	r19, 0xFE	; 254
    3a0a:	f9 01       	movw	r30, r18
    3a0c:	40 81       	ld	r20, Z
    3a0e:	9e 01       	movw	r18, r28
    3a10:	28 58       	subi	r18, 0x88	; 136
    3a12:	3f 4f       	sbci	r19, 0xFF	; 255
    3a14:	82 0f       	add	r24, r18
    3a16:	93 1f       	adc	r25, r19
    3a18:	fc 01       	movw	r30, r24
    3a1a:	40 83       	st	Z, r20

	Loc_u8Operation = Global_u8EquationArray[Loc_u8Counter];



	for(Loc_u8Counter= Loc_u8Counter+1;Loc_u8Counter<Global_u8Index;Loc_u8Counter++){
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	8f 5f       	subi	r24, 0xFF	; 255
    3a20:	89 83       	std	Y+1, r24	; 0x01
    3a22:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Global_u8Index>
    3a26:	99 81       	ldd	r25, Y+1	; 0x01
    3a28:	98 17       	cp	r25, r24
    3a2a:	28 f2       	brcs	.-118    	; 0x39b6 <Calculator_DoMulandDivide+0x104>
		else if(Global_u8EquationArray[Loc_u8Counter] >= '0' && Global_u8EquationArray[Loc_u8Counter] <= '9' ){
			Loc_u8SecondOperandArr[Loc_u8SecondOperandIndex++]= Global_u8EquationArray[Loc_u8Counter];
		}
	}

	Loc_u8SecondOperandArr[Loc_u8SecondOperandIndex]= '\0';
    3a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a2e:	88 2f       	mov	r24, r24
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	9e 01       	movw	r18, r28
    3a34:	28 58       	subi	r18, 0x88	; 136
    3a36:	3f 4f       	sbci	r19, 0xFF	; 255
    3a38:	82 0f       	add	r24, r18
    3a3a:	93 1f       	adc	r25, r19
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	10 82       	st	Z, r1
	Convert_StringTou32(&Loc_u32SecondOperand, Loc_u8SecondOperandArr);
    3a40:	9e 01       	movw	r18, r28
    3a42:	28 58       	subi	r18, 0x88	; 136
    3a44:	3f 4f       	sbci	r19, 0xFF	; 255
    3a46:	ce 01       	movw	r24, r28
    3a48:	84 52       	subi	r24, 0x24	; 36
    3a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4c:	b9 01       	movw	r22, r18
    3a4e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Convert_StringTou32>




	if(Loc_u8FirstOperandIndex == ZERO_VALUE){
    3a52:	8b 81       	ldd	r24, Y+3	; 0x03
    3a54:	88 23       	and	r24, r24
    3a56:	19 f4       	brne	.+6      	; 0x3a5e <Calculator_DoMulandDivide+0x1ac>
		// -+-*5
		Calculator_DisplaySyntxError();
    3a58:	0e 94 97 1a 	call	0x352e	; 0x352e <Calculator_DisplaySyntxError>





}
    3a5c:	c2 c0       	rjmp	.+388    	; 0x3be2 <Calculator_DoMulandDivide+0x330>
	}

	else{


		Loc_s8ResultSign = Loc_s8FirstOperandSign * Loc_s8SecondOperandSign;
    3a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a60:	8c 81       	ldd	r24, Y+4	; 0x04
    3a62:	98 9f       	mul	r25, r24
    3a64:	80 2d       	mov	r24, r0
    3a66:	11 24       	eor	r1, r1
    3a68:	8e 83       	std	Y+6, r24	; 0x06

		if(Loc_u8Operation =='*'){
    3a6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3a6c:	8a 32       	cpi	r24, 0x2A	; 42
    3a6e:	09 f0       	breq	.+2      	; 0x3a72 <Calculator_DoMulandDivide+0x1c0>
    3a70:	47 c0       	rjmp	.+142    	; 0x3b00 <Calculator_DoMulandDivide+0x24e>
			Loc_u32ResultOperand = Loc_u32SecondOperand *Loc_u32FirstOperand;
    3a72:	ce 01       	movw	r24, r28
    3a74:	84 52       	subi	r24, 0x24	; 36
    3a76:	9f 4f       	sbci	r25, 0xFF	; 255
    3a78:	fc 01       	movw	r30, r24
    3a7a:	20 81       	ld	r18, Z
    3a7c:	31 81       	ldd	r19, Z+1	; 0x01
    3a7e:	42 81       	ldd	r20, Z+2	; 0x02
    3a80:	53 81       	ldd	r21, Z+3	; 0x03
    3a82:	ce 01       	movw	r24, r28
    3a84:	8c 58       	subi	r24, 0x8C	; 140
    3a86:	9f 4f       	sbci	r25, 0xFF	; 255
    3a88:	fc 01       	movw	r30, r24
    3a8a:	80 81       	ld	r24, Z
    3a8c:	91 81       	ldd	r25, Z+1	; 0x01
    3a8e:	a2 81       	ldd	r26, Z+2	; 0x02
    3a90:	b3 81       	ldd	r27, Z+3	; 0x03
    3a92:	bc 01       	movw	r22, r24
    3a94:	cd 01       	movw	r24, r26
    3a96:	0e 94 43 20 	call	0x4086	; 0x4086 <__mulsi3>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	88 87       	std	Y+8, r24	; 0x08
    3aa0:	99 87       	std	Y+9, r25	; 0x09
    3aa2:	aa 87       	std	Y+10, r26	; 0x0a
    3aa4:	bb 87       	std	Y+11, r27	; 0x0b

			if(Loc_u32FirstOperand == 0){
    3aa6:	ce 01       	movw	r24, r28
    3aa8:	8c 58       	subi	r24, 0x8C	; 140
    3aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    3aac:	fc 01       	movw	r30, r24
    3aae:	80 81       	ld	r24, Z
    3ab0:	91 81       	ldd	r25, Z+1	; 0x01
    3ab2:	a2 81       	ldd	r26, Z+2	; 0x02
    3ab4:	b3 81       	ldd	r27, Z+3	; 0x03
    3ab6:	89 2b       	or	r24, r25
    3ab8:	8a 2b       	or	r24, r26
    3aba:	8b 2b       	or	r24, r27
    3abc:	51 f4       	brne	.+20     	; 0x3ad2 <Calculator_DoMulandDivide+0x220>

				Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, 0,LCD_ROW3, LCD_COL6);
    3abe:	06 e0       	ldi	r16, 0x06	; 6
    3ac0:	23 e0       	ldi	r18, 0x03	; 3
    3ac2:	40 e0       	ldi	r20, 0x00	; 0
    3ac4:	50 e0       	ldi	r21, 0x00	; 0
    3ac6:	ba 01       	movw	r22, r20
    3ac8:	80 e9       	ldi	r24, 0x90	; 144
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Lcd_4bit_enuDisplayNumberWithPosition>





}
    3ad0:	88 c0       	rjmp	.+272    	; 0x3be2 <Calculator_DoMulandDivide+0x330>
			if(Loc_u32FirstOperand == 0){

				Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, 0,LCD_ROW3, LCD_COL6);
			}
			else{
				if(Loc_s8ResultSign==-1)
    3ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ad4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ad6:	39 f4       	brne	.+14     	; 0x3ae6 <Calculator_DoMulandDivide+0x234>
					Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, '-', LCD_ROW3, LCD_COL5);
    3ad8:	25 e0       	ldi	r18, 0x05	; 5
    3ada:	43 e0       	ldi	r20, 0x03	; 3
    3adc:	6d e2       	ldi	r22, 0x2D	; 45
    3ade:	80 e9       	ldi	r24, 0x90	; 144
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	0e 94 6f 13 	call	0x26de	; 0x26de <Lcd_4bit_enuDisplayCharacterWithPosition>


				Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u32ResultOperand,LCD_ROW3, LCD_COL6);
    3ae6:	88 85       	ldd	r24, Y+8	; 0x08
    3ae8:	99 85       	ldd	r25, Y+9	; 0x09
    3aea:	aa 85       	ldd	r26, Y+10	; 0x0a
    3aec:	bb 85       	ldd	r27, Y+11	; 0x0b
    3aee:	06 e0       	ldi	r16, 0x06	; 6
    3af0:	23 e0       	ldi	r18, 0x03	; 3
    3af2:	ac 01       	movw	r20, r24
    3af4:	bd 01       	movw	r22, r26
    3af6:	80 e9       	ldi	r24, 0x90	; 144
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Lcd_4bit_enuDisplayNumberWithPosition>





}
    3afe:	71 c0       	rjmp	.+226    	; 0x3be2 <Calculator_DoMulandDivide+0x330>

				Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u32ResultOperand,LCD_ROW3, LCD_COL6);
			}
		}

		else if(Loc_u8Operation =='/'){
    3b00:	8f 81       	ldd	r24, Y+7	; 0x07
    3b02:	8f 32       	cpi	r24, 0x2F	; 47
    3b04:	09 f0       	breq	.+2      	; 0x3b08 <Calculator_DoMulandDivide+0x256>
    3b06:	6d c0       	rjmp	.+218    	; 0x3be2 <Calculator_DoMulandDivide+0x330>

			if(Loc_u32SecondOperand == 0){
    3b08:	ce 01       	movw	r24, r28
    3b0a:	84 52       	subi	r24, 0x24	; 36
    3b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0e:	fc 01       	movw	r30, r24
    3b10:	80 81       	ld	r24, Z
    3b12:	91 81       	ldd	r25, Z+1	; 0x01
    3b14:	a2 81       	ldd	r26, Z+2	; 0x02
    3b16:	b3 81       	ldd	r27, Z+3	; 0x03
    3b18:	89 2b       	or	r24, r25
    3b1a:	8a 2b       	or	r24, r26
    3b1c:	8b 2b       	or	r24, r27
    3b1e:	19 f4       	brne	.+6      	; 0x3b26 <Calculator_DoMulandDivide+0x274>
				Calculator_DisplayMathError();
    3b20:	0e 94 2a 1b 	call	0x3654	; 0x3654 <Calculator_DisplayMathError>





}
    3b24:	5e c0       	rjmp	.+188    	; 0x3be2 <Calculator_DoMulandDivide+0x330>
			if(Loc_u32SecondOperand == 0){
				Calculator_DisplayMathError();
			}

			else{
				Loc_f32ResultOperandInFloat = (float)Loc_u32FirstOperand/Loc_u32SecondOperand;
    3b26:	ce 01       	movw	r24, r28
    3b28:	8c 58       	subi	r24, 0x8C	; 140
    3b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	80 81       	ld	r24, Z
    3b30:	91 81       	ldd	r25, Z+1	; 0x01
    3b32:	a2 81       	ldd	r26, Z+2	; 0x02
    3b34:	b3 81       	ldd	r27, Z+3	; 0x03
    3b36:	bc 01       	movw	r22, r24
    3b38:	cd 01       	movw	r24, r26
    3b3a:	0e 94 a9 21 	call	0x4352	; 0x4352 <__floatunsisf>
    3b3e:	6b 01       	movw	r12, r22
    3b40:	7c 01       	movw	r14, r24
    3b42:	ce 01       	movw	r24, r28
    3b44:	84 52       	subi	r24, 0x24	; 36
    3b46:	9f 4f       	sbci	r25, 0xFF	; 255
    3b48:	fc 01       	movw	r30, r24
    3b4a:	80 81       	ld	r24, Z
    3b4c:	91 81       	ldd	r25, Z+1	; 0x01
    3b4e:	a2 81       	ldd	r26, Z+2	; 0x02
    3b50:	b3 81       	ldd	r27, Z+3	; 0x03
    3b52:	bc 01       	movw	r22, r24
    3b54:	cd 01       	movw	r24, r26
    3b56:	0e 94 a9 21 	call	0x4352	; 0x4352 <__floatunsisf>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	9c 01       	movw	r18, r24
    3b60:	ad 01       	movw	r20, r26
    3b62:	c7 01       	movw	r24, r14
    3b64:	b6 01       	movw	r22, r12
    3b66:	0e 94 01 21 	call	0x4202	; 0x4202 <__divsf3>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	8c 87       	std	Y+12, r24	; 0x0c
    3b70:	9d 87       	std	Y+13, r25	; 0x0d
    3b72:	ae 87       	std	Y+14, r26	; 0x0e
    3b74:	bf 87       	std	Y+15, r27	; 0x0f
				if(Loc_u32FirstOperand == 0){
    3b76:	ce 01       	movw	r24, r28
    3b78:	8c 58       	subi	r24, 0x8C	; 140
    3b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	80 81       	ld	r24, Z
    3b80:	91 81       	ldd	r25, Z+1	; 0x01
    3b82:	a2 81       	ldd	r26, Z+2	; 0x02
    3b84:	b3 81       	ldd	r27, Z+3	; 0x03
    3b86:	89 2b       	or	r24, r25
    3b88:	8a 2b       	or	r24, r26
    3b8a:	8b 2b       	or	r24, r27
    3b8c:	51 f4       	brne	.+20     	; 0x3ba2 <Calculator_DoMulandDivide+0x2f0>

					Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, 0,LCD_ROW3, LCD_COL6);
    3b8e:	06 e0       	ldi	r16, 0x06	; 6
    3b90:	23 e0       	ldi	r18, 0x03	; 3
    3b92:	40 e0       	ldi	r20, 0x00	; 0
    3b94:	50 e0       	ldi	r21, 0x00	; 0
    3b96:	ba 01       	movw	r22, r20
    3b98:	80 e9       	ldi	r24, 0x90	; 144
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Lcd_4bit_enuDisplayNumberWithPosition>





}
    3ba0:	20 c0       	rjmp	.+64     	; 0x3be2 <Calculator_DoMulandDivide+0x330>
					Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, 0,LCD_ROW3, LCD_COL6);
				}
				else {


				if(Loc_s8ResultSign==-1)
    3ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ba4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba6:	39 f4       	brne	.+14     	; 0x3bb6 <Calculator_DoMulandDivide+0x304>
					Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, '-', LCD_ROW3, LCD_COL5);
    3ba8:	25 e0       	ldi	r18, 0x05	; 5
    3baa:	43 e0       	ldi	r20, 0x03	; 3
    3bac:	6d e2       	ldi	r22, 0x2D	; 45
    3bae:	80 e9       	ldi	r24, 0x90	; 144
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	0e 94 6f 13 	call	0x26de	; 0x26de <Lcd_4bit_enuDisplayCharacterWithPosition>
				Convert_FloatToString(Loc_f32ResultOperandInFloat, Loc_u8ArrResultOperandInFloat);
    3bb6:	9e 01       	movw	r18, r28
    3bb8:	20 52       	subi	r18, 0x20	; 32
    3bba:	3f 4f       	sbci	r19, 0xFF	; 255
    3bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bc0:	ae 85       	ldd	r26, Y+14	; 0x0e
    3bc2:	bf 85       	ldd	r27, Y+15	; 0x0f
    3bc4:	a9 01       	movw	r20, r18
    3bc6:	bc 01       	movw	r22, r24
    3bc8:	cd 01       	movw	r24, r26
    3bca:	0e 94 88 00 	call	0x110	; 0x110 <Convert_FloatToString>
				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, Loc_u8ArrResultOperandInFloat,LCD_ROW3, LCD_COL6);
    3bce:	ce 01       	movw	r24, r28
    3bd0:	80 52       	subi	r24, 0x20	; 32
    3bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd4:	26 e0       	ldi	r18, 0x06	; 6
    3bd6:	43 e0       	ldi	r20, 0x03	; 3
    3bd8:	bc 01       	movw	r22, r24
    3bda:	80 e9       	ldi	r24, 0x90	; 144
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	0e 94 b6 13 	call	0x276c	; 0x276c <Lcd_4bit_enuDisplayStringWithPosition>





}
    3be2:	00 00       	nop
    3be4:	cd 5b       	subi	r28, 0xBD	; 189
    3be6:	de 4f       	sbci	r29, 0xFE	; 254
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	df 91       	pop	r29
    3bf4:	cf 91       	pop	r28
    3bf6:	0f 91       	pop	r16
    3bf8:	ff 90       	pop	r15
    3bfa:	ef 90       	pop	r14
    3bfc:	df 90       	pop	r13
    3bfe:	cf 90       	pop	r12
    3c00:	08 95       	ret

00003c02 <Calculator_DoSumandSub>:

void Calculator_DoSumandSub(void){
    3c02:	ef 92       	push	r14
    3c04:	ff 92       	push	r15
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	cf 53       	subi	r28, 0x3F	; 63
    3c14:	d1 40       	sbci	r29, 0x01	; 1
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8Counter = ZERO_VALUE;
    3c20:	19 82       	std	Y+1, r1	; 0x01

	s8 Loc_s8FirstOperandSign = 1;
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8FirstOperandArr[100] ;
	u8 Loc_u8FirstOperandIndex = 0;
    3c26:	1b 82       	std	Y+3, r1	; 0x03
	u32 Loc_u32FirstOperand;
	u8 Loc_u8FirstOperandFlag= ZERO_VALUE;
    3c28:	1e 82       	std	Y+6, r1	; 0x06

	u8 Loc_u8Operation ;


	s8 Loc_s8SecondOperandSign = 1;
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Loc_u8SecondOperandArr[100]={'0'} ;
    3c2e:	ce 01       	movw	r24, r28
    3c30:	8c 58       	subi	r24, 0x8C	; 140
    3c32:	9f 4f       	sbci	r25, 0xFF	; 255
    3c34:	24 e6       	ldi	r18, 0x64	; 100
    3c36:	fc 01       	movw	r30, r24
    3c38:	e2 2e       	mov	r14, r18
    3c3a:	11 92       	st	Z+, r1
    3c3c:	ea 94       	dec	r14
    3c3e:	e9 f7       	brne	.-6      	; 0x3c3a <Calculator_DoSumandSub+0x38>
    3c40:	ce 01       	movw	r24, r28
    3c42:	8c 58       	subi	r24, 0x8C	; 140
    3c44:	9f 4f       	sbci	r25, 0xFF	; 255
    3c46:	20 e3       	ldi	r18, 0x30	; 48
    3c48:	fc 01       	movw	r30, r24
    3c4a:	20 83       	st	Z, r18
	u8 Loc_u8SecondOperandIndex = 0;
    3c4c:	1d 82       	std	Y+5, r1	; 0x05
	u32 Loc_u32SecondOperand;


	s8 Loc_s8ResultSign = 1;
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	8f 83       	std	Y+7, r24	; 0x07
	f32 Loc_f32ResultOperandInFloat;
	u8 Loc_u8ArrResultOperandInFloat[100];

	// first find position of starting of first operand

	for(Loc_u8Counter = ZERO_VALUE;   (Global_u8EquationArray[Loc_u8Counter] >= '0' && Global_u8EquationArray[Loc_u8Counter] <= '9') ==ZERO_VALUE;  Loc_u8Counter++ ){
    3c52:	19 82       	std	Y+1, r1	; 0x01
    3c54:	0f c0       	rjmp	.+30     	; 0x3c74 <Calculator_DoSumandSub+0x72>

		if (Global_u8EquationArray[Loc_u8Counter] == '-'){
    3c56:	89 81       	ldd	r24, Y+1	; 0x01
    3c58:	88 2f       	mov	r24, r24
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	89 5f       	subi	r24, 0xF9	; 249
    3c5e:	9e 4f       	sbci	r25, 0xFE	; 254
    3c60:	fc 01       	movw	r30, r24
    3c62:	80 81       	ld	r24, Z
    3c64:	8d 32       	cpi	r24, 0x2D	; 45
    3c66:	19 f4       	brne	.+6      	; 0x3c6e <Calculator_DoSumandSub+0x6c>
			Loc_s8FirstOperandSign*=-1;
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	81 95       	neg	r24
    3c6c:	8a 83       	std	Y+2, r24	; 0x02
	f32 Loc_f32ResultOperandInFloat;
	u8 Loc_u8ArrResultOperandInFloat[100];

	// first find position of starting of first operand

	for(Loc_u8Counter = ZERO_VALUE;   (Global_u8EquationArray[Loc_u8Counter] >= '0' && Global_u8EquationArray[Loc_u8Counter] <= '9') ==ZERO_VALUE;  Loc_u8Counter++ ){
    3c6e:	89 81       	ldd	r24, Y+1	; 0x01
    3c70:	8f 5f       	subi	r24, 0xFF	; 255
    3c72:	89 83       	std	Y+1, r24	; 0x01
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	88 2f       	mov	r24, r24
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	89 5f       	subi	r24, 0xF9	; 249
    3c7c:	9e 4f       	sbci	r25, 0xFE	; 254
    3c7e:	fc 01       	movw	r30, r24
    3c80:	80 81       	ld	r24, Z
    3c82:	80 33       	cpi	r24, 0x30	; 48
    3c84:	60 f0       	brcs	.+24     	; 0x3c9e <Calculator_DoSumandSub+0x9c>
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	88 2f       	mov	r24, r24
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	89 5f       	subi	r24, 0xF9	; 249
    3c8e:	9e 4f       	sbci	r25, 0xFE	; 254
    3c90:	fc 01       	movw	r30, r24
    3c92:	80 81       	ld	r24, Z
    3c94:	8a 33       	cpi	r24, 0x3A	; 58
    3c96:	18 f4       	brcc	.+6      	; 0x3c9e <Calculator_DoSumandSub+0x9c>
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	02 c0       	rjmp	.+4      	; 0x3ca2 <Calculator_DoSumandSub+0xa0>
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	89 2b       	or	r24, r25
    3ca4:	c1 f2       	breq	.-80     	; 0x3c56 <Calculator_DoSumandSub+0x54>
	}



	// loop til find first operation
	for( ;  Global_u8EquationArray[Loc_u8Counter]!= '\0' && (Global_u8EquationArray[Loc_u8Counter] >= '0' && Global_u8EquationArray[Loc_u8Counter] <= '9');  Loc_u8Counter++ ){
    3ca6:	17 c0       	rjmp	.+46     	; 0x3cd6 <Calculator_DoSumandSub+0xd4>

		Loc_u8FirstOperandArr[Loc_u8FirstOperandIndex++]= Global_u8EquationArray[Loc_u8Counter];
    3ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	98 0f       	add	r25, r24
    3cae:	9b 83       	std	Y+3, r25	; 0x03
    3cb0:	88 2f       	mov	r24, r24
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	29 81       	ldd	r18, Y+1	; 0x01
    3cb6:	22 2f       	mov	r18, r18
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	29 5f       	subi	r18, 0xF9	; 249
    3cbc:	3e 4f       	sbci	r19, 0xFE	; 254
    3cbe:	f9 01       	movw	r30, r18
    3cc0:	40 81       	ld	r20, Z
    3cc2:	9e 01       	movw	r18, r28
    3cc4:	24 5f       	subi	r18, 0xF4	; 244
    3cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc8:	82 0f       	add	r24, r18
    3cca:	93 1f       	adc	r25, r19
    3ccc:	fc 01       	movw	r30, r24
    3cce:	40 83       	st	Z, r20
	}



	// loop til find first operation
	for( ;  Global_u8EquationArray[Loc_u8Counter]!= '\0' && (Global_u8EquationArray[Loc_u8Counter] >= '0' && Global_u8EquationArray[Loc_u8Counter] <= '9');  Loc_u8Counter++ ){
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	8f 5f       	subi	r24, 0xFF	; 255
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
    3cd8:	88 2f       	mov	r24, r24
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	89 5f       	subi	r24, 0xF9	; 249
    3cde:	9e 4f       	sbci	r25, 0xFE	; 254
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	80 81       	ld	r24, Z
    3ce4:	88 23       	and	r24, r24
    3ce6:	91 f0       	breq	.+36     	; 0x3d0c <Calculator_DoSumandSub+0x10a>
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	88 2f       	mov	r24, r24
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	89 5f       	subi	r24, 0xF9	; 249
    3cf0:	9e 4f       	sbci	r25, 0xFE	; 254
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	80 81       	ld	r24, Z
    3cf6:	80 33       	cpi	r24, 0x30	; 48
    3cf8:	48 f0       	brcs	.+18     	; 0x3d0c <Calculator_DoSumandSub+0x10a>
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	88 2f       	mov	r24, r24
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	89 5f       	subi	r24, 0xF9	; 249
    3d02:	9e 4f       	sbci	r25, 0xFE	; 254
    3d04:	fc 01       	movw	r30, r24
    3d06:	80 81       	ld	r24, Z
    3d08:	8a 33       	cpi	r24, 0x3A	; 58
    3d0a:	70 f2       	brcs	.-100    	; 0x3ca8 <Calculator_DoSumandSub+0xa6>

		}



	Loc_u8FirstOperandArr[Loc_u8FirstOperandIndex]= '\0';
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	9e 01       	movw	r18, r28
    3d14:	24 5f       	subi	r18, 0xF4	; 244
    3d16:	3f 4f       	sbci	r19, 0xFF	; 255
    3d18:	82 0f       	add	r24, r18
    3d1a:	93 1f       	adc	r25, r19
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	10 82       	st	Z, r1
	Convert_StringTou32(&Loc_u32FirstOperand, Loc_u8FirstOperandArr);
    3d20:	9e 01       	movw	r18, r28
    3d22:	24 5f       	subi	r18, 0xF4	; 244
    3d24:	3f 4f       	sbci	r19, 0xFF	; 255
    3d26:	ce 01       	movw	r24, r28
    3d28:	80 59       	subi	r24, 0x90	; 144
    3d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2c:	b9 01       	movw	r22, r18
    3d2e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Convert_StringTou32>

	if( Global_u8EquationArray[Loc_u8Counter]== '\0'){
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
    3d34:	88 2f       	mov	r24, r24
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	89 5f       	subi	r24, 0xF9	; 249
    3d3a:	9e 4f       	sbci	r25, 0xFE	; 254
    3d3c:	fc 01       	movw	r30, r24
    3d3e:	80 81       	ld	r24, Z
    3d40:	88 23       	and	r24, r24
    3d42:	c9 f5       	brne	.+114    	; 0x3db6 <Calculator_DoSumandSub+0x1b4>

		if(Loc_u32FirstOperand == 0){
    3d44:	ce 01       	movw	r24, r28
    3d46:	80 59       	subi	r24, 0x90	; 144
    3d48:	9f 4f       	sbci	r25, 0xFF	; 255
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	80 81       	ld	r24, Z
    3d4e:	91 81       	ldd	r25, Z+1	; 0x01
    3d50:	a2 81       	ldd	r26, Z+2	; 0x02
    3d52:	b3 81       	ldd	r27, Z+3	; 0x03
    3d54:	89 2b       	or	r24, r25
    3d56:	8a 2b       	or	r24, r26
    3d58:	8b 2b       	or	r24, r27
    3d5a:	51 f4       	brne	.+20     	; 0x3d70 <Calculator_DoSumandSub+0x16e>
			Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, 0,LCD_ROW3, LCD_COL6);
    3d5c:	06 e0       	ldi	r16, 0x06	; 6
    3d5e:	23 e0       	ldi	r18, 0x03	; 3
    3d60:	40 e0       	ldi	r20, 0x00	; 0
    3d62:	50 e0       	ldi	r21, 0x00	; 0
    3d64:	ba 01       	movw	r22, r20
    3d66:	80 e9       	ldi	r24, 0x90	; 144
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Lcd_4bit_enuDisplayNumberWithPosition>





}
    3d6e:	46 c1       	rjmp	.+652    	; 0x3ffc <Calculator_DoSumandSub+0x3fa>

		if(Loc_u32FirstOperand == 0){
			Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, 0,LCD_ROW3, LCD_COL6);
		}
		else{
			if(Loc_s8FirstOperandSign==-1)
    3d70:	8a 81       	ldd	r24, Y+2	; 0x02
    3d72:	8f 3f       	cpi	r24, 0xFF	; 255
    3d74:	39 f4       	brne	.+14     	; 0x3d84 <Calculator_DoSumandSub+0x182>
						Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, '-', LCD_ROW3, LCD_COL5);
    3d76:	25 e0       	ldi	r18, 0x05	; 5
    3d78:	43 e0       	ldi	r20, 0x03	; 3
    3d7a:	6d e2       	ldi	r22, 0x2D	; 45
    3d7c:	80 e9       	ldi	r24, 0x90	; 144
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	0e 94 6f 13 	call	0x26de	; 0x26de <Lcd_4bit_enuDisplayCharacterWithPosition>

					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, Loc_u8FirstOperandArr,LCD_ROW3, LCD_COL6);
    3d84:	ce 01       	movw	r24, r28
    3d86:	0c 96       	adiw	r24, 0x0c	; 12
    3d88:	26 e0       	ldi	r18, 0x06	; 6
    3d8a:	43 e0       	ldi	r20, 0x03	; 3
    3d8c:	bc 01       	movw	r22, r24
    3d8e:	80 e9       	ldi	r24, 0x90	; 144
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	0e 94 b6 13 	call	0x276c	; 0x276c <Lcd_4bit_enuDisplayStringWithPosition>





}
    3d96:	32 c1       	rjmp	.+612    	; 0x3ffc <Calculator_DoSumandSub+0x3fa>

	else{
		// loop til find second operation
			for(; (Global_u8EquationArray[Loc_u8Counter] >= '0' && Global_u8EquationArray[Loc_u8Counter] <= '9') ==ZERO_VALUE;  Loc_u8Counter++ ){

				if (Global_u8EquationArray[Loc_u8Counter] == '-'){
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
    3d9a:	88 2f       	mov	r24, r24
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	89 5f       	subi	r24, 0xF9	; 249
    3da0:	9e 4f       	sbci	r25, 0xFE	; 254
    3da2:	fc 01       	movw	r30, r24
    3da4:	80 81       	ld	r24, Z
    3da6:	8d 32       	cpi	r24, 0x2D	; 45
    3da8:	19 f4       	brne	.+6      	; 0x3db0 <Calculator_DoSumandSub+0x1ae>
					Loc_s8SecondOperandSign*=-1;
    3daa:	8c 81       	ldd	r24, Y+4	; 0x04
    3dac:	81 95       	neg	r24
    3dae:	8c 83       	std	Y+4, r24	; 0x04
	}


	else{
		// loop til find second operation
			for(; (Global_u8EquationArray[Loc_u8Counter] >= '0' && Global_u8EquationArray[Loc_u8Counter] <= '9') ==ZERO_VALUE;  Loc_u8Counter++ ){
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
    3db2:	8f 5f       	subi	r24, 0xFF	; 255
    3db4:	89 83       	std	Y+1, r24	; 0x01
    3db6:	89 81       	ldd	r24, Y+1	; 0x01
    3db8:	88 2f       	mov	r24, r24
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	89 5f       	subi	r24, 0xF9	; 249
    3dbe:	9e 4f       	sbci	r25, 0xFE	; 254
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	80 81       	ld	r24, Z
    3dc4:	80 33       	cpi	r24, 0x30	; 48
    3dc6:	60 f0       	brcs	.+24     	; 0x3de0 <Calculator_DoSumandSub+0x1de>
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	88 2f       	mov	r24, r24
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	89 5f       	subi	r24, 0xF9	; 249
    3dd0:	9e 4f       	sbci	r25, 0xFE	; 254
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	80 81       	ld	r24, Z
    3dd6:	8a 33       	cpi	r24, 0x3A	; 58
    3dd8:	18 f4       	brcc	.+6      	; 0x3de0 <Calculator_DoSumandSub+0x1de>
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	02 c0       	rjmp	.+4      	; 0x3de4 <Calculator_DoSumandSub+0x1e2>
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	89 2b       	or	r24, r25
    3de6:	c1 f2       	breq	.-80     	; 0x3d98 <Calculator_DoSumandSub+0x196>

			}


			// loop til find second operation
			while (Global_u8EquationArray[Loc_u8Counter]!= '\0' ){
    3de8:	17 c0       	rjmp	.+46     	; 0x3e18 <Calculator_DoSumandSub+0x216>

				Loc_u8SecondOperandArr[Loc_u8SecondOperandIndex++]= Global_u8EquationArray[Loc_u8Counter++];
    3dea:	8d 81       	ldd	r24, Y+5	; 0x05
    3dec:	91 e0       	ldi	r25, 0x01	; 1
    3dee:	98 0f       	add	r25, r24
    3df0:	9d 83       	std	Y+5, r25	; 0x05
    3df2:	88 2f       	mov	r24, r24
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	29 81       	ldd	r18, Y+1	; 0x01
    3df8:	31 e0       	ldi	r19, 0x01	; 1
    3dfa:	32 0f       	add	r19, r18
    3dfc:	39 83       	std	Y+1, r19	; 0x01
    3dfe:	22 2f       	mov	r18, r18
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	29 5f       	subi	r18, 0xF9	; 249
    3e04:	3e 4f       	sbci	r19, 0xFE	; 254
    3e06:	f9 01       	movw	r30, r18
    3e08:	40 81       	ld	r20, Z
    3e0a:	9e 01       	movw	r18, r28
    3e0c:	2c 58       	subi	r18, 0x8C	; 140
    3e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e10:	82 0f       	add	r24, r18
    3e12:	93 1f       	adc	r25, r19
    3e14:	fc 01       	movw	r30, r24
    3e16:	40 83       	st	Z, r20

			}


			// loop til find second operation
			while (Global_u8EquationArray[Loc_u8Counter]!= '\0' ){
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	88 2f       	mov	r24, r24
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	89 5f       	subi	r24, 0xF9	; 249
    3e20:	9e 4f       	sbci	r25, 0xFE	; 254
    3e22:	fc 01       	movw	r30, r24
    3e24:	80 81       	ld	r24, Z
    3e26:	88 23       	and	r24, r24
    3e28:	01 f7       	brne	.-64     	; 0x3dea <Calculator_DoSumandSub+0x1e8>

				Loc_u8SecondOperandArr[Loc_u8SecondOperandIndex++]= Global_u8EquationArray[Loc_u8Counter++];

				}
			Loc_u8SecondOperandArr[Loc_u8SecondOperandIndex]= '\0';
    3e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e2c:	88 2f       	mov	r24, r24
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	9e 01       	movw	r18, r28
    3e32:	2c 58       	subi	r18, 0x8C	; 140
    3e34:	3f 4f       	sbci	r19, 0xFF	; 255
    3e36:	82 0f       	add	r24, r18
    3e38:	93 1f       	adc	r25, r19
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	10 82       	st	Z, r1
				Convert_StringTou32(&Loc_u32SecondOperand, Loc_u8SecondOperandArr);
    3e3e:	9e 01       	movw	r18, r28
    3e40:	2c 58       	subi	r18, 0x8C	; 140
    3e42:	3f 4f       	sbci	r19, 0xFF	; 255
    3e44:	ce 01       	movw	r24, r28
    3e46:	88 52       	subi	r24, 0x28	; 40
    3e48:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4a:	b9 01       	movw	r22, r18
    3e4c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Convert_StringTou32>

				if(Loc_s8SecondOperandSign == Loc_s8FirstOperandSign){
    3e50:	9c 81       	ldd	r25, Y+4	; 0x04
    3e52:	8a 81       	ldd	r24, Y+2	; 0x02
    3e54:	98 17       	cp	r25, r24
    3e56:	79 f5       	brne	.+94     	; 0x3eb6 <Calculator_DoSumandSub+0x2b4>

					Loc_u32ResultOperand = Loc_u32SecondOperand + Loc_u32FirstOperand;
    3e58:	ce 01       	movw	r24, r28
    3e5a:	88 52       	subi	r24, 0x28	; 40
    3e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5e:	fc 01       	movw	r30, r24
    3e60:	20 81       	ld	r18, Z
    3e62:	31 81       	ldd	r19, Z+1	; 0x01
    3e64:	42 81       	ldd	r20, Z+2	; 0x02
    3e66:	53 81       	ldd	r21, Z+3	; 0x03
    3e68:	ce 01       	movw	r24, r28
    3e6a:	80 59       	subi	r24, 0x90	; 144
    3e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6e:	fc 01       	movw	r30, r24
    3e70:	80 81       	ld	r24, Z
    3e72:	91 81       	ldd	r25, Z+1	; 0x01
    3e74:	a2 81       	ldd	r26, Z+2	; 0x02
    3e76:	b3 81       	ldd	r27, Z+3	; 0x03
    3e78:	82 0f       	add	r24, r18
    3e7a:	93 1f       	adc	r25, r19
    3e7c:	a4 1f       	adc	r26, r20
    3e7e:	b5 1f       	adc	r27, r21
    3e80:	88 87       	std	Y+8, r24	; 0x08
    3e82:	99 87       	std	Y+9, r25	; 0x09
    3e84:	aa 87       	std	Y+10, r26	; 0x0a
    3e86:	bb 87       	std	Y+11, r27	; 0x0b
					if(Loc_s8FirstOperandSign==-1)
    3e88:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e8c:	39 f4       	brne	.+14     	; 0x3e9c <Calculator_DoSumandSub+0x29a>
						Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, '-', LCD_ROW3, LCD_COL5);
    3e8e:	25 e0       	ldi	r18, 0x05	; 5
    3e90:	43 e0       	ldi	r20, 0x03	; 3
    3e92:	6d e2       	ldi	r22, 0x2D	; 45
    3e94:	80 e9       	ldi	r24, 0x90	; 144
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	0e 94 6f 13 	call	0x26de	; 0x26de <Lcd_4bit_enuDisplayCharacterWithPosition>

					Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u32ResultOperand,LCD_ROW3, LCD_COL6);
    3e9c:	88 85       	ldd	r24, Y+8	; 0x08
    3e9e:	99 85       	ldd	r25, Y+9	; 0x09
    3ea0:	aa 85       	ldd	r26, Y+10	; 0x0a
    3ea2:	bb 85       	ldd	r27, Y+11	; 0x0b
    3ea4:	06 e0       	ldi	r16, 0x06	; 6
    3ea6:	23 e0       	ldi	r18, 0x03	; 3
    3ea8:	ac 01       	movw	r20, r24
    3eaa:	bd 01       	movw	r22, r26
    3eac:	80 e9       	ldi	r24, 0x90	; 144
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Lcd_4bit_enuDisplayNumberWithPosition>





}
    3eb4:	a3 c0       	rjmp	.+326    	; 0x3ffc <Calculator_DoSumandSub+0x3fa>
					Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u32ResultOperand,LCD_ROW3, LCD_COL6);
				}


				else{
					if(Loc_u32SecondOperand== Loc_u32FirstOperand){
    3eb6:	ce 01       	movw	r24, r28
    3eb8:	88 52       	subi	r24, 0x28	; 40
    3eba:	9f 4f       	sbci	r25, 0xFF	; 255
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	20 81       	ld	r18, Z
    3ec0:	31 81       	ldd	r19, Z+1	; 0x01
    3ec2:	42 81       	ldd	r20, Z+2	; 0x02
    3ec4:	53 81       	ldd	r21, Z+3	; 0x03
    3ec6:	ce 01       	movw	r24, r28
    3ec8:	80 59       	subi	r24, 0x90	; 144
    3eca:	9f 4f       	sbci	r25, 0xFF	; 255
    3ecc:	fc 01       	movw	r30, r24
    3ece:	80 81       	ld	r24, Z
    3ed0:	91 81       	ldd	r25, Z+1	; 0x01
    3ed2:	a2 81       	ldd	r26, Z+2	; 0x02
    3ed4:	b3 81       	ldd	r27, Z+3	; 0x03
    3ed6:	28 17       	cp	r18, r24
    3ed8:	39 07       	cpc	r19, r25
    3eda:	4a 07       	cpc	r20, r26
    3edc:	5b 07       	cpc	r21, r27
    3ede:	51 f4       	brne	.+20     	; 0x3ef4 <Calculator_DoSumandSub+0x2f2>
						Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, 0,LCD_ROW3, LCD_COL6);
    3ee0:	06 e0       	ldi	r16, 0x06	; 6
    3ee2:	23 e0       	ldi	r18, 0x03	; 3
    3ee4:	40 e0       	ldi	r20, 0x00	; 0
    3ee6:	50 e0       	ldi	r21, 0x00	; 0
    3ee8:	ba 01       	movw	r22, r20
    3eea:	80 e9       	ldi	r24, 0x90	; 144
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Lcd_4bit_enuDisplayNumberWithPosition>





}
    3ef2:	84 c0       	rjmp	.+264    	; 0x3ffc <Calculator_DoSumandSub+0x3fa>

				else{
					if(Loc_u32SecondOperand== Loc_u32FirstOperand){
						Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, 0,LCD_ROW3, LCD_COL6);
					}
					else if (Loc_u32SecondOperand < Loc_u32FirstOperand){
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	88 52       	subi	r24, 0x28	; 40
    3ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    3efa:	fc 01       	movw	r30, r24
    3efc:	20 81       	ld	r18, Z
    3efe:	31 81       	ldd	r19, Z+1	; 0x01
    3f00:	42 81       	ldd	r20, Z+2	; 0x02
    3f02:	53 81       	ldd	r21, Z+3	; 0x03
    3f04:	ce 01       	movw	r24, r28
    3f06:	80 59       	subi	r24, 0x90	; 144
    3f08:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0a:	fc 01       	movw	r30, r24
    3f0c:	80 81       	ld	r24, Z
    3f0e:	91 81       	ldd	r25, Z+1	; 0x01
    3f10:	a2 81       	ldd	r26, Z+2	; 0x02
    3f12:	b3 81       	ldd	r27, Z+3	; 0x03
    3f14:	28 17       	cp	r18, r24
    3f16:	39 07       	cpc	r19, r25
    3f18:	4a 07       	cpc	r20, r26
    3f1a:	5b 07       	cpc	r21, r27
    3f1c:	98 f5       	brcc	.+102    	; 0x3f84 <Calculator_DoSumandSub+0x382>
						Loc_u32ResultOperand = Loc_u32FirstOperand-Loc_u32SecondOperand;
    3f1e:	ce 01       	movw	r24, r28
    3f20:	80 59       	subi	r24, 0x90	; 144
    3f22:	9f 4f       	sbci	r25, 0xFF	; 255
    3f24:	fc 01       	movw	r30, r24
    3f26:	20 81       	ld	r18, Z
    3f28:	31 81       	ldd	r19, Z+1	; 0x01
    3f2a:	42 81       	ldd	r20, Z+2	; 0x02
    3f2c:	53 81       	ldd	r21, Z+3	; 0x03
    3f2e:	ce 01       	movw	r24, r28
    3f30:	88 52       	subi	r24, 0x28	; 40
    3f32:	9f 4f       	sbci	r25, 0xFF	; 255
    3f34:	fc 01       	movw	r30, r24
    3f36:	80 81       	ld	r24, Z
    3f38:	91 81       	ldd	r25, Z+1	; 0x01
    3f3a:	a2 81       	ldd	r26, Z+2	; 0x02
    3f3c:	b3 81       	ldd	r27, Z+3	; 0x03
    3f3e:	79 01       	movw	r14, r18
    3f40:	8a 01       	movw	r16, r20
    3f42:	e8 1a       	sub	r14, r24
    3f44:	f9 0a       	sbc	r15, r25
    3f46:	0a 0b       	sbc	r16, r26
    3f48:	1b 0b       	sbc	r17, r27
    3f4a:	d8 01       	movw	r26, r16
    3f4c:	c7 01       	movw	r24, r14
    3f4e:	88 87       	std	Y+8, r24	; 0x08
    3f50:	99 87       	std	Y+9, r25	; 0x09
    3f52:	aa 87       	std	Y+10, r26	; 0x0a
    3f54:	bb 87       	std	Y+11, r27	; 0x0b
						if(Loc_s8FirstOperandSign==-1)
    3f56:	8a 81       	ldd	r24, Y+2	; 0x02
    3f58:	8f 3f       	cpi	r24, 0xFF	; 255
    3f5a:	39 f4       	brne	.+14     	; 0x3f6a <Calculator_DoSumandSub+0x368>
							Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, '-', LCD_ROW3, LCD_COL5);
    3f5c:	25 e0       	ldi	r18, 0x05	; 5
    3f5e:	43 e0       	ldi	r20, 0x03	; 3
    3f60:	6d e2       	ldi	r22, 0x2D	; 45
    3f62:	80 e9       	ldi	r24, 0x90	; 144
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 6f 13 	call	0x26de	; 0x26de <Lcd_4bit_enuDisplayCharacterWithPosition>

						Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u32ResultOperand,LCD_ROW3, LCD_COL6);
    3f6a:	88 85       	ldd	r24, Y+8	; 0x08
    3f6c:	99 85       	ldd	r25, Y+9	; 0x09
    3f6e:	aa 85       	ldd	r26, Y+10	; 0x0a
    3f70:	bb 85       	ldd	r27, Y+11	; 0x0b
    3f72:	06 e0       	ldi	r16, 0x06	; 6
    3f74:	23 e0       	ldi	r18, 0x03	; 3
    3f76:	ac 01       	movw	r20, r24
    3f78:	bd 01       	movw	r22, r26
    3f7a:	80 e9       	ldi	r24, 0x90	; 144
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Lcd_4bit_enuDisplayNumberWithPosition>





}
    3f82:	3c c0       	rjmp	.+120    	; 0x3ffc <Calculator_DoSumandSub+0x3fa>

						Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u32ResultOperand,LCD_ROW3, LCD_COL6);
					}

					else{
						Loc_u32ResultOperand = Loc_u32SecondOperand-Loc_u32FirstOperand;
    3f84:	ce 01       	movw	r24, r28
    3f86:	88 52       	subi	r24, 0x28	; 40
    3f88:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	20 81       	ld	r18, Z
    3f8e:	31 81       	ldd	r19, Z+1	; 0x01
    3f90:	42 81       	ldd	r20, Z+2	; 0x02
    3f92:	53 81       	ldd	r21, Z+3	; 0x03
    3f94:	ce 01       	movw	r24, r28
    3f96:	80 59       	subi	r24, 0x90	; 144
    3f98:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	80 81       	ld	r24, Z
    3f9e:	91 81       	ldd	r25, Z+1	; 0x01
    3fa0:	a2 81       	ldd	r26, Z+2	; 0x02
    3fa2:	b3 81       	ldd	r27, Z+3	; 0x03
    3fa4:	79 01       	movw	r14, r18
    3fa6:	8a 01       	movw	r16, r20
    3fa8:	e8 1a       	sub	r14, r24
    3faa:	f9 0a       	sbc	r15, r25
    3fac:	0a 0b       	sbc	r16, r26
    3fae:	1b 0b       	sbc	r17, r27
    3fb0:	d8 01       	movw	r26, r16
    3fb2:	c7 01       	movw	r24, r14
    3fb4:	88 87       	std	Y+8, r24	; 0x08
    3fb6:	99 87       	std	Y+9, r25	; 0x09
    3fb8:	aa 87       	std	Y+10, r26	; 0x0a
    3fba:	bb 87       	std	Y+11, r27	; 0x0b
						if(Loc_u32SecondOperand==-1)
    3fbc:	ce 01       	movw	r24, r28
    3fbe:	88 52       	subi	r24, 0x28	; 40
    3fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc2:	fc 01       	movw	r30, r24
    3fc4:	80 81       	ld	r24, Z
    3fc6:	91 81       	ldd	r25, Z+1	; 0x01
    3fc8:	a2 81       	ldd	r26, Z+2	; 0x02
    3fca:	b3 81       	ldd	r27, Z+3	; 0x03
    3fcc:	8f 3f       	cpi	r24, 0xFF	; 255
    3fce:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd0:	af 4f       	sbci	r26, 0xFF	; 255
    3fd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fd4:	39 f4       	brne	.+14     	; 0x3fe4 <Calculator_DoSumandSub+0x3e2>
							Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, '-', LCD_ROW3, LCD_COL5);
    3fd6:	25 e0       	ldi	r18, 0x05	; 5
    3fd8:	43 e0       	ldi	r20, 0x03	; 3
    3fda:	6d e2       	ldi	r22, 0x2D	; 45
    3fdc:	80 e9       	ldi	r24, 0x90	; 144
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 6f 13 	call	0x26de	; 0x26de <Lcd_4bit_enuDisplayCharacterWithPosition>

						Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u32ResultOperand,LCD_ROW3, LCD_COL6);
    3fe4:	88 85       	ldd	r24, Y+8	; 0x08
    3fe6:	99 85       	ldd	r25, Y+9	; 0x09
    3fe8:	aa 85       	ldd	r26, Y+10	; 0x0a
    3fea:	bb 85       	ldd	r27, Y+11	; 0x0b
    3fec:	06 e0       	ldi	r16, 0x06	; 6
    3fee:	23 e0       	ldi	r18, 0x03	; 3
    3ff0:	ac 01       	movw	r20, r24
    3ff2:	bd 01       	movw	r22, r26
    3ff4:	80 e9       	ldi	r24, 0x90	; 144
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <Lcd_4bit_enuDisplayNumberWithPosition>





}
    3ffc:	00 00       	nop
    3ffe:	c1 5c       	subi	r28, 0xC1	; 193
    4000:	de 4f       	sbci	r29, 0xFE	; 254
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	0f be       	out	0x3f, r0	; 63
    400a:	cd bf       	out	0x3d, r28	; 61
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	1f 91       	pop	r17
    4012:	0f 91       	pop	r16
    4014:	ff 90       	pop	r15
    4016:	ef 90       	pop	r14
    4018:	08 95       	ret

0000401a <Keypad_IsrRead>:



void Keypad_IsrRead(void){
    401a:	cf 93       	push	r28
    401c:	df 93       	push	r29
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62

	static u8 counter = 0;
	counter ++;
    4022:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter.2226>
    4026:	8f 5f       	subi	r24, 0xFF	; 255
    4028:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter.2226>

	if(counter == 8){
    402c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter.2226>
    4030:	88 30       	cpi	r24, 0x08	; 8
    4032:	51 f4       	brne	.+20     	; 0x4048 <Keypad_IsrRead+0x2e>

		counter = 0;
    4034:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter.2226>
		Keypad_Status = Keypad_enuRead(&Keypad, &Keypad_Result);
    4038:	66 e0       	ldi	r22, 0x06	; 6
    403a:	71 e0       	ldi	r23, 0x01	; 1
    403c:	87 e9       	ldi	r24, 0x97	; 151
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <Keypad_enuRead>
    4044:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Keypad_Status>
	}


}
    4048:	00 00       	nop
    404a:	df 91       	pop	r29
    404c:	cf 91       	pop	r28
    404e:	08 95       	ret

00004050 <Calculator_InitValues>:

void Calculator_InitValues(void){
    4050:	cf 93       	push	r28
    4052:	df 93       	push	r29
    4054:	cd b7       	in	r28, 0x3d	; 61
    4056:	de b7       	in	r29, 0x3e	; 62
	Keypad_Result='g';
    4058:	87 e6       	ldi	r24, 0x67	; 103
    405a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Keypad_Result>
	Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    405e:	83 e0       	ldi	r24, 0x03	; 3
    4060:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Keypad_Status>
	Global_u8EquationArray[0]='\0';
    4064:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <Global_u8EquationArray>
	Global_u8Index =ZERO_VALUE;
    4068:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Global_u8Index>

	Global_u8Mul_Divide_Operations =0;
    406c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Global_u8Mul_Divide_Operations>
	Global_u8Operations =0;
    4070:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Global_u8Operations>
	Global_enuFlag = CALCULATOR_FLAG_OK;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <Global_enuFlag>
	Global_u8Mul_Divide_Inxdex=0;
    407a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Global_u8Mul_Divide_Inxdex>


}
    407e:	00 00       	nop
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	08 95       	ret

00004086 <__mulsi3>:
    4086:	db 01       	movw	r26, r22
    4088:	8f 93       	push	r24
    408a:	9f 93       	push	r25
    408c:	0e 94 53 20 	call	0x40a6	; 0x40a6 <__muluhisi3>
    4090:	bf 91       	pop	r27
    4092:	af 91       	pop	r26
    4094:	a2 9f       	mul	r26, r18
    4096:	80 0d       	add	r24, r0
    4098:	91 1d       	adc	r25, r1
    409a:	a3 9f       	mul	r26, r19
    409c:	90 0d       	add	r25, r0
    409e:	b2 9f       	mul	r27, r18
    40a0:	90 0d       	add	r25, r0
    40a2:	11 24       	eor	r1, r1
    40a4:	08 95       	ret

000040a6 <__muluhisi3>:
    40a6:	0e 94 80 20 	call	0x4100	; 0x4100 <__umulhisi3>
    40aa:	a5 9f       	mul	r26, r21
    40ac:	90 0d       	add	r25, r0
    40ae:	b4 9f       	mul	r27, r20
    40b0:	90 0d       	add	r25, r0
    40b2:	a4 9f       	mul	r26, r20
    40b4:	80 0d       	add	r24, r0
    40b6:	91 1d       	adc	r25, r1
    40b8:	11 24       	eor	r1, r1
    40ba:	08 95       	ret

000040bc <__ashldi3>:
    40bc:	0f 93       	push	r16
    40be:	08 30       	cpi	r16, 0x08	; 8
    40c0:	90 f0       	brcs	.+36     	; 0x40e6 <__ashldi3+0x2a>
    40c2:	98 2f       	mov	r25, r24
    40c4:	87 2f       	mov	r24, r23
    40c6:	76 2f       	mov	r23, r22
    40c8:	65 2f       	mov	r22, r21
    40ca:	54 2f       	mov	r21, r20
    40cc:	43 2f       	mov	r20, r19
    40ce:	32 2f       	mov	r19, r18
    40d0:	22 27       	eor	r18, r18
    40d2:	08 50       	subi	r16, 0x08	; 8
    40d4:	f4 cf       	rjmp	.-24     	; 0x40be <__ashldi3+0x2>
    40d6:	22 0f       	add	r18, r18
    40d8:	33 1f       	adc	r19, r19
    40da:	44 1f       	adc	r20, r20
    40dc:	55 1f       	adc	r21, r21
    40de:	66 1f       	adc	r22, r22
    40e0:	77 1f       	adc	r23, r23
    40e2:	88 1f       	adc	r24, r24
    40e4:	99 1f       	adc	r25, r25
    40e6:	0a 95       	dec	r16
    40e8:	b2 f7       	brpl	.-20     	; 0x40d6 <__ashldi3+0x1a>
    40ea:	0f 91       	pop	r16
    40ec:	08 95       	ret

000040ee <__adddi3>:
    40ee:	2a 0d       	add	r18, r10
    40f0:	3b 1d       	adc	r19, r11
    40f2:	4c 1d       	adc	r20, r12
    40f4:	5d 1d       	adc	r21, r13
    40f6:	6e 1d       	adc	r22, r14
    40f8:	7f 1d       	adc	r23, r15
    40fa:	80 1f       	adc	r24, r16
    40fc:	91 1f       	adc	r25, r17
    40fe:	08 95       	ret

00004100 <__umulhisi3>:
    4100:	a2 9f       	mul	r26, r18
    4102:	b0 01       	movw	r22, r0
    4104:	b3 9f       	mul	r27, r19
    4106:	c0 01       	movw	r24, r0
    4108:	a3 9f       	mul	r26, r19
    410a:	70 0d       	add	r23, r0
    410c:	81 1d       	adc	r24, r1
    410e:	11 24       	eor	r1, r1
    4110:	91 1d       	adc	r25, r1
    4112:	b2 9f       	mul	r27, r18
    4114:	70 0d       	add	r23, r0
    4116:	81 1d       	adc	r24, r1
    4118:	11 24       	eor	r1, r1
    411a:	91 1d       	adc	r25, r1
    411c:	08 95       	ret

0000411e <__subsf3>:
    411e:	50 58       	subi	r21, 0x80	; 128

00004120 <__addsf3>:
    4120:	bb 27       	eor	r27, r27
    4122:	aa 27       	eor	r26, r26
    4124:	0e 94 a7 20 	call	0x414e	; 0x414e <__addsf3x>
    4128:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__fp_round>
    412c:	0e 94 13 22 	call	0x4426	; 0x4426 <__fp_pscA>
    4130:	38 f0       	brcs	.+14     	; 0x4140 <__addsf3+0x20>
    4132:	0e 94 1a 22 	call	0x4434	; 0x4434 <__fp_pscB>
    4136:	20 f0       	brcs	.+8      	; 0x4140 <__addsf3+0x20>
    4138:	39 f4       	brne	.+14     	; 0x4148 <__addsf3+0x28>
    413a:	9f 3f       	cpi	r25, 0xFF	; 255
    413c:	19 f4       	brne	.+6      	; 0x4144 <__addsf3+0x24>
    413e:	26 f4       	brtc	.+8      	; 0x4148 <__addsf3+0x28>
    4140:	0c 94 10 22 	jmp	0x4420	; 0x4420 <__fp_nan>
    4144:	0e f4       	brtc	.+2      	; 0x4148 <__addsf3+0x28>
    4146:	e0 95       	com	r30
    4148:	e7 fb       	bst	r30, 7
    414a:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__fp_inf>

0000414e <__addsf3x>:
    414e:	e9 2f       	mov	r30, r25
    4150:	0e 94 32 22 	call	0x4464	; 0x4464 <__fp_split3>
    4154:	58 f3       	brcs	.-42     	; 0x412c <__addsf3+0xc>
    4156:	ba 17       	cp	r27, r26
    4158:	62 07       	cpc	r22, r18
    415a:	73 07       	cpc	r23, r19
    415c:	84 07       	cpc	r24, r20
    415e:	95 07       	cpc	r25, r21
    4160:	20 f0       	brcs	.+8      	; 0x416a <__addsf3x+0x1c>
    4162:	79 f4       	brne	.+30     	; 0x4182 <__addsf3x+0x34>
    4164:	a6 f5       	brtc	.+104    	; 0x41ce <__addsf3x+0x80>
    4166:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__fp_zero>
    416a:	0e f4       	brtc	.+2      	; 0x416e <__addsf3x+0x20>
    416c:	e0 95       	com	r30
    416e:	0b 2e       	mov	r0, r27
    4170:	ba 2f       	mov	r27, r26
    4172:	a0 2d       	mov	r26, r0
    4174:	0b 01       	movw	r0, r22
    4176:	b9 01       	movw	r22, r18
    4178:	90 01       	movw	r18, r0
    417a:	0c 01       	movw	r0, r24
    417c:	ca 01       	movw	r24, r20
    417e:	a0 01       	movw	r20, r0
    4180:	11 24       	eor	r1, r1
    4182:	ff 27       	eor	r31, r31
    4184:	59 1b       	sub	r21, r25
    4186:	99 f0       	breq	.+38     	; 0x41ae <__addsf3x+0x60>
    4188:	59 3f       	cpi	r21, 0xF9	; 249
    418a:	50 f4       	brcc	.+20     	; 0x41a0 <__addsf3x+0x52>
    418c:	50 3e       	cpi	r21, 0xE0	; 224
    418e:	68 f1       	brcs	.+90     	; 0x41ea <__addsf3x+0x9c>
    4190:	1a 16       	cp	r1, r26
    4192:	f0 40       	sbci	r31, 0x00	; 0
    4194:	a2 2f       	mov	r26, r18
    4196:	23 2f       	mov	r18, r19
    4198:	34 2f       	mov	r19, r20
    419a:	44 27       	eor	r20, r20
    419c:	58 5f       	subi	r21, 0xF8	; 248
    419e:	f3 cf       	rjmp	.-26     	; 0x4186 <__addsf3x+0x38>
    41a0:	46 95       	lsr	r20
    41a2:	37 95       	ror	r19
    41a4:	27 95       	ror	r18
    41a6:	a7 95       	ror	r26
    41a8:	f0 40       	sbci	r31, 0x00	; 0
    41aa:	53 95       	inc	r21
    41ac:	c9 f7       	brne	.-14     	; 0x41a0 <__addsf3x+0x52>
    41ae:	7e f4       	brtc	.+30     	; 0x41ce <__addsf3x+0x80>
    41b0:	1f 16       	cp	r1, r31
    41b2:	ba 0b       	sbc	r27, r26
    41b4:	62 0b       	sbc	r22, r18
    41b6:	73 0b       	sbc	r23, r19
    41b8:	84 0b       	sbc	r24, r20
    41ba:	ba f0       	brmi	.+46     	; 0x41ea <__addsf3x+0x9c>
    41bc:	91 50       	subi	r25, 0x01	; 1
    41be:	a1 f0       	breq	.+40     	; 0x41e8 <__addsf3x+0x9a>
    41c0:	ff 0f       	add	r31, r31
    41c2:	bb 1f       	adc	r27, r27
    41c4:	66 1f       	adc	r22, r22
    41c6:	77 1f       	adc	r23, r23
    41c8:	88 1f       	adc	r24, r24
    41ca:	c2 f7       	brpl	.-16     	; 0x41bc <__addsf3x+0x6e>
    41cc:	0e c0       	rjmp	.+28     	; 0x41ea <__addsf3x+0x9c>
    41ce:	ba 0f       	add	r27, r26
    41d0:	62 1f       	adc	r22, r18
    41d2:	73 1f       	adc	r23, r19
    41d4:	84 1f       	adc	r24, r20
    41d6:	48 f4       	brcc	.+18     	; 0x41ea <__addsf3x+0x9c>
    41d8:	87 95       	ror	r24
    41da:	77 95       	ror	r23
    41dc:	67 95       	ror	r22
    41de:	b7 95       	ror	r27
    41e0:	f7 95       	ror	r31
    41e2:	9e 3f       	cpi	r25, 0xFE	; 254
    41e4:	08 f0       	brcs	.+2      	; 0x41e8 <__addsf3x+0x9a>
    41e6:	b0 cf       	rjmp	.-160    	; 0x4148 <__addsf3+0x28>
    41e8:	93 95       	inc	r25
    41ea:	88 0f       	add	r24, r24
    41ec:	08 f0       	brcs	.+2      	; 0x41f0 <__addsf3x+0xa2>
    41ee:	99 27       	eor	r25, r25
    41f0:	ee 0f       	add	r30, r30
    41f2:	97 95       	ror	r25
    41f4:	87 95       	ror	r24
    41f6:	08 95       	ret

000041f8 <__cmpsf2>:
    41f8:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__fp_cmp>
    41fc:	08 f4       	brcc	.+2      	; 0x4200 <__cmpsf2+0x8>
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	08 95       	ret

00004202 <__divsf3>:
    4202:	0e 94 15 21 	call	0x422a	; 0x422a <__divsf3x>
    4206:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__fp_round>
    420a:	0e 94 1a 22 	call	0x4434	; 0x4434 <__fp_pscB>
    420e:	58 f0       	brcs	.+22     	; 0x4226 <__divsf3+0x24>
    4210:	0e 94 13 22 	call	0x4426	; 0x4426 <__fp_pscA>
    4214:	40 f0       	brcs	.+16     	; 0x4226 <__divsf3+0x24>
    4216:	29 f4       	brne	.+10     	; 0x4222 <__divsf3+0x20>
    4218:	5f 3f       	cpi	r21, 0xFF	; 255
    421a:	29 f0       	breq	.+10     	; 0x4226 <__divsf3+0x24>
    421c:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__fp_inf>
    4220:	51 11       	cpse	r21, r1
    4222:	0c 94 55 22 	jmp	0x44aa	; 0x44aa <__fp_szero>
    4226:	0c 94 10 22 	jmp	0x4420	; 0x4420 <__fp_nan>

0000422a <__divsf3x>:
    422a:	0e 94 32 22 	call	0x4464	; 0x4464 <__fp_split3>
    422e:	68 f3       	brcs	.-38     	; 0x420a <__divsf3+0x8>

00004230 <__divsf3_pse>:
    4230:	99 23       	and	r25, r25
    4232:	b1 f3       	breq	.-20     	; 0x4220 <__divsf3+0x1e>
    4234:	55 23       	and	r21, r21
    4236:	91 f3       	breq	.-28     	; 0x421c <__divsf3+0x1a>
    4238:	95 1b       	sub	r25, r21
    423a:	55 0b       	sbc	r21, r21
    423c:	bb 27       	eor	r27, r27
    423e:	aa 27       	eor	r26, r26
    4240:	62 17       	cp	r22, r18
    4242:	73 07       	cpc	r23, r19
    4244:	84 07       	cpc	r24, r20
    4246:	38 f0       	brcs	.+14     	; 0x4256 <__divsf3_pse+0x26>
    4248:	9f 5f       	subi	r25, 0xFF	; 255
    424a:	5f 4f       	sbci	r21, 0xFF	; 255
    424c:	22 0f       	add	r18, r18
    424e:	33 1f       	adc	r19, r19
    4250:	44 1f       	adc	r20, r20
    4252:	aa 1f       	adc	r26, r26
    4254:	a9 f3       	breq	.-22     	; 0x4240 <__divsf3_pse+0x10>
    4256:	35 d0       	rcall	.+106    	; 0x42c2 <__divsf3_pse+0x92>
    4258:	0e 2e       	mov	r0, r30
    425a:	3a f0       	brmi	.+14     	; 0x426a <__divsf3_pse+0x3a>
    425c:	e0 e8       	ldi	r30, 0x80	; 128
    425e:	32 d0       	rcall	.+100    	; 0x42c4 <__divsf3_pse+0x94>
    4260:	91 50       	subi	r25, 0x01	; 1
    4262:	50 40       	sbci	r21, 0x00	; 0
    4264:	e6 95       	lsr	r30
    4266:	00 1c       	adc	r0, r0
    4268:	ca f7       	brpl	.-14     	; 0x425c <__divsf3_pse+0x2c>
    426a:	2b d0       	rcall	.+86     	; 0x42c2 <__divsf3_pse+0x92>
    426c:	fe 2f       	mov	r31, r30
    426e:	29 d0       	rcall	.+82     	; 0x42c2 <__divsf3_pse+0x92>
    4270:	66 0f       	add	r22, r22
    4272:	77 1f       	adc	r23, r23
    4274:	88 1f       	adc	r24, r24
    4276:	bb 1f       	adc	r27, r27
    4278:	26 17       	cp	r18, r22
    427a:	37 07       	cpc	r19, r23
    427c:	48 07       	cpc	r20, r24
    427e:	ab 07       	cpc	r26, r27
    4280:	b0 e8       	ldi	r27, 0x80	; 128
    4282:	09 f0       	breq	.+2      	; 0x4286 <__divsf3_pse+0x56>
    4284:	bb 0b       	sbc	r27, r27
    4286:	80 2d       	mov	r24, r0
    4288:	bf 01       	movw	r22, r30
    428a:	ff 27       	eor	r31, r31
    428c:	93 58       	subi	r25, 0x83	; 131
    428e:	5f 4f       	sbci	r21, 0xFF	; 255
    4290:	3a f0       	brmi	.+14     	; 0x42a0 <__divsf3_pse+0x70>
    4292:	9e 3f       	cpi	r25, 0xFE	; 254
    4294:	51 05       	cpc	r21, r1
    4296:	78 f0       	brcs	.+30     	; 0x42b6 <__divsf3_pse+0x86>
    4298:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__fp_inf>
    429c:	0c 94 55 22 	jmp	0x44aa	; 0x44aa <__fp_szero>
    42a0:	5f 3f       	cpi	r21, 0xFF	; 255
    42a2:	e4 f3       	brlt	.-8      	; 0x429c <__divsf3_pse+0x6c>
    42a4:	98 3e       	cpi	r25, 0xE8	; 232
    42a6:	d4 f3       	brlt	.-12     	; 0x429c <__divsf3_pse+0x6c>
    42a8:	86 95       	lsr	r24
    42aa:	77 95       	ror	r23
    42ac:	67 95       	ror	r22
    42ae:	b7 95       	ror	r27
    42b0:	f7 95       	ror	r31
    42b2:	9f 5f       	subi	r25, 0xFF	; 255
    42b4:	c9 f7       	brne	.-14     	; 0x42a8 <__divsf3_pse+0x78>
    42b6:	88 0f       	add	r24, r24
    42b8:	91 1d       	adc	r25, r1
    42ba:	96 95       	lsr	r25
    42bc:	87 95       	ror	r24
    42be:	97 f9       	bld	r25, 7
    42c0:	08 95       	ret
    42c2:	e1 e0       	ldi	r30, 0x01	; 1
    42c4:	66 0f       	add	r22, r22
    42c6:	77 1f       	adc	r23, r23
    42c8:	88 1f       	adc	r24, r24
    42ca:	bb 1f       	adc	r27, r27
    42cc:	62 17       	cp	r22, r18
    42ce:	73 07       	cpc	r23, r19
    42d0:	84 07       	cpc	r24, r20
    42d2:	ba 07       	cpc	r27, r26
    42d4:	20 f0       	brcs	.+8      	; 0x42de <__divsf3_pse+0xae>
    42d6:	62 1b       	sub	r22, r18
    42d8:	73 0b       	sbc	r23, r19
    42da:	84 0b       	sbc	r24, r20
    42dc:	ba 0b       	sbc	r27, r26
    42de:	ee 1f       	adc	r30, r30
    42e0:	88 f7       	brcc	.-30     	; 0x42c4 <__divsf3_pse+0x94>
    42e2:	e0 95       	com	r30
    42e4:	08 95       	ret

000042e6 <__fixsfsi>:
    42e6:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <__fixunssfsi>
    42ea:	68 94       	set
    42ec:	b1 11       	cpse	r27, r1
    42ee:	0c 94 55 22 	jmp	0x44aa	; 0x44aa <__fp_szero>
    42f2:	08 95       	ret

000042f4 <__fixunssfsi>:
    42f4:	0e 94 3a 22 	call	0x4474	; 0x4474 <__fp_splitA>
    42f8:	88 f0       	brcs	.+34     	; 0x431c <__fixunssfsi+0x28>
    42fa:	9f 57       	subi	r25, 0x7F	; 127
    42fc:	98 f0       	brcs	.+38     	; 0x4324 <__fixunssfsi+0x30>
    42fe:	b9 2f       	mov	r27, r25
    4300:	99 27       	eor	r25, r25
    4302:	b7 51       	subi	r27, 0x17	; 23
    4304:	b0 f0       	brcs	.+44     	; 0x4332 <__fixunssfsi+0x3e>
    4306:	e1 f0       	breq	.+56     	; 0x4340 <__fixunssfsi+0x4c>
    4308:	66 0f       	add	r22, r22
    430a:	77 1f       	adc	r23, r23
    430c:	88 1f       	adc	r24, r24
    430e:	99 1f       	adc	r25, r25
    4310:	1a f0       	brmi	.+6      	; 0x4318 <__fixunssfsi+0x24>
    4312:	ba 95       	dec	r27
    4314:	c9 f7       	brne	.-14     	; 0x4308 <__fixunssfsi+0x14>
    4316:	14 c0       	rjmp	.+40     	; 0x4340 <__fixunssfsi+0x4c>
    4318:	b1 30       	cpi	r27, 0x01	; 1
    431a:	91 f0       	breq	.+36     	; 0x4340 <__fixunssfsi+0x4c>
    431c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <__fp_zero>
    4320:	b1 e0       	ldi	r27, 0x01	; 1
    4322:	08 95       	ret
    4324:	0c 94 54 22 	jmp	0x44a8	; 0x44a8 <__fp_zero>
    4328:	67 2f       	mov	r22, r23
    432a:	78 2f       	mov	r23, r24
    432c:	88 27       	eor	r24, r24
    432e:	b8 5f       	subi	r27, 0xF8	; 248
    4330:	39 f0       	breq	.+14     	; 0x4340 <__fixunssfsi+0x4c>
    4332:	b9 3f       	cpi	r27, 0xF9	; 249
    4334:	cc f3       	brlt	.-14     	; 0x4328 <__fixunssfsi+0x34>
    4336:	86 95       	lsr	r24
    4338:	77 95       	ror	r23
    433a:	67 95       	ror	r22
    433c:	b3 95       	inc	r27
    433e:	d9 f7       	brne	.-10     	; 0x4336 <__fixunssfsi+0x42>
    4340:	3e f4       	brtc	.+14     	; 0x4350 <__fixunssfsi+0x5c>
    4342:	90 95       	com	r25
    4344:	80 95       	com	r24
    4346:	70 95       	com	r23
    4348:	61 95       	neg	r22
    434a:	7f 4f       	sbci	r23, 0xFF	; 255
    434c:	8f 4f       	sbci	r24, 0xFF	; 255
    434e:	9f 4f       	sbci	r25, 0xFF	; 255
    4350:	08 95       	ret

00004352 <__floatunsisf>:
    4352:	e8 94       	clt
    4354:	09 c0       	rjmp	.+18     	; 0x4368 <__floatsisf+0x12>

00004356 <__floatsisf>:
    4356:	97 fb       	bst	r25, 7
    4358:	3e f4       	brtc	.+14     	; 0x4368 <__floatsisf+0x12>
    435a:	90 95       	com	r25
    435c:	80 95       	com	r24
    435e:	70 95       	com	r23
    4360:	61 95       	neg	r22
    4362:	7f 4f       	sbci	r23, 0xFF	; 255
    4364:	8f 4f       	sbci	r24, 0xFF	; 255
    4366:	9f 4f       	sbci	r25, 0xFF	; 255
    4368:	99 23       	and	r25, r25
    436a:	a9 f0       	breq	.+42     	; 0x4396 <__floatsisf+0x40>
    436c:	f9 2f       	mov	r31, r25
    436e:	96 e9       	ldi	r25, 0x96	; 150
    4370:	bb 27       	eor	r27, r27
    4372:	93 95       	inc	r25
    4374:	f6 95       	lsr	r31
    4376:	87 95       	ror	r24
    4378:	77 95       	ror	r23
    437a:	67 95       	ror	r22
    437c:	b7 95       	ror	r27
    437e:	f1 11       	cpse	r31, r1
    4380:	f8 cf       	rjmp	.-16     	; 0x4372 <__floatsisf+0x1c>
    4382:	fa f4       	brpl	.+62     	; 0x43c2 <__floatsisf+0x6c>
    4384:	bb 0f       	add	r27, r27
    4386:	11 f4       	brne	.+4      	; 0x438c <__floatsisf+0x36>
    4388:	60 ff       	sbrs	r22, 0
    438a:	1b c0       	rjmp	.+54     	; 0x43c2 <__floatsisf+0x6c>
    438c:	6f 5f       	subi	r22, 0xFF	; 255
    438e:	7f 4f       	sbci	r23, 0xFF	; 255
    4390:	8f 4f       	sbci	r24, 0xFF	; 255
    4392:	9f 4f       	sbci	r25, 0xFF	; 255
    4394:	16 c0       	rjmp	.+44     	; 0x43c2 <__floatsisf+0x6c>
    4396:	88 23       	and	r24, r24
    4398:	11 f0       	breq	.+4      	; 0x439e <__floatsisf+0x48>
    439a:	96 e9       	ldi	r25, 0x96	; 150
    439c:	11 c0       	rjmp	.+34     	; 0x43c0 <__floatsisf+0x6a>
    439e:	77 23       	and	r23, r23
    43a0:	21 f0       	breq	.+8      	; 0x43aa <__floatsisf+0x54>
    43a2:	9e e8       	ldi	r25, 0x8E	; 142
    43a4:	87 2f       	mov	r24, r23
    43a6:	76 2f       	mov	r23, r22
    43a8:	05 c0       	rjmp	.+10     	; 0x43b4 <__floatsisf+0x5e>
    43aa:	66 23       	and	r22, r22
    43ac:	71 f0       	breq	.+28     	; 0x43ca <__floatsisf+0x74>
    43ae:	96 e8       	ldi	r25, 0x86	; 134
    43b0:	86 2f       	mov	r24, r22
    43b2:	70 e0       	ldi	r23, 0x00	; 0
    43b4:	60 e0       	ldi	r22, 0x00	; 0
    43b6:	2a f0       	brmi	.+10     	; 0x43c2 <__floatsisf+0x6c>
    43b8:	9a 95       	dec	r25
    43ba:	66 0f       	add	r22, r22
    43bc:	77 1f       	adc	r23, r23
    43be:	88 1f       	adc	r24, r24
    43c0:	da f7       	brpl	.-10     	; 0x43b8 <__floatsisf+0x62>
    43c2:	88 0f       	add	r24, r24
    43c4:	96 95       	lsr	r25
    43c6:	87 95       	ror	r24
    43c8:	97 f9       	bld	r25, 7
    43ca:	08 95       	ret

000043cc <__fp_cmp>:
    43cc:	99 0f       	add	r25, r25
    43ce:	00 08       	sbc	r0, r0
    43d0:	55 0f       	add	r21, r21
    43d2:	aa 0b       	sbc	r26, r26
    43d4:	e0 e8       	ldi	r30, 0x80	; 128
    43d6:	fe ef       	ldi	r31, 0xFE	; 254
    43d8:	16 16       	cp	r1, r22
    43da:	17 06       	cpc	r1, r23
    43dc:	e8 07       	cpc	r30, r24
    43de:	f9 07       	cpc	r31, r25
    43e0:	c0 f0       	brcs	.+48     	; 0x4412 <__fp_cmp+0x46>
    43e2:	12 16       	cp	r1, r18
    43e4:	13 06       	cpc	r1, r19
    43e6:	e4 07       	cpc	r30, r20
    43e8:	f5 07       	cpc	r31, r21
    43ea:	98 f0       	brcs	.+38     	; 0x4412 <__fp_cmp+0x46>
    43ec:	62 1b       	sub	r22, r18
    43ee:	73 0b       	sbc	r23, r19
    43f0:	84 0b       	sbc	r24, r20
    43f2:	95 0b       	sbc	r25, r21
    43f4:	39 f4       	brne	.+14     	; 0x4404 <__fp_cmp+0x38>
    43f6:	0a 26       	eor	r0, r26
    43f8:	61 f0       	breq	.+24     	; 0x4412 <__fp_cmp+0x46>
    43fa:	23 2b       	or	r18, r19
    43fc:	24 2b       	or	r18, r20
    43fe:	25 2b       	or	r18, r21
    4400:	21 f4       	brne	.+8      	; 0x440a <__fp_cmp+0x3e>
    4402:	08 95       	ret
    4404:	0a 26       	eor	r0, r26
    4406:	09 f4       	brne	.+2      	; 0x440a <__fp_cmp+0x3e>
    4408:	a1 40       	sbci	r26, 0x01	; 1
    440a:	a6 95       	lsr	r26
    440c:	8f ef       	ldi	r24, 0xFF	; 255
    440e:	81 1d       	adc	r24, r1
    4410:	81 1d       	adc	r24, r1
    4412:	08 95       	ret

00004414 <__fp_inf>:
    4414:	97 f9       	bld	r25, 7
    4416:	9f 67       	ori	r25, 0x7F	; 127
    4418:	80 e8       	ldi	r24, 0x80	; 128
    441a:	70 e0       	ldi	r23, 0x00	; 0
    441c:	60 e0       	ldi	r22, 0x00	; 0
    441e:	08 95       	ret

00004420 <__fp_nan>:
    4420:	9f ef       	ldi	r25, 0xFF	; 255
    4422:	80 ec       	ldi	r24, 0xC0	; 192
    4424:	08 95       	ret

00004426 <__fp_pscA>:
    4426:	00 24       	eor	r0, r0
    4428:	0a 94       	dec	r0
    442a:	16 16       	cp	r1, r22
    442c:	17 06       	cpc	r1, r23
    442e:	18 06       	cpc	r1, r24
    4430:	09 06       	cpc	r0, r25
    4432:	08 95       	ret

00004434 <__fp_pscB>:
    4434:	00 24       	eor	r0, r0
    4436:	0a 94       	dec	r0
    4438:	12 16       	cp	r1, r18
    443a:	13 06       	cpc	r1, r19
    443c:	14 06       	cpc	r1, r20
    443e:	05 06       	cpc	r0, r21
    4440:	08 95       	ret

00004442 <__fp_round>:
    4442:	09 2e       	mov	r0, r25
    4444:	03 94       	inc	r0
    4446:	00 0c       	add	r0, r0
    4448:	11 f4       	brne	.+4      	; 0x444e <__fp_round+0xc>
    444a:	88 23       	and	r24, r24
    444c:	52 f0       	brmi	.+20     	; 0x4462 <__fp_round+0x20>
    444e:	bb 0f       	add	r27, r27
    4450:	40 f4       	brcc	.+16     	; 0x4462 <__fp_round+0x20>
    4452:	bf 2b       	or	r27, r31
    4454:	11 f4       	brne	.+4      	; 0x445a <__fp_round+0x18>
    4456:	60 ff       	sbrs	r22, 0
    4458:	04 c0       	rjmp	.+8      	; 0x4462 <__fp_round+0x20>
    445a:	6f 5f       	subi	r22, 0xFF	; 255
    445c:	7f 4f       	sbci	r23, 0xFF	; 255
    445e:	8f 4f       	sbci	r24, 0xFF	; 255
    4460:	9f 4f       	sbci	r25, 0xFF	; 255
    4462:	08 95       	ret

00004464 <__fp_split3>:
    4464:	57 fd       	sbrc	r21, 7
    4466:	90 58       	subi	r25, 0x80	; 128
    4468:	44 0f       	add	r20, r20
    446a:	55 1f       	adc	r21, r21
    446c:	59 f0       	breq	.+22     	; 0x4484 <__fp_splitA+0x10>
    446e:	5f 3f       	cpi	r21, 0xFF	; 255
    4470:	71 f0       	breq	.+28     	; 0x448e <__fp_splitA+0x1a>
    4472:	47 95       	ror	r20

00004474 <__fp_splitA>:
    4474:	88 0f       	add	r24, r24
    4476:	97 fb       	bst	r25, 7
    4478:	99 1f       	adc	r25, r25
    447a:	61 f0       	breq	.+24     	; 0x4494 <__fp_splitA+0x20>
    447c:	9f 3f       	cpi	r25, 0xFF	; 255
    447e:	79 f0       	breq	.+30     	; 0x449e <__fp_splitA+0x2a>
    4480:	87 95       	ror	r24
    4482:	08 95       	ret
    4484:	12 16       	cp	r1, r18
    4486:	13 06       	cpc	r1, r19
    4488:	14 06       	cpc	r1, r20
    448a:	55 1f       	adc	r21, r21
    448c:	f2 cf       	rjmp	.-28     	; 0x4472 <__fp_split3+0xe>
    448e:	46 95       	lsr	r20
    4490:	f1 df       	rcall	.-30     	; 0x4474 <__fp_splitA>
    4492:	08 c0       	rjmp	.+16     	; 0x44a4 <__fp_splitA+0x30>
    4494:	16 16       	cp	r1, r22
    4496:	17 06       	cpc	r1, r23
    4498:	18 06       	cpc	r1, r24
    449a:	99 1f       	adc	r25, r25
    449c:	f1 cf       	rjmp	.-30     	; 0x4480 <__fp_splitA+0xc>
    449e:	86 95       	lsr	r24
    44a0:	71 05       	cpc	r23, r1
    44a2:	61 05       	cpc	r22, r1
    44a4:	08 94       	sec
    44a6:	08 95       	ret

000044a8 <__fp_zero>:
    44a8:	e8 94       	clt

000044aa <__fp_szero>:
    44aa:	bb 27       	eor	r27, r27
    44ac:	66 27       	eor	r22, r22
    44ae:	77 27       	eor	r23, r23
    44b0:	cb 01       	movw	r24, r22
    44b2:	97 f9       	bld	r25, 7
    44b4:	08 95       	ret

000044b6 <__gesf2>:
    44b6:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__fp_cmp>
    44ba:	08 f4       	brcc	.+2      	; 0x44be <__gesf2+0x8>
    44bc:	8f ef       	ldi	r24, 0xFF	; 255
    44be:	08 95       	ret

000044c0 <__mulsf3>:
    44c0:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__mulsf3x>
    44c4:	0c 94 21 22 	jmp	0x4442	; 0x4442 <__fp_round>
    44c8:	0e 94 13 22 	call	0x4426	; 0x4426 <__fp_pscA>
    44cc:	38 f0       	brcs	.+14     	; 0x44dc <__mulsf3+0x1c>
    44ce:	0e 94 1a 22 	call	0x4434	; 0x4434 <__fp_pscB>
    44d2:	20 f0       	brcs	.+8      	; 0x44dc <__mulsf3+0x1c>
    44d4:	95 23       	and	r25, r21
    44d6:	11 f0       	breq	.+4      	; 0x44dc <__mulsf3+0x1c>
    44d8:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__fp_inf>
    44dc:	0c 94 10 22 	jmp	0x4420	; 0x4420 <__fp_nan>
    44e0:	11 24       	eor	r1, r1
    44e2:	0c 94 55 22 	jmp	0x44aa	; 0x44aa <__fp_szero>

000044e6 <__mulsf3x>:
    44e6:	0e 94 32 22 	call	0x4464	; 0x4464 <__fp_split3>
    44ea:	70 f3       	brcs	.-36     	; 0x44c8 <__mulsf3+0x8>

000044ec <__mulsf3_pse>:
    44ec:	95 9f       	mul	r25, r21
    44ee:	c1 f3       	breq	.-16     	; 0x44e0 <__mulsf3+0x20>
    44f0:	95 0f       	add	r25, r21
    44f2:	50 e0       	ldi	r21, 0x00	; 0
    44f4:	55 1f       	adc	r21, r21
    44f6:	62 9f       	mul	r22, r18
    44f8:	f0 01       	movw	r30, r0
    44fa:	72 9f       	mul	r23, r18
    44fc:	bb 27       	eor	r27, r27
    44fe:	f0 0d       	add	r31, r0
    4500:	b1 1d       	adc	r27, r1
    4502:	63 9f       	mul	r22, r19
    4504:	aa 27       	eor	r26, r26
    4506:	f0 0d       	add	r31, r0
    4508:	b1 1d       	adc	r27, r1
    450a:	aa 1f       	adc	r26, r26
    450c:	64 9f       	mul	r22, r20
    450e:	66 27       	eor	r22, r22
    4510:	b0 0d       	add	r27, r0
    4512:	a1 1d       	adc	r26, r1
    4514:	66 1f       	adc	r22, r22
    4516:	82 9f       	mul	r24, r18
    4518:	22 27       	eor	r18, r18
    451a:	b0 0d       	add	r27, r0
    451c:	a1 1d       	adc	r26, r1
    451e:	62 1f       	adc	r22, r18
    4520:	73 9f       	mul	r23, r19
    4522:	b0 0d       	add	r27, r0
    4524:	a1 1d       	adc	r26, r1
    4526:	62 1f       	adc	r22, r18
    4528:	83 9f       	mul	r24, r19
    452a:	a0 0d       	add	r26, r0
    452c:	61 1d       	adc	r22, r1
    452e:	22 1f       	adc	r18, r18
    4530:	74 9f       	mul	r23, r20
    4532:	33 27       	eor	r19, r19
    4534:	a0 0d       	add	r26, r0
    4536:	61 1d       	adc	r22, r1
    4538:	23 1f       	adc	r18, r19
    453a:	84 9f       	mul	r24, r20
    453c:	60 0d       	add	r22, r0
    453e:	21 1d       	adc	r18, r1
    4540:	82 2f       	mov	r24, r18
    4542:	76 2f       	mov	r23, r22
    4544:	6a 2f       	mov	r22, r26
    4546:	11 24       	eor	r1, r1
    4548:	9f 57       	subi	r25, 0x7F	; 127
    454a:	50 40       	sbci	r21, 0x00	; 0
    454c:	9a f0       	brmi	.+38     	; 0x4574 <__mulsf3_pse+0x88>
    454e:	f1 f0       	breq	.+60     	; 0x458c <__mulsf3_pse+0xa0>
    4550:	88 23       	and	r24, r24
    4552:	4a f0       	brmi	.+18     	; 0x4566 <__mulsf3_pse+0x7a>
    4554:	ee 0f       	add	r30, r30
    4556:	ff 1f       	adc	r31, r31
    4558:	bb 1f       	adc	r27, r27
    455a:	66 1f       	adc	r22, r22
    455c:	77 1f       	adc	r23, r23
    455e:	88 1f       	adc	r24, r24
    4560:	91 50       	subi	r25, 0x01	; 1
    4562:	50 40       	sbci	r21, 0x00	; 0
    4564:	a9 f7       	brne	.-22     	; 0x4550 <__mulsf3_pse+0x64>
    4566:	9e 3f       	cpi	r25, 0xFE	; 254
    4568:	51 05       	cpc	r21, r1
    456a:	80 f0       	brcs	.+32     	; 0x458c <__mulsf3_pse+0xa0>
    456c:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__fp_inf>
    4570:	0c 94 55 22 	jmp	0x44aa	; 0x44aa <__fp_szero>
    4574:	5f 3f       	cpi	r21, 0xFF	; 255
    4576:	e4 f3       	brlt	.-8      	; 0x4570 <__mulsf3_pse+0x84>
    4578:	98 3e       	cpi	r25, 0xE8	; 232
    457a:	d4 f3       	brlt	.-12     	; 0x4570 <__mulsf3_pse+0x84>
    457c:	86 95       	lsr	r24
    457e:	77 95       	ror	r23
    4580:	67 95       	ror	r22
    4582:	b7 95       	ror	r27
    4584:	f7 95       	ror	r31
    4586:	e7 95       	ror	r30
    4588:	9f 5f       	subi	r25, 0xFF	; 255
    458a:	c1 f7       	brne	.-16     	; 0x457c <__mulsf3_pse+0x90>
    458c:	fe 2b       	or	r31, r30
    458e:	88 0f       	add	r24, r24
    4590:	91 1d       	adc	r25, r1
    4592:	96 95       	lsr	r25
    4594:	87 95       	ror	r24
    4596:	97 f9       	bld	r25, 7
    4598:	08 95       	ret

0000459a <sprintf>:
    459a:	ae e0       	ldi	r26, 0x0E	; 14
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	e3 ed       	ldi	r30, 0xD3	; 211
    45a0:	f2 e2       	ldi	r31, 0x22	; 34
    45a2:	0c 94 8e 25 	jmp	0x4b1c	; 0x4b1c <__prologue_saves__+0x1c>
    45a6:	0d 89       	ldd	r16, Y+21	; 0x15
    45a8:	1e 89       	ldd	r17, Y+22	; 0x16
    45aa:	86 e0       	ldi	r24, 0x06	; 6
    45ac:	8c 83       	std	Y+4, r24	; 0x04
    45ae:	1a 83       	std	Y+2, r17	; 0x02
    45b0:	09 83       	std	Y+1, r16	; 0x01
    45b2:	8f ef       	ldi	r24, 0xFF	; 255
    45b4:	9f e7       	ldi	r25, 0x7F	; 127
    45b6:	9e 83       	std	Y+6, r25	; 0x06
    45b8:	8d 83       	std	Y+5, r24	; 0x05
    45ba:	ae 01       	movw	r20, r28
    45bc:	47 5e       	subi	r20, 0xE7	; 231
    45be:	5f 4f       	sbci	r21, 0xFF	; 255
    45c0:	6f 89       	ldd	r22, Y+23	; 0x17
    45c2:	78 8d       	ldd	r23, Y+24	; 0x18
    45c4:	ce 01       	movw	r24, r28
    45c6:	01 96       	adiw	r24, 0x01	; 1
    45c8:	0e 94 ef 22 	call	0x45de	; 0x45de <vfprintf>
    45cc:	ef 81       	ldd	r30, Y+7	; 0x07
    45ce:	f8 85       	ldd	r31, Y+8	; 0x08
    45d0:	e0 0f       	add	r30, r16
    45d2:	f1 1f       	adc	r31, r17
    45d4:	10 82       	st	Z, r1
    45d6:	2e 96       	adiw	r28, 0x0e	; 14
    45d8:	e4 e0       	ldi	r30, 0x04	; 4
    45da:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <__epilogue_restores__+0x1c>

000045de <vfprintf>:
    45de:	ab e0       	ldi	r26, 0x0B	; 11
    45e0:	b0 e0       	ldi	r27, 0x00	; 0
    45e2:	e5 ef       	ldi	r30, 0xF5	; 245
    45e4:	f2 e2       	ldi	r31, 0x22	; 34
    45e6:	0c 94 80 25 	jmp	0x4b00	; 0x4b00 <__prologue_saves__>
    45ea:	6c 01       	movw	r12, r24
    45ec:	7b 01       	movw	r14, r22
    45ee:	8a 01       	movw	r16, r20
    45f0:	fc 01       	movw	r30, r24
    45f2:	17 82       	std	Z+7, r1	; 0x07
    45f4:	16 82       	std	Z+6, r1	; 0x06
    45f6:	83 81       	ldd	r24, Z+3	; 0x03
    45f8:	81 ff       	sbrs	r24, 1
    45fa:	cc c1       	rjmp	.+920    	; 0x4994 <vfprintf+0x3b6>
    45fc:	ce 01       	movw	r24, r28
    45fe:	01 96       	adiw	r24, 0x01	; 1
    4600:	3c 01       	movw	r6, r24
    4602:	f6 01       	movw	r30, r12
    4604:	93 81       	ldd	r25, Z+3	; 0x03
    4606:	f7 01       	movw	r30, r14
    4608:	93 fd       	sbrc	r25, 3
    460a:	85 91       	lpm	r24, Z+
    460c:	93 ff       	sbrs	r25, 3
    460e:	81 91       	ld	r24, Z+
    4610:	7f 01       	movw	r14, r30
    4612:	88 23       	and	r24, r24
    4614:	09 f4       	brne	.+2      	; 0x4618 <vfprintf+0x3a>
    4616:	ba c1       	rjmp	.+884    	; 0x498c <vfprintf+0x3ae>
    4618:	85 32       	cpi	r24, 0x25	; 37
    461a:	39 f4       	brne	.+14     	; 0x462a <vfprintf+0x4c>
    461c:	93 fd       	sbrc	r25, 3
    461e:	85 91       	lpm	r24, Z+
    4620:	93 ff       	sbrs	r25, 3
    4622:	81 91       	ld	r24, Z+
    4624:	7f 01       	movw	r14, r30
    4626:	85 32       	cpi	r24, 0x25	; 37
    4628:	29 f4       	brne	.+10     	; 0x4634 <vfprintf+0x56>
    462a:	b6 01       	movw	r22, r12
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	0e 94 e6 24 	call	0x49cc	; 0x49cc <fputc>
    4632:	e7 cf       	rjmp	.-50     	; 0x4602 <vfprintf+0x24>
    4634:	91 2c       	mov	r9, r1
    4636:	21 2c       	mov	r2, r1
    4638:	31 2c       	mov	r3, r1
    463a:	ff e1       	ldi	r31, 0x1F	; 31
    463c:	f3 15       	cp	r31, r3
    463e:	d8 f0       	brcs	.+54     	; 0x4676 <vfprintf+0x98>
    4640:	8b 32       	cpi	r24, 0x2B	; 43
    4642:	79 f0       	breq	.+30     	; 0x4662 <vfprintf+0x84>
    4644:	38 f4       	brcc	.+14     	; 0x4654 <vfprintf+0x76>
    4646:	80 32       	cpi	r24, 0x20	; 32
    4648:	79 f0       	breq	.+30     	; 0x4668 <vfprintf+0x8a>
    464a:	83 32       	cpi	r24, 0x23	; 35
    464c:	a1 f4       	brne	.+40     	; 0x4676 <vfprintf+0x98>
    464e:	23 2d       	mov	r18, r3
    4650:	20 61       	ori	r18, 0x10	; 16
    4652:	1d c0       	rjmp	.+58     	; 0x468e <vfprintf+0xb0>
    4654:	8d 32       	cpi	r24, 0x2D	; 45
    4656:	61 f0       	breq	.+24     	; 0x4670 <vfprintf+0x92>
    4658:	80 33       	cpi	r24, 0x30	; 48
    465a:	69 f4       	brne	.+26     	; 0x4676 <vfprintf+0x98>
    465c:	23 2d       	mov	r18, r3
    465e:	21 60       	ori	r18, 0x01	; 1
    4660:	16 c0       	rjmp	.+44     	; 0x468e <vfprintf+0xb0>
    4662:	83 2d       	mov	r24, r3
    4664:	82 60       	ori	r24, 0x02	; 2
    4666:	38 2e       	mov	r3, r24
    4668:	e3 2d       	mov	r30, r3
    466a:	e4 60       	ori	r30, 0x04	; 4
    466c:	3e 2e       	mov	r3, r30
    466e:	2a c0       	rjmp	.+84     	; 0x46c4 <vfprintf+0xe6>
    4670:	f3 2d       	mov	r31, r3
    4672:	f8 60       	ori	r31, 0x08	; 8
    4674:	1d c0       	rjmp	.+58     	; 0x46b0 <vfprintf+0xd2>
    4676:	37 fc       	sbrc	r3, 7
    4678:	2d c0       	rjmp	.+90     	; 0x46d4 <vfprintf+0xf6>
    467a:	20 ed       	ldi	r18, 0xD0	; 208
    467c:	28 0f       	add	r18, r24
    467e:	2a 30       	cpi	r18, 0x0A	; 10
    4680:	40 f0       	brcs	.+16     	; 0x4692 <vfprintf+0xb4>
    4682:	8e 32       	cpi	r24, 0x2E	; 46
    4684:	b9 f4       	brne	.+46     	; 0x46b4 <vfprintf+0xd6>
    4686:	36 fc       	sbrc	r3, 6
    4688:	81 c1       	rjmp	.+770    	; 0x498c <vfprintf+0x3ae>
    468a:	23 2d       	mov	r18, r3
    468c:	20 64       	ori	r18, 0x40	; 64
    468e:	32 2e       	mov	r3, r18
    4690:	19 c0       	rjmp	.+50     	; 0x46c4 <vfprintf+0xe6>
    4692:	36 fe       	sbrs	r3, 6
    4694:	06 c0       	rjmp	.+12     	; 0x46a2 <vfprintf+0xc4>
    4696:	8a e0       	ldi	r24, 0x0A	; 10
    4698:	98 9e       	mul	r9, r24
    469a:	20 0d       	add	r18, r0
    469c:	11 24       	eor	r1, r1
    469e:	92 2e       	mov	r9, r18
    46a0:	11 c0       	rjmp	.+34     	; 0x46c4 <vfprintf+0xe6>
    46a2:	ea e0       	ldi	r30, 0x0A	; 10
    46a4:	2e 9e       	mul	r2, r30
    46a6:	20 0d       	add	r18, r0
    46a8:	11 24       	eor	r1, r1
    46aa:	22 2e       	mov	r2, r18
    46ac:	f3 2d       	mov	r31, r3
    46ae:	f0 62       	ori	r31, 0x20	; 32
    46b0:	3f 2e       	mov	r3, r31
    46b2:	08 c0       	rjmp	.+16     	; 0x46c4 <vfprintf+0xe6>
    46b4:	8c 36       	cpi	r24, 0x6C	; 108
    46b6:	21 f4       	brne	.+8      	; 0x46c0 <vfprintf+0xe2>
    46b8:	83 2d       	mov	r24, r3
    46ba:	80 68       	ori	r24, 0x80	; 128
    46bc:	38 2e       	mov	r3, r24
    46be:	02 c0       	rjmp	.+4      	; 0x46c4 <vfprintf+0xe6>
    46c0:	88 36       	cpi	r24, 0x68	; 104
    46c2:	41 f4       	brne	.+16     	; 0x46d4 <vfprintf+0xf6>
    46c4:	f7 01       	movw	r30, r14
    46c6:	93 fd       	sbrc	r25, 3
    46c8:	85 91       	lpm	r24, Z+
    46ca:	93 ff       	sbrs	r25, 3
    46cc:	81 91       	ld	r24, Z+
    46ce:	7f 01       	movw	r14, r30
    46d0:	81 11       	cpse	r24, r1
    46d2:	b3 cf       	rjmp	.-154    	; 0x463a <vfprintf+0x5c>
    46d4:	98 2f       	mov	r25, r24
    46d6:	9f 7d       	andi	r25, 0xDF	; 223
    46d8:	95 54       	subi	r25, 0x45	; 69
    46da:	93 30       	cpi	r25, 0x03	; 3
    46dc:	28 f4       	brcc	.+10     	; 0x46e8 <vfprintf+0x10a>
    46de:	0c 5f       	subi	r16, 0xFC	; 252
    46e0:	1f 4f       	sbci	r17, 0xFF	; 255
    46e2:	9f e3       	ldi	r25, 0x3F	; 63
    46e4:	99 83       	std	Y+1, r25	; 0x01
    46e6:	0d c0       	rjmp	.+26     	; 0x4702 <vfprintf+0x124>
    46e8:	83 36       	cpi	r24, 0x63	; 99
    46ea:	31 f0       	breq	.+12     	; 0x46f8 <vfprintf+0x11a>
    46ec:	83 37       	cpi	r24, 0x73	; 115
    46ee:	71 f0       	breq	.+28     	; 0x470c <vfprintf+0x12e>
    46f0:	83 35       	cpi	r24, 0x53	; 83
    46f2:	09 f0       	breq	.+2      	; 0x46f6 <vfprintf+0x118>
    46f4:	59 c0       	rjmp	.+178    	; 0x47a8 <vfprintf+0x1ca>
    46f6:	21 c0       	rjmp	.+66     	; 0x473a <vfprintf+0x15c>
    46f8:	f8 01       	movw	r30, r16
    46fa:	80 81       	ld	r24, Z
    46fc:	89 83       	std	Y+1, r24	; 0x01
    46fe:	0e 5f       	subi	r16, 0xFE	; 254
    4700:	1f 4f       	sbci	r17, 0xFF	; 255
    4702:	88 24       	eor	r8, r8
    4704:	83 94       	inc	r8
    4706:	91 2c       	mov	r9, r1
    4708:	53 01       	movw	r10, r6
    470a:	13 c0       	rjmp	.+38     	; 0x4732 <vfprintf+0x154>
    470c:	28 01       	movw	r4, r16
    470e:	f2 e0       	ldi	r31, 0x02	; 2
    4710:	4f 0e       	add	r4, r31
    4712:	51 1c       	adc	r5, r1
    4714:	f8 01       	movw	r30, r16
    4716:	a0 80       	ld	r10, Z
    4718:	b1 80       	ldd	r11, Z+1	; 0x01
    471a:	36 fe       	sbrs	r3, 6
    471c:	03 c0       	rjmp	.+6      	; 0x4724 <vfprintf+0x146>
    471e:	69 2d       	mov	r22, r9
    4720:	70 e0       	ldi	r23, 0x00	; 0
    4722:	02 c0       	rjmp	.+4      	; 0x4728 <vfprintf+0x14a>
    4724:	6f ef       	ldi	r22, 0xFF	; 255
    4726:	7f ef       	ldi	r23, 0xFF	; 255
    4728:	c5 01       	movw	r24, r10
    472a:	0e 94 db 24 	call	0x49b6	; 0x49b6 <strnlen>
    472e:	4c 01       	movw	r8, r24
    4730:	82 01       	movw	r16, r4
    4732:	f3 2d       	mov	r31, r3
    4734:	ff 77       	andi	r31, 0x7F	; 127
    4736:	3f 2e       	mov	r3, r31
    4738:	16 c0       	rjmp	.+44     	; 0x4766 <vfprintf+0x188>
    473a:	28 01       	movw	r4, r16
    473c:	22 e0       	ldi	r18, 0x02	; 2
    473e:	42 0e       	add	r4, r18
    4740:	51 1c       	adc	r5, r1
    4742:	f8 01       	movw	r30, r16
    4744:	a0 80       	ld	r10, Z
    4746:	b1 80       	ldd	r11, Z+1	; 0x01
    4748:	36 fe       	sbrs	r3, 6
    474a:	03 c0       	rjmp	.+6      	; 0x4752 <vfprintf+0x174>
    474c:	69 2d       	mov	r22, r9
    474e:	70 e0       	ldi	r23, 0x00	; 0
    4750:	02 c0       	rjmp	.+4      	; 0x4756 <vfprintf+0x178>
    4752:	6f ef       	ldi	r22, 0xFF	; 255
    4754:	7f ef       	ldi	r23, 0xFF	; 255
    4756:	c5 01       	movw	r24, r10
    4758:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <strnlen_P>
    475c:	4c 01       	movw	r8, r24
    475e:	f3 2d       	mov	r31, r3
    4760:	f0 68       	ori	r31, 0x80	; 128
    4762:	3f 2e       	mov	r3, r31
    4764:	82 01       	movw	r16, r4
    4766:	33 fc       	sbrc	r3, 3
    4768:	1b c0       	rjmp	.+54     	; 0x47a0 <vfprintf+0x1c2>
    476a:	82 2d       	mov	r24, r2
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	88 16       	cp	r8, r24
    4770:	99 06       	cpc	r9, r25
    4772:	b0 f4       	brcc	.+44     	; 0x47a0 <vfprintf+0x1c2>
    4774:	b6 01       	movw	r22, r12
    4776:	80 e2       	ldi	r24, 0x20	; 32
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	0e 94 e6 24 	call	0x49cc	; 0x49cc <fputc>
    477e:	2a 94       	dec	r2
    4780:	f4 cf       	rjmp	.-24     	; 0x476a <vfprintf+0x18c>
    4782:	f5 01       	movw	r30, r10
    4784:	37 fc       	sbrc	r3, 7
    4786:	85 91       	lpm	r24, Z+
    4788:	37 fe       	sbrs	r3, 7
    478a:	81 91       	ld	r24, Z+
    478c:	5f 01       	movw	r10, r30
    478e:	b6 01       	movw	r22, r12
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	0e 94 e6 24 	call	0x49cc	; 0x49cc <fputc>
    4796:	21 10       	cpse	r2, r1
    4798:	2a 94       	dec	r2
    479a:	21 e0       	ldi	r18, 0x01	; 1
    479c:	82 1a       	sub	r8, r18
    479e:	91 08       	sbc	r9, r1
    47a0:	81 14       	cp	r8, r1
    47a2:	91 04       	cpc	r9, r1
    47a4:	71 f7       	brne	.-36     	; 0x4782 <vfprintf+0x1a4>
    47a6:	e8 c0       	rjmp	.+464    	; 0x4978 <vfprintf+0x39a>
    47a8:	84 36       	cpi	r24, 0x64	; 100
    47aa:	11 f0       	breq	.+4      	; 0x47b0 <vfprintf+0x1d2>
    47ac:	89 36       	cpi	r24, 0x69	; 105
    47ae:	41 f5       	brne	.+80     	; 0x4800 <vfprintf+0x222>
    47b0:	f8 01       	movw	r30, r16
    47b2:	37 fe       	sbrs	r3, 7
    47b4:	07 c0       	rjmp	.+14     	; 0x47c4 <vfprintf+0x1e6>
    47b6:	60 81       	ld	r22, Z
    47b8:	71 81       	ldd	r23, Z+1	; 0x01
    47ba:	82 81       	ldd	r24, Z+2	; 0x02
    47bc:	93 81       	ldd	r25, Z+3	; 0x03
    47be:	0c 5f       	subi	r16, 0xFC	; 252
    47c0:	1f 4f       	sbci	r17, 0xFF	; 255
    47c2:	08 c0       	rjmp	.+16     	; 0x47d4 <vfprintf+0x1f6>
    47c4:	60 81       	ld	r22, Z
    47c6:	71 81       	ldd	r23, Z+1	; 0x01
    47c8:	07 2e       	mov	r0, r23
    47ca:	00 0c       	add	r0, r0
    47cc:	88 0b       	sbc	r24, r24
    47ce:	99 0b       	sbc	r25, r25
    47d0:	0e 5f       	subi	r16, 0xFE	; 254
    47d2:	1f 4f       	sbci	r17, 0xFF	; 255
    47d4:	f3 2d       	mov	r31, r3
    47d6:	ff 76       	andi	r31, 0x6F	; 111
    47d8:	3f 2e       	mov	r3, r31
    47da:	97 ff       	sbrs	r25, 7
    47dc:	09 c0       	rjmp	.+18     	; 0x47f0 <vfprintf+0x212>
    47de:	90 95       	com	r25
    47e0:	80 95       	com	r24
    47e2:	70 95       	com	r23
    47e4:	61 95       	neg	r22
    47e6:	7f 4f       	sbci	r23, 0xFF	; 255
    47e8:	8f 4f       	sbci	r24, 0xFF	; 255
    47ea:	9f 4f       	sbci	r25, 0xFF	; 255
    47ec:	f0 68       	ori	r31, 0x80	; 128
    47ee:	3f 2e       	mov	r3, r31
    47f0:	2a e0       	ldi	r18, 0x0A	; 10
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	a3 01       	movw	r20, r6
    47f6:	0e 94 22 25 	call	0x4a44	; 0x4a44 <__ultoa_invert>
    47fa:	88 2e       	mov	r8, r24
    47fc:	86 18       	sub	r8, r6
    47fe:	45 c0       	rjmp	.+138    	; 0x488a <vfprintf+0x2ac>
    4800:	85 37       	cpi	r24, 0x75	; 117
    4802:	31 f4       	brne	.+12     	; 0x4810 <vfprintf+0x232>
    4804:	23 2d       	mov	r18, r3
    4806:	2f 7e       	andi	r18, 0xEF	; 239
    4808:	b2 2e       	mov	r11, r18
    480a:	2a e0       	ldi	r18, 0x0A	; 10
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	25 c0       	rjmp	.+74     	; 0x485a <vfprintf+0x27c>
    4810:	93 2d       	mov	r25, r3
    4812:	99 7f       	andi	r25, 0xF9	; 249
    4814:	b9 2e       	mov	r11, r25
    4816:	8f 36       	cpi	r24, 0x6F	; 111
    4818:	c1 f0       	breq	.+48     	; 0x484a <vfprintf+0x26c>
    481a:	18 f4       	brcc	.+6      	; 0x4822 <vfprintf+0x244>
    481c:	88 35       	cpi	r24, 0x58	; 88
    481e:	79 f0       	breq	.+30     	; 0x483e <vfprintf+0x260>
    4820:	b5 c0       	rjmp	.+362    	; 0x498c <vfprintf+0x3ae>
    4822:	80 37       	cpi	r24, 0x70	; 112
    4824:	19 f0       	breq	.+6      	; 0x482c <vfprintf+0x24e>
    4826:	88 37       	cpi	r24, 0x78	; 120
    4828:	21 f0       	breq	.+8      	; 0x4832 <vfprintf+0x254>
    482a:	b0 c0       	rjmp	.+352    	; 0x498c <vfprintf+0x3ae>
    482c:	e9 2f       	mov	r30, r25
    482e:	e0 61       	ori	r30, 0x10	; 16
    4830:	be 2e       	mov	r11, r30
    4832:	b4 fe       	sbrs	r11, 4
    4834:	0d c0       	rjmp	.+26     	; 0x4850 <vfprintf+0x272>
    4836:	fb 2d       	mov	r31, r11
    4838:	f4 60       	ori	r31, 0x04	; 4
    483a:	bf 2e       	mov	r11, r31
    483c:	09 c0       	rjmp	.+18     	; 0x4850 <vfprintf+0x272>
    483e:	34 fe       	sbrs	r3, 4
    4840:	0a c0       	rjmp	.+20     	; 0x4856 <vfprintf+0x278>
    4842:	29 2f       	mov	r18, r25
    4844:	26 60       	ori	r18, 0x06	; 6
    4846:	b2 2e       	mov	r11, r18
    4848:	06 c0       	rjmp	.+12     	; 0x4856 <vfprintf+0x278>
    484a:	28 e0       	ldi	r18, 0x08	; 8
    484c:	30 e0       	ldi	r19, 0x00	; 0
    484e:	05 c0       	rjmp	.+10     	; 0x485a <vfprintf+0x27c>
    4850:	20 e1       	ldi	r18, 0x10	; 16
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	02 c0       	rjmp	.+4      	; 0x485a <vfprintf+0x27c>
    4856:	20 e1       	ldi	r18, 0x10	; 16
    4858:	32 e0       	ldi	r19, 0x02	; 2
    485a:	f8 01       	movw	r30, r16
    485c:	b7 fe       	sbrs	r11, 7
    485e:	07 c0       	rjmp	.+14     	; 0x486e <vfprintf+0x290>
    4860:	60 81       	ld	r22, Z
    4862:	71 81       	ldd	r23, Z+1	; 0x01
    4864:	82 81       	ldd	r24, Z+2	; 0x02
    4866:	93 81       	ldd	r25, Z+3	; 0x03
    4868:	0c 5f       	subi	r16, 0xFC	; 252
    486a:	1f 4f       	sbci	r17, 0xFF	; 255
    486c:	06 c0       	rjmp	.+12     	; 0x487a <vfprintf+0x29c>
    486e:	60 81       	ld	r22, Z
    4870:	71 81       	ldd	r23, Z+1	; 0x01
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	0e 5f       	subi	r16, 0xFE	; 254
    4878:	1f 4f       	sbci	r17, 0xFF	; 255
    487a:	a3 01       	movw	r20, r6
    487c:	0e 94 22 25 	call	0x4a44	; 0x4a44 <__ultoa_invert>
    4880:	88 2e       	mov	r8, r24
    4882:	86 18       	sub	r8, r6
    4884:	fb 2d       	mov	r31, r11
    4886:	ff 77       	andi	r31, 0x7F	; 127
    4888:	3f 2e       	mov	r3, r31
    488a:	36 fe       	sbrs	r3, 6
    488c:	0d c0       	rjmp	.+26     	; 0x48a8 <vfprintf+0x2ca>
    488e:	23 2d       	mov	r18, r3
    4890:	2e 7f       	andi	r18, 0xFE	; 254
    4892:	a2 2e       	mov	r10, r18
    4894:	89 14       	cp	r8, r9
    4896:	58 f4       	brcc	.+22     	; 0x48ae <vfprintf+0x2d0>
    4898:	34 fe       	sbrs	r3, 4
    489a:	0b c0       	rjmp	.+22     	; 0x48b2 <vfprintf+0x2d4>
    489c:	32 fc       	sbrc	r3, 2
    489e:	09 c0       	rjmp	.+18     	; 0x48b2 <vfprintf+0x2d4>
    48a0:	83 2d       	mov	r24, r3
    48a2:	8e 7e       	andi	r24, 0xEE	; 238
    48a4:	a8 2e       	mov	r10, r24
    48a6:	05 c0       	rjmp	.+10     	; 0x48b2 <vfprintf+0x2d4>
    48a8:	b8 2c       	mov	r11, r8
    48aa:	a3 2c       	mov	r10, r3
    48ac:	03 c0       	rjmp	.+6      	; 0x48b4 <vfprintf+0x2d6>
    48ae:	b8 2c       	mov	r11, r8
    48b0:	01 c0       	rjmp	.+2      	; 0x48b4 <vfprintf+0x2d6>
    48b2:	b9 2c       	mov	r11, r9
    48b4:	a4 fe       	sbrs	r10, 4
    48b6:	0f c0       	rjmp	.+30     	; 0x48d6 <vfprintf+0x2f8>
    48b8:	fe 01       	movw	r30, r28
    48ba:	e8 0d       	add	r30, r8
    48bc:	f1 1d       	adc	r31, r1
    48be:	80 81       	ld	r24, Z
    48c0:	80 33       	cpi	r24, 0x30	; 48
    48c2:	21 f4       	brne	.+8      	; 0x48cc <vfprintf+0x2ee>
    48c4:	9a 2d       	mov	r25, r10
    48c6:	99 7e       	andi	r25, 0xE9	; 233
    48c8:	a9 2e       	mov	r10, r25
    48ca:	09 c0       	rjmp	.+18     	; 0x48de <vfprintf+0x300>
    48cc:	a2 fe       	sbrs	r10, 2
    48ce:	06 c0       	rjmp	.+12     	; 0x48dc <vfprintf+0x2fe>
    48d0:	b3 94       	inc	r11
    48d2:	b3 94       	inc	r11
    48d4:	04 c0       	rjmp	.+8      	; 0x48de <vfprintf+0x300>
    48d6:	8a 2d       	mov	r24, r10
    48d8:	86 78       	andi	r24, 0x86	; 134
    48da:	09 f0       	breq	.+2      	; 0x48de <vfprintf+0x300>
    48dc:	b3 94       	inc	r11
    48de:	a3 fc       	sbrc	r10, 3
    48e0:	11 c0       	rjmp	.+34     	; 0x4904 <vfprintf+0x326>
    48e2:	a0 fe       	sbrs	r10, 0
    48e4:	06 c0       	rjmp	.+12     	; 0x48f2 <vfprintf+0x314>
    48e6:	b2 14       	cp	r11, r2
    48e8:	88 f4       	brcc	.+34     	; 0x490c <vfprintf+0x32e>
    48ea:	28 0c       	add	r2, r8
    48ec:	92 2c       	mov	r9, r2
    48ee:	9b 18       	sub	r9, r11
    48f0:	0e c0       	rjmp	.+28     	; 0x490e <vfprintf+0x330>
    48f2:	b2 14       	cp	r11, r2
    48f4:	60 f4       	brcc	.+24     	; 0x490e <vfprintf+0x330>
    48f6:	b6 01       	movw	r22, r12
    48f8:	80 e2       	ldi	r24, 0x20	; 32
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	0e 94 e6 24 	call	0x49cc	; 0x49cc <fputc>
    4900:	b3 94       	inc	r11
    4902:	f7 cf       	rjmp	.-18     	; 0x48f2 <vfprintf+0x314>
    4904:	b2 14       	cp	r11, r2
    4906:	18 f4       	brcc	.+6      	; 0x490e <vfprintf+0x330>
    4908:	2b 18       	sub	r2, r11
    490a:	02 c0       	rjmp	.+4      	; 0x4910 <vfprintf+0x332>
    490c:	98 2c       	mov	r9, r8
    490e:	21 2c       	mov	r2, r1
    4910:	a4 fe       	sbrs	r10, 4
    4912:	10 c0       	rjmp	.+32     	; 0x4934 <vfprintf+0x356>
    4914:	b6 01       	movw	r22, r12
    4916:	80 e3       	ldi	r24, 0x30	; 48
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	0e 94 e6 24 	call	0x49cc	; 0x49cc <fputc>
    491e:	a2 fe       	sbrs	r10, 2
    4920:	17 c0       	rjmp	.+46     	; 0x4950 <vfprintf+0x372>
    4922:	a1 fc       	sbrc	r10, 1
    4924:	03 c0       	rjmp	.+6      	; 0x492c <vfprintf+0x34e>
    4926:	88 e7       	ldi	r24, 0x78	; 120
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	02 c0       	rjmp	.+4      	; 0x4930 <vfprintf+0x352>
    492c:	88 e5       	ldi	r24, 0x58	; 88
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	b6 01       	movw	r22, r12
    4932:	0c c0       	rjmp	.+24     	; 0x494c <vfprintf+0x36e>
    4934:	8a 2d       	mov	r24, r10
    4936:	86 78       	andi	r24, 0x86	; 134
    4938:	59 f0       	breq	.+22     	; 0x4950 <vfprintf+0x372>
    493a:	a1 fe       	sbrs	r10, 1
    493c:	02 c0       	rjmp	.+4      	; 0x4942 <vfprintf+0x364>
    493e:	8b e2       	ldi	r24, 0x2B	; 43
    4940:	01 c0       	rjmp	.+2      	; 0x4944 <vfprintf+0x366>
    4942:	80 e2       	ldi	r24, 0x20	; 32
    4944:	a7 fc       	sbrc	r10, 7
    4946:	8d e2       	ldi	r24, 0x2D	; 45
    4948:	b6 01       	movw	r22, r12
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	0e 94 e6 24 	call	0x49cc	; 0x49cc <fputc>
    4950:	89 14       	cp	r8, r9
    4952:	38 f4       	brcc	.+14     	; 0x4962 <vfprintf+0x384>
    4954:	b6 01       	movw	r22, r12
    4956:	80 e3       	ldi	r24, 0x30	; 48
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	0e 94 e6 24 	call	0x49cc	; 0x49cc <fputc>
    495e:	9a 94       	dec	r9
    4960:	f7 cf       	rjmp	.-18     	; 0x4950 <vfprintf+0x372>
    4962:	8a 94       	dec	r8
    4964:	f3 01       	movw	r30, r6
    4966:	e8 0d       	add	r30, r8
    4968:	f1 1d       	adc	r31, r1
    496a:	80 81       	ld	r24, Z
    496c:	b6 01       	movw	r22, r12
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	0e 94 e6 24 	call	0x49cc	; 0x49cc <fputc>
    4974:	81 10       	cpse	r8, r1
    4976:	f5 cf       	rjmp	.-22     	; 0x4962 <vfprintf+0x384>
    4978:	22 20       	and	r2, r2
    497a:	09 f4       	brne	.+2      	; 0x497e <vfprintf+0x3a0>
    497c:	42 ce       	rjmp	.-892    	; 0x4602 <vfprintf+0x24>
    497e:	b6 01       	movw	r22, r12
    4980:	80 e2       	ldi	r24, 0x20	; 32
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	0e 94 e6 24 	call	0x49cc	; 0x49cc <fputc>
    4988:	2a 94       	dec	r2
    498a:	f6 cf       	rjmp	.-20     	; 0x4978 <vfprintf+0x39a>
    498c:	f6 01       	movw	r30, r12
    498e:	86 81       	ldd	r24, Z+6	; 0x06
    4990:	97 81       	ldd	r25, Z+7	; 0x07
    4992:	02 c0       	rjmp	.+4      	; 0x4998 <vfprintf+0x3ba>
    4994:	8f ef       	ldi	r24, 0xFF	; 255
    4996:	9f ef       	ldi	r25, 0xFF	; 255
    4998:	2b 96       	adiw	r28, 0x0b	; 11
    499a:	e2 e1       	ldi	r30, 0x12	; 18
    499c:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__epilogue_restores__>

000049a0 <strnlen_P>:
    49a0:	fc 01       	movw	r30, r24
    49a2:	05 90       	lpm	r0, Z+
    49a4:	61 50       	subi	r22, 0x01	; 1
    49a6:	70 40       	sbci	r23, 0x00	; 0
    49a8:	01 10       	cpse	r0, r1
    49aa:	d8 f7       	brcc	.-10     	; 0x49a2 <strnlen_P+0x2>
    49ac:	80 95       	com	r24
    49ae:	90 95       	com	r25
    49b0:	8e 0f       	add	r24, r30
    49b2:	9f 1f       	adc	r25, r31
    49b4:	08 95       	ret

000049b6 <strnlen>:
    49b6:	fc 01       	movw	r30, r24
    49b8:	61 50       	subi	r22, 0x01	; 1
    49ba:	70 40       	sbci	r23, 0x00	; 0
    49bc:	01 90       	ld	r0, Z+
    49be:	01 10       	cpse	r0, r1
    49c0:	d8 f7       	brcc	.-10     	; 0x49b8 <strnlen+0x2>
    49c2:	80 95       	com	r24
    49c4:	90 95       	com	r25
    49c6:	8e 0f       	add	r24, r30
    49c8:	9f 1f       	adc	r25, r31
    49ca:	08 95       	ret

000049cc <fputc>:
    49cc:	0f 93       	push	r16
    49ce:	1f 93       	push	r17
    49d0:	cf 93       	push	r28
    49d2:	df 93       	push	r29
    49d4:	fb 01       	movw	r30, r22
    49d6:	23 81       	ldd	r18, Z+3	; 0x03
    49d8:	21 fd       	sbrc	r18, 1
    49da:	03 c0       	rjmp	.+6      	; 0x49e2 <fputc+0x16>
    49dc:	8f ef       	ldi	r24, 0xFF	; 255
    49de:	9f ef       	ldi	r25, 0xFF	; 255
    49e0:	2c c0       	rjmp	.+88     	; 0x4a3a <fputc+0x6e>
    49e2:	22 ff       	sbrs	r18, 2
    49e4:	16 c0       	rjmp	.+44     	; 0x4a12 <fputc+0x46>
    49e6:	46 81       	ldd	r20, Z+6	; 0x06
    49e8:	57 81       	ldd	r21, Z+7	; 0x07
    49ea:	24 81       	ldd	r18, Z+4	; 0x04
    49ec:	35 81       	ldd	r19, Z+5	; 0x05
    49ee:	42 17       	cp	r20, r18
    49f0:	53 07       	cpc	r21, r19
    49f2:	44 f4       	brge	.+16     	; 0x4a04 <fputc+0x38>
    49f4:	a0 81       	ld	r26, Z
    49f6:	b1 81       	ldd	r27, Z+1	; 0x01
    49f8:	9d 01       	movw	r18, r26
    49fa:	2f 5f       	subi	r18, 0xFF	; 255
    49fc:	3f 4f       	sbci	r19, 0xFF	; 255
    49fe:	31 83       	std	Z+1, r19	; 0x01
    4a00:	20 83       	st	Z, r18
    4a02:	8c 93       	st	X, r24
    4a04:	26 81       	ldd	r18, Z+6	; 0x06
    4a06:	37 81       	ldd	r19, Z+7	; 0x07
    4a08:	2f 5f       	subi	r18, 0xFF	; 255
    4a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a0c:	37 83       	std	Z+7, r19	; 0x07
    4a0e:	26 83       	std	Z+6, r18	; 0x06
    4a10:	14 c0       	rjmp	.+40     	; 0x4a3a <fputc+0x6e>
    4a12:	8b 01       	movw	r16, r22
    4a14:	ec 01       	movw	r28, r24
    4a16:	fb 01       	movw	r30, r22
    4a18:	00 84       	ldd	r0, Z+8	; 0x08
    4a1a:	f1 85       	ldd	r31, Z+9	; 0x09
    4a1c:	e0 2d       	mov	r30, r0
    4a1e:	09 95       	icall
    4a20:	89 2b       	or	r24, r25
    4a22:	e1 f6       	brne	.-72     	; 0x49dc <fputc+0x10>
    4a24:	d8 01       	movw	r26, r16
    4a26:	16 96       	adiw	r26, 0x06	; 6
    4a28:	8d 91       	ld	r24, X+
    4a2a:	9c 91       	ld	r25, X
    4a2c:	17 97       	sbiw	r26, 0x07	; 7
    4a2e:	01 96       	adiw	r24, 0x01	; 1
    4a30:	17 96       	adiw	r26, 0x07	; 7
    4a32:	9c 93       	st	X, r25
    4a34:	8e 93       	st	-X, r24
    4a36:	16 97       	sbiw	r26, 0x06	; 6
    4a38:	ce 01       	movw	r24, r28
    4a3a:	df 91       	pop	r29
    4a3c:	cf 91       	pop	r28
    4a3e:	1f 91       	pop	r17
    4a40:	0f 91       	pop	r16
    4a42:	08 95       	ret

00004a44 <__ultoa_invert>:
    4a44:	fa 01       	movw	r30, r20
    4a46:	aa 27       	eor	r26, r26
    4a48:	28 30       	cpi	r18, 0x08	; 8
    4a4a:	51 f1       	breq	.+84     	; 0x4aa0 <__ultoa_invert+0x5c>
    4a4c:	20 31       	cpi	r18, 0x10	; 16
    4a4e:	81 f1       	breq	.+96     	; 0x4ab0 <__ultoa_invert+0x6c>
    4a50:	e8 94       	clt
    4a52:	6f 93       	push	r22
    4a54:	6e 7f       	andi	r22, 0xFE	; 254
    4a56:	6e 5f       	subi	r22, 0xFE	; 254
    4a58:	7f 4f       	sbci	r23, 0xFF	; 255
    4a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a5e:	af 4f       	sbci	r26, 0xFF	; 255
    4a60:	b1 e0       	ldi	r27, 0x01	; 1
    4a62:	3e d0       	rcall	.+124    	; 0x4ae0 <__ultoa_invert+0x9c>
    4a64:	b4 e0       	ldi	r27, 0x04	; 4
    4a66:	3c d0       	rcall	.+120    	; 0x4ae0 <__ultoa_invert+0x9c>
    4a68:	67 0f       	add	r22, r23
    4a6a:	78 1f       	adc	r23, r24
    4a6c:	89 1f       	adc	r24, r25
    4a6e:	9a 1f       	adc	r25, r26
    4a70:	a1 1d       	adc	r26, r1
    4a72:	68 0f       	add	r22, r24
    4a74:	79 1f       	adc	r23, r25
    4a76:	8a 1f       	adc	r24, r26
    4a78:	91 1d       	adc	r25, r1
    4a7a:	a1 1d       	adc	r26, r1
    4a7c:	6a 0f       	add	r22, r26
    4a7e:	71 1d       	adc	r23, r1
    4a80:	81 1d       	adc	r24, r1
    4a82:	91 1d       	adc	r25, r1
    4a84:	a1 1d       	adc	r26, r1
    4a86:	20 d0       	rcall	.+64     	; 0x4ac8 <__ultoa_invert+0x84>
    4a88:	09 f4       	brne	.+2      	; 0x4a8c <__ultoa_invert+0x48>
    4a8a:	68 94       	set
    4a8c:	3f 91       	pop	r19
    4a8e:	2a e0       	ldi	r18, 0x0A	; 10
    4a90:	26 9f       	mul	r18, r22
    4a92:	11 24       	eor	r1, r1
    4a94:	30 19       	sub	r19, r0
    4a96:	30 5d       	subi	r19, 0xD0	; 208
    4a98:	31 93       	st	Z+, r19
    4a9a:	de f6       	brtc	.-74     	; 0x4a52 <__ultoa_invert+0xe>
    4a9c:	cf 01       	movw	r24, r30
    4a9e:	08 95       	ret
    4aa0:	46 2f       	mov	r20, r22
    4aa2:	47 70       	andi	r20, 0x07	; 7
    4aa4:	40 5d       	subi	r20, 0xD0	; 208
    4aa6:	41 93       	st	Z+, r20
    4aa8:	b3 e0       	ldi	r27, 0x03	; 3
    4aaa:	0f d0       	rcall	.+30     	; 0x4aca <__ultoa_invert+0x86>
    4aac:	c9 f7       	brne	.-14     	; 0x4aa0 <__ultoa_invert+0x5c>
    4aae:	f6 cf       	rjmp	.-20     	; 0x4a9c <__ultoa_invert+0x58>
    4ab0:	46 2f       	mov	r20, r22
    4ab2:	4f 70       	andi	r20, 0x0F	; 15
    4ab4:	40 5d       	subi	r20, 0xD0	; 208
    4ab6:	4a 33       	cpi	r20, 0x3A	; 58
    4ab8:	18 f0       	brcs	.+6      	; 0x4ac0 <__ultoa_invert+0x7c>
    4aba:	49 5d       	subi	r20, 0xD9	; 217
    4abc:	31 fd       	sbrc	r19, 1
    4abe:	40 52       	subi	r20, 0x20	; 32
    4ac0:	41 93       	st	Z+, r20
    4ac2:	02 d0       	rcall	.+4      	; 0x4ac8 <__ultoa_invert+0x84>
    4ac4:	a9 f7       	brne	.-22     	; 0x4ab0 <__ultoa_invert+0x6c>
    4ac6:	ea cf       	rjmp	.-44     	; 0x4a9c <__ultoa_invert+0x58>
    4ac8:	b4 e0       	ldi	r27, 0x04	; 4
    4aca:	a6 95       	lsr	r26
    4acc:	97 95       	ror	r25
    4ace:	87 95       	ror	r24
    4ad0:	77 95       	ror	r23
    4ad2:	67 95       	ror	r22
    4ad4:	ba 95       	dec	r27
    4ad6:	c9 f7       	brne	.-14     	; 0x4aca <__ultoa_invert+0x86>
    4ad8:	00 97       	sbiw	r24, 0x00	; 0
    4ada:	61 05       	cpc	r22, r1
    4adc:	71 05       	cpc	r23, r1
    4ade:	08 95       	ret
    4ae0:	9b 01       	movw	r18, r22
    4ae2:	ac 01       	movw	r20, r24
    4ae4:	0a 2e       	mov	r0, r26
    4ae6:	06 94       	lsr	r0
    4ae8:	57 95       	ror	r21
    4aea:	47 95       	ror	r20
    4aec:	37 95       	ror	r19
    4aee:	27 95       	ror	r18
    4af0:	ba 95       	dec	r27
    4af2:	c9 f7       	brne	.-14     	; 0x4ae6 <__ultoa_invert+0xa2>
    4af4:	62 0f       	add	r22, r18
    4af6:	73 1f       	adc	r23, r19
    4af8:	84 1f       	adc	r24, r20
    4afa:	95 1f       	adc	r25, r21
    4afc:	a0 1d       	adc	r26, r0
    4afe:	08 95       	ret

00004b00 <__prologue_saves__>:
    4b00:	2f 92       	push	r2
    4b02:	3f 92       	push	r3
    4b04:	4f 92       	push	r4
    4b06:	5f 92       	push	r5
    4b08:	6f 92       	push	r6
    4b0a:	7f 92       	push	r7
    4b0c:	8f 92       	push	r8
    4b0e:	9f 92       	push	r9
    4b10:	af 92       	push	r10
    4b12:	bf 92       	push	r11
    4b14:	cf 92       	push	r12
    4b16:	df 92       	push	r13
    4b18:	ef 92       	push	r14
    4b1a:	ff 92       	push	r15
    4b1c:	0f 93       	push	r16
    4b1e:	1f 93       	push	r17
    4b20:	cf 93       	push	r28
    4b22:	df 93       	push	r29
    4b24:	cd b7       	in	r28, 0x3d	; 61
    4b26:	de b7       	in	r29, 0x3e	; 62
    4b28:	ca 1b       	sub	r28, r26
    4b2a:	db 0b       	sbc	r29, r27
    4b2c:	0f b6       	in	r0, 0x3f	; 63
    4b2e:	f8 94       	cli
    4b30:	de bf       	out	0x3e, r29	; 62
    4b32:	0f be       	out	0x3f, r0	; 63
    4b34:	cd bf       	out	0x3d, r28	; 61
    4b36:	09 94       	ijmp

00004b38 <__epilogue_restores__>:
    4b38:	2a 88       	ldd	r2, Y+18	; 0x12
    4b3a:	39 88       	ldd	r3, Y+17	; 0x11
    4b3c:	48 88       	ldd	r4, Y+16	; 0x10
    4b3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b40:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b42:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b44:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b46:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b48:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b4a:	b9 84       	ldd	r11, Y+9	; 0x09
    4b4c:	c8 84       	ldd	r12, Y+8	; 0x08
    4b4e:	df 80       	ldd	r13, Y+7	; 0x07
    4b50:	ee 80       	ldd	r14, Y+6	; 0x06
    4b52:	fd 80       	ldd	r15, Y+5	; 0x05
    4b54:	0c 81       	ldd	r16, Y+4	; 0x04
    4b56:	1b 81       	ldd	r17, Y+3	; 0x03
    4b58:	aa 81       	ldd	r26, Y+2	; 0x02
    4b5a:	b9 81       	ldd	r27, Y+1	; 0x01
    4b5c:	ce 0f       	add	r28, r30
    4b5e:	d1 1d       	adc	r29, r1
    4b60:	0f b6       	in	r0, 0x3f	; 63
    4b62:	f8 94       	cli
    4b64:	de bf       	out	0x3e, r29	; 62
    4b66:	0f be       	out	0x3f, r0	; 63
    4b68:	cd bf       	out	0x3d, r28	; 61
    4b6a:	ed 01       	movw	r28, r26
    4b6c:	08 95       	ret

00004b6e <_exit>:
    4b6e:	f8 94       	cli

00004b70 <__stop_program>:
    4b70:	ff cf       	rjmp	.-2      	; 0x4b70 <__stop_program>
