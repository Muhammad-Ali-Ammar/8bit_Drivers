
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  000028e0  00002954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003d8c  00000000  00000000  000029b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001dc2  00000000  00000000  00006744  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00008506  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008518  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  00008554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00008a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00008edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00008ef7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 7d 09 	call	0x12fa	; 0x12fa <main>
      7a:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Convert_IntToString>:
      82:	cf 93       	push	r28
      84:	df 93       	push	r29
      86:	00 d0       	rcall	.+0      	; 0x88 <Convert_IntToString+0x6>
      88:	00 d0       	rcall	.+0      	; 0x8a <Convert_IntToString+0x8>
      8a:	cd b7       	in	r28, 0x3d	; 61
      8c:	de b7       	in	r29, 0x3e	; 62
      8e:	8a 83       	std	Y+2, r24	; 0x02
      90:	7c 83       	std	Y+4, r23	; 0x04
      92:	6b 83       	std	Y+3, r22	; 0x03
      94:	19 82       	std	Y+1, r1	; 0x01
      96:	8b 81       	ldd	r24, Y+3	; 0x03
      98:	9c 81       	ldd	r25, Y+4	; 0x04
      9a:	89 2b       	or	r24, r25
      9c:	19 f4       	brne	.+6      	; 0xa4 <Convert_IntToString+0x22>
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	19 c0       	rjmp	.+50     	; 0xd6 <Convert_IntToString+0x54>
      a4:	8a 81       	ldd	r24, Y+2	; 0x02
      a6:	88 2f       	mov	r24, r24
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	29 2f       	mov	r18, r25
      ac:	2f 93       	push	r18
      ae:	8f 93       	push	r24
      b0:	8f ea       	ldi	r24, 0xAF	; 175
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	89 2f       	mov	r24, r25
      b6:	8f 93       	push	r24
      b8:	8f ea       	ldi	r24, 0xAF	; 175
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	8f 93       	push	r24
      be:	8c 81       	ldd	r24, Y+4	; 0x04
      c0:	8f 93       	push	r24
      c2:	8b 81       	ldd	r24, Y+3	; 0x03
      c4:	8f 93       	push	r24
      c6:	0e 94 84 11 	call	0x2308	; 0x2308 <sprintf>
      ca:	0f 90       	pop	r0
      cc:	0f 90       	pop	r0
      ce:	0f 90       	pop	r0
      d0:	0f 90       	pop	r0
      d2:	0f 90       	pop	r0
      d4:	0f 90       	pop	r0
      d6:	89 81       	ldd	r24, Y+1	; 0x01
      d8:	0f 90       	pop	r0
      da:	0f 90       	pop	r0
      dc:	0f 90       	pop	r0
      de:	0f 90       	pop	r0
      e0:	df 91       	pop	r29
      e2:	cf 91       	pop	r28
      e4:	08 95       	ret

000000e6 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u8Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f32 Copy_f32Number, pu8 Address_str){
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
      ee:	27 97       	sbiw	r28, 0x07	; 7
      f0:	0f b6       	in	r0, 0x3f	; 63
      f2:	f8 94       	cli
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	0f be       	out	0x3f, r0	; 63
      f8:	cd bf       	out	0x3d, r28	; 61
      fa:	6a 83       	std	Y+2, r22	; 0x02
      fc:	7b 83       	std	Y+3, r23	; 0x03
      fe:	8c 83       	std	Y+4, r24	; 0x04
     100:	9d 83       	std	Y+5, r25	; 0x05
     102:	5f 83       	std	Y+7, r21	; 0x07
     104:	4e 83       	std	Y+6, r20	; 0x06


	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     106:	19 82       	std	Y+1, r1	; 0x01
		if(NULL == Address_str){
     108:	8e 81       	ldd	r24, Y+6	; 0x06
     10a:	9f 81       	ldd	r25, Y+7	; 0x07
     10c:	89 2b       	or	r24, r25
     10e:	19 f4       	brne	.+6      	; 0x116 <Convert_FloatToString+0x30>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	89 83       	std	Y+1, r24	; 0x01
     114:	1d c0       	rjmp	.+58     	; 0x150 <Convert_FloatToString+0x6a>
		}

		else{

			sprintf(Address_str, "%f", Copy_f32Number);
     116:	8d 81       	ldd	r24, Y+5	; 0x05
     118:	8f 93       	push	r24
     11a:	8c 81       	ldd	r24, Y+4	; 0x04
     11c:	8f 93       	push	r24
     11e:	8b 81       	ldd	r24, Y+3	; 0x03
     120:	8f 93       	push	r24
     122:	8a 81       	ldd	r24, Y+2	; 0x02
     124:	8f 93       	push	r24
     126:	83 eb       	ldi	r24, 0xB3	; 179
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	89 2f       	mov	r24, r25
     12c:	8f 93       	push	r24
     12e:	83 eb       	ldi	r24, 0xB3	; 179
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	8f 93       	push	r24
     134:	8f 81       	ldd	r24, Y+7	; 0x07
     136:	8f 93       	push	r24
     138:	8e 81       	ldd	r24, Y+6	; 0x06
     13a:	8f 93       	push	r24
     13c:	0e 94 84 11 	call	0x2308	; 0x2308 <sprintf>
     140:	8d b7       	in	r24, 0x3d	; 61
     142:	9e b7       	in	r25, 0x3e	; 62
     144:	08 96       	adiw	r24, 0x08	; 8
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
		}

		return Loc_enuStatus;
     150:	89 81       	ldd	r24, Y+1	; 0x01


}
     152:	27 96       	adiw	r28, 0x07	; 7
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	f8 94       	cli
     158:	de bf       	out	0x3e, r29	; 62
     15a:	0f be       	out	0x3f, r0	; 63
     15c:	cd bf       	out	0x3d, r28	; 61
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	08 95       	ret

00000164 <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     16c:	8a e3       	ldi	r24, 0x3A	; 58
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	2c e0       	ldi	r18, 0x0C	; 12
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     176:	87 e3       	ldi	r24, 0x37	; 55
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	27 e1       	ldi	r18, 0x17	; 23
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     180:	84 e3       	ldi	r24, 0x34	; 52
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	10 82       	st	Z, r1

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     188:	81 e3       	ldi	r24, 0x31	; 49
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	fc 01       	movw	r30, r24
     18e:	10 82       	st	Z, r1

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     190:	8b e3       	ldi	r24, 0x3B	; 59
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     198:	88 e3       	ldi	r24, 0x38	; 56
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	10 82       	st	Z, r1
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     1a0:	85 e3       	ldi	r24, 0x35	; 53
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	fc 01       	movw	r30, r24
     1a6:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     1a8:	82 e3       	ldi	r24, 0x32	; 50
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	10 82       	st	Z, r1
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
     1b0:	00 00       	nop
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <Port_enuSetPinDirection+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <Port_enuSetPinDirection+0x8>
     1c0:	1f 92       	push	r1
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	8c 83       	std	Y+4, r24	; 0x04
     1c8:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     1ca:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     1cc:	8c 81       	ldd	r24, Y+4	; 0x04
     1ce:	87 70       	andi	r24, 0x07	; 7
     1d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     1d2:	8c 81       	ldd	r24, Y+4	; 0x04
     1d4:	86 95       	lsr	r24
     1d6:	86 95       	lsr	r24
     1d8:	86 95       	lsr	r24
     1da:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     1dc:	8c 81       	ldd	r24, Y+4	; 0x04
     1de:	80 32       	cpi	r24, 0x20	; 32
     1e0:	18 f0       	brcs	.+6      	; 0x1e8 <Port_enuSetPinDirection+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	89 83       	std	Y+1, r24	; 0x01
     1e6:	59 c0       	rjmp	.+178    	; 0x29a <Port_enuSetPinDirection+0xe2>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	82 30       	cpi	r24, 0x02	; 2
     1ec:	18 f0       	brcs	.+6      	; 0x1f4 <Port_enuSetPinDirection+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	53 c0       	rjmp	.+166    	; 0x29a <Port_enuSetPinDirection+0xe2>
		}

	else{

			switch(Copy_u8PinDirection){
     1f4:	8d 81       	ldd	r24, Y+5	; 0x05
     1f6:	88 2f       	mov	r24, r24
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	00 97       	sbiw	r24, 0x00	; 0
     1fc:	41 f1       	breq	.+80     	; 0x24e <Port_enuSetPinDirection+0x96>
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	09 f0       	breq	.+2      	; 0x204 <Port_enuSetPinDirection+0x4c>
							break;

			default:

				// impossible
					break;
     202:	4b c0       	rjmp	.+150    	; 0x29a <Port_enuSetPinDirection+0xe2>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     204:	8b 81       	ldd	r24, Y+3	; 0x03
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	88 0f       	add	r24, r24
     20c:	99 1f       	adc	r25, r25
     20e:	80 5a       	subi	r24, 0xA0	; 160
     210:	9f 4f       	sbci	r25, 0xFF	; 255
     212:	fc 01       	movw	r30, r24
     214:	80 81       	ld	r24, Z
     216:	91 81       	ldd	r25, Z+1	; 0x01
     218:	2b 81       	ldd	r18, Y+3	; 0x03
     21a:	22 2f       	mov	r18, r18
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	20 5a       	subi	r18, 0xA0	; 160
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	f9 01       	movw	r30, r18
     228:	20 81       	ld	r18, Z
     22a:	31 81       	ldd	r19, Z+1	; 0x01
     22c:	f9 01       	movw	r30, r18
     22e:	20 81       	ld	r18, Z
     230:	62 2f       	mov	r22, r18
     232:	2a 81       	ldd	r18, Y+2	; 0x02
     234:	42 2f       	mov	r20, r18
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	21 e0       	ldi	r18, 0x01	; 1
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	02 c0       	rjmp	.+4      	; 0x242 <Port_enuSetPinDirection+0x8a>
     23e:	22 0f       	add	r18, r18
     240:	33 1f       	adc	r19, r19
     242:	4a 95       	dec	r20
     244:	e2 f7       	brpl	.-8      	; 0x23e <Port_enuSetPinDirection+0x86>
     246:	26 2b       	or	r18, r22
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
					break;
     24c:	26 c0       	rjmp	.+76     	; 0x29a <Port_enuSetPinDirection+0xe2>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	80 5a       	subi	r24, 0xA0	; 160
     25a:	9f 4f       	sbci	r25, 0xFF	; 255
     25c:	fc 01       	movw	r30, r24
     25e:	80 81       	ld	r24, Z
     260:	91 81       	ldd	r25, Z+1	; 0x01
     262:	2b 81       	ldd	r18, Y+3	; 0x03
     264:	22 2f       	mov	r18, r18
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	22 0f       	add	r18, r18
     26a:	33 1f       	adc	r19, r19
     26c:	20 5a       	subi	r18, 0xA0	; 160
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	f9 01       	movw	r30, r18
     272:	20 81       	ld	r18, Z
     274:	31 81       	ldd	r19, Z+1	; 0x01
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	62 2f       	mov	r22, r18
     27c:	2a 81       	ldd	r18, Y+2	; 0x02
     27e:	42 2f       	mov	r20, r18
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	21 e0       	ldi	r18, 0x01	; 1
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <Port_enuSetPinDirection+0xd4>
     288:	22 0f       	add	r18, r18
     28a:	33 1f       	adc	r19, r19
     28c:	4a 95       	dec	r20
     28e:	e2 f7       	brpl	.-8      	; 0x288 <Port_enuSetPinDirection+0xd0>
     290:	20 95       	com	r18
     292:	26 23       	and	r18, r22
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18
							break;
     298:	00 00       	nop

	}



	return Loc_enuState;
     29a:	89 81       	ldd	r24, Y+1	; 0x01
}
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <Port_enuSetPinMode+0x6>
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <Port_enuSetPinMode+0x8>
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	8c 83       	std	Y+4, r24	; 0x04
     2bc:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     2be:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     2c0:	8c 81       	ldd	r24, Y+4	; 0x04
     2c2:	87 70       	andi	r24, 0x07	; 7
     2c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     2c6:	8c 81       	ldd	r24, Y+4	; 0x04
     2c8:	86 95       	lsr	r24
     2ca:	86 95       	lsr	r24
     2cc:	86 95       	lsr	r24
     2ce:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     2d0:	8c 81       	ldd	r24, Y+4	; 0x04
     2d2:	80 32       	cpi	r24, 0x20	; 32
     2d4:	18 f0       	brcs	.+6      	; 0x2dc <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	43 c1       	rjmp	.+646    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
     2dc:	8d 81       	ldd	r24, Y+5	; 0x05
     2de:	84 30       	cpi	r24, 0x04	; 4
     2e0:	18 f0       	brcs	.+6      	; 0x2e8 <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	89 83       	std	Y+1, r24	; 0x01
     2e6:	3d c1       	rjmp	.+634    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
		}

	else{

			switch(Copy_u8PinMode){
     2e8:	8d 81       	ldd	r24, Y+5	; 0x05
     2ea:	88 2f       	mov	r24, r24
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	91 05       	cpc	r25, r1
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <Port_enuSetPinMode+0x4a>
     2f4:	57 c0       	rjmp	.+174    	; 0x3a4 <Port_enuSetPinMode+0xf8>
     2f6:	82 30       	cpi	r24, 0x02	; 2
     2f8:	91 05       	cpc	r25, r1
     2fa:	1c f4       	brge	.+6      	; 0x302 <Port_enuSetPinMode+0x56>
     2fc:	89 2b       	or	r24, r25
     2fe:	49 f0       	breq	.+18     	; 0x312 <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
     300:	30 c1       	rjmp	.+608    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
     302:	82 30       	cpi	r24, 0x02	; 2
     304:	91 05       	cpc	r25, r1
     306:	09 f4       	brne	.+2      	; 0x30a <Port_enuSetPinMode+0x5e>
     308:	97 c0       	rjmp	.+302    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     30a:	03 97       	sbiw	r24, 0x03	; 3
     30c:	09 f4       	brne	.+2      	; 0x310 <Port_enuSetPinMode+0x64>
     30e:	df c0       	rjmp	.+446    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>


			default:

				// impossible
					break;
     310:	28 c1       	rjmp	.+592    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	88 2f       	mov	r24, r24
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	80 5a       	subi	r24, 0xA0	; 160
     31e:	9f 4f       	sbci	r25, 0xFF	; 255
     320:	fc 01       	movw	r30, r24
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	2b 81       	ldd	r18, Y+3	; 0x03
     328:	22 2f       	mov	r18, r18
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	22 0f       	add	r18, r18
     32e:	33 1f       	adc	r19, r19
     330:	20 5a       	subi	r18, 0xA0	; 160
     332:	3f 4f       	sbci	r19, 0xFF	; 255
     334:	f9 01       	movw	r30, r18
     336:	20 81       	ld	r18, Z
     338:	31 81       	ldd	r19, Z+1	; 0x01
     33a:	f9 01       	movw	r30, r18
     33c:	20 81       	ld	r18, Z
     33e:	62 2f       	mov	r22, r18
     340:	2a 81       	ldd	r18, Y+2	; 0x02
     342:	42 2f       	mov	r20, r18
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	21 e0       	ldi	r18, 0x01	; 1
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	02 c0       	rjmp	.+4      	; 0x350 <Port_enuSetPinMode+0xa4>
     34c:	22 0f       	add	r18, r18
     34e:	33 1f       	adc	r19, r19
     350:	4a 95       	dec	r20
     352:	e2 f7       	brpl	.-8      	; 0x34c <Port_enuSetPinMode+0xa0>
     354:	26 2b       	or	r18, r22
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	88 2f       	mov	r24, r24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	88 59       	subi	r24, 0x98	; 152
     366:	9f 4f       	sbci	r25, 0xFF	; 255
     368:	fc 01       	movw	r30, r24
     36a:	80 81       	ld	r24, Z
     36c:	91 81       	ldd	r25, Z+1	; 0x01
     36e:	2b 81       	ldd	r18, Y+3	; 0x03
     370:	22 2f       	mov	r18, r18
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	22 0f       	add	r18, r18
     376:	33 1f       	adc	r19, r19
     378:	28 59       	subi	r18, 0x98	; 152
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	f9 01       	movw	r30, r18
     37e:	20 81       	ld	r18, Z
     380:	31 81       	ldd	r19, Z+1	; 0x01
     382:	f9 01       	movw	r30, r18
     384:	20 81       	ld	r18, Z
     386:	62 2f       	mov	r22, r18
     388:	2a 81       	ldd	r18, Y+2	; 0x02
     38a:	42 2f       	mov	r20, r18
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	21 e0       	ldi	r18, 0x01	; 1
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <Port_enuSetPinMode+0xec>
     394:	22 0f       	add	r18, r18
     396:	33 1f       	adc	r19, r19
     398:	4a 95       	dec	r20
     39a:	e2 f7       	brpl	.-8      	; 0x394 <Port_enuSetPinMode+0xe8>
     39c:	26 2b       	or	r18, r22
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
					break;
     3a2:	df c0       	rjmp	.+446    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     3a4:	8b 81       	ldd	r24, Y+3	; 0x03
     3a6:	88 2f       	mov	r24, r24
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	80 5a       	subi	r24, 0xA0	; 160
     3b0:	9f 4f       	sbci	r25, 0xFF	; 255
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	91 81       	ldd	r25, Z+1	; 0x01
     3b8:	2b 81       	ldd	r18, Y+3	; 0x03
     3ba:	22 2f       	mov	r18, r18
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	22 0f       	add	r18, r18
     3c0:	33 1f       	adc	r19, r19
     3c2:	20 5a       	subi	r18, 0xA0	; 160
     3c4:	3f 4f       	sbci	r19, 0xFF	; 255
     3c6:	f9 01       	movw	r30, r18
     3c8:	20 81       	ld	r18, Z
     3ca:	31 81       	ldd	r19, Z+1	; 0x01
     3cc:	f9 01       	movw	r30, r18
     3ce:	20 81       	ld	r18, Z
     3d0:	62 2f       	mov	r22, r18
     3d2:	2a 81       	ldd	r18, Y+2	; 0x02
     3d4:	42 2f       	mov	r20, r18
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <Port_enuSetPinMode+0x136>
     3de:	22 0f       	add	r18, r18
     3e0:	33 1f       	adc	r19, r19
     3e2:	4a 95       	dec	r20
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <Port_enuSetPinMode+0x132>
     3e6:	26 2b       	or	r18, r22
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     3ec:	8b 81       	ldd	r24, Y+3	; 0x03
     3ee:	88 2f       	mov	r24, r24
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	88 59       	subi	r24, 0x98	; 152
     3f8:	9f 4f       	sbci	r25, 0xFF	; 255
     3fa:	fc 01       	movw	r30, r24
     3fc:	80 81       	ld	r24, Z
     3fe:	91 81       	ldd	r25, Z+1	; 0x01
     400:	2b 81       	ldd	r18, Y+3	; 0x03
     402:	22 2f       	mov	r18, r18
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	22 0f       	add	r18, r18
     408:	33 1f       	adc	r19, r19
     40a:	28 59       	subi	r18, 0x98	; 152
     40c:	3f 4f       	sbci	r19, 0xFF	; 255
     40e:	f9 01       	movw	r30, r18
     410:	20 81       	ld	r18, Z
     412:	31 81       	ldd	r19, Z+1	; 0x01
     414:	f9 01       	movw	r30, r18
     416:	20 81       	ld	r18, Z
     418:	62 2f       	mov	r22, r18
     41a:	2a 81       	ldd	r18, Y+2	; 0x02
     41c:	42 2f       	mov	r20, r18
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	21 e0       	ldi	r18, 0x01	; 1
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	4a 95       	dec	r20
     42c:	e2 f7       	brpl	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     42e:	20 95       	com	r18
     430:	26 23       	and	r18, r22
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
							break;
     436:	95 c0       	rjmp	.+298    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	88 2f       	mov	r24, r24
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	80 5a       	subi	r24, 0xA0	; 160
     444:	9f 4f       	sbci	r25, 0xFF	; 255
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	2b 81       	ldd	r18, Y+3	; 0x03
     44e:	22 2f       	mov	r18, r18
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	22 0f       	add	r18, r18
     454:	33 1f       	adc	r19, r19
     456:	20 5a       	subi	r18, 0xA0	; 160
     458:	3f 4f       	sbci	r19, 0xFF	; 255
     45a:	f9 01       	movw	r30, r18
     45c:	20 81       	ld	r18, Z
     45e:	31 81       	ldd	r19, Z+1	; 0x01
     460:	f9 01       	movw	r30, r18
     462:	20 81       	ld	r18, Z
     464:	62 2f       	mov	r22, r18
     466:	2a 81       	ldd	r18, Y+2	; 0x02
     468:	42 2f       	mov	r20, r18
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	21 e0       	ldi	r18, 0x01	; 1
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     472:	22 0f       	add	r18, r18
     474:	33 1f       	adc	r19, r19
     476:	4a 95       	dec	r20
     478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     47a:	20 95       	com	r18
     47c:	26 23       	and	r18, r22
     47e:	fc 01       	movw	r30, r24
     480:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	88 2f       	mov	r24, r24
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	88 59       	subi	r24, 0x98	; 152
     48e:	9f 4f       	sbci	r25, 0xFF	; 255
     490:	fc 01       	movw	r30, r24
     492:	80 81       	ld	r24, Z
     494:	91 81       	ldd	r25, Z+1	; 0x01
     496:	2b 81       	ldd	r18, Y+3	; 0x03
     498:	22 2f       	mov	r18, r18
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	22 0f       	add	r18, r18
     49e:	33 1f       	adc	r19, r19
     4a0:	28 59       	subi	r18, 0x98	; 152
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	f9 01       	movw	r30, r18
     4a6:	20 81       	ld	r18, Z
     4a8:	31 81       	ldd	r19, Z+1	; 0x01
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	62 2f       	mov	r22, r18
     4b0:	2a 81       	ldd	r18, Y+2	; 0x02
     4b2:	42 2f       	mov	r20, r18
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	4a 95       	dec	r20
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4c4:	20 95       	com	r18
     4c6:	26 23       	and	r18, r22
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
								break;
     4cc:	4a c0       	rjmp	.+148    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	88 2f       	mov	r24, r24
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	80 5a       	subi	r24, 0xA0	; 160
     4da:	9f 4f       	sbci	r25, 0xFF	; 255
     4dc:	fc 01       	movw	r30, r24
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	2b 81       	ldd	r18, Y+3	; 0x03
     4e4:	22 2f       	mov	r18, r18
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	22 0f       	add	r18, r18
     4ea:	33 1f       	adc	r19, r19
     4ec:	20 5a       	subi	r18, 0xA0	; 160
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
     4f0:	f9 01       	movw	r30, r18
     4f2:	20 81       	ld	r18, Z
     4f4:	31 81       	ldd	r19, Z+1	; 0x01
     4f6:	f9 01       	movw	r30, r18
     4f8:	20 81       	ld	r18, Z
     4fa:	62 2f       	mov	r22, r18
     4fc:	2a 81       	ldd	r18, Y+2	; 0x02
     4fe:	42 2f       	mov	r20, r18
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	21 e0       	ldi	r18, 0x01	; 1
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     508:	22 0f       	add	r18, r18
     50a:	33 1f       	adc	r19, r19
     50c:	4a 95       	dec	r20
     50e:	e2 f7       	brpl	.-8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     510:	20 95       	com	r18
     512:	26 23       	and	r18, r22
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	88 2f       	mov	r24, r24
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	88 59       	subi	r24, 0x98	; 152
     524:	9f 4f       	sbci	r25, 0xFF	; 255
     526:	fc 01       	movw	r30, r24
     528:	80 81       	ld	r24, Z
     52a:	91 81       	ldd	r25, Z+1	; 0x01
     52c:	2b 81       	ldd	r18, Y+3	; 0x03
     52e:	22 2f       	mov	r18, r18
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	22 0f       	add	r18, r18
     534:	33 1f       	adc	r19, r19
     536:	28 59       	subi	r18, 0x98	; 152
     538:	3f 4f       	sbci	r19, 0xFF	; 255
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	31 81       	ldd	r19, Z+1	; 0x01
     540:	f9 01       	movw	r30, r18
     542:	20 81       	ld	r18, Z
     544:	62 2f       	mov	r22, r18
     546:	2a 81       	ldd	r18, Y+2	; 0x02
     548:	42 2f       	mov	r20, r18
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	02 c0       	rjmp	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	4a 95       	dec	r20
     558:	e2 f7       	brpl	.-8      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     55a:	26 2b       	or	r18, r22
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
								break;
     560:	00 00       	nop



	}

	return Loc_enuState;
     562:	89 81       	ldd	r24, Y+1	; 0x01
}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	00 d0       	rcall	.+0      	; 0x57a <Dio_enuWriteChannel+0x6>
     57a:	00 d0       	rcall	.+0      	; 0x57c <Dio_enuWriteChannel+0x8>
     57c:	1f 92       	push	r1
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	8c 83       	std	Y+4, r24	; 0x04
     584:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     586:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
     588:	8c 81       	ldd	r24, Y+4	; 0x04
     58a:	87 70       	andi	r24, 0x07	; 7
     58c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
     58e:	8c 81       	ldd	r24, Y+4	; 0x04
     590:	86 95       	lsr	r24
     592:	86 95       	lsr	r24
     594:	86 95       	lsr	r24
     596:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     598:	8c 81       	ldd	r24, Y+4	; 0x04
     59a:	80 32       	cpi	r24, 0x20	; 32
     59c:	18 f0       	brcs	.+6      	; 0x5a4 <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	4e c0       	rjmp	.+156    	; 0x640 <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	88 2f       	mov	r24, r24
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	80 59       	subi	r24, 0x90	; 144
     5b0:	9f 4f       	sbci	r25, 0xFF	; 255
     5b2:	fc 01       	movw	r30, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	91 81       	ldd	r25, Z+1	; 0x01
     5b8:	fc 01       	movw	r30, r24
     5ba:	80 81       	ld	r24, Z
     5bc:	88 2f       	mov	r24, r24
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	2a 81       	ldd	r18, Y+2	; 0x02
     5c2:	22 2f       	mov	r18, r18
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <Dio_enuWriteChannel+0x58>
     5c8:	95 95       	asr	r25
     5ca:	87 95       	ror	r24
     5cc:	2a 95       	dec	r18
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <Dio_enuWriteChannel+0x54>
     5d0:	81 70       	andi	r24, 0x01	; 1
     5d2:	99 27       	eor	r25, r25
     5d4:	89 2b       	or	r24, r25
     5d6:	19 f4       	brne	.+6      	; 0x5de <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	31 c0       	rjmp	.+98     	; 0x640 <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	88 2f       	mov	r24, r24
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	88 58       	subi	r24, 0x88	; 136
     5ea:	9f 4f       	sbci	r25, 0xFF	; 255
     5ec:	fc 01       	movw	r30, r24
     5ee:	80 81       	ld	r24, Z
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	2b 81       	ldd	r18, Y+3	; 0x03
     5f4:	22 2f       	mov	r18, r18
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	22 0f       	add	r18, r18
     5fa:	33 1f       	adc	r19, r19
     5fc:	28 58       	subi	r18, 0x88	; 136
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	31 81       	ldd	r19, Z+1	; 0x01
     606:	f9 01       	movw	r30, r18
     608:	20 81       	ld	r18, Z
     60a:	62 2f       	mov	r22, r18
     60c:	2a 81       	ldd	r18, Y+2	; 0x02
     60e:	42 2f       	mov	r20, r18
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	21 e0       	ldi	r18, 0x01	; 1
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	02 c0       	rjmp	.+4      	; 0x61c <Dio_enuWriteChannel+0xa8>
     618:	22 0f       	add	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	4a 95       	dec	r20
     61e:	e2 f7       	brpl	.-8      	; 0x618 <Dio_enuWriteChannel+0xa4>
     620:	20 95       	com	r18
     622:	62 23       	and	r22, r18
     624:	2d 81       	ldd	r18, Y+5	; 0x05
     626:	22 2f       	mov	r18, r18
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	4a 81       	ldd	r20, Y+2	; 0x02
     62c:	44 2f       	mov	r20, r20
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <Dio_enuWriteChannel+0xc2>
     632:	22 0f       	add	r18, r18
     634:	33 1f       	adc	r19, r19
     636:	4a 95       	dec	r20
     638:	e2 f7       	brpl	.-8      	; 0x632 <Dio_enuWriteChannel+0xbe>
     63a:	26 2b       	or	r18, r22
     63c:	fc 01       	movw	r30, r24
     63e:	20 83       	st	Z, r18

}

	return Loc_enuState;
     640:	89 81       	ldd	r24, Y+1	; 0x01
}
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	00 d0       	rcall	.+0      	; 0x658 <Dio_enuReadChannel+0x6>
     658:	00 d0       	rcall	.+0      	; 0x65a <Dio_enuReadChannel+0x8>
     65a:	00 d0       	rcall	.+0      	; 0x65c <Dio_enuReadChannel+0xa>
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	8c 83       	std	Y+4, r24	; 0x04
     662:	7e 83       	std	Y+6, r23	; 0x06
     664:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     666:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     668:	8c 81       	ldd	r24, Y+4	; 0x04
     66a:	87 70       	andi	r24, 0x07	; 7
     66c:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     66e:	8c 81       	ldd	r24, Y+4	; 0x04
     670:	86 95       	lsr	r24
     672:	86 95       	lsr	r24
     674:	86 95       	lsr	r24
     676:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     678:	8c 81       	ldd	r24, Y+4	; 0x04
     67a:	80 32       	cpi	r24, 0x20	; 32
     67c:	18 f0       	brcs	.+6      	; 0x684 <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	40 c0       	rjmp	.+128    	; 0x704 <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
     684:	8b 81       	ldd	r24, Y+3	; 0x03
     686:	88 2f       	mov	r24, r24
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	80 59       	subi	r24, 0x90	; 144
     690:	9f 4f       	sbci	r25, 0xFF	; 255
     692:	fc 01       	movw	r30, r24
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	fc 01       	movw	r30, r24
     69a:	80 81       	ld	r24, Z
     69c:	88 2f       	mov	r24, r24
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	2a 81       	ldd	r18, Y+2	; 0x02
     6a2:	22 2f       	mov	r18, r18
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <Dio_enuReadChannel+0x5a>
     6a8:	95 95       	asr	r25
     6aa:	87 95       	ror	r24
     6ac:	2a 95       	dec	r18
     6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <Dio_enuReadChannel+0x56>
     6b0:	81 70       	andi	r24, 0x01	; 1
     6b2:	99 27       	eor	r25, r25
     6b4:	89 2b       	or	r24, r25
     6b6:	19 f0       	breq	.+6      	; 0x6be <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	23 c0       	rjmp	.+70     	; 0x704 <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
     6be:	8d 81       	ldd	r24, Y+5	; 0x05
     6c0:	9e 81       	ldd	r25, Y+6	; 0x06
     6c2:	89 2b       	or	r24, r25
     6c4:	19 f4       	brne	.+6      	; 0x6cc <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     6c6:	84 e0       	ldi	r24, 0x04	; 4
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	1c c0       	rjmp	.+56     	; 0x704 <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	88 2f       	mov	r24, r24
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	80 58       	subi	r24, 0x80	; 128
     6d8:	9f 4f       	sbci	r25, 0xFF	; 255
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	91 81       	ldd	r25, Z+1	; 0x01
     6e0:	fc 01       	movw	r30, r24
     6e2:	80 81       	ld	r24, Z
     6e4:	88 2f       	mov	r24, r24
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	2a 81       	ldd	r18, Y+2	; 0x02
     6ea:	22 2f       	mov	r18, r18
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <Dio_enuReadChannel+0xa2>
     6f0:	95 95       	asr	r25
     6f2:	87 95       	ror	r24
     6f4:	2a 95       	dec	r18
     6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <Dio_enuReadChannel+0x9e>
     6f8:	28 2f       	mov	r18, r24
     6fa:	21 70       	andi	r18, 0x01	; 1
     6fc:	8d 81       	ldd	r24, Y+5	; 0x05
     6fe:	9e 81       	ldd	r25, Y+6	; 0x06
     700:	fc 01       	movw	r30, r24
     702:	20 83       	st	Z, r18


	}

		return Loc_enuState;
     704:	89 81       	ldd	r24, Y+1	; 0x01

}
     706:	26 96       	adiw	r28, 0x06	; 6
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f be       	out	0x3f, r0	; 63
     710:	cd bf       	out	0x3d, r28	; 61
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	00 d0       	rcall	.+0      	; 0x71e <Dio_enuWritePort+0x6>
     71e:	1f 92       	push	r1
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	8a 83       	std	Y+2, r24	; 0x02
     726:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     728:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	84 30       	cpi	r24, 0x04	; 4
     72e:	18 f0       	brcs	.+6      	; 0x736 <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	1e c0       	rjmp	.+60     	; 0x772 <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	80 59       	subi	r24, 0x90	; 144
     742:	9f 4f       	sbci	r25, 0xFF	; 255
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	91 81       	ldd	r25, Z+1	; 0x01
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	8f 3f       	cpi	r24, 0xFF	; 255
     750:	19 f0       	breq	.+6      	; 0x758 <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	0d c0       	rjmp	.+26     	; 0x772 <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
     758:	8a 81       	ldd	r24, Y+2	; 0x02
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	88 0f       	add	r24, r24
     760:	99 1f       	adc	r25, r25
     762:	88 58       	subi	r24, 0x88	; 136
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	fc 01       	movw	r30, r24
     768:	80 81       	ld	r24, Z
     76a:	91 81       	ldd	r25, Z+1	; 0x01
     76c:	2b 81       	ldd	r18, Y+3	; 0x03
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     772:	89 81       	ldd	r24, Y+1	; 0x01



}
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	00 d0       	rcall	.+0      	; 0x786 <Dio_enuReadPort+0x6>
     786:	00 d0       	rcall	.+0      	; 0x788 <Dio_enuReadPort+0x8>
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	8a 83       	std	Y+2, r24	; 0x02
     78e:	7c 83       	std	Y+4, r23	; 0x04
     790:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     792:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	84 30       	cpi	r24, 0x04	; 4
     798:	18 f0       	brcs	.+6      	; 0x7a0 <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	89 83       	std	Y+1, r24	; 0x01
     79e:	28 c0       	rjmp	.+80     	; 0x7f0 <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
     7a0:	8a 81       	ldd	r24, Y+2	; 0x02
     7a2:	88 2f       	mov	r24, r24
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	80 59       	subi	r24, 0x90	; 144
     7ac:	9f 4f       	sbci	r25, 0xFF	; 255
     7ae:	fc 01       	movw	r30, r24
     7b0:	80 81       	ld	r24, Z
     7b2:	91 81       	ldd	r25, Z+1	; 0x01
     7b4:	fc 01       	movw	r30, r24
     7b6:	80 81       	ld	r24, Z
     7b8:	88 23       	and	r24, r24
     7ba:	19 f0       	breq	.+6      	; 0x7c2 <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	89 83       	std	Y+1, r24	; 0x01
     7c0:	17 c0       	rjmp	.+46     	; 0x7f0 <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	89 2b       	or	r24, r25
     7c8:	19 f4       	brne	.+6      	; 0x7d0 <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     7ca:	84 e0       	ldi	r24, 0x04	; 4
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	10 c0       	rjmp	.+32     	; 0x7f0 <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	88 2f       	mov	r24, r24
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	80 58       	subi	r24, 0x80	; 128
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	91 81       	ldd	r25, Z+1	; 0x01
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 81       	ld	r18, Z
     7e8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ea:	9c 81       	ldd	r25, Y+4	; 0x04
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18

		}

			return Loc_enuState;
     7f0:	89 81       	ldd	r24, Y+1	; 0x01

}
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	00 d0       	rcall	.+0      	; 0x806 <Dio_enuFlipChannel+0x6>
     806:	00 d0       	rcall	.+0      	; 0x808 <Dio_enuFlipChannel+0x8>
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     80e:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     810:	8c 81       	ldd	r24, Y+4	; 0x04
     812:	87 70       	andi	r24, 0x07	; 7
     814:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     816:	8c 81       	ldd	r24, Y+4	; 0x04
     818:	86 95       	lsr	r24
     81a:	86 95       	lsr	r24
     81c:	86 95       	lsr	r24
     81e:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     820:	8c 81       	ldd	r24, Y+4	; 0x04
     822:	80 32       	cpi	r24, 0x20	; 32
     824:	18 f0       	brcs	.+6      	; 0x82c <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	89 83       	std	Y+1, r24	; 0x01
     82a:	41 c0       	rjmp	.+130    	; 0x8ae <__stack+0x4f>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	88 2f       	mov	r24, r24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	80 59       	subi	r24, 0x90	; 144
     838:	9f 4f       	sbci	r25, 0xFF	; 255
     83a:	fc 01       	movw	r30, r24
     83c:	80 81       	ld	r24, Z
     83e:	91 81       	ldd	r25, Z+1	; 0x01
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	2a 81       	ldd	r18, Y+2	; 0x02
     84a:	22 2f       	mov	r18, r18
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	02 c0       	rjmp	.+4      	; 0x854 <Dio_enuFlipChannel+0x54>
     850:	95 95       	asr	r25
     852:	87 95       	ror	r24
     854:	2a 95       	dec	r18
     856:	e2 f7       	brpl	.-8      	; 0x850 <Dio_enuFlipChannel+0x50>
     858:	81 70       	andi	r24, 0x01	; 1
     85a:	99 27       	eor	r25, r25
     85c:	89 2b       	or	r24, r25
     85e:	19 f4       	brne	.+6      	; 0x866 <__stack+0x7>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	24 c0       	rjmp	.+72     	; 0x8ae <__stack+0x4f>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PinNumber]), Loc_PinNumber);
     866:	8a 81       	ldd	r24, Y+2	; 0x02
     868:	88 2f       	mov	r24, r24
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	88 58       	subi	r24, 0x88	; 136
     872:	9f 4f       	sbci	r25, 0xFF	; 255
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	2a 81       	ldd	r18, Y+2	; 0x02
     87c:	22 2f       	mov	r18, r18
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	28 58       	subi	r18, 0x88	; 136
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	f9 01       	movw	r30, r18
     88a:	20 81       	ld	r18, Z
     88c:	31 81       	ldd	r19, Z+1	; 0x01
     88e:	f9 01       	movw	r30, r18
     890:	20 81       	ld	r18, Z
     892:	62 2f       	mov	r22, r18
     894:	2a 81       	ldd	r18, Y+2	; 0x02
     896:	42 2f       	mov	r20, r18
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	21 e0       	ldi	r18, 0x01	; 1
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
     8a0:	22 0f       	add	r18, r18
     8a2:	33 1f       	adc	r19, r19
     8a4:	4a 95       	dec	r20
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
     8a8:	26 27       	eor	r18, r22
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
}
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	e1 97       	sbiw	r28, 0x31	; 49
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	99 ab       	std	Y+49, r25	; 0x31
     8d4:	88 ab       	std	Y+48, r24	; 0x30

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     8d6:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
     8d8:	88 a9       	ldd	r24, Y+48	; 0x30
     8da:	99 a9       	ldd	r25, Y+49	; 0x31
     8dc:	89 2b       	or	r24, r25
     8de:	19 f4       	brne	.+6      	; 0x8e6 <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     8e0:	82 e0       	ldi	r24, 0x02	; 2
     8e2:	89 83       	std	Y+1, r24	; 0x01
     8e4:	97 c1       	rjmp	.+814    	; 0xc14 <Lcd_4bit_enuInit+0x356>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
     8e6:	88 a9       	ldd	r24, Y+48	; 0x30
     8e8:	99 a9       	ldd	r25, Y+49	; 0x31
     8ea:	68 e3       	ldi	r22, 0x38	; 56
     8ec:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     8f0:	89 83       	std	Y+1, r24	; 0x01
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	a0 ea       	ldi	r26, 0xA0	; 160
     8f8:	b0 e4       	ldi	r27, 0x40	; 64
     8fa:	8a 83       	std	Y+2, r24	; 0x02
     8fc:	9b 83       	std	Y+3, r25	; 0x03
     8fe:	ac 83       	std	Y+4, r26	; 0x04
     900:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	4a ef       	ldi	r20, 0xFA	; 250
     908:	54 e4       	ldi	r21, 0x44	; 68
     90a:	6a 81       	ldd	r22, Y+2	; 0x02
     90c:	7b 81       	ldd	r23, Y+3	; 0x03
     90e:	8c 81       	ldd	r24, Y+4	; 0x04
     910:	9d 81       	ldd	r25, Y+5	; 0x05
     912:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	8e a3       	std	Y+38, r24	; 0x26
     91c:	9f a3       	std	Y+39, r25	; 0x27
     91e:	a8 a7       	std	Y+40, r26	; 0x28
     920:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e8       	ldi	r20, 0x80	; 128
     928:	5f e3       	ldi	r21, 0x3F	; 63
     92a:	6e a1       	ldd	r22, Y+38	; 0x26
     92c:	7f a1       	ldd	r23, Y+39	; 0x27
     92e:	88 a5       	ldd	r24, Y+40	; 0x28
     930:	99 a5       	ldd	r25, Y+41	; 0x29
     932:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
     936:	88 23       	and	r24, r24
     938:	2c f4       	brge	.+10     	; 0x944 <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	9b a7       	std	Y+43, r25	; 0x2b
     940:	8a a7       	std	Y+42, r24	; 0x2a
     942:	3f c0       	rjmp	.+126    	; 0x9c2 <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	3f ef       	ldi	r19, 0xFF	; 255
     948:	4f e7       	ldi	r20, 0x7F	; 127
     94a:	57 e4       	ldi	r21, 0x47	; 71
     94c:	6e a1       	ldd	r22, Y+38	; 0x26
     94e:	7f a1       	ldd	r23, Y+39	; 0x27
     950:	88 a5       	ldd	r24, Y+40	; 0x28
     952:	99 a5       	ldd	r25, Y+41	; 0x29
     954:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
     958:	18 16       	cp	r1, r24
     95a:	4c f5       	brge	.+82     	; 0x9ae <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e2       	ldi	r20, 0x20	; 32
     962:	51 e4       	ldi	r21, 0x41	; 65
     964:	6a 81       	ldd	r22, Y+2	; 0x02
     966:	7b 81       	ldd	r23, Y+3	; 0x03
     968:	8c 81       	ldd	r24, Y+4	; 0x04
     96a:	9d 81       	ldd	r25, Y+5	; 0x05
     96c:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
     970:	dc 01       	movw	r26, r24
     972:	cb 01       	movw	r24, r22
     974:	bc 01       	movw	r22, r24
     976:	cd 01       	movw	r24, r26
     978:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     97c:	dc 01       	movw	r26, r24
     97e:	cb 01       	movw	r24, r22
     980:	9b a7       	std	Y+43, r25	; 0x2b
     982:	8a a7       	std	Y+42, r24	; 0x2a
     984:	0f c0       	rjmp	.+30     	; 0x9a4 <Lcd_4bit_enuInit+0xe6>
     986:	88 ec       	ldi	r24, 0xC8	; 200
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	9d a7       	std	Y+45, r25	; 0x2d
     98c:	8c a7       	std	Y+44, r24	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     98e:	8c a5       	ldd	r24, Y+44	; 0x2c
     990:	9d a5       	ldd	r25, Y+45	; 0x2d
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <Lcd_4bit_enuInit+0xd4>
     996:	9d a7       	std	Y+45, r25	; 0x2d
     998:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     99a:	8a a5       	ldd	r24, Y+42	; 0x2a
     99c:	9b a5       	ldd	r25, Y+43	; 0x2b
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	9b a7       	std	Y+43, r25	; 0x2b
     9a2:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a4:	8a a5       	ldd	r24, Y+42	; 0x2a
     9a6:	9b a5       	ldd	r25, Y+43	; 0x2b
     9a8:	89 2b       	or	r24, r25
     9aa:	69 f7       	brne	.-38     	; 0x986 <Lcd_4bit_enuInit+0xc8>
     9ac:	14 c0       	rjmp	.+40     	; 0x9d6 <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ae:	6e a1       	ldd	r22, Y+38	; 0x26
     9b0:	7f a1       	ldd	r23, Y+39	; 0x27
     9b2:	88 a5       	ldd	r24, Y+40	; 0x28
     9b4:	99 a5       	ldd	r25, Y+41	; 0x29
     9b6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     9ba:	dc 01       	movw	r26, r24
     9bc:	cb 01       	movw	r24, r22
     9be:	9b a7       	std	Y+43, r25	; 0x2b
     9c0:	8a a7       	std	Y+42, r24	; 0x2a
     9c2:	8a a5       	ldd	r24, Y+42	; 0x2a
     9c4:	9b a5       	ldd	r25, Y+43	; 0x2b
     9c6:	9f a7       	std	Y+47, r25	; 0x2f
     9c8:	8e a7       	std	Y+46, r24	; 0x2e
     9ca:	8e a5       	ldd	r24, Y+46	; 0x2e
     9cc:	9f a5       	ldd	r25, Y+47	; 0x2f
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <Lcd_4bit_enuInit+0x110>
     9d2:	9f a7       	std	Y+47, r25	; 0x2f
     9d4:	8e a7       	std	Y+46, r24	; 0x2e
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
     9d6:	88 a9       	ldd	r24, Y+48	; 0x30
     9d8:	99 a9       	ldd	r25, Y+49	; 0x31
     9da:	68 e3       	ldi	r22, 0x38	; 56
     9dc:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     9e0:	89 83       	std	Y+1, r24	; 0x01
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a6 e1       	ldi	r26, 0x16	; 22
     9e8:	b3 e4       	ldi	r27, 0x43	; 67
     9ea:	8e 83       	std	Y+6, r24	; 0x06
     9ec:	9f 83       	std	Y+7, r25	; 0x07
     9ee:	a8 87       	std	Y+8, r26	; 0x08
     9f0:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     9f2:	2b ea       	ldi	r18, 0xAB	; 171
     9f4:	3a ea       	ldi	r19, 0xAA	; 170
     9f6:	4a e2       	ldi	r20, 0x2A	; 42
     9f8:	50 e4       	ldi	r21, 0x40	; 64
     9fa:	6e 81       	ldd	r22, Y+6	; 0x06
     9fc:	7f 81       	ldd	r23, Y+7	; 0x07
     9fe:	88 85       	ldd	r24, Y+8	; 0x08
     a00:	99 85       	ldd	r25, Y+9	; 0x09
     a02:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	8a 87       	std	Y+10, r24	; 0x0a
     a0c:	9b 87       	std	Y+11, r25	; 0x0b
     a0e:	ac 87       	std	Y+12, r26	; 0x0c
     a10:	bd 87       	std	Y+13, r27	; 0x0d
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a12:	8e 81       	ldd	r24, Y+6	; 0x06
     a14:	9f 81       	ldd	r25, Y+7	; 0x07
     a16:	a8 85       	ldd	r26, Y+8	; 0x08
     a18:	b9 85       	ldd	r27, Y+9	; 0x09
     a1a:	9c 01       	movw	r18, r24
     a1c:	ad 01       	movw	r20, r26
     a1e:	bc 01       	movw	r22, r24
     a20:	cd 01       	movw	r24, r26
     a22:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__addsf3>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	8e 87       	std	Y+14, r24	; 0x0e
     a2c:	9f 87       	std	Y+15, r25	; 0x0f
     a2e:	a8 8b       	std	Y+16, r26	; 0x10
     a30:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e8       	ldi	r20, 0x80	; 128
     a38:	5f e3       	ldi	r21, 0x3F	; 63
     a3a:	6a 85       	ldd	r22, Y+10	; 0x0a
     a3c:	7b 85       	ldd	r23, Y+11	; 0x0b
     a3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a40:	9d 85       	ldd	r25, Y+13	; 0x0d
     a42:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
     a46:	88 23       	and	r24, r24
     a48:	1c f4       	brge	.+6      	; 0xa50 <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	8a 8b       	std	Y+18, r24	; 0x12
     a4e:	b2 c0       	rjmp	.+356    	; 0xbb4 <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f e7       	ldi	r20, 0x7F	; 127
     a56:	57 e4       	ldi	r21, 0x47	; 71
     a58:	6e 85       	ldd	r22, Y+14	; 0x0e
     a5a:	7f 85       	ldd	r23, Y+15	; 0x0f
     a5c:	88 89       	ldd	r24, Y+16	; 0x10
     a5e:	99 89       	ldd	r25, Y+17	; 0x11
     a60:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
     a64:	18 16       	cp	r1, r24
     a66:	0c f0       	brlt	.+2      	; 0xa6a <Lcd_4bit_enuInit+0x1ac>
     a68:	7b c0       	rjmp	.+246    	; 0xb60 <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	4a e7       	ldi	r20, 0x7A	; 122
     a70:	54 e4       	ldi	r21, 0x44	; 68
     a72:	6e 81       	ldd	r22, Y+6	; 0x06
     a74:	7f 81       	ldd	r23, Y+7	; 0x07
     a76:	88 85       	ldd	r24, Y+8	; 0x08
     a78:	99 85       	ldd	r25, Y+9	; 0x09
     a7a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__divsf3>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	8b 8b       	std	Y+19, r24	; 0x13
     a84:	9c 8b       	std	Y+20, r25	; 0x14
     a86:	ad 8b       	std	Y+21, r26	; 0x15
     a88:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	4a ef       	ldi	r20, 0xFA	; 250
     a90:	54 e4       	ldi	r21, 0x44	; 68
     a92:	6b 89       	ldd	r22, Y+19	; 0x13
     a94:	7c 89       	ldd	r23, Y+20	; 0x14
     a96:	8d 89       	ldd	r24, Y+21	; 0x15
     a98:	9e 89       	ldd	r25, Y+22	; 0x16
     a9a:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	8f 8b       	std	Y+23, r24	; 0x17
     aa4:	98 8f       	std	Y+24, r25	; 0x18
     aa6:	a9 8f       	std	Y+25, r26	; 0x19
     aa8:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e8       	ldi	r20, 0x80	; 128
     ab0:	5f e3       	ldi	r21, 0x3F	; 63
     ab2:	6f 89       	ldd	r22, Y+23	; 0x17
     ab4:	78 8d       	ldd	r23, Y+24	; 0x18
     ab6:	89 8d       	ldd	r24, Y+25	; 0x19
     ab8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     aba:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
     abe:	88 23       	and	r24, r24
     ac0:	2c f4       	brge	.+10     	; 0xacc <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	9c 8f       	std	Y+28, r25	; 0x1c
     ac8:	8b 8f       	std	Y+27, r24	; 0x1b
     aca:	3f c0       	rjmp	.+126    	; 0xb4a <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	3f ef       	ldi	r19, 0xFF	; 255
     ad0:	4f e7       	ldi	r20, 0x7F	; 127
     ad2:	57 e4       	ldi	r21, 0x47	; 71
     ad4:	6f 89       	ldd	r22, Y+23	; 0x17
     ad6:	78 8d       	ldd	r23, Y+24	; 0x18
     ad8:	89 8d       	ldd	r24, Y+25	; 0x19
     ada:	9a 8d       	ldd	r25, Y+26	; 0x1a
     adc:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
     ae0:	18 16       	cp	r1, r24
     ae2:	4c f5       	brge	.+82     	; 0xb36 <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e2       	ldi	r20, 0x20	; 32
     aea:	51 e4       	ldi	r21, 0x41	; 65
     aec:	6b 89       	ldd	r22, Y+19	; 0x13
     aee:	7c 89       	ldd	r23, Y+20	; 0x14
     af0:	8d 89       	ldd	r24, Y+21	; 0x15
     af2:	9e 89       	ldd	r25, Y+22	; 0x16
     af4:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	bc 01       	movw	r22, r24
     afe:	cd 01       	movw	r24, r26
     b00:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	9c 8f       	std	Y+28, r25	; 0x1c
     b0a:	8b 8f       	std	Y+27, r24	; 0x1b
     b0c:	0f c0       	rjmp	.+30     	; 0xb2c <Lcd_4bit_enuInit+0x26e>
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	9e 8f       	std	Y+30, r25	; 0x1e
     b14:	8d 8f       	std	Y+29, r24	; 0x1d
     b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b18:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <Lcd_4bit_enuInit+0x25c>
     b1e:	9e 8f       	std	Y+30, r25	; 0x1e
     b20:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	9c 8f       	std	Y+28, r25	; 0x1c
     b2a:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b30:	89 2b       	or	r24, r25
     b32:	69 f7       	brne	.-38     	; 0xb0e <Lcd_4bit_enuInit+0x250>
     b34:	3f c0       	rjmp	.+126    	; 0xbb4 <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b36:	6f 89       	ldd	r22, Y+23	; 0x17
     b38:	78 8d       	ldd	r23, Y+24	; 0x18
     b3a:	89 8d       	ldd	r24, Y+25	; 0x19
     b3c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b3e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     b42:	dc 01       	movw	r26, r24
     b44:	cb 01       	movw	r24, r22
     b46:	9c 8f       	std	Y+28, r25	; 0x1c
     b48:	8b 8f       	std	Y+27, r24	; 0x1b
     b4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b4e:	98 a3       	std	Y+32, r25	; 0x20
     b50:	8f 8f       	std	Y+31, r24	; 0x1f
     b52:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b54:	98 a1       	ldd	r25, Y+32	; 0x20
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <Lcd_4bit_enuInit+0x298>
     b5a:	98 a3       	std	Y+32, r25	; 0x20
     b5c:	8f 8f       	std	Y+31, r24	; 0x1f
     b5e:	2a c0       	rjmp	.+84     	; 0xbb4 <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	4f e7       	ldi	r20, 0x7F	; 127
     b66:	53 e4       	ldi	r21, 0x43	; 67
     b68:	6a 85       	ldd	r22, Y+10	; 0x0a
     b6a:	7b 85       	ldd	r23, Y+11	; 0x0b
     b6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b70:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
     b74:	18 16       	cp	r1, r24
     b76:	ac f4       	brge	.+42     	; 0xba2 <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b78:	6e 85       	ldd	r22, Y+14	; 0x0e
     b7a:	7f 85       	ldd	r23, Y+15	; 0x0f
     b7c:	88 89       	ldd	r24, Y+16	; 0x10
     b7e:	99 89       	ldd	r25, Y+17	; 0x11
     b80:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	9a a3       	std	Y+34, r25	; 0x22
     b8a:	89 a3       	std	Y+33, r24	; 0x21
     b8c:	89 a1       	ldd	r24, Y+33	; 0x21
     b8e:	9a a1       	ldd	r25, Y+34	; 0x22
     b90:	9c a3       	std	Y+36, r25	; 0x24
     b92:	8b a3       	std	Y+35, r24	; 0x23
     b94:	8b a1       	ldd	r24, Y+35	; 0x23
     b96:	9c a1       	ldd	r25, Y+36	; 0x24
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <Lcd_4bit_enuInit+0x2da>
     b9c:	9c a3       	std	Y+36, r25	; 0x24
     b9e:	8b a3       	std	Y+35, r24	; 0x23
     ba0:	0f c0       	rjmp	.+30     	; 0xbc0 <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ba2:	6a 85       	ldd	r22, Y+10	; 0x0a
     ba4:	7b 85       	ldd	r23, Y+11	; 0x0b
     ba6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ba8:	9d 85       	ldd	r25, Y+13	; 0x0d
     baa:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	8a 8b       	std	Y+18, r24	; 0x12
     bb4:	8a 89       	ldd	r24, Y+18	; 0x12
     bb6:	8d a3       	std	Y+37, r24	; 0x25
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bb8:	8d a1       	ldd	r24, Y+37	; 0x25
     bba:	8a 95       	dec	r24
     bbc:	f1 f7       	brne	.-4      	; 0xbba <Lcd_4bit_enuInit+0x2fc>
     bbe:	8d a3       	std	Y+37, r24	; 0x25
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
     bc0:	88 a9       	ldd	r24, Y+48	; 0x30
     bc2:	99 a9       	ldd	r25, Y+49	; 0x31
     bc4:	68 e3       	ldi	r22, 0x38	; 56
     bc6:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     bca:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
     bcc:	88 a9       	ldd	r24, Y+48	; 0x30
     bce:	99 a9       	ldd	r25, Y+49	; 0x31
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     bd6:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
     bd8:	88 a9       	ldd	r24, Y+48	; 0x30
     bda:	99 a9       	ldd	r25, Y+49	; 0x31
     bdc:	62 e0       	ldi	r22, 0x02	; 2
     bde:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     be2:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
     be4:	88 a9       	ldd	r24, Y+48	; 0x30
     be6:	99 a9       	ldd	r25, Y+49	; 0x31
     be8:	66 e0       	ldi	r22, 0x06	; 6
     bea:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     bee:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
     bf0:	88 a9       	ldd	r24, Y+48	; 0x30
     bf2:	99 a9       	ldd	r25, Y+49	; 0x31
     bf4:	6c e0       	ldi	r22, 0x0C	; 12
     bf6:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     bfa:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
     bfc:	88 a9       	ldd	r24, Y+48	; 0x30
     bfe:	99 a9       	ldd	r25, Y+49	; 0x31
     c00:	68 e2       	ldi	r22, 0x28	; 40
     c02:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     c06:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
     c08:	88 a9       	ldd	r24, Y+48	; 0x30
     c0a:	99 a9       	ldd	r25, Y+49	; 0x31
     c0c:	60 e8       	ldi	r22, 0x80	; 128
     c0e:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     c12:	89 83       	std	Y+1, r24	; 0x01
	}




	return Loc_enuStatus;
     c14:	89 81       	ldd	r24, Y+1	; 0x01

}
     c16:	e1 96       	adiw	r28, 0x31	; 49
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <Lcd_4bit_enuSendCommand+0x6>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <Lcd_4bit_enuSendCommand+0x8>
     c30:	1f 92       	push	r1
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
     c3a:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     c3c:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
     c3e:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	89 2b       	or	r24, r25
     c46:	19 f4       	brne	.+6      	; 0xc4e <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	22 c0       	rjmp	.+68     	; 0xc92 <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	fc 01       	movw	r30, r24
     c54:	84 81       	ldd	r24, Z+4	; 0x04
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	0e 94 ba 02 	call	0x574	; 0x574 <Dio_enuWriteChannel>
     c5c:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
     c5e:	8d 81       	ldd	r24, Y+5	; 0x05
     c60:	28 2f       	mov	r18, r24
     c62:	22 95       	swap	r18
     c64:	2f 70       	andi	r18, 0x0F	; 15
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	9c 81       	ldd	r25, Y+4	; 0x04
     c6a:	62 2f       	mov	r22, r18
     c6c:	0e 94 22 08 	call	0x1044	; 0x1044 <Lcd_4bit_enuSet4BitsOnPins>
     c70:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	0e 94 60 08 	call	0x10c0	; 0x10c0 <Lcd_4bit_enuSendEnableSignal>
     c7a:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	6d 81       	ldd	r22, Y+5	; 0x05
     c82:	0e 94 22 08 	call	0x1044	; 0x1044 <Lcd_4bit_enuSet4BitsOnPins>
     c86:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
     c88:	8b 81       	ldd	r24, Y+3	; 0x03
     c8a:	9c 81       	ldd	r25, Y+4	; 0x04
     c8c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <Lcd_4bit_enuSendEnableSignal>
     c90:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
     c92:	89 81       	ldd	r24, Y+1	; 0x01

}
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	08 95       	ret

00000ca4 <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <Lcd_4bit_enuDisplayCharacter+0x6>
     caa:	00 d0       	rcall	.+0      	; 0xcac <Lcd_4bit_enuDisplayCharacter+0x8>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9b 83       	std	Y+3, r25	; 0x03
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     cb6:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	89 2b       	or	r24, r25
     cbe:	19 f4       	brne	.+6      	; 0xcc6 <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	22 c0       	rjmp	.+68     	; 0xd0a <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	9b 81       	ldd	r25, Y+3	; 0x03
     cca:	fc 01       	movw	r30, r24
     ccc:	84 81       	ldd	r24, Z+4	; 0x04
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	0e 94 ba 02 	call	0x574	; 0x574 <Dio_enuWriteChannel>
     cd4:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	28 2f       	mov	r18, r24
     cda:	22 95       	swap	r18
     cdc:	2f 70       	andi	r18, 0x0F	; 15
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	9b 81       	ldd	r25, Y+3	; 0x03
     ce2:	62 2f       	mov	r22, r18
     ce4:	0e 94 22 08 	call	0x1044	; 0x1044 <Lcd_4bit_enuSet4BitsOnPins>
     ce8:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	9b 81       	ldd	r25, Y+3	; 0x03
     cee:	0e 94 60 08 	call	0x10c0	; 0x10c0 <Lcd_4bit_enuSendEnableSignal>
     cf2:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	6c 81       	ldd	r22, Y+4	; 0x04
     cfa:	0e 94 22 08 	call	0x1044	; 0x1044 <Lcd_4bit_enuSet4BitsOnPins>
     cfe:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	9b 81       	ldd	r25, Y+3	; 0x03
     d04:	0e 94 60 08 	call	0x10c0	; 0x10c0 <Lcd_4bit_enuSendEnableSignal>
     d08:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01

}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	9b 83       	std	Y+3, r25	; 0x03
     d2a:	8a 83       	std	Y+2, r24	; 0x02
     d2c:	6c 83       	std	Y+4, r22	; 0x04
     d2e:	4d 83       	std	Y+5, r20	; 0x05
     d30:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     d32:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	9b 81       	ldd	r25, Y+3	; 0x03
     d38:	89 2b       	or	r24, r25
     d3a:	19 f4       	brne	.+6      	; 0xd42 <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	29 c0       	rjmp	.+82     	; 0xd94 <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	4e 81       	ldd	r20, Y+6	; 0x06
     d48:	6d 81       	ldd	r22, Y+5	; 0x05
     d4a:	0e 94 2a 07 	call	0xe54	; 0xe54 <Lcd_4bit_enuGoToXY>
     d4e:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	fc 01       	movw	r30, r24
     d56:	84 81       	ldd	r24, Z+4	; 0x04
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	0e 94 ba 02 	call	0x574	; 0x574 <Dio_enuWriteChannel>
     d5e:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	28 2f       	mov	r18, r24
     d64:	22 95       	swap	r18
     d66:	2f 70       	andi	r18, 0x0F	; 15
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	9b 81       	ldd	r25, Y+3	; 0x03
     d6c:	62 2f       	mov	r22, r18
     d6e:	0e 94 22 08 	call	0x1044	; 0x1044 <Lcd_4bit_enuSet4BitsOnPins>
     d72:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	0e 94 60 08 	call	0x10c0	; 0x10c0 <Lcd_4bit_enuSendEnableSignal>
     d7c:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	9b 81       	ldd	r25, Y+3	; 0x03
     d82:	6c 81       	ldd	r22, Y+4	; 0x04
     d84:	0e 94 22 08 	call	0x1044	; 0x1044 <Lcd_4bit_enuSet4BitsOnPins>
     d88:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	9b 81       	ldd	r25, Y+3	; 0x03
     d8e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <Lcd_4bit_enuSendEnableSignal>
     d92:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
     d94:	89 81       	ldd	r24, Y+1	; 0x01
}
     d96:	26 96       	adiw	r28, 0x06	; 6
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <Lcd_4bit_enuCreateCustomCharacter>:


Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	27 97       	sbiw	r28, 0x07	; 7
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	9c 83       	std	Y+4, r25	; 0x04
     dbe:	8b 83       	std	Y+3, r24	; 0x03
     dc0:	7e 83       	std	Y+6, r23	; 0x06
     dc2:	6d 83       	std	Y+5, r22	; 0x05
     dc4:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     dc6:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
     dc8:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	89 2b       	or	r24, r25
     dd0:	21 f0       	breq	.+8      	; 0xdda <Lcd_4bit_enuCreateCustomCharacter+0x32>
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	9e 81       	ldd	r25, Y+6	; 0x06
     dd6:	89 2b       	or	r24, r25
     dd8:	19 f4       	brne	.+6      	; 0xde0 <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	30 c0       	rjmp	.+96     	; 0xe40 <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
     de0:	8f 81       	ldd	r24, Y+7	; 0x07
     de2:	88 30       	cpi	r24, 0x08	; 8
     de4:	18 f0       	brcs	.+6      	; 0xdec <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	2a c0       	rjmp	.+84     	; 0xe40 <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
     dec:	8f 81       	ldd	r24, Y+7	; 0x07
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	08 96       	adiw	r24, 0x08	; 8
     df4:	28 2f       	mov	r18, r24
     df6:	22 0f       	add	r18, r18
     df8:	22 0f       	add	r18, r18
     dfa:	22 0f       	add	r18, r18
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	62 2f       	mov	r22, r18
     e02:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     e06:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
     e08:	1a 82       	std	Y+2, r1	; 0x02
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	2d 81       	ldd	r18, Y+5	; 0x05
     e14:	3e 81       	ldd	r19, Y+6	; 0x06
     e16:	82 0f       	add	r24, r18
     e18:	93 1f       	adc	r25, r19
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 81       	ld	r18, Z
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	62 2f       	mov	r22, r18
     e24:	0e 94 52 06 	call	0xca4	; 0xca4 <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	8a 83       	std	Y+2, r24	; 0x02
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	88 30       	cpi	r24, 0x08	; 8
     e32:	60 f3       	brcs	.-40     	; 0xe0c <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	60 e8       	ldi	r22, 0x80	; 128
     e3a:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     e3e:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
     e40:	89 81       	ldd	r24, Y+1	; 0x01

}
     e42:	27 96       	adiw	r28, 0x07	; 7
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	00 d0       	rcall	.+0      	; 0xe5a <Lcd_4bit_enuGoToXY+0x6>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <Lcd_4bit_enuGoToXY+0x8>
     e5c:	1f 92       	push	r1
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9b 83       	std	Y+3, r25	; 0x03
     e64:	8a 83       	std	Y+2, r24	; 0x02
     e66:	6c 83       	std	Y+4, r22	; 0x04
     e68:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     e6a:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	9b 81       	ldd	r25, Y+3	; 0x03
     e70:	89 2b       	or	r24, r25
     e72:	19 f4       	brne	.+6      	; 0xe7a <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	56 c0       	rjmp	.+172    	; 0xf26 <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	85 30       	cpi	r24, 0x05	; 5
     e7e:	18 f0       	brcs	.+6      	; 0xe86 <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
     e80:	85 e0       	ldi	r24, 0x05	; 5
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	50 c0       	rjmp	.+160    	; 0xf26 <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	85 31       	cpi	r24, 0x15	; 21
     e8a:	18 f0       	brcs	.+6      	; 0xe92 <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
     e8c:	84 e0       	ldi	r24, 0x04	; 4
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	4a c0       	rjmp	.+148    	; 0xf26 <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	81 50       	subi	r24, 0x01	; 1
     e96:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	91 05       	cpc	r25, r1
     ea2:	c9 f0       	breq	.+50     	; 0xed6 <Lcd_4bit_enuGoToXY+0x82>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	91 05       	cpc	r25, r1
     ea8:	1c f4       	brge	.+6      	; 0xeb0 <Lcd_4bit_enuGoToXY+0x5c>
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	39 f0       	breq	.+14     	; 0xebc <Lcd_4bit_enuGoToXY+0x68>
     eae:	3a c0       	rjmp	.+116    	; 0xf24 <Lcd_4bit_enuGoToXY+0xd0>
     eb0:	83 30       	cpi	r24, 0x03	; 3
     eb2:	91 05       	cpc	r25, r1
     eb4:	e9 f0       	breq	.+58     	; 0xef0 <Lcd_4bit_enuGoToXY+0x9c>
     eb6:	04 97       	sbiw	r24, 0x04	; 4
     eb8:	41 f1       	breq	.+80     	; 0xf0a <Lcd_4bit_enuGoToXY+0xb6>
     eba:	34 c0       	rjmp	.+104    	; 0xf24 <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	20 e8       	ldi	r18, 0x80	; 128
     ec0:	28 0f       	add	r18, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	9b 81       	ldd	r25, Y+3	; 0x03
     ec6:	62 2f       	mov	r22, r18
     ec8:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     ecc:	98 2f       	mov	r25, r24
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	89 23       	and	r24, r25
     ed2:	89 83       	std	Y+1, r24	; 0x01
			                break;
     ed4:	28 c0       	rjmp	.+80     	; 0xf26 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	20 ec       	ldi	r18, 0xC0	; 192
     eda:	28 0f       	add	r18, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	9b 81       	ldd	r25, Y+3	; 0x03
     ee0:	62 2f       	mov	r22, r18
     ee2:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     ee6:	98 2f       	mov	r25, r24
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	89 23       	and	r24, r25
     eec:	89 83       	std	Y+1, r24	; 0x01
			                break;
     eee:	1b c0       	rjmp	.+54     	; 0xf26 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	24 e9       	ldi	r18, 0x94	; 148
     ef4:	28 0f       	add	r18, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	9b 81       	ldd	r25, Y+3	; 0x03
     efa:	62 2f       	mov	r22, r18
     efc:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     f00:	98 2f       	mov	r25, r24
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	89 23       	and	r24, r25
     f06:	89 83       	std	Y+1, r24	; 0x01
			                break;
     f08:	0e c0       	rjmp	.+28     	; 0xf26 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	24 ed       	ldi	r18, 0xD4	; 212
     f0e:	28 0f       	add	r18, r24
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	62 2f       	mov	r22, r18
     f16:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
     f1a:	98 2f       	mov	r25, r24
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	89 23       	and	r24, r25
     f20:	89 83       	std	Y+1, r24	; 0x01
			                break;
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
     f24:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
     f26:	89 81       	ldd	r24, Y+1	; 0x01

}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <Lcd_4bit_enuDisplayString+0x6>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <Lcd_4bit_enuDisplayString+0x8>
     f40:	00 d0       	rcall	.+0      	; 0xf42 <Lcd_4bit_enuDisplayString+0xa>
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	9c 83       	std	Y+4, r25	; 0x04
     f48:	8b 83       	std	Y+3, r24	; 0x03
     f4a:	7e 83       	std	Y+6, r23	; 0x06
     f4c:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     f4e:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
     f50:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	89 2b       	or	r24, r25
     f58:	21 f0       	breq	.+8      	; 0xf62 <Lcd_4bit_enuDisplayString+0x2a>
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	89 2b       	or	r24, r25
     f60:	a9 f4       	brne	.+42     	; 0xf8c <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	1d c0       	rjmp	.+58     	; 0xfa2 <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	2d 81       	ldd	r18, Y+5	; 0x05
     f70:	3e 81       	ldd	r19, Y+6	; 0x06
     f72:	82 0f       	add	r24, r18
     f74:	93 1f       	adc	r25, r19
     f76:	fc 01       	movw	r30, r24
     f78:	20 81       	ld	r18, Z
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	62 2f       	mov	r22, r18
     f80:	0e 94 52 06 	call	0xca4	; 0xca4 <Lcd_4bit_enuDisplayCharacter>
     f84:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	2d 81       	ldd	r18, Y+5	; 0x05
     f94:	3e 81       	ldd	r19, Y+6	; 0x06
     f96:	82 0f       	add	r24, r18
     f98:	93 1f       	adc	r25, r19
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	19 f7       	brne	.-58     	; 0xf68 <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01

}
     fa4:	26 96       	adiw	r28, 0x06	; 6
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Number){
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	c9 56       	subi	r28, 0x69	; 105
     fc0:	d1 09       	sbc	r29, r1
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	9e 01       	movw	r18, r28
     fce:	29 59       	subi	r18, 0x99	; 153
     fd0:	3f 4f       	sbci	r19, 0xFF	; 255
     fd2:	f9 01       	movw	r30, r18
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
     fd8:	ce 01       	movw	r24, r28
     fda:	87 59       	subi	r24, 0x97	; 151
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	fc 01       	movw	r30, r24
     fe0:	60 83       	st	Z, r22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     fe2:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
     fe4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
     fe6:	ce 01       	movw	r24, r28
     fe8:	89 59       	subi	r24, 0x99	; 153
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	fc 01       	movw	r30, r24
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	89 2b       	or	r24, r25
     ff4:	19 f4       	brne	.+6      	; 0xffc <Lcd_4bit_enuDisplayNumber+0x46>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	19 c0       	rjmp	.+50     	; 0x102e <Lcd_4bit_enuDisplayNumber+0x78>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u8Number, Loc_u8ConvertedNumberInArray);
     ffc:	9e 01       	movw	r18, r28
     ffe:	2d 5f       	subi	r18, 0xFD	; 253
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	ce 01       	movw	r24, r28
    1004:	87 59       	subi	r24, 0x97	; 151
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	b9 01       	movw	r22, r18
    100a:	fc 01       	movw	r30, r24
    100c:	80 81       	ld	r24, Z
    100e:	0e 94 41 00 	call	0x82	; 0x82 <Convert_IntToString>
    1012:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    1014:	9e 01       	movw	r18, r28
    1016:	2d 5f       	subi	r18, 0xFD	; 253
    1018:	3f 4f       	sbci	r19, 0xFF	; 255
    101a:	ce 01       	movw	r24, r28
    101c:	89 59       	subi	r24, 0x99	; 153
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	fc 01       	movw	r30, r24
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	b9 01       	movw	r22, r18
    1028:	0e 94 9c 07 	call	0xf38	; 0xf38 <Lcd_4bit_enuDisplayString>
    102c:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    102e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1030:	c7 59       	subi	r28, 0x97	; 151
    1032:	df 4f       	sbci	r29, 0xFF	; 255
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	00 d0       	rcall	.+0      	; 0x104a <Lcd_4bit_enuSet4BitsOnPins+0x6>
    104a:	00 d0       	rcall	.+0      	; 0x104c <Lcd_4bit_enuSet4BitsOnPins+0x8>
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
    1056:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1058:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    105a:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	89 2b       	or	r24, r25
    1062:	19 f4       	brne	.+6      	; 0x106a <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	22 c0       	rjmp	.+68     	; 0x10ae <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    106a:	1a 82       	std	Y+2, r1	; 0x02
    106c:	1d c0       	rjmp	.+58     	; 0x10a8 <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	2a 81       	ldd	r18, Y+2	; 0x02
    1076:	22 2f       	mov	r18, r18
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    107c:	95 95       	asr	r25
    107e:	87 95       	ror	r24
    1080:	2a 95       	dec	r18
    1082:	e2 f7       	brpl	.-8      	; 0x107c <Lcd_4bit_enuSet4BitsOnPins+0x38>
    1084:	48 2f       	mov	r20, r24
    1086:	41 70       	andi	r20, 0x01	; 1
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	2b 81       	ldd	r18, Y+3	; 0x03
    1090:	3c 81       	ldd	r19, Y+4	; 0x04
    1092:	82 0f       	add	r24, r18
    1094:	93 1f       	adc	r25, r19
    1096:	fc 01       	movw	r30, r24
    1098:	80 81       	ld	r24, Z
    109a:	64 2f       	mov	r22, r20
    109c:	0e 94 ba 02 	call	0x574	; 0x574 <Dio_enuWriteChannel>
    10a0:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	8a 83       	std	Y+2, r24	; 0x02
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	84 30       	cpi	r24, 0x04	; 4
    10ac:	00 f3       	brcs	.-64     	; 0x106e <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    10ae:	89 81       	ldd	r24, Y+1	; 0x01

}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	a3 97       	sbiw	r28, 0x23	; 35
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	9b a3       	std	Y+35, r25	; 0x23
    10d6:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    10d8:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    10da:	8a a1       	ldd	r24, Y+34	; 0x22
    10dc:	9b a1       	ldd	r25, Y+35	; 0x23
    10de:	89 2b       	or	r24, r25
    10e0:	19 f4       	brne	.+6      	; 0x10e8 <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	ff c0       	rjmp	.+510    	; 0x12e6 <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    10e8:	8a a1       	ldd	r24, Y+34	; 0x22
    10ea:	9b a1       	ldd	r25, Y+35	; 0x23
    10ec:	fc 01       	movw	r30, r24
    10ee:	85 81       	ldd	r24, Z+5	; 0x05
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	0e 94 ba 02 	call	0x574	; 0x574 <Dio_enuWriteChannel>
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a0 ea       	ldi	r26, 0xA0	; 160
    10fe:	b0 e4       	ldi	r27, 0x40	; 64
    1100:	8a 83       	std	Y+2, r24	; 0x02
    1102:	9b 83       	std	Y+3, r25	; 0x03
    1104:	ac 83       	std	Y+4, r26	; 0x04
    1106:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1108:	2b ea       	ldi	r18, 0xAB	; 171
    110a:	3a ea       	ldi	r19, 0xAA	; 170
    110c:	4a e2       	ldi	r20, 0x2A	; 42
    110e:	50 e4       	ldi	r21, 0x40	; 64
    1110:	6a 81       	ldd	r22, Y+2	; 0x02
    1112:	7b 81       	ldd	r23, Y+3	; 0x03
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8e 83       	std	Y+6, r24	; 0x06
    1122:	9f 83       	std	Y+7, r25	; 0x07
    1124:	a8 87       	std	Y+8, r26	; 0x08
    1126:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	9b 81       	ldd	r25, Y+3	; 0x03
    112c:	ac 81       	ldd	r26, Y+4	; 0x04
    112e:	bd 81       	ldd	r27, Y+5	; 0x05
    1130:	9c 01       	movw	r18, r24
    1132:	ad 01       	movw	r20, r26
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__addsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8a 87       	std	Y+10, r24	; 0x0a
    1142:	9b 87       	std	Y+11, r25	; 0x0b
    1144:	ac 87       	std	Y+12, r26	; 0x0c
    1146:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e8       	ldi	r20, 0x80	; 128
    114e:	5f e3       	ldi	r21, 0x3F	; 63
    1150:	6e 81       	ldd	r22, Y+6	; 0x06
    1152:	7f 81       	ldd	r23, Y+7	; 0x07
    1154:	88 85       	ldd	r24, Y+8	; 0x08
    1156:	99 85       	ldd	r25, Y+9	; 0x09
    1158:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    115c:	88 23       	and	r24, r24
    115e:	1c f4       	brge	.+6      	; 0x1166 <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	8e 87       	std	Y+14, r24	; 0x0e
    1164:	b2 c0       	rjmp	.+356    	; 0x12ca <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1170:	7b 85       	ldd	r23, Y+11	; 0x0b
    1172:	8c 85       	ldd	r24, Y+12	; 0x0c
    1174:	9d 85       	ldd	r25, Y+13	; 0x0d
    1176:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    117a:	18 16       	cp	r1, r24
    117c:	0c f0       	brlt	.+2      	; 0x1180 <Lcd_4bit_enuSendEnableSignal+0xc0>
    117e:	7b c0       	rjmp	.+246    	; 0x1276 <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	4a e7       	ldi	r20, 0x7A	; 122
    1186:	54 e4       	ldi	r21, 0x44	; 68
    1188:	6a 81       	ldd	r22, Y+2	; 0x02
    118a:	7b 81       	ldd	r23, Y+3	; 0x03
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__divsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	8f 87       	std	Y+15, r24	; 0x0f
    119a:	98 8b       	std	Y+16, r25	; 0x10
    119c:	a9 8b       	std	Y+17, r26	; 0x11
    119e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	4a ef       	ldi	r20, 0xFA	; 250
    11a6:	54 e4       	ldi	r21, 0x44	; 68
    11a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    11aa:	78 89       	ldd	r23, Y+16	; 0x10
    11ac:	89 89       	ldd	r24, Y+17	; 0x11
    11ae:	9a 89       	ldd	r25, Y+18	; 0x12
    11b0:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	8b 8b       	std	Y+19, r24	; 0x13
    11ba:	9c 8b       	std	Y+20, r25	; 0x14
    11bc:	ad 8b       	std	Y+21, r26	; 0x15
    11be:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e8       	ldi	r20, 0x80	; 128
    11c6:	5f e3       	ldi	r21, 0x3F	; 63
    11c8:	6b 89       	ldd	r22, Y+19	; 0x13
    11ca:	7c 89       	ldd	r23, Y+20	; 0x14
    11cc:	8d 89       	ldd	r24, Y+21	; 0x15
    11ce:	9e 89       	ldd	r25, Y+22	; 0x16
    11d0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    11d4:	88 23       	and	r24, r24
    11d6:	2c f4       	brge	.+10     	; 0x11e2 <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	98 8f       	std	Y+24, r25	; 0x18
    11de:	8f 8b       	std	Y+23, r24	; 0x17
    11e0:	3f c0       	rjmp	.+126    	; 0x1260 <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	3f ef       	ldi	r19, 0xFF	; 255
    11e6:	4f e7       	ldi	r20, 0x7F	; 127
    11e8:	57 e4       	ldi	r21, 0x47	; 71
    11ea:	6b 89       	ldd	r22, Y+19	; 0x13
    11ec:	7c 89       	ldd	r23, Y+20	; 0x14
    11ee:	8d 89       	ldd	r24, Y+21	; 0x15
    11f0:	9e 89       	ldd	r25, Y+22	; 0x16
    11f2:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    11f6:	18 16       	cp	r1, r24
    11f8:	4c f5       	brge	.+82     	; 0x124c <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e2       	ldi	r20, 0x20	; 32
    1200:	51 e4       	ldi	r21, 0x41	; 65
    1202:	6f 85       	ldd	r22, Y+15	; 0x0f
    1204:	78 89       	ldd	r23, Y+16	; 0x10
    1206:	89 89       	ldd	r24, Y+17	; 0x11
    1208:	9a 89       	ldd	r25, Y+18	; 0x12
    120a:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	98 8f       	std	Y+24, r25	; 0x18
    1220:	8f 8b       	std	Y+23, r24	; 0x17
    1222:	0f c0       	rjmp	.+30     	; 0x1242 <Lcd_4bit_enuSendEnableSignal+0x182>
    1224:	88 ec       	ldi	r24, 0xC8	; 200
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9a 8f       	std	Y+26, r25	; 0x1a
    122a:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    122c:	89 8d       	ldd	r24, Y+25	; 0x19
    122e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <Lcd_4bit_enuSendEnableSignal+0x170>
    1234:	9a 8f       	std	Y+26, r25	; 0x1a
    1236:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1238:	8f 89       	ldd	r24, Y+23	; 0x17
    123a:	98 8d       	ldd	r25, Y+24	; 0x18
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	98 8f       	std	Y+24, r25	; 0x18
    1240:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	8f 89       	ldd	r24, Y+23	; 0x17
    1244:	98 8d       	ldd	r25, Y+24	; 0x18
    1246:	89 2b       	or	r24, r25
    1248:	69 f7       	brne	.-38     	; 0x1224 <Lcd_4bit_enuSendEnableSignal+0x164>
    124a:	3f c0       	rjmp	.+126    	; 0x12ca <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124c:	6b 89       	ldd	r22, Y+19	; 0x13
    124e:	7c 89       	ldd	r23, Y+20	; 0x14
    1250:	8d 89       	ldd	r24, Y+21	; 0x15
    1252:	9e 89       	ldd	r25, Y+22	; 0x16
    1254:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	98 8f       	std	Y+24, r25	; 0x18
    125e:	8f 8b       	std	Y+23, r24	; 0x17
    1260:	8f 89       	ldd	r24, Y+23	; 0x17
    1262:	98 8d       	ldd	r25, Y+24	; 0x18
    1264:	9c 8f       	std	Y+28, r25	; 0x1c
    1266:	8b 8f       	std	Y+27, r24	; 0x1b
    1268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	f1 f7       	brne	.-4      	; 0x126c <Lcd_4bit_enuSendEnableSignal+0x1ac>
    1270:	9c 8f       	std	Y+28, r25	; 0x1c
    1272:	8b 8f       	std	Y+27, r24	; 0x1b
    1274:	2a c0       	rjmp	.+84     	; 0x12ca <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	53 e4       	ldi	r21, 0x43	; 67
    127e:	6e 81       	ldd	r22, Y+6	; 0x06
    1280:	7f 81       	ldd	r23, Y+7	; 0x07
    1282:	88 85       	ldd	r24, Y+8	; 0x08
    1284:	99 85       	ldd	r25, Y+9	; 0x09
    1286:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    128a:	18 16       	cp	r1, r24
    128c:	ac f4       	brge	.+42     	; 0x12b8 <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    128e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1290:	7b 85       	ldd	r23, Y+11	; 0x0b
    1292:	8c 85       	ldd	r24, Y+12	; 0x0c
    1294:	9d 85       	ldd	r25, Y+13	; 0x0d
    1296:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9e 8f       	std	Y+30, r25	; 0x1e
    12a0:	8d 8f       	std	Y+29, r24	; 0x1d
    12a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12a6:	98 a3       	std	Y+32, r25	; 0x20
    12a8:	8f 8f       	std	Y+31, r24	; 0x1f
    12aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ac:	98 a1       	ldd	r25, Y+32	; 0x20
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <Lcd_4bit_enuSendEnableSignal+0x1ee>
    12b2:	98 a3       	std	Y+32, r25	; 0x20
    12b4:	8f 8f       	std	Y+31, r24	; 0x1f
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12b8:	6e 81       	ldd	r22, Y+6	; 0x06
    12ba:	7f 81       	ldd	r23, Y+7	; 0x07
    12bc:	88 85       	ldd	r24, Y+8	; 0x08
    12be:	99 85       	ldd	r25, Y+9	; 0x09
    12c0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	8e 87       	std	Y+14, r24	; 0x0e
    12ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    12cc:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12ce:	89 a1       	ldd	r24, Y+33	; 0x21
    12d0:	8a 95       	dec	r24
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <Lcd_4bit_enuSendEnableSignal+0x210>
    12d4:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    12d6:	8a a1       	ldd	r24, Y+34	; 0x22
    12d8:	9b a1       	ldd	r25, Y+35	; 0x23
    12da:	fc 01       	movw	r30, r24
    12dc:	85 81       	ldd	r24, Z+5	; 0x05
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	0e 94 ba 02 	call	0x574	; 0x574 <Dio_enuWriteChannel>
    12e4:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    12e6:	89 81       	ldd	r24, Y+1	; 0x01

}
    12e8:	a3 96       	adiw	r28, 0x23	; 35
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <main>:
void Lcd_MovingTheBoyTheWholeScreen(void);
void Lcd_CreatingTheHoleAndLadderUp(void);
void Lcd_KillingTheBoy(void);
void Lcd_GameOver(void);

int main(){
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62


	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/* This is Init Part */
	Port_voidInit();
    1302:	0e 94 b2 00 	call	0x164	; 0x164 <Port_voidInit>
	Lcd_4bit_enuInit(&Lcd);
    1306:	88 e8       	ldi	r24, 0x88	; 136
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 5f 04 	call	0x8be	; 0x8be <Lcd_4bit_enuInit>
	 * 1- The boy
	 * 2- The ground ( The floor ) _
	 * 3- Up Ladder \
	 * 4- Death Ladder |
	 *  */
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_BoyCustomCharacter, LCD_BOY_INDEX);
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	6f e8       	ldi	r22, 0x8F	; 143
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	88 e8       	ldi	r24, 0x88	; 136
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 d4 06 	call	0xda8	; 0xda8 <Lcd_4bit_enuCreateCustomCharacter>
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_FloorCustomCharacter, LCD_FLOOR_INDEX);
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	67 e9       	ldi	r22, 0x97	; 151
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	88 e8       	ldi	r24, 0x88	; 136
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 d4 06 	call	0xda8	; 0xda8 <Lcd_4bit_enuCreateCustomCharacter>
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_UpCustomCharacter, LCD_UP_INDEX);
    132a:	42 e0       	ldi	r20, 0x02	; 2
    132c:	6f e9       	ldi	r22, 0x9F	; 159
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	88 e8       	ldi	r24, 0x88	; 136
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 d4 06 	call	0xda8	; 0xda8 <Lcd_4bit_enuCreateCustomCharacter>
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_DeathCustomCharacter, LCD_DEATH_INDEX);
    1338:	43 e0       	ldi	r20, 0x03	; 3
    133a:	67 ea       	ldi	r22, 0xA7	; 167
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	88 e8       	ldi	r24, 0x88	; 136
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 d4 06 	call	0xda8	; 0xda8 <Lcd_4bit_enuCreateCustomCharacter>

	////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Display the floor to the all Screen cells
	Lcd_FillTheFloor();
    1346:	0e 94 b5 09 	call	0x136a	; 0x136a <Lcd_FillTheFloor>

	// Display the boy on the first cell
	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX,LCD_ROW1,LCD_COL1);
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	88 e8       	ldi	r24, 0x88	; 136
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>


	// first step : move the boy to the whole of cells
		Lcd_MovingTheBoyTheWholeScreen();
    1358:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Lcd_MovingTheBoyTheWholeScreen>


	// Second Step : Create The Hole
	Lcd_CreatingTheHoleAndLadderUp();
    135c:	0e 94 9f 0a 	call	0x153e	; 0x153e <Lcd_CreatingTheHoleAndLadderUp>


	// Third Step : Killing and Game Over
	Lcd_KillingTheBoy();
    1360:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <Lcd_KillingTheBoy>

	//Game Over
	Lcd_GameOver();
    1364:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <Lcd_GameOver>

	while(1){


	}
    1368:	ff cf       	rjmp	.-2      	; 0x1368 <main+0x6e>

0000136a <Lcd_FillTheFloor>:


}


void Lcd_FillTheFloor(void){
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	00 d0       	rcall	.+0      	; 0x1370 <Lcd_FillTheFloor+0x6>
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62

	u8 Loc_RowCounter = LCD_ROW1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_ColCounter = LCD_COL1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	8a 83       	std	Y+2, r24	; 0x02

	for(Loc_RowCounter = LCD_ROW1; Loc_RowCounter<=LCD_ROW_NUMBERS;Loc_RowCounter++){
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	13 c0       	rjmp	.+38     	; 0x13a8 <Lcd_FillTheFloor+0x3e>
		for(Loc_ColCounter = LCD_COL1; Loc_ColCounter<=LCD_COL_NUMBERS;Loc_ColCounter++){
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	0a c0       	rjmp	.+20     	; 0x139c <Lcd_FillTheFloor+0x32>

			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_FLOOR_INDEX, Loc_RowCounter,Loc_ColCounter);
    1388:	2a 81       	ldd	r18, Y+2	; 0x02
    138a:	49 81       	ldd	r20, Y+1	; 0x01
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	88 e8       	ldi	r24, 0x88	; 136
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

	u8 Loc_RowCounter = LCD_ROW1;
	u8 Loc_ColCounter = LCD_COL1;

	for(Loc_RowCounter = LCD_ROW1; Loc_RowCounter<=LCD_ROW_NUMBERS;Loc_RowCounter++){
		for(Loc_ColCounter = LCD_COL1; Loc_ColCounter<=LCD_COL_NUMBERS;Loc_ColCounter++){
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	8a 83       	std	Y+2, r24	; 0x02
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	85 31       	cpi	r24, 0x15	; 21
    13a0:	98 f3       	brcs	.-26     	; 0x1388 <Lcd_FillTheFloor+0x1e>
void Lcd_FillTheFloor(void){

	u8 Loc_RowCounter = LCD_ROW1;
	u8 Loc_ColCounter = LCD_COL1;

	for(Loc_RowCounter = LCD_ROW1; Loc_RowCounter<=LCD_ROW_NUMBERS;Loc_RowCounter++){
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	85 30       	cpi	r24, 0x05	; 5
    13ac:	50 f3       	brcs	.-44     	; 0x1382 <Lcd_FillTheFloor+0x18>

		}
	}


}
    13ae:	00 00       	nop
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <Lcd_MovingTheBoyTheWholeScreen>:

void Lcd_MovingTheBoyTheWholeScreen(void){
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	62 97       	sbiw	r28, 0x12	; 18
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61

	u8 Loc_RowCounter = LCD_ROW1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_ColCounter = LCD_COL2;
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loc_PreviousRow = LCD_ROW1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_PreviousCol = LCD_COL1;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	8c 83       	std	Y+4, r24	; 0x04
	for(Loc_RowCounter = LCD_ROW1; Loc_RowCounter<=LCD_ROW_NUMBERS;Loc_RowCounter++){
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	91 c0       	rjmp	.+290    	; 0x1506 <Lcd_MovingTheBoyTheWholeScreen+0x14c>
		for(Loc_ColCounter = LCD_COL1; Loc_ColCounter<=LCD_COL_NUMBERS;Loc_ColCounter++){
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	8a 83       	std	Y+2, r24	; 0x02
    13e8:	87 c0       	rjmp	.+270    	; 0x14f8 <Lcd_MovingTheBoyTheWholeScreen+0x13e>

			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_FLOOR_INDEX, Loc_PreviousRow,Loc_PreviousCol);
    13ea:	2c 81       	ldd	r18, Y+4	; 0x04
    13ec:	4b 81       	ldd	r20, Y+3	; 0x03
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	88 e8       	ldi	r24, 0x88	; 136
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX, Loc_RowCounter,Loc_ColCounter);
    13f8:	2a 81       	ldd	r18, Y+2	; 0x02
    13fa:	49 81       	ldd	r20, Y+1	; 0x01
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	88 e8       	ldi	r24, 0x88	; 136
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

			Loc_PreviousRow = Loc_RowCounter;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	8b 83       	std	Y+3, r24	; 0x03
			Loc_PreviousCol = Loc_ColCounter;
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	8c 83       	std	Y+4, r24	; 0x04
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	a8 ec       	ldi	r26, 0xC8	; 200
    1414:	b2 e4       	ldi	r27, 0x42	; 66
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	9e 83       	std	Y+6, r25	; 0x06
    141a:	af 83       	std	Y+7, r26	; 0x07
    141c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a ef       	ldi	r20, 0xFA	; 250
    1424:	54 e4       	ldi	r21, 0x44	; 68
    1426:	6d 81       	ldd	r22, Y+5	; 0x05
    1428:	7e 81       	ldd	r23, Y+6	; 0x06
    142a:	8f 81       	ldd	r24, Y+7	; 0x07
    142c:	98 85       	ldd	r25, Y+8	; 0x08
    142e:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	89 87       	std	Y+9, r24	; 0x09
    1438:	9a 87       	std	Y+10, r25	; 0x0a
    143a:	ab 87       	std	Y+11, r26	; 0x0b
    143c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	69 85       	ldd	r22, Y+9	; 0x09
    1448:	7a 85       	ldd	r23, Y+10	; 0x0a
    144a:	8b 85       	ldd	r24, Y+11	; 0x0b
    144c:	9c 85       	ldd	r25, Y+12	; 0x0c
    144e:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    1452:	88 23       	and	r24, r24
    1454:	2c f4       	brge	.+10     	; 0x1460 <Lcd_MovingTheBoyTheWholeScreen+0xa6>
		__ticks = 1;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9e 87       	std	Y+14, r25	; 0x0e
    145c:	8d 87       	std	Y+13, r24	; 0x0d
    145e:	3f c0       	rjmp	.+126    	; 0x14de <Lcd_MovingTheBoyTheWholeScreen+0x124>
	else if (__tmp > 65535)
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	69 85       	ldd	r22, Y+9	; 0x09
    146a:	7a 85       	ldd	r23, Y+10	; 0x0a
    146c:	8b 85       	ldd	r24, Y+11	; 0x0b
    146e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1470:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    1474:	18 16       	cp	r1, r24
    1476:	4c f5       	brge	.+82     	; 0x14ca <Lcd_MovingTheBoyTheWholeScreen+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	6d 81       	ldd	r22, Y+5	; 0x05
    1482:	7e 81       	ldd	r23, Y+6	; 0x06
    1484:	8f 81       	ldd	r24, Y+7	; 0x07
    1486:	98 85       	ldd	r25, Y+8	; 0x08
    1488:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	9e 87       	std	Y+14, r25	; 0x0e
    149e:	8d 87       	std	Y+13, r24	; 0x0d
    14a0:	0f c0       	rjmp	.+30     	; 0x14c0 <Lcd_MovingTheBoyTheWholeScreen+0x106>
    14a2:	88 ec       	ldi	r24, 0xC8	; 200
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	98 8b       	std	Y+16, r25	; 0x10
    14a8:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ac:	98 89       	ldd	r25, Y+16	; 0x10
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <Lcd_MovingTheBoyTheWholeScreen+0xf4>
    14b2:	98 8b       	std	Y+16, r25	; 0x10
    14b4:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	9e 87       	std	Y+14, r25	; 0x0e
    14be:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	89 2b       	or	r24, r25
    14c6:	69 f7       	brne	.-38     	; 0x14a2 <Lcd_MovingTheBoyTheWholeScreen+0xe8>
    14c8:	14 c0       	rjmp	.+40     	; 0x14f2 <Lcd_MovingTheBoyTheWholeScreen+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ca:	69 85       	ldd	r22, Y+9	; 0x09
    14cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    14ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d2:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	9e 87       	std	Y+14, r25	; 0x0e
    14dc:	8d 87       	std	Y+13, r24	; 0x0d
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	9a 8b       	std	Y+18, r25	; 0x12
    14e4:	89 8b       	std	Y+17, r24	; 0x11
    14e6:	89 89       	ldd	r24, Y+17	; 0x11
    14e8:	9a 89       	ldd	r25, Y+18	; 0x12
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <Lcd_MovingTheBoyTheWholeScreen+0x130>
    14ee:	9a 8b       	std	Y+18, r25	; 0x12
    14f0:	89 8b       	std	Y+17, r24	; 0x11
	u8 Loc_ColCounter = LCD_COL2;

	u8 Loc_PreviousRow = LCD_ROW1;
	u8 Loc_PreviousCol = LCD_COL1;
	for(Loc_RowCounter = LCD_ROW1; Loc_RowCounter<=LCD_ROW_NUMBERS;Loc_RowCounter++){
		for(Loc_ColCounter = LCD_COL1; Loc_ColCounter<=LCD_COL_NUMBERS;Loc_ColCounter++){
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	8a 83       	std	Y+2, r24	; 0x02
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	85 31       	cpi	r24, 0x15	; 21
    14fc:	08 f4       	brcc	.+2      	; 0x1500 <Lcd_MovingTheBoyTheWholeScreen+0x146>
    14fe:	75 cf       	rjmp	.-278    	; 0x13ea <Lcd_MovingTheBoyTheWholeScreen+0x30>
	u8 Loc_RowCounter = LCD_ROW1;
	u8 Loc_ColCounter = LCD_COL2;

	u8 Loc_PreviousRow = LCD_ROW1;
	u8 Loc_PreviousCol = LCD_COL1;
	for(Loc_RowCounter = LCD_ROW1; Loc_RowCounter<=LCD_ROW_NUMBERS;Loc_RowCounter++){
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	85 30       	cpi	r24, 0x05	; 5
    150a:	08 f4       	brcc	.+2      	; 0x150e <Lcd_MovingTheBoyTheWholeScreen+0x154>
    150c:	6b cf       	rjmp	.-298    	; 0x13e4 <Lcd_MovingTheBoyTheWholeScreen+0x2a>
			Loc_PreviousCol = Loc_ColCounter;
			_delay_ms(100);
		}
	}

	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX, LCD_ROW1,LCD_COL1);
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	41 e0       	ldi	r20, 0x01	; 1
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	88 e8       	ldi	r24, 0x88	; 136
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>
	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_FLOOR_INDEX, Loc_PreviousRow,Loc_PreviousCol);
    151c:	2c 81       	ldd	r18, Y+4	; 0x04
    151e:	4b 81       	ldd	r20, Y+3	; 0x03
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	88 e8       	ldi	r24, 0x88	; 136
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

}
    152a:	00 00       	nop
    152c:	62 96       	adiw	r28, 0x12	; 18
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <Lcd_CreatingTheHoleAndLadderUp>:


void Lcd_CreatingTheHoleAndLadderUp(void){
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	ce 54       	subi	r28, 0x4E	; 78
    154c:	d1 09       	sbc	r29, r1
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_RowCounter = LCD_ROW1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	8c 83       	std	Y+4, r24	; 0x04
	u8 Loc_ColCounter = LCD_COL2;
    155c:	82 e0       	ldi	r24, 0x02	; 2
    155e:	89 83       	std	Y+1, r24	; 0x01

	u8 Loc_PreviousRow = LCD_ROW1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PreviousCol = LCD_COL1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	8b 83       	std	Y+3, r24	; 0x03

	u8 Loc_HoleRow = LCD_ROW1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	8d 83       	std	Y+5, r24	; 0x05
	u8 Loc_HoleCol = LCD_COL15;
    156c:	8f e0       	ldi	r24, 0x0F	; 15
    156e:	8e 83       	std	Y+6, r24	; 0x06

	u8 Loc_LadderRow = LCD_ROW2;
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	8f 83       	std	Y+7, r24	; 0x07
	u8 Loc_LadderCol = LCD_COL15;
    1574:	8f e0       	ldi	r24, 0x0F	; 15
    1576:	88 87       	std	Y+8, r24	; 0x08

	// create hole

	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW1,LCD_COL15);
    1578:	2f e0       	ldi	r18, 0x0F	; 15
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	60 e2       	ldi	r22, 0x20	; 32
    157e:	88 e8       	ldi	r24, 0x88	; 136
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

	// loop til reach to the hole
	for(Loc_ColCounter = LCD_COL2;Loc_ColCounter<= Loc_HoleCol; Loc_ColCounter++){
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	87 c0       	rjmp	.+270    	; 0x169a <Lcd_CreatingTheHoleAndLadderUp+0x15c>

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_FLOOR_INDEX, Loc_PreviousRow,Loc_PreviousCol);
    158c:	2b 81       	ldd	r18, Y+3	; 0x03
    158e:	4a 81       	ldd	r20, Y+2	; 0x02
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	88 e8       	ldi	r24, 0x88	; 136
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX, Loc_RowCounter,Loc_ColCounter);
    159a:	29 81       	ldd	r18, Y+1	; 0x01
    159c:	4c 81       	ldd	r20, Y+4	; 0x04
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	88 e8       	ldi	r24, 0x88	; 136
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>
		Loc_PreviousRow = Loc_RowCounter;
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	8a 83       	std	Y+2, r24	; 0x02
		Loc_PreviousCol = Loc_ColCounter;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a8 ec       	ldi	r26, 0xC8	; 200
    15b6:	b2 e4       	ldi	r27, 0x42	; 66
    15b8:	89 8f       	std	Y+25, r24	; 0x19
    15ba:	9a 8f       	std	Y+26, r25	; 0x1a
    15bc:	ab 8f       	std	Y+27, r26	; 0x1b
    15be:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4a ef       	ldi	r20, 0xFA	; 250
    15c6:	54 e4       	ldi	r21, 0x44	; 68
    15c8:	69 8d       	ldd	r22, Y+25	; 0x19
    15ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d0:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	8d 8f       	std	Y+29, r24	; 0x1d
    15da:	9e 8f       	std	Y+30, r25	; 0x1e
    15dc:	af 8f       	std	Y+31, r26	; 0x1f
    15de:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e8       	ldi	r20, 0x80	; 128
    15e6:	5f e3       	ldi	r21, 0x3F	; 63
    15e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15ea:	7e 8d       	ldd	r23, Y+30	; 0x1e
    15ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ee:	98 a1       	ldd	r25, Y+32	; 0x20
    15f0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    15f4:	88 23       	and	r24, r24
    15f6:	2c f4       	brge	.+10     	; 0x1602 <Lcd_CreatingTheHoleAndLadderUp+0xc4>
		__ticks = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9a a3       	std	Y+34, r25	; 0x22
    15fe:	89 a3       	std	Y+33, r24	; 0x21
    1600:	3f c0       	rjmp	.+126    	; 0x1680 <Lcd_CreatingTheHoleAndLadderUp+0x142>
	else if (__tmp > 65535)
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	57 e4       	ldi	r21, 0x47	; 71
    160a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    160c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    160e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1610:	98 a1       	ldd	r25, Y+32	; 0x20
    1612:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    1616:	18 16       	cp	r1, r24
    1618:	4c f5       	brge	.+82     	; 0x166c <Lcd_CreatingTheHoleAndLadderUp+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e2       	ldi	r20, 0x20	; 32
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	69 8d       	ldd	r22, Y+25	; 0x19
    1624:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    162a:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9a a3       	std	Y+34, r25	; 0x22
    1640:	89 a3       	std	Y+33, r24	; 0x21
    1642:	0f c0       	rjmp	.+30     	; 0x1662 <Lcd_CreatingTheHoleAndLadderUp+0x124>
    1644:	88 ec       	ldi	r24, 0xC8	; 200
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9c a3       	std	Y+36, r25	; 0x24
    164a:	8b a3       	std	Y+35, r24	; 0x23
    164c:	8b a1       	ldd	r24, Y+35	; 0x23
    164e:	9c a1       	ldd	r25, Y+36	; 0x24
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <Lcd_CreatingTheHoleAndLadderUp+0x112>
    1654:	9c a3       	std	Y+36, r25	; 0x24
    1656:	8b a3       	std	Y+35, r24	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	89 a1       	ldd	r24, Y+33	; 0x21
    165a:	9a a1       	ldd	r25, Y+34	; 0x22
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	9a a3       	std	Y+34, r25	; 0x22
    1660:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1662:	89 a1       	ldd	r24, Y+33	; 0x21
    1664:	9a a1       	ldd	r25, Y+34	; 0x22
    1666:	89 2b       	or	r24, r25
    1668:	69 f7       	brne	.-38     	; 0x1644 <Lcd_CreatingTheHoleAndLadderUp+0x106>
    166a:	14 c0       	rjmp	.+40     	; 0x1694 <Lcd_CreatingTheHoleAndLadderUp+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    166e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1670:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1672:	98 a1       	ldd	r25, Y+32	; 0x20
    1674:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9a a3       	std	Y+34, r25	; 0x22
    167e:	89 a3       	std	Y+33, r24	; 0x21
    1680:	89 a1       	ldd	r24, Y+33	; 0x21
    1682:	9a a1       	ldd	r25, Y+34	; 0x22
    1684:	9e a3       	std	Y+38, r25	; 0x26
    1686:	8d a3       	std	Y+37, r24	; 0x25
    1688:	8d a1       	ldd	r24, Y+37	; 0x25
    168a:	9e a1       	ldd	r25, Y+38	; 0x26
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <Lcd_CreatingTheHoleAndLadderUp+0x14e>
    1690:	9e a3       	std	Y+38, r25	; 0x26
    1692:	8d a3       	std	Y+37, r24	; 0x25
	// create hole

	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW1,LCD_COL15);

	// loop til reach to the hole
	for(Loc_ColCounter = LCD_COL2;Loc_ColCounter<= Loc_HoleCol; Loc_ColCounter++){
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	99 81       	ldd	r25, Y+1	; 0x01
    169c:	8e 81       	ldd	r24, Y+6	; 0x06
    169e:	89 17       	cp	r24, r25
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <Lcd_CreatingTheHoleAndLadderUp+0x166>
    16a2:	74 cf       	rjmp	.-280    	; 0x158c <Lcd_CreatingTheHoleAndLadderUp+0x4e>
		Loc_PreviousCol = Loc_ColCounter;
		_delay_ms(100);
	}


	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', Loc_PreviousRow,Loc_PreviousCol);
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	4a 81       	ldd	r20, Y+2	; 0x02
    16a8:	60 e2       	ldi	r22, 0x20	; 32
    16aa:	88 e8       	ldi	r24, 0x88	; 136
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX, Loc_LadderRow,Loc_LadderCol);
    16b2:	28 85       	ldd	r18, Y+8	; 0x08
    16b4:	4f 81       	ldd	r20, Y+7	; 0x07
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	88 e8       	ldi	r24, 0x88	; 136
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a8 ec       	ldi	r26, 0xC8	; 200
    16c6:	b2 e4       	ldi	r27, 0x42	; 66
    16c8:	89 87       	std	Y+9, r24	; 0x09
    16ca:	9a 87       	std	Y+10, r25	; 0x0a
    16cc:	ab 87       	std	Y+11, r26	; 0x0b
    16ce:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	4a ef       	ldi	r20, 0xFA	; 250
    16d6:	54 e4       	ldi	r21, 0x44	; 68
    16d8:	69 85       	ldd	r22, Y+9	; 0x09
    16da:	7a 85       	ldd	r23, Y+10	; 0x0a
    16dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    16de:	9c 85       	ldd	r25, Y+12	; 0x0c
    16e0:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8f a3       	std	Y+39, r24	; 0x27
    16ea:	98 a7       	std	Y+40, r25	; 0x28
    16ec:	a9 a7       	std	Y+41, r26	; 0x29
    16ee:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	6f a1       	ldd	r22, Y+39	; 0x27
    16fa:	78 a5       	ldd	r23, Y+40	; 0x28
    16fc:	89 a5       	ldd	r24, Y+41	; 0x29
    16fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1700:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <Lcd_CreatingTheHoleAndLadderUp+0x1d4>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9c a7       	std	Y+44, r25	; 0x2c
    170e:	8b a7       	std	Y+43, r24	; 0x2b
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <Lcd_CreatingTheHoleAndLadderUp+0x252>
	else if (__tmp > 65535)
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	3f ef       	ldi	r19, 0xFF	; 255
    1716:	4f e7       	ldi	r20, 0x7F	; 127
    1718:	57 e4       	ldi	r21, 0x47	; 71
    171a:	6f a1       	ldd	r22, Y+39	; 0x27
    171c:	78 a5       	ldd	r23, Y+40	; 0x28
    171e:	89 a5       	ldd	r24, Y+41	; 0x29
    1720:	9a a5       	ldd	r25, Y+42	; 0x2a
    1722:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <Lcd_CreatingTheHoleAndLadderUp+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	69 85       	ldd	r22, Y+9	; 0x09
    1734:	7a 85       	ldd	r23, Y+10	; 0x0a
    1736:	8b 85       	ldd	r24, Y+11	; 0x0b
    1738:	9c 85       	ldd	r25, Y+12	; 0x0c
    173a:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9c a7       	std	Y+44, r25	; 0x2c
    1750:	8b a7       	std	Y+43, r24	; 0x2b
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <Lcd_CreatingTheHoleAndLadderUp+0x234>
    1754:	88 ec       	ldi	r24, 0xC8	; 200
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9e a7       	std	Y+46, r25	; 0x2e
    175a:	8d a7       	std	Y+45, r24	; 0x2d
    175c:	8d a5       	ldd	r24, Y+45	; 0x2d
    175e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <Lcd_CreatingTheHoleAndLadderUp+0x222>
    1764:	9e a7       	std	Y+46, r25	; 0x2e
    1766:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	8b a5       	ldd	r24, Y+43	; 0x2b
    176a:	9c a5       	ldd	r25, Y+44	; 0x2c
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9c a7       	std	Y+44, r25	; 0x2c
    1770:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	8b a5       	ldd	r24, Y+43	; 0x2b
    1774:	9c a5       	ldd	r25, Y+44	; 0x2c
    1776:	89 2b       	or	r24, r25
    1778:	69 f7       	brne	.-38     	; 0x1754 <Lcd_CreatingTheHoleAndLadderUp+0x216>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <Lcd_CreatingTheHoleAndLadderUp+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6f a1       	ldd	r22, Y+39	; 0x27
    177e:	78 a5       	ldd	r23, Y+40	; 0x28
    1780:	89 a5       	ldd	r24, Y+41	; 0x29
    1782:	9a a5       	ldd	r25, Y+42	; 0x2a
    1784:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9c a7       	std	Y+44, r25	; 0x2c
    178e:	8b a7       	std	Y+43, r24	; 0x2b
    1790:	8b a5       	ldd	r24, Y+43	; 0x2b
    1792:	9c a5       	ldd	r25, Y+44	; 0x2c
    1794:	98 ab       	std	Y+48, r25	; 0x30
    1796:	8f a7       	std	Y+47, r24	; 0x2f
    1798:	8f a5       	ldd	r24, Y+47	; 0x2f
    179a:	98 a9       	ldd	r25, Y+48	; 0x30
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <Lcd_CreatingTheHoleAndLadderUp+0x25e>
    17a0:	98 ab       	std	Y+48, r25	; 0x30
    17a2:	8f a7       	std	Y+47, r24	; 0x2f
	_delay_ms(100);

	Loc_PreviousRow = Loc_LadderRow;
    17a4:	8f 81       	ldd	r24, Y+7	; 0x07
    17a6:	8a 83       	std	Y+2, r24	; 0x02
	Loc_PreviousCol = Loc_LadderCol;
    17a8:	88 85       	ldd	r24, Y+8	; 0x08
    17aa:	8b 83       	std	Y+3, r24	; 0x03


	// continue after the whole
	for(Loc_ColCounter = Loc_HoleCol+ONE_VALUE; Loc_ColCounter<=LCD_COL_NUMBERS;Loc_ColCounter++){
    17ac:	8e 81       	ldd	r24, Y+6	; 0x06
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	85 c0       	rjmp	.+266    	; 0x18be <Lcd_CreatingTheHoleAndLadderUp+0x380>

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_FLOOR_INDEX, Loc_PreviousRow,Loc_PreviousCol);
    17b4:	2b 81       	ldd	r18, Y+3	; 0x03
    17b6:	4a 81       	ldd	r20, Y+2	; 0x02
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	88 e8       	ldi	r24, 0x88	; 136
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX, Loc_LadderRow,Loc_ColCounter);
    17c2:	29 81       	ldd	r18, Y+1	; 0x01
    17c4:	4f 81       	ldd	r20, Y+7	; 0x07
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	88 e8       	ldi	r24, 0x88	; 136
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

		Loc_PreviousCol = Loc_ColCounter;
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	8b 83       	std	Y+3, r24	; 0x03
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a8 ec       	ldi	r26, 0xC8	; 200
    17da:	b2 e4       	ldi	r27, 0x42	; 66
    17dc:	8d 87       	std	Y+13, r24	; 0x0d
    17de:	9e 87       	std	Y+14, r25	; 0x0e
    17e0:	af 87       	std	Y+15, r26	; 0x0f
    17e2:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a ef       	ldi	r20, 0xFA	; 250
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    17ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    17f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f2:	98 89       	ldd	r25, Y+16	; 0x10
    17f4:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	89 ab       	std	Y+49, r24	; 0x31
    17fe:	9a ab       	std	Y+50, r25	; 0x32
    1800:	ab ab       	std	Y+51, r26	; 0x33
    1802:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	69 a9       	ldd	r22, Y+49	; 0x31
    180e:	7a a9       	ldd	r23, Y+50	; 0x32
    1810:	8b a9       	ldd	r24, Y+51	; 0x33
    1812:	9c a9       	ldd	r25, Y+52	; 0x34
    1814:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <Lcd_CreatingTheHoleAndLadderUp+0x2e8>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9e ab       	std	Y+54, r25	; 0x36
    1822:	8d ab       	std	Y+53, r24	; 0x35
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <Lcd_CreatingTheHoleAndLadderUp+0x366>
	else if (__tmp > 65535)
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	69 a9       	ldd	r22, Y+49	; 0x31
    1830:	7a a9       	ldd	r23, Y+50	; 0x32
    1832:	8b a9       	ldd	r24, Y+51	; 0x33
    1834:	9c a9       	ldd	r25, Y+52	; 0x34
    1836:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <Lcd_CreatingTheHoleAndLadderUp+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	6d 85       	ldd	r22, Y+13	; 0x0d
    1848:	7e 85       	ldd	r23, Y+14	; 0x0e
    184a:	8f 85       	ldd	r24, Y+15	; 0x0f
    184c:	98 89       	ldd	r25, Y+16	; 0x10
    184e:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9e ab       	std	Y+54, r25	; 0x36
    1864:	8d ab       	std	Y+53, r24	; 0x35
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <Lcd_CreatingTheHoleAndLadderUp+0x348>
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	98 af       	std	Y+56, r25	; 0x38
    186e:	8f ab       	std	Y+55, r24	; 0x37
    1870:	8f a9       	ldd	r24, Y+55	; 0x37
    1872:	98 ad       	ldd	r25, Y+56	; 0x38
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <Lcd_CreatingTheHoleAndLadderUp+0x336>
    1878:	98 af       	std	Y+56, r25	; 0x38
    187a:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8d a9       	ldd	r24, Y+53	; 0x35
    187e:	9e a9       	ldd	r25, Y+54	; 0x36
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9e ab       	std	Y+54, r25	; 0x36
    1884:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8d a9       	ldd	r24, Y+53	; 0x35
    1888:	9e a9       	ldd	r25, Y+54	; 0x36
    188a:	89 2b       	or	r24, r25
    188c:	69 f7       	brne	.-38     	; 0x1868 <Lcd_CreatingTheHoleAndLadderUp+0x32a>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <Lcd_CreatingTheHoleAndLadderUp+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	69 a9       	ldd	r22, Y+49	; 0x31
    1892:	7a a9       	ldd	r23, Y+50	; 0x32
    1894:	8b a9       	ldd	r24, Y+51	; 0x33
    1896:	9c a9       	ldd	r25, Y+52	; 0x34
    1898:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9e ab       	std	Y+54, r25	; 0x36
    18a2:	8d ab       	std	Y+53, r24	; 0x35
    18a4:	8d a9       	ldd	r24, Y+53	; 0x35
    18a6:	9e a9       	ldd	r25, Y+54	; 0x36
    18a8:	9a af       	std	Y+58, r25	; 0x3a
    18aa:	89 af       	std	Y+57, r24	; 0x39
    18ac:	89 ad       	ldd	r24, Y+57	; 0x39
    18ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <Lcd_CreatingTheHoleAndLadderUp+0x372>
    18b4:	9a af       	std	Y+58, r25	; 0x3a
    18b6:	89 af       	std	Y+57, r24	; 0x39
	Loc_PreviousRow = Loc_LadderRow;
	Loc_PreviousCol = Loc_LadderCol;


	// continue after the whole
	for(Loc_ColCounter = Loc_HoleCol+ONE_VALUE; Loc_ColCounter<=LCD_COL_NUMBERS;Loc_ColCounter++){
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	8f 5f       	subi	r24, 0xFF	; 255
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	85 31       	cpi	r24, 0x15	; 21
    18c2:	08 f4       	brcc	.+2      	; 0x18c6 <Lcd_CreatingTheHoleAndLadderUp+0x388>
    18c4:	77 cf       	rjmp	.-274    	; 0x17b4 <Lcd_CreatingTheHoleAndLadderUp+0x276>
	}



	// Create the Ladder
	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,LCD_UP_INDEX, Loc_LadderRow,Loc_LadderCol);
    18c6:	28 85       	ldd	r18, Y+8	; 0x08
    18c8:	4f 81       	ldd	r20, Y+7	; 0x07
    18ca:	62 e0       	ldi	r22, 0x02	; 2
    18cc:	88 e8       	ldi	r24, 0x88	; 136
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>
	// loop til you reach the ladder
	for(Loc_ColCounter = LCD_COL1; Loc_ColCounter<=Loc_LadderCol;Loc_ColCounter++){
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	b8 c0       	rjmp	.+368    	; 0x1a4a <Lcd_CreatingTheHoleAndLadderUp+0x50c>

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_FLOOR_INDEX, Loc_PreviousRow,Loc_PreviousCol);
    18da:	2b 81       	ldd	r18, Y+3	; 0x03
    18dc:	4a 81       	ldd	r20, Y+2	; 0x02
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	88 e8       	ldi	r24, 0x88	; 136
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX, Loc_LadderRow,Loc_ColCounter);
    18e8:	29 81       	ldd	r18, Y+1	; 0x01
    18ea:	4f 81       	ldd	r20, Y+7	; 0x07
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	88 e8       	ldi	r24, 0x88	; 136
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

		Loc_PreviousCol = Loc_ColCounter;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a8 ec       	ldi	r26, 0xC8	; 200
    1900:	b2 e4       	ldi	r27, 0x42	; 66
    1902:	89 8b       	std	Y+17, r24	; 0x11
    1904:	9a 8b       	std	Y+18, r25	; 0x12
    1906:	ab 8b       	std	Y+19, r26	; 0x13
    1908:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a ef       	ldi	r20, 0xFA	; 250
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	69 89       	ldd	r22, Y+17	; 0x11
    1914:	7a 89       	ldd	r23, Y+18	; 0x12
    1916:	8b 89       	ldd	r24, Y+19	; 0x13
    1918:	9c 89       	ldd	r25, Y+20	; 0x14
    191a:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8b af       	std	Y+59, r24	; 0x3b
    1924:	9c af       	std	Y+60, r25	; 0x3c
    1926:	ad af       	std	Y+61, r26	; 0x3d
    1928:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	6b ad       	ldd	r22, Y+59	; 0x3b
    1934:	7c ad       	ldd	r23, Y+60	; 0x3c
    1936:	8d ad       	ldd	r24, Y+61	; 0x3d
    1938:	9e ad       	ldd	r25, Y+62	; 0x3e
    193a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    193e:	88 23       	and	r24, r24
    1940:	44 f4       	brge	.+16     	; 0x1952 <Lcd_CreatingTheHoleAndLadderUp+0x414>
		__ticks = 1;
    1942:	21 e0       	ldi	r18, 0x01	; 1
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	ce 01       	movw	r24, r28
    1948:	cf 96       	adiw	r24, 0x3f	; 63
    194a:	fc 01       	movw	r30, r24
    194c:	31 83       	std	Z+1, r19	; 0x01
    194e:	20 83       	st	Z, r18
    1950:	5f c0       	rjmp	.+190    	; 0x1a10 <Lcd_CreatingTheHoleAndLadderUp+0x4d2>
	else if (__tmp > 65535)
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	6b ad       	ldd	r22, Y+59	; 0x3b
    195c:	7c ad       	ldd	r23, Y+60	; 0x3c
    195e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1960:	9e ad       	ldd	r25, Y+62	; 0x3e
    1962:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    1966:	18 16       	cp	r1, r24
    1968:	0c f0       	brlt	.+2      	; 0x196c <Lcd_CreatingTheHoleAndLadderUp+0x42e>
    196a:	44 c0       	rjmp	.+136    	; 0x19f4 <Lcd_CreatingTheHoleAndLadderUp+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	69 89       	ldd	r22, Y+17	; 0x11
    1976:	7a 89       	ldd	r23, Y+18	; 0x12
    1978:	8b 89       	ldd	r24, Y+19	; 0x13
    197a:	9c 89       	ldd	r25, Y+20	; 0x14
    197c:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9e 01       	movw	r18, r28
    1992:	21 5c       	subi	r18, 0xC1	; 193
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	f9 01       	movw	r30, r18
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	80 83       	st	Z, r24
    199c:	23 c0       	rjmp	.+70     	; 0x19e4 <Lcd_CreatingTheHoleAndLadderUp+0x4a6>
    199e:	ce 01       	movw	r24, r28
    19a0:	8f 5b       	subi	r24, 0xBF	; 191
    19a2:	9f 4f       	sbci	r25, 0xFF	; 255
    19a4:	28 ec       	ldi	r18, 0xC8	; 200
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	fc 01       	movw	r30, r24
    19aa:	31 83       	std	Z+1, r19	; 0x01
    19ac:	20 83       	st	Z, r18
    19ae:	ce 01       	movw	r24, r28
    19b0:	8f 5b       	subi	r24, 0xBF	; 191
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	fc 01       	movw	r30, r24
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <Lcd_CreatingTheHoleAndLadderUp+0x47c>
    19be:	9e 01       	movw	r18, r28
    19c0:	2f 5b       	subi	r18, 0xBF	; 191
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	f9 01       	movw	r30, r18
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	ce 01       	movw	r24, r28
    19cc:	cf 96       	adiw	r24, 0x3f	; 63
    19ce:	fc 01       	movw	r30, r24
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	9c 01       	movw	r18, r24
    19d6:	21 50       	subi	r18, 0x01	; 1
    19d8:	31 09       	sbc	r19, r1
    19da:	ce 01       	movw	r24, r28
    19dc:	cf 96       	adiw	r24, 0x3f	; 63
    19de:	fc 01       	movw	r30, r24
    19e0:	31 83       	std	Z+1, r19	; 0x01
    19e2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	ce 01       	movw	r24, r28
    19e6:	cf 96       	adiw	r24, 0x3f	; 63
    19e8:	fc 01       	movw	r30, r24
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	89 2b       	or	r24, r25
    19f0:	b1 f6       	brne	.-84     	; 0x199e <Lcd_CreatingTheHoleAndLadderUp+0x460>
    19f2:	28 c0       	rjmp	.+80     	; 0x1a44 <Lcd_CreatingTheHoleAndLadderUp+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	6b ad       	ldd	r22, Y+59	; 0x3b
    19f6:	7c ad       	ldd	r23, Y+60	; 0x3c
    19f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    19fc:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 01       	movw	r18, r28
    1a06:	21 5c       	subi	r18, 0xC1	; 193
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	f9 01       	movw	r30, r18
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
    1a10:	ce 01       	movw	r24, r28
    1a12:	8d 5b       	subi	r24, 0xBD	; 189
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	9e 01       	movw	r18, r28
    1a18:	21 5c       	subi	r18, 0xC1	; 193
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	f9 01       	movw	r30, r18
    1a1e:	20 81       	ld	r18, Z
    1a20:	31 81       	ldd	r19, Z+1	; 0x01
    1a22:	fc 01       	movw	r30, r24
    1a24:	31 83       	std	Z+1, r19	; 0x01
    1a26:	20 83       	st	Z, r18
    1a28:	ce 01       	movw	r24, r28
    1a2a:	8d 5b       	subi	r24, 0xBD	; 189
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	fc 01       	movw	r30, r24
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <Lcd_CreatingTheHoleAndLadderUp+0x4f6>
    1a38:	9e 01       	movw	r18, r28
    1a3a:	2d 5b       	subi	r18, 0xBD	; 189
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	f9 01       	movw	r30, r18
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	80 83       	st	Z, r24


	// Create the Ladder
	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,LCD_UP_INDEX, Loc_LadderRow,Loc_LadderCol);
	// loop til you reach the ladder
	for(Loc_ColCounter = LCD_COL1; Loc_ColCounter<=Loc_LadderCol;Loc_ColCounter++){
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	8f 5f       	subi	r24, 0xFF	; 255
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	99 81       	ldd	r25, Y+1	; 0x01
    1a4c:	88 85       	ldd	r24, Y+8	; 0x08
    1a4e:	89 17       	cp	r24, r25
    1a50:	08 f0       	brcs	.+2      	; 0x1a54 <Lcd_CreatingTheHoleAndLadderUp+0x516>
    1a52:	43 cf       	rjmp	.-378    	; 0x18da <Lcd_CreatingTheHoleAndLadderUp+0x39c>
		_delay_ms(100);
	}


	// continute he lifting up
	Loc_PreviousRow = Loc_LadderRow;
    1a54:	8f 81       	ldd	r24, Y+7	; 0x07
    1a56:	8a 83       	std	Y+2, r24	; 0x02
	Loc_PreviousCol = Loc_HoleCol;
    1a58:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5a:	8b 83       	std	Y+3, r24	; 0x03

	for(Loc_ColCounter = Loc_HoleCol; Loc_ColCounter<=LCD_COL_NUMBERS;Loc_ColCounter++){
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	cd c0       	rjmp	.+410    	; 0x1bfc <Lcd_CreatingTheHoleAndLadderUp+0x6be>

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_FLOOR_INDEX, Loc_PreviousRow,Loc_PreviousCol);
    1a62:	2b 81       	ldd	r18, Y+3	; 0x03
    1a64:	4a 81       	ldd	r20, Y+2	; 0x02
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	88 e8       	ldi	r24, 0x88	; 136
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX, Loc_HoleRow,Loc_ColCounter);
    1a70:	29 81       	ldd	r18, Y+1	; 0x01
    1a72:	4d 81       	ldd	r20, Y+5	; 0x05
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	88 e8       	ldi	r24, 0x88	; 136
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

		Loc_PreviousCol = Loc_ColCounter;
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	8b 83       	std	Y+3, r24	; 0x03
		Loc_PreviousRow = Loc_HoleRow;
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	8a 83       	std	Y+2, r24	; 0x02
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a8 ec       	ldi	r26, 0xC8	; 200
    1a8c:	b2 e4       	ldi	r27, 0x42	; 66
    1a8e:	8d 8b       	std	Y+21, r24	; 0x15
    1a90:	9e 8b       	std	Y+22, r25	; 0x16
    1a92:	af 8b       	std	Y+23, r26	; 0x17
    1a94:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	8e 01       	movw	r16, r28
    1a98:	0b 5b       	subi	r16, 0xBB	; 187
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a ef       	ldi	r20, 0xFA	; 250
    1aa2:	54 e4       	ldi	r21, 0x44	; 68
    1aa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    1aac:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	80 83       	st	Z, r24
    1ab8:	91 83       	std	Z+1, r25	; 0x01
    1aba:	a2 83       	std	Z+2, r26	; 0x02
    1abc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1abe:	ce 01       	movw	r24, r28
    1ac0:	8b 5b       	subi	r24, 0xBB	; 187
    1ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	fc 01       	movw	r30, r24
    1ace:	60 81       	ld	r22, Z
    1ad0:	71 81       	ldd	r23, Z+1	; 0x01
    1ad2:	82 81       	ldd	r24, Z+2	; 0x02
    1ad4:	93 81       	ldd	r25, Z+3	; 0x03
    1ad6:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	4c f4       	brge	.+18     	; 0x1af0 <Lcd_CreatingTheHoleAndLadderUp+0x5b2>
		__ticks = 1;
    1ade:	ce 01       	movw	r24, r28
    1ae0:	87 5b       	subi	r24, 0xB7	; 183
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	21 e0       	ldi	r18, 0x01	; 1
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	fc 01       	movw	r30, r24
    1aea:	31 83       	std	Z+1, r19	; 0x01
    1aec:	20 83       	st	Z, r18
    1aee:	69 c0       	rjmp	.+210    	; 0x1bc2 <Lcd_CreatingTheHoleAndLadderUp+0x684>
	else if (__tmp > 65535)
    1af0:	ce 01       	movw	r24, r28
    1af2:	8b 5b       	subi	r24, 0xBB	; 187
    1af4:	9f 4f       	sbci	r25, 0xFF	; 255
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	fc 01       	movw	r30, r24
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	0c f0       	brlt	.+2      	; 0x1b12 <Lcd_CreatingTheHoleAndLadderUp+0x5d4>
    1b10:	46 c0       	rjmp	.+140    	; 0x1b9e <Lcd_CreatingTheHoleAndLadderUp+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e2       	ldi	r20, 0x20	; 32
    1b18:	51 e4       	ldi	r21, 0x41	; 65
    1b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b20:	98 8d       	ldd	r25, Y+24	; 0x18
    1b22:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8e 01       	movw	r16, r28
    1b2c:	07 5b       	subi	r16, 0xB7	; 183
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24
    1b42:	24 c0       	rjmp	.+72     	; 0x1b8c <Lcd_CreatingTheHoleAndLadderUp+0x64e>
    1b44:	ce 01       	movw	r24, r28
    1b46:	85 5b       	subi	r24, 0xB5	; 181
    1b48:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4a:	28 ec       	ldi	r18, 0xC8	; 200
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	fc 01       	movw	r30, r24
    1b50:	31 83       	std	Z+1, r19	; 0x01
    1b52:	20 83       	st	Z, r18
    1b54:	ce 01       	movw	r24, r28
    1b56:	85 5b       	subi	r24, 0xB5	; 181
    1b58:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <Lcd_CreatingTheHoleAndLadderUp+0x622>
    1b64:	9e 01       	movw	r18, r28
    1b66:	25 5b       	subi	r18, 0xB5	; 181
    1b68:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b70:	ce 01       	movw	r24, r28
    1b72:	87 5b       	subi	r24, 0xB7	; 183
    1b74:	9f 4f       	sbci	r25, 0xFF	; 255
    1b76:	9e 01       	movw	r18, r28
    1b78:	27 5b       	subi	r18, 0xB7	; 183
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	f9 01       	movw	r30, r18
    1b7e:	20 81       	ld	r18, Z
    1b80:	31 81       	ldd	r19, Z+1	; 0x01
    1b82:	21 50       	subi	r18, 0x01	; 1
    1b84:	31 09       	sbc	r19, r1
    1b86:	fc 01       	movw	r30, r24
    1b88:	31 83       	std	Z+1, r19	; 0x01
    1b8a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	87 5b       	subi	r24, 0xB7	; 183
    1b90:	9f 4f       	sbci	r25, 0xFF	; 255
    1b92:	fc 01       	movw	r30, r24
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	89 2b       	or	r24, r25
    1b9a:	a1 f6       	brne	.-88     	; 0x1b44 <Lcd_CreatingTheHoleAndLadderUp+0x606>
    1b9c:	2c c0       	rjmp	.+88     	; 0x1bf6 <Lcd_CreatingTheHoleAndLadderUp+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9e:	8e 01       	movw	r16, r28
    1ba0:	07 5b       	subi	r16, 0xB7	; 183
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	8b 5b       	subi	r24, 0xBB	; 187
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	fc 01       	movw	r30, r24
    1bac:	60 81       	ld	r22, Z
    1bae:	71 81       	ldd	r23, Z+1	; 0x01
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	83 5b       	subi	r24, 0xB3	; 179
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	9e 01       	movw	r18, r28
    1bca:	27 5b       	subi	r18, 0xB7	; 183
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	f9 01       	movw	r30, r18
    1bd0:	20 81       	ld	r18, Z
    1bd2:	31 81       	ldd	r19, Z+1	; 0x01
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	31 83       	std	Z+1, r19	; 0x01
    1bd8:	20 83       	st	Z, r18
    1bda:	ce 01       	movw	r24, r28
    1bdc:	83 5b       	subi	r24, 0xB3	; 179
    1bde:	9f 4f       	sbci	r25, 0xFF	; 255
    1be0:	fc 01       	movw	r30, r24
    1be2:	80 81       	ld	r24, Z
    1be4:	91 81       	ldd	r25, Z+1	; 0x01
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <Lcd_CreatingTheHoleAndLadderUp+0x6a8>
    1bea:	9e 01       	movw	r18, r28
    1bec:	23 5b       	subi	r18, 0xB3	; 179
    1bee:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24

	// continute he lifting up
	Loc_PreviousRow = Loc_LadderRow;
	Loc_PreviousCol = Loc_HoleCol;

	for(Loc_ColCounter = Loc_HoleCol; Loc_ColCounter<=LCD_COL_NUMBERS;Loc_ColCounter++){
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	8f 5f       	subi	r24, 0xFF	; 255
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	85 31       	cpi	r24, 0x15	; 21
    1c00:	08 f4       	brcc	.+2      	; 0x1c04 <Lcd_CreatingTheHoleAndLadderUp+0x6c6>
    1c02:	2f cf       	rjmp	.-418    	; 0x1a62 <Lcd_CreatingTheHoleAndLadderUp+0x524>
	}




	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX, LCD_ROW1,LCD_COL1);
    1c04:	21 e0       	ldi	r18, 0x01	; 1
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	88 e8       	ldi	r24, 0x88	; 136
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>
	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_FLOOR_INDEX, Loc_PreviousRow,Loc_PreviousCol);
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	4a 81       	ldd	r20, Y+2	; 0x02
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	88 e8       	ldi	r24, 0x88	; 136
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>


}
    1c20:	00 00       	nop
    1c22:	c2 5b       	subi	r28, 0xB2	; 178
    1c24:	df 4f       	sbci	r29, 0xFF	; 255
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	08 95       	ret

00001c3a <Lcd_KillingTheBoy>:

void Lcd_KillingTheBoy(void){
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	64 97       	sbiw	r28, 0x14	; 20
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
		u8 Loc_RowCounter = LCD_ROW1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	89 83       	std	Y+1, r24	; 0x01
		u8 Loc_ColCounter = LCD_COL2;
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	8a 83       	std	Y+2, r24	; 0x02

		u8 Loc_PreviousRow = LCD_ROW1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	8b 83       	std	Y+3, r24	; 0x03
		u8 Loc_PreviousCol = LCD_COL1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	8c 83       	std	Y+4, r24	; 0x04

		u8 Loc_ObstalceRow = LCD_ROW2;
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	8d 83       	std	Y+5, r24	; 0x05
		u8 Loc_ObstalceCol = LCD_COL10;
    1c62:	8a e0       	ldi	r24, 0x0A	; 10
    1c64:	8e 83       	std	Y+6, r24	; 0x06


		// create the Obstalce

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,LCD_DEATH_INDEX, Loc_ObstalceRow,Loc_ObstalceCol);
    1c66:	2e 81       	ldd	r18, Y+6	; 0x06
    1c68:	4d 81       	ldd	r20, Y+5	; 0x05
    1c6a:	63 e0       	ldi	r22, 0x03	; 3
    1c6c:	88 e8       	ldi	r24, 0x88	; 136
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

		// loop til reach to the Obstcale
		for(Loc_RowCounter = LCD_ROW1;((Loc_RowCounter != Loc_ObstalceRow) || Loc_ColCounter !=  Loc_ObstalceCol);Loc_RowCounter++){
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	9d c0       	rjmp	.+314    	; 0x1db4 <Lcd_KillingTheBoy+0x17a>
				for(Loc_ColCounter = LCD_COL1;Loc_ColCounter <= LCD_COL_NUMBERS  ;Loc_ColCounter++){
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	93 c0       	rjmp	.+294    	; 0x1da6 <Lcd_KillingTheBoy+0x16c>

					Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_FLOOR_INDEX, Loc_PreviousRow,Loc_PreviousCol);
    1c80:	2c 81       	ldd	r18, Y+4	; 0x04
    1c82:	4b 81       	ldd	r20, Y+3	; 0x03
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	88 e8       	ldi	r24, 0x88	; 136
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>
					Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_BOY_INDEX, Loc_RowCounter,Loc_ColCounter);
    1c8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c90:	49 81       	ldd	r20, Y+1	; 0x01
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	88 e8       	ldi	r24, 0x88	; 136
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Lcd_4bit_enuDisplayCharacterWithPosition>

					Loc_PreviousRow = Loc_RowCounter;
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	8b 83       	std	Y+3, r24	; 0x03
					Loc_PreviousCol = Loc_ColCounter;
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	8c 83       	std	Y+4, r24	; 0x04
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a8 ec       	ldi	r26, 0xC8	; 200
    1caa:	b2 e4       	ldi	r27, 0x42	; 66
    1cac:	8f 83       	std	Y+7, r24	; 0x07
    1cae:	98 87       	std	Y+8, r25	; 0x08
    1cb0:	a9 87       	std	Y+9, r26	; 0x09
    1cb2:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a ef       	ldi	r20, 0xFA	; 250
    1cba:	54 e4       	ldi	r21, 0x44	; 68
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	8b 87       	std	Y+11, r24	; 0x0b
    1cce:	9c 87       	std	Y+12, r25	; 0x0c
    1cd0:	ad 87       	std	Y+13, r26	; 0x0d
    1cd2:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <Lcd_KillingTheBoy+0xbc>
		__ticks = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	98 8b       	std	Y+16, r25	; 0x10
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f
    1cf4:	3f c0       	rjmp	.+126    	; 0x1d74 <Lcd_KillingTheBoy+0x13a>
	else if (__tmp > 65535)
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    1d0a:	18 16       	cp	r1, r24
    1d0c:	4c f5       	brge	.+82     	; 0x1d60 <Lcd_KillingTheBoy+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	6f 81       	ldd	r22, Y+7	; 0x07
    1d18:	78 85       	ldd	r23, Y+8	; 0x08
    1d1a:	89 85       	ldd	r24, Y+9	; 0x09
    1d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1e:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	98 8b       	std	Y+16, r25	; 0x10
    1d34:	8f 87       	std	Y+15, r24	; 0x0f
    1d36:	0f c0       	rjmp	.+30     	; 0x1d56 <Lcd_KillingTheBoy+0x11c>
    1d38:	88 ec       	ldi	r24, 0xC8	; 200
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	9a 8b       	std	Y+18, r25	; 0x12
    1d3e:	89 8b       	std	Y+17, r24	; 0x11
    1d40:	89 89       	ldd	r24, Y+17	; 0x11
    1d42:	9a 89       	ldd	r25, Y+18	; 0x12
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <Lcd_KillingTheBoy+0x10a>
    1d48:	9a 8b       	std	Y+18, r25	; 0x12
    1d4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4e:	98 89       	ldd	r25, Y+16	; 0x10
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	98 8b       	std	Y+16, r25	; 0x10
    1d54:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d58:	98 89       	ldd	r25, Y+16	; 0x10
    1d5a:	89 2b       	or	r24, r25
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <Lcd_KillingTheBoy+0xfe>
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <Lcd_KillingTheBoy+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d68:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	98 8b       	std	Y+16, r25	; 0x10
    1d72:	8f 87       	std	Y+15, r24	; 0x0f
    1d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d76:	98 89       	ldd	r25, Y+16	; 0x10
    1d78:	9c 8b       	std	Y+20, r25	; 0x14
    1d7a:	8b 8b       	std	Y+19, r24	; 0x13
    1d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <Lcd_KillingTheBoy+0x146>
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
					_delay_ms(100);

					if ( (Loc_RowCounter == Loc_ObstalceRow) && Loc_ColCounter ==  Loc_ObstalceCol){
    1d88:	99 81       	ldd	r25, Y+1	; 0x01
    1d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8c:	98 17       	cp	r25, r24
    1d8e:	41 f4       	brne	.+16     	; 0x1da0 <Lcd_KillingTheBoy+0x166>
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	8e 81       	ldd	r24, Y+6	; 0x06
    1d94:	98 17       	cp	r25, r24
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <Lcd_KillingTheBoy+0x166>
						--Loc_RowCounter;
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	81 50       	subi	r24, 0x01	; 1
    1d9c:	89 83       	std	Y+1, r24	; 0x01
						break;
    1d9e:	07 c0       	rjmp	.+14     	; 0x1dae <Lcd_KillingTheBoy+0x174>

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,LCD_DEATH_INDEX, Loc_ObstalceRow,Loc_ObstalceCol);

		// loop til reach to the Obstcale
		for(Loc_RowCounter = LCD_ROW1;((Loc_RowCounter != Loc_ObstalceRow) || Loc_ColCounter !=  Loc_ObstalceCol);Loc_RowCounter++){
				for(Loc_ColCounter = LCD_COL1;Loc_ColCounter <= LCD_COL_NUMBERS  ;Loc_ColCounter++){
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	8a 83       	std	Y+2, r24	; 0x02
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	85 31       	cpi	r24, 0x15	; 21
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <Lcd_KillingTheBoy+0x174>
    1dac:	69 cf       	rjmp	.-302    	; 0x1c80 <Lcd_KillingTheBoy+0x46>
		// create the Obstalce

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,LCD_DEATH_INDEX, Loc_ObstalceRow,Loc_ObstalceCol);

		// loop til reach to the Obstcale
		for(Loc_RowCounter = LCD_ROW1;((Loc_RowCounter != Loc_ObstalceRow) || Loc_ColCounter !=  Loc_ObstalceCol);Loc_RowCounter++){
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	8f 5f       	subi	r24, 0xFF	; 255
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	99 81       	ldd	r25, Y+1	; 0x01
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	98 17       	cp	r25, r24
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <Lcd_KillingTheBoy+0x184>
    1dbc:	5e cf       	rjmp	.-324    	; 0x1c7a <Lcd_KillingTheBoy+0x40>
    1dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc2:	98 17       	cp	r25, r24
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <Lcd_KillingTheBoy+0x18e>
    1dc6:	59 cf       	rjmp	.-334    	; 0x1c7a <Lcd_KillingTheBoy+0x40>
					}

				}
			}

		Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	88 e8       	ldi	r24, 0x88	; 136
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>

}
    1dd2:	00 00       	nop
    1dd4:	64 96       	adiw	r28, 0x14	; 20
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <Lcd_GameOver>:


void Lcd_GameOver(){
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	2e 97       	sbiw	r28, 0x0e	; 14
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61

	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    1dfa:	61 e0       	ldi	r22, 0x01	; 1
    1dfc:	88 e8       	ldi	r24, 0x88	; 136
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 14 06 	call	0xc28	; 0xc28 <Lcd_4bit_enuSendCommand>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 e4       	ldi	r26, 0x40	; 64
    1e0a:	b0 e4       	ldi	r27, 0x40	; 64
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	9a 83       	std	Y+2, r25	; 0x02
    1e10:	ab 83       	std	Y+3, r26	; 0x03
    1e12:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4a ef       	ldi	r20, 0xFA	; 250
    1e1a:	54 e4       	ldi	r21, 0x44	; 68
    1e1c:	69 81       	ldd	r22, Y+1	; 0x01
    1e1e:	7a 81       	ldd	r23, Y+2	; 0x02
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	af 83       	std	Y+7, r26	; 0x07
    1e32:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e8       	ldi	r20, 0x80	; 128
    1e3a:	5f e3       	ldi	r21, 0x3F	; 63
    1e3c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e3e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e40:	8f 81       	ldd	r24, Y+7	; 0x07
    1e42:	98 85       	ldd	r25, Y+8	; 0x08
    1e44:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__cmpsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <Lcd_GameOver+0x70>
		__ticks = 1;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9a 87       	std	Y+10, r25	; 0x0a
    1e52:	89 87       	std	Y+9, r24	; 0x09
    1e54:	3f c0       	rjmp	.+126    	; 0x1ed4 <Lcd_GameOver+0xee>
	else if (__tmp > 65535)
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	57 e4       	ldi	r21, 0x47	; 71
    1e5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1e60:	7e 81       	ldd	r23, Y+6	; 0x06
    1e62:	8f 81       	ldd	r24, Y+7	; 0x07
    1e64:	98 85       	ldd	r25, Y+8	; 0x08
    1e66:	0e 94 12 11 	call	0x2224	; 0x2224 <__gesf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	4c f5       	brge	.+82     	; 0x1ec0 <Lcd_GameOver+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	51 e4       	ldi	r21, 0x41	; 65
    1e76:	69 81       	ldd	r22, Y+1	; 0x01
    1e78:	7a 81       	ldd	r23, Y+2	; 0x02
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	0e 94 17 11 	call	0x222e	; 0x222e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9a 87       	std	Y+10, r25	; 0x0a
    1e94:	89 87       	std	Y+9, r24	; 0x09
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <Lcd_GameOver+0xd0>
    1e98:	88 ec       	ldi	r24, 0xC8	; 200
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9c 87       	std	Y+12, r25	; 0x0c
    1e9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ea0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ea2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <Lcd_GameOver+0xbe>
    1ea8:	9c 87       	std	Y+12, r25	; 0x0c
    1eaa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	9a 87       	std	Y+10, r25	; 0x0a
    1eb4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb6:	89 85       	ldd	r24, Y+9	; 0x09
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	89 2b       	or	r24, r25
    1ebc:	69 f7       	brne	.-38     	; 0x1e98 <Lcd_GameOver+0xb2>
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <Lcd_GameOver+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ec4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec6:	98 85       	ldd	r25, Y+8	; 0x08
    1ec8:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9a 87       	std	Y+10, r25	; 0x0a
    1ed2:	89 87       	std	Y+9, r24	; 0x09
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	9e 87       	std	Y+14, r25	; 0x0e
    1eda:	8d 87       	std	Y+13, r24	; 0x0d
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <Lcd_GameOver+0xfa>
    1ee4:	9e 87       	std	Y+14, r25	; 0x0e
    1ee6:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(3);
	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2,LCD_COL5);
    1ee8:	45 e0       	ldi	r20, 0x05	; 5
    1eea:	62 e0       	ldi	r22, 0x02	; 2
    1eec:	88 e8       	ldi	r24, 0x88	; 136
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 2a 07 	call	0xe54	; 0xe54 <Lcd_4bit_enuGoToXY>

	Lcd_4bit_enuDisplayString(&Lcd, " GAME OVER");
    1ef4:	66 eb       	ldi	r22, 0xB6	; 182
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	88 e8       	ldi	r24, 0x88	; 136
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 9c 07 	call	0xf38	; 0xf38 <Lcd_4bit_enuDisplayString>



}
    1f00:	00 00       	nop
    1f02:	2e 96       	adiw	r28, 0x0e	; 14
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <__subsf3>:
    1f14:	50 58       	subi	r21, 0x80	; 128

00001f16 <__addsf3>:
    1f16:	bb 27       	eor	r27, r27
    1f18:	aa 27       	eor	r26, r26
    1f1a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__addsf3x>
    1f1e:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_round>
    1f22:	0e 94 ca 10 	call	0x2194	; 0x2194 <__fp_pscA>
    1f26:	38 f0       	brcs	.+14     	; 0x1f36 <__addsf3+0x20>
    1f28:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__fp_pscB>
    1f2c:	20 f0       	brcs	.+8      	; 0x1f36 <__addsf3+0x20>
    1f2e:	39 f4       	brne	.+14     	; 0x1f3e <__addsf3+0x28>
    1f30:	9f 3f       	cpi	r25, 0xFF	; 255
    1f32:	19 f4       	brne	.+6      	; 0x1f3a <__addsf3+0x24>
    1f34:	26 f4       	brtc	.+8      	; 0x1f3e <__addsf3+0x28>
    1f36:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__fp_nan>
    1f3a:	0e f4       	brtc	.+2      	; 0x1f3e <__addsf3+0x28>
    1f3c:	e0 95       	com	r30
    1f3e:	e7 fb       	bst	r30, 7
    1f40:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__fp_inf>

00001f44 <__addsf3x>:
    1f44:	e9 2f       	mov	r30, r25
    1f46:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__fp_split3>
    1f4a:	58 f3       	brcs	.-42     	; 0x1f22 <__addsf3+0xc>
    1f4c:	ba 17       	cp	r27, r26
    1f4e:	62 07       	cpc	r22, r18
    1f50:	73 07       	cpc	r23, r19
    1f52:	84 07       	cpc	r24, r20
    1f54:	95 07       	cpc	r25, r21
    1f56:	20 f0       	brcs	.+8      	; 0x1f60 <__addsf3x+0x1c>
    1f58:	79 f4       	brne	.+30     	; 0x1f78 <__addsf3x+0x34>
    1f5a:	a6 f5       	brtc	.+104    	; 0x1fc4 <__addsf3x+0x80>
    1f5c:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__fp_zero>
    1f60:	0e f4       	brtc	.+2      	; 0x1f64 <__addsf3x+0x20>
    1f62:	e0 95       	com	r30
    1f64:	0b 2e       	mov	r0, r27
    1f66:	ba 2f       	mov	r27, r26
    1f68:	a0 2d       	mov	r26, r0
    1f6a:	0b 01       	movw	r0, r22
    1f6c:	b9 01       	movw	r22, r18
    1f6e:	90 01       	movw	r18, r0
    1f70:	0c 01       	movw	r0, r24
    1f72:	ca 01       	movw	r24, r20
    1f74:	a0 01       	movw	r20, r0
    1f76:	11 24       	eor	r1, r1
    1f78:	ff 27       	eor	r31, r31
    1f7a:	59 1b       	sub	r21, r25
    1f7c:	99 f0       	breq	.+38     	; 0x1fa4 <__addsf3x+0x60>
    1f7e:	59 3f       	cpi	r21, 0xF9	; 249
    1f80:	50 f4       	brcc	.+20     	; 0x1f96 <__addsf3x+0x52>
    1f82:	50 3e       	cpi	r21, 0xE0	; 224
    1f84:	68 f1       	brcs	.+90     	; 0x1fe0 <__addsf3x+0x9c>
    1f86:	1a 16       	cp	r1, r26
    1f88:	f0 40       	sbci	r31, 0x00	; 0
    1f8a:	a2 2f       	mov	r26, r18
    1f8c:	23 2f       	mov	r18, r19
    1f8e:	34 2f       	mov	r19, r20
    1f90:	44 27       	eor	r20, r20
    1f92:	58 5f       	subi	r21, 0xF8	; 248
    1f94:	f3 cf       	rjmp	.-26     	; 0x1f7c <__addsf3x+0x38>
    1f96:	46 95       	lsr	r20
    1f98:	37 95       	ror	r19
    1f9a:	27 95       	ror	r18
    1f9c:	a7 95       	ror	r26
    1f9e:	f0 40       	sbci	r31, 0x00	; 0
    1fa0:	53 95       	inc	r21
    1fa2:	c9 f7       	brne	.-14     	; 0x1f96 <__addsf3x+0x52>
    1fa4:	7e f4       	brtc	.+30     	; 0x1fc4 <__addsf3x+0x80>
    1fa6:	1f 16       	cp	r1, r31
    1fa8:	ba 0b       	sbc	r27, r26
    1faa:	62 0b       	sbc	r22, r18
    1fac:	73 0b       	sbc	r23, r19
    1fae:	84 0b       	sbc	r24, r20
    1fb0:	ba f0       	brmi	.+46     	; 0x1fe0 <__addsf3x+0x9c>
    1fb2:	91 50       	subi	r25, 0x01	; 1
    1fb4:	a1 f0       	breq	.+40     	; 0x1fde <__addsf3x+0x9a>
    1fb6:	ff 0f       	add	r31, r31
    1fb8:	bb 1f       	adc	r27, r27
    1fba:	66 1f       	adc	r22, r22
    1fbc:	77 1f       	adc	r23, r23
    1fbe:	88 1f       	adc	r24, r24
    1fc0:	c2 f7       	brpl	.-16     	; 0x1fb2 <__addsf3x+0x6e>
    1fc2:	0e c0       	rjmp	.+28     	; 0x1fe0 <__addsf3x+0x9c>
    1fc4:	ba 0f       	add	r27, r26
    1fc6:	62 1f       	adc	r22, r18
    1fc8:	73 1f       	adc	r23, r19
    1fca:	84 1f       	adc	r24, r20
    1fcc:	48 f4       	brcc	.+18     	; 0x1fe0 <__addsf3x+0x9c>
    1fce:	87 95       	ror	r24
    1fd0:	77 95       	ror	r23
    1fd2:	67 95       	ror	r22
    1fd4:	b7 95       	ror	r27
    1fd6:	f7 95       	ror	r31
    1fd8:	9e 3f       	cpi	r25, 0xFE	; 254
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <__addsf3x+0x9a>
    1fdc:	b0 cf       	rjmp	.-160    	; 0x1f3e <__addsf3+0x28>
    1fde:	93 95       	inc	r25
    1fe0:	88 0f       	add	r24, r24
    1fe2:	08 f0       	brcs	.+2      	; 0x1fe6 <__addsf3x+0xa2>
    1fe4:	99 27       	eor	r25, r25
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	97 95       	ror	r25
    1fea:	87 95       	ror	r24
    1fec:	08 95       	ret

00001fee <__cmpsf2>:
    1fee:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_cmp>
    1ff2:	08 f4       	brcc	.+2      	; 0x1ff6 <__cmpsf2+0x8>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	08 95       	ret

00001ff8 <__divsf3>:
    1ff8:	0e 94 10 10 	call	0x2020	; 0x2020 <__divsf3x>
    1ffc:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_round>
    2000:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__fp_pscB>
    2004:	58 f0       	brcs	.+22     	; 0x201c <__divsf3+0x24>
    2006:	0e 94 ca 10 	call	0x2194	; 0x2194 <__fp_pscA>
    200a:	40 f0       	brcs	.+16     	; 0x201c <__divsf3+0x24>
    200c:	29 f4       	brne	.+10     	; 0x2018 <__divsf3+0x20>
    200e:	5f 3f       	cpi	r21, 0xFF	; 255
    2010:	29 f0       	breq	.+10     	; 0x201c <__divsf3+0x24>
    2012:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__fp_inf>
    2016:	51 11       	cpse	r21, r1
    2018:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__fp_szero>
    201c:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__fp_nan>

00002020 <__divsf3x>:
    2020:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__fp_split3>
    2024:	68 f3       	brcs	.-38     	; 0x2000 <__divsf3+0x8>

00002026 <__divsf3_pse>:
    2026:	99 23       	and	r25, r25
    2028:	b1 f3       	breq	.-20     	; 0x2016 <__divsf3+0x1e>
    202a:	55 23       	and	r21, r21
    202c:	91 f3       	breq	.-28     	; 0x2012 <__divsf3+0x1a>
    202e:	95 1b       	sub	r25, r21
    2030:	55 0b       	sbc	r21, r21
    2032:	bb 27       	eor	r27, r27
    2034:	aa 27       	eor	r26, r26
    2036:	62 17       	cp	r22, r18
    2038:	73 07       	cpc	r23, r19
    203a:	84 07       	cpc	r24, r20
    203c:	38 f0       	brcs	.+14     	; 0x204c <__divsf3_pse+0x26>
    203e:	9f 5f       	subi	r25, 0xFF	; 255
    2040:	5f 4f       	sbci	r21, 0xFF	; 255
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	44 1f       	adc	r20, r20
    2048:	aa 1f       	adc	r26, r26
    204a:	a9 f3       	breq	.-22     	; 0x2036 <__divsf3_pse+0x10>
    204c:	35 d0       	rcall	.+106    	; 0x20b8 <__divsf3_pse+0x92>
    204e:	0e 2e       	mov	r0, r30
    2050:	3a f0       	brmi	.+14     	; 0x2060 <__divsf3_pse+0x3a>
    2052:	e0 e8       	ldi	r30, 0x80	; 128
    2054:	32 d0       	rcall	.+100    	; 0x20ba <__divsf3_pse+0x94>
    2056:	91 50       	subi	r25, 0x01	; 1
    2058:	50 40       	sbci	r21, 0x00	; 0
    205a:	e6 95       	lsr	r30
    205c:	00 1c       	adc	r0, r0
    205e:	ca f7       	brpl	.-14     	; 0x2052 <__divsf3_pse+0x2c>
    2060:	2b d0       	rcall	.+86     	; 0x20b8 <__divsf3_pse+0x92>
    2062:	fe 2f       	mov	r31, r30
    2064:	29 d0       	rcall	.+82     	; 0x20b8 <__divsf3_pse+0x92>
    2066:	66 0f       	add	r22, r22
    2068:	77 1f       	adc	r23, r23
    206a:	88 1f       	adc	r24, r24
    206c:	bb 1f       	adc	r27, r27
    206e:	26 17       	cp	r18, r22
    2070:	37 07       	cpc	r19, r23
    2072:	48 07       	cpc	r20, r24
    2074:	ab 07       	cpc	r26, r27
    2076:	b0 e8       	ldi	r27, 0x80	; 128
    2078:	09 f0       	breq	.+2      	; 0x207c <__divsf3_pse+0x56>
    207a:	bb 0b       	sbc	r27, r27
    207c:	80 2d       	mov	r24, r0
    207e:	bf 01       	movw	r22, r30
    2080:	ff 27       	eor	r31, r31
    2082:	93 58       	subi	r25, 0x83	; 131
    2084:	5f 4f       	sbci	r21, 0xFF	; 255
    2086:	3a f0       	brmi	.+14     	; 0x2096 <__divsf3_pse+0x70>
    2088:	9e 3f       	cpi	r25, 0xFE	; 254
    208a:	51 05       	cpc	r21, r1
    208c:	78 f0       	brcs	.+30     	; 0x20ac <__divsf3_pse+0x86>
    208e:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__fp_inf>
    2092:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__fp_szero>
    2096:	5f 3f       	cpi	r21, 0xFF	; 255
    2098:	e4 f3       	brlt	.-8      	; 0x2092 <__divsf3_pse+0x6c>
    209a:	98 3e       	cpi	r25, 0xE8	; 232
    209c:	d4 f3       	brlt	.-12     	; 0x2092 <__divsf3_pse+0x6c>
    209e:	86 95       	lsr	r24
    20a0:	77 95       	ror	r23
    20a2:	67 95       	ror	r22
    20a4:	b7 95       	ror	r27
    20a6:	f7 95       	ror	r31
    20a8:	9f 5f       	subi	r25, 0xFF	; 255
    20aa:	c9 f7       	brne	.-14     	; 0x209e <__divsf3_pse+0x78>
    20ac:	88 0f       	add	r24, r24
    20ae:	91 1d       	adc	r25, r1
    20b0:	96 95       	lsr	r25
    20b2:	87 95       	ror	r24
    20b4:	97 f9       	bld	r25, 7
    20b6:	08 95       	ret
    20b8:	e1 e0       	ldi	r30, 0x01	; 1
    20ba:	66 0f       	add	r22, r22
    20bc:	77 1f       	adc	r23, r23
    20be:	88 1f       	adc	r24, r24
    20c0:	bb 1f       	adc	r27, r27
    20c2:	62 17       	cp	r22, r18
    20c4:	73 07       	cpc	r23, r19
    20c6:	84 07       	cpc	r24, r20
    20c8:	ba 07       	cpc	r27, r26
    20ca:	20 f0       	brcs	.+8      	; 0x20d4 <__divsf3_pse+0xae>
    20cc:	62 1b       	sub	r22, r18
    20ce:	73 0b       	sbc	r23, r19
    20d0:	84 0b       	sbc	r24, r20
    20d2:	ba 0b       	sbc	r27, r26
    20d4:	ee 1f       	adc	r30, r30
    20d6:	88 f7       	brcc	.-30     	; 0x20ba <__divsf3_pse+0x94>
    20d8:	e0 95       	com	r30
    20da:	08 95       	ret

000020dc <__fixunssfsi>:
    20dc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__fp_splitA>
    20e0:	88 f0       	brcs	.+34     	; 0x2104 <__fixunssfsi+0x28>
    20e2:	9f 57       	subi	r25, 0x7F	; 127
    20e4:	98 f0       	brcs	.+38     	; 0x210c <__fixunssfsi+0x30>
    20e6:	b9 2f       	mov	r27, r25
    20e8:	99 27       	eor	r25, r25
    20ea:	b7 51       	subi	r27, 0x17	; 23
    20ec:	b0 f0       	brcs	.+44     	; 0x211a <__fixunssfsi+0x3e>
    20ee:	e1 f0       	breq	.+56     	; 0x2128 <__fixunssfsi+0x4c>
    20f0:	66 0f       	add	r22, r22
    20f2:	77 1f       	adc	r23, r23
    20f4:	88 1f       	adc	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	1a f0       	brmi	.+6      	; 0x2100 <__fixunssfsi+0x24>
    20fa:	ba 95       	dec	r27
    20fc:	c9 f7       	brne	.-14     	; 0x20f0 <__fixunssfsi+0x14>
    20fe:	14 c0       	rjmp	.+40     	; 0x2128 <__fixunssfsi+0x4c>
    2100:	b1 30       	cpi	r27, 0x01	; 1
    2102:	91 f0       	breq	.+36     	; 0x2128 <__fixunssfsi+0x4c>
    2104:	0e 94 0b 11 	call	0x2216	; 0x2216 <__fp_zero>
    2108:	b1 e0       	ldi	r27, 0x01	; 1
    210a:	08 95       	ret
    210c:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__fp_zero>
    2110:	67 2f       	mov	r22, r23
    2112:	78 2f       	mov	r23, r24
    2114:	88 27       	eor	r24, r24
    2116:	b8 5f       	subi	r27, 0xF8	; 248
    2118:	39 f0       	breq	.+14     	; 0x2128 <__fixunssfsi+0x4c>
    211a:	b9 3f       	cpi	r27, 0xF9	; 249
    211c:	cc f3       	brlt	.-14     	; 0x2110 <__fixunssfsi+0x34>
    211e:	86 95       	lsr	r24
    2120:	77 95       	ror	r23
    2122:	67 95       	ror	r22
    2124:	b3 95       	inc	r27
    2126:	d9 f7       	brne	.-10     	; 0x211e <__fixunssfsi+0x42>
    2128:	3e f4       	brtc	.+14     	; 0x2138 <__fixunssfsi+0x5c>
    212a:	90 95       	com	r25
    212c:	80 95       	com	r24
    212e:	70 95       	com	r23
    2130:	61 95       	neg	r22
    2132:	7f 4f       	sbci	r23, 0xFF	; 255
    2134:	8f 4f       	sbci	r24, 0xFF	; 255
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	08 95       	ret

0000213a <__fp_cmp>:
    213a:	99 0f       	add	r25, r25
    213c:	00 08       	sbc	r0, r0
    213e:	55 0f       	add	r21, r21
    2140:	aa 0b       	sbc	r26, r26
    2142:	e0 e8       	ldi	r30, 0x80	; 128
    2144:	fe ef       	ldi	r31, 0xFE	; 254
    2146:	16 16       	cp	r1, r22
    2148:	17 06       	cpc	r1, r23
    214a:	e8 07       	cpc	r30, r24
    214c:	f9 07       	cpc	r31, r25
    214e:	c0 f0       	brcs	.+48     	; 0x2180 <__fp_cmp+0x46>
    2150:	12 16       	cp	r1, r18
    2152:	13 06       	cpc	r1, r19
    2154:	e4 07       	cpc	r30, r20
    2156:	f5 07       	cpc	r31, r21
    2158:	98 f0       	brcs	.+38     	; 0x2180 <__fp_cmp+0x46>
    215a:	62 1b       	sub	r22, r18
    215c:	73 0b       	sbc	r23, r19
    215e:	84 0b       	sbc	r24, r20
    2160:	95 0b       	sbc	r25, r21
    2162:	39 f4       	brne	.+14     	; 0x2172 <__fp_cmp+0x38>
    2164:	0a 26       	eor	r0, r26
    2166:	61 f0       	breq	.+24     	; 0x2180 <__fp_cmp+0x46>
    2168:	23 2b       	or	r18, r19
    216a:	24 2b       	or	r18, r20
    216c:	25 2b       	or	r18, r21
    216e:	21 f4       	brne	.+8      	; 0x2178 <__fp_cmp+0x3e>
    2170:	08 95       	ret
    2172:	0a 26       	eor	r0, r26
    2174:	09 f4       	brne	.+2      	; 0x2178 <__fp_cmp+0x3e>
    2176:	a1 40       	sbci	r26, 0x01	; 1
    2178:	a6 95       	lsr	r26
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	81 1d       	adc	r24, r1
    217e:	81 1d       	adc	r24, r1
    2180:	08 95       	ret

00002182 <__fp_inf>:
    2182:	97 f9       	bld	r25, 7
    2184:	9f 67       	ori	r25, 0x7F	; 127
    2186:	80 e8       	ldi	r24, 0x80	; 128
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	08 95       	ret

0000218e <__fp_nan>:
    218e:	9f ef       	ldi	r25, 0xFF	; 255
    2190:	80 ec       	ldi	r24, 0xC0	; 192
    2192:	08 95       	ret

00002194 <__fp_pscA>:
    2194:	00 24       	eor	r0, r0
    2196:	0a 94       	dec	r0
    2198:	16 16       	cp	r1, r22
    219a:	17 06       	cpc	r1, r23
    219c:	18 06       	cpc	r1, r24
    219e:	09 06       	cpc	r0, r25
    21a0:	08 95       	ret

000021a2 <__fp_pscB>:
    21a2:	00 24       	eor	r0, r0
    21a4:	0a 94       	dec	r0
    21a6:	12 16       	cp	r1, r18
    21a8:	13 06       	cpc	r1, r19
    21aa:	14 06       	cpc	r1, r20
    21ac:	05 06       	cpc	r0, r21
    21ae:	08 95       	ret

000021b0 <__fp_round>:
    21b0:	09 2e       	mov	r0, r25
    21b2:	03 94       	inc	r0
    21b4:	00 0c       	add	r0, r0
    21b6:	11 f4       	brne	.+4      	; 0x21bc <__fp_round+0xc>
    21b8:	88 23       	and	r24, r24
    21ba:	52 f0       	brmi	.+20     	; 0x21d0 <__fp_round+0x20>
    21bc:	bb 0f       	add	r27, r27
    21be:	40 f4       	brcc	.+16     	; 0x21d0 <__fp_round+0x20>
    21c0:	bf 2b       	or	r27, r31
    21c2:	11 f4       	brne	.+4      	; 0x21c8 <__fp_round+0x18>
    21c4:	60 ff       	sbrs	r22, 0
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <__fp_round+0x20>
    21c8:	6f 5f       	subi	r22, 0xFF	; 255
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	8f 4f       	sbci	r24, 0xFF	; 255
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	08 95       	ret

000021d2 <__fp_split3>:
    21d2:	57 fd       	sbrc	r21, 7
    21d4:	90 58       	subi	r25, 0x80	; 128
    21d6:	44 0f       	add	r20, r20
    21d8:	55 1f       	adc	r21, r21
    21da:	59 f0       	breq	.+22     	; 0x21f2 <__fp_splitA+0x10>
    21dc:	5f 3f       	cpi	r21, 0xFF	; 255
    21de:	71 f0       	breq	.+28     	; 0x21fc <__fp_splitA+0x1a>
    21e0:	47 95       	ror	r20

000021e2 <__fp_splitA>:
    21e2:	88 0f       	add	r24, r24
    21e4:	97 fb       	bst	r25, 7
    21e6:	99 1f       	adc	r25, r25
    21e8:	61 f0       	breq	.+24     	; 0x2202 <__fp_splitA+0x20>
    21ea:	9f 3f       	cpi	r25, 0xFF	; 255
    21ec:	79 f0       	breq	.+30     	; 0x220c <__fp_splitA+0x2a>
    21ee:	87 95       	ror	r24
    21f0:	08 95       	ret
    21f2:	12 16       	cp	r1, r18
    21f4:	13 06       	cpc	r1, r19
    21f6:	14 06       	cpc	r1, r20
    21f8:	55 1f       	adc	r21, r21
    21fa:	f2 cf       	rjmp	.-28     	; 0x21e0 <__fp_split3+0xe>
    21fc:	46 95       	lsr	r20
    21fe:	f1 df       	rcall	.-30     	; 0x21e2 <__fp_splitA>
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <__fp_splitA+0x30>
    2202:	16 16       	cp	r1, r22
    2204:	17 06       	cpc	r1, r23
    2206:	18 06       	cpc	r1, r24
    2208:	99 1f       	adc	r25, r25
    220a:	f1 cf       	rjmp	.-30     	; 0x21ee <__fp_splitA+0xc>
    220c:	86 95       	lsr	r24
    220e:	71 05       	cpc	r23, r1
    2210:	61 05       	cpc	r22, r1
    2212:	08 94       	sec
    2214:	08 95       	ret

00002216 <__fp_zero>:
    2216:	e8 94       	clt

00002218 <__fp_szero>:
    2218:	bb 27       	eor	r27, r27
    221a:	66 27       	eor	r22, r22
    221c:	77 27       	eor	r23, r23
    221e:	cb 01       	movw	r24, r22
    2220:	97 f9       	bld	r25, 7
    2222:	08 95       	ret

00002224 <__gesf2>:
    2224:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_cmp>
    2228:	08 f4       	brcc	.+2      	; 0x222c <__gesf2+0x8>
    222a:	8f ef       	ldi	r24, 0xFF	; 255
    222c:	08 95       	ret

0000222e <__mulsf3>:
    222e:	0e 94 2a 11 	call	0x2254	; 0x2254 <__mulsf3x>
    2232:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_round>
    2236:	0e 94 ca 10 	call	0x2194	; 0x2194 <__fp_pscA>
    223a:	38 f0       	brcs	.+14     	; 0x224a <__mulsf3+0x1c>
    223c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <__fp_pscB>
    2240:	20 f0       	brcs	.+8      	; 0x224a <__mulsf3+0x1c>
    2242:	95 23       	and	r25, r21
    2244:	11 f0       	breq	.+4      	; 0x224a <__mulsf3+0x1c>
    2246:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__fp_inf>
    224a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__fp_nan>
    224e:	11 24       	eor	r1, r1
    2250:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__fp_szero>

00002254 <__mulsf3x>:
    2254:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__fp_split3>
    2258:	70 f3       	brcs	.-36     	; 0x2236 <__mulsf3+0x8>

0000225a <__mulsf3_pse>:
    225a:	95 9f       	mul	r25, r21
    225c:	c1 f3       	breq	.-16     	; 0x224e <__mulsf3+0x20>
    225e:	95 0f       	add	r25, r21
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	55 1f       	adc	r21, r21
    2264:	62 9f       	mul	r22, r18
    2266:	f0 01       	movw	r30, r0
    2268:	72 9f       	mul	r23, r18
    226a:	bb 27       	eor	r27, r27
    226c:	f0 0d       	add	r31, r0
    226e:	b1 1d       	adc	r27, r1
    2270:	63 9f       	mul	r22, r19
    2272:	aa 27       	eor	r26, r26
    2274:	f0 0d       	add	r31, r0
    2276:	b1 1d       	adc	r27, r1
    2278:	aa 1f       	adc	r26, r26
    227a:	64 9f       	mul	r22, r20
    227c:	66 27       	eor	r22, r22
    227e:	b0 0d       	add	r27, r0
    2280:	a1 1d       	adc	r26, r1
    2282:	66 1f       	adc	r22, r22
    2284:	82 9f       	mul	r24, r18
    2286:	22 27       	eor	r18, r18
    2288:	b0 0d       	add	r27, r0
    228a:	a1 1d       	adc	r26, r1
    228c:	62 1f       	adc	r22, r18
    228e:	73 9f       	mul	r23, r19
    2290:	b0 0d       	add	r27, r0
    2292:	a1 1d       	adc	r26, r1
    2294:	62 1f       	adc	r22, r18
    2296:	83 9f       	mul	r24, r19
    2298:	a0 0d       	add	r26, r0
    229a:	61 1d       	adc	r22, r1
    229c:	22 1f       	adc	r18, r18
    229e:	74 9f       	mul	r23, r20
    22a0:	33 27       	eor	r19, r19
    22a2:	a0 0d       	add	r26, r0
    22a4:	61 1d       	adc	r22, r1
    22a6:	23 1f       	adc	r18, r19
    22a8:	84 9f       	mul	r24, r20
    22aa:	60 0d       	add	r22, r0
    22ac:	21 1d       	adc	r18, r1
    22ae:	82 2f       	mov	r24, r18
    22b0:	76 2f       	mov	r23, r22
    22b2:	6a 2f       	mov	r22, r26
    22b4:	11 24       	eor	r1, r1
    22b6:	9f 57       	subi	r25, 0x7F	; 127
    22b8:	50 40       	sbci	r21, 0x00	; 0
    22ba:	9a f0       	brmi	.+38     	; 0x22e2 <__mulsf3_pse+0x88>
    22bc:	f1 f0       	breq	.+60     	; 0x22fa <__mulsf3_pse+0xa0>
    22be:	88 23       	and	r24, r24
    22c0:	4a f0       	brmi	.+18     	; 0x22d4 <__mulsf3_pse+0x7a>
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	bb 1f       	adc	r27, r27
    22c8:	66 1f       	adc	r22, r22
    22ca:	77 1f       	adc	r23, r23
    22cc:	88 1f       	adc	r24, r24
    22ce:	91 50       	subi	r25, 0x01	; 1
    22d0:	50 40       	sbci	r21, 0x00	; 0
    22d2:	a9 f7       	brne	.-22     	; 0x22be <__mulsf3_pse+0x64>
    22d4:	9e 3f       	cpi	r25, 0xFE	; 254
    22d6:	51 05       	cpc	r21, r1
    22d8:	80 f0       	brcs	.+32     	; 0x22fa <__mulsf3_pse+0xa0>
    22da:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <__fp_inf>
    22de:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <__fp_szero>
    22e2:	5f 3f       	cpi	r21, 0xFF	; 255
    22e4:	e4 f3       	brlt	.-8      	; 0x22de <__mulsf3_pse+0x84>
    22e6:	98 3e       	cpi	r25, 0xE8	; 232
    22e8:	d4 f3       	brlt	.-12     	; 0x22de <__mulsf3_pse+0x84>
    22ea:	86 95       	lsr	r24
    22ec:	77 95       	ror	r23
    22ee:	67 95       	ror	r22
    22f0:	b7 95       	ror	r27
    22f2:	f7 95       	ror	r31
    22f4:	e7 95       	ror	r30
    22f6:	9f 5f       	subi	r25, 0xFF	; 255
    22f8:	c1 f7       	brne	.-16     	; 0x22ea <__mulsf3_pse+0x90>
    22fa:	fe 2b       	or	r31, r30
    22fc:	88 0f       	add	r24, r24
    22fe:	91 1d       	adc	r25, r1
    2300:	96 95       	lsr	r25
    2302:	87 95       	ror	r24
    2304:	97 f9       	bld	r25, 7
    2306:	08 95       	ret

00002308 <sprintf>:
    2308:	ae e0       	ldi	r26, 0x0E	; 14
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	ea e8       	ldi	r30, 0x8A	; 138
    230e:	f1 e1       	ldi	r31, 0x11	; 17
    2310:	0c 94 45 14 	jmp	0x288a	; 0x288a <__prologue_saves__+0x1c>
    2314:	0d 89       	ldd	r16, Y+21	; 0x15
    2316:	1e 89       	ldd	r17, Y+22	; 0x16
    2318:	86 e0       	ldi	r24, 0x06	; 6
    231a:	8c 83       	std	Y+4, r24	; 0x04
    231c:	1a 83       	std	Y+2, r17	; 0x02
    231e:	09 83       	std	Y+1, r16	; 0x01
    2320:	8f ef       	ldi	r24, 0xFF	; 255
    2322:	9f e7       	ldi	r25, 0x7F	; 127
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	ae 01       	movw	r20, r28
    232a:	47 5e       	subi	r20, 0xE7	; 231
    232c:	5f 4f       	sbci	r21, 0xFF	; 255
    232e:	6f 89       	ldd	r22, Y+23	; 0x17
    2330:	78 8d       	ldd	r23, Y+24	; 0x18
    2332:	ce 01       	movw	r24, r28
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	0e 94 a6 11 	call	0x234c	; 0x234c <vfprintf>
    233a:	ef 81       	ldd	r30, Y+7	; 0x07
    233c:	f8 85       	ldd	r31, Y+8	; 0x08
    233e:	e0 0f       	add	r30, r16
    2340:	f1 1f       	adc	r31, r17
    2342:	10 82       	st	Z, r1
    2344:	2e 96       	adiw	r28, 0x0e	; 14
    2346:	e4 e0       	ldi	r30, 0x04	; 4
    2348:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__epilogue_restores__+0x1c>

0000234c <vfprintf>:
    234c:	ab e0       	ldi	r26, 0x0B	; 11
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	ec ea       	ldi	r30, 0xAC	; 172
    2352:	f1 e1       	ldi	r31, 0x11	; 17
    2354:	0c 94 37 14 	jmp	0x286e	; 0x286e <__prologue_saves__>
    2358:	6c 01       	movw	r12, r24
    235a:	7b 01       	movw	r14, r22
    235c:	8a 01       	movw	r16, r20
    235e:	fc 01       	movw	r30, r24
    2360:	17 82       	std	Z+7, r1	; 0x07
    2362:	16 82       	std	Z+6, r1	; 0x06
    2364:	83 81       	ldd	r24, Z+3	; 0x03
    2366:	81 ff       	sbrs	r24, 1
    2368:	cc c1       	rjmp	.+920    	; 0x2702 <vfprintf+0x3b6>
    236a:	ce 01       	movw	r24, r28
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	3c 01       	movw	r6, r24
    2370:	f6 01       	movw	r30, r12
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	f7 01       	movw	r30, r14
    2376:	93 fd       	sbrc	r25, 3
    2378:	85 91       	lpm	r24, Z+
    237a:	93 ff       	sbrs	r25, 3
    237c:	81 91       	ld	r24, Z+
    237e:	7f 01       	movw	r14, r30
    2380:	88 23       	and	r24, r24
    2382:	09 f4       	brne	.+2      	; 0x2386 <vfprintf+0x3a>
    2384:	ba c1       	rjmp	.+884    	; 0x26fa <vfprintf+0x3ae>
    2386:	85 32       	cpi	r24, 0x25	; 37
    2388:	39 f4       	brne	.+14     	; 0x2398 <vfprintf+0x4c>
    238a:	93 fd       	sbrc	r25, 3
    238c:	85 91       	lpm	r24, Z+
    238e:	93 ff       	sbrs	r25, 3
    2390:	81 91       	ld	r24, Z+
    2392:	7f 01       	movw	r14, r30
    2394:	85 32       	cpi	r24, 0x25	; 37
    2396:	29 f4       	brne	.+10     	; 0x23a2 <vfprintf+0x56>
    2398:	b6 01       	movw	r22, r12
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 9d 13 	call	0x273a	; 0x273a <fputc>
    23a0:	e7 cf       	rjmp	.-50     	; 0x2370 <vfprintf+0x24>
    23a2:	91 2c       	mov	r9, r1
    23a4:	21 2c       	mov	r2, r1
    23a6:	31 2c       	mov	r3, r1
    23a8:	ff e1       	ldi	r31, 0x1F	; 31
    23aa:	f3 15       	cp	r31, r3
    23ac:	d8 f0       	brcs	.+54     	; 0x23e4 <vfprintf+0x98>
    23ae:	8b 32       	cpi	r24, 0x2B	; 43
    23b0:	79 f0       	breq	.+30     	; 0x23d0 <vfprintf+0x84>
    23b2:	38 f4       	brcc	.+14     	; 0x23c2 <vfprintf+0x76>
    23b4:	80 32       	cpi	r24, 0x20	; 32
    23b6:	79 f0       	breq	.+30     	; 0x23d6 <vfprintf+0x8a>
    23b8:	83 32       	cpi	r24, 0x23	; 35
    23ba:	a1 f4       	brne	.+40     	; 0x23e4 <vfprintf+0x98>
    23bc:	23 2d       	mov	r18, r3
    23be:	20 61       	ori	r18, 0x10	; 16
    23c0:	1d c0       	rjmp	.+58     	; 0x23fc <vfprintf+0xb0>
    23c2:	8d 32       	cpi	r24, 0x2D	; 45
    23c4:	61 f0       	breq	.+24     	; 0x23de <vfprintf+0x92>
    23c6:	80 33       	cpi	r24, 0x30	; 48
    23c8:	69 f4       	brne	.+26     	; 0x23e4 <vfprintf+0x98>
    23ca:	23 2d       	mov	r18, r3
    23cc:	21 60       	ori	r18, 0x01	; 1
    23ce:	16 c0       	rjmp	.+44     	; 0x23fc <vfprintf+0xb0>
    23d0:	83 2d       	mov	r24, r3
    23d2:	82 60       	ori	r24, 0x02	; 2
    23d4:	38 2e       	mov	r3, r24
    23d6:	e3 2d       	mov	r30, r3
    23d8:	e4 60       	ori	r30, 0x04	; 4
    23da:	3e 2e       	mov	r3, r30
    23dc:	2a c0       	rjmp	.+84     	; 0x2432 <vfprintf+0xe6>
    23de:	f3 2d       	mov	r31, r3
    23e0:	f8 60       	ori	r31, 0x08	; 8
    23e2:	1d c0       	rjmp	.+58     	; 0x241e <vfprintf+0xd2>
    23e4:	37 fc       	sbrc	r3, 7
    23e6:	2d c0       	rjmp	.+90     	; 0x2442 <vfprintf+0xf6>
    23e8:	20 ed       	ldi	r18, 0xD0	; 208
    23ea:	28 0f       	add	r18, r24
    23ec:	2a 30       	cpi	r18, 0x0A	; 10
    23ee:	40 f0       	brcs	.+16     	; 0x2400 <vfprintf+0xb4>
    23f0:	8e 32       	cpi	r24, 0x2E	; 46
    23f2:	b9 f4       	brne	.+46     	; 0x2422 <vfprintf+0xd6>
    23f4:	36 fc       	sbrc	r3, 6
    23f6:	81 c1       	rjmp	.+770    	; 0x26fa <vfprintf+0x3ae>
    23f8:	23 2d       	mov	r18, r3
    23fa:	20 64       	ori	r18, 0x40	; 64
    23fc:	32 2e       	mov	r3, r18
    23fe:	19 c0       	rjmp	.+50     	; 0x2432 <vfprintf+0xe6>
    2400:	36 fe       	sbrs	r3, 6
    2402:	06 c0       	rjmp	.+12     	; 0x2410 <vfprintf+0xc4>
    2404:	8a e0       	ldi	r24, 0x0A	; 10
    2406:	98 9e       	mul	r9, r24
    2408:	20 0d       	add	r18, r0
    240a:	11 24       	eor	r1, r1
    240c:	92 2e       	mov	r9, r18
    240e:	11 c0       	rjmp	.+34     	; 0x2432 <vfprintf+0xe6>
    2410:	ea e0       	ldi	r30, 0x0A	; 10
    2412:	2e 9e       	mul	r2, r30
    2414:	20 0d       	add	r18, r0
    2416:	11 24       	eor	r1, r1
    2418:	22 2e       	mov	r2, r18
    241a:	f3 2d       	mov	r31, r3
    241c:	f0 62       	ori	r31, 0x20	; 32
    241e:	3f 2e       	mov	r3, r31
    2420:	08 c0       	rjmp	.+16     	; 0x2432 <vfprintf+0xe6>
    2422:	8c 36       	cpi	r24, 0x6C	; 108
    2424:	21 f4       	brne	.+8      	; 0x242e <vfprintf+0xe2>
    2426:	83 2d       	mov	r24, r3
    2428:	80 68       	ori	r24, 0x80	; 128
    242a:	38 2e       	mov	r3, r24
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <vfprintf+0xe6>
    242e:	88 36       	cpi	r24, 0x68	; 104
    2430:	41 f4       	brne	.+16     	; 0x2442 <vfprintf+0xf6>
    2432:	f7 01       	movw	r30, r14
    2434:	93 fd       	sbrc	r25, 3
    2436:	85 91       	lpm	r24, Z+
    2438:	93 ff       	sbrs	r25, 3
    243a:	81 91       	ld	r24, Z+
    243c:	7f 01       	movw	r14, r30
    243e:	81 11       	cpse	r24, r1
    2440:	b3 cf       	rjmp	.-154    	; 0x23a8 <vfprintf+0x5c>
    2442:	98 2f       	mov	r25, r24
    2444:	9f 7d       	andi	r25, 0xDF	; 223
    2446:	95 54       	subi	r25, 0x45	; 69
    2448:	93 30       	cpi	r25, 0x03	; 3
    244a:	28 f4       	brcc	.+10     	; 0x2456 <vfprintf+0x10a>
    244c:	0c 5f       	subi	r16, 0xFC	; 252
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	9f e3       	ldi	r25, 0x3F	; 63
    2452:	99 83       	std	Y+1, r25	; 0x01
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <vfprintf+0x124>
    2456:	83 36       	cpi	r24, 0x63	; 99
    2458:	31 f0       	breq	.+12     	; 0x2466 <vfprintf+0x11a>
    245a:	83 37       	cpi	r24, 0x73	; 115
    245c:	71 f0       	breq	.+28     	; 0x247a <vfprintf+0x12e>
    245e:	83 35       	cpi	r24, 0x53	; 83
    2460:	09 f0       	breq	.+2      	; 0x2464 <vfprintf+0x118>
    2462:	59 c0       	rjmp	.+178    	; 0x2516 <vfprintf+0x1ca>
    2464:	21 c0       	rjmp	.+66     	; 0x24a8 <vfprintf+0x15c>
    2466:	f8 01       	movw	r30, r16
    2468:	80 81       	ld	r24, Z
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	0e 5f       	subi	r16, 0xFE	; 254
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	88 24       	eor	r8, r8
    2472:	83 94       	inc	r8
    2474:	91 2c       	mov	r9, r1
    2476:	53 01       	movw	r10, r6
    2478:	13 c0       	rjmp	.+38     	; 0x24a0 <vfprintf+0x154>
    247a:	28 01       	movw	r4, r16
    247c:	f2 e0       	ldi	r31, 0x02	; 2
    247e:	4f 0e       	add	r4, r31
    2480:	51 1c       	adc	r5, r1
    2482:	f8 01       	movw	r30, r16
    2484:	a0 80       	ld	r10, Z
    2486:	b1 80       	ldd	r11, Z+1	; 0x01
    2488:	36 fe       	sbrs	r3, 6
    248a:	03 c0       	rjmp	.+6      	; 0x2492 <vfprintf+0x146>
    248c:	69 2d       	mov	r22, r9
    248e:	70 e0       	ldi	r23, 0x00	; 0
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <vfprintf+0x14a>
    2492:	6f ef       	ldi	r22, 0xFF	; 255
    2494:	7f ef       	ldi	r23, 0xFF	; 255
    2496:	c5 01       	movw	r24, r10
    2498:	0e 94 92 13 	call	0x2724	; 0x2724 <strnlen>
    249c:	4c 01       	movw	r8, r24
    249e:	82 01       	movw	r16, r4
    24a0:	f3 2d       	mov	r31, r3
    24a2:	ff 77       	andi	r31, 0x7F	; 127
    24a4:	3f 2e       	mov	r3, r31
    24a6:	16 c0       	rjmp	.+44     	; 0x24d4 <vfprintf+0x188>
    24a8:	28 01       	movw	r4, r16
    24aa:	22 e0       	ldi	r18, 0x02	; 2
    24ac:	42 0e       	add	r4, r18
    24ae:	51 1c       	adc	r5, r1
    24b0:	f8 01       	movw	r30, r16
    24b2:	a0 80       	ld	r10, Z
    24b4:	b1 80       	ldd	r11, Z+1	; 0x01
    24b6:	36 fe       	sbrs	r3, 6
    24b8:	03 c0       	rjmp	.+6      	; 0x24c0 <vfprintf+0x174>
    24ba:	69 2d       	mov	r22, r9
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <vfprintf+0x178>
    24c0:	6f ef       	ldi	r22, 0xFF	; 255
    24c2:	7f ef       	ldi	r23, 0xFF	; 255
    24c4:	c5 01       	movw	r24, r10
    24c6:	0e 94 87 13 	call	0x270e	; 0x270e <strnlen_P>
    24ca:	4c 01       	movw	r8, r24
    24cc:	f3 2d       	mov	r31, r3
    24ce:	f0 68       	ori	r31, 0x80	; 128
    24d0:	3f 2e       	mov	r3, r31
    24d2:	82 01       	movw	r16, r4
    24d4:	33 fc       	sbrc	r3, 3
    24d6:	1b c0       	rjmp	.+54     	; 0x250e <vfprintf+0x1c2>
    24d8:	82 2d       	mov	r24, r2
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	88 16       	cp	r8, r24
    24de:	99 06       	cpc	r9, r25
    24e0:	b0 f4       	brcc	.+44     	; 0x250e <vfprintf+0x1c2>
    24e2:	b6 01       	movw	r22, r12
    24e4:	80 e2       	ldi	r24, 0x20	; 32
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	0e 94 9d 13 	call	0x273a	; 0x273a <fputc>
    24ec:	2a 94       	dec	r2
    24ee:	f4 cf       	rjmp	.-24     	; 0x24d8 <vfprintf+0x18c>
    24f0:	f5 01       	movw	r30, r10
    24f2:	37 fc       	sbrc	r3, 7
    24f4:	85 91       	lpm	r24, Z+
    24f6:	37 fe       	sbrs	r3, 7
    24f8:	81 91       	ld	r24, Z+
    24fa:	5f 01       	movw	r10, r30
    24fc:	b6 01       	movw	r22, r12
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 9d 13 	call	0x273a	; 0x273a <fputc>
    2504:	21 10       	cpse	r2, r1
    2506:	2a 94       	dec	r2
    2508:	21 e0       	ldi	r18, 0x01	; 1
    250a:	82 1a       	sub	r8, r18
    250c:	91 08       	sbc	r9, r1
    250e:	81 14       	cp	r8, r1
    2510:	91 04       	cpc	r9, r1
    2512:	71 f7       	brne	.-36     	; 0x24f0 <vfprintf+0x1a4>
    2514:	e8 c0       	rjmp	.+464    	; 0x26e6 <vfprintf+0x39a>
    2516:	84 36       	cpi	r24, 0x64	; 100
    2518:	11 f0       	breq	.+4      	; 0x251e <vfprintf+0x1d2>
    251a:	89 36       	cpi	r24, 0x69	; 105
    251c:	41 f5       	brne	.+80     	; 0x256e <vfprintf+0x222>
    251e:	f8 01       	movw	r30, r16
    2520:	37 fe       	sbrs	r3, 7
    2522:	07 c0       	rjmp	.+14     	; 0x2532 <vfprintf+0x1e6>
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	0c 5f       	subi	r16, 0xFC	; 252
    252e:	1f 4f       	sbci	r17, 0xFF	; 255
    2530:	08 c0       	rjmp	.+16     	; 0x2542 <vfprintf+0x1f6>
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	07 2e       	mov	r0, r23
    2538:	00 0c       	add	r0, r0
    253a:	88 0b       	sbc	r24, r24
    253c:	99 0b       	sbc	r25, r25
    253e:	0e 5f       	subi	r16, 0xFE	; 254
    2540:	1f 4f       	sbci	r17, 0xFF	; 255
    2542:	f3 2d       	mov	r31, r3
    2544:	ff 76       	andi	r31, 0x6F	; 111
    2546:	3f 2e       	mov	r3, r31
    2548:	97 ff       	sbrs	r25, 7
    254a:	09 c0       	rjmp	.+18     	; 0x255e <vfprintf+0x212>
    254c:	90 95       	com	r25
    254e:	80 95       	com	r24
    2550:	70 95       	com	r23
    2552:	61 95       	neg	r22
    2554:	7f 4f       	sbci	r23, 0xFF	; 255
    2556:	8f 4f       	sbci	r24, 0xFF	; 255
    2558:	9f 4f       	sbci	r25, 0xFF	; 255
    255a:	f0 68       	ori	r31, 0x80	; 128
    255c:	3f 2e       	mov	r3, r31
    255e:	2a e0       	ldi	r18, 0x0A	; 10
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	a3 01       	movw	r20, r6
    2564:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__ultoa_invert>
    2568:	88 2e       	mov	r8, r24
    256a:	86 18       	sub	r8, r6
    256c:	45 c0       	rjmp	.+138    	; 0x25f8 <vfprintf+0x2ac>
    256e:	85 37       	cpi	r24, 0x75	; 117
    2570:	31 f4       	brne	.+12     	; 0x257e <vfprintf+0x232>
    2572:	23 2d       	mov	r18, r3
    2574:	2f 7e       	andi	r18, 0xEF	; 239
    2576:	b2 2e       	mov	r11, r18
    2578:	2a e0       	ldi	r18, 0x0A	; 10
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	25 c0       	rjmp	.+74     	; 0x25c8 <vfprintf+0x27c>
    257e:	93 2d       	mov	r25, r3
    2580:	99 7f       	andi	r25, 0xF9	; 249
    2582:	b9 2e       	mov	r11, r25
    2584:	8f 36       	cpi	r24, 0x6F	; 111
    2586:	c1 f0       	breq	.+48     	; 0x25b8 <vfprintf+0x26c>
    2588:	18 f4       	brcc	.+6      	; 0x2590 <vfprintf+0x244>
    258a:	88 35       	cpi	r24, 0x58	; 88
    258c:	79 f0       	breq	.+30     	; 0x25ac <vfprintf+0x260>
    258e:	b5 c0       	rjmp	.+362    	; 0x26fa <vfprintf+0x3ae>
    2590:	80 37       	cpi	r24, 0x70	; 112
    2592:	19 f0       	breq	.+6      	; 0x259a <vfprintf+0x24e>
    2594:	88 37       	cpi	r24, 0x78	; 120
    2596:	21 f0       	breq	.+8      	; 0x25a0 <vfprintf+0x254>
    2598:	b0 c0       	rjmp	.+352    	; 0x26fa <vfprintf+0x3ae>
    259a:	e9 2f       	mov	r30, r25
    259c:	e0 61       	ori	r30, 0x10	; 16
    259e:	be 2e       	mov	r11, r30
    25a0:	b4 fe       	sbrs	r11, 4
    25a2:	0d c0       	rjmp	.+26     	; 0x25be <vfprintf+0x272>
    25a4:	fb 2d       	mov	r31, r11
    25a6:	f4 60       	ori	r31, 0x04	; 4
    25a8:	bf 2e       	mov	r11, r31
    25aa:	09 c0       	rjmp	.+18     	; 0x25be <vfprintf+0x272>
    25ac:	34 fe       	sbrs	r3, 4
    25ae:	0a c0       	rjmp	.+20     	; 0x25c4 <vfprintf+0x278>
    25b0:	29 2f       	mov	r18, r25
    25b2:	26 60       	ori	r18, 0x06	; 6
    25b4:	b2 2e       	mov	r11, r18
    25b6:	06 c0       	rjmp	.+12     	; 0x25c4 <vfprintf+0x278>
    25b8:	28 e0       	ldi	r18, 0x08	; 8
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	05 c0       	rjmp	.+10     	; 0x25c8 <vfprintf+0x27c>
    25be:	20 e1       	ldi	r18, 0x10	; 16
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <vfprintf+0x27c>
    25c4:	20 e1       	ldi	r18, 0x10	; 16
    25c6:	32 e0       	ldi	r19, 0x02	; 2
    25c8:	f8 01       	movw	r30, r16
    25ca:	b7 fe       	sbrs	r11, 7
    25cc:	07 c0       	rjmp	.+14     	; 0x25dc <vfprintf+0x290>
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	0c 5f       	subi	r16, 0xFC	; 252
    25d8:	1f 4f       	sbci	r17, 0xFF	; 255
    25da:	06 c0       	rjmp	.+12     	; 0x25e8 <vfprintf+0x29c>
    25dc:	60 81       	ld	r22, Z
    25de:	71 81       	ldd	r23, Z+1	; 0x01
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 5f       	subi	r16, 0xFE	; 254
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
    25e8:	a3 01       	movw	r20, r6
    25ea:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__ultoa_invert>
    25ee:	88 2e       	mov	r8, r24
    25f0:	86 18       	sub	r8, r6
    25f2:	fb 2d       	mov	r31, r11
    25f4:	ff 77       	andi	r31, 0x7F	; 127
    25f6:	3f 2e       	mov	r3, r31
    25f8:	36 fe       	sbrs	r3, 6
    25fa:	0d c0       	rjmp	.+26     	; 0x2616 <vfprintf+0x2ca>
    25fc:	23 2d       	mov	r18, r3
    25fe:	2e 7f       	andi	r18, 0xFE	; 254
    2600:	a2 2e       	mov	r10, r18
    2602:	89 14       	cp	r8, r9
    2604:	58 f4       	brcc	.+22     	; 0x261c <vfprintf+0x2d0>
    2606:	34 fe       	sbrs	r3, 4
    2608:	0b c0       	rjmp	.+22     	; 0x2620 <vfprintf+0x2d4>
    260a:	32 fc       	sbrc	r3, 2
    260c:	09 c0       	rjmp	.+18     	; 0x2620 <vfprintf+0x2d4>
    260e:	83 2d       	mov	r24, r3
    2610:	8e 7e       	andi	r24, 0xEE	; 238
    2612:	a8 2e       	mov	r10, r24
    2614:	05 c0       	rjmp	.+10     	; 0x2620 <vfprintf+0x2d4>
    2616:	b8 2c       	mov	r11, r8
    2618:	a3 2c       	mov	r10, r3
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <vfprintf+0x2d6>
    261c:	b8 2c       	mov	r11, r8
    261e:	01 c0       	rjmp	.+2      	; 0x2622 <vfprintf+0x2d6>
    2620:	b9 2c       	mov	r11, r9
    2622:	a4 fe       	sbrs	r10, 4
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <vfprintf+0x2f8>
    2626:	fe 01       	movw	r30, r28
    2628:	e8 0d       	add	r30, r8
    262a:	f1 1d       	adc	r31, r1
    262c:	80 81       	ld	r24, Z
    262e:	80 33       	cpi	r24, 0x30	; 48
    2630:	21 f4       	brne	.+8      	; 0x263a <vfprintf+0x2ee>
    2632:	9a 2d       	mov	r25, r10
    2634:	99 7e       	andi	r25, 0xE9	; 233
    2636:	a9 2e       	mov	r10, r25
    2638:	09 c0       	rjmp	.+18     	; 0x264c <vfprintf+0x300>
    263a:	a2 fe       	sbrs	r10, 2
    263c:	06 c0       	rjmp	.+12     	; 0x264a <vfprintf+0x2fe>
    263e:	b3 94       	inc	r11
    2640:	b3 94       	inc	r11
    2642:	04 c0       	rjmp	.+8      	; 0x264c <vfprintf+0x300>
    2644:	8a 2d       	mov	r24, r10
    2646:	86 78       	andi	r24, 0x86	; 134
    2648:	09 f0       	breq	.+2      	; 0x264c <vfprintf+0x300>
    264a:	b3 94       	inc	r11
    264c:	a3 fc       	sbrc	r10, 3
    264e:	11 c0       	rjmp	.+34     	; 0x2672 <vfprintf+0x326>
    2650:	a0 fe       	sbrs	r10, 0
    2652:	06 c0       	rjmp	.+12     	; 0x2660 <vfprintf+0x314>
    2654:	b2 14       	cp	r11, r2
    2656:	88 f4       	brcc	.+34     	; 0x267a <vfprintf+0x32e>
    2658:	28 0c       	add	r2, r8
    265a:	92 2c       	mov	r9, r2
    265c:	9b 18       	sub	r9, r11
    265e:	0e c0       	rjmp	.+28     	; 0x267c <vfprintf+0x330>
    2660:	b2 14       	cp	r11, r2
    2662:	60 f4       	brcc	.+24     	; 0x267c <vfprintf+0x330>
    2664:	b6 01       	movw	r22, r12
    2666:	80 e2       	ldi	r24, 0x20	; 32
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 9d 13 	call	0x273a	; 0x273a <fputc>
    266e:	b3 94       	inc	r11
    2670:	f7 cf       	rjmp	.-18     	; 0x2660 <vfprintf+0x314>
    2672:	b2 14       	cp	r11, r2
    2674:	18 f4       	brcc	.+6      	; 0x267c <vfprintf+0x330>
    2676:	2b 18       	sub	r2, r11
    2678:	02 c0       	rjmp	.+4      	; 0x267e <vfprintf+0x332>
    267a:	98 2c       	mov	r9, r8
    267c:	21 2c       	mov	r2, r1
    267e:	a4 fe       	sbrs	r10, 4
    2680:	10 c0       	rjmp	.+32     	; 0x26a2 <vfprintf+0x356>
    2682:	b6 01       	movw	r22, r12
    2684:	80 e3       	ldi	r24, 0x30	; 48
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 9d 13 	call	0x273a	; 0x273a <fputc>
    268c:	a2 fe       	sbrs	r10, 2
    268e:	17 c0       	rjmp	.+46     	; 0x26be <vfprintf+0x372>
    2690:	a1 fc       	sbrc	r10, 1
    2692:	03 c0       	rjmp	.+6      	; 0x269a <vfprintf+0x34e>
    2694:	88 e7       	ldi	r24, 0x78	; 120
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	02 c0       	rjmp	.+4      	; 0x269e <vfprintf+0x352>
    269a:	88 e5       	ldi	r24, 0x58	; 88
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	b6 01       	movw	r22, r12
    26a0:	0c c0       	rjmp	.+24     	; 0x26ba <vfprintf+0x36e>
    26a2:	8a 2d       	mov	r24, r10
    26a4:	86 78       	andi	r24, 0x86	; 134
    26a6:	59 f0       	breq	.+22     	; 0x26be <vfprintf+0x372>
    26a8:	a1 fe       	sbrs	r10, 1
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <vfprintf+0x364>
    26ac:	8b e2       	ldi	r24, 0x2B	; 43
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <vfprintf+0x366>
    26b0:	80 e2       	ldi	r24, 0x20	; 32
    26b2:	a7 fc       	sbrc	r10, 7
    26b4:	8d e2       	ldi	r24, 0x2D	; 45
    26b6:	b6 01       	movw	r22, r12
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0e 94 9d 13 	call	0x273a	; 0x273a <fputc>
    26be:	89 14       	cp	r8, r9
    26c0:	38 f4       	brcc	.+14     	; 0x26d0 <vfprintf+0x384>
    26c2:	b6 01       	movw	r22, r12
    26c4:	80 e3       	ldi	r24, 0x30	; 48
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	0e 94 9d 13 	call	0x273a	; 0x273a <fputc>
    26cc:	9a 94       	dec	r9
    26ce:	f7 cf       	rjmp	.-18     	; 0x26be <vfprintf+0x372>
    26d0:	8a 94       	dec	r8
    26d2:	f3 01       	movw	r30, r6
    26d4:	e8 0d       	add	r30, r8
    26d6:	f1 1d       	adc	r31, r1
    26d8:	80 81       	ld	r24, Z
    26da:	b6 01       	movw	r22, r12
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 9d 13 	call	0x273a	; 0x273a <fputc>
    26e2:	81 10       	cpse	r8, r1
    26e4:	f5 cf       	rjmp	.-22     	; 0x26d0 <vfprintf+0x384>
    26e6:	22 20       	and	r2, r2
    26e8:	09 f4       	brne	.+2      	; 0x26ec <vfprintf+0x3a0>
    26ea:	42 ce       	rjmp	.-892    	; 0x2370 <vfprintf+0x24>
    26ec:	b6 01       	movw	r22, r12
    26ee:	80 e2       	ldi	r24, 0x20	; 32
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 9d 13 	call	0x273a	; 0x273a <fputc>
    26f6:	2a 94       	dec	r2
    26f8:	f6 cf       	rjmp	.-20     	; 0x26e6 <vfprintf+0x39a>
    26fa:	f6 01       	movw	r30, r12
    26fc:	86 81       	ldd	r24, Z+6	; 0x06
    26fe:	97 81       	ldd	r25, Z+7	; 0x07
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <vfprintf+0x3ba>
    2702:	8f ef       	ldi	r24, 0xFF	; 255
    2704:	9f ef       	ldi	r25, 0xFF	; 255
    2706:	2b 96       	adiw	r28, 0x0b	; 11
    2708:	e2 e1       	ldi	r30, 0x12	; 18
    270a:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__epilogue_restores__>

0000270e <strnlen_P>:
    270e:	fc 01       	movw	r30, r24
    2710:	05 90       	lpm	r0, Z+
    2712:	61 50       	subi	r22, 0x01	; 1
    2714:	70 40       	sbci	r23, 0x00	; 0
    2716:	01 10       	cpse	r0, r1
    2718:	d8 f7       	brcc	.-10     	; 0x2710 <strnlen_P+0x2>
    271a:	80 95       	com	r24
    271c:	90 95       	com	r25
    271e:	8e 0f       	add	r24, r30
    2720:	9f 1f       	adc	r25, r31
    2722:	08 95       	ret

00002724 <strnlen>:
    2724:	fc 01       	movw	r30, r24
    2726:	61 50       	subi	r22, 0x01	; 1
    2728:	70 40       	sbci	r23, 0x00	; 0
    272a:	01 90       	ld	r0, Z+
    272c:	01 10       	cpse	r0, r1
    272e:	d8 f7       	brcc	.-10     	; 0x2726 <strnlen+0x2>
    2730:	80 95       	com	r24
    2732:	90 95       	com	r25
    2734:	8e 0f       	add	r24, r30
    2736:	9f 1f       	adc	r25, r31
    2738:	08 95       	ret

0000273a <fputc>:
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	fb 01       	movw	r30, r22
    2744:	23 81       	ldd	r18, Z+3	; 0x03
    2746:	21 fd       	sbrc	r18, 1
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <fputc+0x16>
    274a:	8f ef       	ldi	r24, 0xFF	; 255
    274c:	9f ef       	ldi	r25, 0xFF	; 255
    274e:	2c c0       	rjmp	.+88     	; 0x27a8 <fputc+0x6e>
    2750:	22 ff       	sbrs	r18, 2
    2752:	16 c0       	rjmp	.+44     	; 0x2780 <fputc+0x46>
    2754:	46 81       	ldd	r20, Z+6	; 0x06
    2756:	57 81       	ldd	r21, Z+7	; 0x07
    2758:	24 81       	ldd	r18, Z+4	; 0x04
    275a:	35 81       	ldd	r19, Z+5	; 0x05
    275c:	42 17       	cp	r20, r18
    275e:	53 07       	cpc	r21, r19
    2760:	44 f4       	brge	.+16     	; 0x2772 <fputc+0x38>
    2762:	a0 81       	ld	r26, Z
    2764:	b1 81       	ldd	r27, Z+1	; 0x01
    2766:	9d 01       	movw	r18, r26
    2768:	2f 5f       	subi	r18, 0xFF	; 255
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	31 83       	std	Z+1, r19	; 0x01
    276e:	20 83       	st	Z, r18
    2770:	8c 93       	st	X, r24
    2772:	26 81       	ldd	r18, Z+6	; 0x06
    2774:	37 81       	ldd	r19, Z+7	; 0x07
    2776:	2f 5f       	subi	r18, 0xFF	; 255
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	37 83       	std	Z+7, r19	; 0x07
    277c:	26 83       	std	Z+6, r18	; 0x06
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <fputc+0x6e>
    2780:	8b 01       	movw	r16, r22
    2782:	ec 01       	movw	r28, r24
    2784:	fb 01       	movw	r30, r22
    2786:	00 84       	ldd	r0, Z+8	; 0x08
    2788:	f1 85       	ldd	r31, Z+9	; 0x09
    278a:	e0 2d       	mov	r30, r0
    278c:	09 95       	icall
    278e:	89 2b       	or	r24, r25
    2790:	e1 f6       	brne	.-72     	; 0x274a <fputc+0x10>
    2792:	d8 01       	movw	r26, r16
    2794:	16 96       	adiw	r26, 0x06	; 6
    2796:	8d 91       	ld	r24, X+
    2798:	9c 91       	ld	r25, X
    279a:	17 97       	sbiw	r26, 0x07	; 7
    279c:	01 96       	adiw	r24, 0x01	; 1
    279e:	17 96       	adiw	r26, 0x07	; 7
    27a0:	9c 93       	st	X, r25
    27a2:	8e 93       	st	-X, r24
    27a4:	16 97       	sbiw	r26, 0x06	; 6
    27a6:	ce 01       	movw	r24, r28
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	08 95       	ret

000027b2 <__ultoa_invert>:
    27b2:	fa 01       	movw	r30, r20
    27b4:	aa 27       	eor	r26, r26
    27b6:	28 30       	cpi	r18, 0x08	; 8
    27b8:	51 f1       	breq	.+84     	; 0x280e <__ultoa_invert+0x5c>
    27ba:	20 31       	cpi	r18, 0x10	; 16
    27bc:	81 f1       	breq	.+96     	; 0x281e <__ultoa_invert+0x6c>
    27be:	e8 94       	clt
    27c0:	6f 93       	push	r22
    27c2:	6e 7f       	andi	r22, 0xFE	; 254
    27c4:	6e 5f       	subi	r22, 0xFE	; 254
    27c6:	7f 4f       	sbci	r23, 0xFF	; 255
    27c8:	8f 4f       	sbci	r24, 0xFF	; 255
    27ca:	9f 4f       	sbci	r25, 0xFF	; 255
    27cc:	af 4f       	sbci	r26, 0xFF	; 255
    27ce:	b1 e0       	ldi	r27, 0x01	; 1
    27d0:	3e d0       	rcall	.+124    	; 0x284e <__ultoa_invert+0x9c>
    27d2:	b4 e0       	ldi	r27, 0x04	; 4
    27d4:	3c d0       	rcall	.+120    	; 0x284e <__ultoa_invert+0x9c>
    27d6:	67 0f       	add	r22, r23
    27d8:	78 1f       	adc	r23, r24
    27da:	89 1f       	adc	r24, r25
    27dc:	9a 1f       	adc	r25, r26
    27de:	a1 1d       	adc	r26, r1
    27e0:	68 0f       	add	r22, r24
    27e2:	79 1f       	adc	r23, r25
    27e4:	8a 1f       	adc	r24, r26
    27e6:	91 1d       	adc	r25, r1
    27e8:	a1 1d       	adc	r26, r1
    27ea:	6a 0f       	add	r22, r26
    27ec:	71 1d       	adc	r23, r1
    27ee:	81 1d       	adc	r24, r1
    27f0:	91 1d       	adc	r25, r1
    27f2:	a1 1d       	adc	r26, r1
    27f4:	20 d0       	rcall	.+64     	; 0x2836 <__ultoa_invert+0x84>
    27f6:	09 f4       	brne	.+2      	; 0x27fa <__ultoa_invert+0x48>
    27f8:	68 94       	set
    27fa:	3f 91       	pop	r19
    27fc:	2a e0       	ldi	r18, 0x0A	; 10
    27fe:	26 9f       	mul	r18, r22
    2800:	11 24       	eor	r1, r1
    2802:	30 19       	sub	r19, r0
    2804:	30 5d       	subi	r19, 0xD0	; 208
    2806:	31 93       	st	Z+, r19
    2808:	de f6       	brtc	.-74     	; 0x27c0 <__ultoa_invert+0xe>
    280a:	cf 01       	movw	r24, r30
    280c:	08 95       	ret
    280e:	46 2f       	mov	r20, r22
    2810:	47 70       	andi	r20, 0x07	; 7
    2812:	40 5d       	subi	r20, 0xD0	; 208
    2814:	41 93       	st	Z+, r20
    2816:	b3 e0       	ldi	r27, 0x03	; 3
    2818:	0f d0       	rcall	.+30     	; 0x2838 <__ultoa_invert+0x86>
    281a:	c9 f7       	brne	.-14     	; 0x280e <__ultoa_invert+0x5c>
    281c:	f6 cf       	rjmp	.-20     	; 0x280a <__ultoa_invert+0x58>
    281e:	46 2f       	mov	r20, r22
    2820:	4f 70       	andi	r20, 0x0F	; 15
    2822:	40 5d       	subi	r20, 0xD0	; 208
    2824:	4a 33       	cpi	r20, 0x3A	; 58
    2826:	18 f0       	brcs	.+6      	; 0x282e <__ultoa_invert+0x7c>
    2828:	49 5d       	subi	r20, 0xD9	; 217
    282a:	31 fd       	sbrc	r19, 1
    282c:	40 52       	subi	r20, 0x20	; 32
    282e:	41 93       	st	Z+, r20
    2830:	02 d0       	rcall	.+4      	; 0x2836 <__ultoa_invert+0x84>
    2832:	a9 f7       	brne	.-22     	; 0x281e <__ultoa_invert+0x6c>
    2834:	ea cf       	rjmp	.-44     	; 0x280a <__ultoa_invert+0x58>
    2836:	b4 e0       	ldi	r27, 0x04	; 4
    2838:	a6 95       	lsr	r26
    283a:	97 95       	ror	r25
    283c:	87 95       	ror	r24
    283e:	77 95       	ror	r23
    2840:	67 95       	ror	r22
    2842:	ba 95       	dec	r27
    2844:	c9 f7       	brne	.-14     	; 0x2838 <__ultoa_invert+0x86>
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	61 05       	cpc	r22, r1
    284a:	71 05       	cpc	r23, r1
    284c:	08 95       	ret
    284e:	9b 01       	movw	r18, r22
    2850:	ac 01       	movw	r20, r24
    2852:	0a 2e       	mov	r0, r26
    2854:	06 94       	lsr	r0
    2856:	57 95       	ror	r21
    2858:	47 95       	ror	r20
    285a:	37 95       	ror	r19
    285c:	27 95       	ror	r18
    285e:	ba 95       	dec	r27
    2860:	c9 f7       	brne	.-14     	; 0x2854 <__ultoa_invert+0xa2>
    2862:	62 0f       	add	r22, r18
    2864:	73 1f       	adc	r23, r19
    2866:	84 1f       	adc	r24, r20
    2868:	95 1f       	adc	r25, r21
    286a:	a0 1d       	adc	r26, r0
    286c:	08 95       	ret

0000286e <__prologue_saves__>:
    286e:	2f 92       	push	r2
    2870:	3f 92       	push	r3
    2872:	4f 92       	push	r4
    2874:	5f 92       	push	r5
    2876:	6f 92       	push	r6
    2878:	7f 92       	push	r7
    287a:	8f 92       	push	r8
    287c:	9f 92       	push	r9
    287e:	af 92       	push	r10
    2880:	bf 92       	push	r11
    2882:	cf 92       	push	r12
    2884:	df 92       	push	r13
    2886:	ef 92       	push	r14
    2888:	ff 92       	push	r15
    288a:	0f 93       	push	r16
    288c:	1f 93       	push	r17
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	ca 1b       	sub	r28, r26
    2898:	db 0b       	sbc	r29, r27
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	09 94       	ijmp

000028a6 <__epilogue_restores__>:
    28a6:	2a 88       	ldd	r2, Y+18	; 0x12
    28a8:	39 88       	ldd	r3, Y+17	; 0x11
    28aa:	48 88       	ldd	r4, Y+16	; 0x10
    28ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    28ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    28b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    28b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    28b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    28b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    28b8:	b9 84       	ldd	r11, Y+9	; 0x09
    28ba:	c8 84       	ldd	r12, Y+8	; 0x08
    28bc:	df 80       	ldd	r13, Y+7	; 0x07
    28be:	ee 80       	ldd	r14, Y+6	; 0x06
    28c0:	fd 80       	ldd	r15, Y+5	; 0x05
    28c2:	0c 81       	ldd	r16, Y+4	; 0x04
    28c4:	1b 81       	ldd	r17, Y+3	; 0x03
    28c6:	aa 81       	ldd	r26, Y+2	; 0x02
    28c8:	b9 81       	ldd	r27, Y+1	; 0x01
    28ca:	ce 0f       	add	r28, r30
    28cc:	d1 1d       	adc	r29, r1
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	ed 01       	movw	r28, r26
    28da:	08 95       	ret

000028dc <_exit>:
    28dc:	f8 94       	cli

000028de <__stop_program>:
    28de:	ff cf       	rjmp	.-2      	; 0x28de <__stop_program>
