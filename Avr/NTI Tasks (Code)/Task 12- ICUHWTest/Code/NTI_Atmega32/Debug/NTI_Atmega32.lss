
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  000057d6  0000586a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000085  008000fa  008000fa  00005904  2**0
                  ALLOC
  3 .stab         0000b4cc  00000000  00000000  00005904  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008189  00000000  00000000  00010dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00018f59  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00018f6c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00018fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0001948e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00019931  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0001994b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__vector_1>
       8:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__vector_2>
       c:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__vector_3>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_6>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__vector_9>
      28:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_10>
      2c:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__vector_11>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__vector_16>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	e8 0b       	sbc	r30, r24
      56:	43 0c       	add	r4, r3
      58:	e8 0b       	sbc	r30, r24
      5a:	43 0c       	add	r4, r3
      5c:	43 0c       	add	r4, r3
      5e:	43 0c       	add	r4, r3
      60:	e8 0b       	sbc	r30, r24
      62:	43 0c       	add	r4, r3
      64:	43 0c       	add	r4, r3
      66:	17 0c       	add	r1, r7
      68:	e8 0b       	sbc	r30, r24
      6a:	17 0c       	add	r1, r7
      6c:	43 0c       	add	r4, r3
      6e:	ea 0b       	sbc	r30, r26
      70:	e8 0b       	sbc	r30, r24
      72:	ea 0b       	sbc	r30, r26

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	10 e0       	ldi	r17, 0x00	; 0
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e6 ed       	ldi	r30, 0xD6	; 214
      88:	f7 e5       	ldi	r31, 0x57	; 87
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	aa 3f       	cpi	r26, 0xFA	; 250
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	aa ef       	ldi	r26, 0xFA	; 250
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	af 37       	cpi	r26, 0x7F	; 127
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 89 24 	call	0x4912	; 0x4912 <main>
      aa:	0c 94 e9 2b 	jmp	0x57d2	; 0x57d2 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <Convert_IntToString>:
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	27 97       	sbiw	r28, 0x07	; 7
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
      c6:	6a 83       	std	Y+2, r22	; 0x02
      c8:	7b 83       	std	Y+3, r23	; 0x03
      ca:	8c 83       	std	Y+4, r24	; 0x04
      cc:	9d 83       	std	Y+5, r25	; 0x05
      ce:	5f 83       	std	Y+7, r21	; 0x07
      d0:	4e 83       	std	Y+6, r20	; 0x06
      d2:	19 82       	std	Y+1, r1	; 0x01
      d4:	8e 81       	ldd	r24, Y+6	; 0x06
      d6:	9f 81       	ldd	r25, Y+7	; 0x07
      d8:	89 2b       	or	r24, r25
      da:	19 f4       	brne	.+6      	; 0xe2 <Convert_IntToString+0x30>
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	89 83       	std	Y+1, r24	; 0x01
      e0:	1d c0       	rjmp	.+58     	; 0x11c <Convert_IntToString+0x6a>
      e2:	8d 81       	ldd	r24, Y+5	; 0x05
      e4:	8f 93       	push	r24
      e6:	8c 81       	ldd	r24, Y+4	; 0x04
      e8:	8f 93       	push	r24
      ea:	8b 81       	ldd	r24, Y+3	; 0x03
      ec:	8f 93       	push	r24
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	8f 93       	push	r24
      f2:	80 eb       	ldi	r24, 0xB0	; 176
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	89 2f       	mov	r24, r25
      f8:	8f 93       	push	r24
      fa:	80 eb       	ldi	r24, 0xB0	; 176
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	8f 93       	push	r24
     100:	8f 81       	ldd	r24, Y+7	; 0x07
     102:	8f 93       	push	r24
     104:	8e 81       	ldd	r24, Y+6	; 0x06
     106:	8f 93       	push	r24
     108:	0e 94 ff 28 	call	0x51fe	; 0x51fe <sprintf>
     10c:	8d b7       	in	r24, 0x3d	; 61
     10e:	9e b7       	in	r25, 0x3e	; 62
     110:	08 96       	adiw	r24, 0x08	; 8
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	27 96       	adiw	r28, 0x07	; 7
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	f8 94       	cli
     124:	de bf       	out	0x3e, r29	; 62
     126:	0f be       	out	0x3f, r0	; 63
     128:	cd bf       	out	0x3d, r28	; 61
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f64 Copy_f64Number, pu8 Address_str){
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	65 97       	sbiw	r28, 0x15	; 21
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	68 8b       	std	Y+16, r22	; 0x10
     146:	79 8b       	std	Y+17, r23	; 0x11
     148:	8a 8b       	std	Y+18, r24	; 0x12
     14a:	9b 8b       	std	Y+19, r25	; 0x13
     14c:	5d 8b       	std	Y+21, r21	; 0x15
     14e:	4c 8b       	std	Y+20, r20	; 0x14

	//-5.99

	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     150:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8TempSign[2]="";
     152:	1f 86       	std	Y+15, r1	; 0x0f
     154:	1e 86       	std	Y+14, r1	; 0x0e
	s32  Loc_s64IntPart;
	f32 Loc_f32FractionPart;
	s32  Loc_s64FractionPartAsInteger;


		if(NULL == Address_str){
     156:	8c 89       	ldd	r24, Y+20	; 0x14
     158:	9d 89       	ldd	r25, Y+21	; 0x15
     15a:	89 2b       	or	r24, r25
     15c:	19 f4       	brne	.+6      	; 0x164 <Convert_FloatToString+0x34>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	89 83       	std	Y+1, r24	; 0x01
     162:	78 c0       	rjmp	.+240    	; 0x254 <Convert_FloatToString+0x124>
		}

		else{

			if(Copy_f64Number<0){
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	a9 01       	movw	r20, r18
     16a:	68 89       	ldd	r22, Y+16	; 0x10
     16c:	79 89       	ldd	r23, Y+17	; 0x11
     16e:	8a 89       	ldd	r24, Y+18	; 0x12
     170:	9b 89       	ldd	r25, Y+19	; 0x13
     172:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
     176:	88 23       	and	r24, r24
     178:	5c f4       	brge	.+22     	; 0x190 <Convert_FloatToString+0x60>
				Copy_f64Number = -Copy_f64Number ;
     17a:	88 89       	ldd	r24, Y+16	; 0x10
     17c:	99 89       	ldd	r25, Y+17	; 0x11
     17e:	aa 89       	ldd	r26, Y+18	; 0x12
     180:	bb 89       	ldd	r27, Y+19	; 0x13
     182:	b0 58       	subi	r27, 0x80	; 128
     184:	88 8b       	std	Y+16, r24	; 0x10
     186:	99 8b       	std	Y+17, r25	; 0x11
     188:	aa 8b       	std	Y+18, r26	; 0x12
     18a:	bb 8b       	std	Y+19, r27	; 0x13
				Loc_u8TempSign[0] ='-';
     18c:	8d e2       	ldi	r24, 0x2D	; 45
     18e:	8e 87       	std	Y+14, r24	; 0x0e
			}


			Loc_s64IntPart = Copy_f64Number;                  // Get the integer (5).
     190:	68 89       	ldd	r22, Y+16	; 0x10
     192:	79 89       	ldd	r23, Y+17	; 0x11
     194:	8a 89       	ldd	r24, Y+18	; 0x12
     196:	9b 89       	ldd	r25, Y+19	; 0x13
     198:	0e 94 57 27 	call	0x4eae	; 0x4eae <__fixsfsi>
     19c:	dc 01       	movw	r26, r24
     19e:	cb 01       	movw	r24, r22
     1a0:	8a 83       	std	Y+2, r24	; 0x02
     1a2:	9b 83       	std	Y+3, r25	; 0x03
     1a4:	ac 83       	std	Y+4, r26	; 0x04
     1a6:	bd 83       	std	Y+5, r27	; 0x05
			Loc_f32FractionPart = Copy_f64Number - Loc_s64IntPart;      // Get fraction (.99).
     1a8:	6a 81       	ldd	r22, Y+2	; 0x02
     1aa:	7b 81       	ldd	r23, Y+3	; 0x03
     1ac:	8c 81       	ldd	r24, Y+4	; 0x04
     1ae:	9d 81       	ldd	r25, Y+5	; 0x05
     1b0:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <__floatsisf>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	9c 01       	movw	r18, r24
     1ba:	ad 01       	movw	r20, r26
     1bc:	68 89       	ldd	r22, Y+16	; 0x10
     1be:	79 89       	ldd	r23, Y+17	; 0x11
     1c0:	8a 89       	ldd	r24, Y+18	; 0x12
     1c2:	9b 89       	ldd	r25, Y+19	; 0x13
     1c4:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__subsf3>
     1c8:	dc 01       	movw	r26, r24
     1ca:	cb 01       	movw	r24, r22
     1cc:	8e 83       	std	Y+6, r24	; 0x06
     1ce:	9f 83       	std	Y+7, r25	; 0x07
     1d0:	a8 87       	std	Y+8, r26	; 0x08
     1d2:	b9 87       	std	Y+9, r27	; 0x09
			 Loc_s64FractionPartAsInteger = (Loc_f32FractionPart * 10000);  // Turn into integer (9900).
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e4       	ldi	r19, 0x40	; 64
     1d8:	4c e1       	ldi	r20, 0x1C	; 28
     1da:	56 e4       	ldi	r21, 0x46	; 70
     1dc:	6e 81       	ldd	r22, Y+6	; 0x06
     1de:	7f 81       	ldd	r23, Y+7	; 0x07
     1e0:	88 85       	ldd	r24, Y+8	; 0x08
     1e2:	99 85       	ldd	r25, Y+9	; 0x09
     1e4:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
     1e8:	dc 01       	movw	r26, r24
     1ea:	cb 01       	movw	r24, r22
     1ec:	bc 01       	movw	r22, r24
     1ee:	cd 01       	movw	r24, r26
     1f0:	0e 94 57 27 	call	0x4eae	; 0x4eae <__fixsfsi>
     1f4:	dc 01       	movw	r26, r24
     1f6:	cb 01       	movw	r24, r22
     1f8:	8a 87       	std	Y+10, r24	; 0x0a
     1fa:	9b 87       	std	Y+11, r25	; 0x0b
     1fc:	ac 87       	std	Y+12, r26	; 0x0c
     1fe:	bd 87       	std	Y+13, r27	; 0x0d

			// Print as parts, note that you need 0-padding for fractional bit.

			sprintf (Address_str, "%s%ld.%04d", Loc_u8TempSign, Loc_s64IntPart, Loc_s64FractionPartAsInteger);
     200:	8d 85       	ldd	r24, Y+13	; 0x0d
     202:	8f 93       	push	r24
     204:	8c 85       	ldd	r24, Y+12	; 0x0c
     206:	8f 93       	push	r24
     208:	8b 85       	ldd	r24, Y+11	; 0x0b
     20a:	8f 93       	push	r24
     20c:	8a 85       	ldd	r24, Y+10	; 0x0a
     20e:	8f 93       	push	r24
     210:	8d 81       	ldd	r24, Y+5	; 0x05
     212:	8f 93       	push	r24
     214:	8c 81       	ldd	r24, Y+4	; 0x04
     216:	8f 93       	push	r24
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	8f 93       	push	r24
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	8f 93       	push	r24
     220:	ce 01       	movw	r24, r28
     222:	0e 96       	adiw	r24, 0x0e	; 14
     224:	29 2f       	mov	r18, r25
     226:	2f 93       	push	r18
     228:	8f 93       	push	r24
     22a:	84 eb       	ldi	r24, 0xB4	; 180
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	89 2f       	mov	r24, r25
     230:	8f 93       	push	r24
     232:	84 eb       	ldi	r24, 0xB4	; 180
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	8f 93       	push	r24
     238:	8d 89       	ldd	r24, Y+21	; 0x15
     23a:	8f 93       	push	r24
     23c:	8c 89       	ldd	r24, Y+20	; 0x14
     23e:	8f 93       	push	r24
     240:	0e 94 ff 28 	call	0x51fe	; 0x51fe <sprintf>
     244:	8d b7       	in	r24, 0x3d	; 61
     246:	9e b7       	in	r25, 0x3e	; 62
     248:	0e 96       	adiw	r24, 0x0e	; 14
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61



		}

		return Loc_enuStatus;
     254:	89 81       	ldd	r24, Y+1	; 0x01


}
     256:	65 96       	adiw	r28, 0x15	; 21
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <Convert_StringTou8>:



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){
     268:	2f 92       	push	r2
     26a:	3f 92       	push	r3
     26c:	4f 92       	push	r4
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	6e 97       	sbiw	r28, 0x1e	; 30
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	9c 87       	std	Y+12, r25	; 0x0c
     29e:	8b 87       	std	Y+11, r24	; 0x0b
     2a0:	7e 87       	std	Y+14, r23	; 0x0e
     2a2:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     2a4:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     2a6:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     2a8:	1b 82       	std	Y+3, r1	; 0x03
     2aa:	1c 82       	std	Y+4, r1	; 0x04
     2ac:	1d 82       	std	Y+5, r1	; 0x05
     2ae:	1e 82       	std	Y+6, r1	; 0x06
     2b0:	1f 82       	std	Y+7, r1	; 0x07
     2b2:	18 86       	std	Y+8, r1	; 0x08
     2b4:	19 86       	std	Y+9, r1	; 0x09
     2b6:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     2b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     2bc:	89 2b       	or	r24, r25
     2be:	21 f0       	breq	.+8      	; 0x2c8 <Convert_StringTou8+0x60>
     2c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c4:	89 2b       	or	r24, r25
     2c6:	19 f4       	brne	.+6      	; 0x2ce <Convert_StringTou8+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	9f c0       	rjmp	.+318    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     2ce:	1a 82       	std	Y+2, r1	; 0x02
     2d0:	8c c0       	rjmp	.+280    	; 0x3ea <Convert_StringTou8+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     2d2:	2b 81       	ldd	r18, Y+3	; 0x03
     2d4:	3c 81       	ldd	r19, Y+4	; 0x04
     2d6:	4d 81       	ldd	r20, Y+5	; 0x05
     2d8:	5e 81       	ldd	r21, Y+6	; 0x06
     2da:	6f 81       	ldd	r22, Y+7	; 0x07
     2dc:	78 85       	ldd	r23, Y+8	; 0x08
     2de:	89 85       	ldd	r24, Y+9	; 0x09
     2e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     2e2:	22 2e       	mov	r2, r18
     2e4:	33 2e       	mov	r3, r19
     2e6:	44 2e       	mov	r4, r20
     2e8:	55 2e       	mov	r5, r21
     2ea:	66 2e       	mov	r6, r22
     2ec:	77 2e       	mov	r7, r23
     2ee:	88 2e       	mov	r8, r24
     2f0:	99 2e       	mov	r9, r25
     2f2:	22 2d       	mov	r18, r2
     2f4:	33 2d       	mov	r19, r3
     2f6:	44 2d       	mov	r20, r4
     2f8:	55 2d       	mov	r21, r5
     2fa:	66 2d       	mov	r22, r6
     2fc:	77 2d       	mov	r23, r7
     2fe:	88 2d       	mov	r24, r8
     300:	99 2d       	mov	r25, r9
     302:	01 e0       	ldi	r16, 0x01	; 1
     304:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__ashldi3>
     308:	a2 2e       	mov	r10, r18
     30a:	b3 2e       	mov	r11, r19
     30c:	c4 2e       	mov	r12, r20
     30e:	d5 2e       	mov	r13, r21
     310:	e6 2e       	mov	r14, r22
     312:	f7 2e       	mov	r15, r23
     314:	08 2f       	mov	r16, r24
     316:	19 2f       	mov	r17, r25
     318:	2a 2c       	mov	r2, r10
     31a:	3b 2c       	mov	r3, r11
     31c:	4c 2c       	mov	r4, r12
     31e:	5d 2c       	mov	r5, r13
     320:	6e 2c       	mov	r6, r14
     322:	7f 2c       	mov	r7, r15
     324:	80 2e       	mov	r8, r16
     326:	91 2e       	mov	r9, r17
     328:	22 2d       	mov	r18, r2
     32a:	33 2d       	mov	r19, r3
     32c:	44 2d       	mov	r20, r4
     32e:	55 2d       	mov	r21, r5
     330:	66 2d       	mov	r22, r6
     332:	77 2d       	mov	r23, r7
     334:	88 2d       	mov	r24, r8
     336:	99 2d       	mov	r25, r9
     338:	02 e0       	ldi	r16, 0x02	; 2
     33a:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__ashldi3>
     33e:	2f 8b       	std	Y+23, r18	; 0x17
     340:	38 8f       	std	Y+24, r19	; 0x18
     342:	49 8f       	std	Y+25, r20	; 0x19
     344:	5a 8f       	std	Y+26, r21	; 0x1a
     346:	6b 8f       	std	Y+27, r22	; 0x1b
     348:	7c 8f       	std	Y+28, r23	; 0x1c
     34a:	8d 8f       	std	Y+29, r24	; 0x1d
     34c:	9e 8f       	std	Y+30, r25	; 0x1e
     34e:	22 2d       	mov	r18, r2
     350:	33 2d       	mov	r19, r3
     352:	44 2d       	mov	r20, r4
     354:	55 2d       	mov	r21, r5
     356:	66 2d       	mov	r22, r6
     358:	77 2d       	mov	r23, r7
     35a:	88 2d       	mov	r24, r8
     35c:	99 2d       	mov	r25, r9
     35e:	af 88       	ldd	r10, Y+23	; 0x17
     360:	b8 8c       	ldd	r11, Y+24	; 0x18
     362:	c9 8c       	ldd	r12, Y+25	; 0x19
     364:	da 8c       	ldd	r13, Y+26	; 0x1a
     366:	eb 8c       	ldd	r14, Y+27	; 0x1b
     368:	fc 8c       	ldd	r15, Y+28	; 0x1c
     36a:	0d 8d       	ldd	r16, Y+29	; 0x1d
     36c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     36e:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
     372:	a2 2e       	mov	r10, r18
     374:	b3 2e       	mov	r11, r19
     376:	c4 2e       	mov	r12, r20
     378:	d5 2e       	mov	r13, r21
     37a:	e6 2e       	mov	r14, r22
     37c:	f7 2e       	mov	r15, r23
     37e:	08 2f       	mov	r16, r24
     380:	19 2f       	mov	r17, r25
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	88 2f       	mov	r24, r24
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	2d 85       	ldd	r18, Y+13	; 0x0d
     38a:	3e 85       	ldd	r19, Y+14	; 0x0e
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	fc 01       	movw	r30, r24
     392:	80 81       	ld	r24, Z
     394:	88 2f       	mov	r24, r24
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	c0 97       	sbiw	r24, 0x30	; 48
     39a:	98 8b       	std	Y+16, r25	; 0x10
     39c:	8f 87       	std	Y+15, r24	; 0x0f
     39e:	89 2f       	mov	r24, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	88 0b       	sbc	r24, r24
     3a4:	89 8b       	std	Y+17, r24	; 0x11
     3a6:	8a 8b       	std	Y+18, r24	; 0x12
     3a8:	8b 8b       	std	Y+19, r24	; 0x13
     3aa:	8c 8b       	std	Y+20, r24	; 0x14
     3ac:	8d 8b       	std	Y+21, r24	; 0x15
     3ae:	8e 8b       	std	Y+22, r24	; 0x16
     3b0:	2a 2d       	mov	r18, r10
     3b2:	3b 2d       	mov	r19, r11
     3b4:	4c 2d       	mov	r20, r12
     3b6:	5d 2d       	mov	r21, r13
     3b8:	6e 2d       	mov	r22, r14
     3ba:	7f 2d       	mov	r23, r15
     3bc:	80 2f       	mov	r24, r16
     3be:	91 2f       	mov	r25, r17
     3c0:	af 84       	ldd	r10, Y+15	; 0x0f
     3c2:	b8 88       	ldd	r11, Y+16	; 0x10
     3c4:	c9 88       	ldd	r12, Y+17	; 0x11
     3c6:	da 88       	ldd	r13, Y+18	; 0x12
     3c8:	eb 88       	ldd	r14, Y+19	; 0x13
     3ca:	fc 88       	ldd	r15, Y+20	; 0x14
     3cc:	0d 89       	ldd	r16, Y+21	; 0x15
     3ce:	1e 89       	ldd	r17, Y+22	; 0x16
     3d0:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
     3d4:	2b 83       	std	Y+3, r18	; 0x03
     3d6:	3c 83       	std	Y+4, r19	; 0x04
     3d8:	4d 83       	std	Y+5, r20	; 0x05
     3da:	5e 83       	std	Y+6, r21	; 0x06
     3dc:	6f 83       	std	Y+7, r22	; 0x07
     3de:	78 87       	std	Y+8, r23	; 0x08
     3e0:	89 87       	std	Y+9, r24	; 0x09
     3e2:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	8a 83       	std	Y+2, r24	; 0x02
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	2d 85       	ldd	r18, Y+13	; 0x0d
     3f2:	3e 85       	ldd	r19, Y+14	; 0x0e
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	88 23       	and	r24, r24
     3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	68 cf       	rjmp	.-304    	; 0x2d2 <Convert_StringTou8+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     402:	2b 81       	ldd	r18, Y+3	; 0x03
     404:	8b 85       	ldd	r24, Y+11	; 0x0b
     406:	9c 85       	ldd	r25, Y+12	; 0x0c
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     40c:	89 81       	ldd	r24, Y+1	; 0x01

}
     40e:	6e 96       	adiw	r28, 0x1e	; 30
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	bf 90       	pop	r11
     42c:	af 90       	pop	r10
     42e:	9f 90       	pop	r9
     430:	8f 90       	pop	r8
     432:	7f 90       	pop	r7
     434:	6f 90       	pop	r6
     436:	5f 90       	pop	r5
     438:	4f 90       	pop	r4
     43a:	3f 90       	pop	r3
     43c:	2f 90       	pop	r2
     43e:	08 95       	ret

00000440 <Convert_StringTou16>:


Std_StatusType Convert_StringTou16 (u16* Address_Number, pu8 Address_str){
     440:	2f 92       	push	r2
     442:	3f 92       	push	r3
     444:	4f 92       	push	r4
     446:	5f 92       	push	r5
     448:	6f 92       	push	r6
     44a:	7f 92       	push	r7
     44c:	8f 92       	push	r8
     44e:	9f 92       	push	r9
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	6e 97       	sbiw	r28, 0x1e	; 30
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	9c 87       	std	Y+12, r25	; 0x0c
     476:	8b 87       	std	Y+11, r24	; 0x0b
     478:	7e 87       	std	Y+14, r23	; 0x0e
     47a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     47c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     47e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     480:	1b 82       	std	Y+3, r1	; 0x03
     482:	1c 82       	std	Y+4, r1	; 0x04
     484:	1d 82       	std	Y+5, r1	; 0x05
     486:	1e 82       	std	Y+6, r1	; 0x06
     488:	1f 82       	std	Y+7, r1	; 0x07
     48a:	18 86       	std	Y+8, r1	; 0x08
     48c:	19 86       	std	Y+9, r1	; 0x09
     48e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     490:	8d 85       	ldd	r24, Y+13	; 0x0d
     492:	9e 85       	ldd	r25, Y+14	; 0x0e
     494:	89 2b       	or	r24, r25
     496:	21 f0       	breq	.+8      	; 0x4a0 <Convert_StringTou16+0x60>
     498:	8b 85       	ldd	r24, Y+11	; 0x0b
     49a:	9c 85       	ldd	r25, Y+12	; 0x0c
     49c:	89 2b       	or	r24, r25
     49e:	19 f4       	brne	.+6      	; 0x4a6 <Convert_StringTou16+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	a1 c0       	rjmp	.+322    	; 0x5e8 <Convert_StringTou16+0x1a8>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     4a6:	1a 82       	std	Y+2, r1	; 0x02
     4a8:	8c c0       	rjmp	.+280    	; 0x5c2 <Convert_StringTou16+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     4aa:	2b 81       	ldd	r18, Y+3	; 0x03
     4ac:	3c 81       	ldd	r19, Y+4	; 0x04
     4ae:	4d 81       	ldd	r20, Y+5	; 0x05
     4b0:	5e 81       	ldd	r21, Y+6	; 0x06
     4b2:	6f 81       	ldd	r22, Y+7	; 0x07
     4b4:	78 85       	ldd	r23, Y+8	; 0x08
     4b6:	89 85       	ldd	r24, Y+9	; 0x09
     4b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ba:	22 2e       	mov	r2, r18
     4bc:	33 2e       	mov	r3, r19
     4be:	44 2e       	mov	r4, r20
     4c0:	55 2e       	mov	r5, r21
     4c2:	66 2e       	mov	r6, r22
     4c4:	77 2e       	mov	r7, r23
     4c6:	88 2e       	mov	r8, r24
     4c8:	99 2e       	mov	r9, r25
     4ca:	22 2d       	mov	r18, r2
     4cc:	33 2d       	mov	r19, r3
     4ce:	44 2d       	mov	r20, r4
     4d0:	55 2d       	mov	r21, r5
     4d2:	66 2d       	mov	r22, r6
     4d4:	77 2d       	mov	r23, r7
     4d6:	88 2d       	mov	r24, r8
     4d8:	99 2d       	mov	r25, r9
     4da:	01 e0       	ldi	r16, 0x01	; 1
     4dc:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__ashldi3>
     4e0:	a2 2e       	mov	r10, r18
     4e2:	b3 2e       	mov	r11, r19
     4e4:	c4 2e       	mov	r12, r20
     4e6:	d5 2e       	mov	r13, r21
     4e8:	e6 2e       	mov	r14, r22
     4ea:	f7 2e       	mov	r15, r23
     4ec:	08 2f       	mov	r16, r24
     4ee:	19 2f       	mov	r17, r25
     4f0:	2a 2c       	mov	r2, r10
     4f2:	3b 2c       	mov	r3, r11
     4f4:	4c 2c       	mov	r4, r12
     4f6:	5d 2c       	mov	r5, r13
     4f8:	6e 2c       	mov	r6, r14
     4fa:	7f 2c       	mov	r7, r15
     4fc:	80 2e       	mov	r8, r16
     4fe:	91 2e       	mov	r9, r17
     500:	22 2d       	mov	r18, r2
     502:	33 2d       	mov	r19, r3
     504:	44 2d       	mov	r20, r4
     506:	55 2d       	mov	r21, r5
     508:	66 2d       	mov	r22, r6
     50a:	77 2d       	mov	r23, r7
     50c:	88 2d       	mov	r24, r8
     50e:	99 2d       	mov	r25, r9
     510:	02 e0       	ldi	r16, 0x02	; 2
     512:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__ashldi3>
     516:	2f 8b       	std	Y+23, r18	; 0x17
     518:	38 8f       	std	Y+24, r19	; 0x18
     51a:	49 8f       	std	Y+25, r20	; 0x19
     51c:	5a 8f       	std	Y+26, r21	; 0x1a
     51e:	6b 8f       	std	Y+27, r22	; 0x1b
     520:	7c 8f       	std	Y+28, r23	; 0x1c
     522:	8d 8f       	std	Y+29, r24	; 0x1d
     524:	9e 8f       	std	Y+30, r25	; 0x1e
     526:	22 2d       	mov	r18, r2
     528:	33 2d       	mov	r19, r3
     52a:	44 2d       	mov	r20, r4
     52c:	55 2d       	mov	r21, r5
     52e:	66 2d       	mov	r22, r6
     530:	77 2d       	mov	r23, r7
     532:	88 2d       	mov	r24, r8
     534:	99 2d       	mov	r25, r9
     536:	af 88       	ldd	r10, Y+23	; 0x17
     538:	b8 8c       	ldd	r11, Y+24	; 0x18
     53a:	c9 8c       	ldd	r12, Y+25	; 0x19
     53c:	da 8c       	ldd	r13, Y+26	; 0x1a
     53e:	eb 8c       	ldd	r14, Y+27	; 0x1b
     540:	fc 8c       	ldd	r15, Y+28	; 0x1c
     542:	0d 8d       	ldd	r16, Y+29	; 0x1d
     544:	1e 8d       	ldd	r17, Y+30	; 0x1e
     546:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
     54a:	a2 2e       	mov	r10, r18
     54c:	b3 2e       	mov	r11, r19
     54e:	c4 2e       	mov	r12, r20
     550:	d5 2e       	mov	r13, r21
     552:	e6 2e       	mov	r14, r22
     554:	f7 2e       	mov	r15, r23
     556:	08 2f       	mov	r16, r24
     558:	19 2f       	mov	r17, r25
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	88 2f       	mov	r24, r24
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	2d 85       	ldd	r18, Y+13	; 0x0d
     562:	3e 85       	ldd	r19, Y+14	; 0x0e
     564:	82 0f       	add	r24, r18
     566:	93 1f       	adc	r25, r19
     568:	fc 01       	movw	r30, r24
     56a:	80 81       	ld	r24, Z
     56c:	88 2f       	mov	r24, r24
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	c0 97       	sbiw	r24, 0x30	; 48
     572:	98 8b       	std	Y+16, r25	; 0x10
     574:	8f 87       	std	Y+15, r24	; 0x0f
     576:	89 2f       	mov	r24, r25
     578:	88 0f       	add	r24, r24
     57a:	88 0b       	sbc	r24, r24
     57c:	89 8b       	std	Y+17, r24	; 0x11
     57e:	8a 8b       	std	Y+18, r24	; 0x12
     580:	8b 8b       	std	Y+19, r24	; 0x13
     582:	8c 8b       	std	Y+20, r24	; 0x14
     584:	8d 8b       	std	Y+21, r24	; 0x15
     586:	8e 8b       	std	Y+22, r24	; 0x16
     588:	2a 2d       	mov	r18, r10
     58a:	3b 2d       	mov	r19, r11
     58c:	4c 2d       	mov	r20, r12
     58e:	5d 2d       	mov	r21, r13
     590:	6e 2d       	mov	r22, r14
     592:	7f 2d       	mov	r23, r15
     594:	80 2f       	mov	r24, r16
     596:	91 2f       	mov	r25, r17
     598:	af 84       	ldd	r10, Y+15	; 0x0f
     59a:	b8 88       	ldd	r11, Y+16	; 0x10
     59c:	c9 88       	ldd	r12, Y+17	; 0x11
     59e:	da 88       	ldd	r13, Y+18	; 0x12
     5a0:	eb 88       	ldd	r14, Y+19	; 0x13
     5a2:	fc 88       	ldd	r15, Y+20	; 0x14
     5a4:	0d 89       	ldd	r16, Y+21	; 0x15
     5a6:	1e 89       	ldd	r17, Y+22	; 0x16
     5a8:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
     5ac:	2b 83       	std	Y+3, r18	; 0x03
     5ae:	3c 83       	std	Y+4, r19	; 0x04
     5b0:	4d 83       	std	Y+5, r20	; 0x05
     5b2:	5e 83       	std	Y+6, r21	; 0x06
     5b4:	6f 83       	std	Y+7, r22	; 0x07
     5b6:	78 87       	std	Y+8, r23	; 0x08
     5b8:	89 87       	std	Y+9, r24	; 0x09
     5ba:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	8f 5f       	subi	r24, 0xFF	; 255
     5c0:	8a 83       	std	Y+2, r24	; 0x02
     5c2:	8a 81       	ldd	r24, Y+2	; 0x02
     5c4:	88 2f       	mov	r24, r24
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	2d 85       	ldd	r18, Y+13	; 0x0d
     5ca:	3e 85       	ldd	r19, Y+14	; 0x0e
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	fc 01       	movw	r30, r24
     5d2:	80 81       	ld	r24, Z
     5d4:	88 23       	and	r24, r24
     5d6:	09 f0       	breq	.+2      	; 0x5da <Convert_StringTou16+0x19a>
     5d8:	68 cf       	rjmp	.-304    	; 0x4aa <Convert_StringTou16+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     5da:	2b 81       	ldd	r18, Y+3	; 0x03
     5dc:	3c 81       	ldd	r19, Y+4	; 0x04
     5de:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e2:	fc 01       	movw	r30, r24
     5e4:	31 83       	std	Z+1, r19	; 0x01
     5e6:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     5e8:	89 81       	ldd	r24, Y+1	; 0x01

}
     5ea:	6e 96       	adiw	r28, 0x1e	; 30
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	7f 90       	pop	r7
     610:	6f 90       	pop	r6
     612:	5f 90       	pop	r5
     614:	4f 90       	pop	r4
     616:	3f 90       	pop	r3
     618:	2f 90       	pop	r2
     61a:	08 95       	ret

0000061c <Convert_StringTou32>:


Std_StatusType Convert_StringTou32 (u32* Address_Number, pu8 Address_str){
     61c:	2f 92       	push	r2
     61e:	3f 92       	push	r3
     620:	4f 92       	push	r4
     622:	5f 92       	push	r5
     624:	6f 92       	push	r6
     626:	7f 92       	push	r7
     628:	8f 92       	push	r8
     62a:	9f 92       	push	r9
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	6e 97       	sbiw	r28, 0x1e	; 30
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	9c 87       	std	Y+12, r25	; 0x0c
     652:	8b 87       	std	Y+11, r24	; 0x0b
     654:	7e 87       	std	Y+14, r23	; 0x0e
     656:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     658:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     65a:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     65c:	1b 82       	std	Y+3, r1	; 0x03
     65e:	1c 82       	std	Y+4, r1	; 0x04
     660:	1d 82       	std	Y+5, r1	; 0x05
     662:	1e 82       	std	Y+6, r1	; 0x06
     664:	1f 82       	std	Y+7, r1	; 0x07
     666:	18 86       	std	Y+8, r1	; 0x08
     668:	19 86       	std	Y+9, r1	; 0x09
     66a:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     66c:	8d 85       	ldd	r24, Y+13	; 0x0d
     66e:	9e 85       	ldd	r25, Y+14	; 0x0e
     670:	89 2b       	or	r24, r25
     672:	21 f0       	breq	.+8      	; 0x67c <Convert_StringTou32+0x60>
     674:	8b 85       	ldd	r24, Y+11	; 0x0b
     676:	9c 85       	ldd	r25, Y+12	; 0x0c
     678:	89 2b       	or	r24, r25
     67a:	19 f4       	brne	.+6      	; 0x682 <Convert_StringTou32+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	a5 c0       	rjmp	.+330    	; 0x7cc <Convert_StringTou32+0x1b0>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     682:	1a 82       	std	Y+2, r1	; 0x02
     684:	8c c0       	rjmp	.+280    	; 0x79e <Convert_StringTou32+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     686:	2b 81       	ldd	r18, Y+3	; 0x03
     688:	3c 81       	ldd	r19, Y+4	; 0x04
     68a:	4d 81       	ldd	r20, Y+5	; 0x05
     68c:	5e 81       	ldd	r21, Y+6	; 0x06
     68e:	6f 81       	ldd	r22, Y+7	; 0x07
     690:	78 85       	ldd	r23, Y+8	; 0x08
     692:	89 85       	ldd	r24, Y+9	; 0x09
     694:	9a 85       	ldd	r25, Y+10	; 0x0a
     696:	22 2e       	mov	r2, r18
     698:	33 2e       	mov	r3, r19
     69a:	44 2e       	mov	r4, r20
     69c:	55 2e       	mov	r5, r21
     69e:	66 2e       	mov	r6, r22
     6a0:	77 2e       	mov	r7, r23
     6a2:	88 2e       	mov	r8, r24
     6a4:	99 2e       	mov	r9, r25
     6a6:	22 2d       	mov	r18, r2
     6a8:	33 2d       	mov	r19, r3
     6aa:	44 2d       	mov	r20, r4
     6ac:	55 2d       	mov	r21, r5
     6ae:	66 2d       	mov	r22, r6
     6b0:	77 2d       	mov	r23, r7
     6b2:	88 2d       	mov	r24, r8
     6b4:	99 2d       	mov	r25, r9
     6b6:	01 e0       	ldi	r16, 0x01	; 1
     6b8:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__ashldi3>
     6bc:	a2 2e       	mov	r10, r18
     6be:	b3 2e       	mov	r11, r19
     6c0:	c4 2e       	mov	r12, r20
     6c2:	d5 2e       	mov	r13, r21
     6c4:	e6 2e       	mov	r14, r22
     6c6:	f7 2e       	mov	r15, r23
     6c8:	08 2f       	mov	r16, r24
     6ca:	19 2f       	mov	r17, r25
     6cc:	2a 2c       	mov	r2, r10
     6ce:	3b 2c       	mov	r3, r11
     6d0:	4c 2c       	mov	r4, r12
     6d2:	5d 2c       	mov	r5, r13
     6d4:	6e 2c       	mov	r6, r14
     6d6:	7f 2c       	mov	r7, r15
     6d8:	80 2e       	mov	r8, r16
     6da:	91 2e       	mov	r9, r17
     6dc:	22 2d       	mov	r18, r2
     6de:	33 2d       	mov	r19, r3
     6e0:	44 2d       	mov	r20, r4
     6e2:	55 2d       	mov	r21, r5
     6e4:	66 2d       	mov	r22, r6
     6e6:	77 2d       	mov	r23, r7
     6e8:	88 2d       	mov	r24, r8
     6ea:	99 2d       	mov	r25, r9
     6ec:	02 e0       	ldi	r16, 0x02	; 2
     6ee:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__ashldi3>
     6f2:	2f 8b       	std	Y+23, r18	; 0x17
     6f4:	38 8f       	std	Y+24, r19	; 0x18
     6f6:	49 8f       	std	Y+25, r20	; 0x19
     6f8:	5a 8f       	std	Y+26, r21	; 0x1a
     6fa:	6b 8f       	std	Y+27, r22	; 0x1b
     6fc:	7c 8f       	std	Y+28, r23	; 0x1c
     6fe:	8d 8f       	std	Y+29, r24	; 0x1d
     700:	9e 8f       	std	Y+30, r25	; 0x1e
     702:	22 2d       	mov	r18, r2
     704:	33 2d       	mov	r19, r3
     706:	44 2d       	mov	r20, r4
     708:	55 2d       	mov	r21, r5
     70a:	66 2d       	mov	r22, r6
     70c:	77 2d       	mov	r23, r7
     70e:	88 2d       	mov	r24, r8
     710:	99 2d       	mov	r25, r9
     712:	af 88       	ldd	r10, Y+23	; 0x17
     714:	b8 8c       	ldd	r11, Y+24	; 0x18
     716:	c9 8c       	ldd	r12, Y+25	; 0x19
     718:	da 8c       	ldd	r13, Y+26	; 0x1a
     71a:	eb 8c       	ldd	r14, Y+27	; 0x1b
     71c:	fc 8c       	ldd	r15, Y+28	; 0x1c
     71e:	0d 8d       	ldd	r16, Y+29	; 0x1d
     720:	1e 8d       	ldd	r17, Y+30	; 0x1e
     722:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
     726:	a2 2e       	mov	r10, r18
     728:	b3 2e       	mov	r11, r19
     72a:	c4 2e       	mov	r12, r20
     72c:	d5 2e       	mov	r13, r21
     72e:	e6 2e       	mov	r14, r22
     730:	f7 2e       	mov	r15, r23
     732:	08 2f       	mov	r16, r24
     734:	19 2f       	mov	r17, r25
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2d 85       	ldd	r18, Y+13	; 0x0d
     73e:	3e 85       	ldd	r19, Y+14	; 0x0e
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	88 2f       	mov	r24, r24
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	c0 97       	sbiw	r24, 0x30	; 48
     74e:	98 8b       	std	Y+16, r25	; 0x10
     750:	8f 87       	std	Y+15, r24	; 0x0f
     752:	89 2f       	mov	r24, r25
     754:	88 0f       	add	r24, r24
     756:	88 0b       	sbc	r24, r24
     758:	89 8b       	std	Y+17, r24	; 0x11
     75a:	8a 8b       	std	Y+18, r24	; 0x12
     75c:	8b 8b       	std	Y+19, r24	; 0x13
     75e:	8c 8b       	std	Y+20, r24	; 0x14
     760:	8d 8b       	std	Y+21, r24	; 0x15
     762:	8e 8b       	std	Y+22, r24	; 0x16
     764:	2a 2d       	mov	r18, r10
     766:	3b 2d       	mov	r19, r11
     768:	4c 2d       	mov	r20, r12
     76a:	5d 2d       	mov	r21, r13
     76c:	6e 2d       	mov	r22, r14
     76e:	7f 2d       	mov	r23, r15
     770:	80 2f       	mov	r24, r16
     772:	91 2f       	mov	r25, r17
     774:	af 84       	ldd	r10, Y+15	; 0x0f
     776:	b8 88       	ldd	r11, Y+16	; 0x10
     778:	c9 88       	ldd	r12, Y+17	; 0x11
     77a:	da 88       	ldd	r13, Y+18	; 0x12
     77c:	eb 88       	ldd	r14, Y+19	; 0x13
     77e:	fc 88       	ldd	r15, Y+20	; 0x14
     780:	0d 89       	ldd	r16, Y+21	; 0x15
     782:	1e 89       	ldd	r17, Y+22	; 0x16
     784:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
     788:	2b 83       	std	Y+3, r18	; 0x03
     78a:	3c 83       	std	Y+4, r19	; 0x04
     78c:	4d 83       	std	Y+5, r20	; 0x05
     78e:	5e 83       	std	Y+6, r21	; 0x06
     790:	6f 83       	std	Y+7, r22	; 0x07
     792:	78 87       	std	Y+8, r23	; 0x08
     794:	89 87       	std	Y+9, r24	; 0x09
     796:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     798:	8a 81       	ldd	r24, Y+2	; 0x02
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	8a 83       	std	Y+2, r24	; 0x02
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	2d 85       	ldd	r18, Y+13	; 0x0d
     7a6:	3e 85       	ldd	r19, Y+14	; 0x0e
     7a8:	82 0f       	add	r24, r18
     7aa:	93 1f       	adc	r25, r19
     7ac:	fc 01       	movw	r30, r24
     7ae:	80 81       	ld	r24, Z
     7b0:	88 23       	and	r24, r24
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <Convert_StringTou32+0x19a>
     7b4:	68 cf       	rjmp	.-304    	; 0x686 <Convert_StringTou32+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ba:	ad 81       	ldd	r26, Y+5	; 0x05
     7bc:	be 81       	ldd	r27, Y+6	; 0x06
     7be:	2b 85       	ldd	r18, Y+11	; 0x0b
     7c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     7c2:	f9 01       	movw	r30, r18
     7c4:	80 83       	st	Z, r24
     7c6:	91 83       	std	Z+1, r25	; 0x01
     7c8:	a2 83       	std	Z+2, r26	; 0x02
     7ca:	b3 83       	std	Z+3, r27	; 0x03
			}

			return Loc_enuStatus;
     7cc:	89 81       	ldd	r24, Y+1	; 0x01

}
     7ce:	6e 96       	adiw	r28, 0x1e	; 30
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	3f 90       	pop	r3
     7fc:	2f 90       	pop	r2
     7fe:	08 95       	ret

00000800 <Convert_StringTou64>:


Std_StatusType Convert_StringTou64 (u64* Address_Number, pu8 Address_str){
     800:	2f 92       	push	r2
     802:	3f 92       	push	r3
     804:	4f 92       	push	r4
     806:	5f 92       	push	r5
     808:	6f 92       	push	r6
     80a:	7f 92       	push	r7
     80c:	8f 92       	push	r8
     80e:	9f 92       	push	r9
     810:	af 92       	push	r10
     812:	bf 92       	push	r11
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	6e 97       	sbiw	r28, 0x1e	; 30
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	9c 87       	std	Y+12, r25	; 0x0c
     836:	8b 87       	std	Y+11, r24	; 0x0b
     838:	7e 87       	std	Y+14, r23	; 0x0e
     83a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     83c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     83e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     840:	1b 82       	std	Y+3, r1	; 0x03
     842:	1c 82       	std	Y+4, r1	; 0x04
     844:	1d 82       	std	Y+5, r1	; 0x05
     846:	1e 82       	std	Y+6, r1	; 0x06
     848:	1f 82       	std	Y+7, r1	; 0x07
     84a:	18 86       	std	Y+8, r1	; 0x08
     84c:	19 86       	std	Y+9, r1	; 0x09
     84e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     850:	8d 85       	ldd	r24, Y+13	; 0x0d
     852:	9e 85       	ldd	r25, Y+14	; 0x0e
     854:	89 2b       	or	r24, r25
     856:	21 f0       	breq	.+8      	; 0x860 <__stack+0x1>
     858:	8b 85       	ldd	r24, Y+11	; 0x0b
     85a:	9c 85       	ldd	r25, Y+12	; 0x0c
     85c:	89 2b       	or	r24, r25
     85e:	19 f4       	brne	.+6      	; 0x866 <__stack+0x7>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	b4 c0       	rjmp	.+360    	; 0x9ce <__stack+0x16f>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     866:	1a 82       	std	Y+2, r1	; 0x02
     868:	8c c0       	rjmp	.+280    	; 0x982 <__stack+0x123>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     86a:	2b 81       	ldd	r18, Y+3	; 0x03
     86c:	3c 81       	ldd	r19, Y+4	; 0x04
     86e:	4d 81       	ldd	r20, Y+5	; 0x05
     870:	5e 81       	ldd	r21, Y+6	; 0x06
     872:	6f 81       	ldd	r22, Y+7	; 0x07
     874:	78 85       	ldd	r23, Y+8	; 0x08
     876:	89 85       	ldd	r24, Y+9	; 0x09
     878:	9a 85       	ldd	r25, Y+10	; 0x0a
     87a:	22 2e       	mov	r2, r18
     87c:	33 2e       	mov	r3, r19
     87e:	44 2e       	mov	r4, r20
     880:	55 2e       	mov	r5, r21
     882:	66 2e       	mov	r6, r22
     884:	77 2e       	mov	r7, r23
     886:	88 2e       	mov	r8, r24
     888:	99 2e       	mov	r9, r25
     88a:	22 2d       	mov	r18, r2
     88c:	33 2d       	mov	r19, r3
     88e:	44 2d       	mov	r20, r4
     890:	55 2d       	mov	r21, r5
     892:	66 2d       	mov	r22, r6
     894:	77 2d       	mov	r23, r7
     896:	88 2d       	mov	r24, r8
     898:	99 2d       	mov	r25, r9
     89a:	01 e0       	ldi	r16, 0x01	; 1
     89c:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__ashldi3>
     8a0:	a2 2e       	mov	r10, r18
     8a2:	b3 2e       	mov	r11, r19
     8a4:	c4 2e       	mov	r12, r20
     8a6:	d5 2e       	mov	r13, r21
     8a8:	e6 2e       	mov	r14, r22
     8aa:	f7 2e       	mov	r15, r23
     8ac:	08 2f       	mov	r16, r24
     8ae:	19 2f       	mov	r17, r25
     8b0:	2a 2c       	mov	r2, r10
     8b2:	3b 2c       	mov	r3, r11
     8b4:	4c 2c       	mov	r4, r12
     8b6:	5d 2c       	mov	r5, r13
     8b8:	6e 2c       	mov	r6, r14
     8ba:	7f 2c       	mov	r7, r15
     8bc:	80 2e       	mov	r8, r16
     8be:	91 2e       	mov	r9, r17
     8c0:	22 2d       	mov	r18, r2
     8c2:	33 2d       	mov	r19, r3
     8c4:	44 2d       	mov	r20, r4
     8c6:	55 2d       	mov	r21, r5
     8c8:	66 2d       	mov	r22, r6
     8ca:	77 2d       	mov	r23, r7
     8cc:	88 2d       	mov	r24, r8
     8ce:	99 2d       	mov	r25, r9
     8d0:	02 e0       	ldi	r16, 0x02	; 2
     8d2:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__ashldi3>
     8d6:	2f 8b       	std	Y+23, r18	; 0x17
     8d8:	38 8f       	std	Y+24, r19	; 0x18
     8da:	49 8f       	std	Y+25, r20	; 0x19
     8dc:	5a 8f       	std	Y+26, r21	; 0x1a
     8de:	6b 8f       	std	Y+27, r22	; 0x1b
     8e0:	7c 8f       	std	Y+28, r23	; 0x1c
     8e2:	8d 8f       	std	Y+29, r24	; 0x1d
     8e4:	9e 8f       	std	Y+30, r25	; 0x1e
     8e6:	22 2d       	mov	r18, r2
     8e8:	33 2d       	mov	r19, r3
     8ea:	44 2d       	mov	r20, r4
     8ec:	55 2d       	mov	r21, r5
     8ee:	66 2d       	mov	r22, r6
     8f0:	77 2d       	mov	r23, r7
     8f2:	88 2d       	mov	r24, r8
     8f4:	99 2d       	mov	r25, r9
     8f6:	af 88       	ldd	r10, Y+23	; 0x17
     8f8:	b8 8c       	ldd	r11, Y+24	; 0x18
     8fa:	c9 8c       	ldd	r12, Y+25	; 0x19
     8fc:	da 8c       	ldd	r13, Y+26	; 0x1a
     8fe:	eb 8c       	ldd	r14, Y+27	; 0x1b
     900:	fc 8c       	ldd	r15, Y+28	; 0x1c
     902:	0d 8d       	ldd	r16, Y+29	; 0x1d
     904:	1e 8d       	ldd	r17, Y+30	; 0x1e
     906:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
     90a:	a2 2e       	mov	r10, r18
     90c:	b3 2e       	mov	r11, r19
     90e:	c4 2e       	mov	r12, r20
     910:	d5 2e       	mov	r13, r21
     912:	e6 2e       	mov	r14, r22
     914:	f7 2e       	mov	r15, r23
     916:	08 2f       	mov	r16, r24
     918:	19 2f       	mov	r17, r25
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	2d 85       	ldd	r18, Y+13	; 0x0d
     922:	3e 85       	ldd	r19, Y+14	; 0x0e
     924:	82 0f       	add	r24, r18
     926:	93 1f       	adc	r25, r19
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	c0 97       	sbiw	r24, 0x30	; 48
     932:	98 8b       	std	Y+16, r25	; 0x10
     934:	8f 87       	std	Y+15, r24	; 0x0f
     936:	89 2f       	mov	r24, r25
     938:	88 0f       	add	r24, r24
     93a:	88 0b       	sbc	r24, r24
     93c:	89 8b       	std	Y+17, r24	; 0x11
     93e:	8a 8b       	std	Y+18, r24	; 0x12
     940:	8b 8b       	std	Y+19, r24	; 0x13
     942:	8c 8b       	std	Y+20, r24	; 0x14
     944:	8d 8b       	std	Y+21, r24	; 0x15
     946:	8e 8b       	std	Y+22, r24	; 0x16
     948:	2a 2d       	mov	r18, r10
     94a:	3b 2d       	mov	r19, r11
     94c:	4c 2d       	mov	r20, r12
     94e:	5d 2d       	mov	r21, r13
     950:	6e 2d       	mov	r22, r14
     952:	7f 2d       	mov	r23, r15
     954:	80 2f       	mov	r24, r16
     956:	91 2f       	mov	r25, r17
     958:	af 84       	ldd	r10, Y+15	; 0x0f
     95a:	b8 88       	ldd	r11, Y+16	; 0x10
     95c:	c9 88       	ldd	r12, Y+17	; 0x11
     95e:	da 88       	ldd	r13, Y+18	; 0x12
     960:	eb 88       	ldd	r14, Y+19	; 0x13
     962:	fc 88       	ldd	r15, Y+20	; 0x14
     964:	0d 89       	ldd	r16, Y+21	; 0x15
     966:	1e 89       	ldd	r17, Y+22	; 0x16
     968:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
     96c:	2b 83       	std	Y+3, r18	; 0x03
     96e:	3c 83       	std	Y+4, r19	; 0x04
     970:	4d 83       	std	Y+5, r20	; 0x05
     972:	5e 83       	std	Y+6, r21	; 0x06
     974:	6f 83       	std	Y+7, r22	; 0x07
     976:	78 87       	std	Y+8, r23	; 0x08
     978:	89 87       	std	Y+9, r24	; 0x09
     97a:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	8a 83       	std	Y+2, r24	; 0x02
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	88 2f       	mov	r24, r24
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	2d 85       	ldd	r18, Y+13	; 0x0d
     98a:	3e 85       	ldd	r19, Y+14	; 0x0e
     98c:	82 0f       	add	r24, r18
     98e:	93 1f       	adc	r25, r19
     990:	fc 01       	movw	r30, r24
     992:	80 81       	ld	r24, Z
     994:	88 23       	and	r24, r24
     996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x13b>
     998:	68 cf       	rjmp	.-304    	; 0x86a <__stack+0xb>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     99a:	8b 85       	ldd	r24, Y+11	; 0x0b
     99c:	9c 85       	ldd	r25, Y+12	; 0x0c
     99e:	2b 81       	ldd	r18, Y+3	; 0x03
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
     9a4:	2c 81       	ldd	r18, Y+4	; 0x04
     9a6:	fc 01       	movw	r30, r24
     9a8:	21 83       	std	Z+1, r18	; 0x01
     9aa:	2d 81       	ldd	r18, Y+5	; 0x05
     9ac:	fc 01       	movw	r30, r24
     9ae:	22 83       	std	Z+2, r18	; 0x02
     9b0:	2e 81       	ldd	r18, Y+6	; 0x06
     9b2:	fc 01       	movw	r30, r24
     9b4:	23 83       	std	Z+3, r18	; 0x03
     9b6:	2f 81       	ldd	r18, Y+7	; 0x07
     9b8:	fc 01       	movw	r30, r24
     9ba:	24 83       	std	Z+4, r18	; 0x04
     9bc:	28 85       	ldd	r18, Y+8	; 0x08
     9be:	fc 01       	movw	r30, r24
     9c0:	25 83       	std	Z+5, r18	; 0x05
     9c2:	29 85       	ldd	r18, Y+9	; 0x09
     9c4:	fc 01       	movw	r30, r24
     9c6:	26 83       	std	Z+6, r18	; 0x06
     9c8:	2a 85       	ldd	r18, Y+10	; 0x0a
     9ca:	fc 01       	movw	r30, r24
     9cc:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     9ce:	89 81       	ldd	r24, Y+1	; 0x01

}
     9d0:	6e 96       	adiw	r28, 0x1e	; 30
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	7f 90       	pop	r7
     9f6:	6f 90       	pop	r6
     9f8:	5f 90       	pop	r5
     9fa:	4f 90       	pop	r4
     9fc:	3f 90       	pop	r3
     9fe:	2f 90       	pop	r2
     a00:	08 95       	ret

00000a02 <Wtd_enuSleep>:



/********************************** Software Interfaces Declarations *******************/

Wtd_StatusErrorType Wtd_enuSleep (Wtd_SelectSleepTime Copy_enuSleepTime){
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	00 d0       	rcall	.+0      	; 0xa08 <Wtd_enuSleep+0x6>
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	8a 83       	std	Y+2, r24	; 0x02
	Wtd_StatusErrorType Loc_enuWtdStatus = WTD_STATUS_OK;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	89 83       	std	Y+1, r24	; 0x01

	Wtd_Enable(Copy_enuSleepTime);
     a12:	81 e4       	ldi	r24, 0x41	; 65
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	21 e4       	ldi	r18, 0x41	; 65
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	f9 01       	movw	r30, r18
     a1c:	20 81       	ld	r18, Z
     a1e:	32 2f       	mov	r19, r18
     a20:	30 7e       	andi	r19, 0xE0	; 224
     a22:	2a 81       	ldd	r18, Y+2	; 0x02
     a24:	23 2b       	or	r18, r19
     a26:	28 60       	ori	r18, 0x08	; 8
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18

			return Loc_enuWtdStatus;
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <Wtd_enuDisable>:

Wtd_StatusErrorType Wtd_enuDisable (void){
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	1f 92       	push	r1
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62

	Wtd_StatusErrorType Loc_enuWtdStatus = WTD_STATUS_OK;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	89 83       	std	Y+1, r24	; 0x01
	Wtd_Disable();
     a46:	81 e4       	ldi	r24, 0x41	; 65
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	21 e4       	ldi	r18, 0x41	; 65
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	f9 01       	movw	r30, r18
     a50:	20 81       	ld	r18, Z
     a52:	20 7e       	andi	r18, 0xE0	; 224
     a54:	28 61       	ori	r18, 0x18	; 24
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
     a5a:	81 e4       	ldi	r24, 0x41	; 65
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	fc 01       	movw	r30, r24
     a60:	10 82       	st	Z, r1



	return Loc_enuWtdStatus;
     a62:	89 81       	ldd	r24, Y+1	; 0x01
}
     a64:	0f 90       	pop	r0
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <Timer1_enuInit>:



/********************************** Software Interfaces Declarations *******************/

Timer1_StatusErrorType Timer1_enuInit(const Timer1_ConfigType* Address_Timer1){
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	00 d0       	rcall	.+0      	; 0xa72 <Timer1_enuInit+0x6>
     a72:	1f 92       	push	r1
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	9b 83       	std	Y+3, r25	; 0x03
     a7a:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     a7c:	19 82       	std	Y+1, r1	; 0x01

			    if(NULL == Address_Timer1){
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	9b 81       	ldd	r25, Y+3	; 0x03
     a82:	89 2b       	or	r24, r25
     a84:	19 f4       	brne	.+6      	; 0xa8c <Timer1_enuInit+0x20>

			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	89 83       	std	Y+1, r24	; 0x01
     a8a:	7c c0       	rjmp	.+248    	; 0xb84 <Timer1_enuInit+0x118>
			    }
			    else{

			    	/* Disable Timer1 Peripheral */
			    	        Timer1_Disable();
     a8c:	8e e4       	ldi	r24, 0x4E	; 78
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	2e e4       	ldi	r18, 0x4E	; 78
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	28 7f       	andi	r18, 0xF8	; 248
     a9a:	fc 01       	movw	r30, r24
     a9c:	20 83       	st	Z, r18

			    	        /* Select Mode timer */
			    	        Timer1_SelectMode((Address_Timer1->select_mode));
     a9e:	8f e4       	ldi	r24, 0x4F	; 79
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	2f e4       	ldi	r18, 0x4F	; 79
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	f9 01       	movw	r30, r18
     aa8:	20 81       	ld	r18, Z
     aaa:	42 2f       	mov	r20, r18
     aac:	4c 7f       	andi	r20, 0xFC	; 252
     aae:	2a 81       	ldd	r18, Y+2	; 0x02
     ab0:	3b 81       	ldd	r19, Y+3	; 0x03
     ab2:	f9 01       	movw	r30, r18
     ab4:	21 81       	ldd	r18, Z+1	; 0x01
     ab6:	24 2b       	or	r18, r20
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
     abc:	8e e4       	ldi	r24, 0x4E	; 78
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	2e e4       	ldi	r18, 0x4E	; 78
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	f9 01       	movw	r30, r18
     ac6:	20 81       	ld	r18, Z
     ac8:	42 2f       	mov	r20, r18
     aca:	47 7e       	andi	r20, 0xE7	; 231
     acc:	2a 81       	ldd	r18, Y+2	; 0x02
     ace:	3b 81       	ldd	r19, Y+3	; 0x03
     ad0:	f9 01       	movw	r30, r18
     ad2:	21 81       	ldd	r18, Z+1	; 0x01
     ad4:	22 2f       	mov	r18, r18
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	22 0f       	add	r18, r18
     ada:	33 1f       	adc	r19, r19
     adc:	24 2b       	or	r18, r20
     ade:	fc 01       	movw	r30, r24
     ae0:	20 83       	st	Z, r18

			    	        /* Select Mode timer ChannelA*/
			    	        Timer1_SelectOutputModeChannelA(Address_Timer1->select_output_mode_channelA);
     ae2:	8f e4       	ldi	r24, 0x4F	; 79
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	2f e4       	ldi	r18, 0x4F	; 79
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	f9 01       	movw	r30, r18
     aec:	20 81       	ld	r18, Z
     aee:	42 2f       	mov	r20, r18
     af0:	4f 73       	andi	r20, 0x3F	; 63
     af2:	2a 81       	ldd	r18, Y+2	; 0x02
     af4:	3b 81       	ldd	r19, Y+3	; 0x03
     af6:	f9 01       	movw	r30, r18
     af8:	22 81       	ldd	r18, Z+2	; 0x02
     afa:	22 2f       	mov	r18, r18
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	00 24       	eor	r0, r0
     b00:	36 95       	lsr	r19
     b02:	27 95       	ror	r18
     b04:	07 94       	ror	r0
     b06:	36 95       	lsr	r19
     b08:	27 95       	ror	r18
     b0a:	07 94       	ror	r0
     b0c:	32 2f       	mov	r19, r18
     b0e:	20 2d       	mov	r18, r0
     b10:	24 2b       	or	r18, r20
     b12:	fc 01       	movw	r30, r24
     b14:	20 83       	st	Z, r18

			    	        /* Select Mode timer Channel B*/
			    	        Timer1_SelectOutputModeChannelB((Address_Timer1->select_output_mode_channelB));
     b16:	8f e4       	ldi	r24, 0x4F	; 79
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	2f e4       	ldi	r18, 0x4F	; 79
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	f9 01       	movw	r30, r18
     b20:	20 81       	ld	r18, Z
     b22:	42 2f       	mov	r20, r18
     b24:	4c 70       	andi	r20, 0x0C	; 12
     b26:	2a 81       	ldd	r18, Y+2	; 0x02
     b28:	3b 81       	ldd	r19, Y+3	; 0x03
     b2a:	f9 01       	movw	r30, r18
     b2c:	23 81       	ldd	r18, Z+3	; 0x03
     b2e:	22 2f       	mov	r18, r18
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	22 95       	swap	r18
     b34:	32 95       	swap	r19
     b36:	30 7f       	andi	r19, 0xF0	; 240
     b38:	32 27       	eor	r19, r18
     b3a:	20 7f       	andi	r18, 0xF0	; 240
     b3c:	32 27       	eor	r19, r18
     b3e:	24 2b       	or	r18, r20
     b40:	fc 01       	movw	r30, r24
     b42:	20 83       	st	Z, r18

			    	        Timer1_StaticU16InitValue = Address_Timer1->init_counter_value;
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	9b 81       	ldd	r25, Y+3	; 0x03
     b48:	fc 01       	movw	r30, r24
     b4a:	84 81       	ldd	r24, Z+4	; 0x04
     b4c:	95 81       	ldd	r25, Z+5	; 0x05
     b4e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Timer1_StaticU16InitValue+0x1>
     b52:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Timer1_StaticU16InitValue>

			    	        /* Update Init Value*/
			    	        Loc_enuTimer1Status= Timer1_enuSetValueNormalCounter(Address_Timer1->init_counter_value);
     b56:	8a 81       	ldd	r24, Y+2	; 0x02
     b58:	9b 81       	ldd	r25, Y+3	; 0x03
     b5a:	fc 01       	movw	r30, r24
     b5c:	84 81       	ldd	r24, Z+4	; 0x04
     b5e:	95 81       	ldd	r25, Z+5	; 0x05
     b60:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Timer1_enuSetValueNormalCounter>
     b64:	89 83       	std	Y+1, r24	; 0x01

			    	        /* Enable Timer1 Peripheral */
			    	        Timer1_Enable(Address_Timer1->prescaler_value);
     b66:	8e e4       	ldi	r24, 0x4E	; 78
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	2e e4       	ldi	r18, 0x4E	; 78
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	20 81       	ld	r18, Z
     b72:	42 2f       	mov	r20, r18
     b74:	48 7f       	andi	r20, 0xF8	; 248
     b76:	2a 81       	ldd	r18, Y+2	; 0x02
     b78:	3b 81       	ldd	r19, Y+3	; 0x03
     b7a:	f9 01       	movw	r30, r18
     b7c:	20 81       	ld	r18, Z
     b7e:	24 2b       	or	r18, r20
     b80:	fc 01       	movw	r30, r24
     b82:	20 83       	st	Z, r18

			    }

			    return Loc_enuTimer1Status;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
}
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	08 95       	ret

00000b92 <Timer1_DeInit>:

Timer1_StatusErrorType Timer1_DeInit(const Timer1_ConfigType* Address_Timer1){
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	00 d0       	rcall	.+0      	; 0xb98 <Timer1_DeInit+0x6>
     b98:	1f 92       	push	r1
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	9b 83       	std	Y+3, r25	; 0x03
     ba0:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     ba2:	19 82       	std	Y+1, r1	; 0x01

			    if(NULL == Address_Timer1){
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	9b 81       	ldd	r25, Y+3	; 0x03
     ba8:	89 2b       	or	r24, r25
     baa:	19 f4       	brne	.+6      	; 0xbb2 <Timer1_DeInit+0x20>

			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <Timer1_DeInit+0x32>
			    }
			    else{

			    	/* Disable Timer1 Peripheral */
			    	        Timer1_Disable();
     bb2:	8e e4       	ldi	r24, 0x4E	; 78
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	2e e4       	ldi	r18, 0x4E	; 78
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	f9 01       	movw	r30, r18
     bbc:	20 81       	ld	r18, Z
     bbe:	28 7f       	andi	r18, 0xF8	; 248
     bc0:	fc 01       	movw	r30, r24
     bc2:	20 83       	st	Z, r18
			    }

			    return Loc_enuTimer1Status;
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <Timer1_enuEnableInterruptOverflow>:

Timer1_StatusErrorType Timer1_enuEnableInterruptOverflow(void){
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	1f 92       	push	r1
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     bdc:	19 82       	std	Y+1, r1	; 0x01
	Timer1_EnableOverviewInterrupt();
     bde:	89 e5       	ldi	r24, 0x59	; 89
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	29 e5       	ldi	r18, 0x59	; 89
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	f9 01       	movw	r30, r18
     be8:	20 81       	ld	r18, Z
     bea:	24 60       	ori	r18, 0x04	; 4
     bec:	fc 01       	movw	r30, r24
     bee:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
     bf2:	0f 90       	pop	r0
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <Timer1_enuDisableInterruptOverflow>:

Timer1_StatusErrorType Timer1_enuDisableInterruptOverflow(void){
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	1f 92       	push	r1
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     c04:	19 82       	std	Y+1, r1	; 0x01

	Timer1_DisableOverviewInterrupt();
     c06:	89 e5       	ldi	r24, 0x59	; 89
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	29 e5       	ldi	r18, 0x59	; 89
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	f9 01       	movw	r30, r18
     c10:	20 81       	ld	r18, Z
     c12:	2b 7f       	andi	r18, 0xFB	; 251
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
	return Loc_enuTimer1Status;
     c18:	89 81       	ldd	r24, Y+1	; 0x01
}
     c1a:	0f 90       	pop	r0
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <Timer1_enuEnableInterruptCompareChannelA>:

Timer1_StatusErrorType Timer1_enuEnableInterruptCompareChannelA(void){
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	1f 92       	push	r1
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     c2c:	19 82       	std	Y+1, r1	; 0x01
	Timer1_EnableChannelA_ComparePwmInterrupt();
     c2e:	89 e5       	ldi	r24, 0x59	; 89
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	29 e5       	ldi	r18, 0x59	; 89
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	f9 01       	movw	r30, r18
     c38:	20 81       	ld	r18, Z
     c3a:	28 60       	ori	r18, 0x08	; 8
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
}
     c42:	0f 90       	pop	r0
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <Timer1_enuDisableInterruptCompareChannelA>:
Timer1_StatusErrorType Timer1_enuDisableInterruptCompareChannelA(void){
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	1f 92       	push	r1
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     c54:	19 82       	std	Y+1, r1	; 0x01
	Timer1_DisbleChannelA_ComparePwmInterrupt();
     c56:	89 e5       	ldi	r24, 0x59	; 89
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	29 e5       	ldi	r18, 0x59	; 89
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	f9 01       	movw	r30, r18
     c60:	20 81       	ld	r18, Z
     c62:	27 7f       	andi	r18, 0xF7	; 247
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     c68:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6a:	0f 90       	pop	r0
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <Timer1_enuEnableInterruptCompareChannelB>:


Timer1_StatusErrorType Timer1_enuEnableInterruptCompareChannelB(void){
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	1f 92       	push	r1
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     c7c:	19 82       	std	Y+1, r1	; 0x01

	Timer1_EnableChannelB_ComparePwmInterrupt();
     c7e:	89 e5       	ldi	r24, 0x59	; 89
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	29 e5       	ldi	r18, 0x59	; 89
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	f9 01       	movw	r30, r18
     c88:	20 81       	ld	r18, Z
     c8a:	20 61       	ori	r18, 0x10	; 16
     c8c:	fc 01       	movw	r30, r24
     c8e:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     c90:	89 81       	ldd	r24, Y+1	; 0x01
}
     c92:	0f 90       	pop	r0
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <Timer1_enuDisableInterruptCompareChannelB>:
Timer1_StatusErrorType Timer1_enuDisableInterruptCompareChannelB(void){
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	1f 92       	push	r1
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     ca4:	19 82       	std	Y+1, r1	; 0x01
	Timer1_DisbleChannelB_ComparePwmInterrupt();
     ca6:	89 e5       	ldi	r24, 0x59	; 89
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	29 e5       	ldi	r18, 0x59	; 89
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	f9 01       	movw	r30, r18
     cb0:	20 81       	ld	r18, Z
     cb2:	2f 7e       	andi	r18, 0xEF	; 239
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cba:	0f 90       	pop	r0
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <Timer1_enuEnableInterruptIcu>:


Timer1_StatusErrorType Timer1_enuEnableInterruptIcu(void){
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	1f 92       	push	r1
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     ccc:	19 82       	std	Y+1, r1	; 0x01
	Timer1_EnableIcuInterrupt();
     cce:	89 e5       	ldi	r24, 0x59	; 89
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	29 e5       	ldi	r18, 0x59	; 89
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	f9 01       	movw	r30, r18
     cd8:	20 81       	ld	r18, Z
     cda:	20 62       	ori	r18, 0x20	; 32
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce2:	0f 90       	pop	r0
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <Timer1_enuDisableInterruptIcu>:
Timer1_StatusErrorType Timer1_enuDisableInterruptIcu(void){
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	1f 92       	push	r1
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     cf4:	19 82       	std	Y+1, r1	; 0x01
	Timer1_DisableIcuInterrupt();
     cf6:	89 e5       	ldi	r24, 0x59	; 89
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	29 e5       	ldi	r18, 0x59	; 89
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	f9 01       	movw	r30, r18
     d00:	20 81       	ld	r18, Z
     d02:	2f 7d       	andi	r18, 0xDF	; 223
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0a:	0f 90       	pop	r0
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <Timer1_enuSetCallbackFunctionOverflow>:



Timer1_StatusErrorType Timer1_enuSetCallbackFunctionOverflow(void (*callback)(void)){
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	00 d0       	rcall	.+0      	; 0xd18 <Timer1_enuSetCallbackFunctionOverflow+0x6>
     d18:	1f 92       	push	r1
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	9b 83       	std	Y+3, r25	; 0x03
     d20:	8a 83       	std	Y+2, r24	; 0x02

		Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     d22:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == callback){
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	9b 81       	ldd	r25, Y+3	; 0x03
     d28:	89 2b       	or	r24, r25
     d2a:	19 f4       	brne	.+6      	; 0xd32 <Timer1_enuSetCallbackFunctionOverflow+0x20>

			Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	06 c0       	rjmp	.+12     	; 0xd3e <Timer1_enuSetCallbackFunctionOverflow+0x2c>
		}
		else{
			Timer1_OverflowInterruptHandler = callback;
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	9b 81       	ldd	r25, Y+3	; 0x03
     d36:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <__data_end+0x1>
     d3a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
		}

		return Loc_enuTimer1Status;
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <Timer1_enuSetCallbackFunctionCompareChannelA>:
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelA(void (*callback)(void)){
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	00 d0       	rcall	.+0      	; 0xd52 <Timer1_enuSetCallbackFunctionCompareChannelA+0x6>
     d52:	1f 92       	push	r1
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	9b 83       	std	Y+3, r25	; 0x03
     d5a:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     d5c:	19 82       	std	Y+1, r1	; 0x01

			if(NULL == callback){
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	9b 81       	ldd	r25, Y+3	; 0x03
     d62:	89 2b       	or	r24, r25
     d64:	19 f4       	brne	.+6      	; 0xd6c <Timer1_enuSetCallbackFunctionCompareChannelA+0x20>

				Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <Timer1_enuSetCallbackFunctionCompareChannelA+0x2c>
			}
			else{
				Timer1_CompareChannelAInterruptHandler = callback;
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	9b 81       	ldd	r25, Y+3	; 0x03
     d70:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <Timer1_CompareChannelAInterruptHandler+0x1>
     d74:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <Timer1_CompareChannelAInterruptHandler>
			}

			return Loc_enuTimer1Status;
     d78:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <Timer1_enuSetCallbackFunctionCompareChannelB>:
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelB(void (*callback)(void)){
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <Timer1_enuSetCallbackFunctionCompareChannelB+0x6>
     d8c:	1f 92       	push	r1
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	9b 83       	std	Y+3, r25	; 0x03
     d94:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     d96:	19 82       	std	Y+1, r1	; 0x01

				if(NULL == callback){
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	9b 81       	ldd	r25, Y+3	; 0x03
     d9c:	89 2b       	or	r24, r25
     d9e:	19 f4       	brne	.+6      	; 0xda6 <Timer1_enuSetCallbackFunctionCompareChannelB+0x20>

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <Timer1_enuSetCallbackFunctionCompareChannelB+0x2c>
				}
				else{
					Timer1_CompareChannelBInterruptHandler = callback;
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	9b 81       	ldd	r25, Y+3	; 0x03
     daa:	90 93 ff 00 	sts	0x00FF, r25	; 0x8000ff <Timer1_CompareChannelBInterruptHandler+0x1>
     dae:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <Timer1_CompareChannelBInterruptHandler>
				}

				return Loc_enuTimer1Status;
     db2:	89 81       	ldd	r24, Y+1	; 0x01
}
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <Timer1_enuSetCallbackFunctionIcu>:

Timer1_StatusErrorType Timer1_enuSetCallbackFunctionIcu(void (*callback)(void)){
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <Timer1_enuSetCallbackFunctionIcu+0x6>
     dc6:	1f 92       	push	r1
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	9b 83       	std	Y+3, r25	; 0x03
     dce:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     dd0:	19 82       	std	Y+1, r1	; 0x01

				if(NULL == callback){
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	89 2b       	or	r24, r25
     dd8:	19 f4       	brne	.+6      	; 0xde0 <Timer1_enuSetCallbackFunctionIcu+0x20>

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	06 c0       	rjmp	.+12     	; 0xdec <Timer1_enuSetCallbackFunctionIcu+0x2c>
				}
				else{
					Timer1_IcuInterruptHandler = callback;
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	9b 81       	ldd	r25, Y+3	; 0x03
     de4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Timer1_IcuInterruptHandler+0x1>
     de8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Timer1_IcuInterruptHandler>
				}

				return Loc_enuTimer1Status;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
}
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <Timer1_enuSetValueNormalCounter>:


Timer1_StatusErrorType Timer1_enuSetValueNormalCounter(u16 Copy_u16Value){
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <Timer1_enuSetValueNormalCounter+0x6>
     e00:	1f 92       	push	r1
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	9b 83       	std	Y+3, r25	; 0x03
     e08:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     e0a:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(TCNT1H,(Copy_u16Value>>8));
     e0c:	8d e4       	ldi	r24, 0x4D	; 77
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	2a 81       	ldd	r18, Y+2	; 0x02
     e12:	3b 81       	ldd	r19, Y+3	; 0x03
     e14:	23 2f       	mov	r18, r19
     e16:	33 27       	eor	r19, r19
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
	ASSIGN_REG(TCNT1L,(Copy_u16Value &0x0F));
     e1c:	8c e4       	ldi	r24, 0x4C	; 76
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	2a 81       	ldd	r18, Y+2	; 0x02
     e22:	2f 70       	andi	r18, 0x0F	; 15
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18

		return Loc_enuTimer1Status;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <Timer1_enuSetValueCompareChannelA>:
Timer1_StatusErrorType Timer1_enuSetValueCompareChannelA(u16 Copy_u16Value){
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <Timer1_enuSetValueCompareChannelA+0x6>
     e3c:	1f 92       	push	r1
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9b 83       	std	Y+3, r25	; 0x03
     e44:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     e46:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(OCR1AH,(Copy_u16Value>>8));
     e48:	8b e4       	ldi	r24, 0x4B	; 75
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	2a 81       	ldd	r18, Y+2	; 0x02
     e4e:	3b 81       	ldd	r19, Y+3	; 0x03
     e50:	23 2f       	mov	r18, r19
     e52:	33 27       	eor	r19, r19
     e54:	fc 01       	movw	r30, r24
     e56:	20 83       	st	Z, r18
	ASSIGN_REG(OCR1AL,(Copy_u16Value &0x0F));
     e58:	8a e4       	ldi	r24, 0x4A	; 74
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	2a 81       	ldd	r18, Y+2	; 0x02
     e5e:	2f 70       	andi	r18, 0x0F	; 15
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     e64:	89 81       	ldd	r24, Y+1	; 0x01
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <Timer1_enuSetValueCompareChannelB>:
Timer1_StatusErrorType Timer1_enuSetValueCompareChannelB(u16 Copy_u16Value){
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	00 d0       	rcall	.+0      	; 0xe78 <Timer1_enuSetValueCompareChannelB+0x6>
     e78:	1f 92       	push	r1
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	9b 83       	std	Y+3, r25	; 0x03
     e80:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     e82:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(OCR1BH,(Copy_u16Value>>8));
     e84:	89 e4       	ldi	r24, 0x49	; 73
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	2a 81       	ldd	r18, Y+2	; 0x02
     e8a:	3b 81       	ldd	r19, Y+3	; 0x03
     e8c:	23 2f       	mov	r18, r19
     e8e:	33 27       	eor	r19, r19
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18
	ASSIGN_REG(OCR1BL,(Copy_u16Value &0x0F));
     e94:	88 e4       	ldi	r24, 0x48	; 72
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	2a 81       	ldd	r18, Y+2	; 0x02
     e9a:	2f 70       	andi	r18, 0x0F	; 15
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <Timer1_enuSetValueIcu>:
Timer1_StatusErrorType Timer1_enuSetValueIcu(u16 Copy_u16Value){
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <Timer1_enuSetValueIcu+0x6>
     eb4:	1f 92       	push	r1
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9b 83       	std	Y+3, r25	; 0x03
     ebc:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     ebe:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(ICR1H,(Copy_u16Value>>8));
     ec0:	87 e4       	ldi	r24, 0x47	; 71
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	2a 81       	ldd	r18, Y+2	; 0x02
     ec6:	3b 81       	ldd	r19, Y+3	; 0x03
     ec8:	23 2f       	mov	r18, r19
     eca:	33 27       	eor	r19, r19
     ecc:	fc 01       	movw	r30, r24
     ece:	20 83       	st	Z, r18
	ASSIGN_REG(ICR1L,(Copy_u16Value &0x0F));
     ed0:	86 e4       	ldi	r24, 0x46	; 70
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	2a 81       	ldd	r18, Y+2	; 0x02
     ed6:	2f 70       	andi	r18, 0x0F	; 15
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <Timer1_enuGetTimeElapsedNormalCounter>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedNormalCounter(u16* Address_Value){
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <Timer1_enuGetTimeElapsedNormalCounter+0x6>
     ef0:	1f 92       	push	r1
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9b 83       	std	Y+3, r25	; 0x03
     ef8:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     efa:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Value){
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	9b 81       	ldd	r25, Y+3	; 0x03
     f00:	89 2b       	or	r24, r25
     f02:	19 f4       	brne	.+6      	; 0xf0a <Timer1_enuGetTimeElapsedNormalCounter+0x20>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	1f c0       	rjmp	.+62     	; 0xf48 <Timer1_enuGetTimeElapsedNormalCounter+0x5e>
	}
	else{
		*Address_Value=TCNT1L;
     f0a:	8c e4       	ldi	r24, 0x4C	; 76
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	fc 01       	movw	r30, r24
     f10:	80 81       	ld	r24, Z
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	fc 01       	movw	r30, r24
     f1c:	31 83       	std	Z+1, r19	; 0x01
     f1e:	20 83       	st	Z, r18
		*Address_Value|=(TCNT1H<<EIGHT_VALUE);
     f20:	8d e4       	ldi	r24, 0x4D	; 77
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	fc 01       	movw	r30, r24
     f26:	80 81       	ld	r24, Z
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	38 2f       	mov	r19, r24
     f2e:	22 27       	eor	r18, r18
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	9b 81       	ldd	r25, Y+3	; 0x03
     f34:	fc 01       	movw	r30, r24
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	28 2b       	or	r18, r24
     f3c:	39 2b       	or	r19, r25
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	fc 01       	movw	r30, r24
     f44:	31 83       	std	Z+1, r19	; 0x01
     f46:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
     f48:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <Timer1_enuGetTimeElapsedCompareChannelA>:
Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelA(u16* Address_Value){
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <Timer1_enuGetTimeElapsedCompareChannelA+0x6>
     f5c:	1f 92       	push	r1
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	9b 83       	std	Y+3, r25	; 0x03
     f64:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     f66:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Value){
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	89 2b       	or	r24, r25
     f6e:	19 f4       	brne	.+6      	; 0xf76 <Timer1_enuGetTimeElapsedCompareChannelA+0x20>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	1f c0       	rjmp	.+62     	; 0xfb4 <Timer1_enuGetTimeElapsedCompareChannelA+0x5e>
	}
	else{
		*Address_Value=OCR1AL;
     f76:	8a e4       	ldi	r24, 0x4A	; 74
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	fc 01       	movw	r30, r24
     f7c:	80 81       	ld	r24, Z
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	fc 01       	movw	r30, r24
     f88:	31 83       	std	Z+1, r19	; 0x01
     f8a:	20 83       	st	Z, r18
		*Address_Value|=(OCR1AH<<EIGHT_VALUE);
     f8c:	8b e4       	ldi	r24, 0x4B	; 75
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	fc 01       	movw	r30, r24
     f92:	80 81       	ld	r24, Z
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	38 2f       	mov	r19, r24
     f9a:	22 27       	eor	r18, r18
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	9b 81       	ldd	r25, Y+3	; 0x03
     fa0:	fc 01       	movw	r30, r24
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	28 2b       	or	r18, r24
     fa8:	39 2b       	or	r19, r25
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	fc 01       	movw	r30, r24
     fb0:	31 83       	std	Z+1, r19	; 0x01
     fb2:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01

}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <Timer1_enuGetTimeElapsedCompareChannelB>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelB(u16* Address_Value){
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <Timer1_enuGetTimeElapsedCompareChannelB+0x6>
     fc8:	1f 92       	push	r1
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	9b 83       	std	Y+3, r25	; 0x03
     fd0:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     fd2:	19 82       	std	Y+1, r1	; 0x01

				    if(NULL == Address_Value){
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	89 2b       	or	r24, r25
     fda:	19 f4       	brne	.+6      	; 0xfe2 <Timer1_enuGetTimeElapsedCompareChannelB+0x20>

				    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	1f c0       	rjmp	.+62     	; 0x1020 <Timer1_enuGetTimeElapsedCompareChannelB+0x5e>
				    }
				    else{
						*Address_Value=OCR1BL;
     fe2:	88 e4       	ldi	r24, 0x48	; 72
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	fc 01       	movw	r30, r24
     fe8:	80 81       	ld	r24, Z
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	fc 01       	movw	r30, r24
     ff4:	31 83       	std	Z+1, r19	; 0x01
     ff6:	20 83       	st	Z, r18
						*Address_Value|=(OCR1BH<<EIGHT_VALUE);
     ff8:	89 e4       	ldi	r24, 0x49	; 73
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	fc 01       	movw	r30, r24
     ffe:	80 81       	ld	r24, Z
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	38 2f       	mov	r19, r24
    1006:	22 27       	eor	r18, r18
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	9b 81       	ldd	r25, Y+3	; 0x03
    100c:	fc 01       	movw	r30, r24
    100e:	80 81       	ld	r24, Z
    1010:	91 81       	ldd	r25, Z+1	; 0x01
    1012:	28 2b       	or	r18, r24
    1014:	39 2b       	or	r19, r25
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	9b 81       	ldd	r25, Y+3	; 0x03
    101a:	fc 01       	movw	r30, r24
    101c:	31 83       	std	Z+1, r19	; 0x01
    101e:	20 83       	st	Z, r18
				    }

				    return Loc_enuTimer1Status;
    1020:	89 81       	ldd	r24, Y+1	; 0x01

}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <Timer1_enuGetTimeElapsedIcu>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedIcu(u16* Address_Value){
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	00 d0       	rcall	.+0      	; 0x1034 <Timer1_enuGetTimeElapsedIcu+0x6>
    1034:	1f 92       	push	r1
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9b 83       	std	Y+3, r25	; 0x03
    103c:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    103e:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Value){
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	89 2b       	or	r24, r25
    1046:	19 f4       	brne	.+6      	; 0x104e <Timer1_enuGetTimeElapsedIcu+0x20>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	1f c0       	rjmp	.+62     	; 0x108c <Timer1_enuGetTimeElapsedIcu+0x5e>
	}
	else{
		*Address_Value=ICR1L;
    104e:	86 e4       	ldi	r24, 0x46	; 70
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	fc 01       	movw	r30, r24
    1054:	80 81       	ld	r24, Z
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	fc 01       	movw	r30, r24
    1060:	31 83       	std	Z+1, r19	; 0x01
    1062:	20 83       	st	Z, r18
		*Address_Value|=(ICR1H<<EIGHT_VALUE);
    1064:	87 e4       	ldi	r24, 0x47	; 71
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	fc 01       	movw	r30, r24
    106a:	80 81       	ld	r24, Z
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	38 2f       	mov	r19, r24
    1072:	22 27       	eor	r18, r18
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	fc 01       	movw	r30, r24
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	28 2b       	or	r18, r24
    1080:	39 2b       	or	r19, r25
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	fc 01       	movw	r30, r24
    1088:	31 83       	std	Z+1, r19	; 0x01
    108a:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
    108c:	89 81       	ldd	r24, Y+1	; 0x01

}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <Timer1_enuCtcForcePinImmediatlyChannelA>:




Timer1_StatusErrorType Timer1_enuCtcForcePinImmediatlyChannelA(void){
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	1f 92       	push	r1
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    10a4:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TCCR1A,TCCR1A_FOC1A_BIT);
    10a6:	8f e4       	ldi	r24, 0x4F	; 79
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	2f e4       	ldi	r18, 0x4F	; 79
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	20 81       	ld	r18, Z
    10b2:	28 60       	ori	r18, 0x08	; 8
    10b4:	fc 01       	movw	r30, r24
    10b6:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ba:	0f 90       	pop	r0
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <Timer1_enuCtcForcePinImmediatlyChannelB>:
Timer1_StatusErrorType Timer1_enuCtcForcePinImmediatlyChannelB(void){
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	1f 92       	push	r1
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    10cc:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TCCR1A,TCCR1A_FOC1B_BIT);
    10ce:	8f e4       	ldi	r24, 0x4F	; 79
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	2f e4       	ldi	r18, 0x4F	; 79
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	f9 01       	movw	r30, r18
    10d8:	20 81       	ld	r18, Z
    10da:	24 60       	ori	r18, 0x04	; 4
    10dc:	fc 01       	movw	r30, r24
    10de:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e2:	0f 90       	pop	r0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <Timer1_enuSetRisingEdgeIcu>:

Timer1_StatusErrorType Timer1_enuSetRisingEdgeIcu(void){
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	1f 92       	push	r1
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    10f4:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TCCR1B,TCCR1B_ICES1_BIT);
    10f6:	8e e4       	ldi	r24, 0x4E	; 78
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	2e e4       	ldi	r18, 0x4E	; 78
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	f9 01       	movw	r30, r18
    1100:	20 81       	ld	r18, Z
    1102:	20 64       	ori	r18, 0x40	; 64
    1104:	fc 01       	movw	r30, r24
    1106:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1108:	89 81       	ldd	r24, Y+1	; 0x01
}
    110a:	0f 90       	pop	r0
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <Timer1_enuSetFailingEdgeIcu>:
Timer1_StatusErrorType Timer1_enuSetFailingEdgeIcu(void){
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	1f 92       	push	r1
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    111c:	19 82       	std	Y+1, r1	; 0x01
	CLEAR_BIT(TCCR1B,TCCR1B_ICES1_BIT);
    111e:	8e e4       	ldi	r24, 0x4E	; 78
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	2e e4       	ldi	r18, 0x4E	; 78
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	f9 01       	movw	r30, r18
    1128:	20 81       	ld	r18, Z
    112a:	2f 7b       	andi	r18, 0xBF	; 191
    112c:	fc 01       	movw	r30, r24
    112e:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	0f 90       	pop	r0
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <Timer1_enuToggleEdgeIcu>:
Timer1_StatusErrorType Timer1_enuToggleEdgeIcu(void){
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	1f 92       	push	r1
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1144:	19 82       	std	Y+1, r1	; 0x01
	TOGGLE_BIT(TCCR1B,TCCR1B_ICES1_BIT);
    1146:	8e e4       	ldi	r24, 0x4E	; 78
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	2e e4       	ldi	r18, 0x4E	; 78
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	f9 01       	movw	r30, r18
    1150:	30 81       	ld	r19, Z
    1152:	20 e4       	ldi	r18, 0x40	; 64
    1154:	23 27       	eor	r18, r19
    1156:	fc 01       	movw	r30, r24
    1158:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    115a:	89 81       	ldd	r24, Y+1	; 0x01
}
    115c:	0f 90       	pop	r0
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <__vector_9>:
///////////////////////////////////////////////////////////////////////////////////////////

// ISR function For TIMER1 OverFlow
void __vector_9(void) __attribute__((signal));

void __vector_9(void){
    1164:	1f 92       	push	r1
    1166:	0f 92       	push	r0
    1168:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    116c:	0f 92       	push	r0
    116e:	11 24       	eor	r1, r1
    1170:	2f 93       	push	r18
    1172:	3f 93       	push	r19
    1174:	4f 93       	push	r20
    1176:	5f 93       	push	r21
    1178:	6f 93       	push	r22
    117a:	7f 93       	push	r23
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	ef 93       	push	r30
    1186:	ff 93       	push	r31
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_OverflowInterruptHandler ){
    1190:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
    1194:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <__data_end+0x1>
    1198:	89 2b       	or	r24, r25
    119a:	61 f0       	breq	.+24     	; 0x11b4 <__vector_9+0x50>

    	Timer1_enuSetValueNormalCounter(Timer1_StaticU16InitValue);
    119c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Timer1_StaticU16InitValue>
    11a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Timer1_StaticU16InitValue+0x1>
    11a4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <Timer1_enuSetValueNormalCounter>
    	Timer1_OverflowInterruptHandler();
    11a8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
    11ac:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <__data_end+0x1>
    11b0:	fc 01       	movw	r30, r24
    11b2:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    11b4:	00 00       	nop
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <__vector_6>:


// ISR function For TIMER1 ICU
void __vector_6(void) __attribute__((signal));

void __vector_6(void){
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();

	Dio_enuFlipChannel(DIO_PINC0_CHANNEL16);
    120a:	80 e1       	ldi	r24, 0x10	; 16
    120c:	0e 94 34 12 	call	0x2468	; 0x2468 <Dio_enuFlipChannel>


    if(NULL !=Timer1_IcuInterruptHandler ){
    1210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Timer1_IcuInterruptHandler>
    1214:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Timer1_IcuInterruptHandler+0x1>
    1218:	89 2b       	or	r24, r25
    121a:	31 f0       	breq	.+12     	; 0x1228 <__vector_6+0x4a>

    	Timer1_IcuInterruptHandler();
    121c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Timer1_IcuInterruptHandler>
    1220:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Timer1_IcuInterruptHandler+0x1>
    1224:	fc 01       	movw	r30, r24
    1226:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    1228:	00 00       	nop
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	ff 91       	pop	r31
    1230:	ef 91       	pop	r30
    1232:	bf 91       	pop	r27
    1234:	af 91       	pop	r26
    1236:	9f 91       	pop	r25
    1238:	8f 91       	pop	r24
    123a:	7f 91       	pop	r23
    123c:	6f 91       	pop	r22
    123e:	5f 91       	pop	r21
    1240:	4f 91       	pop	r20
    1242:	3f 91       	pop	r19
    1244:	2f 91       	pop	r18
    1246:	0f 90       	pop	r0
    1248:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <Timer0_enuInit>:
static  u8 Timer0_InitValue;
/********************************** Software Interfaces Declarations *******************/



Timer0_StatusErrorType Timer0_enuInit(const Timer0_ConfigType* Address_Timer0){
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	00 d0       	rcall	.+0      	; 0x1258 <Timer0_enuInit+0x6>
    1258:	1f 92       	push	r1
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9b 83       	std	Y+3, r25	; 0x03
    1260:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	9b 81       	ldd	r25, Y+3	; 0x03
    126a:	89 2b       	or	r24, r25
    126c:	19 f4       	brne	.+6      	; 0x1274 <Timer0_enuInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	97 c0       	rjmp	.+302    	; 0x13a2 <Timer0_enuInit+0x150>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	        Timer0_Disable();
    1274:	83 e5       	ldi	r24, 0x53	; 83
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	23 e5       	ldi	r18, 0x53	; 83
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	f9 01       	movw	r30, r18
    127e:	20 81       	ld	r18, Z
    1280:	28 7f       	andi	r18, 0xF8	; 248
    1282:	fc 01       	movw	r30, r24
    1284:	20 83       	st	Z, r18

		    	        /* Select Mode timer */
		    	        Timer0_SelectMode((Address_Timer0->select_mode));
    1286:	83 e5       	ldi	r24, 0x53	; 83
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	23 e5       	ldi	r18, 0x53	; 83
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	f9 01       	movw	r30, r18
    1290:	20 81       	ld	r18, Z
    1292:	42 2f       	mov	r20, r18
    1294:	4f 7b       	andi	r20, 0xBF	; 191
    1296:	2a 81       	ldd	r18, Y+2	; 0x02
    1298:	3b 81       	ldd	r19, Y+3	; 0x03
    129a:	f9 01       	movw	r30, r18
    129c:	21 81       	ldd	r18, Z+1	; 0x01
    129e:	22 2f       	mov	r18, r18
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	21 70       	andi	r18, 0x01	; 1
    12a4:	33 27       	eor	r19, r19
    12a6:	00 24       	eor	r0, r0
    12a8:	36 95       	lsr	r19
    12aa:	27 95       	ror	r18
    12ac:	07 94       	ror	r0
    12ae:	36 95       	lsr	r19
    12b0:	27 95       	ror	r18
    12b2:	07 94       	ror	r0
    12b4:	32 2f       	mov	r19, r18
    12b6:	20 2d       	mov	r18, r0
    12b8:	24 2b       	or	r18, r20
    12ba:	fc 01       	movw	r30, r24
    12bc:	20 83       	st	Z, r18
    12be:	83 e5       	ldi	r24, 0x53	; 83
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	23 e5       	ldi	r18, 0x53	; 83
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	f9 01       	movw	r30, r18
    12c8:	20 81       	ld	r18, Z
    12ca:	42 2f       	mov	r20, r18
    12cc:	47 7f       	andi	r20, 0xF7	; 247
    12ce:	2a 81       	ldd	r18, Y+2	; 0x02
    12d0:	3b 81       	ldd	r19, Y+3	; 0x03
    12d2:	f9 01       	movw	r30, r18
    12d4:	21 81       	ldd	r18, Z+1	; 0x01
    12d6:	26 95       	lsr	r18
    12d8:	22 2f       	mov	r18, r18
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	21 70       	andi	r18, 0x01	; 1
    12de:	33 27       	eor	r19, r19
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	22 0f       	add	r18, r18
    12ea:	33 1f       	adc	r19, r19
    12ec:	24 2b       	or	r18, r20
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 83       	st	Z, r18
    12f2:	83 e5       	ldi	r24, 0x53	; 83
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	23 e5       	ldi	r18, 0x53	; 83
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	f9 01       	movw	r30, r18
    12fc:	20 81       	ld	r18, Z
    12fe:	42 2f       	mov	r20, r18
    1300:	4f 7e       	andi	r20, 0xEF	; 239
    1302:	2a 81       	ldd	r18, Y+2	; 0x02
    1304:	3b 81       	ldd	r19, Y+3	; 0x03
    1306:	f9 01       	movw	r30, r18
    1308:	21 81       	ldd	r18, Z+1	; 0x01
    130a:	26 95       	lsr	r18
    130c:	26 95       	lsr	r18
    130e:	22 2f       	mov	r18, r18
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	21 70       	andi	r18, 0x01	; 1
    1314:	33 27       	eor	r19, r19
    1316:	22 95       	swap	r18
    1318:	32 95       	swap	r19
    131a:	30 7f       	andi	r19, 0xF0	; 240
    131c:	32 27       	eor	r19, r18
    131e:	20 7f       	andi	r18, 0xF0	; 240
    1320:	32 27       	eor	r19, r18
    1322:	24 2b       	or	r18, r20
    1324:	fc 01       	movw	r30, r24
    1326:	20 83       	st	Z, r18
    1328:	83 e5       	ldi	r24, 0x53	; 83
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	23 e5       	ldi	r18, 0x53	; 83
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	f9 01       	movw	r30, r18
    1332:	20 81       	ld	r18, Z
    1334:	42 2f       	mov	r20, r18
    1336:	4f 7d       	andi	r20, 0xDF	; 223
    1338:	2a 81       	ldd	r18, Y+2	; 0x02
    133a:	3b 81       	ldd	r19, Y+3	; 0x03
    133c:	f9 01       	movw	r30, r18
    133e:	21 81       	ldd	r18, Z+1	; 0x01
    1340:	26 95       	lsr	r18
    1342:	26 95       	lsr	r18
    1344:	26 95       	lsr	r18
    1346:	22 2f       	mov	r18, r18
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	21 70       	andi	r18, 0x01	; 1
    134c:	33 27       	eor	r19, r19
    134e:	22 0f       	add	r18, r18
    1350:	33 1f       	adc	r19, r19
    1352:	22 95       	swap	r18
    1354:	32 95       	swap	r19
    1356:	30 7f       	andi	r19, 0xF0	; 240
    1358:	32 27       	eor	r19, r18
    135a:	20 7f       	andi	r18, 0xF0	; 240
    135c:	32 27       	eor	r19, r18
    135e:	24 2b       	or	r18, r20
    1360:	fc 01       	movw	r30, r24
    1362:	20 83       	st	Z, r18

		    	        Timer0_InitValue = Address_Timer0->init_value;
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	9b 81       	ldd	r25, Y+3	; 0x03
    1368:	fc 01       	movw	r30, r24
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Timer0_InitValue>
		    	        /* Update Init Value*/
		    	       Loc_enuTimer0Status= Timer0_enuSetValue(Address_Timer0, Address_Timer0->init_value);
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	9b 81       	ldd	r25, Y+3	; 0x03
    1374:	fc 01       	movw	r30, r24
    1376:	22 81       	ldd	r18, Z+2	; 0x02
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	9b 81       	ldd	r25, Y+3	; 0x03
    137c:	62 2f       	mov	r22, r18
    137e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <Timer0_enuSetValue>
    1382:	89 83       	std	Y+1, r24	; 0x01

		    	        /* Enable Timer0 Peripheral */
		    	        Timer0_Enable(Address_Timer0->prescaler_value);
    1384:	83 e5       	ldi	r24, 0x53	; 83
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	23 e5       	ldi	r18, 0x53	; 83
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	f9 01       	movw	r30, r18
    138e:	20 81       	ld	r18, Z
    1390:	42 2f       	mov	r20, r18
    1392:	48 7f       	andi	r20, 0xF8	; 248
    1394:	2a 81       	ldd	r18, Y+2	; 0x02
    1396:	3b 81       	ldd	r19, Y+3	; 0x03
    1398:	f9 01       	movw	r30, r18
    139a:	20 81       	ld	r18, Z
    139c:	24 2b       	or	r18, r20
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <Timer0_enuDeInit>:

Timer0_StatusErrorType Timer0_enuDeInit(const Timer0_ConfigType* Address_Timer0){
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <Timer0_enuDeInit+0x6>
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	9b 83       	std	Y+3, r25	; 0x03
    13be:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	9b 81       	ldd	r25, Y+3	; 0x03
    13c8:	89 2b       	or	r24, r25
    13ca:	19 f4       	brne	.+6      	; 0x13d2 <Timer0_enuDeInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	09 c0       	rjmp	.+18     	; 0x13e4 <Timer0_enuDeInit+0x34>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	Timer0_Disable();
    13d2:	83 e5       	ldi	r24, 0x53	; 83
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	23 e5       	ldi	r18, 0x53	; 83
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	f9 01       	movw	r30, r18
    13dc:	20 81       	ld	r18, Z
    13de:	28 7f       	andi	r18, 0xF8	; 248
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <Timer0_enuEnableInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableInterrupt(const Timer0_ConfigType* Address_Timer0){
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <Timer0_enuEnableInterrupt+0x6>
    13f8:	1f 92       	push	r1
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	9b 83       	std	Y+3, r25	; 0x03
    1400:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	9b 81       	ldd	r25, Y+3	; 0x03
    140a:	89 2b       	or	r24, r25
    140c:	19 f4       	brne	.+6      	; 0x1414 <Timer0_enuEnableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	19 c0       	rjmp	.+50     	; 0x1446 <Timer0_enuEnableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	9b 81       	ldd	r25, Y+3	; 0x03
    1418:	fc 01       	movw	r30, r24
    141a:	81 81       	ldd	r24, Z+1	; 0x01
    141c:	88 23       	and	r24, r24
    141e:	51 f4       	brne	.+20     	; 0x1434 <Timer0_enuEnableInterrupt+0x42>

		    		Timer0_EnableOverviewInterrupt();
    1420:	89 e5       	ldi	r24, 0x59	; 89
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	29 e5       	ldi	r18, 0x59	; 89
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	f9 01       	movw	r30, r18
    142a:	20 81       	ld	r18, Z
    142c:	21 60       	ori	r18, 0x01	; 1
    142e:	fc 01       	movw	r30, r24
    1430:	20 83       	st	Z, r18
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <Timer0_enuEnableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_EnableComparePwmInterrupt();
    1434:	89 e5       	ldi	r24, 0x59	; 89
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	29 e5       	ldi	r18, 0x59	; 89
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	f9 01       	movw	r30, r18
    143e:	20 81       	ld	r18, Z
    1440:	22 60       	ori	r18, 0x02	; 2
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <Timer0_enuDisableInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableInterrupt(const Timer0_ConfigType* Address_Timer0){
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	00 d0       	rcall	.+0      	; 0x145a <Timer0_enuDisableInterrupt+0x6>
    145a:	1f 92       	push	r1
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	9b 83       	std	Y+3, r25	; 0x03
    1462:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	9b 81       	ldd	r25, Y+3	; 0x03
    146c:	89 2b       	or	r24, r25
    146e:	19 f4       	brne	.+6      	; 0x1476 <Timer0_enuDisableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	19 c0       	rjmp	.+50     	; 0x14a8 <Timer0_enuDisableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	fc 01       	movw	r30, r24
    147c:	81 81       	ldd	r24, Z+1	; 0x01
    147e:	88 23       	and	r24, r24
    1480:	51 f4       	brne	.+20     	; 0x1496 <Timer0_enuDisableInterrupt+0x42>

		    		Timer0_DisableOverviewInterrupt();
    1482:	89 e5       	ldi	r24, 0x59	; 89
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	29 e5       	ldi	r18, 0x59	; 89
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	f9 01       	movw	r30, r18
    148c:	20 81       	ld	r18, Z
    148e:	2e 7f       	andi	r18, 0xFE	; 254
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
    1494:	09 c0       	rjmp	.+18     	; 0x14a8 <Timer0_enuDisableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_DisbleComparePwmInterrupt();
    1496:	89 e5       	ldi	r24, 0x59	; 89
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	29 e5       	ldi	r18, 0x59	; 89
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	f9 01       	movw	r30, r18
    14a0:	20 81       	ld	r18, Z
    14a2:	2d 7f       	andi	r18, 0xFD	; 253
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <Timer0_enuSetValue>:


Timer0_StatusErrorType Timer0_enuSetValue(const Timer0_ConfigType* Address_Timer0, u8 Copy_u8Value){
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <Timer0_enuSetValue+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <Timer0_enuSetValue+0x8>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	9b 83       	std	Y+3, r25	; 0x03
    14c4:	8a 83       	std	Y+2, r24	; 0x02
    14c6:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	9b 81       	ldd	r25, Y+3	; 0x03
    14d0:	89 2b       	or	r24, r25
    14d2:	19 f4       	brne	.+6      	; 0x14da <Timer0_enuSetValue+0x24>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	11 c0       	rjmp	.+34     	; 0x14fc <Timer0_enuSetValue+0x46>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	fc 01       	movw	r30, r24
    14e0:	81 81       	ldd	r24, Z+1	; 0x01
    14e2:	88 23       	and	r24, r24
    14e4:	31 f4       	brne	.+12     	; 0x14f2 <Timer0_enuSetValue+0x3c>



		    		ASSIGN_REG(TCNT0,Copy_u8Value);
    14e6:	82 e5       	ldi	r24, 0x52	; 82
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	2c 81       	ldd	r18, Y+4	; 0x04
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <Timer0_enuSetValue+0x46>

		    	}
		    	else{
		    		ASSIGN_REG(OCR0,Copy_u8Value);
    14f2:	8c e5       	ldi	r24, 0x5C	; 92
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	2c 81       	ldd	r18, Y+4	; 0x04
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 83       	st	Z, r18



		    }

		    return Loc_enuTimer0Status;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <Timer0_enuGetTimeElapsed>:
Timer0_StatusErrorType Timer0_enuGetTimeElapsed(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	00 d0       	rcall	.+0      	; 0x1512 <Timer0_enuGetTimeElapsed+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <Timer0_enuGetTimeElapsed+0x8>
    1514:	1f 92       	push	r1
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	9b 83       	std	Y+3, r25	; 0x03
    151c:	8a 83       	std	Y+2, r24	; 0x02
    151e:	7d 83       	std	Y+5, r23	; 0x05
    1520:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	9b 81       	ldd	r25, Y+3	; 0x03
    152a:	89 2b       	or	r24, r25
    152c:	19 f4       	brne	.+6      	; 0x1534 <Timer0_enuGetTimeElapsed+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    152e:	82 e0       	ldi	r24, 0x02	; 2
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	0b c0       	rjmp	.+22     	; 0x154a <Timer0_enuGetTimeElapsed+0x3e>
		    }
		    else{

		    	*Address_Value = TCNT0;
    1534:	82 e5       	ldi	r24, 0x52	; 82
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	fc 01       	movw	r30, r24
    153a:	80 81       	ld	r24, Z
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	fc 01       	movw	r30, r24
    1546:	31 83       	std	Z+1, r19	; 0x01
    1548:	20 83       	st	Z, r18
		    }

		    return Loc_enuTimer0Status;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <Timer0_enuGetRemaining>:
Timer0_StatusErrorType Timer0_enuGetRemaining(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	00 d0       	rcall	.+0      	; 0x1562 <Timer0_enuGetRemaining+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <Timer0_enuGetRemaining+0x8>
    1564:	1f 92       	push	r1
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9b 83       	std	Y+3, r25	; 0x03
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	7d 83       	std	Y+5, r23	; 0x05
    1570:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	89 2b       	or	r24, r25
    157c:	11 f4       	brne	.+4      	; 0x1582 <Timer0_enuGetRemaining+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	89 83       	std	Y+1, r24	; 0x01
		    else{


		    }

		    return Loc_enuTimer0Status;
    1582:	89 81       	ldd	r24, Y+1	; 0x01
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	08 95       	ret

00001594 <Timer0_enuSetCallbackFunction>:


Timer0_StatusErrorType Timer0_enuSetCallbackFunction(const Timer0_ConfigType* Address_Timer0,void (*callback)(void)){
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	00 d0       	rcall	.+0      	; 0x159a <Timer0_enuSetCallbackFunction+0x6>
    159a:	00 d0       	rcall	.+0      	; 0x159c <Timer0_enuSetCallbackFunction+0x8>
    159c:	1f 92       	push	r1
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	9b 83       	std	Y+3, r25	; 0x03
    15a4:	8a 83       	std	Y+2, r24	; 0x02
    15a6:	7d 83       	std	Y+5, r23	; 0x05
    15a8:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	9b 81       	ldd	r25, Y+3	; 0x03
    15b2:	89 2b       	or	r24, r25
    15b4:	19 f4       	brne	.+6      	; 0x15bc <Timer0_enuSetCallbackFunction+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	13 c0       	rjmp	.+38     	; 0x15e2 <Timer0_enuSetCallbackFunction+0x4e>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	9b 81       	ldd	r25, Y+3	; 0x03
    15c0:	fc 01       	movw	r30, r24
    15c2:	81 81       	ldd	r24, Z+1	; 0x01
    15c4:	88 23       	and	r24, r24
    15c6:	39 f4       	brne	.+14     	; 0x15d6 <Timer0_enuSetCallbackFunction+0x42>

		    		Timer0_OverflowInterruptHandler = callback;
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	9d 81       	ldd	r25, Y+5	; 0x05
    15cc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Timer0_OverflowInterruptHandler+0x1>
    15d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Timer0_OverflowInterruptHandler>
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <Timer0_enuSetCallbackFunction+0x4e>


		    	}
		    	else{
		    		Timer0_CompareInterruptHandler = callback;
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Timer0_CompareInterruptHandler+0x1>
    15de:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Timer0_CompareInterruptHandler>
		    	}


		    }

		    return Loc_enuTimer0Status;
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <Timer0_enuEnableOverflowInterrupt>:

Timer0_enuEnableOverflowInterrupt(void){
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	1f 92       	push	r1
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableOverviewInterrupt();
    1602:	89 e5       	ldi	r24, 0x59	; 89
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	29 e5       	ldi	r18, 0x59	; 89
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	f9 01       	movw	r30, r18
    160c:	20 81       	ld	r18, Z
    160e:	21 60       	ori	r18, 0x01	; 1
    1610:	fc 01       	movw	r30, r24
    1612:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
}
    161a:	0f 90       	pop	r0
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	08 95       	ret

00001622 <Timer0_enuEnableCaptureInterrupt>:

Timer0_enuEnableCaptureInterrupt(void){
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	1f 92       	push	r1
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableComparePwmInterrupt();
    1630:	89 e5       	ldi	r24, 0x59	; 89
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	29 e5       	ldi	r18, 0x59	; 89
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	f9 01       	movw	r30, r18
    163a:	20 81       	ld	r18, Z
    163c:	22 60       	ori	r18, 0x02	; 2
    163e:	fc 01       	movw	r30, r24
    1640:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
}
    1648:	0f 90       	pop	r0
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <Timer0_enuSetCallbackOverflowInterrupt>:


Timer0_enuSetCallbackOverflowInterrupt(void (*callback)(void)){
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	00 d0       	rcall	.+0      	; 0x1656 <Timer0_enuSetCallbackOverflowInterrupt+0x6>
    1656:	1f 92       	push	r1
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	9b 83       	std	Y+3, r25	; 0x03
    165e:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	9b 81       	ldd	r25, Y+3	; 0x03
    1668:	89 2b       	or	r24, r25
    166a:	19 f4       	brne	.+6      	; 0x1672 <Timer0_enuSetCallbackOverflowInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	06 c0       	rjmp	.+12     	; 0x167e <Timer0_enuSetCallbackOverflowInterrupt+0x2e>
		    }

		    else{
		    		Timer0_OverflowInterruptHandler = callback;
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	9b 81       	ldd	r25, Y+3	; 0x03
    1676:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Timer0_OverflowInterruptHandler+0x1>
    167a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Timer0_OverflowInterruptHandler>


		    }

		    return Loc_enuTimer0Status;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
}
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <Timer0_enuSetCallbackCompareInterrupt>:
Timer0_enuSetCallbackCompareInterrupt(void (*callback)(void)){
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	00 d0       	rcall	.+0      	; 0x1696 <Timer0_enuSetCallbackCompareInterrupt+0x6>
    1696:	1f 92       	push	r1
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	9b 83       	std	Y+3, r25	; 0x03
    169e:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	9b 81       	ldd	r25, Y+3	; 0x03
    16a8:	89 2b       	or	r24, r25
    16aa:	19 f4       	brne	.+6      	; 0x16b2 <Timer0_enuSetCallbackCompareInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <Timer0_enuSetCallbackCompareInterrupt+0x2e>
		    }

		    else{
		    		Timer0_CompareInterruptHandler = callback;
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	9b 81       	ldd	r25, Y+3	; 0x03
    16b6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Timer0_CompareInterruptHandler+0x1>
    16ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Timer0_CompareInterruptHandler>


		    }

		    return Loc_enuTimer0Status;
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	88 2f       	mov	r24, r24
    16c2:	90 e0       	ldi	r25, 0x00	; 0
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	08 95       	ret

000016d0 <Timer0_enuDisableOverflowInterrupt>:


Timer0_enuDisableOverflowInterrupt(void){
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	1f 92       	push	r1
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	89 83       	std	Y+1, r24	; 0x01

			Timer0_DisableOverviewInterrupt();
    16de:	89 e5       	ldi	r24, 0x59	; 89
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	29 e5       	ldi	r18, 0x59	; 89
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	f9 01       	movw	r30, r18
    16e8:	20 81       	ld	r18, Z
    16ea:	2e 7f       	andi	r18, 0xFE	; 254
    16ec:	fc 01       	movw	r30, r24
    16ee:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
}
    16f6:	0f 90       	pop	r0
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	08 95       	ret

000016fe <Timer0_enuDisableCaptureInterrupt>:

Timer0_enuDisableCaptureInterrupt(void){
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	1f 92       	push	r1
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62

		Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	89 83       	std	Y+1, r24	; 0x01

	  	Timer0_DisbleComparePwmInterrupt();
    170c:	89 e5       	ldi	r24, 0x59	; 89
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	29 e5       	ldi	r18, 0x59	; 89
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	f9 01       	movw	r30, r18
    1716:	20 81       	ld	r18, Z
    1718:	2d 7f       	andi	r18, 0xFD	; 253
    171a:	fc 01       	movw	r30, r24
    171c:	20 83       	st	Z, r18

			    return Loc_enuTimer0Status;
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0

}
    1724:	0f 90       	pop	r0
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	08 95       	ret

0000172c <Timer0_enuCtcForcePinImmediatly>:



Timer0_StatusErrorType Timer0_enuCtcForcePinImmediatly(const Timer0_ConfigType* Address_Timer0){
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	00 d0       	rcall	.+0      	; 0x1732 <Timer0_enuCtcForcePinImmediatly+0x6>
    1732:	1f 92       	push	r1
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	9b 83       	std	Y+3, r25	; 0x03
    173a:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	9b 81       	ldd	r25, Y+3	; 0x03
    1744:	89 2b       	or	r24, r25
    1746:	19 f4       	brne	.+6      	; 0x174e <Timer0_enuCtcForcePinImmediatly+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <Timer0_enuCtcForcePinImmediatly+0x34>
		    }
		    else{

		    	SET_BIT(TCCR0,FOC0_BIT);
    174e:	83 e5       	ldi	r24, 0x53	; 83
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	23 e5       	ldi	r18, 0x53	; 83
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	f9 01       	movw	r30, r18
    1758:	20 81       	ld	r18, Z
    175a:	20 68       	ori	r18, 0x80	; 128
    175c:	fc 01       	movw	r30, r24
    175e:	20 83       	st	Z, r18


		    }

		    return Loc_enuTimer0Status;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <Timer0_enuSetDutyCyclePwm>:


Timer0_StatusErrorType Timer0_enuSetDutyCyclePwm(const Timer0_ConfigType* Address_Timer0,u8 Copy_u8DutyCylePrecentage){
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	00 d0       	rcall	.+0      	; 0x1774 <Timer0_enuSetDutyCyclePwm+0x6>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <Timer0_enuSetDutyCyclePwm+0x8>
    1776:	1f 92       	push	r1
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
    1780:	6d 83       	std	Y+5, r22	; 0x05
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01

//	u8 Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * 255);
	u8 Loc_u8DutyCycle;

		    if(NULL == Address_Timer0){
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	89 2b       	or	r24, r25
    178c:	19 f4       	brne	.+6      	; 0x1794 <Timer0_enuSetDutyCyclePwm+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	79 c0       	rjmp	.+242    	; 0x1886 <Timer0_enuSetDutyCyclePwm+0x118>
		    }

		    else {

		    	Copy_u8DutyCylePrecentage = (Copy_u8DutyCylePrecentage >= 100) ? 100 :Copy_u8DutyCylePrecentage;
    1794:	8d 81       	ldd	r24, Y+5	; 0x05
    1796:	85 36       	cpi	r24, 0x65	; 101
    1798:	08 f0       	brcs	.+2      	; 0x179c <Timer0_enuSetDutyCyclePwm+0x2e>
    179a:	84 e6       	ldi	r24, 0x64	; 100
    179c:	8d 83       	std	Y+5, r24	; 0x05

		    	switch(Address_Timer0->select_mode){
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	fc 01       	movw	r30, r24
    17a4:	81 81       	ldd	r24, Z+1	; 0x01
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	09 2e       	mov	r0, r25
    17ac:	00 0c       	add	r0, r0
    17ae:	aa 0b       	sbc	r26, r26
    17b0:	bb 0b       	sbc	r27, r27
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	2f e0       	ldi	r18, 0x0F	; 15
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	84 1b       	sub	r24, r20
    17bc:	95 0b       	sbc	r25, r21
    17be:	28 17       	cp	r18, r24
    17c0:	39 07       	cpc	r19, r25
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <Timer0_enuSetDutyCyclePwm+0x58>
    17c4:	60 c0       	rjmp	.+192    	; 0x1886 <Timer0_enuSetDutyCyclePwm+0x118>
    17c6:	86 5d       	subi	r24, 0xD6	; 214
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	fc 01       	movw	r30, r24
    17cc:	0c 94 92 25 	jmp	0x4b24	; 0x4b24 <__tablejump2__>
		    	case  TIMER0_SELECT_MODE_NORMAL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_NORMAEL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_TOGGLE :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_CLEAR  :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_SET :
		    		Loc_enuTimer0Status = TIMER0_STATUS_FAIL;
    17d0:	19 82       	std	Y+1, r1	; 0x01
		    		break;
    17d2:	59 c0       	rjmp	.+178    	; 0x1886 <Timer0_enuSetDutyCyclePwm+0x118>
		    		/* i don't know what is the usage of this */
		    		break;

		    	case TIMER0_SELECT_MODE_PWM_FAST_INVERTED_OC0_SET_ON_MATCH_CLEAR_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_SET_ON_MATCH_UPCOUNTING_CLEAR_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = TIMER0_FULL_VALUE_IN_REGISTER- (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__floatunsisf>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	48 ec       	ldi	r20, 0xC8	; 200
    17f0:	52 e4       	ldi	r21, 0x42	; 66
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__divsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	53 e4       	ldi	r21, 0x43	; 67
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	80 95       	com	r24
    1820:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    1822:	8c e5       	ldi	r24, 0x5C	; 92
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	2a 81       	ldd	r18, Y+2	; 0x02
    1828:	fc 01       	movw	r30, r24
    182a:	20 83       	st	Z, r18

		    		break;
    182c:	2c c0       	rjmp	.+88     	; 0x1886 <Timer0_enuSetDutyCyclePwm+0x118>

		    	case TIMER0_SELECT_MODE_PWM_FAST_NOT_INVERTED_OC0_CLEAR_ON_MATCH_SET_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_CLEAR_ON_MATCH_UPCOUNTING_SET_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a0 e0       	ldi	r26, 0x00	; 0
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__floatunsisf>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	48 ec       	ldi	r20, 0xC8	; 200
    184a:	52 e4       	ldi	r21, 0x42	; 66
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__divsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	4f e7       	ldi	r20, 0x7F	; 127
    185e:	53 e4       	ldi	r21, 0x43	; 67
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    187a:	8c e5       	ldi	r24, 0x5C	; 92
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	2a 81       	ldd	r18, Y+2	; 0x02
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18

		    		break;
    1884:	00 00       	nop

		    }


		    }
		    return Loc_enuTimer0Status;
    1886:	89 81       	ldd	r24, Y+1	; 0x01
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <__vector_10>:


// ISR function For TIMER0 Compare Match
void __vector_10(void) __attribute__((signal));

void __vector_10(void){
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	2f 93       	push	r18
    18a6:	3f 93       	push	r19
    18a8:	4f 93       	push	r20
    18aa:	5f 93       	push	r21
    18ac:	6f 93       	push	r22
    18ae:	7f 93       	push	r23
    18b0:	8f 93       	push	r24
    18b2:	9f 93       	push	r25
    18b4:	af 93       	push	r26
    18b6:	bf 93       	push	r27
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62

	    if(NULL !=Timer0_CompareInterruptHandler ){
    18c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Timer0_CompareInterruptHandler>
    18c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Timer0_CompareInterruptHandler+0x1>
    18cc:	89 2b       	or	r24, r25
    18ce:	31 f0       	breq	.+12     	; 0x18dc <__vector_10+0x44>
	    	Timer0_CompareInterruptHandler();
    18d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Timer0_CompareInterruptHandler>
    18d4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Timer0_CompareInterruptHandler+0x1>
    18d8:	fc 01       	movw	r30, r24
    18da:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
    18dc:	00 00       	nop
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	ff 91       	pop	r31
    18e4:	ef 91       	pop	r30
    18e6:	bf 91       	pop	r27
    18e8:	af 91       	pop	r26
    18ea:	9f 91       	pop	r25
    18ec:	8f 91       	pop	r24
    18ee:	7f 91       	pop	r23
    18f0:	6f 91       	pop	r22
    18f2:	5f 91       	pop	r21
    18f4:	4f 91       	pop	r20
    18f6:	3f 91       	pop	r19
    18f8:	2f 91       	pop	r18
    18fa:	0f 90       	pop	r0
    18fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1900:	0f 90       	pop	r0
    1902:	1f 90       	pop	r1
    1904:	18 95       	reti

00001906 <__vector_11>:


// ISR function For TIMER0 OverFlow
void __vector_11(void) __attribute__((signal));

void __vector_11(void){
    1906:	1f 92       	push	r1
    1908:	0f 92       	push	r0
    190a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    190e:	0f 92       	push	r0
    1910:	11 24       	eor	r1, r1
    1912:	2f 93       	push	r18
    1914:	3f 93       	push	r19
    1916:	4f 93       	push	r20
    1918:	5f 93       	push	r21
    191a:	6f 93       	push	r22
    191c:	7f 93       	push	r23
    191e:	8f 93       	push	r24
    1920:	9f 93       	push	r25
    1922:	af 93       	push	r26
    1924:	bf 93       	push	r27
    1926:	ef 93       	push	r30
    1928:	ff 93       	push	r31
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62

//	Timer0_DisableOverviewInterrupt();



    if(NULL !=Timer0_OverflowInterruptHandler ){
    1932:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Timer0_OverflowInterruptHandler>
    1936:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Timer0_OverflowInterruptHandler+0x1>
    193a:	89 2b       	or	r24, r25
    193c:	61 f0       	breq	.+24     	; 0x1956 <__vector_11+0x50>

    	TCNT0 = Timer0_InitValue;
    193e:	82 e5       	ldi	r24, 0x52	; 82
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Timer0_InitValue>
    1946:	fc 01       	movw	r30, r24
    1948:	20 83       	st	Z, r18
    	Timer0_OverflowInterruptHandler();
    194a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Timer0_OverflowInterruptHandler>
    194e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Timer0_OverflowInterruptHandler+0x1>
    1952:	fc 01       	movw	r30, r24
    1954:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
    1956:	00 00       	nop
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	bf 91       	pop	r27
    1962:	af 91       	pop	r26
    1964:	9f 91       	pop	r25
    1966:	8f 91       	pop	r24
    1968:	7f 91       	pop	r23
    196a:	6f 91       	pop	r22
    196c:	5f 91       	pop	r21
    196e:	4f 91       	pop	r20
    1970:	3f 91       	pop	r19
    1972:	2f 91       	pop	r18
    1974:	0f 90       	pop	r0
    1976:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    197a:	0f 90       	pop	r0
    197c:	1f 90       	pop	r1
    197e:	18 95       	reti

00001980 <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    1988:	8a e3       	ldi	r24, 0x3A	; 58
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	2c e4       	ldi	r18, 0x4C	; 76
    198e:	fc 01       	movw	r30, r24
    1990:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    1992:	87 e3       	ldi	r24, 0x37	; 55
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	27 ef       	ldi	r18, 0xF7	; 247
    1998:	fc 01       	movw	r30, r24
    199a:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    199c:	84 e3       	ldi	r24, 0x34	; 52
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	2f ef       	ldi	r18, 0xFF	; 255
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    19a6:	81 e3       	ldi	r24, 0x31	; 49
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	20 e1       	ldi	r18, 0x10	; 16
    19ac:	fc 01       	movw	r30, r24
    19ae:	20 83       	st	Z, r18

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    19b0:	8b e3       	ldi	r24, 0x3B	; 59
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	fc 01       	movw	r30, r24
    19b6:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    19b8:	88 e3       	ldi	r24, 0x38	; 56
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	28 ec       	ldi	r18, 0xC8	; 200
    19be:	fc 01       	movw	r30, r24
    19c0:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    19c2:	85 e3       	ldi	r24, 0x35	; 53
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	fc 01       	movw	r30, r24
    19c8:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    19ca:	82 e3       	ldi	r24, 0x32	; 50
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	28 ea       	ldi	r18, 0xA8	; 168
    19d0:	fc 01       	movw	r30, r24
    19d2:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
    19d4:	00 00       	nop
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <Port_enuSetPinDirection+0x6>
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <Port_enuSetPinDirection+0x8>
    19e4:	1f 92       	push	r1
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	8c 83       	std	Y+4, r24	; 0x04
    19ec:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    19ee:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	87 70       	andi	r24, 0x07	; 7
    19f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	86 95       	lsr	r24
    19fa:	86 95       	lsr	r24
    19fc:	86 95       	lsr	r24
    19fe:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	80 32       	cpi	r24, 0x20	; 32
    1a04:	18 f0       	brcs	.+6      	; 0x1a0c <Port_enuSetPinDirection+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	59 c0       	rjmp	.+178    	; 0x1abe <Port_enuSetPinDirection+0xe2>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	18 f0       	brcs	.+6      	; 0x1a18 <Port_enuSetPinDirection+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	53 c0       	rjmp	.+166    	; 0x1abe <Port_enuSetPinDirection+0xe2>
		}

	else{

			switch(Copy_u8PinDirection){
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	41 f1       	breq	.+80     	; 0x1a72 <Port_enuSetPinDirection+0x96>
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <Port_enuSetPinDirection+0x4c>
							break;

			default:

				// impossible
					break;
    1a26:	4b c0       	rjmp	.+150    	; 0x1abe <Port_enuSetPinDirection+0xe2>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	80 5a       	subi	r24, 0xA0	; 160
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	fc 01       	movw	r30, r24
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3e:	22 2f       	mov	r18, r18
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	22 0f       	add	r18, r18
    1a44:	33 1f       	adc	r19, r19
    1a46:	20 5a       	subi	r18, 0xA0	; 160
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	f9 01       	movw	r30, r18
    1a4c:	20 81       	ld	r18, Z
    1a4e:	31 81       	ldd	r19, Z+1	; 0x01
    1a50:	f9 01       	movw	r30, r18
    1a52:	20 81       	ld	r18, Z
    1a54:	62 2f       	mov	r22, r18
    1a56:	2a 81       	ldd	r18, Y+2	; 0x02
    1a58:	42 2f       	mov	r20, r18
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	21 e0       	ldi	r18, 0x01	; 1
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <Port_enuSetPinDirection+0x8a>
    1a62:	22 0f       	add	r18, r18
    1a64:	33 1f       	adc	r19, r19
    1a66:	4a 95       	dec	r20
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <Port_enuSetPinDirection+0x86>
    1a6a:	26 2b       	or	r18, r22
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	20 83       	st	Z, r18
					break;
    1a70:	26 c0       	rjmp	.+76     	; 0x1abe <Port_enuSetPinDirection+0xe2>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	80 5a       	subi	r24, 0xA0	; 160
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	fc 01       	movw	r30, r24
    1a82:	80 81       	ld	r24, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	22 2f       	mov	r18, r18
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	22 0f       	add	r18, r18
    1a8e:	33 1f       	adc	r19, r19
    1a90:	20 5a       	subi	r18, 0xA0	; 160
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	f9 01       	movw	r30, r18
    1a96:	20 81       	ld	r18, Z
    1a98:	31 81       	ldd	r19, Z+1	; 0x01
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	20 81       	ld	r18, Z
    1a9e:	62 2f       	mov	r22, r18
    1aa0:	2a 81       	ldd	r18, Y+2	; 0x02
    1aa2:	42 2f       	mov	r20, r18
    1aa4:	50 e0       	ldi	r21, 0x00	; 0
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <Port_enuSetPinDirection+0xd4>
    1aac:	22 0f       	add	r18, r18
    1aae:	33 1f       	adc	r19, r19
    1ab0:	4a 95       	dec	r20
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <Port_enuSetPinDirection+0xd0>
    1ab4:	20 95       	com	r18
    1ab6:	26 23       	and	r18, r22
    1ab8:	fc 01       	movw	r30, r24
    1aba:	20 83       	st	Z, r18
							break;
    1abc:	00 00       	nop

	}



	return Loc_enuState;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <Port_enuSetPinMode+0x6>
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <Port_enuSetPinMode+0x8>
    1ad8:	1f 92       	push	r1
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	8c 83       	std	Y+4, r24	; 0x04
    1ae0:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    1ae2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	87 70       	andi	r24, 0x07	; 7
    1ae8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	86 95       	lsr	r24
    1aee:	86 95       	lsr	r24
    1af0:	86 95       	lsr	r24
    1af2:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	80 32       	cpi	r24, 0x20	; 32
    1af8:	18 f0       	brcs	.+6      	; 0x1b00 <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	43 c1       	rjmp	.+646    	; 0x1d86 <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	18 f0       	brcs	.+6      	; 0x1b0c <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	3d c1       	rjmp	.+634    	; 0x1d86 <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	91 05       	cpc	r25, r1
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <Port_enuSetPinMode+0x4a>
    1b18:	57 c0       	rjmp	.+174    	; 0x1bc8 <Port_enuSetPinMode+0xf8>
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	91 05       	cpc	r25, r1
    1b1e:	1c f4       	brge	.+6      	; 0x1b26 <Port_enuSetPinMode+0x56>
    1b20:	89 2b       	or	r24, r25
    1b22:	49 f0       	breq	.+18     	; 0x1b36 <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
    1b24:	30 c1       	rjmp	.+608    	; 0x1d86 <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <Port_enuSetPinMode+0x5e>
    1b2c:	97 c0       	rjmp	.+302    	; 0x1c5c <Port_enuSetPinMode+0x18c>
    1b2e:	03 97       	sbiw	r24, 0x03	; 3
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <Port_enuSetPinMode+0x64>
    1b32:	df c0       	rjmp	.+446    	; 0x1cf2 <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
    1b34:	28 c1       	rjmp	.+592    	; 0x1d86 <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	80 5a       	subi	r24, 0xA0	; 160
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	fc 01       	movw	r30, r24
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4c:	22 2f       	mov	r18, r18
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	22 0f       	add	r18, r18
    1b52:	33 1f       	adc	r19, r19
    1b54:	20 5a       	subi	r18, 0xA0	; 160
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	f9 01       	movw	r30, r18
    1b5a:	20 81       	ld	r18, Z
    1b5c:	31 81       	ldd	r19, Z+1	; 0x01
    1b5e:	f9 01       	movw	r30, r18
    1b60:	20 81       	ld	r18, Z
    1b62:	62 2f       	mov	r22, r18
    1b64:	2a 81       	ldd	r18, Y+2	; 0x02
    1b66:	42 2f       	mov	r20, r18
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	21 e0       	ldi	r18, 0x01	; 1
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <Port_enuSetPinMode+0xa4>
    1b70:	22 0f       	add	r18, r18
    1b72:	33 1f       	adc	r19, r19
    1b74:	4a 95       	dec	r20
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <Port_enuSetPinMode+0xa0>
    1b78:	26 2b       	or	r18, r22
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	88 59       	subi	r24, 0x98	; 152
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	80 81       	ld	r24, Z
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	2b 81       	ldd	r18, Y+3	; 0x03
    1b94:	22 2f       	mov	r18, r18
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	28 59       	subi	r18, 0x98	; 152
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	f9 01       	movw	r30, r18
    1ba2:	20 81       	ld	r18, Z
    1ba4:	31 81       	ldd	r19, Z+1	; 0x01
    1ba6:	f9 01       	movw	r30, r18
    1ba8:	20 81       	ld	r18, Z
    1baa:	62 2f       	mov	r22, r18
    1bac:	2a 81       	ldd	r18, Y+2	; 0x02
    1bae:	42 2f       	mov	r20, r18
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	21 e0       	ldi	r18, 0x01	; 1
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <Port_enuSetPinMode+0xec>
    1bb8:	22 0f       	add	r18, r18
    1bba:	33 1f       	adc	r19, r19
    1bbc:	4a 95       	dec	r20
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <Port_enuSetPinMode+0xe8>
    1bc0:	26 2b       	or	r18, r22
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	20 83       	st	Z, r18
					break;
    1bc6:	df c0       	rjmp	.+446    	; 0x1d86 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	80 5a       	subi	r24, 0xA0	; 160
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bde:	22 2f       	mov	r18, r18
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	22 0f       	add	r18, r18
    1be4:	33 1f       	adc	r19, r19
    1be6:	20 5a       	subi	r18, 0xA0	; 160
    1be8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bea:	f9 01       	movw	r30, r18
    1bec:	20 81       	ld	r18, Z
    1bee:	31 81       	ldd	r19, Z+1	; 0x01
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	20 81       	ld	r18, Z
    1bf4:	62 2f       	mov	r22, r18
    1bf6:	2a 81       	ldd	r18, Y+2	; 0x02
    1bf8:	42 2f       	mov	r20, r18
    1bfa:	50 e0       	ldi	r21, 0x00	; 0
    1bfc:	21 e0       	ldi	r18, 0x01	; 1
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <Port_enuSetPinMode+0x136>
    1c02:	22 0f       	add	r18, r18
    1c04:	33 1f       	adc	r19, r19
    1c06:	4a 95       	dec	r20
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <Port_enuSetPinMode+0x132>
    1c0a:	26 2b       	or	r18, r22
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	88 59       	subi	r24, 0x98	; 152
    1c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1e:	fc 01       	movw	r30, r24
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	22 2f       	mov	r18, r18
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	22 0f       	add	r18, r18
    1c2c:	33 1f       	adc	r19, r19
    1c2e:	28 59       	subi	r18, 0x98	; 152
    1c30:	3f 4f       	sbci	r19, 0xFF	; 255
    1c32:	f9 01       	movw	r30, r18
    1c34:	20 81       	ld	r18, Z
    1c36:	31 81       	ldd	r19, Z+1	; 0x01
    1c38:	f9 01       	movw	r30, r18
    1c3a:	20 81       	ld	r18, Z
    1c3c:	62 2f       	mov	r22, r18
    1c3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c40:	42 2f       	mov	r20, r18
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	21 e0       	ldi	r18, 0x01	; 1
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <Port_enuSetPinMode+0x17e>
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	4a 95       	dec	r20
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <Port_enuSetPinMode+0x17a>
    1c52:	20 95       	com	r18
    1c54:	26 23       	and	r18, r22
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
							break;
    1c5a:	95 c0       	rjmp	.+298    	; 0x1d86 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	80 5a       	subi	r24, 0xA0	; 160
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	80 81       	ld	r24, Z
    1c6e:	91 81       	ldd	r25, Z+1	; 0x01
    1c70:	2b 81       	ldd	r18, Y+3	; 0x03
    1c72:	22 2f       	mov	r18, r18
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	22 0f       	add	r18, r18
    1c78:	33 1f       	adc	r19, r19
    1c7a:	20 5a       	subi	r18, 0xA0	; 160
    1c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7e:	f9 01       	movw	r30, r18
    1c80:	20 81       	ld	r18, Z
    1c82:	31 81       	ldd	r19, Z+1	; 0x01
    1c84:	f9 01       	movw	r30, r18
    1c86:	20 81       	ld	r18, Z
    1c88:	62 2f       	mov	r22, r18
    1c8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1c8c:	42 2f       	mov	r20, r18
    1c8e:	50 e0       	ldi	r21, 0x00	; 0
    1c90:	21 e0       	ldi	r18, 0x01	; 1
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <Port_enuSetPinMode+0x1ca>
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	4a 95       	dec	r20
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <Port_enuSetPinMode+0x1c6>
    1c9e:	20 95       	com	r18
    1ca0:	26 23       	and	r18, r22
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	88 59       	subi	r24, 0x98	; 152
    1cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbc:	22 2f       	mov	r18, r18
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	22 0f       	add	r18, r18
    1cc2:	33 1f       	adc	r19, r19
    1cc4:	28 59       	subi	r18, 0x98	; 152
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc8:	f9 01       	movw	r30, r18
    1cca:	20 81       	ld	r18, Z
    1ccc:	31 81       	ldd	r19, Z+1	; 0x01
    1cce:	f9 01       	movw	r30, r18
    1cd0:	20 81       	ld	r18, Z
    1cd2:	62 2f       	mov	r22, r18
    1cd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cd6:	42 2f       	mov	r20, r18
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	21 e0       	ldi	r18, 0x01	; 1
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <Port_enuSetPinMode+0x214>
    1ce0:	22 0f       	add	r18, r18
    1ce2:	33 1f       	adc	r19, r19
    1ce4:	4a 95       	dec	r20
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <Port_enuSetPinMode+0x210>
    1ce8:	20 95       	com	r18
    1cea:	26 23       	and	r18, r22
    1cec:	fc 01       	movw	r30, r24
    1cee:	20 83       	st	Z, r18
								break;
    1cf0:	4a c0       	rjmp	.+148    	; 0x1d86 <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	80 5a       	subi	r24, 0xA0	; 160
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	fc 01       	movw	r30, r24
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	2b 81       	ldd	r18, Y+3	; 0x03
    1d08:	22 2f       	mov	r18, r18
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	22 0f       	add	r18, r18
    1d0e:	33 1f       	adc	r19, r19
    1d10:	20 5a       	subi	r18, 0xA0	; 160
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	f9 01       	movw	r30, r18
    1d16:	20 81       	ld	r18, Z
    1d18:	31 81       	ldd	r19, Z+1	; 0x01
    1d1a:	f9 01       	movw	r30, r18
    1d1c:	20 81       	ld	r18, Z
    1d1e:	62 2f       	mov	r22, r18
    1d20:	2a 81       	ldd	r18, Y+2	; 0x02
    1d22:	42 2f       	mov	r20, r18
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	21 e0       	ldi	r18, 0x01	; 1
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <Port_enuSetPinMode+0x260>
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	4a 95       	dec	r20
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <Port_enuSetPinMode+0x25c>
    1d34:	20 95       	com	r18
    1d36:	26 23       	and	r18, r22
    1d38:	fc 01       	movw	r30, r24
    1d3a:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	88 59       	subi	r24, 0x98	; 152
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	2b 81       	ldd	r18, Y+3	; 0x03
    1d52:	22 2f       	mov	r18, r18
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	22 0f       	add	r18, r18
    1d58:	33 1f       	adc	r19, r19
    1d5a:	28 59       	subi	r18, 0x98	; 152
    1d5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5e:	f9 01       	movw	r30, r18
    1d60:	20 81       	ld	r18, Z
    1d62:	31 81       	ldd	r19, Z+1	; 0x01
    1d64:	f9 01       	movw	r30, r18
    1d66:	20 81       	ld	r18, Z
    1d68:	62 2f       	mov	r22, r18
    1d6a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d6c:	42 2f       	mov	r20, r18
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	21 e0       	ldi	r18, 0x01	; 1
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <Port_enuSetPinMode+0x2aa>
    1d76:	22 0f       	add	r18, r18
    1d78:	33 1f       	adc	r19, r19
    1d7a:	4a 95       	dec	r20
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <Port_enuSetPinMode+0x2a6>
    1d7e:	26 2b       	or	r18, r22
    1d80:	fc 01       	movw	r30, r24
    1d82:	20 83       	st	Z, r18
								break;
    1d84:	00 00       	nop



	}

	return Loc_enuState;
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	08 95       	ret

00001d98 <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	1f 92       	push	r1
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1da2:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
    1da4:	8f e5       	ldi	r24, 0x5F	; 95
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	2f e5       	ldi	r18, 0x5F	; 95
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	f9 01       	movw	r30, r18
    1dae:	20 81       	ld	r18, Z
    1db0:	20 68       	ori	r18, 0x80	; 128
    1db2:	fc 01       	movw	r30, r24
    1db4:	20 83       	st	Z, r18

	return Loc_enuGieState;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01

}
    1db8:	0f 90       	pop	r0
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	1f 92       	push	r1
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1dca:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
    1dcc:	8f e5       	ldi	r24, 0x5F	; 95
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	2f e5       	ldi	r18, 0x5F	; 95
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	f9 01       	movw	r30, r18
    1dd6:	20 81       	ld	r18, Z
    1dd8:	2f 77       	andi	r18, 0x7F	; 127
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 83       	st	Z, r18

		return Loc_enuGieState;
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de0:	0f 90       	pop	r0
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	08 95       	ret

00001de8 <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <Gie_enuSetGloablInterrupt+0x6>
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1df4:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
    1df6:	8f e5       	ldi	r24, 0x5F	; 95
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	2f e5       	ldi	r18, 0x5F	; 95
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	f9 01       	movw	r30, r18
    1e00:	20 81       	ld	r18, Z
    1e02:	42 2f       	mov	r20, r18
    1e04:	4f 77       	andi	r20, 0x7F	; 127
    1e06:	2a 81       	ldd	r18, Y+2	; 0x02
    1e08:	22 2f       	mov	r18, r18
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	36 95       	lsr	r19
    1e0e:	32 2f       	mov	r19, r18
    1e10:	22 27       	eor	r18, r18
    1e12:	37 95       	ror	r19
    1e14:	27 95       	ror	r18
    1e16:	24 2b       	or	r18, r20
    1e18:	fc 01       	movw	r30, r24
    1e1a:	20 83       	st	Z, r18

			return Loc_enuGieState;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <Gie_enuGetGloablInterrupt+0x6>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <Gie_enuGetGloablInterrupt+0x8>
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	8a 83       	std	Y+2, r24	; 0x02
    1e36:	7c 83       	std	Y+4, r23	; 0x04
    1e38:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1e3a:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	89 2b       	or	r24, r25
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	0c c0       	rjmp	.+24     	; 0x1e62 <Gie_enuGetGloablInterrupt+0x3a>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
    1e4a:	8f e5       	ldi	r24, 0x5F	; 95
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	fc 01       	movw	r30, r24
    1e50:	80 81       	ld	r24, Z
    1e52:	28 2f       	mov	r18, r24
    1e54:	22 1f       	adc	r18, r18
    1e56:	22 27       	eor	r18, r18
    1e58:	22 1f       	adc	r18, r18
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	fc 01       	movw	r30, r24
    1e60:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	08 95       	ret

00001e72 <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <Exti_enuEnable+0x6>
    1e78:	1f 92       	push	r1
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	8a 83       	std	Y+2, r24	; 0x02
    1e80:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	83 30       	cpi	r24, 0x03	; 3
    1e8a:	18 f0       	brcs	.+6      	; 0x1e92 <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	8f c0       	rjmp	.+286    	; 0x1fb0 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	89 f1       	breq	.+98     	; 0x1f00 <Exti_enuEnable+0x8e>
    1e9e:	82 30       	cpi	r24, 0x02	; 2
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <Exti_enuEnable+0x34>
    1ea4:	62 c0       	rjmp	.+196    	; 0x1f6a <Exti_enuEnable+0xf8>
    1ea6:	89 2b       	or	r24, r25
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
    1eaa:	82 c0       	rjmp	.+260    	; 0x1fb0 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
    1eac:	85 e5       	ldi	r24, 0x55	; 85
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	25 e5       	ldi	r18, 0x55	; 85
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	20 81       	ld	r18, Z
    1eb8:	32 2f       	mov	r19, r18
    1eba:	3e 7f       	andi	r19, 0xFE	; 254
    1ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebe:	21 70       	andi	r18, 0x01	; 1
    1ec0:	23 2b       	or	r18, r19
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
    1ec6:	85 e5       	ldi	r24, 0x55	; 85
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	25 e5       	ldi	r18, 0x55	; 85
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	f9 01       	movw	r30, r18
    1ed0:	20 81       	ld	r18, Z
    1ed2:	42 2f       	mov	r20, r18
    1ed4:	4d 7f       	andi	r20, 0xFD	; 253
    1ed6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed8:	26 95       	lsr	r18
    1eda:	22 2f       	mov	r18, r18
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	21 70       	andi	r18, 0x01	; 1
    1ee0:	33 27       	eor	r19, r19
    1ee2:	22 0f       	add	r18, r18
    1ee4:	33 1f       	adc	r19, r19
    1ee6:	24 2b       	or	r18, r20
    1ee8:	fc 01       	movw	r30, r24
    1eea:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
    1eec:	8b e5       	ldi	r24, 0x5B	; 91
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	2b e5       	ldi	r18, 0x5B	; 91
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	f9 01       	movw	r30, r18
    1ef6:	20 81       	ld	r18, Z
    1ef8:	20 64       	ori	r18, 0x40	; 64
    1efa:	fc 01       	movw	r30, r24
    1efc:	20 83       	st	Z, r18

			break;
    1efe:	58 c0       	rjmp	.+176    	; 0x1fb0 <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
    1f00:	85 e5       	ldi	r24, 0x55	; 85
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	25 e5       	ldi	r18, 0x55	; 85
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	f9 01       	movw	r30, r18
    1f0a:	20 81       	ld	r18, Z
    1f0c:	42 2f       	mov	r20, r18
    1f0e:	4b 7f       	andi	r20, 0xFB	; 251
    1f10:	2b 81       	ldd	r18, Y+3	; 0x03
    1f12:	22 2f       	mov	r18, r18
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	21 70       	andi	r18, 0x01	; 1
    1f18:	33 27       	eor	r19, r19
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	22 0f       	add	r18, r18
    1f20:	33 1f       	adc	r19, r19
    1f22:	24 2b       	or	r18, r20
    1f24:	fc 01       	movw	r30, r24
    1f26:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
    1f28:	85 e5       	ldi	r24, 0x55	; 85
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	25 e5       	ldi	r18, 0x55	; 85
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	f9 01       	movw	r30, r18
    1f32:	20 81       	ld	r18, Z
    1f34:	42 2f       	mov	r20, r18
    1f36:	47 7f       	andi	r20, 0xF7	; 247
    1f38:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3a:	26 95       	lsr	r18
    1f3c:	22 2f       	mov	r18, r18
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	21 70       	andi	r18, 0x01	; 1
    1f42:	33 27       	eor	r19, r19
    1f44:	22 0f       	add	r18, r18
    1f46:	33 1f       	adc	r19, r19
    1f48:	22 0f       	add	r18, r18
    1f4a:	33 1f       	adc	r19, r19
    1f4c:	22 0f       	add	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	24 2b       	or	r18, r20
    1f52:	fc 01       	movw	r30, r24
    1f54:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
    1f56:	8b e5       	ldi	r24, 0x5B	; 91
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	2b e5       	ldi	r18, 0x5B	; 91
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	f9 01       	movw	r30, r18
    1f60:	20 81       	ld	r18, Z
    1f62:	20 68       	ori	r18, 0x80	; 128
    1f64:	fc 01       	movw	r30, r24
    1f66:	20 83       	st	Z, r18
			break;
    1f68:	23 c0       	rjmp	.+70     	; 0x1fb0 <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
    1f6a:	84 e5       	ldi	r24, 0x54	; 84
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	24 e5       	ldi	r18, 0x54	; 84
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	f9 01       	movw	r30, r18
    1f74:	20 81       	ld	r18, Z
    1f76:	42 2f       	mov	r20, r18
    1f78:	4f 7b       	andi	r20, 0xBF	; 191
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	22 2f       	mov	r18, r18
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	21 70       	andi	r18, 0x01	; 1
    1f82:	33 27       	eor	r19, r19
    1f84:	00 24       	eor	r0, r0
    1f86:	36 95       	lsr	r19
    1f88:	27 95       	ror	r18
    1f8a:	07 94       	ror	r0
    1f8c:	36 95       	lsr	r19
    1f8e:	27 95       	ror	r18
    1f90:	07 94       	ror	r0
    1f92:	32 2f       	mov	r19, r18
    1f94:	20 2d       	mov	r18, r0
    1f96:	24 2b       	or	r18, r20
    1f98:	fc 01       	movw	r30, r24
    1f9a:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
    1f9c:	8b e5       	ldi	r24, 0x5B	; 91
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	2b e5       	ldi	r18, 0x5B	; 91
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	f9 01       	movw	r30, r18
    1fa6:	20 81       	ld	r18, Z
    1fa8:	20 62       	ori	r18, 0x20	; 32
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 83       	st	Z, r18
			break;
    1fae:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01

}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	08 95       	ret

00001fbe <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <Exti_enuDisable+0x6>
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	83 30       	cpi	r24, 0x03	; 3
    1fd2:	18 f0       	brcs	.+6      	; 0x1fda <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	2a c0       	rjmp	.+84     	; 0x202e <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	81 30       	cpi	r24, 0x01	; 1
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	81 f0       	breq	.+32     	; 0x2006 <Exti_enuDisable+0x48>
    1fe6:	82 30       	cpi	r24, 0x02	; 2
    1fe8:	91 05       	cpc	r25, r1
    1fea:	b9 f0       	breq	.+46     	; 0x201a <Exti_enuDisable+0x5c>
    1fec:	89 2b       	or	r24, r25
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
    1ff0:	1e c0       	rjmp	.+60     	; 0x202e <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
    1ff2:	8b e5       	ldi	r24, 0x5B	; 91
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	2b e5       	ldi	r18, 0x5B	; 91
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	20 81       	ld	r18, Z
    1ffe:	2f 7b       	andi	r18, 0xBF	; 191
    2000:	fc 01       	movw	r30, r24
    2002:	20 83       	st	Z, r18
			break;
    2004:	14 c0       	rjmp	.+40     	; 0x202e <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
    2006:	8b e5       	ldi	r24, 0x5B	; 91
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	2b e5       	ldi	r18, 0x5B	; 91
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	f9 01       	movw	r30, r18
    2010:	20 81       	ld	r18, Z
    2012:	2f 77       	andi	r18, 0x7F	; 127
    2014:	fc 01       	movw	r30, r24
    2016:	20 83       	st	Z, r18
			break;
    2018:	0a c0       	rjmp	.+20     	; 0x202e <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
    201a:	8b e5       	ldi	r24, 0x5B	; 91
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	2b e5       	ldi	r18, 0x5B	; 91
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	f9 01       	movw	r30, r18
    2024:	20 81       	ld	r18, Z
    2026:	2f 7d       	andi	r18, 0xDF	; 223
    2028:	fc 01       	movw	r30, r24
    202a:	20 83       	st	Z, r18
			break;
    202c:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    202e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	08 95       	ret

0000203a <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	00 d0       	rcall	.+0      	; 0x2040 <Exti_enuSetCallbackFunction+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <Exti_enuSetCallbackFunction+0x8>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	8a 83       	std	Y+2, r24	; 0x02
    2048:	7c 83       	std	Y+4, r23	; 0x04
    204a:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	83 30       	cpi	r24, 0x03	; 3
    2054:	18 f0       	brcs	.+6      	; 0x205c <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    2056:	83 e0       	ldi	r24, 0x03	; 3
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	89 2b       	or	r24, r25
    2062:	19 f4       	brne	.+6      	; 0x206a <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	0c c0       	rjmp	.+24     	; 0x2082 <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	87 5f       	subi	r24, 0xF7	; 247
    2076:	9e 4f       	sbci	r25, 0xFE	; 254
    2078:	2b 81       	ldd	r18, Y+3	; 0x03
    207a:	3c 81       	ldd	r19, Y+4	; 0x04
    207c:	fc 01       	movw	r30, r24
    207e:	31 83       	std	Z+1, r19	; 0x01
    2080:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
    2082:	89 81       	ldd	r24, Y+1	; 0x01

}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	08 95       	ret

00002092 <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    2092:	1f 92       	push	r1
    2094:	0f 92       	push	r0
    2096:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	4f 93       	push	r20
    20a4:	5f 93       	push	r21
    20a6:	6f 93       	push	r22
    20a8:	7f 93       	push	r23
    20aa:	8f 93       	push	r24
    20ac:	9f 93       	push	r25
    20ae:	af 93       	push	r26
    20b0:	bf 93       	push	r27
    20b2:	ef 93       	push	r30
    20b4:	ff 93       	push	r31
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
    20be:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Exti_InterruptHandler>
    20c2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Exti_InterruptHandler+0x1>
    20c6:	89 2b       	or	r24, r25
    20c8:	31 f0       	breq	.+12     	; 0x20d6 <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
    20ca:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Exti_InterruptHandler>
    20ce:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Exti_InterruptHandler+0x1>
    20d2:	fc 01       	movw	r30, r24
    20d4:	09 95       	icall

}
    20d6:	00 00       	nop
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	ff 91       	pop	r31
    20de:	ef 91       	pop	r30
    20e0:	bf 91       	pop	r27
    20e2:	af 91       	pop	r26
    20e4:	9f 91       	pop	r25
    20e6:	8f 91       	pop	r24
    20e8:	7f 91       	pop	r23
    20ea:	6f 91       	pop	r22
    20ec:	5f 91       	pop	r21
    20ee:	4f 91       	pop	r20
    20f0:	3f 91       	pop	r19
    20f2:	2f 91       	pop	r18
    20f4:	0f 90       	pop	r0
    20f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    20fa:	0f 90       	pop	r0
    20fc:	1f 90       	pop	r1
    20fe:	18 95       	reti

00002100 <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    2100:	1f 92       	push	r1
    2102:	0f 92       	push	r0
    2104:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2108:	0f 92       	push	r0
    210a:	11 24       	eor	r1, r1
    210c:	2f 93       	push	r18
    210e:	3f 93       	push	r19
    2110:	4f 93       	push	r20
    2112:	5f 93       	push	r21
    2114:	6f 93       	push	r22
    2116:	7f 93       	push	r23
    2118:	8f 93       	push	r24
    211a:	9f 93       	push	r25
    211c:	af 93       	push	r26
    211e:	bf 93       	push	r27
    2120:	ef 93       	push	r30
    2122:	ff 93       	push	r31
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
    212c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Exti_InterruptHandler+0x2>
    2130:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Exti_InterruptHandler+0x3>
    2134:	89 2b       	or	r24, r25
    2136:	31 f0       	breq	.+12     	; 0x2144 <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
    2138:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Exti_InterruptHandler+0x2>
    213c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Exti_InterruptHandler+0x3>
    2140:	fc 01       	movw	r30, r24
    2142:	09 95       	icall

}
    2144:	00 00       	nop
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	ff 91       	pop	r31
    214c:	ef 91       	pop	r30
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	9f 91       	pop	r25
    2154:	8f 91       	pop	r24
    2156:	7f 91       	pop	r23
    2158:	6f 91       	pop	r22
    215a:	5f 91       	pop	r21
    215c:	4f 91       	pop	r20
    215e:	3f 91       	pop	r19
    2160:	2f 91       	pop	r18
    2162:	0f 90       	pop	r0
    2164:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2168:	0f 90       	pop	r0
    216a:	1f 90       	pop	r1
    216c:	18 95       	reti

0000216e <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    216e:	1f 92       	push	r1
    2170:	0f 92       	push	r0
    2172:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2176:	0f 92       	push	r0
    2178:	11 24       	eor	r1, r1
    217a:	2f 93       	push	r18
    217c:	3f 93       	push	r19
    217e:	4f 93       	push	r20
    2180:	5f 93       	push	r21
    2182:	6f 93       	push	r22
    2184:	7f 93       	push	r23
    2186:	8f 93       	push	r24
    2188:	9f 93       	push	r25
    218a:	af 93       	push	r26
    218c:	bf 93       	push	r27
    218e:	ef 93       	push	r30
    2190:	ff 93       	push	r31
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
    219a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Exti_InterruptHandler+0x4>
    219e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Exti_InterruptHandler+0x5>
    21a2:	89 2b       	or	r24, r25
    21a4:	31 f0       	breq	.+12     	; 0x21b2 <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
    21a6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Exti_InterruptHandler+0x4>
    21aa:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Exti_InterruptHandler+0x5>
    21ae:	fc 01       	movw	r30, r24
    21b0:	09 95       	icall

}
    21b2:	00 00       	nop
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	ff 91       	pop	r31
    21ba:	ef 91       	pop	r30
    21bc:	bf 91       	pop	r27
    21be:	af 91       	pop	r26
    21c0:	9f 91       	pop	r25
    21c2:	8f 91       	pop	r24
    21c4:	7f 91       	pop	r23
    21c6:	6f 91       	pop	r22
    21c8:	5f 91       	pop	r21
    21ca:	4f 91       	pop	r20
    21cc:	3f 91       	pop	r19
    21ce:	2f 91       	pop	r18
    21d0:	0f 90       	pop	r0
    21d2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    21d6:	0f 90       	pop	r0
    21d8:	1f 90       	pop	r1
    21da:	18 95       	reti

000021dc <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <Dio_enuWriteChannel+0x6>
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <Dio_enuWriteChannel+0x8>
    21e4:	1f 92       	push	r1
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	8c 83       	std	Y+4, r24	; 0x04
    21ec:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    21ee:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
    21f0:	8c 81       	ldd	r24, Y+4	; 0x04
    21f2:	87 70       	andi	r24, 0x07	; 7
    21f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	86 95       	lsr	r24
    21fa:	86 95       	lsr	r24
    21fc:	86 95       	lsr	r24
    21fe:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    2200:	8c 81       	ldd	r24, Y+4	; 0x04
    2202:	80 32       	cpi	r24, 0x20	; 32
    2204:	18 f0       	brcs	.+6      	; 0x220c <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	4e c0       	rjmp	.+156    	; 0x22a8 <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	80 59       	subi	r24, 0x90	; 144
    2218:	9f 4f       	sbci	r25, 0xFF	; 255
    221a:	fc 01       	movw	r30, r24
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	fc 01       	movw	r30, r24
    2222:	80 81       	ld	r24, Z
    2224:	88 2f       	mov	r24, r24
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	2a 81       	ldd	r18, Y+2	; 0x02
    222a:	22 2f       	mov	r18, r18
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <Dio_enuWriteChannel+0x58>
    2230:	95 95       	asr	r25
    2232:	87 95       	ror	r24
    2234:	2a 95       	dec	r18
    2236:	e2 f7       	brpl	.-8      	; 0x2230 <Dio_enuWriteChannel+0x54>
    2238:	81 70       	andi	r24, 0x01	; 1
    223a:	99 27       	eor	r25, r25
    223c:	89 2b       	or	r24, r25
    223e:	19 f4       	brne	.+6      	; 0x2246 <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	31 c0       	rjmp	.+98     	; 0x22a8 <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 58       	subi	r24, 0x88	; 136
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	fc 01       	movw	r30, r24
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	2b 81       	ldd	r18, Y+3	; 0x03
    225c:	22 2f       	mov	r18, r18
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	22 0f       	add	r18, r18
    2262:	33 1f       	adc	r19, r19
    2264:	28 58       	subi	r18, 0x88	; 136
    2266:	3f 4f       	sbci	r19, 0xFF	; 255
    2268:	f9 01       	movw	r30, r18
    226a:	20 81       	ld	r18, Z
    226c:	31 81       	ldd	r19, Z+1	; 0x01
    226e:	f9 01       	movw	r30, r18
    2270:	20 81       	ld	r18, Z
    2272:	62 2f       	mov	r22, r18
    2274:	2a 81       	ldd	r18, Y+2	; 0x02
    2276:	42 2f       	mov	r20, r18
    2278:	50 e0       	ldi	r21, 0x00	; 0
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <Dio_enuWriteChannel+0xa8>
    2280:	22 0f       	add	r18, r18
    2282:	33 1f       	adc	r19, r19
    2284:	4a 95       	dec	r20
    2286:	e2 f7       	brpl	.-8      	; 0x2280 <Dio_enuWriteChannel+0xa4>
    2288:	20 95       	com	r18
    228a:	62 23       	and	r22, r18
    228c:	2d 81       	ldd	r18, Y+5	; 0x05
    228e:	22 2f       	mov	r18, r18
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a 81       	ldd	r20, Y+2	; 0x02
    2294:	44 2f       	mov	r20, r20
    2296:	50 e0       	ldi	r21, 0x00	; 0
    2298:	02 c0       	rjmp	.+4      	; 0x229e <Dio_enuWriteChannel+0xc2>
    229a:	22 0f       	add	r18, r18
    229c:	33 1f       	adc	r19, r19
    229e:	4a 95       	dec	r20
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <Dio_enuWriteChannel+0xbe>
    22a2:	26 2b       	or	r18, r22
    22a4:	fc 01       	movw	r30, r24
    22a6:	20 83       	st	Z, r18

}

	return Loc_enuState;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	08 95       	ret

000022ba <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <Dio_enuReadChannel+0x6>
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <Dio_enuReadChannel+0x8>
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <Dio_enuReadChannel+0xa>
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	8c 83       	std	Y+4, r24	; 0x04
    22ca:	7e 83       	std	Y+6, r23	; 0x06
    22cc:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    22ce:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	87 70       	andi	r24, 0x07	; 7
    22d4:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    22d6:	8c 81       	ldd	r24, Y+4	; 0x04
    22d8:	86 95       	lsr	r24
    22da:	86 95       	lsr	r24
    22dc:	86 95       	lsr	r24
    22de:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    22e0:	8c 81       	ldd	r24, Y+4	; 0x04
    22e2:	80 32       	cpi	r24, 0x20	; 32
    22e4:	18 f0       	brcs	.+6      	; 0x22ec <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	40 c0       	rjmp	.+128    	; 0x236c <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	80 59       	subi	r24, 0x90	; 144
    22f8:	9f 4f       	sbci	r25, 0xFF	; 255
    22fa:	fc 01       	movw	r30, r24
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	fc 01       	movw	r30, r24
    2302:	80 81       	ld	r24, Z
    2304:	88 2f       	mov	r24, r24
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	2a 81       	ldd	r18, Y+2	; 0x02
    230a:	22 2f       	mov	r18, r18
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <Dio_enuReadChannel+0x5a>
    2310:	95 95       	asr	r25
    2312:	87 95       	ror	r24
    2314:	2a 95       	dec	r18
    2316:	e2 f7       	brpl	.-8      	; 0x2310 <Dio_enuReadChannel+0x56>
    2318:	81 70       	andi	r24, 0x01	; 1
    231a:	99 27       	eor	r25, r25
    231c:	89 2b       	or	r24, r25
    231e:	19 f0       	breq	.+6      	; 0x2326 <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	23 c0       	rjmp	.+70     	; 0x236c <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	89 2b       	or	r24, r25
    232c:	19 f4       	brne	.+6      	; 0x2334 <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    232e:	84 e0       	ldi	r24, 0x04	; 4
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	1c c0       	rjmp	.+56     	; 0x236c <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	80 58       	subi	r24, 0x80	; 128
    2340:	9f 4f       	sbci	r25, 0xFF	; 255
    2342:	fc 01       	movw	r30, r24
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	fc 01       	movw	r30, r24
    234a:	80 81       	ld	r24, Z
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	2a 81       	ldd	r18, Y+2	; 0x02
    2352:	22 2f       	mov	r18, r18
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	02 c0       	rjmp	.+4      	; 0x235c <Dio_enuReadChannel+0xa2>
    2358:	95 95       	asr	r25
    235a:	87 95       	ror	r24
    235c:	2a 95       	dec	r18
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <Dio_enuReadChannel+0x9e>
    2360:	28 2f       	mov	r18, r24
    2362:	21 70       	andi	r18, 0x01	; 1
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	9e 81       	ldd	r25, Y+6	; 0x06
    2368:	fc 01       	movw	r30, r24
    236a:	20 83       	st	Z, r18


	}

		return Loc_enuState;
    236c:	89 81       	ldd	r24, Y+1	; 0x01

}
    236e:	26 96       	adiw	r28, 0x06	; 6
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	00 d0       	rcall	.+0      	; 0x2386 <Dio_enuWritePort+0x6>
    2386:	1f 92       	push	r1
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	8a 83       	std	Y+2, r24	; 0x02
    238e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    2390:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	84 30       	cpi	r24, 0x04	; 4
    2396:	18 f0       	brcs	.+6      	; 0x239e <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    2398:	83 e0       	ldi	r24, 0x03	; 3
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	1e c0       	rjmp	.+60     	; 0x23da <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	88 2f       	mov	r24, r24
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	80 59       	subi	r24, 0x90	; 144
    23aa:	9f 4f       	sbci	r25, 0xFF	; 255
    23ac:	fc 01       	movw	r30, r24
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	fc 01       	movw	r30, r24
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 3f       	cpi	r24, 0xFF	; 255
    23b8:	19 f0       	breq	.+6      	; 0x23c0 <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	0d c0       	rjmp	.+26     	; 0x23da <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	88 58       	subi	r24, 0x88	; 136
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	fc 01       	movw	r30, r24
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	2b 81       	ldd	r18, Y+3	; 0x03
    23d6:	fc 01       	movw	r30, r24
    23d8:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    23da:	89 81       	ldd	r24, Y+1	; 0x01



}
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	08 95       	ret

000023e8 <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <Dio_enuReadPort+0x6>
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <Dio_enuReadPort+0x8>
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	8a 83       	std	Y+2, r24	; 0x02
    23f6:	7c 83       	std	Y+4, r23	; 0x04
    23f8:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    23fa:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	84 30       	cpi	r24, 0x04	; 4
    2400:	18 f0       	brcs	.+6      	; 0x2408 <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	28 c0       	rjmp	.+80     	; 0x2458 <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	88 2f       	mov	r24, r24
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	80 59       	subi	r24, 0x90	; 144
    2414:	9f 4f       	sbci	r25, 0xFF	; 255
    2416:	fc 01       	movw	r30, r24
    2418:	80 81       	ld	r24, Z
    241a:	91 81       	ldd	r25, Z+1	; 0x01
    241c:	fc 01       	movw	r30, r24
    241e:	80 81       	ld	r24, Z
    2420:	88 23       	and	r24, r24
    2422:	19 f0       	breq	.+6      	; 0x242a <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	17 c0       	rjmp	.+46     	; 0x2458 <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	89 2b       	or	r24, r25
    2430:	19 f4       	brne	.+6      	; 0x2438 <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    2432:	84 e0       	ldi	r24, 0x04	; 4
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	10 c0       	rjmp	.+32     	; 0x2458 <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	80 58       	subi	r24, 0x80	; 128
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	fc 01       	movw	r30, r24
    2448:	80 81       	ld	r24, Z
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	fc 01       	movw	r30, r24
    244e:	20 81       	ld	r18, Z
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	9c 81       	ldd	r25, Y+4	; 0x04
    2454:	fc 01       	movw	r30, r24
    2456:	20 83       	st	Z, r18

		}

			return Loc_enuState;
    2458:	89 81       	ldd	r24, Y+1	; 0x01

}
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	00 d0       	rcall	.+0      	; 0x246e <Dio_enuFlipChannel+0x6>
    246e:	00 d0       	rcall	.+0      	; 0x2470 <Dio_enuFlipChannel+0x8>
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    2476:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	87 70       	andi	r24, 0x07	; 7
    247c:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    247e:	8c 81       	ldd	r24, Y+4	; 0x04
    2480:	86 95       	lsr	r24
    2482:	86 95       	lsr	r24
    2484:	86 95       	lsr	r24
    2486:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	80 32       	cpi	r24, 0x20	; 32
    248c:	18 f0       	brcs	.+6      	; 0x2494 <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	41 c0       	rjmp	.+130    	; 0x2516 <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	80 59       	subi	r24, 0x90	; 144
    24a0:	9f 4f       	sbci	r25, 0xFF	; 255
    24a2:	fc 01       	movw	r30, r24
    24a4:	80 81       	ld	r24, Z
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	fc 01       	movw	r30, r24
    24aa:	80 81       	ld	r24, Z
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	2a 81       	ldd	r18, Y+2	; 0x02
    24b2:	22 2f       	mov	r18, r18
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <Dio_enuFlipChannel+0x54>
    24b8:	95 95       	asr	r25
    24ba:	87 95       	ror	r24
    24bc:	2a 95       	dec	r18
    24be:	e2 f7       	brpl	.-8      	; 0x24b8 <Dio_enuFlipChannel+0x50>
    24c0:	81 70       	andi	r24, 0x01	; 1
    24c2:	99 27       	eor	r25, r25
    24c4:	89 2b       	or	r24, r25
    24c6:	19 f4       	brne	.+6      	; 0x24ce <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	24 c0       	rjmp	.+72     	; 0x2516 <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	88 58       	subi	r24, 0x88	; 136
    24da:	9f 4f       	sbci	r25, 0xFF	; 255
    24dc:	fc 01       	movw	r30, r24
    24de:	80 81       	ld	r24, Z
    24e0:	91 81       	ldd	r25, Z+1	; 0x01
    24e2:	2b 81       	ldd	r18, Y+3	; 0x03
    24e4:	22 2f       	mov	r18, r18
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	22 0f       	add	r18, r18
    24ea:	33 1f       	adc	r19, r19
    24ec:	28 58       	subi	r18, 0x88	; 136
    24ee:	3f 4f       	sbci	r19, 0xFF	; 255
    24f0:	f9 01       	movw	r30, r18
    24f2:	20 81       	ld	r18, Z
    24f4:	31 81       	ldd	r19, Z+1	; 0x01
    24f6:	f9 01       	movw	r30, r18
    24f8:	20 81       	ld	r18, Z
    24fa:	62 2f       	mov	r22, r18
    24fc:	2a 81       	ldd	r18, Y+2	; 0x02
    24fe:	42 2f       	mov	r20, r18
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	21 e0       	ldi	r18, 0x01	; 1
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	02 c0       	rjmp	.+4      	; 0x250c <Dio_enuFlipChannel+0xa4>
    2508:	22 0f       	add	r18, r18
    250a:	33 1f       	adc	r19, r19
    250c:	4a 95       	dec	r20
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <Dio_enuFlipChannel+0xa0>
    2510:	26 27       	eor	r18, r22
    2512:	fc 01       	movw	r30, r24
    2514:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    2516:	89 81       	ldd	r24, Y+1	; 0x01
}
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	08 95       	ret

00002526 <Adc_enuInit>:
/********************************** Data Type Declarations ****************************/

/********************************** Software Interfaces Declarations *******************/


Adc_StatusErrorType Adc_enuInit(const Adc_PinConfigType* Address_Adc){
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	00 d0       	rcall	.+0      	; 0x252c <Adc_enuInit+0x6>
    252c:	1f 92       	push	r1
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	9b 83       	std	Y+3, r25	; 0x03
    2534:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	89 2b       	or	r24, r25
    2540:	19 f4       	brne	.+6      	; 0x2548 <Adc_enuInit+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	65 c0       	rjmp	.+202    	; 0x2612 <Adc_enuInit+0xec>
	    }
	    else{
	    	 /* Disable Adc Peripheral */
	    	        Adc_Disable();
    2548:	86 e2       	ldi	r24, 0x26	; 38
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	26 e2       	ldi	r18, 0x26	; 38
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	f9 01       	movw	r30, r18
    2552:	20 81       	ld	r18, Z
    2554:	2f 77       	andi	r18, 0x7F	; 127
    2556:	fc 01       	movw	r30, r24
    2558:	20 83       	st	Z, r18



	    	        /* Choose Conversion Clock  */
	    	        Adc_SelectConversionClock(Address_Adc->conversion_frequancy);
    255a:	86 e2       	ldi	r24, 0x26	; 38
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	26 e2       	ldi	r18, 0x26	; 38
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	f9 01       	movw	r30, r18
    2564:	20 81       	ld	r18, Z
    2566:	42 2f       	mov	r20, r18
    2568:	40 77       	andi	r20, 0x70	; 112
    256a:	2a 81       	ldd	r18, Y+2	; 0x02
    256c:	3b 81       	ldd	r19, Y+3	; 0x03
    256e:	f9 01       	movw	r30, r18
    2570:	23 81       	ldd	r18, Z+3	; 0x03
    2572:	27 70       	andi	r18, 0x07	; 7
    2574:	24 2b       	or	r18, r20
    2576:	fc 01       	movw	r30, r24
    2578:	20 83       	st	Z, r18

	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    257a:	87 e2       	ldi	r24, 0x27	; 39
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	27 e2       	ldi	r18, 0x27	; 39
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	f9 01       	movw	r30, r18
    2584:	20 81       	ld	r18, Z
    2586:	42 2f       	mov	r20, r18
    2588:	48 7f       	andi	r20, 0xF8	; 248
    258a:	2a 81       	ldd	r18, Y+2	; 0x02
    258c:	3b 81       	ldd	r19, Y+3	; 0x03
    258e:	f9 01       	movw	r30, r18
    2590:	20 81       	ld	r18, Z
    2592:	27 70       	andi	r18, 0x07	; 7
    2594:	24 2b       	or	r18, r20
    2596:	fc 01       	movw	r30, r24
    2598:	20 83       	st	Z, r18


	    	        /*Configure Result Format */
	    	        Adc_SelectResultFormat(Address_Adc->result_format);
    259a:	87 e2       	ldi	r24, 0x27	; 39
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	27 e2       	ldi	r18, 0x27	; 39
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	f9 01       	movw	r30, r18
    25a4:	20 81       	ld	r18, Z
    25a6:	42 2f       	mov	r20, r18
    25a8:	4f 7d       	andi	r20, 0xDF	; 223
    25aa:	2a 81       	ldd	r18, Y+2	; 0x02
    25ac:	3b 81       	ldd	r19, Y+3	; 0x03
    25ae:	f9 01       	movw	r30, r18
    25b0:	22 81       	ldd	r18, Z+2	; 0x02
    25b2:	22 2f       	mov	r18, r18
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	22 0f       	add	r18, r18
    25b8:	33 1f       	adc	r19, r19
    25ba:	22 95       	swap	r18
    25bc:	32 95       	swap	r19
    25be:	30 7f       	andi	r19, 0xF0	; 240
    25c0:	32 27       	eor	r19, r18
    25c2:	20 7f       	andi	r18, 0xF0	; 240
    25c4:	32 27       	eor	r19, r18
    25c6:	24 2b       	or	r18, r20
    25c8:	fc 01       	movw	r30, r24
    25ca:	20 83       	st	Z, r18

	    	        /* Configure Voltage Reference*/
	    	        Adc_SelectRefVoltageSource(Address_Adc->vref_source);
    25cc:	87 e2       	ldi	r24, 0x27	; 39
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	27 e2       	ldi	r18, 0x27	; 39
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	f9 01       	movw	r30, r18
    25d6:	20 81       	ld	r18, Z
    25d8:	42 2f       	mov	r20, r18
    25da:	4f 73       	andi	r20, 0x3F	; 63
    25dc:	2a 81       	ldd	r18, Y+2	; 0x02
    25de:	3b 81       	ldd	r19, Y+3	; 0x03
    25e0:	f9 01       	movw	r30, r18
    25e2:	21 81       	ldd	r18, Z+1	; 0x01
    25e4:	22 2f       	mov	r18, r18
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	00 24       	eor	r0, r0
    25ea:	36 95       	lsr	r19
    25ec:	27 95       	ror	r18
    25ee:	07 94       	ror	r0
    25f0:	36 95       	lsr	r19
    25f2:	27 95       	ror	r18
    25f4:	07 94       	ror	r0
    25f6:	32 2f       	mov	r19, r18
    25f8:	20 2d       	mov	r18, r0
    25fa:	24 2b       	or	r18, r20
    25fc:	fc 01       	movw	r30, r24
    25fe:	20 83       	st	Z, r18

	    	        /* Enable Adc Peripheral */
	    	        Adc_Enable();
    2600:	86 e2       	ldi	r24, 0x26	; 38
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	26 e2       	ldi	r18, 0x26	; 38
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	f9 01       	movw	r30, r18
    260a:	20 81       	ld	r18, Z
    260c:	20 68       	ori	r18, 0x80	; 128
    260e:	fc 01       	movw	r30, r24
    2610:	20 83       	st	Z, r18

	    }

	    return Loc_enuAdcStatus;
    2612:	89 81       	ldd	r24, Y+1	; 0x01
}
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret

00002620 <Adc_enuDeInit>:

Adc_StatusErrorType Adc_enuDeInit(void){
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	1f 92       	push	r1
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	89 83       	std	Y+1, r24	; 0x01

	Adc_Disable();
    262e:	86 e2       	ldi	r24, 0x26	; 38
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	26 e2       	ldi	r18, 0x26	; 38
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	f9 01       	movw	r30, r18
    2638:	20 81       	ld	r18, Z
    263a:	2f 77       	andi	r18, 0x7F	; 127
    263c:	fc 01       	movw	r30, r24
    263e:	20 83       	st	Z, r18
	    return Loc_enuAdcStatus;
    2640:	89 81       	ldd	r24, Y+1	; 0x01
}
    2642:	0f 90       	pop	r0
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	08 95       	ret

0000264a <Adc_enuStartConversionSync>:


Adc_StatusErrorType Adc_enuStartConversionSync(const Adc_PinConfigType* Address_Adc, u16* Address_ResultDigitalVoltage){
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	a6 97       	sbiw	r28, 0x26	; 38
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	9c a3       	std	Y+36, r25	; 0x24
    2660:	8b a3       	std	Y+35, r24	; 0x23
    2662:	7e a3       	std	Y+38, r23	; 0x26
    2664:	6d a3       	std	Y+37, r22	; 0x25

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8AdcInterruptStatus = ZERO_VALUE;
    266a:	1a 82       	std	Y+2, r1	; 0x02
	    if(NULL == Address_Adc || Address_ResultDigitalVoltage == NULL){
    266c:	8b a1       	ldd	r24, Y+35	; 0x23
    266e:	9c a1       	ldd	r25, Y+36	; 0x24
    2670:	89 2b       	or	r24, r25
    2672:	21 f0       	breq	.+8      	; 0x267c <Adc_enuStartConversionSync+0x32>
    2674:	8d a1       	ldd	r24, Y+37	; 0x25
    2676:	9e a1       	ldd	r25, Y+38	; 0x26
    2678:	89 2b       	or	r24, r25
    267a:	19 f4       	brne	.+6      	; 0x2682 <Adc_enuStartConversionSync+0x38>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    267c:	82 e0       	ldi	r24, 0x02	; 2
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	54 c1       	rjmp	.+680    	; 0x292a <Adc_enuStartConversionSync+0x2e0>
	    }
	    else{

	            /* Read Status of The interrupt */
	    	    Loc_u8AdcInterruptStatus = Adc_GetInterruptEnableStatus();
    2682:	86 e2       	ldi	r24, 0x26	; 38
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	fc 01       	movw	r30, r24
    2688:	80 81       	ld	r24, Z
    268a:	86 95       	lsr	r24
    268c:	86 95       	lsr	r24
    268e:	86 95       	lsr	r24
    2690:	81 70       	andi	r24, 0x01	; 1
    2692:	8a 83       	std	Y+2, r24	; 0x02

	            /* Choose Selected Channel */
	            Adc_SelectChannel(Address_Adc->channel_number);
    2694:	87 e2       	ldi	r24, 0x27	; 39
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	27 e2       	ldi	r18, 0x27	; 39
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	f9 01       	movw	r30, r18
    269e:	20 81       	ld	r18, Z
    26a0:	42 2f       	mov	r20, r18
    26a2:	48 7f       	andi	r20, 0xF8	; 248
    26a4:	2b a1       	ldd	r18, Y+35	; 0x23
    26a6:	3c a1       	ldd	r19, Y+36	; 0x24
    26a8:	f9 01       	movw	r30, r18
    26aa:	20 81       	ld	r18, Z
    26ac:	27 70       	andi	r18, 0x07	; 7
    26ae:	24 2b       	or	r18, r20
    26b0:	fc 01       	movw	r30, r24
    26b2:	20 83       	st	Z, r18


	            /* Disable Interrupt not to jump after completing*/
	            Adc_SetInterruptEnable(ZERO_VALUE);
    26b4:	86 e2       	ldi	r24, 0x26	; 38
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	26 e2       	ldi	r18, 0x26	; 38
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	f9 01       	movw	r30, r18
    26be:	20 81       	ld	r18, Z
    26c0:	27 7f       	andi	r18, 0xF7	; 247
    26c2:	fc 01       	movw	r30, r24
    26c4:	20 83       	st	Z, r18


	            /* Start Conversion  */
	            Adc_StartConversion();
    26c6:	86 e2       	ldi	r24, 0x26	; 38
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	26 e2       	ldi	r18, 0x26	; 38
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	f9 01       	movw	r30, r18
    26d0:	20 81       	ld	r18, Z
    26d2:	20 64       	ori	r18, 0x40	; 64
    26d4:	fc 01       	movw	r30, r24
    26d6:	20 83       	st	Z, r18



	            /* wait =polling for conversion */
	            while( ZERO_VALUE == Adc_IsConversionCompleted() );
    26d8:	00 00       	nop
    26da:	86 e2       	ldi	r24, 0x26	; 38
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	fc 01       	movw	r30, r24
    26e0:	80 81       	ld	r24, Z
    26e2:	82 95       	swap	r24
    26e4:	86 95       	lsr	r24
    26e6:	86 95       	lsr	r24
    26e8:	83 70       	andi	r24, 0x03	; 3
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	81 70       	andi	r24, 0x01	; 1
    26f0:	99 27       	eor	r25, r25
    26f2:	89 2b       	or	r24, r25
    26f4:	91 f7       	brne	.-28     	; 0x26da <Adc_enuStartConversionSync+0x90>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 e2       	ldi	r26, 0x20	; 32
    26fc:	b1 e4       	ldi	r27, 0x41	; 65
    26fe:	8b 83       	std	Y+3, r24	; 0x03
    2700:	9c 83       	std	Y+4, r25	; 0x04
    2702:	ad 83       	std	Y+5, r26	; 0x05
    2704:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2706:	2b ea       	ldi	r18, 0xAB	; 171
    2708:	3a ea       	ldi	r19, 0xAA	; 170
    270a:	4a ea       	ldi	r20, 0xAA	; 170
    270c:	50 e4       	ldi	r21, 0x40	; 64
    270e:	6b 81       	ldd	r22, Y+3	; 0x03
    2710:	7c 81       	ldd	r23, Y+4	; 0x04
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8f 83       	std	Y+7, r24	; 0x07
    2720:	98 87       	std	Y+8, r25	; 0x08
    2722:	a9 87       	std	Y+9, r26	; 0x09
    2724:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	50 e4       	ldi	r21, 0x40	; 64
    272e:	6b 81       	ldd	r22, Y+3	; 0x03
    2730:	7c 81       	ldd	r23, Y+4	; 0x04
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	9e 81       	ldd	r25, Y+6	; 0x06
    2736:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8b 87       	std	Y+11, r24	; 0x0b
    2740:	9c 87       	std	Y+12, r25	; 0x0c
    2742:	ad 87       	std	Y+13, r26	; 0x0d
    2744:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e8       	ldi	r20, 0x80	; 128
    274c:	5f e3       	ldi	r21, 0x3F	; 63
    274e:	6f 81       	ldd	r22, Y+7	; 0x07
    2750:	78 85       	ldd	r23, Y+8	; 0x08
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	9a 85       	ldd	r25, Y+10	; 0x0a
    2756:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
    275a:	88 23       	and	r24, r24
    275c:	1c f4       	brge	.+6      	; 0x2764 <Adc_enuStartConversionSync+0x11a>
		__ticks = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	8f 87       	std	Y+15, r24	; 0x0f
    2762:	b2 c0       	rjmp	.+356    	; 0x28c8 <Adc_enuStartConversionSync+0x27e>
	else if (__tmp2 > 65535)
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	3f ef       	ldi	r19, 0xFF	; 255
    2768:	4f e7       	ldi	r20, 0x7F	; 127
    276a:	57 e4       	ldi	r21, 0x47	; 71
    276c:	6b 85       	ldd	r22, Y+11	; 0x0b
    276e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2770:	8d 85       	ldd	r24, Y+13	; 0x0d
    2772:	9e 85       	ldd	r25, Y+14	; 0x0e
    2774:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    2778:	18 16       	cp	r1, r24
    277a:	0c f0       	brlt	.+2      	; 0x277e <Adc_enuStartConversionSync+0x134>
    277c:	7b c0       	rjmp	.+246    	; 0x2874 <Adc_enuStartConversionSync+0x22a>
	{
		_delay_ms(__us / 1000.0);
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	4a e7       	ldi	r20, 0x7A	; 122
    2784:	54 e4       	ldi	r21, 0x44	; 68
    2786:	6b 81       	ldd	r22, Y+3	; 0x03
    2788:	7c 81       	ldd	r23, Y+4	; 0x04
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	9e 81       	ldd	r25, Y+6	; 0x06
    278e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__divsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	88 8b       	std	Y+16, r24	; 0x10
    2798:	99 8b       	std	Y+17, r25	; 0x11
    279a:	aa 8b       	std	Y+18, r26	; 0x12
    279c:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4a e7       	ldi	r20, 0x7A	; 122
    27a4:	55 e4       	ldi	r21, 0x45	; 69
    27a6:	68 89       	ldd	r22, Y+16	; 0x10
    27a8:	79 89       	ldd	r23, Y+17	; 0x11
    27aa:	8a 89       	ldd	r24, Y+18	; 0x12
    27ac:	9b 89       	ldd	r25, Y+19	; 0x13
    27ae:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8c 8b       	std	Y+20, r24	; 0x14
    27b8:	9d 8b       	std	Y+21, r25	; 0x15
    27ba:	ae 8b       	std	Y+22, r26	; 0x16
    27bc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e8       	ldi	r20, 0x80	; 128
    27c4:	5f e3       	ldi	r21, 0x3F	; 63
    27c6:	6c 89       	ldd	r22, Y+20	; 0x14
    27c8:	7d 89       	ldd	r23, Y+21	; 0x15
    27ca:	8e 89       	ldd	r24, Y+22	; 0x16
    27cc:	9f 89       	ldd	r25, Y+23	; 0x17
    27ce:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
    27d2:	88 23       	and	r24, r24
    27d4:	2c f4       	brge	.+10     	; 0x27e0 <Adc_enuStartConversionSync+0x196>
		__ticks = 1;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	99 8f       	std	Y+25, r25	; 0x19
    27dc:	88 8f       	std	Y+24, r24	; 0x18
    27de:	3f c0       	rjmp	.+126    	; 0x285e <Adc_enuStartConversionSync+0x214>
	else if (__tmp > 65535)
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	3f ef       	ldi	r19, 0xFF	; 255
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	57 e4       	ldi	r21, 0x47	; 71
    27e8:	6c 89       	ldd	r22, Y+20	; 0x14
    27ea:	7d 89       	ldd	r23, Y+21	; 0x15
    27ec:	8e 89       	ldd	r24, Y+22	; 0x16
    27ee:	9f 89       	ldd	r25, Y+23	; 0x17
    27f0:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	4c f5       	brge	.+82     	; 0x284a <Adc_enuStartConversionSync+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e2       	ldi	r20, 0x20	; 32
    27fe:	51 e4       	ldi	r21, 0x41	; 65
    2800:	68 89       	ldd	r22, Y+16	; 0x10
    2802:	79 89       	ldd	r23, Y+17	; 0x11
    2804:	8a 89       	ldd	r24, Y+18	; 0x12
    2806:	9b 89       	ldd	r25, Y+19	; 0x13
    2808:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	99 8f       	std	Y+25, r25	; 0x19
    281e:	88 8f       	std	Y+24, r24	; 0x18
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <Adc_enuStartConversionSync+0x1f6>
    2822:	80 e9       	ldi	r24, 0x90	; 144
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	9b 8f       	std	Y+27, r25	; 0x1b
    2828:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    282a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    282c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <Adc_enuStartConversionSync+0x1e4>
    2832:	9b 8f       	std	Y+27, r25	; 0x1b
    2834:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	88 8d       	ldd	r24, Y+24	; 0x18
    2838:	99 8d       	ldd	r25, Y+25	; 0x19
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	99 8f       	std	Y+25, r25	; 0x19
    283e:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2840:	88 8d       	ldd	r24, Y+24	; 0x18
    2842:	99 8d       	ldd	r25, Y+25	; 0x19
    2844:	89 2b       	or	r24, r25
    2846:	69 f7       	brne	.-38     	; 0x2822 <Adc_enuStartConversionSync+0x1d8>
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <Adc_enuStartConversionSync+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284a:	6c 89       	ldd	r22, Y+20	; 0x14
    284c:	7d 89       	ldd	r23, Y+21	; 0x15
    284e:	8e 89       	ldd	r24, Y+22	; 0x16
    2850:	9f 89       	ldd	r25, Y+23	; 0x17
    2852:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	99 8f       	std	Y+25, r25	; 0x19
    285c:	88 8f       	std	Y+24, r24	; 0x18
    285e:	88 8d       	ldd	r24, Y+24	; 0x18
    2860:	99 8d       	ldd	r25, Y+25	; 0x19
    2862:	9d 8f       	std	Y+29, r25	; 0x1d
    2864:	8c 8f       	std	Y+28, r24	; 0x1c
    2866:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2868:	9d 8d       	ldd	r25, Y+29	; 0x1d
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <Adc_enuStartConversionSync+0x220>
    286e:	9d 8f       	std	Y+29, r25	; 0x1d
    2870:	8c 8f       	std	Y+28, r24	; 0x1c
    2872:	2a c0       	rjmp	.+84     	; 0x28c8 <Adc_enuStartConversionSync+0x27e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	4f e7       	ldi	r20, 0x7F	; 127
    287a:	53 e4       	ldi	r21, 0x43	; 67
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    2888:	18 16       	cp	r1, r24
    288a:	ac f4       	brge	.+42     	; 0x28b6 <Adc_enuStartConversionSync+0x26c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9f 8f       	std	Y+31, r25	; 0x1f
    289e:	8e 8f       	std	Y+30, r24	; 0x1e
    28a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28a4:	99 a3       	std	Y+33, r25	; 0x21
    28a6:	88 a3       	std	Y+32, r24	; 0x20
    28a8:	88 a1       	ldd	r24, Y+32	; 0x20
    28aa:	99 a1       	ldd	r25, Y+33	; 0x21
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <Adc_enuStartConversionSync+0x262>
    28b0:	99 a3       	std	Y+33, r25	; 0x21
    28b2:	88 a3       	std	Y+32, r24	; 0x20
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <Adc_enuStartConversionSync+0x28a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28b6:	6f 81       	ldd	r22, Y+7	; 0x07
    28b8:	78 85       	ldd	r23, Y+8	; 0x08
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28be:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	8f 87       	std	Y+15, r24	; 0x0f
    28c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ca:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28cc:	8a a1       	ldd	r24, Y+34	; 0x22
    28ce:	8a 95       	dec	r24
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <Adc_enuStartConversionSync+0x284>
    28d2:	8a a3       	std	Y+34, r24	; 0x22
	            _delay_us(10);

	            Loc_enuAdcStatus &= Adc_GetResult(Address_Adc->result_format ,Address_ResultDigitalVoltage);
    28d4:	8b a1       	ldd	r24, Y+35	; 0x23
    28d6:	9c a1       	ldd	r25, Y+36	; 0x24
    28d8:	fc 01       	movw	r30, r24
    28da:	22 81       	ldd	r18, Z+2	; 0x02
    28dc:	8d a1       	ldd	r24, Y+37	; 0x25
    28de:	9e a1       	ldd	r25, Y+38	; 0x26
    28e0:	bc 01       	movw	r22, r24
    28e2:	82 2f       	mov	r24, r18
    28e4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Adc_GetResult>
    28e8:	98 2f       	mov	r25, r24
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	89 23       	and	r24, r25
    28ee:	89 83       	std	Y+1, r24	; 0x01

	            /* Return Status Of The Adc Interrupt*/
	            Adc_ClearInterruptFlag();
    28f0:	86 e2       	ldi	r24, 0x26	; 38
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	26 e2       	ldi	r18, 0x26	; 38
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	f9 01       	movw	r30, r18
    28fa:	20 81       	ld	r18, Z
    28fc:	20 61       	ori	r18, 0x10	; 16
    28fe:	fc 01       	movw	r30, r24
    2900:	20 83       	st	Z, r18
	            Adc_SetInterruptEnable(Loc_u8AdcInterruptStatus);
    2902:	86 e2       	ldi	r24, 0x26	; 38
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	26 e2       	ldi	r18, 0x26	; 38
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	f9 01       	movw	r30, r18
    290c:	20 81       	ld	r18, Z
    290e:	42 2f       	mov	r20, r18
    2910:	47 7f       	andi	r20, 0xF7	; 247
    2912:	2a 81       	ldd	r18, Y+2	; 0x02
    2914:	22 2f       	mov	r18, r18
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	22 0f       	add	r18, r18
    291a:	33 1f       	adc	r19, r19
    291c:	22 0f       	add	r18, r18
    291e:	33 1f       	adc	r19, r19
    2920:	22 0f       	add	r18, r18
    2922:	33 1f       	adc	r19, r19
    2924:	24 2b       	or	r18, r20
    2926:	fc 01       	movw	r30, r24
    2928:	20 83       	st	Z, r18
	        }

	    return Loc_enuAdcStatus;
    292a:	89 81       	ldd	r24, Y+1	; 0x01
}
    292c:	a6 96       	adiw	r28, 0x26	; 38
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	08 95       	ret

0000293e <Adc_ConvertResultToVoltage>:



Adc_StatusErrorType Adc_ConvertResultToVoltage( u16 Copy_u16DigitalValue, f32* Address_ResultAnalogVoltage){
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	00 d0       	rcall	.+0      	; 0x2944 <Adc_ConvertResultToVoltage+0x6>
    2944:	00 d0       	rcall	.+0      	; 0x2946 <Adc_ConvertResultToVoltage+0x8>
    2946:	1f 92       	push	r1
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	9b 83       	std	Y+3, r25	; 0x03
    294e:	8a 83       	std	Y+2, r24	; 0x02
    2950:	7d 83       	std	Y+5, r23	; 0x05
    2952:	6c 83       	std	Y+4, r22	; 0x04

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_ResultAnalogVoltage){
    2958:	8c 81       	ldd	r24, Y+4	; 0x04
    295a:	9d 81       	ldd	r25, Y+5	; 0x05
    295c:	89 2b       	or	r24, r25
    295e:	19 f4       	brne	.+6      	; 0x2966 <Adc_ConvertResultToVoltage+0x28>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    2960:	82 e0       	ldi	r24, 0x02	; 2
    2962:	89 83       	std	Y+1, r24	; 0x01
    2964:	1c c0       	rjmp	.+56     	; 0x299e <Adc_ConvertResultToVoltage+0x60>
	    }
	    else{
	           /* Vanalog = Vdigital * step    */
	           /* Step Size = (Vmax-Vmin)/2^n      */
	           *Address_ResultAnalogVoltage = Copy_u16DigitalValue*0.004883F;
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	9b 81       	ldd	r25, Y+3	; 0x03
    296a:	cc 01       	movw	r24, r24
    296c:	a0 e0       	ldi	r26, 0x00	; 0
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__floatunsisf>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	23 e9       	ldi	r18, 0x93	; 147
    297e:	31 e0       	ldi	r19, 0x01	; 1
    2980:	40 ea       	ldi	r20, 0xA0	; 160
    2982:	5b e3       	ldi	r21, 0x3B	; 59
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	2c 81       	ldd	r18, Y+4	; 0x04
    2992:	3d 81       	ldd	r19, Y+5	; 0x05
    2994:	f9 01       	movw	r30, r18
    2996:	80 83       	st	Z, r24
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	a2 83       	std	Z+2, r26	; 0x02
    299c:	b3 83       	std	Z+3, r27	; 0x03
	       }

	    return Loc_enuAdcStatus;
    299e:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	08 95       	ret

000029b0 <Adc_StartConversionAsync>:


Adc_StatusErrorType Adc_StartConversionAsync(const Adc_PinConfigType* Address_Adc){
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <Adc_StartConversionAsync+0x6>
    29b6:	1f 92       	push	r1
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	9b 83       	std	Y+3, r25	; 0x03
    29be:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	9b 81       	ldd	r25, Y+3	; 0x03
    29c8:	89 2b       	or	r24, r25
    29ca:	19 f4       	brne	.+6      	; 0x29d2 <Adc_StartConversionAsync+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    29cc:	82 e0       	ldi	r24, 0x02	; 2
    29ce:	89 83       	std	Y+1, r24	; 0x01
    29d0:	34 c0       	rjmp	.+104    	; 0x2a3a <Adc_StartConversionAsync+0x8a>
	    }
	    else{
	    	 /* You can't start A new Conversion Unless The old One Is Done*/
	    	        while( ZERO_VALUE == Adc_IsConversionCompleted() );
    29d2:	00 00       	nop
    29d4:	86 e2       	ldi	r24, 0x26	; 38
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	fc 01       	movw	r30, r24
    29da:	80 81       	ld	r24, Z
    29dc:	82 95       	swap	r24
    29de:	86 95       	lsr	r24
    29e0:	86 95       	lsr	r24
    29e2:	83 70       	andi	r24, 0x03	; 3
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	81 70       	andi	r24, 0x01	; 1
    29ea:	99 27       	eor	r25, r25
    29ec:	89 2b       	or	r24, r25
    29ee:	91 f7       	brne	.-28     	; 0x29d4 <Adc_StartConversionAsync+0x24>

	    	        Global_AdcInterruptIndex = (u8)Address_Adc->channel_number;
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	fc 01       	movw	r30, r24
    29f6:	80 81       	ld	r24, Z
    29f8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Global_AdcInterruptIndex>
	    	        current_format = Address_Adc->result_format;
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2a00:	fc 01       	movw	r30, r24
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <current_format>
	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    2a08:	87 e2       	ldi	r24, 0x27	; 39
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	27 e2       	ldi	r18, 0x27	; 39
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	f9 01       	movw	r30, r18
    2a12:	20 81       	ld	r18, Z
    2a14:	42 2f       	mov	r20, r18
    2a16:	48 7f       	andi	r20, 0xF8	; 248
    2a18:	2a 81       	ldd	r18, Y+2	; 0x02
    2a1a:	3b 81       	ldd	r19, Y+3	; 0x03
    2a1c:	f9 01       	movw	r30, r18
    2a1e:	20 81       	ld	r18, Z
    2a20:	27 70       	andi	r18, 0x07	; 7
    2a22:	24 2b       	or	r18, r20
    2a24:	fc 01       	movw	r30, r24
    2a26:	20 83       	st	Z, r18


	    	        /* Start Conversion  */
	    	        Adc_StartConversion();
    2a28:	86 e2       	ldi	r24, 0x26	; 38
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	26 e2       	ldi	r18, 0x26	; 38
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	f9 01       	movw	r30, r18
    2a32:	20 81       	ld	r18, Z
    2a34:	20 64       	ori	r18, 0x40	; 64
    2a36:	fc 01       	movw	r30, r24
    2a38:	20 83       	st	Z, r18
	    }

	    return Loc_enuAdcStatus;
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	08 95       	ret

00002a48 <Adc_enuEnableInterrupt>:


Adc_StatusErrorType Adc_enuEnableInterrupt(void){
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	1f 92       	push	r1
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	89 83       	std	Y+1, r24	; 0x01
	Adc_EnableInterrupt();
    2a56:	86 e2       	ldi	r24, 0x26	; 38
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	26 e2       	ldi	r18, 0x26	; 38
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	f9 01       	movw	r30, r18
    2a60:	20 81       	ld	r18, Z
    2a62:	28 60       	ori	r18, 0x08	; 8
    2a64:	fc 01       	movw	r30, r24
    2a66:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a6a:	0f 90       	pop	r0
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	08 95       	ret

00002a72 <Adc_enuDisableInterrupt>:


Adc_StatusErrorType Adc_enuDisableInterrupt(void){
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	1f 92       	push	r1
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	89 83       	std	Y+1, r24	; 0x01
	Adc_DisableInterrupt();
    2a80:	86 e2       	ldi	r24, 0x26	; 38
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	26 e2       	ldi	r18, 0x26	; 38
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	f9 01       	movw	r30, r18
    2a8a:	20 81       	ld	r18, Z
    2a8c:	27 7f       	andi	r18, 0xF7	; 247
    2a8e:	fc 01       	movw	r30, r24
    2a90:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a94:	0f 90       	pop	r0
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	08 95       	ret

00002a9c <Adc_GetResult>:




////////////////////////////////////////////////Helpers Functions ///////////////////////////
static Adc_StatusErrorType Adc_GetResult(const Adc_ResultFormartType Copy_enuResultFormat, u16* Address_Result){
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <Adc_GetResult+0x6>
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <Adc_GetResult+0x8>
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	8a 83       	std	Y+2, r24	; 0x02
    2aaa:	7c 83       	std	Y+4, r23	; 0x04
    2aac:	6b 83       	std	Y+3, r22	; 0x03

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Result){
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab6:	89 2b       	or	r24, r25
    2ab8:	19 f4       	brne	.+6      	; 0x2ac0 <Adc_GetResult+0x24>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    2aba:	82 e0       	ldi	r24, 0x02	; 2
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	30 c0       	rjmp	.+96     	; 0x2b20 <Adc_GetResult+0x84>
	    }

	    	else{
	    	        switch(Copy_enuResultFormat){
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	88 2f       	mov	r24, r24
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	89 2b       	or	r24, r25
    2ac8:	b9 f4       	brne	.+46     	; 0x2af8 <Adc_GetResult+0x5c>

	    	        case ADC_RIGHT_JUSTIFIED:



	    	                *Address_Result = (ADCL) | (ADCH <<8) ;
    2aca:	84 e2       	ldi	r24, 0x24	; 36
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	fc 01       	movw	r30, r24
    2ad0:	80 81       	ld	r24, Z
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	85 e2       	ldi	r24, 0x25	; 37
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	fc 01       	movw	r30, r24
    2adc:	80 81       	ld	r24, Z
    2ade:	88 2f       	mov	r24, r24
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	98 2f       	mov	r25, r24
    2ae4:	88 27       	eor	r24, r24
    2ae6:	82 2b       	or	r24, r18
    2ae8:	93 2b       	or	r25, r19
    2aea:	9c 01       	movw	r18, r24
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	9c 81       	ldd	r25, Y+4	; 0x04
    2af0:	fc 01       	movw	r30, r24
    2af2:	31 83       	std	Z+1, r19	; 0x01
    2af4:	20 83       	st	Z, r18
	    	                break;
    2af6:	14 c0       	rjmp	.+40     	; 0x2b20 <Adc_GetResult+0x84>

	    	            default:
	    	            	*Address_Result = (ADCHL>>6) & 0x3FF;
    2af8:	84 e2       	ldi	r24, 0x24	; 36
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	fc 01       	movw	r30, r24
    2afe:	80 81       	ld	r24, Z
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	9c 01       	movw	r18, r24
    2b04:	00 24       	eor	r0, r0
    2b06:	22 0f       	add	r18, r18
    2b08:	33 1f       	adc	r19, r19
    2b0a:	00 1c       	adc	r0, r0
    2b0c:	22 0f       	add	r18, r18
    2b0e:	33 1f       	adc	r19, r19
    2b10:	00 1c       	adc	r0, r0
    2b12:	23 2f       	mov	r18, r19
    2b14:	30 2d       	mov	r19, r0
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	31 83       	std	Z+1, r19	; 0x01
    2b1e:	20 83       	st	Z, r18

	    	        }
	    	    }


	    return Loc_enuAdcStatus;
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	08 95       	ret

00002b30 <Adc_SetCallbackFunction>:

Adc_StatusErrorType Adc_SetCallbackFunction(const Adc_PinConfigType* Address_Adc, void (*callback)(u16)){
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <Adc_SetCallbackFunction+0x6>
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <Adc_SetCallbackFunction+0x8>
    2b38:	1f 92       	push	r1
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	9b 83       	std	Y+3, r25	; 0x03
    2b40:	8a 83       	std	Y+2, r24	; 0x02
    2b42:	7d 83       	std	Y+5, r23	; 0x05
    2b44:	6c 83       	std	Y+4, r22	; 0x04
	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	89 83       	std	Y+1, r24	; 0x01
		    if(NULL == Address_Adc){
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4e:	89 2b       	or	r24, r25
    2b50:	19 f4       	brne	.+6      	; 0x2b58 <Adc_SetCallbackFunction+0x28>
		    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    2b52:	82 e0       	ldi	r24, 0x02	; 2
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <Adc_SetCallbackFunction+0x46>
		    }
		    else{
		    	Adc_InterruptHandlerArr[Address_Adc->channel_number] = callback;
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	80 81       	ld	r24, Z
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	81 5f       	subi	r24, 0xF1	; 241
    2b6a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b70:	fc 01       	movw	r30, r24
    2b72:	31 83       	std	Z+1, r19	; 0x01
    2b74:	20 83       	st	Z, r18
		    }
		    return Loc_enuAdcStatus;
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	08 95       	ret

00002b88 <__vector_16>:

// ISR function For ADC
void __vector_16(void) __attribute__((signal));

void __vector_16(void){
    2b88:	1f 92       	push	r1
    2b8a:	0f 92       	push	r0
    2b8c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2b90:	0f 92       	push	r0
    2b92:	11 24       	eor	r1, r1
    2b94:	2f 93       	push	r18
    2b96:	3f 93       	push	r19
    2b98:	4f 93       	push	r20
    2b9a:	5f 93       	push	r21
    2b9c:	6f 93       	push	r22
    2b9e:	7f 93       	push	r23
    2ba0:	8f 93       	push	r24
    2ba2:	9f 93       	push	r25
    2ba4:	af 93       	push	r26
    2ba6:	bf 93       	push	r27
    2ba8:	ef 93       	push	r30
    2baa:	ff 93       	push	r31
    2bac:	cf 93       	push	r28
    2bae:	df 93       	push	r29
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <__vector_16+0x2a>
    2bb2:	1f 92       	push	r1
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62

	    u16 Loc_u16Result;
	    Adc_StatusErrorType Loc_enuAdcStatus  = ADC_STATUS_OK;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	89 83       	std	Y+1, r24	; 0x01

	    Loc_enuAdcStatus = Adc_GetResult(current_format,&Loc_u16Result);
    2bbc:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <current_format>
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	02 96       	adiw	r24, 0x02	; 2
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	82 2f       	mov	r24, r18
    2bc8:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Adc_GetResult>
    2bcc:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL != Adc_InterruptHandlerArr[Global_AdcInterruptIndex]){
    2bce:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Global_AdcInterruptIndex>
    2bd2:	88 2f       	mov	r24, r24
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	81 5f       	subi	r24, 0xF1	; 241
    2bdc:	9e 4f       	sbci	r25, 0xFE	; 254
    2bde:	fc 01       	movw	r30, r24
    2be0:	80 81       	ld	r24, Z
    2be2:	91 81       	ldd	r25, Z+1	; 0x01
    2be4:	89 2b       	or	r24, r25
    2be6:	79 f0       	breq	.+30     	; 0x2c06 <__vector_16+0x7e>
	        Adc_InterruptHandlerArr[Global_AdcInterruptIndex](Loc_u16Result);
    2be8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Global_AdcInterruptIndex>
    2bec:	88 2f       	mov	r24, r24
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	81 5f       	subi	r24, 0xF1	; 241
    2bf6:	9e 4f       	sbci	r25, 0xFE	; 254
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	20 81       	ld	r18, Z
    2bfc:	31 81       	ldd	r19, Z+1	; 0x01
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	f9 01       	movw	r30, r18
    2c04:	09 95       	icall
	    }
	    else {/* do nothing , error in declaration */ }

}
    2c06:	00 00       	nop
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	ff 91       	pop	r31
    2c14:	ef 91       	pop	r30
    2c16:	bf 91       	pop	r27
    2c18:	af 91       	pop	r26
    2c1a:	9f 91       	pop	r25
    2c1c:	8f 91       	pop	r24
    2c1e:	7f 91       	pop	r23
    2c20:	6f 91       	pop	r22
    2c22:	5f 91       	pop	r21
    2c24:	4f 91       	pop	r20
    2c26:	3f 91       	pop	r19
    2c28:	2f 91       	pop	r18
    2c2a:	0f 90       	pop	r0
    2c2c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2c30:	0f 90       	pop	r0
    2c32:	1f 90       	pop	r1
    2c34:	18 95       	reti

00002c36 <Seven_Segment_WriteBCDConnection>:



/********************************** Software Interfaces Declarations *******************/

Seven_Segment_StatusErrorType  Seven_Segment_WriteBCDConnection(const Seven_Segment_BCDType* Address_Segment, u8 Copy_u8Value){
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	27 97       	sbiw	r28, 0x07	; 7
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	9e 83       	std	Y+6, r25	; 0x06
    2c4c:	8d 83       	std	Y+5, r24	; 0x05
    2c4e:	6f 83       	std	Y+7, r22	; 0x07

	Seven_Segment_StatusErrorType Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_OK;
    2c50:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    2c52:	1b 82       	std	Y+3, r1	; 0x03
	    u8 Loc_u8FinalBit = DIO_LOW;
    2c54:	1c 82       	std	Y+4, r1	; 0x04
	    u8 Loc_u8Counter=ZERO_VALUE;
    2c56:	1a 82       	std	Y+2, r1	; 0x02

	    if (NULL == Address_Segment  ){
    2c58:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5c:	89 2b       	or	r24, r25
    2c5e:	19 f4       	brne	.+6      	; 0x2c66 <Seven_Segment_WriteBCDConnection+0x30>

	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	22 c0       	rjmp	.+68     	; 0x2caa <Seven_Segment_WriteBCDConnection+0x74>
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    2c66:	1a 82       	std	Y+2, r1	; 0x02
    2c68:	1d c0       	rjmp	.+58     	; 0x2ca4 <Seven_Segment_WriteBCDConnection+0x6e>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
    2c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	2a 81       	ldd	r18, Y+2	; 0x02
    2c72:	22 2f       	mov	r18, r18
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <Seven_Segment_WriteBCDConnection+0x46>
    2c78:	95 95       	asr	r25
    2c7a:	87 95       	ror	r24
    2c7c:	2a 95       	dec	r18
    2c7e:	e2 f7       	brpl	.-8      	; 0x2c78 <Seven_Segment_WriteBCDConnection+0x42>
    2c80:	81 70       	andi	r24, 0x01	; 1
    2c82:	8c 83       	std	Y+4, r24	; 0x04
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	88 2f       	mov	r24, r24
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c8c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c8e:	82 0f       	add	r24, r18
    2c90:	93 1f       	adc	r25, r19
    2c92:	fc 01       	movw	r30, r24
    2c94:	80 81       	ld	r24, Z
    2c96:	6c 81       	ldd	r22, Y+4	; 0x04
    2c98:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    2c9c:	8b 83       	std	Y+3, r24	; 0x03
	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	8f 5f       	subi	r24, 0xFF	; 255
    2ca2:	8a 83       	std	Y+2, r24	; 0x02
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	84 30       	cpi	r24, 0x04	; 4
    2ca8:	00 f3       	brcs	.-64     	; 0x2c6a <Seven_Segment_WriteBCDConnection+0x34>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
	        }
	    }

	    return Loc_enuSegmentState;
    2caa:	89 81       	ldd	r24, Y+1	; 0x01

}
    2cac:	27 96       	adiw	r28, 0x07	; 7
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	df 91       	pop	r29
    2cba:	cf 91       	pop	r28
    2cbc:	08 95       	ret

00002cbe <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	ef 97       	sbiw	r28, 0x3f	; 63
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	9f af       	std	Y+63, r25	; 0x3f
    2cd4:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    2cd6:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
    2cd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cda:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cdc:	89 2b       	or	r24, r25
    2cde:	19 f4       	brne	.+6      	; 0x2ce6 <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	0f c2       	rjmp	.+1054   	; 0x3104 <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    2ce6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ce8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cea:	68 e3       	ldi	r22, 0x38	; 56
    2cec:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	a0 ea       	ldi	r26, 0xA0	; 160
    2cf8:	b0 e4       	ldi	r27, 0x40	; 64
    2cfa:	8a 83       	std	Y+2, r24	; 0x02
    2cfc:	9b 83       	std	Y+3, r25	; 0x03
    2cfe:	ac 83       	std	Y+4, r26	; 0x04
    2d00:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	4a e7       	ldi	r20, 0x7A	; 122
    2d08:	55 e4       	ldi	r21, 0x45	; 69
    2d0a:	6a 81       	ldd	r22, Y+2	; 0x02
    2d0c:	7b 81       	ldd	r23, Y+3	; 0x03
    2d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d10:	9d 81       	ldd	r25, Y+5	; 0x05
    2d12:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	8c ab       	std	Y+52, r24	; 0x34
    2d1c:	9d ab       	std	Y+53, r25	; 0x35
    2d1e:	ae ab       	std	Y+54, r26	; 0x36
    2d20:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e8       	ldi	r20, 0x80	; 128
    2d28:	5f e3       	ldi	r21, 0x3F	; 63
    2d2a:	6c a9       	ldd	r22, Y+52	; 0x34
    2d2c:	7d a9       	ldd	r23, Y+53	; 0x35
    2d2e:	8e a9       	ldd	r24, Y+54	; 0x36
    2d30:	9f a9       	ldd	r25, Y+55	; 0x37
    2d32:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
    2d36:	88 23       	and	r24, r24
    2d38:	2c f4       	brge	.+10     	; 0x2d44 <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	99 af       	std	Y+57, r25	; 0x39
    2d40:	88 af       	std	Y+56, r24	; 0x38
    2d42:	3f c0       	rjmp	.+126    	; 0x2dc2 <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	6c a9       	ldd	r22, Y+52	; 0x34
    2d4e:	7d a9       	ldd	r23, Y+53	; 0x35
    2d50:	8e a9       	ldd	r24, Y+54	; 0x36
    2d52:	9f a9       	ldd	r25, Y+55	; 0x37
    2d54:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    2d58:	18 16       	cp	r1, r24
    2d5a:	4c f5       	brge	.+82     	; 0x2dae <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	6a 81       	ldd	r22, Y+2	; 0x02
    2d66:	7b 81       	ldd	r23, Y+3	; 0x03
    2d68:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6c:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	99 af       	std	Y+57, r25	; 0x39
    2d82:	88 af       	std	Y+56, r24	; 0x38
    2d84:	0f c0       	rjmp	.+30     	; 0x2da4 <Lcd_4bit_enuInit+0xe6>
    2d86:	80 e9       	ldi	r24, 0x90	; 144
    2d88:	91 e0       	ldi	r25, 0x01	; 1
    2d8a:	9b af       	std	Y+59, r25	; 0x3b
    2d8c:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d8e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2d90:	9b ad       	ldd	r25, Y+59	; 0x3b
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <Lcd_4bit_enuInit+0xd4>
    2d96:	9b af       	std	Y+59, r25	; 0x3b
    2d98:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9a:	88 ad       	ldd	r24, Y+56	; 0x38
    2d9c:	99 ad       	ldd	r25, Y+57	; 0x39
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	99 af       	std	Y+57, r25	; 0x39
    2da2:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da4:	88 ad       	ldd	r24, Y+56	; 0x38
    2da6:	99 ad       	ldd	r25, Y+57	; 0x39
    2da8:	89 2b       	or	r24, r25
    2daa:	69 f7       	brne	.-38     	; 0x2d86 <Lcd_4bit_enuInit+0xc8>
    2dac:	14 c0       	rjmp	.+40     	; 0x2dd6 <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dae:	6c a9       	ldd	r22, Y+52	; 0x34
    2db0:	7d a9       	ldd	r23, Y+53	; 0x35
    2db2:	8e a9       	ldd	r24, Y+54	; 0x36
    2db4:	9f a9       	ldd	r25, Y+55	; 0x37
    2db6:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	99 af       	std	Y+57, r25	; 0x39
    2dc0:	88 af       	std	Y+56, r24	; 0x38
    2dc2:	88 ad       	ldd	r24, Y+56	; 0x38
    2dc4:	99 ad       	ldd	r25, Y+57	; 0x39
    2dc6:	9d af       	std	Y+61, r25	; 0x3d
    2dc8:	8c af       	std	Y+60, r24	; 0x3c
    2dca:	8c ad       	ldd	r24, Y+60	; 0x3c
    2dcc:	9d ad       	ldd	r25, Y+61	; 0x3d
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <Lcd_4bit_enuInit+0x110>
    2dd2:	9d af       	std	Y+61, r25	; 0x3d
    2dd4:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    2dd6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dd8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dda:	68 e3       	ldi	r22, 0x38	; 56
    2ddc:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	a6 e1       	ldi	r26, 0x16	; 22
    2de8:	b3 e4       	ldi	r27, 0x43	; 67
    2dea:	8e 83       	std	Y+6, r24	; 0x06
    2dec:	9f 83       	std	Y+7, r25	; 0x07
    2dee:	a8 87       	std	Y+8, r26	; 0x08
    2df0:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2df2:	2b ea       	ldi	r18, 0xAB	; 171
    2df4:	3a ea       	ldi	r19, 0xAA	; 170
    2df6:	4a ea       	ldi	r20, 0xAA	; 170
    2df8:	50 e4       	ldi	r21, 0x40	; 64
    2dfa:	6e 81       	ldd	r22, Y+6	; 0x06
    2dfc:	7f 81       	ldd	r23, Y+7	; 0x07
    2dfe:	88 85       	ldd	r24, Y+8	; 0x08
    2e00:	99 85       	ldd	r25, Y+9	; 0x09
    2e02:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	88 8f       	std	Y+24, r24	; 0x18
    2e0c:	99 8f       	std	Y+25, r25	; 0x19
    2e0e:	aa 8f       	std	Y+26, r26	; 0x1a
    2e10:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e8       	ldi	r20, 0x80	; 128
    2e18:	50 e4       	ldi	r21, 0x40	; 64
    2e1a:	6e 81       	ldd	r22, Y+6	; 0x06
    2e1c:	7f 81       	ldd	r23, Y+7	; 0x07
    2e1e:	88 85       	ldd	r24, Y+8	; 0x08
    2e20:	99 85       	ldd	r25, Y+9	; 0x09
    2e22:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	8c 8f       	std	Y+28, r24	; 0x1c
    2e2c:	9d 8f       	std	Y+29, r25	; 0x1d
    2e2e:	ae 8f       	std	Y+30, r26	; 0x1e
    2e30:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e8       	ldi	r20, 0x80	; 128
    2e38:	5f e3       	ldi	r21, 0x3F	; 63
    2e3a:	68 8d       	ldd	r22, Y+24	; 0x18
    2e3c:	79 8d       	ldd	r23, Y+25	; 0x19
    2e3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e42:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
    2e46:	88 23       	and	r24, r24
    2e48:	1c f4       	brge	.+6      	; 0x2e50 <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	88 a3       	std	Y+32, r24	; 0x20
    2e4e:	b2 c0       	rjmp	.+356    	; 0x2fb4 <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	3f ef       	ldi	r19, 0xFF	; 255
    2e54:	4f e7       	ldi	r20, 0x7F	; 127
    2e56:	57 e4       	ldi	r21, 0x47	; 71
    2e58:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2e5a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2e5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e5e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e60:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    2e64:	18 16       	cp	r1, r24
    2e66:	0c f0       	brlt	.+2      	; 0x2e6a <Lcd_4bit_enuInit+0x1ac>
    2e68:	7b c0       	rjmp	.+246    	; 0x2f60 <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	4a e7       	ldi	r20, 0x7A	; 122
    2e70:	54 e4       	ldi	r21, 0x44	; 68
    2e72:	6e 81       	ldd	r22, Y+6	; 0x06
    2e74:	7f 81       	ldd	r23, Y+7	; 0x07
    2e76:	88 85       	ldd	r24, Y+8	; 0x08
    2e78:	99 85       	ldd	r25, Y+9	; 0x09
    2e7a:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__divsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	89 a3       	std	Y+33, r24	; 0x21
    2e84:	9a a3       	std	Y+34, r25	; 0x22
    2e86:	ab a3       	std	Y+35, r26	; 0x23
    2e88:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	4a e7       	ldi	r20, 0x7A	; 122
    2e90:	55 e4       	ldi	r21, 0x45	; 69
    2e92:	69 a1       	ldd	r22, Y+33	; 0x21
    2e94:	7a a1       	ldd	r23, Y+34	; 0x22
    2e96:	8b a1       	ldd	r24, Y+35	; 0x23
    2e98:	9c a1       	ldd	r25, Y+36	; 0x24
    2e9a:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8d a3       	std	Y+37, r24	; 0x25
    2ea4:	9e a3       	std	Y+38, r25	; 0x26
    2ea6:	af a3       	std	Y+39, r26	; 0x27
    2ea8:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e8       	ldi	r20, 0x80	; 128
    2eb0:	5f e3       	ldi	r21, 0x3F	; 63
    2eb2:	6d a1       	ldd	r22, Y+37	; 0x25
    2eb4:	7e a1       	ldd	r23, Y+38	; 0x26
    2eb6:	8f a1       	ldd	r24, Y+39	; 0x27
    2eb8:	98 a5       	ldd	r25, Y+40	; 0x28
    2eba:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9a a7       	std	Y+42, r25	; 0x2a
    2ec8:	89 a7       	std	Y+41, r24	; 0x29
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f e7       	ldi	r20, 0x7F	; 127
    2ed2:	57 e4       	ldi	r21, 0x47	; 71
    2ed4:	6d a1       	ldd	r22, Y+37	; 0x25
    2ed6:	7e a1       	ldd	r23, Y+38	; 0x26
    2ed8:	8f a1       	ldd	r24, Y+39	; 0x27
    2eda:	98 a5       	ldd	r25, Y+40	; 0x28
    2edc:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e2       	ldi	r20, 0x20	; 32
    2eea:	51 e4       	ldi	r21, 0x41	; 65
    2eec:	69 a1       	ldd	r22, Y+33	; 0x21
    2eee:	7a a1       	ldd	r23, Y+34	; 0x22
    2ef0:	8b a1       	ldd	r24, Y+35	; 0x23
    2ef2:	9c a1       	ldd	r25, Y+36	; 0x24
    2ef4:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9a a7       	std	Y+42, r25	; 0x2a
    2f0a:	89 a7       	std	Y+41, r24	; 0x29
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <Lcd_4bit_enuInit+0x26e>
    2f0e:	80 e9       	ldi	r24, 0x90	; 144
    2f10:	91 e0       	ldi	r25, 0x01	; 1
    2f12:	9c a7       	std	Y+44, r25	; 0x2c
    2f14:	8b a7       	std	Y+43, r24	; 0x2b
    2f16:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f18:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <Lcd_4bit_enuInit+0x25c>
    2f1e:	9c a7       	std	Y+44, r25	; 0x2c
    2f20:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	89 a5       	ldd	r24, Y+41	; 0x29
    2f24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	9a a7       	std	Y+42, r25	; 0x2a
    2f2a:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f30:	89 2b       	or	r24, r25
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <Lcd_4bit_enuInit+0x250>
    2f34:	3f c0       	rjmp	.+126    	; 0x2fb4 <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f36:	6d a1       	ldd	r22, Y+37	; 0x25
    2f38:	7e a1       	ldd	r23, Y+38	; 0x26
    2f3a:	8f a1       	ldd	r24, Y+39	; 0x27
    2f3c:	98 a5       	ldd	r25, Y+40	; 0x28
    2f3e:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9a a7       	std	Y+42, r25	; 0x2a
    2f48:	89 a7       	std	Y+41, r24	; 0x29
    2f4a:	89 a5       	ldd	r24, Y+41	; 0x29
    2f4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f4e:	9e a7       	std	Y+46, r25	; 0x2e
    2f50:	8d a7       	std	Y+45, r24	; 0x2d
    2f52:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f54:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <Lcd_4bit_enuInit+0x298>
    2f5a:	9e a7       	std	Y+46, r25	; 0x2e
    2f5c:	8d a7       	std	Y+45, r24	; 0x2d
    2f5e:	2a c0       	rjmp	.+84     	; 0x2fb4 <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	53 e4       	ldi	r21, 0x43	; 67
    2f68:	68 8d       	ldd	r22, Y+24	; 0x18
    2f6a:	79 8d       	ldd	r23, Y+25	; 0x19
    2f6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f6e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2f70:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    2f74:	18 16       	cp	r1, r24
    2f76:	ac f4       	brge	.+42     	; 0x2fa2 <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2f78:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2f7a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2f7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f80:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	98 ab       	std	Y+48, r25	; 0x30
    2f8a:	8f a7       	std	Y+47, r24	; 0x2f
    2f8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f90:	9a ab       	std	Y+50, r25	; 0x32
    2f92:	89 ab       	std	Y+49, r24	; 0x31
    2f94:	89 a9       	ldd	r24, Y+49	; 0x31
    2f96:	9a a9       	ldd	r25, Y+50	; 0x32
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	f1 f7       	brne	.-4      	; 0x2f98 <Lcd_4bit_enuInit+0x2da>
    2f9c:	9a ab       	std	Y+50, r25	; 0x32
    2f9e:	89 ab       	std	Y+49, r24	; 0x31
    2fa0:	0f c0       	rjmp	.+30     	; 0x2fc0 <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fa2:	68 8d       	ldd	r22, Y+24	; 0x18
    2fa4:	79 8d       	ldd	r23, Y+25	; 0x19
    2fa6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fa8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2faa:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	88 a3       	std	Y+32, r24	; 0x20
    2fb4:	88 a1       	ldd	r24, Y+32	; 0x20
    2fb6:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fb8:	8b a9       	ldd	r24, Y+51	; 0x33
    2fba:	8a 95       	dec	r24
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <Lcd_4bit_enuInit+0x2fc>
    2fbe:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    2fc0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fc4:	68 e3       	ldi	r22, 0x38	; 56
    2fc6:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    2fca:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    2fcc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fce:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fd0:	61 e0       	ldi	r22, 0x01	; 1
    2fd2:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    2fd6:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    2fd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fda:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fdc:	62 e0       	ldi	r22, 0x02	; 2
    2fde:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    2fe2:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    2fe4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2fe6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fe8:	66 e0       	ldi	r22, 0x06	; 6
    2fea:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    2fee:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    2ff0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ff2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ff4:	6c e0       	ldi	r22, 0x0C	; 12
    2ff6:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    2ffa:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    2ffc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ffe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3000:	68 e2       	ldi	r22, 0x28	; 40
    3002:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    3006:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    3008:	8e ad       	ldd	r24, Y+62	; 0x3e
    300a:	9f ad       	ldd	r25, Y+63	; 0x3f
    300c:	60 e8       	ldi	r22, 0x80	; 128
    300e:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    3012:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    3014:	8e ad       	ldd	r24, Y+62	; 0x3e
    3016:	9f ad       	ldd	r25, Y+63	; 0x3f
    3018:	61 e0       	ldi	r22, 0x01	; 1
    301a:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    301e:	89 83       	std	Y+1, r24	; 0x01
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	a0 ea       	ldi	r26, 0xA0	; 160
    3026:	b0 e4       	ldi	r27, 0x40	; 64
    3028:	8a 87       	std	Y+10, r24	; 0x0a
    302a:	9b 87       	std	Y+11, r25	; 0x0b
    302c:	ac 87       	std	Y+12, r26	; 0x0c
    302e:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	4a e7       	ldi	r20, 0x7A	; 122
    3036:	55 e4       	ldi	r21, 0x45	; 69
    3038:	6a 85       	ldd	r22, Y+10	; 0x0a
    303a:	7b 85       	ldd	r23, Y+11	; 0x0b
    303c:	8c 85       	ldd	r24, Y+12	; 0x0c
    303e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3040:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	8e 87       	std	Y+14, r24	; 0x0e
    304a:	9f 87       	std	Y+15, r25	; 0x0f
    304c:	a8 8b       	std	Y+16, r26	; 0x10
    304e:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e8       	ldi	r20, 0x80	; 128
    3056:	5f e3       	ldi	r21, 0x3F	; 63
    3058:	6e 85       	ldd	r22, Y+14	; 0x0e
    305a:	7f 85       	ldd	r23, Y+15	; 0x0f
    305c:	88 89       	ldd	r24, Y+16	; 0x10
    305e:	99 89       	ldd	r25, Y+17	; 0x11
    3060:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
    3064:	88 23       	and	r24, r24
    3066:	2c f4       	brge	.+10     	; 0x3072 <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	9b 8b       	std	Y+19, r25	; 0x13
    306e:	8a 8b       	std	Y+18, r24	; 0x12
    3070:	3f c0       	rjmp	.+126    	; 0x30f0 <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	3f ef       	ldi	r19, 0xFF	; 255
    3076:	4f e7       	ldi	r20, 0x7F	; 127
    3078:	57 e4       	ldi	r21, 0x47	; 71
    307a:	6e 85       	ldd	r22, Y+14	; 0x0e
    307c:	7f 85       	ldd	r23, Y+15	; 0x0f
    307e:	88 89       	ldd	r24, Y+16	; 0x10
    3080:	99 89       	ldd	r25, Y+17	; 0x11
    3082:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    3086:	18 16       	cp	r1, r24
    3088:	4c f5       	brge	.+82     	; 0x30dc <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e2       	ldi	r20, 0x20	; 32
    3090:	51 e4       	ldi	r21, 0x41	; 65
    3092:	6a 85       	ldd	r22, Y+10	; 0x0a
    3094:	7b 85       	ldd	r23, Y+11	; 0x0b
    3096:	8c 85       	ldd	r24, Y+12	; 0x0c
    3098:	9d 85       	ldd	r25, Y+13	; 0x0d
    309a:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	bc 01       	movw	r22, r24
    30a4:	cd 01       	movw	r24, r26
    30a6:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	9b 8b       	std	Y+19, r25	; 0x13
    30b0:	8a 8b       	std	Y+18, r24	; 0x12
    30b2:	0f c0       	rjmp	.+30     	; 0x30d2 <Lcd_4bit_enuInit+0x414>
    30b4:	80 e9       	ldi	r24, 0x90	; 144
    30b6:	91 e0       	ldi	r25, 0x01	; 1
    30b8:	9d 8b       	std	Y+21, r25	; 0x15
    30ba:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30bc:	8c 89       	ldd	r24, Y+20	; 0x14
    30be:	9d 89       	ldd	r25, Y+21	; 0x15
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <Lcd_4bit_enuInit+0x402>
    30c4:	9d 8b       	std	Y+21, r25	; 0x15
    30c6:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c8:	8a 89       	ldd	r24, Y+18	; 0x12
    30ca:	9b 89       	ldd	r25, Y+19	; 0x13
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	9b 8b       	std	Y+19, r25	; 0x13
    30d0:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d2:	8a 89       	ldd	r24, Y+18	; 0x12
    30d4:	9b 89       	ldd	r25, Y+19	; 0x13
    30d6:	89 2b       	or	r24, r25
    30d8:	69 f7       	brne	.-38     	; 0x30b4 <Lcd_4bit_enuInit+0x3f6>
    30da:	14 c0       	rjmp	.+40     	; 0x3104 <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30dc:	6e 85       	ldd	r22, Y+14	; 0x0e
    30de:	7f 85       	ldd	r23, Y+15	; 0x0f
    30e0:	88 89       	ldd	r24, Y+16	; 0x10
    30e2:	99 89       	ldd	r25, Y+17	; 0x11
    30e4:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	9b 8b       	std	Y+19, r25	; 0x13
    30ee:	8a 8b       	std	Y+18, r24	; 0x12
    30f0:	8a 89       	ldd	r24, Y+18	; 0x12
    30f2:	9b 89       	ldd	r25, Y+19	; 0x13
    30f4:	9f 8b       	std	Y+23, r25	; 0x17
    30f6:	8e 8b       	std	Y+22, r24	; 0x16
    30f8:	8e 89       	ldd	r24, Y+22	; 0x16
    30fa:	9f 89       	ldd	r25, Y+23	; 0x17
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <Lcd_4bit_enuInit+0x43e>
    3100:	9f 8b       	std	Y+23, r25	; 0x17
    3102:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    3104:	89 81       	ldd	r24, Y+1	; 0x01

}
    3106:	ef 96       	adiw	r28, 0x3f	; 63
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	08 95       	ret

00003118 <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	00 d0       	rcall	.+0      	; 0x311e <Lcd_4bit_enuSendCommand+0x6>
    311e:	00 d0       	rcall	.+0      	; 0x3120 <Lcd_4bit_enuSendCommand+0x8>
    3120:	1f 92       	push	r1
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    3126:	9c 83       	std	Y+4, r25	; 0x04
    3128:	8b 83       	std	Y+3, r24	; 0x03
    312a:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    312c:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    312e:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	9c 81       	ldd	r25, Y+4	; 0x04
    3134:	89 2b       	or	r24, r25
    3136:	19 f4       	brne	.+6      	; 0x313e <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	89 83       	std	Y+1, r24	; 0x01
    313c:	22 c0       	rjmp	.+68     	; 0x3182 <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	9c 81       	ldd	r25, Y+4	; 0x04
    3142:	fc 01       	movw	r30, r24
    3144:	84 81       	ldd	r24, Z+4	; 0x04
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    314c:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    314e:	8d 81       	ldd	r24, Y+5	; 0x05
    3150:	28 2f       	mov	r18, r24
    3152:	22 95       	swap	r18
    3154:	2f 70       	andi	r18, 0x0F	; 15
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	9c 81       	ldd	r25, Y+4	; 0x04
    315a:	62 2f       	mov	r22, r18
    315c:	0e 94 ab 1b 	call	0x3756	; 0x3756 <Lcd_4bit_enuSet4BitsOnPins>
    3160:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    3162:	8b 81       	ldd	r24, Y+3	; 0x03
    3164:	9c 81       	ldd	r25, Y+4	; 0x04
    3166:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <Lcd_4bit_enuSendEnableSignal>
    316a:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	6d 81       	ldd	r22, Y+5	; 0x05
    3172:	0e 94 ab 1b 	call	0x3756	; 0x3756 <Lcd_4bit_enuSet4BitsOnPins>
    3176:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	9c 81       	ldd	r25, Y+4	; 0x04
    317c:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <Lcd_4bit_enuSendEnableSignal>
    3180:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    3182:	89 81       	ldd	r24, Y+1	; 0x01

}
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	df 91       	pop	r29
    3190:	cf 91       	pop	r28
    3192:	08 95       	ret

00003194 <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    3194:	cf 93       	push	r28
    3196:	df 93       	push	r29
    3198:	00 d0       	rcall	.+0      	; 0x319a <Lcd_4bit_enuDisplayCharacter+0x6>
    319a:	00 d0       	rcall	.+0      	; 0x319c <Lcd_4bit_enuDisplayCharacter+0x8>
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	9b 83       	std	Y+3, r25	; 0x03
    31a2:	8a 83       	std	Y+2, r24	; 0x02
    31a4:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    31a6:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	9b 81       	ldd	r25, Y+3	; 0x03
    31ac:	89 2b       	or	r24, r25
    31ae:	19 f4       	brne	.+6      	; 0x31b6 <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    31b0:	82 e0       	ldi	r24, 0x02	; 2
    31b2:	89 83       	std	Y+1, r24	; 0x01
    31b4:	22 c0       	rjmp	.+68     	; 0x31fa <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ba:	fc 01       	movw	r30, r24
    31bc:	84 81       	ldd	r24, Z+4	; 0x04
    31be:	61 e0       	ldi	r22, 0x01	; 1
    31c0:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    31c4:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    31c6:	8c 81       	ldd	r24, Y+4	; 0x04
    31c8:	28 2f       	mov	r18, r24
    31ca:	22 95       	swap	r18
    31cc:	2f 70       	andi	r18, 0x0F	; 15
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	9b 81       	ldd	r25, Y+3	; 0x03
    31d2:	62 2f       	mov	r22, r18
    31d4:	0e 94 ab 1b 	call	0x3756	; 0x3756 <Lcd_4bit_enuSet4BitsOnPins>
    31d8:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	9b 81       	ldd	r25, Y+3	; 0x03
    31de:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <Lcd_4bit_enuSendEnableSignal>
    31e2:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	9b 81       	ldd	r25, Y+3	; 0x03
    31e8:	6c 81       	ldd	r22, Y+4	; 0x04
    31ea:	0e 94 ab 1b 	call	0x3756	; 0x3756 <Lcd_4bit_enuSet4BitsOnPins>
    31ee:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	9b 81       	ldd	r25, Y+3	; 0x03
    31f4:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <Lcd_4bit_enuSendEnableSignal>
    31f8:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    31fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	08 95       	ret

0000320a <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    320a:	cf 93       	push	r28
    320c:	df 93       	push	r29
    320e:	00 d0       	rcall	.+0      	; 0x3210 <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    3210:	00 d0       	rcall	.+0      	; 0x3212 <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    3212:	00 d0       	rcall	.+0      	; 0x3214 <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	9b 83       	std	Y+3, r25	; 0x03
    321a:	8a 83       	std	Y+2, r24	; 0x02
    321c:	6c 83       	std	Y+4, r22	; 0x04
    321e:	4d 83       	std	Y+5, r20	; 0x05
    3220:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    3222:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	9b 81       	ldd	r25, Y+3	; 0x03
    3228:	89 2b       	or	r24, r25
    322a:	19 f4       	brne	.+6      	; 0x3232 <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    322c:	82 e0       	ldi	r24, 0x02	; 2
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	29 c0       	rjmp	.+82     	; 0x3284 <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	9b 81       	ldd	r25, Y+3	; 0x03
    3236:	4e 81       	ldd	r20, Y+6	; 0x06
    3238:	6d 81       	ldd	r22, Y+5	; 0x05
    323a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <Lcd_4bit_enuGoToXY>
    323e:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	9b 81       	ldd	r25, Y+3	; 0x03
    3244:	fc 01       	movw	r30, r24
    3246:	84 81       	ldd	r24, Z+4	; 0x04
    3248:	61 e0       	ldi	r22, 0x01	; 1
    324a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    324e:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    3250:	8c 81       	ldd	r24, Y+4	; 0x04
    3252:	28 2f       	mov	r18, r24
    3254:	22 95       	swap	r18
    3256:	2f 70       	andi	r18, 0x0F	; 15
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	9b 81       	ldd	r25, Y+3	; 0x03
    325c:	62 2f       	mov	r22, r18
    325e:	0e 94 ab 1b 	call	0x3756	; 0x3756 <Lcd_4bit_enuSet4BitsOnPins>
    3262:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <Lcd_4bit_enuSendEnableSignal>
    326c:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    326e:	8a 81       	ldd	r24, Y+2	; 0x02
    3270:	9b 81       	ldd	r25, Y+3	; 0x03
    3272:	6c 81       	ldd	r22, Y+4	; 0x04
    3274:	0e 94 ab 1b 	call	0x3756	; 0x3756 <Lcd_4bit_enuSet4BitsOnPins>
    3278:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	9b 81       	ldd	r25, Y+3	; 0x03
    327e:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <Lcd_4bit_enuSendEnableSignal>
    3282:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    3284:	89 81       	ldd	r24, Y+1	; 0x01
}
    3286:	26 96       	adiw	r28, 0x06	; 6
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	cd bf       	out	0x3d, r28	; 61
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	08 95       	ret

00003298 <Lcd_4bit_enuDisplayStringWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayStringWithPosition(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String, u8 Copy_u8Row, u8 Copy_u8Col){
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	28 97       	sbiw	r28, 0x08	; 8
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	9c 83       	std	Y+4, r25	; 0x04
    32ae:	8b 83       	std	Y+3, r24	; 0x03
    32b0:	7e 83       	std	Y+6, r23	; 0x06
    32b2:	6d 83       	std	Y+5, r22	; 0x05
    32b4:	4f 83       	std	Y+7, r20	; 0x07
    32b6:	28 87       	std	Y+8, r18	; 0x08

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    32b8:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    32ba:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    32bc:	8b 81       	ldd	r24, Y+3	; 0x03
    32be:	9c 81       	ldd	r25, Y+4	; 0x04
    32c0:	89 2b       	or	r24, r25
    32c2:	21 f0       	breq	.+8      	; 0x32cc <Lcd_4bit_enuDisplayStringWithPosition+0x34>
    32c4:	8d 81       	ldd	r24, Y+5	; 0x05
    32c6:	9e 81       	ldd	r25, Y+6	; 0x06
    32c8:	89 2b       	or	r24, r25
    32ca:	19 f4       	brne	.+6      	; 0x32d2 <Lcd_4bit_enuDisplayStringWithPosition+0x3a>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    32cc:	82 e0       	ldi	r24, 0x02	; 2
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	25 c0       	rjmp	.+74     	; 0x331c <Lcd_4bit_enuDisplayStringWithPosition+0x84>

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    32d2:	8b 81       	ldd	r24, Y+3	; 0x03
    32d4:	9c 81       	ldd	r25, Y+4	; 0x04
    32d6:	48 85       	ldd	r20, Y+8	; 0x08
    32d8:	6f 81       	ldd	r22, Y+7	; 0x07
    32da:	0e 94 ee 19 	call	0x33dc	; 0x33dc <Lcd_4bit_enuGoToXY>
    32de:	89 83       	std	Y+1, r24	; 0x01
			while(Address_pu8String[Loc_u8Counter] !=0){
    32e0:	12 c0       	rjmp	.+36     	; 0x3306 <Lcd_4bit_enuDisplayStringWithPosition+0x6e>
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	2d 81       	ldd	r18, Y+5	; 0x05
    32ea:	3e 81       	ldd	r19, Y+6	; 0x06
    32ec:	82 0f       	add	r24, r18
    32ee:	93 1f       	adc	r25, r19
    32f0:	fc 01       	movw	r30, r24
    32f2:	20 81       	ld	r18, Z
    32f4:	8b 81       	ldd	r24, Y+3	; 0x03
    32f6:	9c 81       	ldd	r25, Y+4	; 0x04
    32f8:	62 2f       	mov	r22, r18
    32fa:	0e 94 ca 18 	call	0x3194	; 0x3194 <Lcd_4bit_enuDisplayCharacter>
    32fe:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    3300:	8a 81       	ldd	r24, Y+2	; 0x02
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
			while(Address_pu8String[Loc_u8Counter] !=0){
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	88 2f       	mov	r24, r24
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	2d 81       	ldd	r18, Y+5	; 0x05
    330e:	3e 81       	ldd	r19, Y+6	; 0x06
    3310:	82 0f       	add	r24, r18
    3312:	93 1f       	adc	r25, r19
    3314:	fc 01       	movw	r30, r24
    3316:	80 81       	ld	r24, Z
    3318:	88 23       	and	r24, r24
    331a:	19 f7       	brne	.-58     	; 0x32e2 <Lcd_4bit_enuDisplayStringWithPosition+0x4a>
		}




		return Loc_enuStatus;
    331c:	89 81       	ldd	r24, Y+1	; 0x01

}
    331e:	28 96       	adiw	r28, 0x08	; 8
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	08 95       	ret

00003330 <Lcd_4bit_enuCreateCustomCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	27 97       	sbiw	r28, 0x07	; 7
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	9c 83       	std	Y+4, r25	; 0x04
    3346:	8b 83       	std	Y+3, r24	; 0x03
    3348:	7e 83       	std	Y+6, r23	; 0x06
    334a:	6d 83       	std	Y+5, r22	; 0x05
    334c:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    334e:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    3350:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	9c 81       	ldd	r25, Y+4	; 0x04
    3356:	89 2b       	or	r24, r25
    3358:	21 f0       	breq	.+8      	; 0x3362 <Lcd_4bit_enuCreateCustomCharacter+0x32>
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	89 2b       	or	r24, r25
    3360:	19 f4       	brne	.+6      	; 0x3368 <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    3362:	82 e0       	ldi	r24, 0x02	; 2
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	30 c0       	rjmp	.+96     	; 0x33c8 <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    3368:	8f 81       	ldd	r24, Y+7	; 0x07
    336a:	88 30       	cpi	r24, 0x08	; 8
    336c:	18 f0       	brcs	.+6      	; 0x3374 <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    336e:	83 e0       	ldi	r24, 0x03	; 3
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	2a c0       	rjmp	.+84     	; 0x33c8 <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    3374:	8f 81       	ldd	r24, Y+7	; 0x07
    3376:	88 2f       	mov	r24, r24
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	08 96       	adiw	r24, 0x08	; 8
    337c:	28 2f       	mov	r18, r24
    337e:	22 0f       	add	r18, r18
    3380:	22 0f       	add	r18, r18
    3382:	22 0f       	add	r18, r18
    3384:	8b 81       	ldd	r24, Y+3	; 0x03
    3386:	9c 81       	ldd	r25, Y+4	; 0x04
    3388:	62 2f       	mov	r22, r18
    338a:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    338e:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    3390:	1a 82       	std	Y+2, r1	; 0x02
    3392:	11 c0       	rjmp	.+34     	; 0x33b6 <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    3394:	8a 81       	ldd	r24, Y+2	; 0x02
    3396:	88 2f       	mov	r24, r24
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	2d 81       	ldd	r18, Y+5	; 0x05
    339c:	3e 81       	ldd	r19, Y+6	; 0x06
    339e:	82 0f       	add	r24, r18
    33a0:	93 1f       	adc	r25, r19
    33a2:	fc 01       	movw	r30, r24
    33a4:	20 81       	ld	r18, Z
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	9c 81       	ldd	r25, Y+4	; 0x04
    33aa:	62 2f       	mov	r22, r18
    33ac:	0e 94 ca 18 	call	0x3194	; 0x3194 <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	8f 5f       	subi	r24, 0xFF	; 255
    33b4:	8a 83       	std	Y+2, r24	; 0x02
    33b6:	8a 81       	ldd	r24, Y+2	; 0x02
    33b8:	88 30       	cpi	r24, 0x08	; 8
    33ba:	60 f3       	brcs	.-40     	; 0x3394 <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	9c 81       	ldd	r25, Y+4	; 0x04
    33c0:	60 e8       	ldi	r22, 0x80	; 128
    33c2:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    33c6:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    33c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    33ca:	27 96       	adiw	r28, 0x07	; 7
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	08 95       	ret

000033dc <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
    33e0:	00 d0       	rcall	.+0      	; 0x33e2 <Lcd_4bit_enuGoToXY+0x6>
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <Lcd_4bit_enuGoToXY+0x8>
    33e4:	1f 92       	push	r1
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	9b 83       	std	Y+3, r25	; 0x03
    33ec:	8a 83       	std	Y+2, r24	; 0x02
    33ee:	6c 83       	std	Y+4, r22	; 0x04
    33f0:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    33f2:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	9b 81       	ldd	r25, Y+3	; 0x03
    33f8:	89 2b       	or	r24, r25
    33fa:	19 f4       	brne	.+6      	; 0x3402 <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    33fc:	82 e0       	ldi	r24, 0x02	; 2
    33fe:	89 83       	std	Y+1, r24	; 0x01
    3400:	56 c0       	rjmp	.+172    	; 0x34ae <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    3402:	8c 81       	ldd	r24, Y+4	; 0x04
    3404:	85 30       	cpi	r24, 0x05	; 5
    3406:	18 f0       	brcs	.+6      	; 0x340e <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    3408:	85 e0       	ldi	r24, 0x05	; 5
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	50 c0       	rjmp	.+160    	; 0x34ae <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    340e:	8d 81       	ldd	r24, Y+5	; 0x05
    3410:	85 31       	cpi	r24, 0x15	; 21
    3412:	18 f0       	brcs	.+6      	; 0x341a <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    3414:	84 e0       	ldi	r24, 0x04	; 4
    3416:	89 83       	std	Y+1, r24	; 0x01
    3418:	4a c0       	rjmp	.+148    	; 0x34ae <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	81 50       	subi	r24, 0x01	; 1
    341e:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    3420:	8c 81       	ldd	r24, Y+4	; 0x04
    3422:	88 2f       	mov	r24, r24
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	82 30       	cpi	r24, 0x02	; 2
    3428:	91 05       	cpc	r25, r1
    342a:	c9 f0       	breq	.+50     	; 0x345e <Lcd_4bit_enuGoToXY+0x82>
    342c:	83 30       	cpi	r24, 0x03	; 3
    342e:	91 05       	cpc	r25, r1
    3430:	1c f4       	brge	.+6      	; 0x3438 <Lcd_4bit_enuGoToXY+0x5c>
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	39 f0       	breq	.+14     	; 0x3444 <Lcd_4bit_enuGoToXY+0x68>
    3436:	3a c0       	rjmp	.+116    	; 0x34ac <Lcd_4bit_enuGoToXY+0xd0>
    3438:	83 30       	cpi	r24, 0x03	; 3
    343a:	91 05       	cpc	r25, r1
    343c:	e9 f0       	breq	.+58     	; 0x3478 <Lcd_4bit_enuGoToXY+0x9c>
    343e:	04 97       	sbiw	r24, 0x04	; 4
    3440:	41 f1       	breq	.+80     	; 0x3492 <Lcd_4bit_enuGoToXY+0xb6>
    3442:	34 c0       	rjmp	.+104    	; 0x34ac <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    3444:	8d 81       	ldd	r24, Y+5	; 0x05
    3446:	20 e8       	ldi	r18, 0x80	; 128
    3448:	28 0f       	add	r18, r24
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	9b 81       	ldd	r25, Y+3	; 0x03
    344e:	62 2f       	mov	r22, r18
    3450:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    3454:	98 2f       	mov	r25, r24
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	89 23       	and	r24, r25
    345a:	89 83       	std	Y+1, r24	; 0x01
			                break;
    345c:	28 c0       	rjmp	.+80     	; 0x34ae <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    345e:	8d 81       	ldd	r24, Y+5	; 0x05
    3460:	20 ec       	ldi	r18, 0xC0	; 192
    3462:	28 0f       	add	r18, r24
    3464:	8a 81       	ldd	r24, Y+2	; 0x02
    3466:	9b 81       	ldd	r25, Y+3	; 0x03
    3468:	62 2f       	mov	r22, r18
    346a:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    346e:	98 2f       	mov	r25, r24
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	89 23       	and	r24, r25
    3474:	89 83       	std	Y+1, r24	; 0x01
			                break;
    3476:	1b c0       	rjmp	.+54     	; 0x34ae <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    3478:	8d 81       	ldd	r24, Y+5	; 0x05
    347a:	24 e9       	ldi	r18, 0x94	; 148
    347c:	28 0f       	add	r18, r24
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	9b 81       	ldd	r25, Y+3	; 0x03
    3482:	62 2f       	mov	r22, r18
    3484:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    3488:	98 2f       	mov	r25, r24
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	89 23       	and	r24, r25
    348e:	89 83       	std	Y+1, r24	; 0x01
			                break;
    3490:	0e c0       	rjmp	.+28     	; 0x34ae <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	24 ed       	ldi	r18, 0xD4	; 212
    3496:	28 0f       	add	r18, r24
    3498:	8a 81       	ldd	r24, Y+2	; 0x02
    349a:	9b 81       	ldd	r25, Y+3	; 0x03
    349c:	62 2f       	mov	r22, r18
    349e:	0e 94 8c 18 	call	0x3118	; 0x3118 <Lcd_4bit_enuSendCommand>
    34a2:	98 2f       	mov	r25, r24
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	89 23       	and	r24, r25
    34a8:	89 83       	std	Y+1, r24	; 0x01
			                break;
    34aa:	01 c0       	rjmp	.+2      	; 0x34ae <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    34ac:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    34ae:	89 81       	ldd	r24, Y+1	; 0x01

}
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	08 95       	ret

000034c0 <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <Lcd_4bit_enuDisplayString+0x6>
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <Lcd_4bit_enuDisplayString+0x8>
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <Lcd_4bit_enuDisplayString+0xa>
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	9c 83       	std	Y+4, r25	; 0x04
    34d0:	8b 83       	std	Y+3, r24	; 0x03
    34d2:	7e 83       	std	Y+6, r23	; 0x06
    34d4:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    34d6:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    34d8:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    34da:	8b 81       	ldd	r24, Y+3	; 0x03
    34dc:	9c 81       	ldd	r25, Y+4	; 0x04
    34de:	89 2b       	or	r24, r25
    34e0:	21 f0       	breq	.+8      	; 0x34ea <Lcd_4bit_enuDisplayString+0x2a>
    34e2:	8d 81       	ldd	r24, Y+5	; 0x05
    34e4:	9e 81       	ldd	r25, Y+6	; 0x06
    34e6:	89 2b       	or	r24, r25
    34e8:	a9 f4       	brne	.+42     	; 0x3514 <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    34ea:	82 e0       	ldi	r24, 0x02	; 2
    34ec:	89 83       	std	Y+1, r24	; 0x01
    34ee:	1d c0       	rjmp	.+58     	; 0x352a <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    34f0:	8a 81       	ldd	r24, Y+2	; 0x02
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	2d 81       	ldd	r18, Y+5	; 0x05
    34f8:	3e 81       	ldd	r19, Y+6	; 0x06
    34fa:	82 0f       	add	r24, r18
    34fc:	93 1f       	adc	r25, r19
    34fe:	fc 01       	movw	r30, r24
    3500:	20 81       	ld	r18, Z
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	9c 81       	ldd	r25, Y+4	; 0x04
    3506:	62 2f       	mov	r22, r18
    3508:	0e 94 ca 18 	call	0x3194	; 0x3194 <Lcd_4bit_enuDisplayCharacter>
    350c:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    350e:	8a 81       	ldd	r24, Y+2	; 0x02
    3510:	8f 5f       	subi	r24, 0xFF	; 255
    3512:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	88 2f       	mov	r24, r24
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	2d 81       	ldd	r18, Y+5	; 0x05
    351c:	3e 81       	ldd	r19, Y+6	; 0x06
    351e:	82 0f       	add	r24, r18
    3520:	93 1f       	adc	r25, r19
    3522:	fc 01       	movw	r30, r24
    3524:	80 81       	ld	r24, Z
    3526:	88 23       	and	r24, r24
    3528:	19 f7       	brne	.-58     	; 0x34f0 <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    352a:	89 81       	ldd	r24, Y+1	; 0x01

}
    352c:	26 96       	adiw	r28, 0x06	; 6
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	f8 94       	cli
    3532:	de bf       	out	0x3e, r29	; 62
    3534:	0f be       	out	0x3f, r0	; 63
    3536:	cd bf       	out	0x3d, r28	; 61
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	08 95       	ret

0000353e <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number){
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	cc 56       	subi	r28, 0x6C	; 108
    3548:	d1 09       	sbc	r29, r1
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	f8 94       	cli
    354e:	de bf       	out	0x3e, r29	; 62
    3550:	0f be       	out	0x3f, r0	; 63
    3552:	cd bf       	out	0x3d, r28	; 61
    3554:	9e 01       	movw	r18, r28
    3556:	29 59       	subi	r18, 0x99	; 153
    3558:	3f 4f       	sbci	r19, 0xFF	; 255
    355a:	f9 01       	movw	r30, r18
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	80 83       	st	Z, r24
    3560:	ce 01       	movw	r24, r28
    3562:	87 59       	subi	r24, 0x97	; 151
    3564:	9f 4f       	sbci	r25, 0xFF	; 255
    3566:	fc 01       	movw	r30, r24
    3568:	40 83       	st	Z, r20
    356a:	51 83       	std	Z+1, r21	; 0x01
    356c:	62 83       	std	Z+2, r22	; 0x02
    356e:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    3570:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    3572:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    3574:	ce 01       	movw	r24, r28
    3576:	89 59       	subi	r24, 0x99	; 153
    3578:	9f 4f       	sbci	r25, 0xFF	; 255
    357a:	fc 01       	movw	r30, r24
    357c:	80 81       	ld	r24, Z
    357e:	91 81       	ldd	r25, Z+1	; 0x01
    3580:	89 2b       	or	r24, r25
    3582:	19 f4       	brne	.+6      	; 0x358a <Lcd_4bit_enuDisplayNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    3584:	82 e0       	ldi	r24, 0x02	; 2
    3586:	89 83       	std	Y+1, r24	; 0x01
    3588:	1e c0       	rjmp	.+60     	; 0x35c6 <Lcd_4bit_enuDisplayNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    358a:	9e 01       	movw	r18, r28
    358c:	2d 5f       	subi	r18, 0xFD	; 253
    358e:	3f 4f       	sbci	r19, 0xFF	; 255
    3590:	ce 01       	movw	r24, r28
    3592:	87 59       	subi	r24, 0x97	; 151
    3594:	9f 4f       	sbci	r25, 0xFF	; 255
    3596:	fc 01       	movw	r30, r24
    3598:	80 81       	ld	r24, Z
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	a2 81       	ldd	r26, Z+2	; 0x02
    359e:	b3 81       	ldd	r27, Z+3	; 0x03
    35a0:	a9 01       	movw	r20, r18
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	0e 94 59 00 	call	0xb2	; 0xb2 <Convert_IntToString>
    35aa:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    35ac:	9e 01       	movw	r18, r28
    35ae:	2d 5f       	subi	r18, 0xFD	; 253
    35b0:	3f 4f       	sbci	r19, 0xFF	; 255
    35b2:	ce 01       	movw	r24, r28
    35b4:	89 59       	subi	r24, 0x99	; 153
    35b6:	9f 4f       	sbci	r25, 0xFF	; 255
    35b8:	fc 01       	movw	r30, r24
    35ba:	80 81       	ld	r24, Z
    35bc:	91 81       	ldd	r25, Z+1	; 0x01
    35be:	b9 01       	movw	r22, r18
    35c0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <Lcd_4bit_enuDisplayString>
    35c4:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    35c6:	89 81       	ldd	r24, Y+1	; 0x01

}
    35c8:	c4 59       	subi	r28, 0x94	; 148
    35ca:	df 4f       	sbci	r29, 0xFF	; 255
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	f8 94       	cli
    35d0:	de bf       	out	0x3e, r29	; 62
    35d2:	0f be       	out	0x3f, r0	; 63
    35d4:	cd bf       	out	0x3d, r28	; 61
    35d6:	df 91       	pop	r29
    35d8:	cf 91       	pop	r28
    35da:	08 95       	ret

000035dc <Lcd_4bit_enuDisplayNumberWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumberWithPosition(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number, u8 Copy_u8Row, u8 Copy_u8Col){
    35dc:	0f 93       	push	r16
    35de:	cf 93       	push	r28
    35e0:	df 93       	push	r29
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	ce 56       	subi	r28, 0x6E	; 110
    35e8:	d1 09       	sbc	r29, r1
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	fe 01       	movw	r30, r28
    35f6:	e9 59       	subi	r30, 0x99	; 153
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	91 83       	std	Z+1, r25	; 0x01
    35fc:	80 83       	st	Z, r24
    35fe:	ce 01       	movw	r24, r28
    3600:	87 59       	subi	r24, 0x97	; 151
    3602:	9f 4f       	sbci	r25, 0xFF	; 255
    3604:	dc 01       	movw	r26, r24
    3606:	4d 93       	st	X+, r20
    3608:	5d 93       	st	X+, r21
    360a:	6d 93       	st	X+, r22
    360c:	7c 93       	st	X, r23
    360e:	13 97       	sbiw	r26, 0x03	; 3
    3610:	ce 01       	movw	r24, r28
    3612:	83 59       	subi	r24, 0x93	; 147
    3614:	9f 4f       	sbci	r25, 0xFF	; 255
    3616:	fc 01       	movw	r30, r24
    3618:	20 83       	st	Z, r18
    361a:	ce 01       	movw	r24, r28
    361c:	82 59       	subi	r24, 0x92	; 146
    361e:	9f 4f       	sbci	r25, 0xFF	; 255
    3620:	dc 01       	movw	r26, r24
    3622:	0c 93       	st	X, r16

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    3624:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    3626:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    3628:	ce 01       	movw	r24, r28
    362a:	89 59       	subi	r24, 0x99	; 153
    362c:	9f 4f       	sbci	r25, 0xFF	; 255
    362e:	fc 01       	movw	r30, r24
    3630:	80 81       	ld	r24, Z
    3632:	91 81       	ldd	r25, Z+1	; 0x01
    3634:	89 2b       	or	r24, r25
    3636:	19 f4       	brne	.+6      	; 0x363e <Lcd_4bit_enuDisplayNumberWithPosition+0x62>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    3638:	82 e0       	ldi	r24, 0x02	; 2
    363a:	89 83       	std	Y+1, r24	; 0x01
    363c:	31 c0       	rjmp	.+98     	; 0x36a0 <Lcd_4bit_enuDisplayNumberWithPosition+0xc4>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    363e:	9e 01       	movw	r18, r28
    3640:	2d 5f       	subi	r18, 0xFD	; 253
    3642:	3f 4f       	sbci	r19, 0xFF	; 255
    3644:	ce 01       	movw	r24, r28
    3646:	87 59       	subi	r24, 0x97	; 151
    3648:	9f 4f       	sbci	r25, 0xFF	; 255
    364a:	fc 01       	movw	r30, r24
    364c:	80 81       	ld	r24, Z
    364e:	91 81       	ldd	r25, Z+1	; 0x01
    3650:	a2 81       	ldd	r26, Z+2	; 0x02
    3652:	b3 81       	ldd	r27, Z+3	; 0x03
    3654:	a9 01       	movw	r20, r18
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 59 00 	call	0xb2	; 0xb2 <Convert_IntToString>
    365e:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    3660:	9e 01       	movw	r18, r28
    3662:	22 59       	subi	r18, 0x92	; 146
    3664:	3f 4f       	sbci	r19, 0xFF	; 255
    3666:	ce 01       	movw	r24, r28
    3668:	83 59       	subi	r24, 0x93	; 147
    366a:	9f 4f       	sbci	r25, 0xFF	; 255
    366c:	ae 01       	movw	r20, r28
    366e:	49 59       	subi	r20, 0x99	; 153
    3670:	5f 4f       	sbci	r21, 0xFF	; 255
    3672:	da 01       	movw	r26, r20
    3674:	ed 91       	ld	r30, X+
    3676:	fc 91       	ld	r31, X
    3678:	d9 01       	movw	r26, r18
    367a:	4c 91       	ld	r20, X
    367c:	dc 01       	movw	r26, r24
    367e:	6c 91       	ld	r22, X
    3680:	cf 01       	movw	r24, r30
    3682:	0e 94 ee 19 	call	0x33dc	; 0x33dc <Lcd_4bit_enuGoToXY>
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    3686:	9e 01       	movw	r18, r28
    3688:	2d 5f       	subi	r18, 0xFD	; 253
    368a:	3f 4f       	sbci	r19, 0xFF	; 255
    368c:	ce 01       	movw	r24, r28
    368e:	89 59       	subi	r24, 0x99	; 153
    3690:	9f 4f       	sbci	r25, 0xFF	; 255
    3692:	fc 01       	movw	r30, r24
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	b9 01       	movw	r22, r18
    369a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <Lcd_4bit_enuDisplayString>
    369e:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    36a0:	89 81       	ldd	r24, Y+1	; 0x01

}
    36a2:	c2 59       	subi	r28, 0x92	; 146
    36a4:	df 4f       	sbci	r29, 0xFF	; 255
    36a6:	0f b6       	in	r0, 0x3f	; 63
    36a8:	f8 94       	cli
    36aa:	de bf       	out	0x3e, r29	; 62
    36ac:	0f be       	out	0x3f, r0	; 63
    36ae:	cd bf       	out	0x3d, r28	; 61
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	0f 91       	pop	r16
    36b6:	08 95       	ret

000036b8 <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f64 Copy_f64Number){
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	cc 56       	subi	r28, 0x6C	; 108
    36c2:	d1 09       	sbc	r29, r1
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	de bf       	out	0x3e, r29	; 62
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	cd bf       	out	0x3d, r28	; 61
    36ce:	9e 01       	movw	r18, r28
    36d0:	29 59       	subi	r18, 0x99	; 153
    36d2:	3f 4f       	sbci	r19, 0xFF	; 255
    36d4:	f9 01       	movw	r30, r18
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	80 83       	st	Z, r24
    36da:	ce 01       	movw	r24, r28
    36dc:	87 59       	subi	r24, 0x97	; 151
    36de:	9f 4f       	sbci	r25, 0xFF	; 255
    36e0:	fc 01       	movw	r30, r24
    36e2:	40 83       	st	Z, r20
    36e4:	51 83       	std	Z+1, r21	; 0x01
    36e6:	62 83       	std	Z+2, r22	; 0x02
    36e8:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    36ea:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    36ec:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    36ee:	ce 01       	movw	r24, r28
    36f0:	89 59       	subi	r24, 0x99	; 153
    36f2:	9f 4f       	sbci	r25, 0xFF	; 255
    36f4:	fc 01       	movw	r30, r24
    36f6:	80 81       	ld	r24, Z
    36f8:	91 81       	ldd	r25, Z+1	; 0x01
    36fa:	89 2b       	or	r24, r25
    36fc:	19 f4       	brne	.+6      	; 0x3704 <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    36fe:	82 e0       	ldi	r24, 0x02	; 2
    3700:	89 83       	std	Y+1, r24	; 0x01
    3702:	1e c0       	rjmp	.+60     	; 0x3740 <Lcd_4bit_enuDisplayFloatNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_FloatToString(Copy_f64Number, Loc_u8ConvertedNumberInArray);
    3704:	9e 01       	movw	r18, r28
    3706:	2d 5f       	subi	r18, 0xFD	; 253
    3708:	3f 4f       	sbci	r19, 0xFF	; 255
    370a:	ce 01       	movw	r24, r28
    370c:	87 59       	subi	r24, 0x97	; 151
    370e:	9f 4f       	sbci	r25, 0xFF	; 255
    3710:	fc 01       	movw	r30, r24
    3712:	80 81       	ld	r24, Z
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	a2 81       	ldd	r26, Z+2	; 0x02
    3718:	b3 81       	ldd	r27, Z+3	; 0x03
    371a:	a9 01       	movw	r20, r18
    371c:	bc 01       	movw	r22, r24
    371e:	cd 01       	movw	r24, r26
    3720:	0e 94 98 00 	call	0x130	; 0x130 <Convert_FloatToString>
    3724:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
				Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd, Loc_u8ConvertedNumberInArray);
    3726:	9e 01       	movw	r18, r28
    3728:	2d 5f       	subi	r18, 0xFD	; 253
    372a:	3f 4f       	sbci	r19, 0xFF	; 255
    372c:	ce 01       	movw	r24, r28
    372e:	89 59       	subi	r24, 0x99	; 153
    3730:	9f 4f       	sbci	r25, 0xFF	; 255
    3732:	fc 01       	movw	r30, r24
    3734:	80 81       	ld	r24, Z
    3736:	91 81       	ldd	r25, Z+1	; 0x01
    3738:	b9 01       	movw	r22, r18
    373a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <Lcd_4bit_enuDisplayString>
    373e:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    3740:	89 81       	ldd	r24, Y+1	; 0x01

}
    3742:	c4 59       	subi	r28, 0x94	; 148
    3744:	df 4f       	sbci	r29, 0xFF	; 255
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	08 95       	ret

00003756 <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    3756:	cf 93       	push	r28
    3758:	df 93       	push	r29
    375a:	00 d0       	rcall	.+0      	; 0x375c <Lcd_4bit_enuSet4BitsOnPins+0x6>
    375c:	00 d0       	rcall	.+0      	; 0x375e <Lcd_4bit_enuSet4BitsOnPins+0x8>
    375e:	1f 92       	push	r1
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	9c 83       	std	Y+4, r25	; 0x04
    3766:	8b 83       	std	Y+3, r24	; 0x03
    3768:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    376a:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    376c:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	9c 81       	ldd	r25, Y+4	; 0x04
    3772:	89 2b       	or	r24, r25
    3774:	19 f4       	brne	.+6      	; 0x377c <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    3776:	82 e0       	ldi	r24, 0x02	; 2
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	22 c0       	rjmp	.+68     	; 0x37c0 <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    377c:	1a 82       	std	Y+2, r1	; 0x02
    377e:	1d c0       	rjmp	.+58     	; 0x37ba <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    3780:	8d 81       	ldd	r24, Y+5	; 0x05
    3782:	88 2f       	mov	r24, r24
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	2a 81       	ldd	r18, Y+2	; 0x02
    3788:	22 2f       	mov	r18, r18
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	02 c0       	rjmp	.+4      	; 0x3792 <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    378e:	95 95       	asr	r25
    3790:	87 95       	ror	r24
    3792:	2a 95       	dec	r18
    3794:	e2 f7       	brpl	.-8      	; 0x378e <Lcd_4bit_enuSet4BitsOnPins+0x38>
    3796:	48 2f       	mov	r20, r24
    3798:	41 70       	andi	r20, 0x01	; 1
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	88 2f       	mov	r24, r24
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	2b 81       	ldd	r18, Y+3	; 0x03
    37a2:	3c 81       	ldd	r19, Y+4	; 0x04
    37a4:	82 0f       	add	r24, r18
    37a6:	93 1f       	adc	r25, r19
    37a8:	fc 01       	movw	r30, r24
    37aa:	80 81       	ld	r24, Z
    37ac:	64 2f       	mov	r22, r20
    37ae:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    37b2:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    37b4:	8a 81       	ldd	r24, Y+2	; 0x02
    37b6:	8f 5f       	subi	r24, 0xFF	; 255
    37b8:	8a 83       	std	Y+2, r24	; 0x02
    37ba:	8a 81       	ldd	r24, Y+2	; 0x02
    37bc:	84 30       	cpi	r24, 0x04	; 4
    37be:	00 f3       	brcs	.-64     	; 0x3780 <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    37c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	08 95       	ret

000037d2 <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	a3 97       	sbiw	r28, 0x23	; 35
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	9b a3       	std	Y+35, r25	; 0x23
    37e8:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    37ea:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    37ec:	8a a1       	ldd	r24, Y+34	; 0x22
    37ee:	9b a1       	ldd	r25, Y+35	; 0x23
    37f0:	89 2b       	or	r24, r25
    37f2:	19 f4       	brne	.+6      	; 0x37fa <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    37f4:	82 e0       	ldi	r24, 0x02	; 2
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	ff c0       	rjmp	.+510    	; 0x39f8 <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    37fa:	8a a1       	ldd	r24, Y+34	; 0x22
    37fc:	9b a1       	ldd	r25, Y+35	; 0x23
    37fe:	fc 01       	movw	r30, r24
    3800:	85 81       	ldd	r24, Z+5	; 0x05
    3802:	61 e0       	ldi	r22, 0x01	; 1
    3804:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    3808:	89 83       	std	Y+1, r24	; 0x01
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	a0 ea       	ldi	r26, 0xA0	; 160
    3810:	b0 e4       	ldi	r27, 0x40	; 64
    3812:	8a 83       	std	Y+2, r24	; 0x02
    3814:	9b 83       	std	Y+3, r25	; 0x03
    3816:	ac 83       	std	Y+4, r26	; 0x04
    3818:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    381a:	2b ea       	ldi	r18, 0xAB	; 171
    381c:	3a ea       	ldi	r19, 0xAA	; 170
    381e:	4a ea       	ldi	r20, 0xAA	; 170
    3820:	50 e4       	ldi	r21, 0x40	; 64
    3822:	6a 81       	ldd	r22, Y+2	; 0x02
    3824:	7b 81       	ldd	r23, Y+3	; 0x03
    3826:	8c 81       	ldd	r24, Y+4	; 0x04
    3828:	9d 81       	ldd	r25, Y+5	; 0x05
    382a:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	8e 83       	std	Y+6, r24	; 0x06
    3834:	9f 83       	std	Y+7, r25	; 0x07
    3836:	a8 87       	std	Y+8, r26	; 0x08
    3838:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	40 e8       	ldi	r20, 0x80	; 128
    3840:	50 e4       	ldi	r21, 0x40	; 64
    3842:	6a 81       	ldd	r22, Y+2	; 0x02
    3844:	7b 81       	ldd	r23, Y+3	; 0x03
    3846:	8c 81       	ldd	r24, Y+4	; 0x04
    3848:	9d 81       	ldd	r25, Y+5	; 0x05
    384a:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	8a 87       	std	Y+10, r24	; 0x0a
    3854:	9b 87       	std	Y+11, r25	; 0x0b
    3856:	ac 87       	std	Y+12, r26	; 0x0c
    3858:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	40 e8       	ldi	r20, 0x80	; 128
    3860:	5f e3       	ldi	r21, 0x3F	; 63
    3862:	6e 81       	ldd	r22, Y+6	; 0x06
    3864:	7f 81       	ldd	r23, Y+7	; 0x07
    3866:	88 85       	ldd	r24, Y+8	; 0x08
    3868:	99 85       	ldd	r25, Y+9	; 0x09
    386a:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
    386e:	88 23       	and	r24, r24
    3870:	1c f4       	brge	.+6      	; 0x3878 <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	8e 87       	std	Y+14, r24	; 0x0e
    3876:	b2 c0       	rjmp	.+356    	; 0x39dc <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	3f ef       	ldi	r19, 0xFF	; 255
    387c:	4f e7       	ldi	r20, 0x7F	; 127
    387e:	57 e4       	ldi	r21, 0x47	; 71
    3880:	6a 85       	ldd	r22, Y+10	; 0x0a
    3882:	7b 85       	ldd	r23, Y+11	; 0x0b
    3884:	8c 85       	ldd	r24, Y+12	; 0x0c
    3886:	9d 85       	ldd	r25, Y+13	; 0x0d
    3888:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    388c:	18 16       	cp	r1, r24
    388e:	0c f0       	brlt	.+2      	; 0x3892 <Lcd_4bit_enuSendEnableSignal+0xc0>
    3890:	7b c0       	rjmp	.+246    	; 0x3988 <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	4a e7       	ldi	r20, 0x7A	; 122
    3898:	54 e4       	ldi	r21, 0x44	; 68
    389a:	6a 81       	ldd	r22, Y+2	; 0x02
    389c:	7b 81       	ldd	r23, Y+3	; 0x03
    389e:	8c 81       	ldd	r24, Y+4	; 0x04
    38a0:	9d 81       	ldd	r25, Y+5	; 0x05
    38a2:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__divsf3>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	8f 87       	std	Y+15, r24	; 0x0f
    38ac:	98 8b       	std	Y+16, r25	; 0x10
    38ae:	a9 8b       	std	Y+17, r26	; 0x11
    38b0:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	4a e7       	ldi	r20, 0x7A	; 122
    38b8:	55 e4       	ldi	r21, 0x45	; 69
    38ba:	6f 85       	ldd	r22, Y+15	; 0x0f
    38bc:	78 89       	ldd	r23, Y+16	; 0x10
    38be:	89 89       	ldd	r24, Y+17	; 0x11
    38c0:	9a 89       	ldd	r25, Y+18	; 0x12
    38c2:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	8b 8b       	std	Y+19, r24	; 0x13
    38cc:	9c 8b       	std	Y+20, r25	; 0x14
    38ce:	ad 8b       	std	Y+21, r26	; 0x15
    38d0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e8       	ldi	r20, 0x80	; 128
    38d8:	5f e3       	ldi	r21, 0x3F	; 63
    38da:	6b 89       	ldd	r22, Y+19	; 0x13
    38dc:	7c 89       	ldd	r23, Y+20	; 0x14
    38de:	8d 89       	ldd	r24, Y+21	; 0x15
    38e0:	9e 89       	ldd	r25, Y+22	; 0x16
    38e2:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
    38e6:	88 23       	and	r24, r24
    38e8:	2c f4       	brge	.+10     	; 0x38f4 <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	98 8f       	std	Y+24, r25	; 0x18
    38f0:	8f 8b       	std	Y+23, r24	; 0x17
    38f2:	3f c0       	rjmp	.+126    	; 0x3972 <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	3f ef       	ldi	r19, 0xFF	; 255
    38f8:	4f e7       	ldi	r20, 0x7F	; 127
    38fa:	57 e4       	ldi	r21, 0x47	; 71
    38fc:	6b 89       	ldd	r22, Y+19	; 0x13
    38fe:	7c 89       	ldd	r23, Y+20	; 0x14
    3900:	8d 89       	ldd	r24, Y+21	; 0x15
    3902:	9e 89       	ldd	r25, Y+22	; 0x16
    3904:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    3908:	18 16       	cp	r1, r24
    390a:	4c f5       	brge	.+82     	; 0x395e <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390c:	20 e0       	ldi	r18, 0x00	; 0
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	40 e2       	ldi	r20, 0x20	; 32
    3912:	51 e4       	ldi	r21, 0x41	; 65
    3914:	6f 85       	ldd	r22, Y+15	; 0x0f
    3916:	78 89       	ldd	r23, Y+16	; 0x10
    3918:	89 89       	ldd	r24, Y+17	; 0x11
    391a:	9a 89       	ldd	r25, Y+18	; 0x12
    391c:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	bc 01       	movw	r22, r24
    3926:	cd 01       	movw	r24, r26
    3928:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	98 8f       	std	Y+24, r25	; 0x18
    3932:	8f 8b       	std	Y+23, r24	; 0x17
    3934:	0f c0       	rjmp	.+30     	; 0x3954 <Lcd_4bit_enuSendEnableSignal+0x182>
    3936:	80 e9       	ldi	r24, 0x90	; 144
    3938:	91 e0       	ldi	r25, 0x01	; 1
    393a:	9a 8f       	std	Y+26, r25	; 0x1a
    393c:	89 8f       	std	Y+25, r24	; 0x19
    393e:	89 8d       	ldd	r24, Y+25	; 0x19
    3940:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	f1 f7       	brne	.-4      	; 0x3942 <Lcd_4bit_enuSendEnableSignal+0x170>
    3946:	9a 8f       	std	Y+26, r25	; 0x1a
    3948:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    394a:	8f 89       	ldd	r24, Y+23	; 0x17
    394c:	98 8d       	ldd	r25, Y+24	; 0x18
    394e:	01 97       	sbiw	r24, 0x01	; 1
    3950:	98 8f       	std	Y+24, r25	; 0x18
    3952:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3954:	8f 89       	ldd	r24, Y+23	; 0x17
    3956:	98 8d       	ldd	r25, Y+24	; 0x18
    3958:	89 2b       	or	r24, r25
    395a:	69 f7       	brne	.-38     	; 0x3936 <Lcd_4bit_enuSendEnableSignal+0x164>
    395c:	3f c0       	rjmp	.+126    	; 0x39dc <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395e:	6b 89       	ldd	r22, Y+19	; 0x13
    3960:	7c 89       	ldd	r23, Y+20	; 0x14
    3962:	8d 89       	ldd	r24, Y+21	; 0x15
    3964:	9e 89       	ldd	r25, Y+22	; 0x16
    3966:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	98 8f       	std	Y+24, r25	; 0x18
    3970:	8f 8b       	std	Y+23, r24	; 0x17
    3972:	8f 89       	ldd	r24, Y+23	; 0x17
    3974:	98 8d       	ldd	r25, Y+24	; 0x18
    3976:	9c 8f       	std	Y+28, r25	; 0x1c
    3978:	8b 8f       	std	Y+27, r24	; 0x1b
    397a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    397c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	f1 f7       	brne	.-4      	; 0x397e <Lcd_4bit_enuSendEnableSignal+0x1ac>
    3982:	9c 8f       	std	Y+28, r25	; 0x1c
    3984:	8b 8f       	std	Y+27, r24	; 0x1b
    3986:	2a c0       	rjmp	.+84     	; 0x39dc <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	4f e7       	ldi	r20, 0x7F	; 127
    398e:	53 e4       	ldi	r21, 0x43	; 67
    3990:	6e 81       	ldd	r22, Y+6	; 0x06
    3992:	7f 81       	ldd	r23, Y+7	; 0x07
    3994:	88 85       	ldd	r24, Y+8	; 0x08
    3996:	99 85       	ldd	r25, Y+9	; 0x09
    3998:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    399c:	18 16       	cp	r1, r24
    399e:	ac f4       	brge	.+42     	; 0x39ca <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    39a0:	6a 85       	ldd	r22, Y+10	; 0x0a
    39a2:	7b 85       	ldd	r23, Y+11	; 0x0b
    39a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    39a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    39a8:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	9e 8f       	std	Y+30, r25	; 0x1e
    39b2:	8d 8f       	std	Y+29, r24	; 0x1d
    39b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39b8:	98 a3       	std	Y+32, r25	; 0x20
    39ba:	8f 8f       	std	Y+31, r24	; 0x1f
    39bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39be:	98 a1       	ldd	r25, Y+32	; 0x20
    39c0:	01 97       	sbiw	r24, 0x01	; 1
    39c2:	f1 f7       	brne	.-4      	; 0x39c0 <Lcd_4bit_enuSendEnableSignal+0x1ee>
    39c4:	98 a3       	std	Y+32, r25	; 0x20
    39c6:	8f 8f       	std	Y+31, r24	; 0x1f
    39c8:	0f c0       	rjmp	.+30     	; 0x39e8 <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39ca:	6e 81       	ldd	r22, Y+6	; 0x06
    39cc:	7f 81       	ldd	r23, Y+7	; 0x07
    39ce:	88 85       	ldd	r24, Y+8	; 0x08
    39d0:	99 85       	ldd	r25, Y+9	; 0x09
    39d2:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	8e 87       	std	Y+14, r24	; 0x0e
    39dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    39de:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39e0:	89 a1       	ldd	r24, Y+33	; 0x21
    39e2:	8a 95       	dec	r24
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <Lcd_4bit_enuSendEnableSignal+0x210>
    39e6:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    39e8:	8a a1       	ldd	r24, Y+34	; 0x22
    39ea:	9b a1       	ldd	r25, Y+35	; 0x23
    39ec:	fc 01       	movw	r30, r24
    39ee:	85 81       	ldd	r24, Z+5	; 0x05
    39f0:	60 e0       	ldi	r22, 0x00	; 0
    39f2:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    39f6:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    39f8:	89 81       	ldd	r24, Y+1	; 0x01

}
    39fa:	a3 96       	adiw	r28, 0x23	; 35
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	08 95       	ret

00003a0c <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
    3a14:	29 97       	sbiw	r28, 0x09	; 9
    3a16:	0f b6       	in	r0, 0x3f	; 63
    3a18:	f8 94       	cli
    3a1a:	de bf       	out	0x3e, r29	; 62
    3a1c:	0f be       	out	0x3f, r0	; 63
    3a1e:	cd bf       	out	0x3d, r28	; 61
    3a20:	9f 83       	std	Y+7, r25	; 0x07
    3a22:	8e 83       	std	Y+6, r24	; 0x06
    3a24:	79 87       	std	Y+9, r23	; 0x09
    3a26:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    3a28:	83 e0       	ldi	r24, 0x03	; 3
    3a2a:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    3a2c:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    3a2e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    3a30:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    3a32:	8e 81       	ldd	r24, Y+6	; 0x06
    3a34:	9f 81       	ldd	r25, Y+7	; 0x07
    3a36:	fc 01       	movw	r30, r24
    3a38:	81 85       	ldd	r24, Z+9	; 0x09
    3a3a:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    3a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a40:	89 2b       	or	r24, r25
    3a42:	21 f0       	breq	.+8      	; 0x3a4c <Keypad_enuRead+0x40>
    3a44:	88 85       	ldd	r24, Y+8	; 0x08
    3a46:	99 85       	ldd	r25, Y+9	; 0x09
    3a48:	89 2b       	or	r24, r25
    3a4a:	19 f4       	brne	.+6      	; 0x3a52 <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    3a4c:	82 e0       	ldi	r24, 0x02	; 2
    3a4e:	89 83       	std	Y+1, r24	; 0x01
    3a50:	df c0       	rjmp	.+446    	; 0x3c10 <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    3a52:	8e 81       	ldd	r24, Y+6	; 0x06
    3a54:	9f 81       	ldd	r25, Y+7	; 0x07
    3a56:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <Keypad_DisableControlPins>
    3a5a:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    3a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a60:	fc 01       	movw	r30, r24
    3a62:	80 85       	ldd	r24, Z+8	; 0x08
    3a64:	88 2f       	mov	r24, r24
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	00 97       	sbiw	r24, 0x00	; 0
    3a6a:	21 f0       	breq	.+8      	; 0x3a74 <Keypad_enuRead+0x68>
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	09 f4       	brne	.+2      	; 0x3a72 <Keypad_enuRead+0x66>
    3a70:	67 c0       	rjmp	.+206    	; 0x3b40 <Keypad_enuRead+0x134>
    3a72:	cc c0       	rjmp	.+408    	; 0x3c0c <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    3a74:	1a 82       	std	Y+2, r1	; 0x02
    3a76:	5f c0       	rjmp	.+190    	; 0x3b36 <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    3a78:	8e 81       	ldd	r24, Y+6	; 0x06
    3a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	91 85       	ldd	r25, Z+9	; 0x09
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	99 23       	and	r25, r25
    3a84:	09 f0       	breq	.+2      	; 0x3a88 <Keypad_enuRead+0x7c>
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	48 2f       	mov	r20, r24
    3a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8c:	88 2f       	mov	r24, r24
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	2e 81       	ldd	r18, Y+6	; 0x06
    3a92:	3f 81       	ldd	r19, Y+7	; 0x07
    3a94:	82 0f       	add	r24, r18
    3a96:	93 1f       	adc	r25, r19
    3a98:	fc 01       	movw	r30, r24
    3a9a:	80 81       	ld	r24, Z
    3a9c:	64 2f       	mov	r22, r20
    3a9e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    3aa2:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    3aa4:	1b 82       	std	Y+3, r1	; 0x03
    3aa6:	30 c0       	rjmp	.+96     	; 0x3b08 <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    3aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aaa:	88 2f       	mov	r24, r24
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	2e 81       	ldd	r18, Y+6	; 0x06
    3ab0:	3f 81       	ldd	r19, Y+7	; 0x07
    3ab2:	82 0f       	add	r24, r18
    3ab4:	93 1f       	adc	r25, r19
    3ab6:	04 96       	adiw	r24, 0x04	; 4
    3ab8:	fc 01       	movw	r30, r24
    3aba:	20 81       	ld	r18, Z
    3abc:	ce 01       	movw	r24, r28
    3abe:	05 96       	adiw	r24, 0x05	; 5
    3ac0:	bc 01       	movw	r22, r24
    3ac2:	82 2f       	mov	r24, r18
    3ac4:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Dio_enuReadChannel>
    3ac8:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    3aca:	8e 81       	ldd	r24, Y+6	; 0x06
    3acc:	9f 81       	ldd	r25, Y+7	; 0x07
    3ace:	fc 01       	movw	r30, r24
    3ad0:	91 85       	ldd	r25, Z+9	; 0x09
    3ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad4:	98 17       	cp	r25, r24
    3ad6:	a9 f0       	breq	.+42     	; 0x3b02 <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    3ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    3ada:	28 2f       	mov	r18, r24
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae0:	88 2f       	mov	r24, r24
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	22 0f       	add	r18, r18
    3ae6:	33 1f       	adc	r19, r19
    3ae8:	22 0f       	add	r18, r18
    3aea:	33 1f       	adc	r19, r19
    3aec:	82 0f       	add	r24, r18
    3aee:	93 1f       	adc	r25, r19
    3af0:	86 51       	subi	r24, 0x16	; 22
    3af2:	9f 4f       	sbci	r25, 0xFF	; 255
    3af4:	fc 01       	movw	r30, r24
    3af6:	20 81       	ld	r18, Z
    3af8:	88 85       	ldd	r24, Y+8	; 0x08
    3afa:	99 85       	ldd	r25, Y+9	; 0x09
    3afc:	fc 01       	movw	r30, r24
    3afe:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    3b00:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    3b02:	8b 81       	ldd	r24, Y+3	; 0x03
    3b04:	8f 5f       	subi	r24, 0xFF	; 255
    3b06:	8b 83       	std	Y+3, r24	; 0x03
    3b08:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0a:	84 30       	cpi	r24, 0x04	; 4
    3b0c:	68 f2       	brcs	.-102    	; 0x3aa8 <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    3b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b10:	9f 81       	ldd	r25, Y+7	; 0x07
    3b12:	fc 01       	movw	r30, r24
    3b14:	41 85       	ldd	r20, Z+9	; 0x09
    3b16:	8a 81       	ldd	r24, Y+2	; 0x02
    3b18:	88 2f       	mov	r24, r24
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	2e 81       	ldd	r18, Y+6	; 0x06
    3b1e:	3f 81       	ldd	r19, Y+7	; 0x07
    3b20:	82 0f       	add	r24, r18
    3b22:	93 1f       	adc	r25, r19
    3b24:	fc 01       	movw	r30, r24
    3b26:	80 81       	ld	r24, Z
    3b28:	64 2f       	mov	r22, r20
    3b2a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    3b2e:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	8f 5f       	subi	r24, 0xFF	; 255
    3b34:	8a 83       	std	Y+2, r24	; 0x02
    3b36:	8a 81       	ldd	r24, Y+2	; 0x02
    3b38:	84 30       	cpi	r24, 0x04	; 4
    3b3a:	08 f4       	brcc	.+2      	; 0x3b3e <Keypad_enuRead+0x132>
    3b3c:	9d cf       	rjmp	.-198    	; 0x3a78 <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    3b3e:	68 c0       	rjmp	.+208    	; 0x3c10 <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    3b40:	1b 82       	std	Y+3, r1	; 0x03
    3b42:	5f c0       	rjmp	.+190    	; 0x3c02 <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    3b44:	8e 81       	ldd	r24, Y+6	; 0x06
    3b46:	9f 81       	ldd	r25, Y+7	; 0x07
    3b48:	fc 01       	movw	r30, r24
    3b4a:	91 85       	ldd	r25, Z+9	; 0x09
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	99 23       	and	r25, r25
    3b50:	09 f0       	breq	.+2      	; 0x3b54 <Keypad_enuRead+0x148>
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	48 2f       	mov	r20, r24
    3b56:	8b 81       	ldd	r24, Y+3	; 0x03
    3b58:	88 2f       	mov	r24, r24
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	2e 81       	ldd	r18, Y+6	; 0x06
    3b5e:	3f 81       	ldd	r19, Y+7	; 0x07
    3b60:	82 0f       	add	r24, r18
    3b62:	93 1f       	adc	r25, r19
    3b64:	04 96       	adiw	r24, 0x04	; 4
    3b66:	fc 01       	movw	r30, r24
    3b68:	80 81       	ld	r24, Z
    3b6a:	64 2f       	mov	r22, r20
    3b6c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    3b70:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    3b72:	1a 82       	std	Y+2, r1	; 0x02
    3b74:	2e c0       	rjmp	.+92     	; 0x3bd2 <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    3b76:	8a 81       	ldd	r24, Y+2	; 0x02
    3b78:	88 2f       	mov	r24, r24
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	2e 81       	ldd	r18, Y+6	; 0x06
    3b7e:	3f 81       	ldd	r19, Y+7	; 0x07
    3b80:	82 0f       	add	r24, r18
    3b82:	93 1f       	adc	r25, r19
    3b84:	fc 01       	movw	r30, r24
    3b86:	20 81       	ld	r18, Z
    3b88:	ce 01       	movw	r24, r28
    3b8a:	05 96       	adiw	r24, 0x05	; 5
    3b8c:	bc 01       	movw	r22, r24
    3b8e:	82 2f       	mov	r24, r18
    3b90:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Dio_enuReadChannel>
    3b94:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    3b96:	8e 81       	ldd	r24, Y+6	; 0x06
    3b98:	9f 81       	ldd	r25, Y+7	; 0x07
    3b9a:	fc 01       	movw	r30, r24
    3b9c:	91 85       	ldd	r25, Z+9	; 0x09
    3b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba0:	98 17       	cp	r25, r24
    3ba2:	a1 f0       	breq	.+40     	; 0x3bcc <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    3ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba6:	28 2f       	mov	r18, r24
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bac:	88 2f       	mov	r24, r24
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	22 0f       	add	r18, r18
    3bb2:	33 1f       	adc	r19, r19
    3bb4:	22 0f       	add	r18, r18
    3bb6:	33 1f       	adc	r19, r19
    3bb8:	82 0f       	add	r24, r18
    3bba:	93 1f       	adc	r25, r19
    3bbc:	86 51       	subi	r24, 0x16	; 22
    3bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	20 81       	ld	r18, Z
    3bc4:	88 85       	ldd	r24, Y+8	; 0x08
    3bc6:	99 85       	ldd	r25, Y+9	; 0x09
    3bc8:	fc 01       	movw	r30, r24
    3bca:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bce:	8f 5f       	subi	r24, 0xFF	; 255
    3bd0:	8a 83       	std	Y+2, r24	; 0x02
    3bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd4:	84 30       	cpi	r24, 0x04	; 4
    3bd6:	78 f2       	brcs	.-98     	; 0x3b76 <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    3bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bda:	9f 81       	ldd	r25, Y+7	; 0x07
    3bdc:	fc 01       	movw	r30, r24
    3bde:	41 85       	ldd	r20, Z+9	; 0x09
    3be0:	8b 81       	ldd	r24, Y+3	; 0x03
    3be2:	88 2f       	mov	r24, r24
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	2e 81       	ldd	r18, Y+6	; 0x06
    3be8:	3f 81       	ldd	r19, Y+7	; 0x07
    3bea:	82 0f       	add	r24, r18
    3bec:	93 1f       	adc	r25, r19
    3bee:	04 96       	adiw	r24, 0x04	; 4
    3bf0:	fc 01       	movw	r30, r24
    3bf2:	80 81       	ld	r24, Z
    3bf4:	64 2f       	mov	r22, r20
    3bf6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    3bfa:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    3bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfe:	8f 5f       	subi	r24, 0xFF	; 255
    3c00:	8b 83       	std	Y+3, r24	; 0x03
    3c02:	8b 81       	ldd	r24, Y+3	; 0x03
    3c04:	84 30       	cpi	r24, 0x04	; 4
    3c06:	08 f4       	brcc	.+2      	; 0x3c0a <Keypad_enuRead+0x1fe>
    3c08:	9d cf       	rjmp	.-198    	; 0x3b44 <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    3c0a:	02 c0       	rjmp	.+4      	; 0x3c10 <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c12:	29 96       	adiw	r28, 0x09	; 9
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	f8 94       	cli
    3c18:	de bf       	out	0x3e, r29	; 62
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	cd bf       	out	0x3d, r28	; 61
    3c1e:	df 91       	pop	r29
    3c20:	cf 91       	pop	r28
    3c22:	08 95       	ret

00003c24 <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    3c24:	cf 93       	push	r28
    3c26:	df 93       	push	r29
    3c28:	00 d0       	rcall	.+0      	; 0x3c2a <Keypad_DisableControlPins+0x6>
    3c2a:	00 d0       	rcall	.+0      	; 0x3c2c <Keypad_DisableControlPins+0x8>
    3c2c:	1f 92       	push	r1
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
    3c32:	9d 83       	std	Y+5, r25	; 0x05
    3c34:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    3c36:	83 e0       	ldi	r24, 0x03	; 3
    3c38:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    3c3a:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    3c3c:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    3c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c40:	9d 81       	ldd	r25, Y+5	; 0x05
    3c42:	89 2b       	or	r24, r25
    3c44:	19 f4       	brne	.+6      	; 0x3c4c <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    3c46:	82 e0       	ldi	r24, 0x02	; 2
    3c48:	89 83       	std	Y+1, r24	; 0x01
    3c4a:	42 c0       	rjmp	.+132    	; 0x3cd0 <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    3c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c50:	fc 01       	movw	r30, r24
    3c52:	80 85       	ldd	r24, Z+8	; 0x08
    3c54:	88 2f       	mov	r24, r24
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	00 97       	sbiw	r24, 0x00	; 0
    3c5a:	19 f0       	breq	.+6      	; 0x3c62 <Keypad_DisableControlPins+0x3e>
    3c5c:	01 97       	sbiw	r24, 0x01	; 1
    3c5e:	d9 f0       	breq	.+54     	; 0x3c96 <Keypad_DisableControlPins+0x72>
    3c60:	35 c0       	rjmp	.+106    	; 0x3ccc <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    3c62:	1a 82       	std	Y+2, r1	; 0x02
    3c64:	14 c0       	rjmp	.+40     	; 0x3c8e <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    3c66:	8c 81       	ldd	r24, Y+4	; 0x04
    3c68:	9d 81       	ldd	r25, Y+5	; 0x05
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	41 85       	ldd	r20, Z+9	; 0x09
    3c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c70:	88 2f       	mov	r24, r24
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	2c 81       	ldd	r18, Y+4	; 0x04
    3c76:	3d 81       	ldd	r19, Y+5	; 0x05
    3c78:	82 0f       	add	r24, r18
    3c7a:	93 1f       	adc	r25, r19
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	80 81       	ld	r24, Z
    3c80:	64 2f       	mov	r22, r20
    3c82:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    3c86:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    3c88:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8a:	8f 5f       	subi	r24, 0xFF	; 255
    3c8c:	8a 83       	std	Y+2, r24	; 0x02
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	84 30       	cpi	r24, 0x04	; 4
    3c92:	48 f3       	brcs	.-46     	; 0x3c66 <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    3c94:	1d c0       	rjmp	.+58     	; 0x3cd0 <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    3c96:	1a 82       	std	Y+2, r1	; 0x02
    3c98:	15 c0       	rjmp	.+42     	; 0x3cc4 <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    3c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	41 85       	ldd	r20, Z+9	; 0x09
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	88 2f       	mov	r24, r24
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	2c 81       	ldd	r18, Y+4	; 0x04
    3caa:	3d 81       	ldd	r19, Y+5	; 0x05
    3cac:	82 0f       	add	r24, r18
    3cae:	93 1f       	adc	r25, r19
    3cb0:	04 96       	adiw	r24, 0x04	; 4
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	80 81       	ld	r24, Z
    3cb6:	64 2f       	mov	r22, r20
    3cb8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Dio_enuWriteChannel>
    3cbc:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    3cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc0:	8f 5f       	subi	r24, 0xFF	; 255
    3cc2:	8a 83       	std	Y+2, r24	; 0x02
    3cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc6:	84 30       	cpi	r24, 0x04	; 4
    3cc8:	40 f3       	brcs	.-48     	; 0x3c9a <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    3cca:	02 c0       	rjmp	.+4      	; 0x3cd0 <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
    3cda:	0f 90       	pop	r0
    3cdc:	df 91       	pop	r29
    3cde:	cf 91       	pop	r28
    3ce0:	08 95       	ret

00003ce2 <Icusw_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Icusw_StatusErrorType Icusw_enuInit(Icusw_ConfigType* Address_Icusw ){
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	00 d0       	rcall	.+0      	; 0x3ce8 <Icusw_enuInit+0x6>
    3ce8:	00 d0       	rcall	.+0      	; 0x3cea <Icusw_enuInit+0x8>
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    3cee:	9c 83       	std	Y+4, r25	; 0x04
    3cf0:	8b 83       	std	Y+3, r24	; 0x03
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    3cf2:	19 82       	std	Y+1, r1	; 0x01
	Exti_StatusErrorType Loc_enuExtiswStatus = EXTI_STATUS_OK;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	8a 83       	std	Y+2, r24	; 0x02

	if(NULL == Address_Icusw){
    3cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfc:	89 2b       	or	r24, r25
    3cfe:	19 f4       	brne	.+6      	; 0x3d06 <Icusw_enuInit+0x24>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    3d00:	82 e0       	ldi	r24, 0x02	; 2
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	68 c0       	rjmp	.+208    	; 0x3dd6 <Icusw_enuInit+0xf4>
	}
	else{

		switch(Address_Icusw->exti_Intx_Index){
    3d06:	8b 81       	ldd	r24, Y+3	; 0x03
    3d08:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0a:	fc 01       	movw	r30, r24
    3d0c:	80 81       	ld	r24, Z
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	81 30       	cpi	r24, 0x01	; 1
    3d14:	91 05       	cpc	r25, r1
    3d16:	89 f0       	breq	.+34     	; 0x3d3a <Icusw_enuInit+0x58>
    3d18:	82 30       	cpi	r24, 0x02	; 2
    3d1a:	91 05       	cpc	r25, r1
    3d1c:	d1 f0       	breq	.+52     	; 0x3d52 <Icusw_enuInit+0x70>
    3d1e:	89 2b       	or	r24, r25
    3d20:	21 f5       	brne	.+72     	; 0x3d6a <Icusw_enuInit+0x88>
		case EXTI_INT0_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
    3d22:	63 e0       	ldi	r22, 0x03	; 3
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Exti_enuEnable>
    3d2a:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT0_INDEX, Icusw_voidINT0Isr);
    3d2c:	63 eb       	ldi	r22, 0xB3	; 179
    3d2e:	7f e1       	ldi	r23, 0x1F	; 31
    3d30:	80 e0       	ldi	r24, 0x00	; 0
    3d32:	0e 94 1d 10 	call	0x203a	; 0x203a <Exti_enuSetCallbackFunction>
    3d36:	8a 83       	std	Y+2, r24	; 0x02

			break;
    3d38:	1a c0       	rjmp	.+52     	; 0x3d6e <Icusw_enuInit+0x8c>
		case EXTI_INT1_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT1_INDEX,EXTI_INT1_SELECT_RISING_EDGE);
    3d3a:	63 e0       	ldi	r22, 0x03	; 3
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
    3d3e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Exti_enuEnable>
    3d42:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT1_INDEX, Icusw_voidINT1Isr);
    3d44:	61 e3       	ldi	r22, 0x31	; 49
    3d46:	71 e2       	ldi	r23, 0x21	; 33
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	0e 94 1d 10 	call	0x203a	; 0x203a <Exti_enuSetCallbackFunction>
    3d4e:	8a 83       	std	Y+2, r24	; 0x02

			break;
    3d50:	0e c0       	rjmp	.+28     	; 0x3d6e <Icusw_enuInit+0x8c>
		case EXTI_INT2_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT2_INDEX,EXTI_INT2_SELECT_RISING_EDGE);
    3d52:	61 e0       	ldi	r22, 0x01	; 1
    3d54:	82 e0       	ldi	r24, 0x02	; 2
    3d56:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Exti_enuEnable>
    3d5a:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT2_INDEX, Icusw_voidINT2Isr);
    3d5c:	69 e3       	ldi	r22, 0x39	; 57
    3d5e:	71 e2       	ldi	r23, 0x21	; 33
    3d60:	82 e0       	ldi	r24, 0x02	; 2
    3d62:	0e 94 1d 10 	call	0x203a	; 0x203a <Exti_enuSetCallbackFunction>
    3d66:	8a 83       	std	Y+2, r24	; 0x02


			break;
    3d68:	02 c0       	rjmp	.+4      	; 0x3d6e <Icusw_enuInit+0x8c>
		default:

			Loc_enuExtiswStatus = EXTI_STATUS_FAIL;
    3d6a:	1a 82       	std	Y+2, r1	; 0x02
			break;
    3d6c:	00 00       	nop

		}

		switch(Address_Icusw->timer_index){
    3d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d70:	9c 81       	ldd	r25, Y+4	; 0x04
    3d72:	fc 01       	movw	r30, r24
    3d74:	81 81       	ldd	r24, Z+1	; 0x01
    3d76:	88 2f       	mov	r24, r24
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	81 30       	cpi	r24, 0x01	; 1
    3d7c:	91 05       	cpc	r25, r1
    3d7e:	41 f1       	breq	.+80     	; 0x3dd0 <Icusw_enuInit+0xee>
    3d80:	82 30       	cpi	r24, 0x02	; 2
    3d82:	91 05       	cpc	r25, r1
    3d84:	39 f1       	breq	.+78     	; 0x3dd4 <Icusw_enuInit+0xf2>
    3d86:	89 2b       	or	r24, r25
    3d88:	01 f5       	brne	.+64     	; 0x3dca <Icusw_enuInit+0xe8>

		case ICUSW_TIMER_INDEX_TIMER0 :

			Timer0_enuInit(&Global_StaticTimer0);
    3d8a:	81 ea       	ldi	r24, 0xA1	; 161
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	0e 94 29 09 	call	0x1252	; 0x1252 <Timer0_enuInit>
			Timer0_enuSetCallbackFunction(&Global_StaticTimer0,Timer_voidTimerOverflowIsr);
    3d92:	68 e9       	ldi	r22, 0x98	; 152
    3d94:	7f e1       	ldi	r23, 0x1F	; 31
    3d96:	81 ea       	ldi	r24, 0xA1	; 161
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Timer0_enuSetCallbackFunction>
			Timer0_enuEnableInterrupt(&Global_StaticTimer0);
    3d9e:	81 ea       	ldi	r24, 0xA1	; 161
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <Timer0_enuEnableInterrupt>
			Global_StaticINTxWhichTimer[Address_Icusw->exti_Intx_Index]=ICUSW_TIMER_INDEX_TIMER0;
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	9c 81       	ldd	r25, Y+4	; 0x04
    3daa:	fc 01       	movw	r30, r24
    3dac:	80 81       	ld	r24, Z
    3dae:	88 2f       	mov	r24, r24
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	88 0f       	add	r24, r24
    3db4:	99 1f       	adc	r25, r25
    3db6:	88 0f       	add	r24, r24
    3db8:	99 1f       	adc	r25, r25
    3dba:	8f 5c       	subi	r24, 0xCF	; 207
    3dbc:	9e 4f       	sbci	r25, 0xFE	; 254
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	10 82       	st	Z, r1
    3dc2:	11 82       	std	Z+1, r1	; 0x01
    3dc4:	12 82       	std	Z+2, r1	; 0x02
    3dc6:	13 82       	std	Z+3, r1	; 0x03

			break;
    3dc8:	06 c0       	rjmp	.+12     	; 0x3dd6 <Icusw_enuInit+0xf4>

			break;

		default:

			Loc_enuIcuswStatus = ICUSW_STATUS_FAIL;
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	89 83       	std	Y+1, r24	; 0x01
			break;
    3dce:	03 c0       	rjmp	.+6      	; 0x3dd6 <Icusw_enuInit+0xf4>
			Global_StaticINTxWhichTimer[Address_Icusw->exti_Intx_Index]=ICUSW_TIMER_INDEX_TIMER0;

			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    3dd0:	00 00       	nop
    3dd2:	01 c0       	rjmp	.+2      	; 0x3dd6 <Icusw_enuInit+0xf4>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    3dd4:	00 00       	nop
			break;
		}


	}
	Gie_enuEnableGlobalInterrupt();
    3dd6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <Gie_enuEnableGlobalInterrupt>

	return Loc_enuIcuswStatus;
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	df 91       	pop	r29
    3de6:	cf 91       	pop	r28
    3de8:	08 95       	ret

00003dea <Icusw_enuDeint>:

Icusw_StatusErrorType Icusw_enuDeint(Icusw_ConfigType* Address_Icusw ){
    3dea:	cf 93       	push	r28
    3dec:	df 93       	push	r29
    3dee:	00 d0       	rcall	.+0      	; 0x3df0 <Icusw_enuDeint+0x6>
    3df0:	1f 92       	push	r1
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    3df6:	9b 83       	std	Y+3, r25	; 0x03
    3df8:	8a 83       	std	Y+2, r24	; 0x02
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    3dfa:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw){
    3dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    3e00:	89 2b       	or	r24, r25
    3e02:	11 f4       	brne	.+4      	; 0x3e08 <Icusw_enuDeint+0x1e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    3e04:	82 e0       	ldi	r24, 0x02	; 2
    3e06:	89 83       	std	Y+1, r24	; 0x01
	}
	else{

	}

	return Loc_enuIcuswStatus;
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	08 95       	ret

00003e16 <Icusw_enuGetOnTimeMilliSeconds>:
Icusw_StatusErrorType Icusw_enuGetOnTimeMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_OnTime){
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	00 d0       	rcall	.+0      	; 0x3e1c <Icusw_enuGetOnTimeMilliSeconds+0x6>
    3e1c:	00 d0       	rcall	.+0      	; 0x3e1e <Icusw_enuGetOnTimeMilliSeconds+0x8>
    3e1e:	1f 92       	push	r1
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	9b 83       	std	Y+3, r25	; 0x03
    3e26:	8a 83       	std	Y+2, r24	; 0x02
    3e28:	7d 83       	std	Y+5, r23	; 0x05
    3e2a:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    3e2c:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw ||NULL == Address_OnTime ){
    3e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e30:	9b 81       	ldd	r25, Y+3	; 0x03
    3e32:	89 2b       	or	r24, r25
    3e34:	21 f0       	breq	.+8      	; 0x3e3e <Icusw_enuGetOnTimeMilliSeconds+0x28>
    3e36:	8c 81       	ldd	r24, Y+4	; 0x04
    3e38:	9d 81       	ldd	r25, Y+5	; 0x05
    3e3a:	89 2b       	or	r24, r25
    3e3c:	19 f4       	brne	.+6      	; 0x3e44 <Icusw_enuGetOnTimeMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    3e3e:	82 e0       	ldi	r24, 0x02	; 2
    3e40:	89 83       	std	Y+1, r24	; 0x01
    3e42:	0f c0       	rjmp	.+30     	; 0x3e62 <Icusw_enuGetOnTimeMilliSeconds+0x4c>
	}
	else{

		*Address_OnTime = Global_StaticU32OnTime;
    3e44:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Global_StaticU32OnTime>
    3e48:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <Global_StaticU32OnTime+0x1>
    3e4c:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <Global_StaticU32OnTime+0x2>
    3e50:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <Global_StaticU32OnTime+0x3>
    3e54:	2c 81       	ldd	r18, Y+4	; 0x04
    3e56:	3d 81       	ldd	r19, Y+5	; 0x05
    3e58:	f9 01       	movw	r30, r18
    3e5a:	80 83       	st	Z, r24
    3e5c:	91 83       	std	Z+1, r25	; 0x01
    3e5e:	a2 83       	std	Z+2, r26	; 0x02
    3e60:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    3e62:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	df 91       	pop	r29
    3e70:	cf 91       	pop	r28
    3e72:	08 95       	ret

00003e74 <Icusw_enuGetTotalTimeMilliSeconds>:

Icusw_StatusErrorType Icusw_enuGetTotalTimeMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_TotalTime){
    3e74:	cf 93       	push	r28
    3e76:	df 93       	push	r29
    3e78:	00 d0       	rcall	.+0      	; 0x3e7a <Icusw_enuGetTotalTimeMilliSeconds+0x6>
    3e7a:	00 d0       	rcall	.+0      	; 0x3e7c <Icusw_enuGetTotalTimeMilliSeconds+0x8>
    3e7c:	1f 92       	push	r1
    3e7e:	cd b7       	in	r28, 0x3d	; 61
    3e80:	de b7       	in	r29, 0x3e	; 62
    3e82:	9b 83       	std	Y+3, r25	; 0x03
    3e84:	8a 83       	std	Y+2, r24	; 0x02
    3e86:	7d 83       	std	Y+5, r23	; 0x05
    3e88:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    3e8a:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw||NULL == Address_TotalTime ){
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e90:	89 2b       	or	r24, r25
    3e92:	21 f0       	breq	.+8      	; 0x3e9c <Icusw_enuGetTotalTimeMilliSeconds+0x28>
    3e94:	8c 81       	ldd	r24, Y+4	; 0x04
    3e96:	9d 81       	ldd	r25, Y+5	; 0x05
    3e98:	89 2b       	or	r24, r25
    3e9a:	19 f4       	brne	.+6      	; 0x3ea2 <Icusw_enuGetTotalTimeMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    3e9c:	82 e0       	ldi	r24, 0x02	; 2
    3e9e:	89 83       	std	Y+1, r24	; 0x01
    3ea0:	0f c0       	rjmp	.+30     	; 0x3ec0 <Icusw_enuGetTotalTimeMilliSeconds+0x4c>
	}
	else{
		*Address_TotalTime = Global_StaticU32TotalTime;
    3ea2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Global_StaticU32TotalTime>
    3ea6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <Global_StaticU32TotalTime+0x1>
    3eaa:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <Global_StaticU32TotalTime+0x2>
    3eae:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <Global_StaticU32TotalTime+0x3>
    3eb2:	2c 81       	ldd	r18, Y+4	; 0x04
    3eb4:	3d 81       	ldd	r19, Y+5	; 0x05
    3eb6:	f9 01       	movw	r30, r18
    3eb8:	80 83       	st	Z, r24
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	a2 83       	std	Z+2, r26	; 0x02
    3ebe:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	df 91       	pop	r29
    3ece:	cf 91       	pop	r28
    3ed0:	08 95       	ret

00003ed2 <Icusw_enuGetDutyCycleMilliSeconds>:

Icusw_StatusErrorType Icusw_enuGetDutyCycleMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_DutyTime){
    3ed2:	cf 93       	push	r28
    3ed4:	df 93       	push	r29
    3ed6:	00 d0       	rcall	.+0      	; 0x3ed8 <Icusw_enuGetDutyCycleMilliSeconds+0x6>
    3ed8:	00 d0       	rcall	.+0      	; 0x3eda <Icusw_enuGetDutyCycleMilliSeconds+0x8>
    3eda:	1f 92       	push	r1
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	9b 83       	std	Y+3, r25	; 0x03
    3ee2:	8a 83       	std	Y+2, r24	; 0x02
    3ee4:	7d 83       	std	Y+5, r23	; 0x05
    3ee6:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    3ee8:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw ||NULL ==Address_DutyTime){
    3eea:	8a 81       	ldd	r24, Y+2	; 0x02
    3eec:	9b 81       	ldd	r25, Y+3	; 0x03
    3eee:	89 2b       	or	r24, r25
    3ef0:	21 f0       	breq	.+8      	; 0x3efa <Icusw_enuGetDutyCycleMilliSeconds+0x28>
    3ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ef6:	89 2b       	or	r24, r25
    3ef8:	19 f4       	brne	.+6      	; 0x3f00 <Icusw_enuGetDutyCycleMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	89 83       	std	Y+1, r24	; 0x01
    3efe:	0f c0       	rjmp	.+30     	; 0x3f1e <Icusw_enuGetDutyCycleMilliSeconds+0x4c>
	}
	else{
		*Address_DutyTime = Global_StaticU32DutyTime;
    3f00:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Global_StaticU32DutyTime>
    3f04:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Global_StaticU32DutyTime+0x1>
    3f08:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <Global_StaticU32DutyTime+0x2>
    3f0c:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <Global_StaticU32DutyTime+0x3>
    3f10:	2c 81       	ldd	r18, Y+4	; 0x04
    3f12:	3d 81       	ldd	r19, Y+5	; 0x05
    3f14:	f9 01       	movw	r30, r18
    3f16:	80 83       	st	Z, r24
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	a2 83       	std	Z+2, r26	; 0x02
    3f1c:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	0f 90       	pop	r0
    3f28:	0f 90       	pop	r0
    3f2a:	df 91       	pop	r29
    3f2c:	cf 91       	pop	r28
    3f2e:	08 95       	ret

00003f30 <Timer_voidTimerOverflowIsr>:


/************************************Static implementation ************************/

void Timer_voidTimerOverflowIsr(void){
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
	Global_StaticU32OverflowCounter++;
    3f38:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Global_StaticU32OverflowCounter>
    3f3c:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <Global_StaticU32OverflowCounter+0x1>
    3f40:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <Global_StaticU32OverflowCounter+0x2>
    3f44:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <Global_StaticU32OverflowCounter+0x3>
    3f48:	01 96       	adiw	r24, 0x01	; 1
    3f4a:	a1 1d       	adc	r26, r1
    3f4c:	b1 1d       	adc	r27, r1
    3f4e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Global_StaticU32OverflowCounter>
    3f52:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Global_StaticU32OverflowCounter+0x1>
    3f56:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <Global_StaticU32OverflowCounter+0x2>
    3f5a:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <Global_StaticU32OverflowCounter+0x3>

}
    3f5e:	00 00       	nop
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	08 95       	ret

00003f66 <Icusw_voidINT0Isr>:



void Icusw_voidINT0Isr(void){
    3f66:	cf 92       	push	r12
    3f68:	df 92       	push	r13
    3f6a:	ef 92       	push	r14
    3f6c:	ff 92       	push	r15
    3f6e:	cf 93       	push	r28
    3f70:	df 93       	push	r29
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62

	static u16 Loc_u32OnTicks = ZERO_VALUE;
	static u16 Loc_u32TotalTicks = ZERO_VALUE;

	// first edge = Rising
	if(Loc_u8Counter == ZERO_VALUE){
    3f76:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Loc_u8Counter.1783>
    3f7a:	88 23       	and	r24, r24
    3f7c:	89 f5       	brne	.+98     	; 0x3fe0 <Icusw_voidINT0Isr+0x7a>
		Loc_u8Counter++;
    3f7e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Loc_u8Counter.1783>
    3f82:	8f 5f       	subi	r24, 0xFF	; 255
    3f84:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Loc_u8Counter.1783>
		Global_StaticU32OverflowCounter = ZERO_VALUE;
    3f88:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <Global_StaticU32OverflowCounter>
    3f8c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <Global_StaticU32OverflowCounter+0x1>
    3f90:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <Global_StaticU32OverflowCounter+0x2>
    3f94:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <Global_StaticU32OverflowCounter+0x3>
		 Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);
    3f98:	62 e0       	ldi	r22, 0x02	; 2
    3f9a:	80 e0       	ldi	r24, 0x00	; 0
    3f9c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Exti_enuEnable>

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    3fa0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Global_StaticINTxWhichTimer>
    3fa4:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Global_StaticINTxWhichTimer+0x1>
    3fa8:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <Global_StaticINTxWhichTimer+0x2>
    3fac:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <Global_StaticINTxWhichTimer+0x3>
    3fb0:	81 30       	cpi	r24, 0x01	; 1
    3fb2:	91 05       	cpc	r25, r1
    3fb4:	a1 05       	cpc	r26, r1
    3fb6:	b1 05       	cpc	r27, r1
    3fb8:	09 f4       	brne	.+2      	; 0x3fbc <Icusw_voidINT0Isr+0x56>
    3fba:	44 c1       	rjmp	.+648    	; 0x4244 <Icusw_voidINT0Isr+0x2de>
    3fbc:	81 30       	cpi	r24, 0x01	; 1
    3fbe:	91 05       	cpc	r25, r1
    3fc0:	a1 05       	cpc	r26, r1
    3fc2:	b1 05       	cpc	r27, r1
    3fc4:	30 f0       	brcs	.+12     	; 0x3fd2 <Icusw_voidINT0Isr+0x6c>
    3fc6:	02 97       	sbiw	r24, 0x02	; 2
    3fc8:	a1 05       	cpc	r26, r1
    3fca:	b1 05       	cpc	r27, r1
    3fcc:	09 f4       	brne	.+2      	; 0x3fd0 <Icusw_voidINT0Isr+0x6a>
    3fce:	3c c1       	rjmp	.+632    	; 0x4248 <Icusw_voidINT0Isr+0x2e2>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    3fd0:	40 c1       	rjmp	.+640    	; 0x4252 <Icusw_voidINT0Isr+0x2ec>
		 Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16FirstTicks);
    3fd2:	6e e3       	ldi	r22, 0x3E	; 62
    3fd4:	71 e0       	ldi	r23, 0x01	; 1
    3fd6:	81 ea       	ldi	r24, 0xA1	; 161
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	0e 94 86 0a 	call	0x150c	; 0x150c <Timer0_enuGetTimeElapsed>

			break;
    3fde:	39 c1       	rjmp	.+626    	; 0x4252 <Icusw_voidINT0Isr+0x2ec>
		}


	}

	else if(Loc_u8Counter == ONE_VALUE){
    3fe0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Loc_u8Counter.1783>
    3fe4:	81 30       	cpi	r24, 0x01	; 1
    3fe6:	09 f0       	breq	.+2      	; 0x3fea <Icusw_voidINT0Isr+0x84>
    3fe8:	49 c0       	rjmp	.+146    	; 0x407c <Icusw_voidINT0Isr+0x116>

		Loc_u8Counter++;
    3fea:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Loc_u8Counter.1783>
    3fee:	8f 5f       	subi	r24, 0xFF	; 255
    3ff0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Loc_u8Counter.1783>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
    3ff4:	63 e0       	ldi	r22, 0x03	; 3
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Exti_enuEnable>
		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    3ffc:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Global_StaticINTxWhichTimer>
    4000:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Global_StaticINTxWhichTimer+0x1>
    4004:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <Global_StaticINTxWhichTimer+0x2>
    4008:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <Global_StaticINTxWhichTimer+0x3>
    400c:	81 30       	cpi	r24, 0x01	; 1
    400e:	91 05       	cpc	r25, r1
    4010:	a1 05       	cpc	r26, r1
    4012:	b1 05       	cpc	r27, r1
    4014:	09 f4       	brne	.+2      	; 0x4018 <Icusw_voidINT0Isr+0xb2>
    4016:	1a c1       	rjmp	.+564    	; 0x424c <Icusw_voidINT0Isr+0x2e6>
    4018:	81 30       	cpi	r24, 0x01	; 1
    401a:	91 05       	cpc	r25, r1
    401c:	a1 05       	cpc	r26, r1
    401e:	b1 05       	cpc	r27, r1
    4020:	30 f0       	brcs	.+12     	; 0x402e <Icusw_voidINT0Isr+0xc8>
    4022:	02 97       	sbiw	r24, 0x02	; 2
    4024:	a1 05       	cpc	r26, r1
    4026:	b1 05       	cpc	r27, r1
    4028:	09 f4       	brne	.+2      	; 0x402c <Icusw_voidINT0Isr+0xc6>
    402a:	12 c1       	rjmp	.+548    	; 0x4250 <Icusw_voidINT0Isr+0x2ea>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    402c:	12 c1       	rjmp	.+548    	; 0x4252 <Icusw_voidINT0Isr+0x2ec>
		Loc_u8Counter++;
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16SecondTicks);
    402e:	60 e4       	ldi	r22, 0x40	; 64
    4030:	71 e0       	ldi	r23, 0x01	; 1
    4032:	81 ea       	ldi	r24, 0xA1	; 161
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 86 0a 	call	0x150c	; 0x150c <Timer0_enuGetTimeElapsed>
			Loc_u32OnTicks = Loc_u16SecondTicks + (Global_StaticU32OverflowCounter*255)-Loc_u16FirstTicks;
    403a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Global_StaticU32OverflowCounter>
    403e:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <Global_StaticU32OverflowCounter+0x1>
    4042:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <Global_StaticU32OverflowCounter+0x2>
    4046:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <Global_StaticU32OverflowCounter+0x3>
    404a:	4f ef       	ldi	r20, 0xFF	; 255
    404c:	48 9f       	mul	r20, r24
    404e:	90 01       	movw	r18, r0
    4050:	49 9f       	mul	r20, r25
    4052:	30 0d       	add	r19, r0
    4054:	11 24       	eor	r1, r1
    4056:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Loc_u16SecondTicks.1785>
    405a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Loc_u16SecondTicks.1785+0x1>
    405e:	28 0f       	add	r18, r24
    4060:	39 1f       	adc	r19, r25
    4062:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Loc_u16FirstTicks.1784>
    4066:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Loc_u16FirstTicks.1784+0x1>
    406a:	a9 01       	movw	r20, r18
    406c:	48 1b       	sub	r20, r24
    406e:	59 0b       	sbc	r21, r25
    4070:	ca 01       	movw	r24, r20
    4072:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <Loc_u32OnTicks.1787+0x1>
    4076:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Loc_u32OnTicks.1787>



			break;
    407a:	eb c0       	rjmp	.+470    	; 0x4252 <Icusw_voidINT0Isr+0x2ec>
		default:
			break;
		}
	}

	else if(Loc_u8Counter == TWO_VALUE){
    407c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Loc_u8Counter.1783>
    4080:	82 30       	cpi	r24, 0x02	; 2
    4082:	09 f0       	breq	.+2      	; 0x4086 <Icusw_voidINT0Isr+0x120>
    4084:	e6 c0       	rjmp	.+460    	; 0x4252 <Icusw_voidINT0Isr+0x2ec>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);
    4086:	62 e0       	ldi	r22, 0x02	; 2
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Exti_enuEnable>

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    408e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Global_StaticINTxWhichTimer>
    4092:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Global_StaticINTxWhichTimer+0x1>
    4096:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <Global_StaticINTxWhichTimer+0x2>
    409a:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <Global_StaticINTxWhichTimer+0x3>
    409e:	81 30       	cpi	r24, 0x01	; 1
    40a0:	91 05       	cpc	r25, r1
    40a2:	a1 05       	cpc	r26, r1
    40a4:	b1 05       	cpc	r27, r1
    40a6:	89 f1       	breq	.+98     	; 0x410a <Icusw_voidINT0Isr+0x1a4>
    40a8:	81 30       	cpi	r24, 0x01	; 1
    40aa:	91 05       	cpc	r25, r1
    40ac:	a1 05       	cpc	r26, r1
    40ae:	b1 05       	cpc	r27, r1
    40b0:	28 f0       	brcs	.+10     	; 0x40bc <Icusw_voidINT0Isr+0x156>
    40b2:	02 97       	sbiw	r24, 0x02	; 2
    40b4:	a1 05       	cpc	r26, r1
    40b6:	b1 05       	cpc	r27, r1
    40b8:	51 f1       	breq	.+84     	; 0x410e <Icusw_voidINT0Isr+0x1a8>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    40ba:	2a c0       	rjmp	.+84     	; 0x4110 <Icusw_voidINT0Isr+0x1aa>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16ThirdTicks);
    40bc:	64 e4       	ldi	r22, 0x44	; 68
    40be:	71 e0       	ldi	r23, 0x01	; 1
    40c0:	81 ea       	ldi	r24, 0xA1	; 161
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	0e 94 86 0a 	call	0x150c	; 0x150c <Timer0_enuGetTimeElapsed>
			Loc_u32TotalTicks = Loc_u16ThirdTicks + (Global_StaticU32OverflowCounter*255)-Loc_u16FirstTicks;
    40c8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Global_StaticU32OverflowCounter>
    40cc:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <Global_StaticU32OverflowCounter+0x1>
    40d0:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <Global_StaticU32OverflowCounter+0x2>
    40d4:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <Global_StaticU32OverflowCounter+0x3>
    40d8:	4f ef       	ldi	r20, 0xFF	; 255
    40da:	48 9f       	mul	r20, r24
    40dc:	90 01       	movw	r18, r0
    40de:	49 9f       	mul	r20, r25
    40e0:	30 0d       	add	r19, r0
    40e2:	11 24       	eor	r1, r1
    40e4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <Loc_u16ThirdTicks.1786>
    40e8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <Loc_u16ThirdTicks.1786+0x1>
    40ec:	28 0f       	add	r18, r24
    40ee:	39 1f       	adc	r19, r25
    40f0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <Loc_u16FirstTicks.1784>
    40f4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <Loc_u16FirstTicks.1784+0x1>
    40f8:	a9 01       	movw	r20, r18
    40fa:	48 1b       	sub	r20, r24
    40fc:	59 0b       	sbc	r21, r25
    40fe:	ca 01       	movw	r24, r20
    4100:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <Loc_u32TotalTicks.1788+0x1>
    4104:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <Loc_u32TotalTicks.1788>


			break;
    4108:	03 c0       	rjmp	.+6      	; 0x4110 <Icusw_voidINT0Isr+0x1aa>
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    410a:	00 00       	nop
    410c:	01 c0       	rjmp	.+2      	; 0x4110 <Icusw_voidINT0Isr+0x1aa>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    410e:	00 00       	nop

		default:
			break;
		}

		Global_StaticU32TotalTime = Loc_u32TotalTicks*ICUSW_16M_PRESCALER_DIV_1024_TIMER0;
    4110:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <Loc_u32TotalTicks.1788>
    4114:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <Loc_u32TotalTicks.1788+0x1>
    4118:	cc 01       	movw	r24, r24
    411a:	a0 e0       	ldi	r26, 0x00	; 0
    411c:	b0 e0       	ldi	r27, 0x00	; 0
    411e:	bc 01       	movw	r22, r24
    4120:	cd 01       	movw	r24, r26
    4122:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__floatunsisf>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	2f e6       	ldi	r18, 0x6F	; 111
    412c:	32 e1       	ldi	r19, 0x12	; 18
    412e:	43 e8       	ldi	r20, 0x83	; 131
    4130:	5d e3       	ldi	r21, 0x3D	; 61
    4132:	bc 01       	movw	r22, r24
    4134:	cd 01       	movw	r24, r26
    4136:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	bc 01       	movw	r22, r24
    4140:	cd 01       	movw	r24, r26
    4142:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Global_StaticU32TotalTime>
    414e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <Global_StaticU32TotalTime+0x1>
    4152:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <Global_StaticU32TotalTime+0x2>
    4156:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <Global_StaticU32TotalTime+0x3>
		Global_StaticU32OnTime = Loc_u32OnTicks*ICUSW_16M_PRESCALER_DIV_1024_TIMER0 ;
    415a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Loc_u32OnTicks.1787>
    415e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <Loc_u32OnTicks.1787+0x1>
    4162:	cc 01       	movw	r24, r24
    4164:	a0 e0       	ldi	r26, 0x00	; 0
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	bc 01       	movw	r22, r24
    416a:	cd 01       	movw	r24, r26
    416c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__floatunsisf>
    4170:	dc 01       	movw	r26, r24
    4172:	cb 01       	movw	r24, r22
    4174:	2f e6       	ldi	r18, 0x6F	; 111
    4176:	32 e1       	ldi	r19, 0x12	; 18
    4178:	43 e8       	ldi	r20, 0x83	; 131
    417a:	5d e3       	ldi	r21, 0x3D	; 61
    417c:	bc 01       	movw	r22, r24
    417e:	cd 01       	movw	r24, r26
    4180:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	bc 01       	movw	r22, r24
    418a:	cd 01       	movw	r24, r26
    418c:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <Global_StaticU32OnTime>
    4198:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <Global_StaticU32OnTime+0x1>
    419c:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <Global_StaticU32OnTime+0x2>
    41a0:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <Global_StaticU32OnTime+0x3>
		Global_StaticU32DutyTime = ((f32)Global_StaticU32OnTime /Global_StaticU32TotalTime)*100;
    41a4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Global_StaticU32OnTime>
    41a8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <Global_StaticU32OnTime+0x1>
    41ac:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <Global_StaticU32OnTime+0x2>
    41b0:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <Global_StaticU32OnTime+0x3>
    41b4:	bc 01       	movw	r22, r24
    41b6:	cd 01       	movw	r24, r26
    41b8:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__floatunsisf>
    41bc:	6b 01       	movw	r12, r22
    41be:	7c 01       	movw	r14, r24
    41c0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Global_StaticU32TotalTime>
    41c4:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <Global_StaticU32TotalTime+0x1>
    41c8:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <Global_StaticU32TotalTime+0x2>
    41cc:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <Global_StaticU32TotalTime+0x3>
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__floatunsisf>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	9c 01       	movw	r18, r24
    41de:	ad 01       	movw	r20, r26
    41e0:	c7 01       	movw	r24, r14
    41e2:	b6 01       	movw	r22, r12
    41e4:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__divsf3>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	48 ec       	ldi	r20, 0xC8	; 200
    41f2:	52 e4       	ldi	r21, 0x42	; 66
    41f4:	bc 01       	movw	r22, r24
    41f6:	cd 01       	movw	r24, r26
    41f8:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    41fc:	dc 01       	movw	r26, r24
    41fe:	cb 01       	movw	r24, r22
    4200:	bc 01       	movw	r22, r24
    4202:	cd 01       	movw	r24, r26
    4204:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Global_StaticU32DutyTime>
    4210:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <Global_StaticU32DutyTime+0x1>
    4214:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <Global_StaticU32DutyTime+0x2>
    4218:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <Global_StaticU32DutyTime+0x3>

		Global_StaticU32OverflowCounter = ZERO_VALUE;
    421c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <Global_StaticU32OverflowCounter>
    4220:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <Global_StaticU32OverflowCounter+0x1>
    4224:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <Global_StaticU32OverflowCounter+0x2>
    4228:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <Global_StaticU32OverflowCounter+0x3>
		Loc_u8Counter = ONE_VALUE;
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Loc_u8Counter.1783>
		Loc_u16FirstTicks =Loc_u16ThirdTicks;
    4232:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <Loc_u16ThirdTicks.1786>
    4236:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <Loc_u16ThirdTicks.1786+0x1>
    423a:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <Loc_u16FirstTicks.1784+0x1>
    423e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <Loc_u16FirstTicks.1784>



	}

}
    4242:	07 c0       	rjmp	.+14     	; 0x4252 <Icusw_voidINT0Isr+0x2ec>
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16FirstTicks);

			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    4244:	00 00       	nop
    4246:	05 c0       	rjmp	.+10     	; 0x4252 <Icusw_voidINT0Isr+0x2ec>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    4248:	00 00       	nop
    424a:	03 c0       	rjmp	.+6      	; 0x4252 <Icusw_voidINT0Isr+0x2ec>


			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    424c:	00 00       	nop
    424e:	01 c0       	rjmp	.+2      	; 0x4252 <Icusw_voidINT0Isr+0x2ec>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    4250:	00 00       	nop



	}

}
    4252:	00 00       	nop
    4254:	df 91       	pop	r29
    4256:	cf 91       	pop	r28
    4258:	ff 90       	pop	r15
    425a:	ef 90       	pop	r14
    425c:	df 90       	pop	r13
    425e:	cf 90       	pop	r12
    4260:	08 95       	ret

00004262 <Icusw_voidINT1Isr>:


void Icusw_voidINT1Isr(void){
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62

}
    426a:	00 00       	nop
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	08 95       	ret

00004272 <Icusw_voidINT2Isr>:
void Icusw_voidINT2Isr(void){
    4272:	cf 93       	push	r28
    4274:	df 93       	push	r29
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62

}
    427a:	00 00       	nop
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
    4280:	08 95       	ret

00004282 <Button_enuRead>:



/********************************** Software Interfaces Declarations *******************/

Button_StatusErrorType Button_enuRead(const Button_ConfigType *Address_Button,Button_PressStatusType* Address_State ){
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	00 d0       	rcall	.+0      	; 0x4288 <Button_enuRead+0x6>
    4288:	00 d0       	rcall	.+0      	; 0x428a <Button_enuRead+0x8>
    428a:	00 d0       	rcall	.+0      	; 0x428c <Button_enuRead+0xa>
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	9c 83       	std	Y+4, r25	; 0x04
    4292:	8b 83       	std	Y+3, r24	; 0x03
    4294:	7e 83       	std	Y+6, r23	; 0x06
    4296:	6d 83       	std	Y+5, r22	; 0x05

	Button_StatusErrorType Loc_enuStatus = BUTTON_STATUS_OK;
    4298:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    429a:	1a 82       	std	Y+2, r1	; 0x02
	if( NULL == Address_Button || NULL == Address_State ){
    429c:	8b 81       	ldd	r24, Y+3	; 0x03
    429e:	9c 81       	ldd	r25, Y+4	; 0x04
    42a0:	89 2b       	or	r24, r25
    42a2:	21 f0       	breq	.+8      	; 0x42ac <Button_enuRead+0x2a>
    42a4:	8d 81       	ldd	r24, Y+5	; 0x05
    42a6:	9e 81       	ldd	r25, Y+6	; 0x06
    42a8:	89 2b       	or	r24, r25
    42aa:	19 f4       	brne	.+6      	; 0x42b2 <Button_enuRead+0x30>
		Loc_enuStatus = BUTTON_STATUS_NULL_POINTER_ADDRESS;
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	89 83       	std	Y+1, r24	; 0x01
    42b0:	31 c0       	rjmp	.+98     	; 0x4314 <Button_enuRead+0x92>

	}
	else{
	        switch(Address_Button->button_connection){
    42b2:	8b 81       	ldd	r24, Y+3	; 0x03
    42b4:	9c 81       	ldd	r25, Y+4	; 0x04
    42b6:	fc 01       	movw	r30, r24
    42b8:	81 81       	ldd	r24, Z+1	; 0x01
    42ba:	88 2f       	mov	r24, r24
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	00 97       	sbiw	r24, 0x00	; 0
    42c0:	71 f0       	breq	.+28     	; 0x42de <Button_enuRead+0x5c>
    42c2:	01 97       	sbiw	r24, 0x01	; 1
    42c4:	29 f5       	brne	.+74     	; 0x4310 <Button_enuRead+0x8e>

	            case BUTTON_CONNECTION_PULL_DOWN:
	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    42c6:	8b 81       	ldd	r24, Y+3	; 0x03
    42c8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ca:	fc 01       	movw	r30, r24
    42cc:	20 81       	ld	r18, Z
    42ce:	8d 81       	ldd	r24, Y+5	; 0x05
    42d0:	9e 81       	ldd	r25, Y+6	; 0x06
    42d2:	bc 01       	movw	r22, r24
    42d4:	82 2f       	mov	r24, r18
    42d6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Dio_enuReadChannel>
    42da:	8a 83       	std	Y+2, r24	; 0x02
	                break;
    42dc:	1b c0       	rjmp	.+54     	; 0x4314 <Button_enuRead+0x92>
	            case BUTTON_CONNECTION_PULL_UP:

	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    42de:	8b 81       	ldd	r24, Y+3	; 0x03
    42e0:	9c 81       	ldd	r25, Y+4	; 0x04
    42e2:	fc 01       	movw	r30, r24
    42e4:	20 81       	ld	r18, Z
    42e6:	8d 81       	ldd	r24, Y+5	; 0x05
    42e8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ea:	bc 01       	movw	r22, r24
    42ec:	82 2f       	mov	r24, r18
    42ee:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Dio_enuReadChannel>
    42f2:	8a 83       	std	Y+2, r24	; 0x02
	                *Address_State = !(*Address_State);
    42f4:	8d 81       	ldd	r24, Y+5	; 0x05
    42f6:	9e 81       	ldd	r25, Y+6	; 0x06
    42f8:	fc 01       	movw	r30, r24
    42fa:	90 81       	ld	r25, Z
    42fc:	81 e0       	ldi	r24, 0x01	; 1
    42fe:	99 23       	and	r25, r25
    4300:	09 f0       	breq	.+2      	; 0x4304 <Button_enuRead+0x82>
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	28 2f       	mov	r18, r24
    4306:	8d 81       	ldd	r24, Y+5	; 0x05
    4308:	9e 81       	ldd	r25, Y+6	; 0x06
    430a:	fc 01       	movw	r30, r24
    430c:	20 83       	st	Z, r18
	                break;
    430e:	02 c0       	rjmp	.+4      	; 0x4314 <Button_enuRead+0x92>

	            default:
	                Loc_enuStatus = BUTTON_STATUS_FAIL;
    4310:	81 e0       	ldi	r24, 0x01	; 1
    4312:	89 83       	std	Y+1, r24	; 0x01
	    }




	return Loc_enuStatus;
    4314:	89 81       	ldd	r24, Y+1	; 0x01

}
    4316:	26 96       	adiw	r28, 0x06	; 6
    4318:	0f b6       	in	r0, 0x3f	; 63
    431a:	f8 94       	cli
    431c:	de bf       	out	0x3e, r29	; 62
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	cd bf       	out	0x3d, r28	; 61
    4322:	df 91       	pop	r29
    4324:	cf 91       	pop	r28
    4326:	08 95       	ret

00004328 <Timer1_Isr>:

u64 Global_u64OverflowCounter =ZERO_VALUE;

////////////////////////////////////////////////////////

void Timer1_Isr(void){
    4328:	af 92       	push	r10
    432a:	bf 92       	push	r11
    432c:	cf 92       	push	r12
    432e:	df 92       	push	r13
    4330:	ef 92       	push	r14
    4332:	ff 92       	push	r15
    4334:	0f 93       	push	r16
    4336:	1f 93       	push	r17
    4338:	cf 93       	push	r28
    433a:	df 93       	push	r29
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
	Global_u64OverflowCounter++;
    4340:	a0 90 70 01 	lds	r10, 0x0170	; 0x800170 <Global_u64OverflowCounter>
    4344:	b0 90 71 01 	lds	r11, 0x0171	; 0x800171 <Global_u64OverflowCounter+0x1>
    4348:	c0 90 72 01 	lds	r12, 0x0172	; 0x800172 <Global_u64OverflowCounter+0x2>
    434c:	d0 90 73 01 	lds	r13, 0x0173	; 0x800173 <Global_u64OverflowCounter+0x3>
    4350:	e0 90 74 01 	lds	r14, 0x0174	; 0x800174 <Global_u64OverflowCounter+0x4>
    4354:	f0 90 75 01 	lds	r15, 0x0175	; 0x800175 <Global_u64OverflowCounter+0x5>
    4358:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <Global_u64OverflowCounter+0x6>
    435c:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <Global_u64OverflowCounter+0x7>
    4360:	2a 2d       	mov	r18, r10
    4362:	3b 2d       	mov	r19, r11
    4364:	4c 2d       	mov	r20, r12
    4366:	5d 2d       	mov	r21, r13
    4368:	6e 2d       	mov	r22, r14
    436a:	7f 2d       	mov	r23, r15
    436c:	80 2f       	mov	r24, r16
    436e:	91 2f       	mov	r25, r17
    4370:	a1 e0       	ldi	r26, 0x01	; 1
    4372:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__adddi3_s8>
    4376:	a2 2e       	mov	r10, r18
    4378:	b3 2e       	mov	r11, r19
    437a:	c4 2e       	mov	r12, r20
    437c:	d5 2e       	mov	r13, r21
    437e:	e6 2e       	mov	r14, r22
    4380:	f7 2e       	mov	r15, r23
    4382:	08 2f       	mov	r16, r24
    4384:	19 2f       	mov	r17, r25
    4386:	a0 92 70 01 	sts	0x0170, r10	; 0x800170 <Global_u64OverflowCounter>
    438a:	b0 92 71 01 	sts	0x0171, r11	; 0x800171 <Global_u64OverflowCounter+0x1>
    438e:	c0 92 72 01 	sts	0x0172, r12	; 0x800172 <Global_u64OverflowCounter+0x2>
    4392:	d0 92 73 01 	sts	0x0173, r13	; 0x800173 <Global_u64OverflowCounter+0x3>
    4396:	e0 92 74 01 	sts	0x0174, r14	; 0x800174 <Global_u64OverflowCounter+0x4>
    439a:	f0 92 75 01 	sts	0x0175, r15	; 0x800175 <Global_u64OverflowCounter+0x5>
    439e:	00 93 76 01 	sts	0x0176, r16	; 0x800176 <Global_u64OverflowCounter+0x6>
    43a2:	10 93 77 01 	sts	0x0177, r17	; 0x800177 <Global_u64OverflowCounter+0x7>
}
    43a6:	00 00       	nop
    43a8:	df 91       	pop	r29
    43aa:	cf 91       	pop	r28
    43ac:	1f 91       	pop	r17
    43ae:	0f 91       	pop	r16
    43b0:	ff 90       	pop	r15
    43b2:	ef 90       	pop	r14
    43b4:	df 90       	pop	r13
    43b6:	cf 90       	pop	r12
    43b8:	bf 90       	pop	r11
    43ba:	af 90       	pop	r10
    43bc:	08 95       	ret

000043be <Icu_Isr>:

void Icu_Isr(void){
    43be:	2f 92       	push	r2
    43c0:	3f 92       	push	r3
    43c2:	4f 92       	push	r4
    43c4:	5f 92       	push	r5
    43c6:	6f 92       	push	r6
    43c8:	7f 92       	push	r7
    43ca:	8f 92       	push	r8
    43cc:	9f 92       	push	r9
    43ce:	af 92       	push	r10
    43d0:	bf 92       	push	r11
    43d2:	cf 92       	push	r12
    43d4:	df 92       	push	r13
    43d6:	ef 92       	push	r14
    43d8:	ff 92       	push	r15
    43da:	0f 93       	push	r16
    43dc:	1f 93       	push	r17
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    43e2:	cd b7       	in	r28, 0x3d	; 61
    43e4:	de b7       	in	r29, 0x3e	; 62
    43e6:	64 97       	sbiw	r28, 0x14	; 20
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	de bf       	out	0x3e, r29	; 62
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	cd bf       	out	0x3d, r28	; 61

	f64 Loc_f64TickTimeMiliSeconds = 0.016;  /* Prescaler/16000000 */
    43f2:	8f e6       	ldi	r24, 0x6F	; 111
    43f4:	92 e1       	ldi	r25, 0x12	; 18
    43f6:	a3 e8       	ldi	r26, 0x83	; 131
    43f8:	bc e3       	ldi	r27, 0x3C	; 60
    43fa:	89 83       	std	Y+1, r24	; 0x01
    43fc:	9a 83       	std	Y+2, r25	; 0x02
    43fe:	ab 83       	std	Y+3, r26	; 0x03
    4400:	bc 83       	std	Y+4, r27	; 0x04
	static u16 Loc_u16FirstTicks = ZERO_VALUE;
	static u16 Loc_u16SecondTicks = ZERO_VALUE;
	static u16 Loc_u16ThirdTicks = ZERO_VALUE;


	if(Loc_u8Counter == ZERO_VALUE){
    4402:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Loc_u8Counter.2260>
    4406:	88 23       	and	r24, r24
    4408:	e1 f4       	brne	.+56     	; 0x4442 <Icu_Isr+0x84>
		Loc_u8Counter++;
    440a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Loc_u8Counter.2260>
    440e:	8f 5f       	subi	r24, 0xFF	; 255
    4410:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <Loc_u8Counter.2260>
		Global_u64OverflowCounter = ZERO_VALUE;
    4414:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <Global_u64OverflowCounter>
    4418:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <Global_u64OverflowCounter+0x1>
    441c:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Global_u64OverflowCounter+0x2>
    4420:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Global_u64OverflowCounter+0x3>
    4424:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Global_u64OverflowCounter+0x4>
    4428:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Global_u64OverflowCounter+0x5>
    442c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <Global_u64OverflowCounter+0x6>
    4430:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <Global_u64OverflowCounter+0x7>
		Timer1_enuToggleEdgeIcu();
    4434:	0e 94 9d 08 	call	0x113a	; 0x113a <Timer1_enuToggleEdgeIcu>
		Timer1_enuGetTimeElapsedIcu(&Loc_u16FirstTicks);
    4438:	89 e7       	ldi	r24, 0x79	; 121
    443a:	91 e0       	ldi	r25, 0x01	; 1
    443c:	0e 94 17 08 	call	0x102e	; 0x102e <Timer1_enuGetTimeElapsedIcu>
		Loc_u16FirstTicks = Loc_u16ThirdTicks;
		Global_u64OverflowCounter = ZERO_VALUE;

	}

}
    4440:	4e c2       	rjmp	.+1180   	; 0x48de <Icu_Isr+0x520>
		Timer1_enuToggleEdgeIcu();
		Timer1_enuGetTimeElapsedIcu(&Loc_u16FirstTicks);


	}
	else if (Loc_u8Counter == ONE_VALUE){
    4442:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Loc_u8Counter.2260>
    4446:	81 30       	cpi	r24, 0x01	; 1
    4448:	09 f0       	breq	.+2      	; 0x444c <Icu_Isr+0x8e>
    444a:	e2 c0       	rjmp	.+452    	; 0x4610 <Icu_Isr+0x252>
		Loc_u8Counter++;
    444c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Loc_u8Counter.2260>
    4450:	8f 5f       	subi	r24, 0xFF	; 255
    4452:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <Loc_u8Counter.2260>
		Timer1_enuToggleEdgeIcu();
    4456:	0e 94 9d 08 	call	0x113a	; 0x113a <Timer1_enuToggleEdgeIcu>
		Timer1_enuGetTimeElapsedIcu(&Loc_u16SecondTicks);
    445a:	8b e7       	ldi	r24, 0x7B	; 123
    445c:	91 e0       	ldi	r25, 0x01	; 1
    445e:	0e 94 17 08 	call	0x102e	; 0x102e <Timer1_enuGetTimeElapsedIcu>
		Global_u64OnTicks = Loc_u16SecondTicks + (Global_u64OverflowCounter * TIMER1_16BIT_MAX_REGISTER_VALUE)-Loc_u16FirstTicks;
    4462:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <Loc_u16SecondTicks.2262>
    4466:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <Loc_u16SecondTicks.2262+0x1>
    446a:	8c 01       	movw	r16, r24
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	40 e0       	ldi	r20, 0x00	; 0
    4472:	50 e0       	ldi	r21, 0x00	; 0
    4474:	ba 01       	movw	r22, r20
    4476:	0d 83       	std	Y+5, r16	; 0x05
    4478:	1e 83       	std	Y+6, r17	; 0x06
    447a:	2f 83       	std	Y+7, r18	; 0x07
    447c:	38 87       	std	Y+8, r19	; 0x08
    447e:	49 87       	std	Y+9, r20	; 0x09
    4480:	5a 87       	std	Y+10, r21	; 0x0a
    4482:	6b 87       	std	Y+11, r22	; 0x0b
    4484:	7c 87       	std	Y+12, r23	; 0x0c
    4486:	20 90 70 01 	lds	r2, 0x0170	; 0x800170 <Global_u64OverflowCounter>
    448a:	30 90 71 01 	lds	r3, 0x0171	; 0x800171 <Global_u64OverflowCounter+0x1>
    448e:	40 90 72 01 	lds	r4, 0x0172	; 0x800172 <Global_u64OverflowCounter+0x2>
    4492:	50 90 73 01 	lds	r5, 0x0173	; 0x800173 <Global_u64OverflowCounter+0x3>
    4496:	60 90 74 01 	lds	r6, 0x0174	; 0x800174 <Global_u64OverflowCounter+0x4>
    449a:	70 90 75 01 	lds	r7, 0x0175	; 0x800175 <Global_u64OverflowCounter+0x5>
    449e:	80 90 76 01 	lds	r8, 0x0176	; 0x800176 <Global_u64OverflowCounter+0x6>
    44a2:	90 90 77 01 	lds	r9, 0x0177	; 0x800177 <Global_u64OverflowCounter+0x7>
    44a6:	aa 24       	eor	r10, r10
    44a8:	aa 94       	dec	r10
    44aa:	bb 24       	eor	r11, r11
    44ac:	ba 94       	dec	r11
    44ae:	c1 2c       	mov	r12, r1
    44b0:	d1 2c       	mov	r13, r1
    44b2:	e1 2c       	mov	r14, r1
    44b4:	f1 2c       	mov	r15, r1
    44b6:	00 e0       	ldi	r16, 0x00	; 0
    44b8:	10 e0       	ldi	r17, 0x00	; 0
    44ba:	22 2d       	mov	r18, r2
    44bc:	33 2d       	mov	r19, r3
    44be:	44 2d       	mov	r20, r4
    44c0:	55 2d       	mov	r21, r5
    44c2:	66 2d       	mov	r22, r6
    44c4:	77 2d       	mov	r23, r7
    44c6:	88 2d       	mov	r24, r8
    44c8:	99 2d       	mov	r25, r9
    44ca:	0e 94 98 25 	call	0x4b30	; 0x4b30 <__muldi3>
    44ce:	a2 2e       	mov	r10, r18
    44d0:	b3 2e       	mov	r11, r19
    44d2:	c4 2e       	mov	r12, r20
    44d4:	d5 2e       	mov	r13, r21
    44d6:	e6 2e       	mov	r14, r22
    44d8:	f7 2e       	mov	r15, r23
    44da:	08 2f       	mov	r16, r24
    44dc:	19 2f       	mov	r17, r25
    44de:	2a 2c       	mov	r2, r10
    44e0:	3b 2c       	mov	r3, r11
    44e2:	4c 2c       	mov	r4, r12
    44e4:	5d 2c       	mov	r5, r13
    44e6:	6e 2c       	mov	r6, r14
    44e8:	7f 2c       	mov	r7, r15
    44ea:	80 2e       	mov	r8, r16
    44ec:	91 2e       	mov	r9, r17
    44ee:	2d 81       	ldd	r18, Y+5	; 0x05
    44f0:	3e 81       	ldd	r19, Y+6	; 0x06
    44f2:	4f 81       	ldd	r20, Y+7	; 0x07
    44f4:	58 85       	ldd	r21, Y+8	; 0x08
    44f6:	69 85       	ldd	r22, Y+9	; 0x09
    44f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    44fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    44fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    44fe:	a2 2c       	mov	r10, r2
    4500:	b3 2c       	mov	r11, r3
    4502:	c4 2c       	mov	r12, r4
    4504:	d5 2c       	mov	r13, r5
    4506:	e6 2c       	mov	r14, r6
    4508:	f7 2c       	mov	r15, r7
    450a:	08 2d       	mov	r16, r8
    450c:	19 2d       	mov	r17, r9
    450e:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
    4512:	a2 2e       	mov	r10, r18
    4514:	b3 2e       	mov	r11, r19
    4516:	c4 2e       	mov	r12, r20
    4518:	d5 2e       	mov	r13, r21
    451a:	e6 2e       	mov	r14, r22
    451c:	f7 2e       	mov	r15, r23
    451e:	08 2f       	mov	r16, r24
    4520:	19 2f       	mov	r17, r25
    4522:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <Loc_u16FirstTicks.2261>
    4526:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <Loc_u16FirstTicks.2261+0x1>
    452a:	1c 01       	movw	r2, r24
    452c:	41 2c       	mov	r4, r1
    452e:	51 2c       	mov	r5, r1
    4530:	61 2c       	mov	r6, r1
    4532:	71 2c       	mov	r7, r1
    4534:	43 01       	movw	r8, r6
    4536:	2a 2d       	mov	r18, r10
    4538:	3b 2d       	mov	r19, r11
    453a:	4c 2d       	mov	r20, r12
    453c:	5d 2d       	mov	r21, r13
    453e:	6e 2d       	mov	r22, r14
    4540:	7f 2d       	mov	r23, r15
    4542:	80 2f       	mov	r24, r16
    4544:	91 2f       	mov	r25, r17
    4546:	a2 2c       	mov	r10, r2
    4548:	b3 2c       	mov	r11, r3
    454a:	c4 2c       	mov	r12, r4
    454c:	d5 2c       	mov	r13, r5
    454e:	e6 2c       	mov	r14, r6
    4550:	f7 2c       	mov	r15, r7
    4552:	08 2d       	mov	r16, r8
    4554:	19 2d       	mov	r17, r9
    4556:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <__subdi3>
    455a:	a2 2e       	mov	r10, r18
    455c:	b3 2e       	mov	r11, r19
    455e:	c4 2e       	mov	r12, r20
    4560:	d5 2e       	mov	r13, r21
    4562:	e6 2e       	mov	r14, r22
    4564:	f7 2e       	mov	r15, r23
    4566:	08 2f       	mov	r16, r24
    4568:	19 2f       	mov	r17, r25
    456a:	a0 92 60 01 	sts	0x0160, r10	; 0x800160 <Global_u64OnTicks>
    456e:	b0 92 61 01 	sts	0x0161, r11	; 0x800161 <Global_u64OnTicks+0x1>
    4572:	c0 92 62 01 	sts	0x0162, r12	; 0x800162 <Global_u64OnTicks+0x2>
    4576:	d0 92 63 01 	sts	0x0163, r13	; 0x800163 <Global_u64OnTicks+0x3>
    457a:	e0 92 64 01 	sts	0x0164, r14	; 0x800164 <Global_u64OnTicks+0x4>
    457e:	f0 92 65 01 	sts	0x0165, r15	; 0x800165 <Global_u64OnTicks+0x5>
    4582:	00 93 66 01 	sts	0x0166, r16	; 0x800166 <Global_u64OnTicks+0x6>
    4586:	10 93 67 01 	sts	0x0167, r17	; 0x800167 <Global_u64OnTicks+0x7>
		Global_u64OnTime = Global_u64OnTicks * Loc_f64TickTimeMiliSeconds;
    458a:	a0 90 60 01 	lds	r10, 0x0160	; 0x800160 <Global_u64OnTicks>
    458e:	b0 90 61 01 	lds	r11, 0x0161	; 0x800161 <Global_u64OnTicks+0x1>
    4592:	c0 90 62 01 	lds	r12, 0x0162	; 0x800162 <Global_u64OnTicks+0x2>
    4596:	d0 90 63 01 	lds	r13, 0x0163	; 0x800163 <Global_u64OnTicks+0x3>
    459a:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <Global_u64OnTicks+0x4>
    459e:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <Global_u64OnTicks+0x5>
    45a2:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <Global_u64OnTicks+0x6>
    45a6:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <Global_u64OnTicks+0x7>
    45aa:	2a 2d       	mov	r18, r10
    45ac:	3b 2d       	mov	r19, r11
    45ae:	4c 2d       	mov	r20, r12
    45b0:	5d 2d       	mov	r21, r13
    45b2:	6e 2d       	mov	r22, r14
    45b4:	7f 2d       	mov	r23, r15
    45b6:	80 2f       	mov	r24, r16
    45b8:	91 2f       	mov	r25, r17
    45ba:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__floatundisf>
    45be:	dc 01       	movw	r26, r24
    45c0:	cb 01       	movw	r24, r22
    45c2:	29 81       	ldd	r18, Y+1	; 0x01
    45c4:	3a 81       	ldd	r19, Y+2	; 0x02
    45c6:	4b 81       	ldd	r20, Y+3	; 0x03
    45c8:	5c 81       	ldd	r21, Y+4	; 0x04
    45ca:	bc 01       	movw	r22, r24
    45cc:	cd 01       	movw	r24, r26
    45ce:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    45d2:	dc 01       	movw	r26, r24
    45d4:	cb 01       	movw	r24, r22
    45d6:	bc 01       	movw	r22, r24
    45d8:	cd 01       	movw	r24, r26
    45da:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__fixunssfdi>
    45de:	a2 2e       	mov	r10, r18
    45e0:	b3 2e       	mov	r11, r19
    45e2:	c4 2e       	mov	r12, r20
    45e4:	d5 2e       	mov	r13, r21
    45e6:	e6 2e       	mov	r14, r22
    45e8:	f7 2e       	mov	r15, r23
    45ea:	08 2f       	mov	r16, r24
    45ec:	19 2f       	mov	r17, r25
    45ee:	a0 92 48 01 	sts	0x0148, r10	; 0x800148 <Global_u64OnTime>
    45f2:	b0 92 49 01 	sts	0x0149, r11	; 0x800149 <Global_u64OnTime+0x1>
    45f6:	c0 92 4a 01 	sts	0x014A, r12	; 0x80014a <Global_u64OnTime+0x2>
    45fa:	d0 92 4b 01 	sts	0x014B, r13	; 0x80014b <Global_u64OnTime+0x3>
    45fe:	e0 92 4c 01 	sts	0x014C, r14	; 0x80014c <Global_u64OnTime+0x4>
    4602:	f0 92 4d 01 	sts	0x014D, r15	; 0x80014d <Global_u64OnTime+0x5>
    4606:	00 93 4e 01 	sts	0x014E, r16	; 0x80014e <Global_u64OnTime+0x6>
    460a:	10 93 4f 01 	sts	0x014F, r17	; 0x80014f <Global_u64OnTime+0x7>
		Loc_u16FirstTicks = Loc_u16ThirdTicks;
		Global_u64OverflowCounter = ZERO_VALUE;

	}

}
    460e:	67 c1       	rjmp	.+718    	; 0x48de <Icu_Isr+0x520>
		Timer1_enuGetTimeElapsedIcu(&Loc_u16SecondTicks);
		Global_u64OnTicks = Loc_u16SecondTicks + (Global_u64OverflowCounter * TIMER1_16BIT_MAX_REGISTER_VALUE)-Loc_u16FirstTicks;
		Global_u64OnTime = Global_u64OnTicks * Loc_f64TickTimeMiliSeconds;
	}

	else if (Loc_u8Counter == TWO_VALUE){
    4610:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Loc_u8Counter.2260>
    4614:	82 30       	cpi	r24, 0x02	; 2
    4616:	09 f0       	breq	.+2      	; 0x461a <Icu_Isr+0x25c>
    4618:	62 c1       	rjmp	.+708    	; 0x48de <Icu_Isr+0x520>

		Dio_enuFlipChannel(DIO_PINC0_CHANNEL16);
    461a:	80 e1       	ldi	r24, 0x10	; 16
    461c:	0e 94 34 12 	call	0x2468	; 0x2468 <Dio_enuFlipChannel>
		Timer1_enuGetTimeElapsedIcu(&Loc_u16ThirdTicks);
    4620:	8d e7       	ldi	r24, 0x7D	; 125
    4622:	91 e0       	ldi	r25, 0x01	; 1
    4624:	0e 94 17 08 	call	0x102e	; 0x102e <Timer1_enuGetTimeElapsedIcu>
		Global_u64TotalTicks = Loc_u16ThirdTicks + (Global_u64OverflowCounter * TIMER1_16BIT_MAX_REGISTER_VALUE)-Loc_u16FirstTicks;
    4628:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Loc_u16ThirdTicks.2263>
    462c:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Loc_u16ThirdTicks.2263+0x1>
    4630:	8c 01       	movw	r16, r24
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	40 e0       	ldi	r20, 0x00	; 0
    4638:	50 e0       	ldi	r21, 0x00	; 0
    463a:	ba 01       	movw	r22, r20
    463c:	0d 87       	std	Y+13, r16	; 0x0d
    463e:	1e 87       	std	Y+14, r17	; 0x0e
    4640:	2f 87       	std	Y+15, r18	; 0x0f
    4642:	38 8b       	std	Y+16, r19	; 0x10
    4644:	49 8b       	std	Y+17, r20	; 0x11
    4646:	5a 8b       	std	Y+18, r21	; 0x12
    4648:	6b 8b       	std	Y+19, r22	; 0x13
    464a:	7c 8b       	std	Y+20, r23	; 0x14
    464c:	20 90 70 01 	lds	r2, 0x0170	; 0x800170 <Global_u64OverflowCounter>
    4650:	30 90 71 01 	lds	r3, 0x0171	; 0x800171 <Global_u64OverflowCounter+0x1>
    4654:	40 90 72 01 	lds	r4, 0x0172	; 0x800172 <Global_u64OverflowCounter+0x2>
    4658:	50 90 73 01 	lds	r5, 0x0173	; 0x800173 <Global_u64OverflowCounter+0x3>
    465c:	60 90 74 01 	lds	r6, 0x0174	; 0x800174 <Global_u64OverflowCounter+0x4>
    4660:	70 90 75 01 	lds	r7, 0x0175	; 0x800175 <Global_u64OverflowCounter+0x5>
    4664:	80 90 76 01 	lds	r8, 0x0176	; 0x800176 <Global_u64OverflowCounter+0x6>
    4668:	90 90 77 01 	lds	r9, 0x0177	; 0x800177 <Global_u64OverflowCounter+0x7>
    466c:	aa 24       	eor	r10, r10
    466e:	aa 94       	dec	r10
    4670:	bb 24       	eor	r11, r11
    4672:	ba 94       	dec	r11
    4674:	c1 2c       	mov	r12, r1
    4676:	d1 2c       	mov	r13, r1
    4678:	e1 2c       	mov	r14, r1
    467a:	f1 2c       	mov	r15, r1
    467c:	00 e0       	ldi	r16, 0x00	; 0
    467e:	10 e0       	ldi	r17, 0x00	; 0
    4680:	22 2d       	mov	r18, r2
    4682:	33 2d       	mov	r19, r3
    4684:	44 2d       	mov	r20, r4
    4686:	55 2d       	mov	r21, r5
    4688:	66 2d       	mov	r22, r6
    468a:	77 2d       	mov	r23, r7
    468c:	88 2d       	mov	r24, r8
    468e:	99 2d       	mov	r25, r9
    4690:	0e 94 98 25 	call	0x4b30	; 0x4b30 <__muldi3>
    4694:	a2 2e       	mov	r10, r18
    4696:	b3 2e       	mov	r11, r19
    4698:	c4 2e       	mov	r12, r20
    469a:	d5 2e       	mov	r13, r21
    469c:	e6 2e       	mov	r14, r22
    469e:	f7 2e       	mov	r15, r23
    46a0:	08 2f       	mov	r16, r24
    46a2:	19 2f       	mov	r17, r25
    46a4:	2a 2c       	mov	r2, r10
    46a6:	3b 2c       	mov	r3, r11
    46a8:	4c 2c       	mov	r4, r12
    46aa:	5d 2c       	mov	r5, r13
    46ac:	6e 2c       	mov	r6, r14
    46ae:	7f 2c       	mov	r7, r15
    46b0:	80 2e       	mov	r8, r16
    46b2:	91 2e       	mov	r9, r17
    46b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    46b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    46b8:	4f 85       	ldd	r20, Y+15	; 0x0f
    46ba:	58 89       	ldd	r21, Y+16	; 0x10
    46bc:	69 89       	ldd	r22, Y+17	; 0x11
    46be:	7a 89       	ldd	r23, Y+18	; 0x12
    46c0:	8b 89       	ldd	r24, Y+19	; 0x13
    46c2:	9c 89       	ldd	r25, Y+20	; 0x14
    46c4:	a2 2c       	mov	r10, r2
    46c6:	b3 2c       	mov	r11, r3
    46c8:	c4 2c       	mov	r12, r4
    46ca:	d5 2c       	mov	r13, r5
    46cc:	e6 2c       	mov	r14, r6
    46ce:	f7 2c       	mov	r15, r7
    46d0:	08 2d       	mov	r16, r8
    46d2:	19 2d       	mov	r17, r9
    46d4:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <__adddi3>
    46d8:	a2 2e       	mov	r10, r18
    46da:	b3 2e       	mov	r11, r19
    46dc:	c4 2e       	mov	r12, r20
    46de:	d5 2e       	mov	r13, r21
    46e0:	e6 2e       	mov	r14, r22
    46e2:	f7 2e       	mov	r15, r23
    46e4:	08 2f       	mov	r16, r24
    46e6:	19 2f       	mov	r17, r25
    46e8:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <Loc_u16FirstTicks.2261>
    46ec:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <Loc_u16FirstTicks.2261+0x1>
    46f0:	1c 01       	movw	r2, r24
    46f2:	41 2c       	mov	r4, r1
    46f4:	51 2c       	mov	r5, r1
    46f6:	61 2c       	mov	r6, r1
    46f8:	71 2c       	mov	r7, r1
    46fa:	43 01       	movw	r8, r6
    46fc:	2a 2d       	mov	r18, r10
    46fe:	3b 2d       	mov	r19, r11
    4700:	4c 2d       	mov	r20, r12
    4702:	5d 2d       	mov	r21, r13
    4704:	6e 2d       	mov	r22, r14
    4706:	7f 2d       	mov	r23, r15
    4708:	80 2f       	mov	r24, r16
    470a:	91 2f       	mov	r25, r17
    470c:	a2 2c       	mov	r10, r2
    470e:	b3 2c       	mov	r11, r3
    4710:	c4 2c       	mov	r12, r4
    4712:	d5 2c       	mov	r13, r5
    4714:	e6 2c       	mov	r14, r6
    4716:	f7 2c       	mov	r15, r7
    4718:	08 2d       	mov	r16, r8
    471a:	19 2d       	mov	r17, r9
    471c:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <__subdi3>
    4720:	a2 2e       	mov	r10, r18
    4722:	b3 2e       	mov	r11, r19
    4724:	c4 2e       	mov	r12, r20
    4726:	d5 2e       	mov	r13, r21
    4728:	e6 2e       	mov	r14, r22
    472a:	f7 2e       	mov	r15, r23
    472c:	08 2f       	mov	r16, r24
    472e:	19 2f       	mov	r17, r25
    4730:	a0 92 68 01 	sts	0x0168, r10	; 0x800168 <Global_u64TotalTicks>
    4734:	b0 92 69 01 	sts	0x0169, r11	; 0x800169 <Global_u64TotalTicks+0x1>
    4738:	c0 92 6a 01 	sts	0x016A, r12	; 0x80016a <Global_u64TotalTicks+0x2>
    473c:	d0 92 6b 01 	sts	0x016B, r13	; 0x80016b <Global_u64TotalTicks+0x3>
    4740:	e0 92 6c 01 	sts	0x016C, r14	; 0x80016c <Global_u64TotalTicks+0x4>
    4744:	f0 92 6d 01 	sts	0x016D, r15	; 0x80016d <Global_u64TotalTicks+0x5>
    4748:	00 93 6e 01 	sts	0x016E, r16	; 0x80016e <Global_u64TotalTicks+0x6>
    474c:	10 93 6f 01 	sts	0x016F, r17	; 0x80016f <Global_u64TotalTicks+0x7>
		Global_u64TotalTime = Global_u64TotalTicks * Loc_f64TickTimeMiliSeconds;
    4750:	a0 90 68 01 	lds	r10, 0x0168	; 0x800168 <Global_u64TotalTicks>
    4754:	b0 90 69 01 	lds	r11, 0x0169	; 0x800169 <Global_u64TotalTicks+0x1>
    4758:	c0 90 6a 01 	lds	r12, 0x016A	; 0x80016a <Global_u64TotalTicks+0x2>
    475c:	d0 90 6b 01 	lds	r13, 0x016B	; 0x80016b <Global_u64TotalTicks+0x3>
    4760:	e0 90 6c 01 	lds	r14, 0x016C	; 0x80016c <Global_u64TotalTicks+0x4>
    4764:	f0 90 6d 01 	lds	r15, 0x016D	; 0x80016d <Global_u64TotalTicks+0x5>
    4768:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <Global_u64TotalTicks+0x6>
    476c:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <Global_u64TotalTicks+0x7>
    4770:	2a 2d       	mov	r18, r10
    4772:	3b 2d       	mov	r19, r11
    4774:	4c 2d       	mov	r20, r12
    4776:	5d 2d       	mov	r21, r13
    4778:	6e 2d       	mov	r22, r14
    477a:	7f 2d       	mov	r23, r15
    477c:	80 2f       	mov	r24, r16
    477e:	91 2f       	mov	r25, r17
    4780:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__floatundisf>
    4784:	dc 01       	movw	r26, r24
    4786:	cb 01       	movw	r24, r22
    4788:	29 81       	ldd	r18, Y+1	; 0x01
    478a:	3a 81       	ldd	r19, Y+2	; 0x02
    478c:	4b 81       	ldd	r20, Y+3	; 0x03
    478e:	5c 81       	ldd	r21, Y+4	; 0x04
    4790:	bc 01       	movw	r22, r24
    4792:	cd 01       	movw	r24, r26
    4794:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	bc 01       	movw	r22, r24
    479e:	cd 01       	movw	r24, r26
    47a0:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__fixunssfdi>
    47a4:	a2 2e       	mov	r10, r18
    47a6:	b3 2e       	mov	r11, r19
    47a8:	c4 2e       	mov	r12, r20
    47aa:	d5 2e       	mov	r13, r21
    47ac:	e6 2e       	mov	r14, r22
    47ae:	f7 2e       	mov	r15, r23
    47b0:	08 2f       	mov	r16, r24
    47b2:	19 2f       	mov	r17, r25
    47b4:	a0 92 50 01 	sts	0x0150, r10	; 0x800150 <Global_u64TotalTime>
    47b8:	b0 92 51 01 	sts	0x0151, r11	; 0x800151 <Global_u64TotalTime+0x1>
    47bc:	c0 92 52 01 	sts	0x0152, r12	; 0x800152 <Global_u64TotalTime+0x2>
    47c0:	d0 92 53 01 	sts	0x0153, r13	; 0x800153 <Global_u64TotalTime+0x3>
    47c4:	e0 92 54 01 	sts	0x0154, r14	; 0x800154 <Global_u64TotalTime+0x4>
    47c8:	f0 92 55 01 	sts	0x0155, r15	; 0x800155 <Global_u64TotalTime+0x5>
    47cc:	00 93 56 01 	sts	0x0156, r16	; 0x800156 <Global_u64TotalTime+0x6>
    47d0:	10 93 57 01 	sts	0x0157, r17	; 0x800157 <Global_u64TotalTime+0x7>
		Global_u64DutyCycle = (u64)((Global_u64OnTime*100.0)/Global_u64TotalTime);
    47d4:	a0 90 48 01 	lds	r10, 0x0148	; 0x800148 <Global_u64OnTime>
    47d8:	b0 90 49 01 	lds	r11, 0x0149	; 0x800149 <Global_u64OnTime+0x1>
    47dc:	c0 90 4a 01 	lds	r12, 0x014A	; 0x80014a <Global_u64OnTime+0x2>
    47e0:	d0 90 4b 01 	lds	r13, 0x014B	; 0x80014b <Global_u64OnTime+0x3>
    47e4:	e0 90 4c 01 	lds	r14, 0x014C	; 0x80014c <Global_u64OnTime+0x4>
    47e8:	f0 90 4d 01 	lds	r15, 0x014D	; 0x80014d <Global_u64OnTime+0x5>
    47ec:	00 91 4e 01 	lds	r16, 0x014E	; 0x80014e <Global_u64OnTime+0x6>
    47f0:	10 91 4f 01 	lds	r17, 0x014F	; 0x80014f <Global_u64OnTime+0x7>
    47f4:	2a 2d       	mov	r18, r10
    47f6:	3b 2d       	mov	r19, r11
    47f8:	4c 2d       	mov	r20, r12
    47fa:	5d 2d       	mov	r21, r13
    47fc:	6e 2d       	mov	r22, r14
    47fe:	7f 2d       	mov	r23, r15
    4800:	80 2f       	mov	r24, r16
    4802:	91 2f       	mov	r25, r17
    4804:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__floatundisf>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	48 ec       	ldi	r20, 0xC8	; 200
    4812:	52 e4       	ldi	r21, 0x42	; 66
    4814:	bc 01       	movw	r22, r24
    4816:	cd 01       	movw	r24, r26
    4818:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    481c:	dc 01       	movw	r26, r24
    481e:	cb 01       	movw	r24, r22
    4820:	3c 01       	movw	r6, r24
    4822:	4d 01       	movw	r8, r26
    4824:	a0 90 50 01 	lds	r10, 0x0150	; 0x800150 <Global_u64TotalTime>
    4828:	b0 90 51 01 	lds	r11, 0x0151	; 0x800151 <Global_u64TotalTime+0x1>
    482c:	c0 90 52 01 	lds	r12, 0x0152	; 0x800152 <Global_u64TotalTime+0x2>
    4830:	d0 90 53 01 	lds	r13, 0x0153	; 0x800153 <Global_u64TotalTime+0x3>
    4834:	e0 90 54 01 	lds	r14, 0x0154	; 0x800154 <Global_u64TotalTime+0x4>
    4838:	f0 90 55 01 	lds	r15, 0x0155	; 0x800155 <Global_u64TotalTime+0x5>
    483c:	00 91 56 01 	lds	r16, 0x0156	; 0x800156 <Global_u64TotalTime+0x6>
    4840:	10 91 57 01 	lds	r17, 0x0157	; 0x800157 <Global_u64TotalTime+0x7>
    4844:	2a 2d       	mov	r18, r10
    4846:	3b 2d       	mov	r19, r11
    4848:	4c 2d       	mov	r20, r12
    484a:	5d 2d       	mov	r21, r13
    484c:	6e 2d       	mov	r22, r14
    484e:	7f 2d       	mov	r23, r15
    4850:	80 2f       	mov	r24, r16
    4852:	91 2f       	mov	r25, r17
    4854:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <__floatundisf>
    4858:	dc 01       	movw	r26, r24
    485a:	cb 01       	movw	r24, r22
    485c:	9c 01       	movw	r18, r24
    485e:	ad 01       	movw	r20, r26
    4860:	c4 01       	movw	r24, r8
    4862:	b3 01       	movw	r22, r6
    4864:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__divsf3>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	bc 01       	movw	r22, r24
    486e:	cd 01       	movw	r24, r26
    4870:	0e 94 20 27 	call	0x4e40	; 0x4e40 <__fixunssfdi>
    4874:	a2 2e       	mov	r10, r18
    4876:	b3 2e       	mov	r11, r19
    4878:	c4 2e       	mov	r12, r20
    487a:	d5 2e       	mov	r13, r21
    487c:	e6 2e       	mov	r14, r22
    487e:	f7 2e       	mov	r15, r23
    4880:	08 2f       	mov	r16, r24
    4882:	19 2f       	mov	r17, r25
    4884:	a0 92 58 01 	sts	0x0158, r10	; 0x800158 <Global_u64DutyCycle>
    4888:	b0 92 59 01 	sts	0x0159, r11	; 0x800159 <Global_u64DutyCycle+0x1>
    488c:	c0 92 5a 01 	sts	0x015A, r12	; 0x80015a <Global_u64DutyCycle+0x2>
    4890:	d0 92 5b 01 	sts	0x015B, r13	; 0x80015b <Global_u64DutyCycle+0x3>
    4894:	e0 92 5c 01 	sts	0x015C, r14	; 0x80015c <Global_u64DutyCycle+0x4>
    4898:	f0 92 5d 01 	sts	0x015D, r15	; 0x80015d <Global_u64DutyCycle+0x5>
    489c:	00 93 5e 01 	sts	0x015E, r16	; 0x80015e <Global_u64DutyCycle+0x6>
    48a0:	10 93 5f 01 	sts	0x015F, r17	; 0x80015f <Global_u64DutyCycle+0x7>
		/* start of First Edge Already */
		Loc_u8Counter = ONE_VALUE;
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <Loc_u8Counter.2260>
		Timer1_enuToggleEdgeIcu();
    48aa:	0e 94 9d 08 	call	0x113a	; 0x113a <Timer1_enuToggleEdgeIcu>
		Loc_u16FirstTicks = Loc_u16ThirdTicks;
    48ae:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Loc_u16ThirdTicks.2263>
    48b2:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Loc_u16ThirdTicks.2263+0x1>
    48b6:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <Loc_u16FirstTicks.2261+0x1>
    48ba:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <Loc_u16FirstTicks.2261>
		Global_u64OverflowCounter = ZERO_VALUE;
    48be:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <Global_u64OverflowCounter>
    48c2:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <Global_u64OverflowCounter+0x1>
    48c6:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Global_u64OverflowCounter+0x2>
    48ca:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Global_u64OverflowCounter+0x3>
    48ce:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Global_u64OverflowCounter+0x4>
    48d2:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Global_u64OverflowCounter+0x5>
    48d6:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <Global_u64OverflowCounter+0x6>
    48da:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <Global_u64OverflowCounter+0x7>

	}

}
    48de:	00 00       	nop
    48e0:	64 96       	adiw	r28, 0x14	; 20
    48e2:	0f b6       	in	r0, 0x3f	; 63
    48e4:	f8 94       	cli
    48e6:	de bf       	out	0x3e, r29	; 62
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	cd bf       	out	0x3d, r28	; 61
    48ec:	df 91       	pop	r29
    48ee:	cf 91       	pop	r28
    48f0:	1f 91       	pop	r17
    48f2:	0f 91       	pop	r16
    48f4:	ff 90       	pop	r15
    48f6:	ef 90       	pop	r14
    48f8:	df 90       	pop	r13
    48fa:	cf 90       	pop	r12
    48fc:	bf 90       	pop	r11
    48fe:	af 90       	pop	r10
    4900:	9f 90       	pop	r9
    4902:	8f 90       	pop	r8
    4904:	7f 90       	pop	r7
    4906:	6f 90       	pop	r6
    4908:	5f 90       	pop	r5
    490a:	4f 90       	pop	r4
    490c:	3f 90       	pop	r3
    490e:	2f 90       	pop	r2
    4910:	08 95       	ret

00004912 <main>:
/////////////////////////////////////////////////////////////////
int main(void){
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
    4916:	cd b7       	in	r28, 0x3d	; 61
    4918:	de b7       	in	r29, 0x3e	; 62
    491a:	2e 97       	sbiw	r28, 0x0e	; 14
    491c:	0f b6       	in	r0, 0x3f	; 63
    491e:	f8 94       	cli
    4920:	de bf       	out	0x3e, r29	; 62
    4922:	0f be       	out	0x3f, r0	; 63
    4924:	cd bf       	out	0x3d, r28	; 61

	Port_voidInit();
    4926:	0e 94 c0 0c 	call	0x1980	; 0x1980 <Port_voidInit>
	Lcd_4bit_enuInit(&Lcd);
    492a:	80 e9       	ldi	r24, 0x90	; 144
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <Lcd_4bit_enuInit>

	Timer1_enuSetCallbackFunctionOverflow(Timer1_Isr);
    4932:	84 e9       	ldi	r24, 0x94	; 148
    4934:	91 e2       	ldi	r25, 0x21	; 33
    4936:	0e 94 89 06 	call	0xd12	; 0xd12 <Timer1_enuSetCallbackFunctionOverflow>
	Timer1_enuSetCallbackFunctionIcu(Icu_Isr);
    493a:	8f ed       	ldi	r24, 0xDF	; 223
    493c:	91 e2       	ldi	r25, 0x21	; 33
    493e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <Timer1_enuSetCallbackFunctionIcu>

	Timer1_enuSetRisingEdgeIcu();
    4942:	0e 94 75 08 	call	0x10ea	; 0x10ea <Timer1_enuSetRisingEdgeIcu>
	Timer1_enuEnableInterruptIcu();
    4946:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Timer1_enuEnableInterruptIcu>
	Timer1_enuEnableInterruptOverflow();
    494a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Timer1_enuEnableInterruptOverflow>
	Gie_enuEnableGlobalInterrupt();
    494e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <Gie_enuEnableGlobalInterrupt>

	Timer1_enuInit(&Timer1);
    4952:	8a ea       	ldi	r24, 0xAA	; 170
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	0e 94 36 05 	call	0xa6c	; 0xa6c <Timer1_enuInit>
	while(1){

				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "Total Time: ", LCD_ROW1, LCD_COL1);
    495a:	21 e0       	ldi	r18, 0x01	; 1
    495c:	41 e0       	ldi	r20, 0x01	; 1
    495e:	6f eb       	ldi	r22, 0xBF	; 191
    4960:	70 e0       	ldi	r23, 0x00	; 0
    4962:	80 e9       	ldi	r24, 0x90	; 144
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0e 94 4c 19 	call	0x3298	; 0x3298 <Lcd_4bit_enuDisplayStringWithPosition>
				Lcd_4bit_enuDisplayNumber(&Lcd, Global_u64TotalTime);
    496a:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <Global_u64TotalTime>
    496e:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <Global_u64TotalTime+0x1>
    4972:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <Global_u64TotalTime+0x2>
    4976:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <Global_u64TotalTime+0x3>
    497a:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <Global_u64TotalTime+0x4>
    497e:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <Global_u64TotalTime+0x5>
    4982:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <Global_u64TotalTime+0x6>
    4986:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <Global_u64TotalTime+0x7>
    498a:	da 01       	movw	r26, r20
    498c:	c9 01       	movw	r24, r18
    498e:	ac 01       	movw	r20, r24
    4990:	bd 01       	movw	r22, r26
    4992:	80 e9       	ldi	r24, 0x90	; 144
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	0e 94 9f 1a 	call	0x353e	; 0x353e <Lcd_4bit_enuDisplayNumber>
				Lcd_4bit_enuDisplayString(&Lcd, " [mV]");
    499a:	6c ec       	ldi	r22, 0xCC	; 204
    499c:	70 e0       	ldi	r23, 0x00	; 0
    499e:	80 e9       	ldi	r24, 0x90	; 144
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <Lcd_4bit_enuDisplayString>

				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "on Time: ", LCD_ROW2, LCD_COL1);
    49a6:	21 e0       	ldi	r18, 0x01	; 1
    49a8:	42 e0       	ldi	r20, 0x02	; 2
    49aa:	62 ed       	ldi	r22, 0xD2	; 210
    49ac:	70 e0       	ldi	r23, 0x00	; 0
    49ae:	80 e9       	ldi	r24, 0x90	; 144
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	0e 94 4c 19 	call	0x3298	; 0x3298 <Lcd_4bit_enuDisplayStringWithPosition>
				Lcd_4bit_enuDisplayNumber(&Lcd, Global_u64OnTime);
    49b6:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <Global_u64OnTime>
    49ba:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <Global_u64OnTime+0x1>
    49be:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <Global_u64OnTime+0x2>
    49c2:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <Global_u64OnTime+0x3>
    49c6:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <Global_u64OnTime+0x4>
    49ca:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <Global_u64OnTime+0x5>
    49ce:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <Global_u64OnTime+0x6>
    49d2:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <Global_u64OnTime+0x7>
    49d6:	da 01       	movw	r26, r20
    49d8:	c9 01       	movw	r24, r18
    49da:	ac 01       	movw	r20, r24
    49dc:	bd 01       	movw	r22, r26
    49de:	80 e9       	ldi	r24, 0x90	; 144
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	0e 94 9f 1a 	call	0x353e	; 0x353e <Lcd_4bit_enuDisplayNumber>
				Lcd_4bit_enuDisplayString(&Lcd, " [mV]");
    49e6:	6c ec       	ldi	r22, 0xCC	; 204
    49e8:	70 e0       	ldi	r23, 0x00	; 0
    49ea:	80 e9       	ldi	r24, 0x90	; 144
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <Lcd_4bit_enuDisplayString>

				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, "Duty Cycle:", LCD_ROW3, LCD_COL1);
    49f2:	21 e0       	ldi	r18, 0x01	; 1
    49f4:	43 e0       	ldi	r20, 0x03	; 3
    49f6:	6c ed       	ldi	r22, 0xDC	; 220
    49f8:	70 e0       	ldi	r23, 0x00	; 0
    49fa:	80 e9       	ldi	r24, 0x90	; 144
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	0e 94 4c 19 	call	0x3298	; 0x3298 <Lcd_4bit_enuDisplayStringWithPosition>
				Lcd_4bit_enuDisplayNumber(&Lcd, Global_u64DutyCycle);
    4a02:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <Global_u64DutyCycle>
    4a06:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <Global_u64DutyCycle+0x1>
    4a0a:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <Global_u64DutyCycle+0x2>
    4a0e:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <Global_u64DutyCycle+0x3>
    4a12:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <Global_u64DutyCycle+0x4>
    4a16:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <Global_u64DutyCycle+0x5>
    4a1a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Global_u64DutyCycle+0x6>
    4a1e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Global_u64DutyCycle+0x7>
    4a22:	da 01       	movw	r26, r20
    4a24:	c9 01       	movw	r24, r18
    4a26:	ac 01       	movw	r20, r24
    4a28:	bd 01       	movw	r22, r26
    4a2a:	80 e9       	ldi	r24, 0x90	; 144
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	0e 94 9f 1a 	call	0x353e	; 0x353e <Lcd_4bit_enuDisplayNumber>
				Lcd_4bit_enuDisplayString(&Lcd, "%");
    4a32:	68 ee       	ldi	r22, 0xE8	; 232
    4a34:	70 e0       	ldi	r23, 0x00	; 0
    4a36:	80 e9       	ldi	r24, 0x90	; 144
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <Lcd_4bit_enuDisplayString>
    4a3e:	80 e0       	ldi	r24, 0x00	; 0
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	aa e7       	ldi	r26, 0x7A	; 122
    4a44:	b4 e4       	ldi	r27, 0x44	; 68
    4a46:	89 83       	std	Y+1, r24	; 0x01
    4a48:	9a 83       	std	Y+2, r25	; 0x02
    4a4a:	ab 83       	std	Y+3, r26	; 0x03
    4a4c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4a4e:	20 e0       	ldi	r18, 0x00	; 0
    4a50:	30 e0       	ldi	r19, 0x00	; 0
    4a52:	4a e7       	ldi	r20, 0x7A	; 122
    4a54:	55 e4       	ldi	r21, 0x45	; 69
    4a56:	69 81       	ldd	r22, Y+1	; 0x01
    4a58:	7a 81       	ldd	r23, Y+2	; 0x02
    4a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a5e:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    4a62:	dc 01       	movw	r26, r24
    4a64:	cb 01       	movw	r24, r22
    4a66:	8d 83       	std	Y+5, r24	; 0x05
    4a68:	9e 83       	std	Y+6, r25	; 0x06
    4a6a:	af 83       	std	Y+7, r26	; 0x07
    4a6c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4a6e:	20 e0       	ldi	r18, 0x00	; 0
    4a70:	30 e0       	ldi	r19, 0x00	; 0
    4a72:	40 e8       	ldi	r20, 0x80	; 128
    4a74:	5f e3       	ldi	r21, 0x3F	; 63
    4a76:	6d 81       	ldd	r22, Y+5	; 0x05
    4a78:	7e 81       	ldd	r23, Y+6	; 0x06
    4a7a:	8f 81       	ldd	r24, Y+7	; 0x07
    4a7c:	98 85       	ldd	r25, Y+8	; 0x08
    4a7e:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <__cmpsf2>
    4a82:	88 23       	and	r24, r24
    4a84:	2c f4       	brge	.+10     	; 0x4a90 <main+0x17e>
		__ticks = 1;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	9a 87       	std	Y+10, r25	; 0x0a
    4a8c:	89 87       	std	Y+9, r24	; 0x09
    4a8e:	3f c0       	rjmp	.+126    	; 0x4b0e <main+0x1fc>
	else if (__tmp > 65535)
    4a90:	20 e0       	ldi	r18, 0x00	; 0
    4a92:	3f ef       	ldi	r19, 0xFF	; 255
    4a94:	4f e7       	ldi	r20, 0x7F	; 127
    4a96:	57 e4       	ldi	r21, 0x47	; 71
    4a98:	6d 81       	ldd	r22, Y+5	; 0x05
    4a9a:	7e 81       	ldd	r23, Y+6	; 0x06
    4a9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a9e:	98 85       	ldd	r25, Y+8	; 0x08
    4aa0:	0e 94 8d 28 	call	0x511a	; 0x511a <__gesf2>
    4aa4:	18 16       	cp	r1, r24
    4aa6:	4c f5       	brge	.+82     	; 0x4afa <main+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	40 e2       	ldi	r20, 0x20	; 32
    4aae:	51 e4       	ldi	r21, 0x41	; 65
    4ab0:	69 81       	ldd	r22, Y+1	; 0x01
    4ab2:	7a 81       	ldd	r23, Y+2	; 0x02
    4ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab8:	0e 94 92 28 	call	0x5124	; 0x5124 <__mulsf3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	bc 01       	movw	r22, r24
    4ac2:	cd 01       	movw	r24, r26
    4ac4:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	9a 87       	std	Y+10, r25	; 0x0a
    4ace:	89 87       	std	Y+9, r24	; 0x09
    4ad0:	0f c0       	rjmp	.+30     	; 0x4af0 <main+0x1de>
    4ad2:	80 e9       	ldi	r24, 0x90	; 144
    4ad4:	91 e0       	ldi	r25, 0x01	; 1
    4ad6:	9c 87       	std	Y+12, r25	; 0x0c
    4ad8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ada:	8b 85       	ldd	r24, Y+11	; 0x0b
    4adc:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ade:	01 97       	sbiw	r24, 0x01	; 1
    4ae0:	f1 f7       	brne	.-4      	; 0x4ade <main+0x1cc>
    4ae2:	9c 87       	std	Y+12, r25	; 0x0c
    4ae4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae6:	89 85       	ldd	r24, Y+9	; 0x09
    4ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aea:	01 97       	sbiw	r24, 0x01	; 1
    4aec:	9a 87       	std	Y+10, r25	; 0x0a
    4aee:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4af0:	89 85       	ldd	r24, Y+9	; 0x09
    4af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af4:	89 2b       	or	r24, r25
    4af6:	69 f7       	brne	.-38     	; 0x4ad2 <main+0x1c0>
    4af8:	14 c0       	rjmp	.+40     	; 0x4b22 <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afa:	6d 81       	ldd	r22, Y+5	; 0x05
    4afc:	7e 81       	ldd	r23, Y+6	; 0x06
    4afe:	8f 81       	ldd	r24, Y+7	; 0x07
    4b00:	98 85       	ldd	r25, Y+8	; 0x08
    4b02:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    4b06:	dc 01       	movw	r26, r24
    4b08:	cb 01       	movw	r24, r22
    4b0a:	9a 87       	std	Y+10, r25	; 0x0a
    4b0c:	89 87       	std	Y+9, r24	; 0x09
    4b0e:	89 85       	ldd	r24, Y+9	; 0x09
    4b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b12:	9e 87       	std	Y+14, r25	; 0x0e
    4b14:	8d 87       	std	Y+13, r24	; 0x0d
    4b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b1a:	01 97       	sbiw	r24, 0x01	; 1
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <main+0x208>
    4b1e:	9e 87       	std	Y+14, r25	; 0x0e
    4b20:	8d 87       	std	Y+13, r24	; 0x0d

				_delay_ms(1000);

	}
    4b22:	1b cf       	rjmp	.-458    	; 0x495a <main+0x48>

00004b24 <__tablejump2__>:
    4b24:	ee 0f       	add	r30, r30
    4b26:	ff 1f       	adc	r31, r31
    4b28:	05 90       	lpm	r0, Z+
    4b2a:	f4 91       	lpm	r31, Z
    4b2c:	e0 2d       	mov	r30, r0
    4b2e:	09 94       	ijmp

00004b30 <__muldi3>:
    4b30:	df 93       	push	r29
    4b32:	cf 93       	push	r28
    4b34:	1f 93       	push	r17
    4b36:	0f 93       	push	r16
    4b38:	9a 9d       	mul	r25, r10
    4b3a:	f0 2d       	mov	r31, r0
    4b3c:	21 9f       	mul	r18, r17
    4b3e:	f0 0d       	add	r31, r0
    4b40:	8b 9d       	mul	r24, r11
    4b42:	f0 0d       	add	r31, r0
    4b44:	8a 9d       	mul	r24, r10
    4b46:	e0 2d       	mov	r30, r0
    4b48:	f1 0d       	add	r31, r1
    4b4a:	03 9f       	mul	r16, r19
    4b4c:	f0 0d       	add	r31, r0
    4b4e:	02 9f       	mul	r16, r18
    4b50:	e0 0d       	add	r30, r0
    4b52:	f1 1d       	adc	r31, r1
    4b54:	4e 9d       	mul	r20, r14
    4b56:	e0 0d       	add	r30, r0
    4b58:	f1 1d       	adc	r31, r1
    4b5a:	5e 9d       	mul	r21, r14
    4b5c:	f0 0d       	add	r31, r0
    4b5e:	4f 9d       	mul	r20, r15
    4b60:	f0 0d       	add	r31, r0
    4b62:	7f 93       	push	r23
    4b64:	6f 93       	push	r22
    4b66:	bf 92       	push	r11
    4b68:	af 92       	push	r10
    4b6a:	5f 93       	push	r21
    4b6c:	4f 93       	push	r20
    4b6e:	d5 01       	movw	r26, r10
    4b70:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__umulhisi3>
    4b74:	8b 01       	movw	r16, r22
    4b76:	ac 01       	movw	r20, r24
    4b78:	d7 01       	movw	r26, r14
    4b7a:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__umulhisi3>
    4b7e:	eb 01       	movw	r28, r22
    4b80:	e8 0f       	add	r30, r24
    4b82:	f9 1f       	adc	r31, r25
    4b84:	d6 01       	movw	r26, r12
    4b86:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <__muldi3_6>
    4b8a:	2f 91       	pop	r18
    4b8c:	3f 91       	pop	r19
    4b8e:	d6 01       	movw	r26, r12
    4b90:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__umulhisi3>
    4b94:	c6 0f       	add	r28, r22
    4b96:	d7 1f       	adc	r29, r23
    4b98:	e8 1f       	adc	r30, r24
    4b9a:	f9 1f       	adc	r31, r25
    4b9c:	af 91       	pop	r26
    4b9e:	bf 91       	pop	r27
    4ba0:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <__muldi3_6>
    4ba4:	2f 91       	pop	r18
    4ba6:	3f 91       	pop	r19
    4ba8:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__umulhisi3>
    4bac:	c6 0f       	add	r28, r22
    4bae:	d7 1f       	adc	r29, r23
    4bb0:	e8 1f       	adc	r30, r24
    4bb2:	f9 1f       	adc	r31, r25
    4bb4:	d6 01       	movw	r26, r12
    4bb6:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__umulhisi3>
    4bba:	e6 0f       	add	r30, r22
    4bbc:	f7 1f       	adc	r31, r23
    4bbe:	98 01       	movw	r18, r16
    4bc0:	be 01       	movw	r22, r28
    4bc2:	cf 01       	movw	r24, r30
    4bc4:	11 24       	eor	r1, r1
    4bc6:	0f 91       	pop	r16
    4bc8:	1f 91       	pop	r17
    4bca:	cf 91       	pop	r28
    4bcc:	df 91       	pop	r29
    4bce:	08 95       	ret

00004bd0 <__muldi3_6>:
    4bd0:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__umulhisi3>
    4bd4:	46 0f       	add	r20, r22
    4bd6:	57 1f       	adc	r21, r23
    4bd8:	c8 1f       	adc	r28, r24
    4bda:	d9 1f       	adc	r29, r25
    4bdc:	08 f4       	brcc	.+2      	; 0x4be0 <__muldi3_6+0x10>
    4bde:	31 96       	adiw	r30, 0x01	; 1
    4be0:	08 95       	ret

00004be2 <__ashldi3>:
    4be2:	0f 93       	push	r16
    4be4:	08 30       	cpi	r16, 0x08	; 8
    4be6:	90 f0       	brcs	.+36     	; 0x4c0c <__ashldi3+0x2a>
    4be8:	98 2f       	mov	r25, r24
    4bea:	87 2f       	mov	r24, r23
    4bec:	76 2f       	mov	r23, r22
    4bee:	65 2f       	mov	r22, r21
    4bf0:	54 2f       	mov	r21, r20
    4bf2:	43 2f       	mov	r20, r19
    4bf4:	32 2f       	mov	r19, r18
    4bf6:	22 27       	eor	r18, r18
    4bf8:	08 50       	subi	r16, 0x08	; 8
    4bfa:	f4 cf       	rjmp	.-24     	; 0x4be4 <__ashldi3+0x2>
    4bfc:	22 0f       	add	r18, r18
    4bfe:	33 1f       	adc	r19, r19
    4c00:	44 1f       	adc	r20, r20
    4c02:	55 1f       	adc	r21, r21
    4c04:	66 1f       	adc	r22, r22
    4c06:	77 1f       	adc	r23, r23
    4c08:	88 1f       	adc	r24, r24
    4c0a:	99 1f       	adc	r25, r25
    4c0c:	0a 95       	dec	r16
    4c0e:	b2 f7       	brpl	.-20     	; 0x4bfc <__ashldi3+0x1a>
    4c10:	0f 91       	pop	r16
    4c12:	08 95       	ret

00004c14 <__adddi3>:
    4c14:	2a 0d       	add	r18, r10
    4c16:	3b 1d       	adc	r19, r11
    4c18:	4c 1d       	adc	r20, r12
    4c1a:	5d 1d       	adc	r21, r13
    4c1c:	6e 1d       	adc	r22, r14
    4c1e:	7f 1d       	adc	r23, r15
    4c20:	80 1f       	adc	r24, r16
    4c22:	91 1f       	adc	r25, r17
    4c24:	08 95       	ret

00004c26 <__adddi3_s8>:
    4c26:	00 24       	eor	r0, r0
    4c28:	a7 fd       	sbrc	r26, 7
    4c2a:	00 94       	com	r0
    4c2c:	2a 0f       	add	r18, r26
    4c2e:	30 1d       	adc	r19, r0
    4c30:	40 1d       	adc	r20, r0
    4c32:	50 1d       	adc	r21, r0
    4c34:	60 1d       	adc	r22, r0
    4c36:	70 1d       	adc	r23, r0
    4c38:	80 1d       	adc	r24, r0
    4c3a:	90 1d       	adc	r25, r0
    4c3c:	08 95       	ret

00004c3e <__subdi3>:
    4c3e:	2a 19       	sub	r18, r10
    4c40:	3b 09       	sbc	r19, r11
    4c42:	4c 09       	sbc	r20, r12
    4c44:	5d 09       	sbc	r21, r13
    4c46:	6e 09       	sbc	r22, r14
    4c48:	7f 09       	sbc	r23, r15
    4c4a:	80 0b       	sbc	r24, r16
    4c4c:	91 0b       	sbc	r25, r17
    4c4e:	08 95       	ret

00004c50 <__umulhisi3>:
    4c50:	a2 9f       	mul	r26, r18
    4c52:	b0 01       	movw	r22, r0
    4c54:	b3 9f       	mul	r27, r19
    4c56:	c0 01       	movw	r24, r0
    4c58:	a3 9f       	mul	r26, r19
    4c5a:	70 0d       	add	r23, r0
    4c5c:	81 1d       	adc	r24, r1
    4c5e:	11 24       	eor	r1, r1
    4c60:	91 1d       	adc	r25, r1
    4c62:	b2 9f       	mul	r27, r18
    4c64:	70 0d       	add	r23, r0
    4c66:	81 1d       	adc	r24, r1
    4c68:	11 24       	eor	r1, r1
    4c6a:	91 1d       	adc	r25, r1
    4c6c:	08 95       	ret

00004c6e <__subsf3>:
    4c6e:	50 58       	subi	r21, 0x80	; 128

00004c70 <__addsf3>:
    4c70:	bb 27       	eor	r27, r27
    4c72:	aa 27       	eor	r26, r26
    4c74:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <__addsf3x>
    4c78:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__fp_round>
    4c7c:	0e 94 45 28 	call	0x508a	; 0x508a <__fp_pscA>
    4c80:	38 f0       	brcs	.+14     	; 0x4c90 <__addsf3+0x20>
    4c82:	0e 94 4c 28 	call	0x5098	; 0x5098 <__fp_pscB>
    4c86:	20 f0       	brcs	.+8      	; 0x4c90 <__addsf3+0x20>
    4c88:	39 f4       	brne	.+14     	; 0x4c98 <__addsf3+0x28>
    4c8a:	9f 3f       	cpi	r25, 0xFF	; 255
    4c8c:	19 f4       	brne	.+6      	; 0x4c94 <__addsf3+0x24>
    4c8e:	26 f4       	brtc	.+8      	; 0x4c98 <__addsf3+0x28>
    4c90:	0c 94 32 28 	jmp	0x5064	; 0x5064 <__fp_nan>
    4c94:	0e f4       	brtc	.+2      	; 0x4c98 <__addsf3+0x28>
    4c96:	e0 95       	com	r30
    4c98:	e7 fb       	bst	r30, 7
    4c9a:	0c 94 2c 28 	jmp	0x5058	; 0x5058 <__fp_inf>

00004c9e <__addsf3x>:
    4c9e:	e9 2f       	mov	r30, r25
    4ca0:	0e 94 64 28 	call	0x50c8	; 0x50c8 <__fp_split3>
    4ca4:	58 f3       	brcs	.-42     	; 0x4c7c <__addsf3+0xc>
    4ca6:	ba 17       	cp	r27, r26
    4ca8:	62 07       	cpc	r22, r18
    4caa:	73 07       	cpc	r23, r19
    4cac:	84 07       	cpc	r24, r20
    4cae:	95 07       	cpc	r25, r21
    4cb0:	20 f0       	brcs	.+8      	; 0x4cba <__addsf3x+0x1c>
    4cb2:	79 f4       	brne	.+30     	; 0x4cd2 <__addsf3x+0x34>
    4cb4:	a6 f5       	brtc	.+104    	; 0x4d1e <__addsf3x+0x80>
    4cb6:	0c 94 86 28 	jmp	0x510c	; 0x510c <__fp_zero>
    4cba:	0e f4       	brtc	.+2      	; 0x4cbe <__addsf3x+0x20>
    4cbc:	e0 95       	com	r30
    4cbe:	0b 2e       	mov	r0, r27
    4cc0:	ba 2f       	mov	r27, r26
    4cc2:	a0 2d       	mov	r26, r0
    4cc4:	0b 01       	movw	r0, r22
    4cc6:	b9 01       	movw	r22, r18
    4cc8:	90 01       	movw	r18, r0
    4cca:	0c 01       	movw	r0, r24
    4ccc:	ca 01       	movw	r24, r20
    4cce:	a0 01       	movw	r20, r0
    4cd0:	11 24       	eor	r1, r1
    4cd2:	ff 27       	eor	r31, r31
    4cd4:	59 1b       	sub	r21, r25
    4cd6:	99 f0       	breq	.+38     	; 0x4cfe <__addsf3x+0x60>
    4cd8:	59 3f       	cpi	r21, 0xF9	; 249
    4cda:	50 f4       	brcc	.+20     	; 0x4cf0 <__addsf3x+0x52>
    4cdc:	50 3e       	cpi	r21, 0xE0	; 224
    4cde:	68 f1       	brcs	.+90     	; 0x4d3a <__addsf3x+0x9c>
    4ce0:	1a 16       	cp	r1, r26
    4ce2:	f0 40       	sbci	r31, 0x00	; 0
    4ce4:	a2 2f       	mov	r26, r18
    4ce6:	23 2f       	mov	r18, r19
    4ce8:	34 2f       	mov	r19, r20
    4cea:	44 27       	eor	r20, r20
    4cec:	58 5f       	subi	r21, 0xF8	; 248
    4cee:	f3 cf       	rjmp	.-26     	; 0x4cd6 <__addsf3x+0x38>
    4cf0:	46 95       	lsr	r20
    4cf2:	37 95       	ror	r19
    4cf4:	27 95       	ror	r18
    4cf6:	a7 95       	ror	r26
    4cf8:	f0 40       	sbci	r31, 0x00	; 0
    4cfa:	53 95       	inc	r21
    4cfc:	c9 f7       	brne	.-14     	; 0x4cf0 <__addsf3x+0x52>
    4cfe:	7e f4       	brtc	.+30     	; 0x4d1e <__addsf3x+0x80>
    4d00:	1f 16       	cp	r1, r31
    4d02:	ba 0b       	sbc	r27, r26
    4d04:	62 0b       	sbc	r22, r18
    4d06:	73 0b       	sbc	r23, r19
    4d08:	84 0b       	sbc	r24, r20
    4d0a:	ba f0       	brmi	.+46     	; 0x4d3a <__addsf3x+0x9c>
    4d0c:	91 50       	subi	r25, 0x01	; 1
    4d0e:	a1 f0       	breq	.+40     	; 0x4d38 <__addsf3x+0x9a>
    4d10:	ff 0f       	add	r31, r31
    4d12:	bb 1f       	adc	r27, r27
    4d14:	66 1f       	adc	r22, r22
    4d16:	77 1f       	adc	r23, r23
    4d18:	88 1f       	adc	r24, r24
    4d1a:	c2 f7       	brpl	.-16     	; 0x4d0c <__addsf3x+0x6e>
    4d1c:	0e c0       	rjmp	.+28     	; 0x4d3a <__addsf3x+0x9c>
    4d1e:	ba 0f       	add	r27, r26
    4d20:	62 1f       	adc	r22, r18
    4d22:	73 1f       	adc	r23, r19
    4d24:	84 1f       	adc	r24, r20
    4d26:	48 f4       	brcc	.+18     	; 0x4d3a <__addsf3x+0x9c>
    4d28:	87 95       	ror	r24
    4d2a:	77 95       	ror	r23
    4d2c:	67 95       	ror	r22
    4d2e:	b7 95       	ror	r27
    4d30:	f7 95       	ror	r31
    4d32:	9e 3f       	cpi	r25, 0xFE	; 254
    4d34:	08 f0       	brcs	.+2      	; 0x4d38 <__addsf3x+0x9a>
    4d36:	b0 cf       	rjmp	.-160    	; 0x4c98 <__addsf3+0x28>
    4d38:	93 95       	inc	r25
    4d3a:	88 0f       	add	r24, r24
    4d3c:	08 f0       	brcs	.+2      	; 0x4d40 <__addsf3x+0xa2>
    4d3e:	99 27       	eor	r25, r25
    4d40:	ee 0f       	add	r30, r30
    4d42:	97 95       	ror	r25
    4d44:	87 95       	ror	r24
    4d46:	08 95       	ret

00004d48 <__cmpsf2>:
    4d48:	0e 94 08 28 	call	0x5010	; 0x5010 <__fp_cmp>
    4d4c:	08 f4       	brcc	.+2      	; 0x4d50 <__cmpsf2+0x8>
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	08 95       	ret

00004d52 <__divsf3>:
    4d52:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <__divsf3x>
    4d56:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__fp_round>
    4d5a:	0e 94 4c 28 	call	0x5098	; 0x5098 <__fp_pscB>
    4d5e:	58 f0       	brcs	.+22     	; 0x4d76 <__divsf3+0x24>
    4d60:	0e 94 45 28 	call	0x508a	; 0x508a <__fp_pscA>
    4d64:	40 f0       	brcs	.+16     	; 0x4d76 <__divsf3+0x24>
    4d66:	29 f4       	brne	.+10     	; 0x4d72 <__divsf3+0x20>
    4d68:	5f 3f       	cpi	r21, 0xFF	; 255
    4d6a:	29 f0       	breq	.+10     	; 0x4d76 <__divsf3+0x24>
    4d6c:	0c 94 2c 28 	jmp	0x5058	; 0x5058 <__fp_inf>
    4d70:	51 11       	cpse	r21, r1
    4d72:	0c 94 87 28 	jmp	0x510e	; 0x510e <__fp_szero>
    4d76:	0c 94 32 28 	jmp	0x5064	; 0x5064 <__fp_nan>

00004d7a <__divsf3x>:
    4d7a:	0e 94 64 28 	call	0x50c8	; 0x50c8 <__fp_split3>
    4d7e:	68 f3       	brcs	.-38     	; 0x4d5a <__divsf3+0x8>

00004d80 <__divsf3_pse>:
    4d80:	99 23       	and	r25, r25
    4d82:	b1 f3       	breq	.-20     	; 0x4d70 <__divsf3+0x1e>
    4d84:	55 23       	and	r21, r21
    4d86:	91 f3       	breq	.-28     	; 0x4d6c <__divsf3+0x1a>
    4d88:	95 1b       	sub	r25, r21
    4d8a:	55 0b       	sbc	r21, r21
    4d8c:	bb 27       	eor	r27, r27
    4d8e:	aa 27       	eor	r26, r26
    4d90:	62 17       	cp	r22, r18
    4d92:	73 07       	cpc	r23, r19
    4d94:	84 07       	cpc	r24, r20
    4d96:	38 f0       	brcs	.+14     	; 0x4da6 <__divsf3_pse+0x26>
    4d98:	9f 5f       	subi	r25, 0xFF	; 255
    4d9a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d9c:	22 0f       	add	r18, r18
    4d9e:	33 1f       	adc	r19, r19
    4da0:	44 1f       	adc	r20, r20
    4da2:	aa 1f       	adc	r26, r26
    4da4:	a9 f3       	breq	.-22     	; 0x4d90 <__divsf3_pse+0x10>
    4da6:	35 d0       	rcall	.+106    	; 0x4e12 <__divsf3_pse+0x92>
    4da8:	0e 2e       	mov	r0, r30
    4daa:	3a f0       	brmi	.+14     	; 0x4dba <__divsf3_pse+0x3a>
    4dac:	e0 e8       	ldi	r30, 0x80	; 128
    4dae:	32 d0       	rcall	.+100    	; 0x4e14 <__divsf3_pse+0x94>
    4db0:	91 50       	subi	r25, 0x01	; 1
    4db2:	50 40       	sbci	r21, 0x00	; 0
    4db4:	e6 95       	lsr	r30
    4db6:	00 1c       	adc	r0, r0
    4db8:	ca f7       	brpl	.-14     	; 0x4dac <__divsf3_pse+0x2c>
    4dba:	2b d0       	rcall	.+86     	; 0x4e12 <__divsf3_pse+0x92>
    4dbc:	fe 2f       	mov	r31, r30
    4dbe:	29 d0       	rcall	.+82     	; 0x4e12 <__divsf3_pse+0x92>
    4dc0:	66 0f       	add	r22, r22
    4dc2:	77 1f       	adc	r23, r23
    4dc4:	88 1f       	adc	r24, r24
    4dc6:	bb 1f       	adc	r27, r27
    4dc8:	26 17       	cp	r18, r22
    4dca:	37 07       	cpc	r19, r23
    4dcc:	48 07       	cpc	r20, r24
    4dce:	ab 07       	cpc	r26, r27
    4dd0:	b0 e8       	ldi	r27, 0x80	; 128
    4dd2:	09 f0       	breq	.+2      	; 0x4dd6 <__divsf3_pse+0x56>
    4dd4:	bb 0b       	sbc	r27, r27
    4dd6:	80 2d       	mov	r24, r0
    4dd8:	bf 01       	movw	r22, r30
    4dda:	ff 27       	eor	r31, r31
    4ddc:	93 58       	subi	r25, 0x83	; 131
    4dde:	5f 4f       	sbci	r21, 0xFF	; 255
    4de0:	3a f0       	brmi	.+14     	; 0x4df0 <__divsf3_pse+0x70>
    4de2:	9e 3f       	cpi	r25, 0xFE	; 254
    4de4:	51 05       	cpc	r21, r1
    4de6:	78 f0       	brcs	.+30     	; 0x4e06 <__divsf3_pse+0x86>
    4de8:	0c 94 2c 28 	jmp	0x5058	; 0x5058 <__fp_inf>
    4dec:	0c 94 87 28 	jmp	0x510e	; 0x510e <__fp_szero>
    4df0:	5f 3f       	cpi	r21, 0xFF	; 255
    4df2:	e4 f3       	brlt	.-8      	; 0x4dec <__divsf3_pse+0x6c>
    4df4:	98 3e       	cpi	r25, 0xE8	; 232
    4df6:	d4 f3       	brlt	.-12     	; 0x4dec <__divsf3_pse+0x6c>
    4df8:	86 95       	lsr	r24
    4dfa:	77 95       	ror	r23
    4dfc:	67 95       	ror	r22
    4dfe:	b7 95       	ror	r27
    4e00:	f7 95       	ror	r31
    4e02:	9f 5f       	subi	r25, 0xFF	; 255
    4e04:	c9 f7       	brne	.-14     	; 0x4df8 <__divsf3_pse+0x78>
    4e06:	88 0f       	add	r24, r24
    4e08:	91 1d       	adc	r25, r1
    4e0a:	96 95       	lsr	r25
    4e0c:	87 95       	ror	r24
    4e0e:	97 f9       	bld	r25, 7
    4e10:	08 95       	ret
    4e12:	e1 e0       	ldi	r30, 0x01	; 1
    4e14:	66 0f       	add	r22, r22
    4e16:	77 1f       	adc	r23, r23
    4e18:	88 1f       	adc	r24, r24
    4e1a:	bb 1f       	adc	r27, r27
    4e1c:	62 17       	cp	r22, r18
    4e1e:	73 07       	cpc	r23, r19
    4e20:	84 07       	cpc	r24, r20
    4e22:	ba 07       	cpc	r27, r26
    4e24:	20 f0       	brcs	.+8      	; 0x4e2e <__divsf3_pse+0xae>
    4e26:	62 1b       	sub	r22, r18
    4e28:	73 0b       	sbc	r23, r19
    4e2a:	84 0b       	sbc	r24, r20
    4e2c:	ba 0b       	sbc	r27, r26
    4e2e:	ee 1f       	adc	r30, r30
    4e30:	88 f7       	brcc	.-30     	; 0x4e14 <__divsf3_pse+0x94>
    4e32:	e0 95       	com	r30
    4e34:	08 95       	ret

00004e36 <__fixsfdi>:
    4e36:	be e3       	ldi	r27, 0x3E	; 62
    4e38:	04 d0       	rcall	.+8      	; 0x4e42 <__fixunssfdi+0x2>
    4e3a:	08 f4       	brcc	.+2      	; 0x4e3e <__fixsfdi+0x8>
    4e3c:	90 e8       	ldi	r25, 0x80	; 128
    4e3e:	08 95       	ret

00004e40 <__fixunssfdi>:
    4e40:	bf e3       	ldi	r27, 0x3F	; 63
    4e42:	22 27       	eor	r18, r18
    4e44:	33 27       	eor	r19, r19
    4e46:	a9 01       	movw	r20, r18
    4e48:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__fp_splitA>
    4e4c:	60 f1       	brcs	.+88     	; 0x4ea6 <__fixunssfdi+0x66>
    4e4e:	9f 57       	subi	r25, 0x7F	; 127
    4e50:	48 f1       	brcs	.+82     	; 0x4ea4 <__fixunssfdi+0x64>
    4e52:	b9 17       	cp	r27, r25
    4e54:	40 f1       	brcs	.+80     	; 0x4ea6 <__fixunssfdi+0x66>
    4e56:	bf e3       	ldi	r27, 0x3F	; 63
    4e58:	b9 1b       	sub	r27, r25
    4e5a:	99 27       	eor	r25, r25
    4e5c:	b8 50       	subi	r27, 0x08	; 8
    4e5e:	3a f4       	brpl	.+14     	; 0x4e6e <__fixunssfdi+0x2e>
    4e60:	66 0f       	add	r22, r22
    4e62:	77 1f       	adc	r23, r23
    4e64:	88 1f       	adc	r24, r24
    4e66:	99 1f       	adc	r25, r25
    4e68:	b3 95       	inc	r27
    4e6a:	d2 f3       	brmi	.-12     	; 0x4e60 <__fixunssfdi+0x20>
    4e6c:	16 c0       	rjmp	.+44     	; 0x4e9a <__fixunssfdi+0x5a>
    4e6e:	b8 50       	subi	r27, 0x08	; 8
    4e70:	4a f0       	brmi	.+18     	; 0x4e84 <__fixunssfdi+0x44>
    4e72:	23 2f       	mov	r18, r19
    4e74:	34 2f       	mov	r19, r20
    4e76:	45 2f       	mov	r20, r21
    4e78:	56 2f       	mov	r21, r22
    4e7a:	67 2f       	mov	r22, r23
    4e7c:	78 2f       	mov	r23, r24
    4e7e:	88 27       	eor	r24, r24
    4e80:	b8 50       	subi	r27, 0x08	; 8
    4e82:	ba f7       	brpl	.-18     	; 0x4e72 <__fixunssfdi+0x32>
    4e84:	b8 5f       	subi	r27, 0xF8	; 248
    4e86:	49 f0       	breq	.+18     	; 0x4e9a <__fixunssfdi+0x5a>
    4e88:	86 95       	lsr	r24
    4e8a:	77 95       	ror	r23
    4e8c:	67 95       	ror	r22
    4e8e:	57 95       	ror	r21
    4e90:	47 95       	ror	r20
    4e92:	37 95       	ror	r19
    4e94:	27 95       	ror	r18
    4e96:	ba 95       	dec	r27
    4e98:	b9 f7       	brne	.-18     	; 0x4e88 <__fixunssfdi+0x48>
    4e9a:	16 f4       	brtc	.+4      	; 0x4ea0 <__fixunssfdi+0x60>
    4e9c:	0e 94 35 28 	call	0x506a	; 0x506a <__fp_negdi>
    4ea0:	88 94       	clc
    4ea2:	08 95       	ret
    4ea4:	88 94       	clc
    4ea6:	60 e0       	ldi	r22, 0x00	; 0
    4ea8:	70 e0       	ldi	r23, 0x00	; 0
    4eaa:	cb 01       	movw	r24, r22
    4eac:	08 95       	ret

00004eae <__fixsfsi>:
    4eae:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <__fixunssfsi>
    4eb2:	68 94       	set
    4eb4:	b1 11       	cpse	r27, r1
    4eb6:	0c 94 87 28 	jmp	0x510e	; 0x510e <__fp_szero>
    4eba:	08 95       	ret

00004ebc <__fixunssfsi>:
    4ebc:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <__fp_splitA>
    4ec0:	88 f0       	brcs	.+34     	; 0x4ee4 <__fixunssfsi+0x28>
    4ec2:	9f 57       	subi	r25, 0x7F	; 127
    4ec4:	98 f0       	brcs	.+38     	; 0x4eec <__fixunssfsi+0x30>
    4ec6:	b9 2f       	mov	r27, r25
    4ec8:	99 27       	eor	r25, r25
    4eca:	b7 51       	subi	r27, 0x17	; 23
    4ecc:	b0 f0       	brcs	.+44     	; 0x4efa <__fixunssfsi+0x3e>
    4ece:	e1 f0       	breq	.+56     	; 0x4f08 <__fixunssfsi+0x4c>
    4ed0:	66 0f       	add	r22, r22
    4ed2:	77 1f       	adc	r23, r23
    4ed4:	88 1f       	adc	r24, r24
    4ed6:	99 1f       	adc	r25, r25
    4ed8:	1a f0       	brmi	.+6      	; 0x4ee0 <__fixunssfsi+0x24>
    4eda:	ba 95       	dec	r27
    4edc:	c9 f7       	brne	.-14     	; 0x4ed0 <__fixunssfsi+0x14>
    4ede:	14 c0       	rjmp	.+40     	; 0x4f08 <__fixunssfsi+0x4c>
    4ee0:	b1 30       	cpi	r27, 0x01	; 1
    4ee2:	91 f0       	breq	.+36     	; 0x4f08 <__fixunssfsi+0x4c>
    4ee4:	0e 94 86 28 	call	0x510c	; 0x510c <__fp_zero>
    4ee8:	b1 e0       	ldi	r27, 0x01	; 1
    4eea:	08 95       	ret
    4eec:	0c 94 86 28 	jmp	0x510c	; 0x510c <__fp_zero>
    4ef0:	67 2f       	mov	r22, r23
    4ef2:	78 2f       	mov	r23, r24
    4ef4:	88 27       	eor	r24, r24
    4ef6:	b8 5f       	subi	r27, 0xF8	; 248
    4ef8:	39 f0       	breq	.+14     	; 0x4f08 <__fixunssfsi+0x4c>
    4efa:	b9 3f       	cpi	r27, 0xF9	; 249
    4efc:	cc f3       	brlt	.-14     	; 0x4ef0 <__fixunssfsi+0x34>
    4efe:	86 95       	lsr	r24
    4f00:	77 95       	ror	r23
    4f02:	67 95       	ror	r22
    4f04:	b3 95       	inc	r27
    4f06:	d9 f7       	brne	.-10     	; 0x4efe <__fixunssfsi+0x42>
    4f08:	3e f4       	brtc	.+14     	; 0x4f18 <__fixunssfsi+0x5c>
    4f0a:	90 95       	com	r25
    4f0c:	80 95       	com	r24
    4f0e:	70 95       	com	r23
    4f10:	61 95       	neg	r22
    4f12:	7f 4f       	sbci	r23, 0xFF	; 255
    4f14:	8f 4f       	sbci	r24, 0xFF	; 255
    4f16:	9f 4f       	sbci	r25, 0xFF	; 255
    4f18:	08 95       	ret

00004f1a <__floatunsisf>:
    4f1a:	e8 94       	clt
    4f1c:	09 c0       	rjmp	.+18     	; 0x4f30 <__floatsisf+0x12>

00004f1e <__floatsisf>:
    4f1e:	97 fb       	bst	r25, 7
    4f20:	3e f4       	brtc	.+14     	; 0x4f30 <__floatsisf+0x12>
    4f22:	90 95       	com	r25
    4f24:	80 95       	com	r24
    4f26:	70 95       	com	r23
    4f28:	61 95       	neg	r22
    4f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    4f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f30:	99 23       	and	r25, r25
    4f32:	a9 f0       	breq	.+42     	; 0x4f5e <__floatsisf+0x40>
    4f34:	f9 2f       	mov	r31, r25
    4f36:	96 e9       	ldi	r25, 0x96	; 150
    4f38:	bb 27       	eor	r27, r27
    4f3a:	93 95       	inc	r25
    4f3c:	f6 95       	lsr	r31
    4f3e:	87 95       	ror	r24
    4f40:	77 95       	ror	r23
    4f42:	67 95       	ror	r22
    4f44:	b7 95       	ror	r27
    4f46:	f1 11       	cpse	r31, r1
    4f48:	f8 cf       	rjmp	.-16     	; 0x4f3a <__floatsisf+0x1c>
    4f4a:	fa f4       	brpl	.+62     	; 0x4f8a <__floatsisf+0x6c>
    4f4c:	bb 0f       	add	r27, r27
    4f4e:	11 f4       	brne	.+4      	; 0x4f54 <__floatsisf+0x36>
    4f50:	60 ff       	sbrs	r22, 0
    4f52:	1b c0       	rjmp	.+54     	; 0x4f8a <__floatsisf+0x6c>
    4f54:	6f 5f       	subi	r22, 0xFF	; 255
    4f56:	7f 4f       	sbci	r23, 0xFF	; 255
    4f58:	8f 4f       	sbci	r24, 0xFF	; 255
    4f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f5c:	16 c0       	rjmp	.+44     	; 0x4f8a <__floatsisf+0x6c>
    4f5e:	88 23       	and	r24, r24
    4f60:	11 f0       	breq	.+4      	; 0x4f66 <__floatsisf+0x48>
    4f62:	96 e9       	ldi	r25, 0x96	; 150
    4f64:	11 c0       	rjmp	.+34     	; 0x4f88 <__floatsisf+0x6a>
    4f66:	77 23       	and	r23, r23
    4f68:	21 f0       	breq	.+8      	; 0x4f72 <__floatsisf+0x54>
    4f6a:	9e e8       	ldi	r25, 0x8E	; 142
    4f6c:	87 2f       	mov	r24, r23
    4f6e:	76 2f       	mov	r23, r22
    4f70:	05 c0       	rjmp	.+10     	; 0x4f7c <__floatsisf+0x5e>
    4f72:	66 23       	and	r22, r22
    4f74:	71 f0       	breq	.+28     	; 0x4f92 <__floatsisf+0x74>
    4f76:	96 e8       	ldi	r25, 0x86	; 134
    4f78:	86 2f       	mov	r24, r22
    4f7a:	70 e0       	ldi	r23, 0x00	; 0
    4f7c:	60 e0       	ldi	r22, 0x00	; 0
    4f7e:	2a f0       	brmi	.+10     	; 0x4f8a <__floatsisf+0x6c>
    4f80:	9a 95       	dec	r25
    4f82:	66 0f       	add	r22, r22
    4f84:	77 1f       	adc	r23, r23
    4f86:	88 1f       	adc	r24, r24
    4f88:	da f7       	brpl	.-10     	; 0x4f80 <__floatsisf+0x62>
    4f8a:	88 0f       	add	r24, r24
    4f8c:	96 95       	lsr	r25
    4f8e:	87 95       	ror	r24
    4f90:	97 f9       	bld	r25, 7
    4f92:	08 95       	ret

00004f94 <__floatundisf>:
    4f94:	e8 94       	clt

00004f96 <__fp_di2sf>:
    4f96:	f9 2f       	mov	r31, r25
    4f98:	96 eb       	ldi	r25, 0xB6	; 182
    4f9a:	ff 23       	and	r31, r31
    4f9c:	81 f0       	breq	.+32     	; 0x4fbe <__fp_di2sf+0x28>
    4f9e:	12 16       	cp	r1, r18
    4fa0:	13 06       	cpc	r1, r19
    4fa2:	14 06       	cpc	r1, r20
    4fa4:	44 0b       	sbc	r20, r20
    4fa6:	93 95       	inc	r25
    4fa8:	f6 95       	lsr	r31
    4faa:	87 95       	ror	r24
    4fac:	77 95       	ror	r23
    4fae:	67 95       	ror	r22
    4fb0:	57 95       	ror	r21
    4fb2:	40 40       	sbci	r20, 0x00	; 0
    4fb4:	ff 23       	and	r31, r31
    4fb6:	b9 f7       	brne	.-18     	; 0x4fa6 <__fp_di2sf+0x10>
    4fb8:	1b c0       	rjmp	.+54     	; 0x4ff0 <__fp_di2sf+0x5a>
    4fba:	99 27       	eor	r25, r25
    4fbc:	08 95       	ret
    4fbe:	88 23       	and	r24, r24
    4fc0:	51 f4       	brne	.+20     	; 0x4fd6 <__fp_di2sf+0x40>
    4fc2:	98 50       	subi	r25, 0x08	; 8
    4fc4:	d2 f7       	brpl	.-12     	; 0x4fba <__fp_di2sf+0x24>
    4fc6:	87 2b       	or	r24, r23
    4fc8:	76 2f       	mov	r23, r22
    4fca:	65 2f       	mov	r22, r21
    4fcc:	54 2f       	mov	r21, r20
    4fce:	43 2f       	mov	r20, r19
    4fd0:	32 2f       	mov	r19, r18
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	b1 f3       	breq	.-20     	; 0x4fc2 <__fp_di2sf+0x2c>
    4fd6:	12 16       	cp	r1, r18
    4fd8:	13 06       	cpc	r1, r19
    4fda:	14 06       	cpc	r1, r20
    4fdc:	44 0b       	sbc	r20, r20
    4fde:	88 23       	and	r24, r24
    4fe0:	3a f0       	brmi	.+14     	; 0x4ff0 <__fp_di2sf+0x5a>
    4fe2:	9a 95       	dec	r25
    4fe4:	44 0f       	add	r20, r20
    4fe6:	55 1f       	adc	r21, r21
    4fe8:	66 1f       	adc	r22, r22
    4fea:	77 1f       	adc	r23, r23
    4fec:	88 1f       	adc	r24, r24
    4fee:	ca f7       	brpl	.-14     	; 0x4fe2 <__fp_di2sf+0x4c>
    4ff0:	55 23       	and	r21, r21
    4ff2:	4a f4       	brpl	.+18     	; 0x5006 <__fp_di2sf+0x70>
    4ff4:	44 0f       	add	r20, r20
    4ff6:	55 1f       	adc	r21, r21
    4ff8:	11 f4       	brne	.+4      	; 0x4ffe <__fp_di2sf+0x68>
    4ffa:	60 ff       	sbrs	r22, 0
    4ffc:	04 c0       	rjmp	.+8      	; 0x5006 <__fp_di2sf+0x70>
    4ffe:	6f 5f       	subi	r22, 0xFF	; 255
    5000:	7f 4f       	sbci	r23, 0xFF	; 255
    5002:	8f 4f       	sbci	r24, 0xFF	; 255
    5004:	9f 4f       	sbci	r25, 0xFF	; 255
    5006:	88 0f       	add	r24, r24
    5008:	96 95       	lsr	r25
    500a:	87 95       	ror	r24
    500c:	97 f9       	bld	r25, 7
    500e:	08 95       	ret

00005010 <__fp_cmp>:
    5010:	99 0f       	add	r25, r25
    5012:	00 08       	sbc	r0, r0
    5014:	55 0f       	add	r21, r21
    5016:	aa 0b       	sbc	r26, r26
    5018:	e0 e8       	ldi	r30, 0x80	; 128
    501a:	fe ef       	ldi	r31, 0xFE	; 254
    501c:	16 16       	cp	r1, r22
    501e:	17 06       	cpc	r1, r23
    5020:	e8 07       	cpc	r30, r24
    5022:	f9 07       	cpc	r31, r25
    5024:	c0 f0       	brcs	.+48     	; 0x5056 <__fp_cmp+0x46>
    5026:	12 16       	cp	r1, r18
    5028:	13 06       	cpc	r1, r19
    502a:	e4 07       	cpc	r30, r20
    502c:	f5 07       	cpc	r31, r21
    502e:	98 f0       	brcs	.+38     	; 0x5056 <__fp_cmp+0x46>
    5030:	62 1b       	sub	r22, r18
    5032:	73 0b       	sbc	r23, r19
    5034:	84 0b       	sbc	r24, r20
    5036:	95 0b       	sbc	r25, r21
    5038:	39 f4       	brne	.+14     	; 0x5048 <__fp_cmp+0x38>
    503a:	0a 26       	eor	r0, r26
    503c:	61 f0       	breq	.+24     	; 0x5056 <__fp_cmp+0x46>
    503e:	23 2b       	or	r18, r19
    5040:	24 2b       	or	r18, r20
    5042:	25 2b       	or	r18, r21
    5044:	21 f4       	brne	.+8      	; 0x504e <__fp_cmp+0x3e>
    5046:	08 95       	ret
    5048:	0a 26       	eor	r0, r26
    504a:	09 f4       	brne	.+2      	; 0x504e <__fp_cmp+0x3e>
    504c:	a1 40       	sbci	r26, 0x01	; 1
    504e:	a6 95       	lsr	r26
    5050:	8f ef       	ldi	r24, 0xFF	; 255
    5052:	81 1d       	adc	r24, r1
    5054:	81 1d       	adc	r24, r1
    5056:	08 95       	ret

00005058 <__fp_inf>:
    5058:	97 f9       	bld	r25, 7
    505a:	9f 67       	ori	r25, 0x7F	; 127
    505c:	80 e8       	ldi	r24, 0x80	; 128
    505e:	70 e0       	ldi	r23, 0x00	; 0
    5060:	60 e0       	ldi	r22, 0x00	; 0
    5062:	08 95       	ret

00005064 <__fp_nan>:
    5064:	9f ef       	ldi	r25, 0xFF	; 255
    5066:	80 ec       	ldi	r24, 0xC0	; 192
    5068:	08 95       	ret

0000506a <__fp_negdi>:
    506a:	90 95       	com	r25
    506c:	80 95       	com	r24
    506e:	70 95       	com	r23
    5070:	60 95       	com	r22
    5072:	50 95       	com	r21
    5074:	40 95       	com	r20
    5076:	30 95       	com	r19
    5078:	21 95       	neg	r18
    507a:	3f 4f       	sbci	r19, 0xFF	; 255
    507c:	4f 4f       	sbci	r20, 0xFF	; 255
    507e:	5f 4f       	sbci	r21, 0xFF	; 255
    5080:	6f 4f       	sbci	r22, 0xFF	; 255
    5082:	7f 4f       	sbci	r23, 0xFF	; 255
    5084:	8f 4f       	sbci	r24, 0xFF	; 255
    5086:	9f 4f       	sbci	r25, 0xFF	; 255
    5088:	08 95       	ret

0000508a <__fp_pscA>:
    508a:	00 24       	eor	r0, r0
    508c:	0a 94       	dec	r0
    508e:	16 16       	cp	r1, r22
    5090:	17 06       	cpc	r1, r23
    5092:	18 06       	cpc	r1, r24
    5094:	09 06       	cpc	r0, r25
    5096:	08 95       	ret

00005098 <__fp_pscB>:
    5098:	00 24       	eor	r0, r0
    509a:	0a 94       	dec	r0
    509c:	12 16       	cp	r1, r18
    509e:	13 06       	cpc	r1, r19
    50a0:	14 06       	cpc	r1, r20
    50a2:	05 06       	cpc	r0, r21
    50a4:	08 95       	ret

000050a6 <__fp_round>:
    50a6:	09 2e       	mov	r0, r25
    50a8:	03 94       	inc	r0
    50aa:	00 0c       	add	r0, r0
    50ac:	11 f4       	brne	.+4      	; 0x50b2 <__fp_round+0xc>
    50ae:	88 23       	and	r24, r24
    50b0:	52 f0       	brmi	.+20     	; 0x50c6 <__fp_round+0x20>
    50b2:	bb 0f       	add	r27, r27
    50b4:	40 f4       	brcc	.+16     	; 0x50c6 <__fp_round+0x20>
    50b6:	bf 2b       	or	r27, r31
    50b8:	11 f4       	brne	.+4      	; 0x50be <__fp_round+0x18>
    50ba:	60 ff       	sbrs	r22, 0
    50bc:	04 c0       	rjmp	.+8      	; 0x50c6 <__fp_round+0x20>
    50be:	6f 5f       	subi	r22, 0xFF	; 255
    50c0:	7f 4f       	sbci	r23, 0xFF	; 255
    50c2:	8f 4f       	sbci	r24, 0xFF	; 255
    50c4:	9f 4f       	sbci	r25, 0xFF	; 255
    50c6:	08 95       	ret

000050c8 <__fp_split3>:
    50c8:	57 fd       	sbrc	r21, 7
    50ca:	90 58       	subi	r25, 0x80	; 128
    50cc:	44 0f       	add	r20, r20
    50ce:	55 1f       	adc	r21, r21
    50d0:	59 f0       	breq	.+22     	; 0x50e8 <__fp_splitA+0x10>
    50d2:	5f 3f       	cpi	r21, 0xFF	; 255
    50d4:	71 f0       	breq	.+28     	; 0x50f2 <__fp_splitA+0x1a>
    50d6:	47 95       	ror	r20

000050d8 <__fp_splitA>:
    50d8:	88 0f       	add	r24, r24
    50da:	97 fb       	bst	r25, 7
    50dc:	99 1f       	adc	r25, r25
    50de:	61 f0       	breq	.+24     	; 0x50f8 <__fp_splitA+0x20>
    50e0:	9f 3f       	cpi	r25, 0xFF	; 255
    50e2:	79 f0       	breq	.+30     	; 0x5102 <__fp_splitA+0x2a>
    50e4:	87 95       	ror	r24
    50e6:	08 95       	ret
    50e8:	12 16       	cp	r1, r18
    50ea:	13 06       	cpc	r1, r19
    50ec:	14 06       	cpc	r1, r20
    50ee:	55 1f       	adc	r21, r21
    50f0:	f2 cf       	rjmp	.-28     	; 0x50d6 <__fp_split3+0xe>
    50f2:	46 95       	lsr	r20
    50f4:	f1 df       	rcall	.-30     	; 0x50d8 <__fp_splitA>
    50f6:	08 c0       	rjmp	.+16     	; 0x5108 <__fp_splitA+0x30>
    50f8:	16 16       	cp	r1, r22
    50fa:	17 06       	cpc	r1, r23
    50fc:	18 06       	cpc	r1, r24
    50fe:	99 1f       	adc	r25, r25
    5100:	f1 cf       	rjmp	.-30     	; 0x50e4 <__fp_splitA+0xc>
    5102:	86 95       	lsr	r24
    5104:	71 05       	cpc	r23, r1
    5106:	61 05       	cpc	r22, r1
    5108:	08 94       	sec
    510a:	08 95       	ret

0000510c <__fp_zero>:
    510c:	e8 94       	clt

0000510e <__fp_szero>:
    510e:	bb 27       	eor	r27, r27
    5110:	66 27       	eor	r22, r22
    5112:	77 27       	eor	r23, r23
    5114:	cb 01       	movw	r24, r22
    5116:	97 f9       	bld	r25, 7
    5118:	08 95       	ret

0000511a <__gesf2>:
    511a:	0e 94 08 28 	call	0x5010	; 0x5010 <__fp_cmp>
    511e:	08 f4       	brcc	.+2      	; 0x5122 <__gesf2+0x8>
    5120:	8f ef       	ldi	r24, 0xFF	; 255
    5122:	08 95       	ret

00005124 <__mulsf3>:
    5124:	0e 94 a5 28 	call	0x514a	; 0x514a <__mulsf3x>
    5128:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__fp_round>
    512c:	0e 94 45 28 	call	0x508a	; 0x508a <__fp_pscA>
    5130:	38 f0       	brcs	.+14     	; 0x5140 <__mulsf3+0x1c>
    5132:	0e 94 4c 28 	call	0x5098	; 0x5098 <__fp_pscB>
    5136:	20 f0       	brcs	.+8      	; 0x5140 <__mulsf3+0x1c>
    5138:	95 23       	and	r25, r21
    513a:	11 f0       	breq	.+4      	; 0x5140 <__mulsf3+0x1c>
    513c:	0c 94 2c 28 	jmp	0x5058	; 0x5058 <__fp_inf>
    5140:	0c 94 32 28 	jmp	0x5064	; 0x5064 <__fp_nan>
    5144:	11 24       	eor	r1, r1
    5146:	0c 94 87 28 	jmp	0x510e	; 0x510e <__fp_szero>

0000514a <__mulsf3x>:
    514a:	0e 94 64 28 	call	0x50c8	; 0x50c8 <__fp_split3>
    514e:	70 f3       	brcs	.-36     	; 0x512c <__mulsf3+0x8>

00005150 <__mulsf3_pse>:
    5150:	95 9f       	mul	r25, r21
    5152:	c1 f3       	breq	.-16     	; 0x5144 <__mulsf3+0x20>
    5154:	95 0f       	add	r25, r21
    5156:	50 e0       	ldi	r21, 0x00	; 0
    5158:	55 1f       	adc	r21, r21
    515a:	62 9f       	mul	r22, r18
    515c:	f0 01       	movw	r30, r0
    515e:	72 9f       	mul	r23, r18
    5160:	bb 27       	eor	r27, r27
    5162:	f0 0d       	add	r31, r0
    5164:	b1 1d       	adc	r27, r1
    5166:	63 9f       	mul	r22, r19
    5168:	aa 27       	eor	r26, r26
    516a:	f0 0d       	add	r31, r0
    516c:	b1 1d       	adc	r27, r1
    516e:	aa 1f       	adc	r26, r26
    5170:	64 9f       	mul	r22, r20
    5172:	66 27       	eor	r22, r22
    5174:	b0 0d       	add	r27, r0
    5176:	a1 1d       	adc	r26, r1
    5178:	66 1f       	adc	r22, r22
    517a:	82 9f       	mul	r24, r18
    517c:	22 27       	eor	r18, r18
    517e:	b0 0d       	add	r27, r0
    5180:	a1 1d       	adc	r26, r1
    5182:	62 1f       	adc	r22, r18
    5184:	73 9f       	mul	r23, r19
    5186:	b0 0d       	add	r27, r0
    5188:	a1 1d       	adc	r26, r1
    518a:	62 1f       	adc	r22, r18
    518c:	83 9f       	mul	r24, r19
    518e:	a0 0d       	add	r26, r0
    5190:	61 1d       	adc	r22, r1
    5192:	22 1f       	adc	r18, r18
    5194:	74 9f       	mul	r23, r20
    5196:	33 27       	eor	r19, r19
    5198:	a0 0d       	add	r26, r0
    519a:	61 1d       	adc	r22, r1
    519c:	23 1f       	adc	r18, r19
    519e:	84 9f       	mul	r24, r20
    51a0:	60 0d       	add	r22, r0
    51a2:	21 1d       	adc	r18, r1
    51a4:	82 2f       	mov	r24, r18
    51a6:	76 2f       	mov	r23, r22
    51a8:	6a 2f       	mov	r22, r26
    51aa:	11 24       	eor	r1, r1
    51ac:	9f 57       	subi	r25, 0x7F	; 127
    51ae:	50 40       	sbci	r21, 0x00	; 0
    51b0:	9a f0       	brmi	.+38     	; 0x51d8 <__mulsf3_pse+0x88>
    51b2:	f1 f0       	breq	.+60     	; 0x51f0 <__mulsf3_pse+0xa0>
    51b4:	88 23       	and	r24, r24
    51b6:	4a f0       	brmi	.+18     	; 0x51ca <__mulsf3_pse+0x7a>
    51b8:	ee 0f       	add	r30, r30
    51ba:	ff 1f       	adc	r31, r31
    51bc:	bb 1f       	adc	r27, r27
    51be:	66 1f       	adc	r22, r22
    51c0:	77 1f       	adc	r23, r23
    51c2:	88 1f       	adc	r24, r24
    51c4:	91 50       	subi	r25, 0x01	; 1
    51c6:	50 40       	sbci	r21, 0x00	; 0
    51c8:	a9 f7       	brne	.-22     	; 0x51b4 <__mulsf3_pse+0x64>
    51ca:	9e 3f       	cpi	r25, 0xFE	; 254
    51cc:	51 05       	cpc	r21, r1
    51ce:	80 f0       	brcs	.+32     	; 0x51f0 <__mulsf3_pse+0xa0>
    51d0:	0c 94 2c 28 	jmp	0x5058	; 0x5058 <__fp_inf>
    51d4:	0c 94 87 28 	jmp	0x510e	; 0x510e <__fp_szero>
    51d8:	5f 3f       	cpi	r21, 0xFF	; 255
    51da:	e4 f3       	brlt	.-8      	; 0x51d4 <__mulsf3_pse+0x84>
    51dc:	98 3e       	cpi	r25, 0xE8	; 232
    51de:	d4 f3       	brlt	.-12     	; 0x51d4 <__mulsf3_pse+0x84>
    51e0:	86 95       	lsr	r24
    51e2:	77 95       	ror	r23
    51e4:	67 95       	ror	r22
    51e6:	b7 95       	ror	r27
    51e8:	f7 95       	ror	r31
    51ea:	e7 95       	ror	r30
    51ec:	9f 5f       	subi	r25, 0xFF	; 255
    51ee:	c1 f7       	brne	.-16     	; 0x51e0 <__mulsf3_pse+0x90>
    51f0:	fe 2b       	or	r31, r30
    51f2:	88 0f       	add	r24, r24
    51f4:	91 1d       	adc	r25, r1
    51f6:	96 95       	lsr	r25
    51f8:	87 95       	ror	r24
    51fa:	97 f9       	bld	r25, 7
    51fc:	08 95       	ret

000051fe <sprintf>:
    51fe:	ae e0       	ldi	r26, 0x0E	; 14
    5200:	b0 e0       	ldi	r27, 0x00	; 0
    5202:	e5 e0       	ldi	r30, 0x05	; 5
    5204:	f9 e2       	ldi	r31, 0x29	; 41
    5206:	0c 94 c0 2b 	jmp	0x5780	; 0x5780 <__prologue_saves__+0x1c>
    520a:	0d 89       	ldd	r16, Y+21	; 0x15
    520c:	1e 89       	ldd	r17, Y+22	; 0x16
    520e:	86 e0       	ldi	r24, 0x06	; 6
    5210:	8c 83       	std	Y+4, r24	; 0x04
    5212:	1a 83       	std	Y+2, r17	; 0x02
    5214:	09 83       	std	Y+1, r16	; 0x01
    5216:	8f ef       	ldi	r24, 0xFF	; 255
    5218:	9f e7       	ldi	r25, 0x7F	; 127
    521a:	9e 83       	std	Y+6, r25	; 0x06
    521c:	8d 83       	std	Y+5, r24	; 0x05
    521e:	ae 01       	movw	r20, r28
    5220:	47 5e       	subi	r20, 0xE7	; 231
    5222:	5f 4f       	sbci	r21, 0xFF	; 255
    5224:	6f 89       	ldd	r22, Y+23	; 0x17
    5226:	78 8d       	ldd	r23, Y+24	; 0x18
    5228:	ce 01       	movw	r24, r28
    522a:	01 96       	adiw	r24, 0x01	; 1
    522c:	0e 94 21 29 	call	0x5242	; 0x5242 <vfprintf>
    5230:	ef 81       	ldd	r30, Y+7	; 0x07
    5232:	f8 85       	ldd	r31, Y+8	; 0x08
    5234:	e0 0f       	add	r30, r16
    5236:	f1 1f       	adc	r31, r17
    5238:	10 82       	st	Z, r1
    523a:	2e 96       	adiw	r28, 0x0e	; 14
    523c:	e4 e0       	ldi	r30, 0x04	; 4
    523e:	0c 94 dc 2b 	jmp	0x57b8	; 0x57b8 <__epilogue_restores__+0x1c>

00005242 <vfprintf>:
    5242:	ab e0       	ldi	r26, 0x0B	; 11
    5244:	b0 e0       	ldi	r27, 0x00	; 0
    5246:	e7 e2       	ldi	r30, 0x27	; 39
    5248:	f9 e2       	ldi	r31, 0x29	; 41
    524a:	0c 94 b2 2b 	jmp	0x5764	; 0x5764 <__prologue_saves__>
    524e:	6c 01       	movw	r12, r24
    5250:	7b 01       	movw	r14, r22
    5252:	8a 01       	movw	r16, r20
    5254:	fc 01       	movw	r30, r24
    5256:	17 82       	std	Z+7, r1	; 0x07
    5258:	16 82       	std	Z+6, r1	; 0x06
    525a:	83 81       	ldd	r24, Z+3	; 0x03
    525c:	81 ff       	sbrs	r24, 1
    525e:	cc c1       	rjmp	.+920    	; 0x55f8 <vfprintf+0x3b6>
    5260:	ce 01       	movw	r24, r28
    5262:	01 96       	adiw	r24, 0x01	; 1
    5264:	3c 01       	movw	r6, r24
    5266:	f6 01       	movw	r30, r12
    5268:	93 81       	ldd	r25, Z+3	; 0x03
    526a:	f7 01       	movw	r30, r14
    526c:	93 fd       	sbrc	r25, 3
    526e:	85 91       	lpm	r24, Z+
    5270:	93 ff       	sbrs	r25, 3
    5272:	81 91       	ld	r24, Z+
    5274:	7f 01       	movw	r14, r30
    5276:	88 23       	and	r24, r24
    5278:	09 f4       	brne	.+2      	; 0x527c <vfprintf+0x3a>
    527a:	ba c1       	rjmp	.+884    	; 0x55f0 <vfprintf+0x3ae>
    527c:	85 32       	cpi	r24, 0x25	; 37
    527e:	39 f4       	brne	.+14     	; 0x528e <vfprintf+0x4c>
    5280:	93 fd       	sbrc	r25, 3
    5282:	85 91       	lpm	r24, Z+
    5284:	93 ff       	sbrs	r25, 3
    5286:	81 91       	ld	r24, Z+
    5288:	7f 01       	movw	r14, r30
    528a:	85 32       	cpi	r24, 0x25	; 37
    528c:	29 f4       	brne	.+10     	; 0x5298 <vfprintf+0x56>
    528e:	b6 01       	movw	r22, r12
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	0e 94 18 2b 	call	0x5630	; 0x5630 <fputc>
    5296:	e7 cf       	rjmp	.-50     	; 0x5266 <vfprintf+0x24>
    5298:	91 2c       	mov	r9, r1
    529a:	21 2c       	mov	r2, r1
    529c:	31 2c       	mov	r3, r1
    529e:	ff e1       	ldi	r31, 0x1F	; 31
    52a0:	f3 15       	cp	r31, r3
    52a2:	d8 f0       	brcs	.+54     	; 0x52da <vfprintf+0x98>
    52a4:	8b 32       	cpi	r24, 0x2B	; 43
    52a6:	79 f0       	breq	.+30     	; 0x52c6 <vfprintf+0x84>
    52a8:	38 f4       	brcc	.+14     	; 0x52b8 <vfprintf+0x76>
    52aa:	80 32       	cpi	r24, 0x20	; 32
    52ac:	79 f0       	breq	.+30     	; 0x52cc <vfprintf+0x8a>
    52ae:	83 32       	cpi	r24, 0x23	; 35
    52b0:	a1 f4       	brne	.+40     	; 0x52da <vfprintf+0x98>
    52b2:	23 2d       	mov	r18, r3
    52b4:	20 61       	ori	r18, 0x10	; 16
    52b6:	1d c0       	rjmp	.+58     	; 0x52f2 <vfprintf+0xb0>
    52b8:	8d 32       	cpi	r24, 0x2D	; 45
    52ba:	61 f0       	breq	.+24     	; 0x52d4 <vfprintf+0x92>
    52bc:	80 33       	cpi	r24, 0x30	; 48
    52be:	69 f4       	brne	.+26     	; 0x52da <vfprintf+0x98>
    52c0:	23 2d       	mov	r18, r3
    52c2:	21 60       	ori	r18, 0x01	; 1
    52c4:	16 c0       	rjmp	.+44     	; 0x52f2 <vfprintf+0xb0>
    52c6:	83 2d       	mov	r24, r3
    52c8:	82 60       	ori	r24, 0x02	; 2
    52ca:	38 2e       	mov	r3, r24
    52cc:	e3 2d       	mov	r30, r3
    52ce:	e4 60       	ori	r30, 0x04	; 4
    52d0:	3e 2e       	mov	r3, r30
    52d2:	2a c0       	rjmp	.+84     	; 0x5328 <vfprintf+0xe6>
    52d4:	f3 2d       	mov	r31, r3
    52d6:	f8 60       	ori	r31, 0x08	; 8
    52d8:	1d c0       	rjmp	.+58     	; 0x5314 <vfprintf+0xd2>
    52da:	37 fc       	sbrc	r3, 7
    52dc:	2d c0       	rjmp	.+90     	; 0x5338 <vfprintf+0xf6>
    52de:	20 ed       	ldi	r18, 0xD0	; 208
    52e0:	28 0f       	add	r18, r24
    52e2:	2a 30       	cpi	r18, 0x0A	; 10
    52e4:	40 f0       	brcs	.+16     	; 0x52f6 <vfprintf+0xb4>
    52e6:	8e 32       	cpi	r24, 0x2E	; 46
    52e8:	b9 f4       	brne	.+46     	; 0x5318 <vfprintf+0xd6>
    52ea:	36 fc       	sbrc	r3, 6
    52ec:	81 c1       	rjmp	.+770    	; 0x55f0 <vfprintf+0x3ae>
    52ee:	23 2d       	mov	r18, r3
    52f0:	20 64       	ori	r18, 0x40	; 64
    52f2:	32 2e       	mov	r3, r18
    52f4:	19 c0       	rjmp	.+50     	; 0x5328 <vfprintf+0xe6>
    52f6:	36 fe       	sbrs	r3, 6
    52f8:	06 c0       	rjmp	.+12     	; 0x5306 <vfprintf+0xc4>
    52fa:	8a e0       	ldi	r24, 0x0A	; 10
    52fc:	98 9e       	mul	r9, r24
    52fe:	20 0d       	add	r18, r0
    5300:	11 24       	eor	r1, r1
    5302:	92 2e       	mov	r9, r18
    5304:	11 c0       	rjmp	.+34     	; 0x5328 <vfprintf+0xe6>
    5306:	ea e0       	ldi	r30, 0x0A	; 10
    5308:	2e 9e       	mul	r2, r30
    530a:	20 0d       	add	r18, r0
    530c:	11 24       	eor	r1, r1
    530e:	22 2e       	mov	r2, r18
    5310:	f3 2d       	mov	r31, r3
    5312:	f0 62       	ori	r31, 0x20	; 32
    5314:	3f 2e       	mov	r3, r31
    5316:	08 c0       	rjmp	.+16     	; 0x5328 <vfprintf+0xe6>
    5318:	8c 36       	cpi	r24, 0x6C	; 108
    531a:	21 f4       	brne	.+8      	; 0x5324 <vfprintf+0xe2>
    531c:	83 2d       	mov	r24, r3
    531e:	80 68       	ori	r24, 0x80	; 128
    5320:	38 2e       	mov	r3, r24
    5322:	02 c0       	rjmp	.+4      	; 0x5328 <vfprintf+0xe6>
    5324:	88 36       	cpi	r24, 0x68	; 104
    5326:	41 f4       	brne	.+16     	; 0x5338 <vfprintf+0xf6>
    5328:	f7 01       	movw	r30, r14
    532a:	93 fd       	sbrc	r25, 3
    532c:	85 91       	lpm	r24, Z+
    532e:	93 ff       	sbrs	r25, 3
    5330:	81 91       	ld	r24, Z+
    5332:	7f 01       	movw	r14, r30
    5334:	81 11       	cpse	r24, r1
    5336:	b3 cf       	rjmp	.-154    	; 0x529e <vfprintf+0x5c>
    5338:	98 2f       	mov	r25, r24
    533a:	9f 7d       	andi	r25, 0xDF	; 223
    533c:	95 54       	subi	r25, 0x45	; 69
    533e:	93 30       	cpi	r25, 0x03	; 3
    5340:	28 f4       	brcc	.+10     	; 0x534c <vfprintf+0x10a>
    5342:	0c 5f       	subi	r16, 0xFC	; 252
    5344:	1f 4f       	sbci	r17, 0xFF	; 255
    5346:	9f e3       	ldi	r25, 0x3F	; 63
    5348:	99 83       	std	Y+1, r25	; 0x01
    534a:	0d c0       	rjmp	.+26     	; 0x5366 <vfprintf+0x124>
    534c:	83 36       	cpi	r24, 0x63	; 99
    534e:	31 f0       	breq	.+12     	; 0x535c <vfprintf+0x11a>
    5350:	83 37       	cpi	r24, 0x73	; 115
    5352:	71 f0       	breq	.+28     	; 0x5370 <vfprintf+0x12e>
    5354:	83 35       	cpi	r24, 0x53	; 83
    5356:	09 f0       	breq	.+2      	; 0x535a <vfprintf+0x118>
    5358:	59 c0       	rjmp	.+178    	; 0x540c <vfprintf+0x1ca>
    535a:	21 c0       	rjmp	.+66     	; 0x539e <vfprintf+0x15c>
    535c:	f8 01       	movw	r30, r16
    535e:	80 81       	ld	r24, Z
    5360:	89 83       	std	Y+1, r24	; 0x01
    5362:	0e 5f       	subi	r16, 0xFE	; 254
    5364:	1f 4f       	sbci	r17, 0xFF	; 255
    5366:	88 24       	eor	r8, r8
    5368:	83 94       	inc	r8
    536a:	91 2c       	mov	r9, r1
    536c:	53 01       	movw	r10, r6
    536e:	13 c0       	rjmp	.+38     	; 0x5396 <vfprintf+0x154>
    5370:	28 01       	movw	r4, r16
    5372:	f2 e0       	ldi	r31, 0x02	; 2
    5374:	4f 0e       	add	r4, r31
    5376:	51 1c       	adc	r5, r1
    5378:	f8 01       	movw	r30, r16
    537a:	a0 80       	ld	r10, Z
    537c:	b1 80       	ldd	r11, Z+1	; 0x01
    537e:	36 fe       	sbrs	r3, 6
    5380:	03 c0       	rjmp	.+6      	; 0x5388 <vfprintf+0x146>
    5382:	69 2d       	mov	r22, r9
    5384:	70 e0       	ldi	r23, 0x00	; 0
    5386:	02 c0       	rjmp	.+4      	; 0x538c <vfprintf+0x14a>
    5388:	6f ef       	ldi	r22, 0xFF	; 255
    538a:	7f ef       	ldi	r23, 0xFF	; 255
    538c:	c5 01       	movw	r24, r10
    538e:	0e 94 0d 2b 	call	0x561a	; 0x561a <strnlen>
    5392:	4c 01       	movw	r8, r24
    5394:	82 01       	movw	r16, r4
    5396:	f3 2d       	mov	r31, r3
    5398:	ff 77       	andi	r31, 0x7F	; 127
    539a:	3f 2e       	mov	r3, r31
    539c:	16 c0       	rjmp	.+44     	; 0x53ca <vfprintf+0x188>
    539e:	28 01       	movw	r4, r16
    53a0:	22 e0       	ldi	r18, 0x02	; 2
    53a2:	42 0e       	add	r4, r18
    53a4:	51 1c       	adc	r5, r1
    53a6:	f8 01       	movw	r30, r16
    53a8:	a0 80       	ld	r10, Z
    53aa:	b1 80       	ldd	r11, Z+1	; 0x01
    53ac:	36 fe       	sbrs	r3, 6
    53ae:	03 c0       	rjmp	.+6      	; 0x53b6 <vfprintf+0x174>
    53b0:	69 2d       	mov	r22, r9
    53b2:	70 e0       	ldi	r23, 0x00	; 0
    53b4:	02 c0       	rjmp	.+4      	; 0x53ba <vfprintf+0x178>
    53b6:	6f ef       	ldi	r22, 0xFF	; 255
    53b8:	7f ef       	ldi	r23, 0xFF	; 255
    53ba:	c5 01       	movw	r24, r10
    53bc:	0e 94 02 2b 	call	0x5604	; 0x5604 <strnlen_P>
    53c0:	4c 01       	movw	r8, r24
    53c2:	f3 2d       	mov	r31, r3
    53c4:	f0 68       	ori	r31, 0x80	; 128
    53c6:	3f 2e       	mov	r3, r31
    53c8:	82 01       	movw	r16, r4
    53ca:	33 fc       	sbrc	r3, 3
    53cc:	1b c0       	rjmp	.+54     	; 0x5404 <vfprintf+0x1c2>
    53ce:	82 2d       	mov	r24, r2
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	88 16       	cp	r8, r24
    53d4:	99 06       	cpc	r9, r25
    53d6:	b0 f4       	brcc	.+44     	; 0x5404 <vfprintf+0x1c2>
    53d8:	b6 01       	movw	r22, r12
    53da:	80 e2       	ldi	r24, 0x20	; 32
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	0e 94 18 2b 	call	0x5630	; 0x5630 <fputc>
    53e2:	2a 94       	dec	r2
    53e4:	f4 cf       	rjmp	.-24     	; 0x53ce <vfprintf+0x18c>
    53e6:	f5 01       	movw	r30, r10
    53e8:	37 fc       	sbrc	r3, 7
    53ea:	85 91       	lpm	r24, Z+
    53ec:	37 fe       	sbrs	r3, 7
    53ee:	81 91       	ld	r24, Z+
    53f0:	5f 01       	movw	r10, r30
    53f2:	b6 01       	movw	r22, r12
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	0e 94 18 2b 	call	0x5630	; 0x5630 <fputc>
    53fa:	21 10       	cpse	r2, r1
    53fc:	2a 94       	dec	r2
    53fe:	21 e0       	ldi	r18, 0x01	; 1
    5400:	82 1a       	sub	r8, r18
    5402:	91 08       	sbc	r9, r1
    5404:	81 14       	cp	r8, r1
    5406:	91 04       	cpc	r9, r1
    5408:	71 f7       	brne	.-36     	; 0x53e6 <vfprintf+0x1a4>
    540a:	e8 c0       	rjmp	.+464    	; 0x55dc <vfprintf+0x39a>
    540c:	84 36       	cpi	r24, 0x64	; 100
    540e:	11 f0       	breq	.+4      	; 0x5414 <vfprintf+0x1d2>
    5410:	89 36       	cpi	r24, 0x69	; 105
    5412:	41 f5       	brne	.+80     	; 0x5464 <vfprintf+0x222>
    5414:	f8 01       	movw	r30, r16
    5416:	37 fe       	sbrs	r3, 7
    5418:	07 c0       	rjmp	.+14     	; 0x5428 <vfprintf+0x1e6>
    541a:	60 81       	ld	r22, Z
    541c:	71 81       	ldd	r23, Z+1	; 0x01
    541e:	82 81       	ldd	r24, Z+2	; 0x02
    5420:	93 81       	ldd	r25, Z+3	; 0x03
    5422:	0c 5f       	subi	r16, 0xFC	; 252
    5424:	1f 4f       	sbci	r17, 0xFF	; 255
    5426:	08 c0       	rjmp	.+16     	; 0x5438 <vfprintf+0x1f6>
    5428:	60 81       	ld	r22, Z
    542a:	71 81       	ldd	r23, Z+1	; 0x01
    542c:	07 2e       	mov	r0, r23
    542e:	00 0c       	add	r0, r0
    5430:	88 0b       	sbc	r24, r24
    5432:	99 0b       	sbc	r25, r25
    5434:	0e 5f       	subi	r16, 0xFE	; 254
    5436:	1f 4f       	sbci	r17, 0xFF	; 255
    5438:	f3 2d       	mov	r31, r3
    543a:	ff 76       	andi	r31, 0x6F	; 111
    543c:	3f 2e       	mov	r3, r31
    543e:	97 ff       	sbrs	r25, 7
    5440:	09 c0       	rjmp	.+18     	; 0x5454 <vfprintf+0x212>
    5442:	90 95       	com	r25
    5444:	80 95       	com	r24
    5446:	70 95       	com	r23
    5448:	61 95       	neg	r22
    544a:	7f 4f       	sbci	r23, 0xFF	; 255
    544c:	8f 4f       	sbci	r24, 0xFF	; 255
    544e:	9f 4f       	sbci	r25, 0xFF	; 255
    5450:	f0 68       	ori	r31, 0x80	; 128
    5452:	3f 2e       	mov	r3, r31
    5454:	2a e0       	ldi	r18, 0x0A	; 10
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	a3 01       	movw	r20, r6
    545a:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__ultoa_invert>
    545e:	88 2e       	mov	r8, r24
    5460:	86 18       	sub	r8, r6
    5462:	45 c0       	rjmp	.+138    	; 0x54ee <vfprintf+0x2ac>
    5464:	85 37       	cpi	r24, 0x75	; 117
    5466:	31 f4       	brne	.+12     	; 0x5474 <vfprintf+0x232>
    5468:	23 2d       	mov	r18, r3
    546a:	2f 7e       	andi	r18, 0xEF	; 239
    546c:	b2 2e       	mov	r11, r18
    546e:	2a e0       	ldi	r18, 0x0A	; 10
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	25 c0       	rjmp	.+74     	; 0x54be <vfprintf+0x27c>
    5474:	93 2d       	mov	r25, r3
    5476:	99 7f       	andi	r25, 0xF9	; 249
    5478:	b9 2e       	mov	r11, r25
    547a:	8f 36       	cpi	r24, 0x6F	; 111
    547c:	c1 f0       	breq	.+48     	; 0x54ae <vfprintf+0x26c>
    547e:	18 f4       	brcc	.+6      	; 0x5486 <vfprintf+0x244>
    5480:	88 35       	cpi	r24, 0x58	; 88
    5482:	79 f0       	breq	.+30     	; 0x54a2 <vfprintf+0x260>
    5484:	b5 c0       	rjmp	.+362    	; 0x55f0 <vfprintf+0x3ae>
    5486:	80 37       	cpi	r24, 0x70	; 112
    5488:	19 f0       	breq	.+6      	; 0x5490 <vfprintf+0x24e>
    548a:	88 37       	cpi	r24, 0x78	; 120
    548c:	21 f0       	breq	.+8      	; 0x5496 <vfprintf+0x254>
    548e:	b0 c0       	rjmp	.+352    	; 0x55f0 <vfprintf+0x3ae>
    5490:	e9 2f       	mov	r30, r25
    5492:	e0 61       	ori	r30, 0x10	; 16
    5494:	be 2e       	mov	r11, r30
    5496:	b4 fe       	sbrs	r11, 4
    5498:	0d c0       	rjmp	.+26     	; 0x54b4 <vfprintf+0x272>
    549a:	fb 2d       	mov	r31, r11
    549c:	f4 60       	ori	r31, 0x04	; 4
    549e:	bf 2e       	mov	r11, r31
    54a0:	09 c0       	rjmp	.+18     	; 0x54b4 <vfprintf+0x272>
    54a2:	34 fe       	sbrs	r3, 4
    54a4:	0a c0       	rjmp	.+20     	; 0x54ba <vfprintf+0x278>
    54a6:	29 2f       	mov	r18, r25
    54a8:	26 60       	ori	r18, 0x06	; 6
    54aa:	b2 2e       	mov	r11, r18
    54ac:	06 c0       	rjmp	.+12     	; 0x54ba <vfprintf+0x278>
    54ae:	28 e0       	ldi	r18, 0x08	; 8
    54b0:	30 e0       	ldi	r19, 0x00	; 0
    54b2:	05 c0       	rjmp	.+10     	; 0x54be <vfprintf+0x27c>
    54b4:	20 e1       	ldi	r18, 0x10	; 16
    54b6:	30 e0       	ldi	r19, 0x00	; 0
    54b8:	02 c0       	rjmp	.+4      	; 0x54be <vfprintf+0x27c>
    54ba:	20 e1       	ldi	r18, 0x10	; 16
    54bc:	32 e0       	ldi	r19, 0x02	; 2
    54be:	f8 01       	movw	r30, r16
    54c0:	b7 fe       	sbrs	r11, 7
    54c2:	07 c0       	rjmp	.+14     	; 0x54d2 <vfprintf+0x290>
    54c4:	60 81       	ld	r22, Z
    54c6:	71 81       	ldd	r23, Z+1	; 0x01
    54c8:	82 81       	ldd	r24, Z+2	; 0x02
    54ca:	93 81       	ldd	r25, Z+3	; 0x03
    54cc:	0c 5f       	subi	r16, 0xFC	; 252
    54ce:	1f 4f       	sbci	r17, 0xFF	; 255
    54d0:	06 c0       	rjmp	.+12     	; 0x54de <vfprintf+0x29c>
    54d2:	60 81       	ld	r22, Z
    54d4:	71 81       	ldd	r23, Z+1	; 0x01
    54d6:	80 e0       	ldi	r24, 0x00	; 0
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	0e 5f       	subi	r16, 0xFE	; 254
    54dc:	1f 4f       	sbci	r17, 0xFF	; 255
    54de:	a3 01       	movw	r20, r6
    54e0:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__ultoa_invert>
    54e4:	88 2e       	mov	r8, r24
    54e6:	86 18       	sub	r8, r6
    54e8:	fb 2d       	mov	r31, r11
    54ea:	ff 77       	andi	r31, 0x7F	; 127
    54ec:	3f 2e       	mov	r3, r31
    54ee:	36 fe       	sbrs	r3, 6
    54f0:	0d c0       	rjmp	.+26     	; 0x550c <vfprintf+0x2ca>
    54f2:	23 2d       	mov	r18, r3
    54f4:	2e 7f       	andi	r18, 0xFE	; 254
    54f6:	a2 2e       	mov	r10, r18
    54f8:	89 14       	cp	r8, r9
    54fa:	58 f4       	brcc	.+22     	; 0x5512 <vfprintf+0x2d0>
    54fc:	34 fe       	sbrs	r3, 4
    54fe:	0b c0       	rjmp	.+22     	; 0x5516 <vfprintf+0x2d4>
    5500:	32 fc       	sbrc	r3, 2
    5502:	09 c0       	rjmp	.+18     	; 0x5516 <vfprintf+0x2d4>
    5504:	83 2d       	mov	r24, r3
    5506:	8e 7e       	andi	r24, 0xEE	; 238
    5508:	a8 2e       	mov	r10, r24
    550a:	05 c0       	rjmp	.+10     	; 0x5516 <vfprintf+0x2d4>
    550c:	b8 2c       	mov	r11, r8
    550e:	a3 2c       	mov	r10, r3
    5510:	03 c0       	rjmp	.+6      	; 0x5518 <vfprintf+0x2d6>
    5512:	b8 2c       	mov	r11, r8
    5514:	01 c0       	rjmp	.+2      	; 0x5518 <vfprintf+0x2d6>
    5516:	b9 2c       	mov	r11, r9
    5518:	a4 fe       	sbrs	r10, 4
    551a:	0f c0       	rjmp	.+30     	; 0x553a <vfprintf+0x2f8>
    551c:	fe 01       	movw	r30, r28
    551e:	e8 0d       	add	r30, r8
    5520:	f1 1d       	adc	r31, r1
    5522:	80 81       	ld	r24, Z
    5524:	80 33       	cpi	r24, 0x30	; 48
    5526:	21 f4       	brne	.+8      	; 0x5530 <vfprintf+0x2ee>
    5528:	9a 2d       	mov	r25, r10
    552a:	99 7e       	andi	r25, 0xE9	; 233
    552c:	a9 2e       	mov	r10, r25
    552e:	09 c0       	rjmp	.+18     	; 0x5542 <vfprintf+0x300>
    5530:	a2 fe       	sbrs	r10, 2
    5532:	06 c0       	rjmp	.+12     	; 0x5540 <vfprintf+0x2fe>
    5534:	b3 94       	inc	r11
    5536:	b3 94       	inc	r11
    5538:	04 c0       	rjmp	.+8      	; 0x5542 <vfprintf+0x300>
    553a:	8a 2d       	mov	r24, r10
    553c:	86 78       	andi	r24, 0x86	; 134
    553e:	09 f0       	breq	.+2      	; 0x5542 <vfprintf+0x300>
    5540:	b3 94       	inc	r11
    5542:	a3 fc       	sbrc	r10, 3
    5544:	11 c0       	rjmp	.+34     	; 0x5568 <vfprintf+0x326>
    5546:	a0 fe       	sbrs	r10, 0
    5548:	06 c0       	rjmp	.+12     	; 0x5556 <vfprintf+0x314>
    554a:	b2 14       	cp	r11, r2
    554c:	88 f4       	brcc	.+34     	; 0x5570 <vfprintf+0x32e>
    554e:	28 0c       	add	r2, r8
    5550:	92 2c       	mov	r9, r2
    5552:	9b 18       	sub	r9, r11
    5554:	0e c0       	rjmp	.+28     	; 0x5572 <vfprintf+0x330>
    5556:	b2 14       	cp	r11, r2
    5558:	60 f4       	brcc	.+24     	; 0x5572 <vfprintf+0x330>
    555a:	b6 01       	movw	r22, r12
    555c:	80 e2       	ldi	r24, 0x20	; 32
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	0e 94 18 2b 	call	0x5630	; 0x5630 <fputc>
    5564:	b3 94       	inc	r11
    5566:	f7 cf       	rjmp	.-18     	; 0x5556 <vfprintf+0x314>
    5568:	b2 14       	cp	r11, r2
    556a:	18 f4       	brcc	.+6      	; 0x5572 <vfprintf+0x330>
    556c:	2b 18       	sub	r2, r11
    556e:	02 c0       	rjmp	.+4      	; 0x5574 <vfprintf+0x332>
    5570:	98 2c       	mov	r9, r8
    5572:	21 2c       	mov	r2, r1
    5574:	a4 fe       	sbrs	r10, 4
    5576:	10 c0       	rjmp	.+32     	; 0x5598 <vfprintf+0x356>
    5578:	b6 01       	movw	r22, r12
    557a:	80 e3       	ldi	r24, 0x30	; 48
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	0e 94 18 2b 	call	0x5630	; 0x5630 <fputc>
    5582:	a2 fe       	sbrs	r10, 2
    5584:	17 c0       	rjmp	.+46     	; 0x55b4 <vfprintf+0x372>
    5586:	a1 fc       	sbrc	r10, 1
    5588:	03 c0       	rjmp	.+6      	; 0x5590 <vfprintf+0x34e>
    558a:	88 e7       	ldi	r24, 0x78	; 120
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	02 c0       	rjmp	.+4      	; 0x5594 <vfprintf+0x352>
    5590:	88 e5       	ldi	r24, 0x58	; 88
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	b6 01       	movw	r22, r12
    5596:	0c c0       	rjmp	.+24     	; 0x55b0 <vfprintf+0x36e>
    5598:	8a 2d       	mov	r24, r10
    559a:	86 78       	andi	r24, 0x86	; 134
    559c:	59 f0       	breq	.+22     	; 0x55b4 <vfprintf+0x372>
    559e:	a1 fe       	sbrs	r10, 1
    55a0:	02 c0       	rjmp	.+4      	; 0x55a6 <vfprintf+0x364>
    55a2:	8b e2       	ldi	r24, 0x2B	; 43
    55a4:	01 c0       	rjmp	.+2      	; 0x55a8 <vfprintf+0x366>
    55a6:	80 e2       	ldi	r24, 0x20	; 32
    55a8:	a7 fc       	sbrc	r10, 7
    55aa:	8d e2       	ldi	r24, 0x2D	; 45
    55ac:	b6 01       	movw	r22, r12
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	0e 94 18 2b 	call	0x5630	; 0x5630 <fputc>
    55b4:	89 14       	cp	r8, r9
    55b6:	38 f4       	brcc	.+14     	; 0x55c6 <vfprintf+0x384>
    55b8:	b6 01       	movw	r22, r12
    55ba:	80 e3       	ldi	r24, 0x30	; 48
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	0e 94 18 2b 	call	0x5630	; 0x5630 <fputc>
    55c2:	9a 94       	dec	r9
    55c4:	f7 cf       	rjmp	.-18     	; 0x55b4 <vfprintf+0x372>
    55c6:	8a 94       	dec	r8
    55c8:	f3 01       	movw	r30, r6
    55ca:	e8 0d       	add	r30, r8
    55cc:	f1 1d       	adc	r31, r1
    55ce:	80 81       	ld	r24, Z
    55d0:	b6 01       	movw	r22, r12
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	0e 94 18 2b 	call	0x5630	; 0x5630 <fputc>
    55d8:	81 10       	cpse	r8, r1
    55da:	f5 cf       	rjmp	.-22     	; 0x55c6 <vfprintf+0x384>
    55dc:	22 20       	and	r2, r2
    55de:	09 f4       	brne	.+2      	; 0x55e2 <vfprintf+0x3a0>
    55e0:	42 ce       	rjmp	.-892    	; 0x5266 <vfprintf+0x24>
    55e2:	b6 01       	movw	r22, r12
    55e4:	80 e2       	ldi	r24, 0x20	; 32
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	0e 94 18 2b 	call	0x5630	; 0x5630 <fputc>
    55ec:	2a 94       	dec	r2
    55ee:	f6 cf       	rjmp	.-20     	; 0x55dc <vfprintf+0x39a>
    55f0:	f6 01       	movw	r30, r12
    55f2:	86 81       	ldd	r24, Z+6	; 0x06
    55f4:	97 81       	ldd	r25, Z+7	; 0x07
    55f6:	02 c0       	rjmp	.+4      	; 0x55fc <vfprintf+0x3ba>
    55f8:	8f ef       	ldi	r24, 0xFF	; 255
    55fa:	9f ef       	ldi	r25, 0xFF	; 255
    55fc:	2b 96       	adiw	r28, 0x0b	; 11
    55fe:	e2 e1       	ldi	r30, 0x12	; 18
    5600:	0c 94 ce 2b 	jmp	0x579c	; 0x579c <__epilogue_restores__>

00005604 <strnlen_P>:
    5604:	fc 01       	movw	r30, r24
    5606:	05 90       	lpm	r0, Z+
    5608:	61 50       	subi	r22, 0x01	; 1
    560a:	70 40       	sbci	r23, 0x00	; 0
    560c:	01 10       	cpse	r0, r1
    560e:	d8 f7       	brcc	.-10     	; 0x5606 <strnlen_P+0x2>
    5610:	80 95       	com	r24
    5612:	90 95       	com	r25
    5614:	8e 0f       	add	r24, r30
    5616:	9f 1f       	adc	r25, r31
    5618:	08 95       	ret

0000561a <strnlen>:
    561a:	fc 01       	movw	r30, r24
    561c:	61 50       	subi	r22, 0x01	; 1
    561e:	70 40       	sbci	r23, 0x00	; 0
    5620:	01 90       	ld	r0, Z+
    5622:	01 10       	cpse	r0, r1
    5624:	d8 f7       	brcc	.-10     	; 0x561c <strnlen+0x2>
    5626:	80 95       	com	r24
    5628:	90 95       	com	r25
    562a:	8e 0f       	add	r24, r30
    562c:	9f 1f       	adc	r25, r31
    562e:	08 95       	ret

00005630 <fputc>:
    5630:	0f 93       	push	r16
    5632:	1f 93       	push	r17
    5634:	cf 93       	push	r28
    5636:	df 93       	push	r29
    5638:	fb 01       	movw	r30, r22
    563a:	23 81       	ldd	r18, Z+3	; 0x03
    563c:	21 fd       	sbrc	r18, 1
    563e:	03 c0       	rjmp	.+6      	; 0x5646 <fputc+0x16>
    5640:	8f ef       	ldi	r24, 0xFF	; 255
    5642:	9f ef       	ldi	r25, 0xFF	; 255
    5644:	2c c0       	rjmp	.+88     	; 0x569e <fputc+0x6e>
    5646:	22 ff       	sbrs	r18, 2
    5648:	16 c0       	rjmp	.+44     	; 0x5676 <fputc+0x46>
    564a:	46 81       	ldd	r20, Z+6	; 0x06
    564c:	57 81       	ldd	r21, Z+7	; 0x07
    564e:	24 81       	ldd	r18, Z+4	; 0x04
    5650:	35 81       	ldd	r19, Z+5	; 0x05
    5652:	42 17       	cp	r20, r18
    5654:	53 07       	cpc	r21, r19
    5656:	44 f4       	brge	.+16     	; 0x5668 <fputc+0x38>
    5658:	a0 81       	ld	r26, Z
    565a:	b1 81       	ldd	r27, Z+1	; 0x01
    565c:	9d 01       	movw	r18, r26
    565e:	2f 5f       	subi	r18, 0xFF	; 255
    5660:	3f 4f       	sbci	r19, 0xFF	; 255
    5662:	31 83       	std	Z+1, r19	; 0x01
    5664:	20 83       	st	Z, r18
    5666:	8c 93       	st	X, r24
    5668:	26 81       	ldd	r18, Z+6	; 0x06
    566a:	37 81       	ldd	r19, Z+7	; 0x07
    566c:	2f 5f       	subi	r18, 0xFF	; 255
    566e:	3f 4f       	sbci	r19, 0xFF	; 255
    5670:	37 83       	std	Z+7, r19	; 0x07
    5672:	26 83       	std	Z+6, r18	; 0x06
    5674:	14 c0       	rjmp	.+40     	; 0x569e <fputc+0x6e>
    5676:	8b 01       	movw	r16, r22
    5678:	ec 01       	movw	r28, r24
    567a:	fb 01       	movw	r30, r22
    567c:	00 84       	ldd	r0, Z+8	; 0x08
    567e:	f1 85       	ldd	r31, Z+9	; 0x09
    5680:	e0 2d       	mov	r30, r0
    5682:	09 95       	icall
    5684:	89 2b       	or	r24, r25
    5686:	e1 f6       	brne	.-72     	; 0x5640 <fputc+0x10>
    5688:	d8 01       	movw	r26, r16
    568a:	16 96       	adiw	r26, 0x06	; 6
    568c:	8d 91       	ld	r24, X+
    568e:	9c 91       	ld	r25, X
    5690:	17 97       	sbiw	r26, 0x07	; 7
    5692:	01 96       	adiw	r24, 0x01	; 1
    5694:	17 96       	adiw	r26, 0x07	; 7
    5696:	9c 93       	st	X, r25
    5698:	8e 93       	st	-X, r24
    569a:	16 97       	sbiw	r26, 0x06	; 6
    569c:	ce 01       	movw	r24, r28
    569e:	df 91       	pop	r29
    56a0:	cf 91       	pop	r28
    56a2:	1f 91       	pop	r17
    56a4:	0f 91       	pop	r16
    56a6:	08 95       	ret

000056a8 <__ultoa_invert>:
    56a8:	fa 01       	movw	r30, r20
    56aa:	aa 27       	eor	r26, r26
    56ac:	28 30       	cpi	r18, 0x08	; 8
    56ae:	51 f1       	breq	.+84     	; 0x5704 <__ultoa_invert+0x5c>
    56b0:	20 31       	cpi	r18, 0x10	; 16
    56b2:	81 f1       	breq	.+96     	; 0x5714 <__ultoa_invert+0x6c>
    56b4:	e8 94       	clt
    56b6:	6f 93       	push	r22
    56b8:	6e 7f       	andi	r22, 0xFE	; 254
    56ba:	6e 5f       	subi	r22, 0xFE	; 254
    56bc:	7f 4f       	sbci	r23, 0xFF	; 255
    56be:	8f 4f       	sbci	r24, 0xFF	; 255
    56c0:	9f 4f       	sbci	r25, 0xFF	; 255
    56c2:	af 4f       	sbci	r26, 0xFF	; 255
    56c4:	b1 e0       	ldi	r27, 0x01	; 1
    56c6:	3e d0       	rcall	.+124    	; 0x5744 <__ultoa_invert+0x9c>
    56c8:	b4 e0       	ldi	r27, 0x04	; 4
    56ca:	3c d0       	rcall	.+120    	; 0x5744 <__ultoa_invert+0x9c>
    56cc:	67 0f       	add	r22, r23
    56ce:	78 1f       	adc	r23, r24
    56d0:	89 1f       	adc	r24, r25
    56d2:	9a 1f       	adc	r25, r26
    56d4:	a1 1d       	adc	r26, r1
    56d6:	68 0f       	add	r22, r24
    56d8:	79 1f       	adc	r23, r25
    56da:	8a 1f       	adc	r24, r26
    56dc:	91 1d       	adc	r25, r1
    56de:	a1 1d       	adc	r26, r1
    56e0:	6a 0f       	add	r22, r26
    56e2:	71 1d       	adc	r23, r1
    56e4:	81 1d       	adc	r24, r1
    56e6:	91 1d       	adc	r25, r1
    56e8:	a1 1d       	adc	r26, r1
    56ea:	20 d0       	rcall	.+64     	; 0x572c <__ultoa_invert+0x84>
    56ec:	09 f4       	brne	.+2      	; 0x56f0 <__ultoa_invert+0x48>
    56ee:	68 94       	set
    56f0:	3f 91       	pop	r19
    56f2:	2a e0       	ldi	r18, 0x0A	; 10
    56f4:	26 9f       	mul	r18, r22
    56f6:	11 24       	eor	r1, r1
    56f8:	30 19       	sub	r19, r0
    56fa:	30 5d       	subi	r19, 0xD0	; 208
    56fc:	31 93       	st	Z+, r19
    56fe:	de f6       	brtc	.-74     	; 0x56b6 <__ultoa_invert+0xe>
    5700:	cf 01       	movw	r24, r30
    5702:	08 95       	ret
    5704:	46 2f       	mov	r20, r22
    5706:	47 70       	andi	r20, 0x07	; 7
    5708:	40 5d       	subi	r20, 0xD0	; 208
    570a:	41 93       	st	Z+, r20
    570c:	b3 e0       	ldi	r27, 0x03	; 3
    570e:	0f d0       	rcall	.+30     	; 0x572e <__ultoa_invert+0x86>
    5710:	c9 f7       	brne	.-14     	; 0x5704 <__ultoa_invert+0x5c>
    5712:	f6 cf       	rjmp	.-20     	; 0x5700 <__ultoa_invert+0x58>
    5714:	46 2f       	mov	r20, r22
    5716:	4f 70       	andi	r20, 0x0F	; 15
    5718:	40 5d       	subi	r20, 0xD0	; 208
    571a:	4a 33       	cpi	r20, 0x3A	; 58
    571c:	18 f0       	brcs	.+6      	; 0x5724 <__ultoa_invert+0x7c>
    571e:	49 5d       	subi	r20, 0xD9	; 217
    5720:	31 fd       	sbrc	r19, 1
    5722:	40 52       	subi	r20, 0x20	; 32
    5724:	41 93       	st	Z+, r20
    5726:	02 d0       	rcall	.+4      	; 0x572c <__ultoa_invert+0x84>
    5728:	a9 f7       	brne	.-22     	; 0x5714 <__ultoa_invert+0x6c>
    572a:	ea cf       	rjmp	.-44     	; 0x5700 <__ultoa_invert+0x58>
    572c:	b4 e0       	ldi	r27, 0x04	; 4
    572e:	a6 95       	lsr	r26
    5730:	97 95       	ror	r25
    5732:	87 95       	ror	r24
    5734:	77 95       	ror	r23
    5736:	67 95       	ror	r22
    5738:	ba 95       	dec	r27
    573a:	c9 f7       	brne	.-14     	; 0x572e <__ultoa_invert+0x86>
    573c:	00 97       	sbiw	r24, 0x00	; 0
    573e:	61 05       	cpc	r22, r1
    5740:	71 05       	cpc	r23, r1
    5742:	08 95       	ret
    5744:	9b 01       	movw	r18, r22
    5746:	ac 01       	movw	r20, r24
    5748:	0a 2e       	mov	r0, r26
    574a:	06 94       	lsr	r0
    574c:	57 95       	ror	r21
    574e:	47 95       	ror	r20
    5750:	37 95       	ror	r19
    5752:	27 95       	ror	r18
    5754:	ba 95       	dec	r27
    5756:	c9 f7       	brne	.-14     	; 0x574a <__ultoa_invert+0xa2>
    5758:	62 0f       	add	r22, r18
    575a:	73 1f       	adc	r23, r19
    575c:	84 1f       	adc	r24, r20
    575e:	95 1f       	adc	r25, r21
    5760:	a0 1d       	adc	r26, r0
    5762:	08 95       	ret

00005764 <__prologue_saves__>:
    5764:	2f 92       	push	r2
    5766:	3f 92       	push	r3
    5768:	4f 92       	push	r4
    576a:	5f 92       	push	r5
    576c:	6f 92       	push	r6
    576e:	7f 92       	push	r7
    5770:	8f 92       	push	r8
    5772:	9f 92       	push	r9
    5774:	af 92       	push	r10
    5776:	bf 92       	push	r11
    5778:	cf 92       	push	r12
    577a:	df 92       	push	r13
    577c:	ef 92       	push	r14
    577e:	ff 92       	push	r15
    5780:	0f 93       	push	r16
    5782:	1f 93       	push	r17
    5784:	cf 93       	push	r28
    5786:	df 93       	push	r29
    5788:	cd b7       	in	r28, 0x3d	; 61
    578a:	de b7       	in	r29, 0x3e	; 62
    578c:	ca 1b       	sub	r28, r26
    578e:	db 0b       	sbc	r29, r27
    5790:	0f b6       	in	r0, 0x3f	; 63
    5792:	f8 94       	cli
    5794:	de bf       	out	0x3e, r29	; 62
    5796:	0f be       	out	0x3f, r0	; 63
    5798:	cd bf       	out	0x3d, r28	; 61
    579a:	09 94       	ijmp

0000579c <__epilogue_restores__>:
    579c:	2a 88       	ldd	r2, Y+18	; 0x12
    579e:	39 88       	ldd	r3, Y+17	; 0x11
    57a0:	48 88       	ldd	r4, Y+16	; 0x10
    57a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    57a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    57a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    57a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    57aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    57ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    57ae:	b9 84       	ldd	r11, Y+9	; 0x09
    57b0:	c8 84       	ldd	r12, Y+8	; 0x08
    57b2:	df 80       	ldd	r13, Y+7	; 0x07
    57b4:	ee 80       	ldd	r14, Y+6	; 0x06
    57b6:	fd 80       	ldd	r15, Y+5	; 0x05
    57b8:	0c 81       	ldd	r16, Y+4	; 0x04
    57ba:	1b 81       	ldd	r17, Y+3	; 0x03
    57bc:	aa 81       	ldd	r26, Y+2	; 0x02
    57be:	b9 81       	ldd	r27, Y+1	; 0x01
    57c0:	ce 0f       	add	r28, r30
    57c2:	d1 1d       	adc	r29, r1
    57c4:	0f b6       	in	r0, 0x3f	; 63
    57c6:	f8 94       	cli
    57c8:	de bf       	out	0x3e, r29	; 62
    57ca:	0f be       	out	0x3f, r0	; 63
    57cc:	cd bf       	out	0x3d, r28	; 61
    57ce:	ed 01       	movw	r28, r26
    57d0:	08 95       	ret

000057d2 <_exit>:
    57d2:	f8 94       	cli

000057d4 <__stop_program>:
    57d4:	ff cf       	rjmp	.-2      	; 0x57d4 <__stop_program>
