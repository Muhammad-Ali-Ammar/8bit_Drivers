
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00003f4e  00003fe2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800100  00800100  00004082  2**0
                  ALLOC
  3 .stab         00007cec  00000000  00000000  00004084  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004705  00000000  00000000  0000bd70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00010475  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00010488  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  000104c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  000109aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00010e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00010e67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_1>
       8:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_2>
       c:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 30       	cpi	r26, 0x00	; 0
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 13 	call	0x264c	; 0x264c <main>
      8a:	0c 94 a5 1f 	jmp	0x3f4a	; 0x3f4a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Convert_IntToString>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	6a 83       	std	Y+2, r22	; 0x02
      a8:	7b 83       	std	Y+3, r23	; 0x03
      aa:	8c 83       	std	Y+4, r24	; 0x04
      ac:	9d 83       	std	Y+5, r25	; 0x05
      ae:	5f 83       	std	Y+7, r21	; 0x07
      b0:	4e 83       	std	Y+6, r20	; 0x06
      b2:	19 82       	std	Y+1, r1	; 0x01
      b4:	8e 81       	ldd	r24, Y+6	; 0x06
      b6:	9f 81       	ldd	r25, Y+7	; 0x07
      b8:	89 2b       	or	r24, r25
      ba:	19 f4       	brne	.+6      	; 0xc2 <Convert_IntToString+0x30>
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	89 83       	std	Y+1, r24	; 0x01
      c0:	1d c0       	rjmp	.+58     	; 0xfc <Convert_IntToString+0x6a>
      c2:	8d 81       	ldd	r24, Y+5	; 0x05
      c4:	8f 93       	push	r24
      c6:	8c 81       	ldd	r24, Y+4	; 0x04
      c8:	8f 93       	push	r24
      ca:	8b 81       	ldd	r24, Y+3	; 0x03
      cc:	8f 93       	push	r24
      ce:	8a 81       	ldd	r24, Y+2	; 0x02
      d0:	8f 93       	push	r24
      d2:	8b ed       	ldi	r24, 0xDB	; 219
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	89 2f       	mov	r24, r25
      d8:	8f 93       	push	r24
      da:	8b ed       	ldi	r24, 0xDB	; 219
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	8f 93       	push	r24
      e0:	8f 81       	ldd	r24, Y+7	; 0x07
      e2:	8f 93       	push	r24
      e4:	8e 81       	ldd	r24, Y+6	; 0x06
      e6:	8f 93       	push	r24
      e8:	0e 94 bb 1c 	call	0x3976	; 0x3976 <sprintf>
      ec:	8d b7       	in	r24, 0x3d	; 61
      ee:	9e b7       	in	r25, 0x3e	; 62
      f0:	08 96       	adiw	r24, 0x08	; 8
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	f8 94       	cli
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	89 81       	ldd	r24, Y+1	; 0x01
      fe:	27 96       	adiw	r28, 0x07	; 7
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f32 Copy_f32Number, pu8 Address_str){
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	27 97       	sbiw	r28, 0x07	; 7
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	de bf       	out	0x3e, r29	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	cd bf       	out	0x3d, r28	; 61
     124:	6a 83       	std	Y+2, r22	; 0x02
     126:	7b 83       	std	Y+3, r23	; 0x03
     128:	8c 83       	std	Y+4, r24	; 0x04
     12a:	9d 83       	std	Y+5, r25	; 0x05
     12c:	5f 83       	std	Y+7, r21	; 0x07
     12e:	4e 83       	std	Y+6, r20	; 0x06


	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     130:	19 82       	std	Y+1, r1	; 0x01
		if(NULL == Address_str){
     132:	8e 81       	ldd	r24, Y+6	; 0x06
     134:	9f 81       	ldd	r25, Y+7	; 0x07
     136:	89 2b       	or	r24, r25
     138:	19 f4       	brne	.+6      	; 0x140 <Convert_FloatToString+0x30>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	89 83       	std	Y+1, r24	; 0x01
     13e:	1d c0       	rjmp	.+58     	; 0x17a <Convert_FloatToString+0x6a>
		}

		else{

			sprintf(Address_str, "%f", Copy_f32Number);
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	8f 93       	push	r24
     144:	8c 81       	ldd	r24, Y+4	; 0x04
     146:	8f 93       	push	r24
     148:	8b 81       	ldd	r24, Y+3	; 0x03
     14a:	8f 93       	push	r24
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	8f 93       	push	r24
     150:	8f ed       	ldi	r24, 0xDF	; 223
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	89 2f       	mov	r24, r25
     156:	8f 93       	push	r24
     158:	8f ed       	ldi	r24, 0xDF	; 223
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	8f 93       	push	r24
     15e:	8f 81       	ldd	r24, Y+7	; 0x07
     160:	8f 93       	push	r24
     162:	8e 81       	ldd	r24, Y+6	; 0x06
     164:	8f 93       	push	r24
     166:	0e 94 bb 1c 	call	0x3976	; 0x3976 <sprintf>
     16a:	8d b7       	in	r24, 0x3d	; 61
     16c:	9e b7       	in	r25, 0x3e	; 62
     16e:	08 96       	adiw	r24, 0x08	; 8
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
		}

		return Loc_enuStatus;
     17a:	89 81       	ldd	r24, Y+1	; 0x01


}
     17c:	27 96       	adiw	r28, 0x07	; 7
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	f8 94       	cli
     182:	de bf       	out	0x3e, r29	; 62
     184:	0f be       	out	0x3f, r0	; 63
     186:	cd bf       	out	0x3d, r28	; 61
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <Convert_StringToInt>:


Std_StatusType Convert_StringToInt (u64* Address_Number, pu8 Address_str){
     18e:	2f 92       	push	r2
     190:	3f 92       	push	r3
     192:	4f 92       	push	r4
     194:	5f 92       	push	r5
     196:	6f 92       	push	r6
     198:	7f 92       	push	r7
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
     1b6:	6e 97       	sbiw	r28, 0x1e	; 30
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	9c 87       	std	Y+12, r25	; 0x0c
     1c4:	8b 87       	std	Y+11, r24	; 0x0b
     1c6:	7e 87       	std	Y+14, r23	; 0x0e
     1c8:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     1ca:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     1cc:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     1ce:	1b 82       	std	Y+3, r1	; 0x03
     1d0:	1c 82       	std	Y+4, r1	; 0x04
     1d2:	1d 82       	std	Y+5, r1	; 0x05
     1d4:	1e 82       	std	Y+6, r1	; 0x06
     1d6:	1f 82       	std	Y+7, r1	; 0x07
     1d8:	18 86       	std	Y+8, r1	; 0x08
     1da:	19 86       	std	Y+9, r1	; 0x09
     1dc:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     1de:	8d 85       	ldd	r24, Y+13	; 0x0d
     1e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     1e2:	89 2b       	or	r24, r25
     1e4:	21 f0       	breq	.+8      	; 0x1ee <Convert_StringToInt+0x60>
     1e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ea:	89 2b       	or	r24, r25
     1ec:	19 f4       	brne	.+6      	; 0x1f4 <Convert_StringToInt+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	89 83       	std	Y+1, r24	; 0x01
     1f2:	b4 c0       	rjmp	.+360    	; 0x35c <Convert_StringToInt+0x1ce>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     1f4:	1a 82       	std	Y+2, r1	; 0x02
     1f6:	8c c0       	rjmp	.+280    	; 0x310 <Convert_StringToInt+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     1f8:	2b 81       	ldd	r18, Y+3	; 0x03
     1fa:	3c 81       	ldd	r19, Y+4	; 0x04
     1fc:	4d 81       	ldd	r20, Y+5	; 0x05
     1fe:	5e 81       	ldd	r21, Y+6	; 0x06
     200:	6f 81       	ldd	r22, Y+7	; 0x07
     202:	78 85       	ldd	r23, Y+8	; 0x08
     204:	89 85       	ldd	r24, Y+9	; 0x09
     206:	9a 85       	ldd	r25, Y+10	; 0x0a
     208:	22 2e       	mov	r2, r18
     20a:	33 2e       	mov	r3, r19
     20c:	44 2e       	mov	r4, r20
     20e:	55 2e       	mov	r5, r21
     210:	66 2e       	mov	r6, r22
     212:	77 2e       	mov	r7, r23
     214:	88 2e       	mov	r8, r24
     216:	99 2e       	mov	r9, r25
     218:	22 2d       	mov	r18, r2
     21a:	33 2d       	mov	r19, r3
     21c:	44 2d       	mov	r20, r4
     21e:	55 2d       	mov	r21, r5
     220:	66 2d       	mov	r22, r6
     222:	77 2d       	mov	r23, r7
     224:	88 2d       	mov	r24, r8
     226:	99 2d       	mov	r25, r9
     228:	01 e0       	ldi	r16, 0x01	; 1
     22a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__ashldi3>
     22e:	a2 2e       	mov	r10, r18
     230:	b3 2e       	mov	r11, r19
     232:	c4 2e       	mov	r12, r20
     234:	d5 2e       	mov	r13, r21
     236:	e6 2e       	mov	r14, r22
     238:	f7 2e       	mov	r15, r23
     23a:	08 2f       	mov	r16, r24
     23c:	19 2f       	mov	r17, r25
     23e:	2a 2c       	mov	r2, r10
     240:	3b 2c       	mov	r3, r11
     242:	4c 2c       	mov	r4, r12
     244:	5d 2c       	mov	r5, r13
     246:	6e 2c       	mov	r6, r14
     248:	7f 2c       	mov	r7, r15
     24a:	80 2e       	mov	r8, r16
     24c:	91 2e       	mov	r9, r17
     24e:	22 2d       	mov	r18, r2
     250:	33 2d       	mov	r19, r3
     252:	44 2d       	mov	r20, r4
     254:	55 2d       	mov	r21, r5
     256:	66 2d       	mov	r22, r6
     258:	77 2d       	mov	r23, r7
     25a:	88 2d       	mov	r24, r8
     25c:	99 2d       	mov	r25, r9
     25e:	02 e0       	ldi	r16, 0x02	; 2
     260:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__ashldi3>
     264:	2f 8b       	std	Y+23, r18	; 0x17
     266:	38 8f       	std	Y+24, r19	; 0x18
     268:	49 8f       	std	Y+25, r20	; 0x19
     26a:	5a 8f       	std	Y+26, r21	; 0x1a
     26c:	6b 8f       	std	Y+27, r22	; 0x1b
     26e:	7c 8f       	std	Y+28, r23	; 0x1c
     270:	8d 8f       	std	Y+29, r24	; 0x1d
     272:	9e 8f       	std	Y+30, r25	; 0x1e
     274:	22 2d       	mov	r18, r2
     276:	33 2d       	mov	r19, r3
     278:	44 2d       	mov	r20, r4
     27a:	55 2d       	mov	r21, r5
     27c:	66 2d       	mov	r22, r6
     27e:	77 2d       	mov	r23, r7
     280:	88 2d       	mov	r24, r8
     282:	99 2d       	mov	r25, r9
     284:	af 88       	ldd	r10, Y+23	; 0x17
     286:	b8 8c       	ldd	r11, Y+24	; 0x18
     288:	c9 8c       	ldd	r12, Y+25	; 0x19
     28a:	da 8c       	ldd	r13, Y+26	; 0x1a
     28c:	eb 8c       	ldd	r14, Y+27	; 0x1b
     28e:	fc 8c       	ldd	r15, Y+28	; 0x1c
     290:	0d 8d       	ldd	r16, Y+29	; 0x1d
     292:	1e 8d       	ldd	r17, Y+30	; 0x1e
     294:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__adddi3>
     298:	a2 2e       	mov	r10, r18
     29a:	b3 2e       	mov	r11, r19
     29c:	c4 2e       	mov	r12, r20
     29e:	d5 2e       	mov	r13, r21
     2a0:	e6 2e       	mov	r14, r22
     2a2:	f7 2e       	mov	r15, r23
     2a4:	08 2f       	mov	r16, r24
     2a6:	19 2f       	mov	r17, r25
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	88 2f       	mov	r24, r24
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	2d 85       	ldd	r18, Y+13	; 0x0d
     2b0:	3e 85       	ldd	r19, Y+14	; 0x0e
     2b2:	82 0f       	add	r24, r18
     2b4:	93 1f       	adc	r25, r19
     2b6:	fc 01       	movw	r30, r24
     2b8:	80 81       	ld	r24, Z
     2ba:	88 2f       	mov	r24, r24
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	c0 97       	sbiw	r24, 0x30	; 48
     2c0:	98 8b       	std	Y+16, r25	; 0x10
     2c2:	8f 87       	std	Y+15, r24	; 0x0f
     2c4:	89 2f       	mov	r24, r25
     2c6:	88 0f       	add	r24, r24
     2c8:	88 0b       	sbc	r24, r24
     2ca:	89 8b       	std	Y+17, r24	; 0x11
     2cc:	8a 8b       	std	Y+18, r24	; 0x12
     2ce:	8b 8b       	std	Y+19, r24	; 0x13
     2d0:	8c 8b       	std	Y+20, r24	; 0x14
     2d2:	8d 8b       	std	Y+21, r24	; 0x15
     2d4:	8e 8b       	std	Y+22, r24	; 0x16
     2d6:	2a 2d       	mov	r18, r10
     2d8:	3b 2d       	mov	r19, r11
     2da:	4c 2d       	mov	r20, r12
     2dc:	5d 2d       	mov	r21, r13
     2de:	6e 2d       	mov	r22, r14
     2e0:	7f 2d       	mov	r23, r15
     2e2:	80 2f       	mov	r24, r16
     2e4:	91 2f       	mov	r25, r17
     2e6:	af 84       	ldd	r10, Y+15	; 0x0f
     2e8:	b8 88       	ldd	r11, Y+16	; 0x10
     2ea:	c9 88       	ldd	r12, Y+17	; 0x11
     2ec:	da 88       	ldd	r13, Y+18	; 0x12
     2ee:	eb 88       	ldd	r14, Y+19	; 0x13
     2f0:	fc 88       	ldd	r15, Y+20	; 0x14
     2f2:	0d 89       	ldd	r16, Y+21	; 0x15
     2f4:	1e 89       	ldd	r17, Y+22	; 0x16
     2f6:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__adddi3>
     2fa:	2b 83       	std	Y+3, r18	; 0x03
     2fc:	3c 83       	std	Y+4, r19	; 0x04
     2fe:	4d 83       	std	Y+5, r20	; 0x05
     300:	5e 83       	std	Y+6, r21	; 0x06
     302:	6f 83       	std	Y+7, r22	; 0x07
     304:	78 87       	std	Y+8, r23	; 0x08
     306:	89 87       	std	Y+9, r24	; 0x09
     308:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     30a:	8a 81       	ldd	r24, Y+2	; 0x02
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	2d 85       	ldd	r18, Y+13	; 0x0d
     318:	3e 85       	ldd	r19, Y+14	; 0x0e
     31a:	82 0f       	add	r24, r18
     31c:	93 1f       	adc	r25, r19
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	88 23       	and	r24, r24
     324:	09 f0       	breq	.+2      	; 0x328 <Convert_StringToInt+0x19a>
     326:	68 cf       	rjmp	.-304    	; 0x1f8 <Convert_StringToInt+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     328:	8b 85       	ldd	r24, Y+11	; 0x0b
     32a:	9c 85       	ldd	r25, Y+12	; 0x0c
     32c:	2b 81       	ldd	r18, Y+3	; 0x03
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
     332:	2c 81       	ldd	r18, Y+4	; 0x04
     334:	fc 01       	movw	r30, r24
     336:	21 83       	std	Z+1, r18	; 0x01
     338:	2d 81       	ldd	r18, Y+5	; 0x05
     33a:	fc 01       	movw	r30, r24
     33c:	22 83       	std	Z+2, r18	; 0x02
     33e:	2e 81       	ldd	r18, Y+6	; 0x06
     340:	fc 01       	movw	r30, r24
     342:	23 83       	std	Z+3, r18	; 0x03
     344:	2f 81       	ldd	r18, Y+7	; 0x07
     346:	fc 01       	movw	r30, r24
     348:	24 83       	std	Z+4, r18	; 0x04
     34a:	28 85       	ldd	r18, Y+8	; 0x08
     34c:	fc 01       	movw	r30, r24
     34e:	25 83       	std	Z+5, r18	; 0x05
     350:	29 85       	ldd	r18, Y+9	; 0x09
     352:	fc 01       	movw	r30, r24
     354:	26 83       	std	Z+6, r18	; 0x06
     356:	2a 85       	ldd	r18, Y+10	; 0x0a
     358:	fc 01       	movw	r30, r24
     35a:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     35c:	89 81       	ldd	r24, Y+1	; 0x01

}
     35e:	6e 96       	adiw	r28, 0x1e	; 30
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	df 90       	pop	r13
     378:	cf 90       	pop	r12
     37a:	bf 90       	pop	r11
     37c:	af 90       	pop	r10
     37e:	9f 90       	pop	r9
     380:	8f 90       	pop	r8
     382:	7f 90       	pop	r7
     384:	6f 90       	pop	r6
     386:	5f 90       	pop	r5
     388:	4f 90       	pop	r4
     38a:	3f 90       	pop	r3
     38c:	2f 90       	pop	r2
     38e:	08 95       	ret

00000390 <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     398:	8a e3       	ldi	r24, 0x3A	; 58
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2c e6       	ldi	r18, 0x6C	; 108
     39e:	fc 01       	movw	r30, r24
     3a0:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     3a2:	87 e3       	ldi	r24, 0x37	; 55
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	27 ef       	ldi	r18, 0xF7	; 247
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     3ac:	84 e3       	ldi	r24, 0x34	; 52
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	2f ef       	ldi	r18, 0xFF	; 255
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     3b6:	81 e3       	ldi	r24, 0x31	; 49
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	20 e1       	ldi	r18, 0x10	; 16
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     3c0:	8b e3       	ldi	r24, 0x3B	; 59
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	fc 01       	movw	r30, r24
     3c6:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     3c8:	88 e3       	ldi	r24, 0x38	; 56
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	20 ec       	ldi	r18, 0xC0	; 192
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     3d2:	85 e3       	ldi	r24, 0x35	; 53
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	fc 01       	movw	r30, r24
     3d8:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     3da:	82 e3       	ldi	r24, 0x32	; 50
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	2c ee       	ldi	r18, 0xEC	; 236
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
     3e4:	00 00       	nop
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <Port_enuSetPinDirection+0x6>
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <Port_enuSetPinDirection+0x8>
     3f4:	1f 92       	push	r1
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	8c 83       	std	Y+4, r24	; 0x04
     3fc:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     3fe:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     400:	8c 81       	ldd	r24, Y+4	; 0x04
     402:	87 70       	andi	r24, 0x07	; 7
     404:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     406:	8c 81       	ldd	r24, Y+4	; 0x04
     408:	86 95       	lsr	r24
     40a:	86 95       	lsr	r24
     40c:	86 95       	lsr	r24
     40e:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     410:	8c 81       	ldd	r24, Y+4	; 0x04
     412:	80 32       	cpi	r24, 0x20	; 32
     414:	18 f0       	brcs	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	89 83       	std	Y+1, r24	; 0x01
     41a:	59 c0       	rjmp	.+178    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
     41c:	8d 81       	ldd	r24, Y+5	; 0x05
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	18 f0       	brcs	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	89 83       	std	Y+1, r24	; 0x01
     426:	53 c0       	rjmp	.+166    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		}

	else{

			switch(Copy_u8PinDirection){
     428:	8d 81       	ldd	r24, Y+5	; 0x05
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	41 f1       	breq	.+80     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	09 f0       	breq	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
							break;

			default:

				// impossible
					break;
     436:	4b c0       	rjmp	.+150    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	88 2f       	mov	r24, r24
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	80 5a       	subi	r24, 0xA0	; 160
     444:	9f 4f       	sbci	r25, 0xFF	; 255
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	2b 81       	ldd	r18, Y+3	; 0x03
     44e:	22 2f       	mov	r18, r18
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	22 0f       	add	r18, r18
     454:	33 1f       	adc	r19, r19
     456:	20 5a       	subi	r18, 0xA0	; 160
     458:	3f 4f       	sbci	r19, 0xFF	; 255
     45a:	f9 01       	movw	r30, r18
     45c:	20 81       	ld	r18, Z
     45e:	31 81       	ldd	r19, Z+1	; 0x01
     460:	f9 01       	movw	r30, r18
     462:	20 81       	ld	r18, Z
     464:	62 2f       	mov	r22, r18
     466:	2a 81       	ldd	r18, Y+2	; 0x02
     468:	42 2f       	mov	r20, r18
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	21 e0       	ldi	r18, 0x01	; 1
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     472:	22 0f       	add	r18, r18
     474:	33 1f       	adc	r19, r19
     476:	4a 95       	dec	r20
     478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     47a:	26 2b       	or	r18, r22
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
					break;
     480:	26 c0       	rjmp	.+76     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     482:	8b 81       	ldd	r24, Y+3	; 0x03
     484:	88 2f       	mov	r24, r24
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	80 5a       	subi	r24, 0xA0	; 160
     48e:	9f 4f       	sbci	r25, 0xFF	; 255
     490:	fc 01       	movw	r30, r24
     492:	80 81       	ld	r24, Z
     494:	91 81       	ldd	r25, Z+1	; 0x01
     496:	2b 81       	ldd	r18, Y+3	; 0x03
     498:	22 2f       	mov	r18, r18
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	22 0f       	add	r18, r18
     49e:	33 1f       	adc	r19, r19
     4a0:	20 5a       	subi	r18, 0xA0	; 160
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	f9 01       	movw	r30, r18
     4a6:	20 81       	ld	r18, Z
     4a8:	31 81       	ldd	r19, Z+1	; 0x01
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	62 2f       	mov	r22, r18
     4b0:	2a 81       	ldd	r18, Y+2	; 0x02
     4b2:	42 2f       	mov	r20, r18
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	4a 95       	dec	r20
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4c4:	20 95       	com	r18
     4c6:	26 23       	and	r18, r22
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
							break;
     4cc:	00 00       	nop

	}



	return Loc_enuState;
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
}
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <Port_enuSetPinMode+0x6>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <Port_enuSetPinMode+0x8>
     4e8:	1f 92       	push	r1
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	8c 83       	std	Y+4, r24	; 0x04
     4f0:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     4f2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     4f4:	8c 81       	ldd	r24, Y+4	; 0x04
     4f6:	87 70       	andi	r24, 0x07	; 7
     4f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	86 95       	lsr	r24
     4fe:	86 95       	lsr	r24
     500:	86 95       	lsr	r24
     502:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     504:	8c 81       	ldd	r24, Y+4	; 0x04
     506:	80 32       	cpi	r24, 0x20	; 32
     508:	18 f0       	brcs	.+6      	; 0x510 <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	89 83       	std	Y+1, r24	; 0x01
     50e:	43 c1       	rjmp	.+646    	; 0x796 <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
     510:	8d 81       	ldd	r24, Y+5	; 0x05
     512:	84 30       	cpi	r24, 0x04	; 4
     514:	18 f0       	brcs	.+6      	; 0x51c <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	3d c1       	rjmp	.+634    	; 0x796 <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
     51c:	8d 81       	ldd	r24, Y+5	; 0x05
     51e:	88 2f       	mov	r24, r24
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	91 05       	cpc	r25, r1
     526:	09 f4       	brne	.+2      	; 0x52a <Port_enuSetPinMode+0x4a>
     528:	57 c0       	rjmp	.+174    	; 0x5d8 <Port_enuSetPinMode+0xf8>
     52a:	82 30       	cpi	r24, 0x02	; 2
     52c:	91 05       	cpc	r25, r1
     52e:	1c f4       	brge	.+6      	; 0x536 <Port_enuSetPinMode+0x56>
     530:	89 2b       	or	r24, r25
     532:	49 f0       	breq	.+18     	; 0x546 <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
     534:	30 c1       	rjmp	.+608    	; 0x796 <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
     536:	82 30       	cpi	r24, 0x02	; 2
     538:	91 05       	cpc	r25, r1
     53a:	09 f4       	brne	.+2      	; 0x53e <Port_enuSetPinMode+0x5e>
     53c:	97 c0       	rjmp	.+302    	; 0x66c <Port_enuSetPinMode+0x18c>
     53e:	03 97       	sbiw	r24, 0x03	; 3
     540:	09 f4       	brne	.+2      	; 0x544 <Port_enuSetPinMode+0x64>
     542:	df c0       	rjmp	.+446    	; 0x702 <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
     544:	28 c1       	rjmp	.+592    	; 0x796 <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	80 5a       	subi	r24, 0xA0	; 160
     552:	9f 4f       	sbci	r25, 0xFF	; 255
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	91 81       	ldd	r25, Z+1	; 0x01
     55a:	2b 81       	ldd	r18, Y+3	; 0x03
     55c:	22 2f       	mov	r18, r18
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	22 0f       	add	r18, r18
     562:	33 1f       	adc	r19, r19
     564:	20 5a       	subi	r18, 0xA0	; 160
     566:	3f 4f       	sbci	r19, 0xFF	; 255
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	31 81       	ldd	r19, Z+1	; 0x01
     56e:	f9 01       	movw	r30, r18
     570:	20 81       	ld	r18, Z
     572:	62 2f       	mov	r22, r18
     574:	2a 81       	ldd	r18, Y+2	; 0x02
     576:	42 2f       	mov	r20, r18
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <Port_enuSetPinMode+0xa4>
     580:	22 0f       	add	r18, r18
     582:	33 1f       	adc	r19, r19
     584:	4a 95       	dec	r20
     586:	e2 f7       	brpl	.-8      	; 0x580 <Port_enuSetPinMode+0xa0>
     588:	26 2b       	or	r18, r22
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	88 2f       	mov	r24, r24
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	88 59       	subi	r24, 0x98	; 152
     59a:	9f 4f       	sbci	r25, 0xFF	; 255
     59c:	fc 01       	movw	r30, r24
     59e:	80 81       	ld	r24, Z
     5a0:	91 81       	ldd	r25, Z+1	; 0x01
     5a2:	2b 81       	ldd	r18, Y+3	; 0x03
     5a4:	22 2f       	mov	r18, r18
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	28 59       	subi	r18, 0x98	; 152
     5ae:	3f 4f       	sbci	r19, 0xFF	; 255
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	31 81       	ldd	r19, Z+1	; 0x01
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	62 2f       	mov	r22, r18
     5bc:	2a 81       	ldd	r18, Y+2	; 0x02
     5be:	42 2f       	mov	r20, r18
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <Port_enuSetPinMode+0xec>
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	4a 95       	dec	r20
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <Port_enuSetPinMode+0xe8>
     5d0:	26 2b       	or	r18, r22
     5d2:	fc 01       	movw	r30, r24
     5d4:	20 83       	st	Z, r18
					break;
     5d6:	df c0       	rjmp	.+446    	; 0x796 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     5d8:	8b 81       	ldd	r24, Y+3	; 0x03
     5da:	88 2f       	mov	r24, r24
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	80 5a       	subi	r24, 0xA0	; 160
     5e4:	9f 4f       	sbci	r25, 0xFF	; 255
     5e6:	fc 01       	movw	r30, r24
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	2b 81       	ldd	r18, Y+3	; 0x03
     5ee:	22 2f       	mov	r18, r18
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	22 0f       	add	r18, r18
     5f4:	33 1f       	adc	r19, r19
     5f6:	20 5a       	subi	r18, 0xA0	; 160
     5f8:	3f 4f       	sbci	r19, 0xFF	; 255
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	31 81       	ldd	r19, Z+1	; 0x01
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	62 2f       	mov	r22, r18
     606:	2a 81       	ldd	r18, Y+2	; 0x02
     608:	42 2f       	mov	r20, r18
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	02 c0       	rjmp	.+4      	; 0x616 <Port_enuSetPinMode+0x136>
     612:	22 0f       	add	r18, r18
     614:	33 1f       	adc	r19, r19
     616:	4a 95       	dec	r20
     618:	e2 f7       	brpl	.-8      	; 0x612 <Port_enuSetPinMode+0x132>
     61a:	26 2b       	or	r18, r22
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	88 59       	subi	r24, 0x98	; 152
     62c:	9f 4f       	sbci	r25, 0xFF	; 255
     62e:	fc 01       	movw	r30, r24
     630:	80 81       	ld	r24, Z
     632:	91 81       	ldd	r25, Z+1	; 0x01
     634:	2b 81       	ldd	r18, Y+3	; 0x03
     636:	22 2f       	mov	r18, r18
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	28 59       	subi	r18, 0x98	; 152
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	f9 01       	movw	r30, r18
     644:	20 81       	ld	r18, Z
     646:	31 81       	ldd	r19, Z+1	; 0x01
     648:	f9 01       	movw	r30, r18
     64a:	20 81       	ld	r18, Z
     64c:	62 2f       	mov	r22, r18
     64e:	2a 81       	ldd	r18, Y+2	; 0x02
     650:	42 2f       	mov	r20, r18
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	02 c0       	rjmp	.+4      	; 0x65e <Port_enuSetPinMode+0x17e>
     65a:	22 0f       	add	r18, r18
     65c:	33 1f       	adc	r19, r19
     65e:	4a 95       	dec	r20
     660:	e2 f7       	brpl	.-8      	; 0x65a <Port_enuSetPinMode+0x17a>
     662:	20 95       	com	r18
     664:	26 23       	and	r18, r22
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
							break;
     66a:	95 c0       	rjmp	.+298    	; 0x796 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	80 5a       	subi	r24, 0xA0	; 160
     678:	9f 4f       	sbci	r25, 0xFF	; 255
     67a:	fc 01       	movw	r30, r24
     67c:	80 81       	ld	r24, Z
     67e:	91 81       	ldd	r25, Z+1	; 0x01
     680:	2b 81       	ldd	r18, Y+3	; 0x03
     682:	22 2f       	mov	r18, r18
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	22 0f       	add	r18, r18
     688:	33 1f       	adc	r19, r19
     68a:	20 5a       	subi	r18, 0xA0	; 160
     68c:	3f 4f       	sbci	r19, 0xFF	; 255
     68e:	f9 01       	movw	r30, r18
     690:	20 81       	ld	r18, Z
     692:	31 81       	ldd	r19, Z+1	; 0x01
     694:	f9 01       	movw	r30, r18
     696:	20 81       	ld	r18, Z
     698:	62 2f       	mov	r22, r18
     69a:	2a 81       	ldd	r18, Y+2	; 0x02
     69c:	42 2f       	mov	r20, r18
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	21 e0       	ldi	r18, 0x01	; 1
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <Port_enuSetPinMode+0x1ca>
     6a6:	22 0f       	add	r18, r18
     6a8:	33 1f       	adc	r19, r19
     6aa:	4a 95       	dec	r20
     6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <Port_enuSetPinMode+0x1c6>
     6ae:	20 95       	com	r18
     6b0:	26 23       	and	r18, r22
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	88 59       	subi	r24, 0x98	; 152
     6c2:	9f 4f       	sbci	r25, 0xFF	; 255
     6c4:	fc 01       	movw	r30, r24
     6c6:	80 81       	ld	r24, Z
     6c8:	91 81       	ldd	r25, Z+1	; 0x01
     6ca:	2b 81       	ldd	r18, Y+3	; 0x03
     6cc:	22 2f       	mov	r18, r18
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	22 0f       	add	r18, r18
     6d2:	33 1f       	adc	r19, r19
     6d4:	28 59       	subi	r18, 0x98	; 152
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	f9 01       	movw	r30, r18
     6da:	20 81       	ld	r18, Z
     6dc:	31 81       	ldd	r19, Z+1	; 0x01
     6de:	f9 01       	movw	r30, r18
     6e0:	20 81       	ld	r18, Z
     6e2:	62 2f       	mov	r22, r18
     6e4:	2a 81       	ldd	r18, Y+2	; 0x02
     6e6:	42 2f       	mov	r20, r18
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	21 e0       	ldi	r18, 0x01	; 1
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <Port_enuSetPinMode+0x214>
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	4a 95       	dec	r20
     6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <Port_enuSetPinMode+0x210>
     6f8:	20 95       	com	r18
     6fa:	26 23       	and	r18, r22
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
								break;
     700:	4a c0       	rjmp	.+148    	; 0x796 <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	88 2f       	mov	r24, r24
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	80 5a       	subi	r24, 0xA0	; 160
     70e:	9f 4f       	sbci	r25, 0xFF	; 255
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	2b 81       	ldd	r18, Y+3	; 0x03
     718:	22 2f       	mov	r18, r18
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	22 0f       	add	r18, r18
     71e:	33 1f       	adc	r19, r19
     720:	20 5a       	subi	r18, 0xA0	; 160
     722:	3f 4f       	sbci	r19, 0xFF	; 255
     724:	f9 01       	movw	r30, r18
     726:	20 81       	ld	r18, Z
     728:	31 81       	ldd	r19, Z+1	; 0x01
     72a:	f9 01       	movw	r30, r18
     72c:	20 81       	ld	r18, Z
     72e:	62 2f       	mov	r22, r18
     730:	2a 81       	ldd	r18, Y+2	; 0x02
     732:	42 2f       	mov	r20, r18
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <Port_enuSetPinMode+0x260>
     73c:	22 0f       	add	r18, r18
     73e:	33 1f       	adc	r19, r19
     740:	4a 95       	dec	r20
     742:	e2 f7       	brpl	.-8      	; 0x73c <Port_enuSetPinMode+0x25c>
     744:	20 95       	com	r18
     746:	26 23       	and	r18, r22
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     74c:	8b 81       	ldd	r24, Y+3	; 0x03
     74e:	88 2f       	mov	r24, r24
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	88 59       	subi	r24, 0x98	; 152
     758:	9f 4f       	sbci	r25, 0xFF	; 255
     75a:	fc 01       	movw	r30, r24
     75c:	80 81       	ld	r24, Z
     75e:	91 81       	ldd	r25, Z+1	; 0x01
     760:	2b 81       	ldd	r18, Y+3	; 0x03
     762:	22 2f       	mov	r18, r18
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	28 59       	subi	r18, 0x98	; 152
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	f9 01       	movw	r30, r18
     770:	20 81       	ld	r18, Z
     772:	31 81       	ldd	r19, Z+1	; 0x01
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	62 2f       	mov	r22, r18
     77a:	2a 81       	ldd	r18, Y+2	; 0x02
     77c:	42 2f       	mov	r20, r18
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	02 c0       	rjmp	.+4      	; 0x78a <Port_enuSetPinMode+0x2aa>
     786:	22 0f       	add	r18, r18
     788:	33 1f       	adc	r19, r19
     78a:	4a 95       	dec	r20
     78c:	e2 f7       	brpl	.-8      	; 0x786 <Port_enuSetPinMode+0x2a6>
     78e:	26 2b       	or	r18, r22
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
								break;
     794:	00 00       	nop



	}

	return Loc_enuState;
     796:	89 81       	ldd	r24, Y+1	; 0x01
}
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	1f 92       	push	r1
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     7b2:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
     7b4:	8f e5       	ldi	r24, 0x5F	; 95
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	2f e5       	ldi	r18, 0x5F	; 95
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	20 68       	ori	r18, 0x80	; 128
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18

	return Loc_enuGieState;
     7c6:	89 81       	ldd	r24, Y+1	; 0x01

}
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     7da:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
     7dc:	8f e5       	ldi	r24, 0x5F	; 95
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	2f e5       	ldi	r18, 0x5F	; 95
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	20 81       	ld	r18, Z
     7e8:	2f 77       	andi	r18, 0x7F	; 127
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18

		return Loc_enuGieState;
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <Gie_enuSetGloablInterrupt+0x6>
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62
     802:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     804:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
     806:	8f e5       	ldi	r24, 0x5F	; 95
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	2f e5       	ldi	r18, 0x5F	; 95
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	f9 01       	movw	r30, r18
     810:	20 81       	ld	r18, Z
     812:	42 2f       	mov	r20, r18
     814:	4f 77       	andi	r20, 0x7F	; 127
     816:	2a 81       	ldd	r18, Y+2	; 0x02
     818:	22 2f       	mov	r18, r18
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	36 95       	lsr	r19
     81e:	32 2f       	mov	r19, r18
     820:	22 27       	eor	r18, r18
     822:	37 95       	ror	r19
     824:	27 95       	ror	r18
     826:	24 2b       	or	r18, r20
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18

			return Loc_enuGieState;
     82c:	89 81       	ldd	r24, Y+1	; 0x01
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	08 95       	ret

00000838 <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	00 d0       	rcall	.+0      	; 0x83e <Gie_enuGetGloablInterrupt+0x6>
     83e:	00 d0       	rcall	.+0      	; 0x840 <Gie_enuGetGloablInterrupt+0x8>
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	8a 83       	std	Y+2, r24	; 0x02
     846:	7c 83       	std	Y+4, r23	; 0x04
     848:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     84a:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	89 2b       	or	r24, r25
     852:	19 f4       	brne	.+6      	; 0x85a <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	0c c0       	rjmp	.+24     	; 0x872 <__stack+0x13>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
     85a:	8f e5       	ldi	r24, 0x5F	; 95
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	28 2f       	mov	r18, r24
     864:	22 1f       	adc	r18, r18
     866:	22 27       	eor	r18, r18
     868:	22 1f       	adc	r18, r18
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	9c 81       	ldd	r25, Y+4	; 0x04
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
     872:	89 81       	ldd	r24, Y+1	; 0x01
}
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	00 d0       	rcall	.+0      	; 0x888 <Exti_enuEnable+0x6>
     888:	1f 92       	push	r1
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	8a 83       	std	Y+2, r24	; 0x02
     890:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     896:	8a 81       	ldd	r24, Y+2	; 0x02
     898:	83 30       	cpi	r24, 0x03	; 3
     89a:	18 f0       	brcs	.+6      	; 0x8a2 <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	89 83       	std	Y+1, r24	; 0x01
     8a0:	8f c0       	rjmp	.+286    	; 0x9c0 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	88 2f       	mov	r24, r24
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	91 05       	cpc	r25, r1
     8ac:	89 f1       	breq	.+98     	; 0x910 <Exti_enuEnable+0x8e>
     8ae:	82 30       	cpi	r24, 0x02	; 2
     8b0:	91 05       	cpc	r25, r1
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <Exti_enuEnable+0x34>
     8b4:	62 c0       	rjmp	.+196    	; 0x97a <Exti_enuEnable+0xf8>
     8b6:	89 2b       	or	r24, r25
     8b8:	09 f0       	breq	.+2      	; 0x8bc <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
     8ba:	82 c0       	rjmp	.+260    	; 0x9c0 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
     8bc:	85 e5       	ldi	r24, 0x55	; 85
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	25 e5       	ldi	r18, 0x55	; 85
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	f9 01       	movw	r30, r18
     8c6:	20 81       	ld	r18, Z
     8c8:	32 2f       	mov	r19, r18
     8ca:	3e 7f       	andi	r19, 0xFE	; 254
     8cc:	2b 81       	ldd	r18, Y+3	; 0x03
     8ce:	21 70       	andi	r18, 0x01	; 1
     8d0:	23 2b       	or	r18, r19
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
     8d6:	85 e5       	ldi	r24, 0x55	; 85
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	25 e5       	ldi	r18, 0x55	; 85
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	42 2f       	mov	r20, r18
     8e4:	4d 7f       	andi	r20, 0xFD	; 253
     8e6:	2b 81       	ldd	r18, Y+3	; 0x03
     8e8:	26 95       	lsr	r18
     8ea:	22 2f       	mov	r18, r18
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	21 70       	andi	r18, 0x01	; 1
     8f0:	33 27       	eor	r19, r19
     8f2:	22 0f       	add	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	24 2b       	or	r18, r20
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
     8fc:	8b e5       	ldi	r24, 0x5B	; 91
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	2b e5       	ldi	r18, 0x5B	; 91
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	f9 01       	movw	r30, r18
     906:	20 81       	ld	r18, Z
     908:	20 64       	ori	r18, 0x40	; 64
     90a:	fc 01       	movw	r30, r24
     90c:	20 83       	st	Z, r18

			break;
     90e:	58 c0       	rjmp	.+176    	; 0x9c0 <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
     910:	85 e5       	ldi	r24, 0x55	; 85
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	25 e5       	ldi	r18, 0x55	; 85
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	f9 01       	movw	r30, r18
     91a:	20 81       	ld	r18, Z
     91c:	42 2f       	mov	r20, r18
     91e:	4b 7f       	andi	r20, 0xFB	; 251
     920:	2b 81       	ldd	r18, Y+3	; 0x03
     922:	22 2f       	mov	r18, r18
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	21 70       	andi	r18, 0x01	; 1
     928:	33 27       	eor	r19, r19
     92a:	22 0f       	add	r18, r18
     92c:	33 1f       	adc	r19, r19
     92e:	22 0f       	add	r18, r18
     930:	33 1f       	adc	r19, r19
     932:	24 2b       	or	r18, r20
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
     938:	85 e5       	ldi	r24, 0x55	; 85
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	25 e5       	ldi	r18, 0x55	; 85
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	20 81       	ld	r18, Z
     944:	42 2f       	mov	r20, r18
     946:	47 7f       	andi	r20, 0xF7	; 247
     948:	2b 81       	ldd	r18, Y+3	; 0x03
     94a:	26 95       	lsr	r18
     94c:	22 2f       	mov	r18, r18
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	21 70       	andi	r18, 0x01	; 1
     952:	33 27       	eor	r19, r19
     954:	22 0f       	add	r18, r18
     956:	33 1f       	adc	r19, r19
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	22 0f       	add	r18, r18
     95e:	33 1f       	adc	r19, r19
     960:	24 2b       	or	r18, r20
     962:	fc 01       	movw	r30, r24
     964:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
     966:	8b e5       	ldi	r24, 0x5B	; 91
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	2b e5       	ldi	r18, 0x5B	; 91
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	f9 01       	movw	r30, r18
     970:	20 81       	ld	r18, Z
     972:	20 68       	ori	r18, 0x80	; 128
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
			break;
     978:	23 c0       	rjmp	.+70     	; 0x9c0 <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
     97a:	84 e5       	ldi	r24, 0x54	; 84
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	24 e5       	ldi	r18, 0x54	; 84
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	f9 01       	movw	r30, r18
     984:	20 81       	ld	r18, Z
     986:	42 2f       	mov	r20, r18
     988:	4f 7b       	andi	r20, 0xBF	; 191
     98a:	2b 81       	ldd	r18, Y+3	; 0x03
     98c:	22 2f       	mov	r18, r18
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	21 70       	andi	r18, 0x01	; 1
     992:	33 27       	eor	r19, r19
     994:	00 24       	eor	r0, r0
     996:	36 95       	lsr	r19
     998:	27 95       	ror	r18
     99a:	07 94       	ror	r0
     99c:	36 95       	lsr	r19
     99e:	27 95       	ror	r18
     9a0:	07 94       	ror	r0
     9a2:	32 2f       	mov	r19, r18
     9a4:	20 2d       	mov	r18, r0
     9a6:	24 2b       	or	r18, r20
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
     9ac:	8b e5       	ldi	r24, 0x5B	; 91
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2b e5       	ldi	r18, 0x5B	; 91
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	20 81       	ld	r18, Z
     9b8:	20 62       	ori	r18, 0x20	; 32
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
			break;
     9be:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
     9c0:	89 81       	ldd	r24, Y+1	; 0x01

}
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <Exti_enuDisable+0x6>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	18 f0       	brcs	.+6      	; 0x9ea <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	2a c0       	rjmp	.+84     	; 0xa3e <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
     9ea:	8a 81       	ldd	r24, Y+2	; 0x02
     9ec:	88 2f       	mov	r24, r24
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	91 05       	cpc	r25, r1
     9f4:	81 f0       	breq	.+32     	; 0xa16 <Exti_enuDisable+0x48>
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	91 05       	cpc	r25, r1
     9fa:	b9 f0       	breq	.+46     	; 0xa2a <Exti_enuDisable+0x5c>
     9fc:	89 2b       	or	r24, r25
     9fe:	09 f0       	breq	.+2      	; 0xa02 <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
     a00:	1e c0       	rjmp	.+60     	; 0xa3e <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
     a02:	8b e5       	ldi	r24, 0x5B	; 91
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	2b e5       	ldi	r18, 0x5B	; 91
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	f9 01       	movw	r30, r18
     a0c:	20 81       	ld	r18, Z
     a0e:	2f 7b       	andi	r18, 0xBF	; 191
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
			break;
     a14:	14 c0       	rjmp	.+40     	; 0xa3e <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
     a16:	8b e5       	ldi	r24, 0x5B	; 91
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	2b e5       	ldi	r18, 0x5B	; 91
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	2f 77       	andi	r18, 0x7F	; 127
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
			break;
     a28:	0a c0       	rjmp	.+20     	; 0xa3e <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
     a2a:	8b e5       	ldi	r24, 0x5B	; 91
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	2b e5       	ldi	r18, 0x5B	; 91
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	f9 01       	movw	r30, r18
     a34:	20 81       	ld	r18, Z
     a36:	2f 7d       	andi	r18, 0xDF	; 223
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
			break;
     a3c:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
     a3e:	89 81       	ldd	r24, Y+1	; 0x01

}
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <Exti_enuSetCallbackFunction+0x6>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <Exti_enuSetCallbackFunction+0x8>
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	8a 83       	std	Y+2, r24	; 0x02
     a58:	7c 83       	std	Y+4, r23	; 0x04
     a5a:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	83 30       	cpi	r24, 0x03	; 3
     a64:	18 f0       	brcs	.+6      	; 0xa6c <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	13 c0       	rjmp	.+38     	; 0xa92 <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	89 2b       	or	r24, r25
     a72:	19 f4       	brne	.+6      	; 0xa7a <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	0c c0       	rjmp	.+24     	; 0xa92 <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	80 50       	subi	r24, 0x00	; 0
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	2b 81       	ldd	r18, Y+3	; 0x03
     a8a:	3c 81       	ldd	r19, Y+4	; 0x04
     a8c:	fc 01       	movw	r30, r24
     a8e:	31 83       	std	Z+1, r19	; 0x01
     a90:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
     a92:	89 81       	ldd	r24, Y+1	; 0x01

}
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	2f 93       	push	r18
     ab0:	3f 93       	push	r19
     ab2:	4f 93       	push	r20
     ab4:	5f 93       	push	r21
     ab6:	6f 93       	push	r22
     ab8:	7f 93       	push	r23
     aba:	8f 93       	push	r24
     abc:	9f 93       	push	r25
     abe:	af 93       	push	r26
     ac0:	bf 93       	push	r27
     ac2:	ef 93       	push	r30
     ac4:	ff 93       	push	r31
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
     ace:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     ad2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     ad6:	89 2b       	or	r24, r25
     ad8:	31 f0       	breq	.+12     	; 0xae6 <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
     ada:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     ade:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     ae2:	fc 01       	movw	r30, r24
     ae4:	09 95       	icall

}
     ae6:	00 00       	nop
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	ff 91       	pop	r31
     aee:	ef 91       	pop	r30
     af0:	bf 91       	pop	r27
     af2:	af 91       	pop	r26
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	7f 91       	pop	r23
     afa:	6f 91       	pop	r22
     afc:	5f 91       	pop	r21
     afe:	4f 91       	pop	r20
     b00:	3f 91       	pop	r19
     b02:	2f 91       	pop	r18
     b04:	0f 90       	pop	r0
     b06:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	5f 93       	push	r21
     b24:	6f 93       	push	r22
     b26:	7f 93       	push	r23
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
     b3c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end+0x2>
     b40:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x3>
     b44:	89 2b       	or	r24, r25
     b46:	31 f0       	breq	.+12     	; 0xb54 <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
     b48:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end+0x2>
     b4c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x3>
     b50:	fc 01       	movw	r30, r24
     b52:	09 95       	icall

}
     b54:	00 00       	nop
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	ff 91       	pop	r31
     b5c:	ef 91       	pop	r30
     b5e:	bf 91       	pop	r27
     b60:	af 91       	pop	r26
     b62:	9f 91       	pop	r25
     b64:	8f 91       	pop	r24
     b66:	7f 91       	pop	r23
     b68:	6f 91       	pop	r22
     b6a:	5f 91       	pop	r21
     b6c:	4f 91       	pop	r20
     b6e:	3f 91       	pop	r19
     b70:	2f 91       	pop	r18
     b72:	0f 90       	pop	r0
     b74:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	2f 93       	push	r18
     b8c:	3f 93       	push	r19
     b8e:	4f 93       	push	r20
     b90:	5f 93       	push	r21
     b92:	6f 93       	push	r22
     b94:	7f 93       	push	r23
     b96:	8f 93       	push	r24
     b98:	9f 93       	push	r25
     b9a:	af 93       	push	r26
     b9c:	bf 93       	push	r27
     b9e:	ef 93       	push	r30
     ba0:	ff 93       	push	r31
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
     baa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x4>
     bae:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x5>
     bb2:	89 2b       	or	r24, r25
     bb4:	31 f0       	breq	.+12     	; 0xbc2 <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
     bb6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x4>
     bba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x5>
     bbe:	fc 01       	movw	r30, r24
     bc0:	09 95       	icall

}
     bc2:	00 00       	nop
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	bf 91       	pop	r27
     bce:	af 91       	pop	r26
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	7f 91       	pop	r23
     bd6:	6f 91       	pop	r22
     bd8:	5f 91       	pop	r21
     bda:	4f 91       	pop	r20
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	0f 90       	pop	r0
     be2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     be6:	0f 90       	pop	r0
     be8:	1f 90       	pop	r1
     bea:	18 95       	reti

00000bec <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <Dio_enuWriteChannel+0x6>
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <Dio_enuWriteChannel+0x8>
     bf4:	1f 92       	push	r1
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	8c 83       	std	Y+4, r24	; 0x04
     bfc:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     bfe:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	87 70       	andi	r24, 0x07	; 7
     c04:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	86 95       	lsr	r24
     c0a:	86 95       	lsr	r24
     c0c:	86 95       	lsr	r24
     c0e:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	80 32       	cpi	r24, 0x20	; 32
     c14:	18 f0       	brcs	.+6      	; 0xc1c <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	4e c0       	rjmp	.+156    	; 0xcb8 <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	80 59       	subi	r24, 0x90	; 144
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	fc 01       	movw	r30, r24
     c2c:	80 81       	ld	r24, Z
     c2e:	91 81       	ldd	r25, Z+1	; 0x01
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	2a 81       	ldd	r18, Y+2	; 0x02
     c3a:	22 2f       	mov	r18, r18
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <Dio_enuWriteChannel+0x58>
     c40:	95 95       	asr	r25
     c42:	87 95       	ror	r24
     c44:	2a 95       	dec	r18
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <Dio_enuWriteChannel+0x54>
     c48:	81 70       	andi	r24, 0x01	; 1
     c4a:	99 27       	eor	r25, r25
     c4c:	89 2b       	or	r24, r25
     c4e:	19 f4       	brne	.+6      	; 0xc56 <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	31 c0       	rjmp	.+98     	; 0xcb8 <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
     c56:	8b 81       	ldd	r24, Y+3	; 0x03
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	88 58       	subi	r24, 0x88	; 136
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	fc 01       	movw	r30, r24
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	2b 81       	ldd	r18, Y+3	; 0x03
     c6c:	22 2f       	mov	r18, r18
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	28 58       	subi	r18, 0x88	; 136
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	31 81       	ldd	r19, Z+1	; 0x01
     c7e:	f9 01       	movw	r30, r18
     c80:	20 81       	ld	r18, Z
     c82:	62 2f       	mov	r22, r18
     c84:	2a 81       	ldd	r18, Y+2	; 0x02
     c86:	42 2f       	mov	r20, r18
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	21 e0       	ldi	r18, 0x01	; 1
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <Dio_enuWriteChannel+0xa8>
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	4a 95       	dec	r20
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <Dio_enuWriteChannel+0xa4>
     c98:	20 95       	com	r18
     c9a:	62 23       	and	r22, r18
     c9c:	2d 81       	ldd	r18, Y+5	; 0x05
     c9e:	22 2f       	mov	r18, r18
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a 81       	ldd	r20, Y+2	; 0x02
     ca4:	44 2f       	mov	r20, r20
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <Dio_enuWriteChannel+0xc2>
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	4a 95       	dec	r20
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <Dio_enuWriteChannel+0xbe>
     cb2:	26 2b       	or	r18, r22
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18

}

	return Loc_enuState;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <Dio_enuReadChannel+0x6>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <Dio_enuReadChannel+0x8>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <Dio_enuReadChannel+0xa>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	8c 83       	std	Y+4, r24	; 0x04
     cda:	7e 83       	std	Y+6, r23	; 0x06
     cdc:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     cde:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	87 70       	andi	r24, 0x07	; 7
     ce4:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	86 95       	lsr	r24
     cea:	86 95       	lsr	r24
     cec:	86 95       	lsr	r24
     cee:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	80 32       	cpi	r24, 0x20	; 32
     cf4:	18 f0       	brcs	.+6      	; 0xcfc <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	40 c0       	rjmp	.+128    	; 0xd7c <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	80 59       	subi	r24, 0x90	; 144
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	fc 01       	movw	r30, r24
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	fc 01       	movw	r30, r24
     d12:	80 81       	ld	r24, Z
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	2a 81       	ldd	r18, Y+2	; 0x02
     d1a:	22 2f       	mov	r18, r18
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <Dio_enuReadChannel+0x5a>
     d20:	95 95       	asr	r25
     d22:	87 95       	ror	r24
     d24:	2a 95       	dec	r18
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <Dio_enuReadChannel+0x56>
     d28:	81 70       	andi	r24, 0x01	; 1
     d2a:	99 27       	eor	r25, r25
     d2c:	89 2b       	or	r24, r25
     d2e:	19 f0       	breq	.+6      	; 0xd36 <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	23 c0       	rjmp	.+70     	; 0xd7c <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	89 2b       	or	r24, r25
     d3c:	19 f4       	brne	.+6      	; 0xd44 <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     d3e:	84 e0       	ldi	r24, 0x04	; 4
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	1c c0       	rjmp	.+56     	; 0xd7c <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	80 58       	subi	r24, 0x80	; 128
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	fc 01       	movw	r30, r24
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	fc 01       	movw	r30, r24
     d5a:	80 81       	ld	r24, Z
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	2a 81       	ldd	r18, Y+2	; 0x02
     d62:	22 2f       	mov	r18, r18
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <Dio_enuReadChannel+0xa2>
     d68:	95 95       	asr	r25
     d6a:	87 95       	ror	r24
     d6c:	2a 95       	dec	r18
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <Dio_enuReadChannel+0x9e>
     d70:	28 2f       	mov	r18, r24
     d72:	21 70       	andi	r18, 0x01	; 1
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18


	}

		return Loc_enuState;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01

}
     d7e:	26 96       	adiw	r28, 0x06	; 6
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	00 d0       	rcall	.+0      	; 0xd96 <Dio_enuWritePort+0x6>
     d96:	1f 92       	push	r1
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	8a 83       	std	Y+2, r24	; 0x02
     d9e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     da0:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	84 30       	cpi	r24, 0x04	; 4
     da6:	18 f0       	brcs	.+6      	; 0xdae <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	1e c0       	rjmp	.+60     	; 0xdea <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	88 2f       	mov	r24, r24
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	80 59       	subi	r24, 0x90	; 144
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	fc 01       	movw	r30, r24
     dc4:	80 81       	ld	r24, Z
     dc6:	8f 3f       	cpi	r24, 0xFF	; 255
     dc8:	19 f0       	breq	.+6      	; 0xdd0 <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	0d c0       	rjmp	.+26     	; 0xdea <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	88 58       	subi	r24, 0x88	; 136
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	fc 01       	movw	r30, r24
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	2b 81       	ldd	r18, Y+3	; 0x03
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     dea:	89 81       	ldd	r24, Y+1	; 0x01



}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <Dio_enuReadPort+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <Dio_enuReadPort+0x8>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	8a 83       	std	Y+2, r24	; 0x02
     e06:	7c 83       	std	Y+4, r23	; 0x04
     e08:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     e0a:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	84 30       	cpi	r24, 0x04	; 4
     e10:	18 f0       	brcs	.+6      	; 0xe18 <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	28 c0       	rjmp	.+80     	; 0xe68 <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	80 59       	subi	r24, 0x90	; 144
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	88 23       	and	r24, r24
     e32:	19 f0       	breq	.+6      	; 0xe3a <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	17 c0       	rjmp	.+46     	; 0xe68 <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	89 2b       	or	r24, r25
     e40:	19 f4       	brne	.+6      	; 0xe48 <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     e42:	84 e0       	ldi	r24, 0x04	; 4
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	80 58       	subi	r24, 0x80	; 128
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	fc 01       	movw	r30, r24
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 81       	ld	r18, Z
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18

		}

			return Loc_enuState;
     e68:	89 81       	ldd	r24, Y+1	; 0x01

}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <Dio_enuFlipChannel+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <Dio_enuFlipChannel+0x8>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     e86:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	87 70       	andi	r24, 0x07	; 7
     e8c:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	86 95       	lsr	r24
     e92:	86 95       	lsr	r24
     e94:	86 95       	lsr	r24
     e96:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	80 32       	cpi	r24, 0x20	; 32
     e9c:	18 f0       	brcs	.+6      	; 0xea4 <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	41 c0       	rjmp	.+130    	; 0xf26 <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	80 59       	subi	r24, 0x90	; 144
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	2a 81       	ldd	r18, Y+2	; 0x02
     ec2:	22 2f       	mov	r18, r18
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <Dio_enuFlipChannel+0x54>
     ec8:	95 95       	asr	r25
     eca:	87 95       	ror	r24
     ecc:	2a 95       	dec	r18
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <Dio_enuFlipChannel+0x50>
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	99 27       	eor	r25, r25
     ed4:	89 2b       	or	r24, r25
     ed6:	19 f4       	brne	.+6      	; 0xede <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	24 c0       	rjmp	.+72     	; 0xf26 <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	88 58       	subi	r24, 0x88	; 136
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	fc 01       	movw	r30, r24
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	2b 81       	ldd	r18, Y+3	; 0x03
     ef4:	22 2f       	mov	r18, r18
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	22 0f       	add	r18, r18
     efa:	33 1f       	adc	r19, r19
     efc:	28 58       	subi	r18, 0x88	; 136
     efe:	3f 4f       	sbci	r19, 0xFF	; 255
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	31 81       	ldd	r19, Z+1	; 0x01
     f06:	f9 01       	movw	r30, r18
     f08:	20 81       	ld	r18, Z
     f0a:	62 2f       	mov	r22, r18
     f0c:	2a 81       	ldd	r18, Y+2	; 0x02
     f0e:	42 2f       	mov	r20, r18
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	21 e0       	ldi	r18, 0x01	; 1
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <Dio_enuFlipChannel+0xa4>
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	4a 95       	dec	r20
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <Dio_enuFlipChannel+0xa0>
     f20:	26 27       	eor	r18, r22
     f22:	fc 01       	movw	r30, r24
     f24:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <Adc_enuInit>:
/********************************** Data Type Declarations ****************************/

/********************************** Software Interfaces Declarations *******************/


Adc_StatusErrorType Adc_enuInit(const Adc_PinConfigType* Address_Adc){
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <Adc_enuInit+0x6>
     f3c:	1f 92       	push	r1
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	9b 83       	std	Y+3, r25	; 0x03
     f44:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	89 2b       	or	r24, r25
     f50:	19 f4       	brne	.+6      	; 0xf58 <Adc_enuInit+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	65 c0       	rjmp	.+202    	; 0x1022 <Adc_enuInit+0xec>
	    }
	    else{
	    	 /* Disable Adc Peripheral */
	    	        Adc_Disable();
     f58:	86 e2       	ldi	r24, 0x26	; 38
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	26 e2       	ldi	r18, 0x26	; 38
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	f9 01       	movw	r30, r18
     f62:	20 81       	ld	r18, Z
     f64:	2f 77       	andi	r18, 0x7F	; 127
     f66:	fc 01       	movw	r30, r24
     f68:	20 83       	st	Z, r18



	    	        /* Choose Conversion Clock  */
	    	        Adc_SelectConversionClock(Address_Adc->conversion_frequancy);
     f6a:	86 e2       	ldi	r24, 0x26	; 38
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	26 e2       	ldi	r18, 0x26	; 38
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	f9 01       	movw	r30, r18
     f74:	20 81       	ld	r18, Z
     f76:	42 2f       	mov	r20, r18
     f78:	40 77       	andi	r20, 0x70	; 112
     f7a:	2a 81       	ldd	r18, Y+2	; 0x02
     f7c:	3b 81       	ldd	r19, Y+3	; 0x03
     f7e:	f9 01       	movw	r30, r18
     f80:	23 81       	ldd	r18, Z+3	; 0x03
     f82:	27 70       	andi	r18, 0x07	; 7
     f84:	24 2b       	or	r18, r20
     f86:	fc 01       	movw	r30, r24
     f88:	20 83       	st	Z, r18

	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
     f8a:	87 e2       	ldi	r24, 0x27	; 39
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	27 e2       	ldi	r18, 0x27	; 39
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	f9 01       	movw	r30, r18
     f94:	20 81       	ld	r18, Z
     f96:	42 2f       	mov	r20, r18
     f98:	48 7f       	andi	r20, 0xF8	; 248
     f9a:	2a 81       	ldd	r18, Y+2	; 0x02
     f9c:	3b 81       	ldd	r19, Y+3	; 0x03
     f9e:	f9 01       	movw	r30, r18
     fa0:	20 81       	ld	r18, Z
     fa2:	27 70       	andi	r18, 0x07	; 7
     fa4:	24 2b       	or	r18, r20
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18


	    	        /*Configure Result Format */
	    	        Adc_SelectResultFormat(Address_Adc->result_format);
     faa:	87 e2       	ldi	r24, 0x27	; 39
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	27 e2       	ldi	r18, 0x27	; 39
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	f9 01       	movw	r30, r18
     fb4:	20 81       	ld	r18, Z
     fb6:	42 2f       	mov	r20, r18
     fb8:	4f 7d       	andi	r20, 0xDF	; 223
     fba:	2a 81       	ldd	r18, Y+2	; 0x02
     fbc:	3b 81       	ldd	r19, Y+3	; 0x03
     fbe:	f9 01       	movw	r30, r18
     fc0:	22 81       	ldd	r18, Z+2	; 0x02
     fc2:	22 2f       	mov	r18, r18
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	22 95       	swap	r18
     fcc:	32 95       	swap	r19
     fce:	30 7f       	andi	r19, 0xF0	; 240
     fd0:	32 27       	eor	r19, r18
     fd2:	20 7f       	andi	r18, 0xF0	; 240
     fd4:	32 27       	eor	r19, r18
     fd6:	24 2b       	or	r18, r20
     fd8:	fc 01       	movw	r30, r24
     fda:	20 83       	st	Z, r18

	    	        /* Configure Voltage Reference*/
	    	        Adc_SelectRefVoltageSource(Address_Adc->vref_source);
     fdc:	87 e2       	ldi	r24, 0x27	; 39
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	27 e2       	ldi	r18, 0x27	; 39
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	f9 01       	movw	r30, r18
     fe6:	20 81       	ld	r18, Z
     fe8:	42 2f       	mov	r20, r18
     fea:	4f 73       	andi	r20, 0x3F	; 63
     fec:	2a 81       	ldd	r18, Y+2	; 0x02
     fee:	3b 81       	ldd	r19, Y+3	; 0x03
     ff0:	f9 01       	movw	r30, r18
     ff2:	21 81       	ldd	r18, Z+1	; 0x01
     ff4:	22 2f       	mov	r18, r18
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	00 24       	eor	r0, r0
     ffa:	36 95       	lsr	r19
     ffc:	27 95       	ror	r18
     ffe:	07 94       	ror	r0
    1000:	36 95       	lsr	r19
    1002:	27 95       	ror	r18
    1004:	07 94       	ror	r0
    1006:	32 2f       	mov	r19, r18
    1008:	20 2d       	mov	r18, r0
    100a:	24 2b       	or	r18, r20
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18

	    	        /* Enable Adc Peripheral */
	    	        Adc_Enable();
    1010:	86 e2       	ldi	r24, 0x26	; 38
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	26 e2       	ldi	r18, 0x26	; 38
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	f9 01       	movw	r30, r18
    101a:	20 81       	ld	r18, Z
    101c:	20 68       	ori	r18, 0x80	; 128
    101e:	fc 01       	movw	r30, r24
    1020:	20 83       	st	Z, r18

	    }

	    return Loc_enuAdcStatus;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <Adc_enuDeInit>:

Adc_StatusErrorType Adc_enuDeInit(void){
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	1f 92       	push	r1
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	89 83       	std	Y+1, r24	; 0x01

	Adc_Disable();
    103e:	86 e2       	ldi	r24, 0x26	; 38
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	26 e2       	ldi	r18, 0x26	; 38
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	20 81       	ld	r18, Z
    104a:	2f 77       	andi	r18, 0x7F	; 127
    104c:	fc 01       	movw	r30, r24
    104e:	20 83       	st	Z, r18
	    return Loc_enuAdcStatus;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	0f 90       	pop	r0
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <Adc_enuStartConversionSync>:


Adc_StatusErrorType Adc_enuStartConversionSync(const Adc_PinConfigType* Address_Adc, u16* Address_ResultDigitalVoltage){
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	a6 97       	sbiw	r28, 0x26	; 38
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	9c a3       	std	Y+36, r25	; 0x24
    1070:	8b a3       	std	Y+35, r24	; 0x23
    1072:	7e a3       	std	Y+38, r23	; 0x26
    1074:	6d a3       	std	Y+37, r22	; 0x25

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8AdcInterruptStatus = ZERO_VALUE;
    107a:	1a 82       	std	Y+2, r1	; 0x02
	    if(NULL == Address_Adc || Address_ResultDigitalVoltage == NULL){
    107c:	8b a1       	ldd	r24, Y+35	; 0x23
    107e:	9c a1       	ldd	r25, Y+36	; 0x24
    1080:	89 2b       	or	r24, r25
    1082:	21 f0       	breq	.+8      	; 0x108c <Adc_enuStartConversionSync+0x32>
    1084:	8d a1       	ldd	r24, Y+37	; 0x25
    1086:	9e a1       	ldd	r25, Y+38	; 0x26
    1088:	89 2b       	or	r24, r25
    108a:	19 f4       	brne	.+6      	; 0x1092 <Adc_enuStartConversionSync+0x38>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	54 c1       	rjmp	.+680    	; 0x133a <Adc_enuStartConversionSync+0x2e0>
	    }
	    else{

	            /* Read Status of The interrupt */
	    	    Loc_u8AdcInterruptStatus = Adc_GetInterruptEnableStatus();
    1092:	86 e2       	ldi	r24, 0x26	; 38
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	fc 01       	movw	r30, r24
    1098:	80 81       	ld	r24, Z
    109a:	86 95       	lsr	r24
    109c:	86 95       	lsr	r24
    109e:	86 95       	lsr	r24
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	8a 83       	std	Y+2, r24	; 0x02

	            /* Choose Selected Channel */
	            Adc_SelectChannel(Address_Adc->channel_number);
    10a4:	87 e2       	ldi	r24, 0x27	; 39
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	27 e2       	ldi	r18, 0x27	; 39
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	f9 01       	movw	r30, r18
    10ae:	20 81       	ld	r18, Z
    10b0:	42 2f       	mov	r20, r18
    10b2:	48 7f       	andi	r20, 0xF8	; 248
    10b4:	2b a1       	ldd	r18, Y+35	; 0x23
    10b6:	3c a1       	ldd	r19, Y+36	; 0x24
    10b8:	f9 01       	movw	r30, r18
    10ba:	20 81       	ld	r18, Z
    10bc:	27 70       	andi	r18, 0x07	; 7
    10be:	24 2b       	or	r18, r20
    10c0:	fc 01       	movw	r30, r24
    10c2:	20 83       	st	Z, r18


	            /* Disable Interrupt not to jump after completing*/
	            Adc_SetInterruptEnable(ZERO_VALUE);
    10c4:	86 e2       	ldi	r24, 0x26	; 38
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	26 e2       	ldi	r18, 0x26	; 38
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	f9 01       	movw	r30, r18
    10ce:	20 81       	ld	r18, Z
    10d0:	27 7f       	andi	r18, 0xF7	; 247
    10d2:	fc 01       	movw	r30, r24
    10d4:	20 83       	st	Z, r18


	            /* Start Conversion  */
	            Adc_StartConversion();
    10d6:	86 e2       	ldi	r24, 0x26	; 38
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	26 e2       	ldi	r18, 0x26	; 38
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	f9 01       	movw	r30, r18
    10e0:	20 81       	ld	r18, Z
    10e2:	20 64       	ori	r18, 0x40	; 64
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 83       	st	Z, r18



	            /* wait =polling for conversion */
	            while( ZERO_VALUE == Adc_IsConversionCompleted() );
    10e8:	00 00       	nop
    10ea:	86 e2       	ldi	r24, 0x26	; 38
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	fc 01       	movw	r30, r24
    10f0:	80 81       	ld	r24, Z
    10f2:	82 95       	swap	r24
    10f4:	86 95       	lsr	r24
    10f6:	86 95       	lsr	r24
    10f8:	83 70       	andi	r24, 0x03	; 3
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	99 27       	eor	r25, r25
    1102:	89 2b       	or	r24, r25
    1104:	91 f7       	brne	.-28     	; 0x10ea <Adc_enuStartConversionSync+0x90>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e2       	ldi	r26, 0x20	; 32
    110c:	b1 e4       	ldi	r27, 0x41	; 65
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	ad 83       	std	Y+5, r26	; 0x05
    1114:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1116:	2b ea       	ldi	r18, 0xAB	; 171
    1118:	3a ea       	ldi	r19, 0xAA	; 170
    111a:	4a e2       	ldi	r20, 0x2A	; 42
    111c:	50 e4       	ldi	r21, 0x40	; 64
    111e:	6b 81       	ldd	r22, Y+3	; 0x03
    1120:	7c 81       	ldd	r23, Y+4	; 0x04
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	a9 87       	std	Y+9, r26	; 0x09
    1134:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	ad 81       	ldd	r26, Y+5	; 0x05
    113c:	be 81       	ldd	r27, Y+6	; 0x06
    113e:	9c 01       	movw	r18, r24
    1140:	ad 01       	movw	r20, r26
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	0e 94 85 1a 	call	0x350a	; 0x350a <__addsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	8b 87       	std	Y+11, r24	; 0x0b
    1150:	9c 87       	std	Y+12, r25	; 0x0c
    1152:	ad 87       	std	Y+13, r26	; 0x0d
    1154:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	6f 81       	ldd	r22, Y+7	; 0x07
    1160:	78 85       	ldd	r23, Y+8	; 0x08
    1162:	89 85       	ldd	r24, Y+9	; 0x09
    1164:	9a 85       	ldd	r25, Y+10	; 0x0a
    1166:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    116a:	88 23       	and	r24, r24
    116c:	1c f4       	brge	.+6      	; 0x1174 <Adc_enuStartConversionSync+0x11a>
		__ticks = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	8f 87       	std	Y+15, r24	; 0x0f
    1172:	b2 c0       	rjmp	.+356    	; 0x12d8 <Adc_enuStartConversionSync+0x27e>
	else if (__tmp2 > 65535)
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	6b 85       	ldd	r22, Y+11	; 0x0b
    117e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    1188:	18 16       	cp	r1, r24
    118a:	0c f0       	brlt	.+2      	; 0x118e <Adc_enuStartConversionSync+0x134>
    118c:	7b c0       	rjmp	.+246    	; 0x1284 <Adc_enuStartConversionSync+0x22a>
	{
		_delay_ms(__us / 1000.0);
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4a e7       	ldi	r20, 0x7A	; 122
    1194:	54 e4       	ldi	r21, 0x44	; 68
    1196:	6b 81       	ldd	r22, Y+3	; 0x03
    1198:	7c 81       	ldd	r23, Y+4	; 0x04
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__divsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	88 8b       	std	Y+16, r24	; 0x10
    11a8:	99 8b       	std	Y+17, r25	; 0x11
    11aa:	aa 8b       	std	Y+18, r26	; 0x12
    11ac:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	4a ef       	ldi	r20, 0xFA	; 250
    11b4:	54 e4       	ldi	r21, 0x44	; 68
    11b6:	68 89       	ldd	r22, Y+16	; 0x10
    11b8:	79 89       	ldd	r23, Y+17	; 0x11
    11ba:	8a 89       	ldd	r24, Y+18	; 0x12
    11bc:	9b 89       	ldd	r25, Y+19	; 0x13
    11be:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	8c 8b       	std	Y+20, r24	; 0x14
    11c8:	9d 8b       	std	Y+21, r25	; 0x15
    11ca:	ae 8b       	std	Y+22, r26	; 0x16
    11cc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e8       	ldi	r20, 0x80	; 128
    11d4:	5f e3       	ldi	r21, 0x3F	; 63
    11d6:	6c 89       	ldd	r22, Y+20	; 0x14
    11d8:	7d 89       	ldd	r23, Y+21	; 0x15
    11da:	8e 89       	ldd	r24, Y+22	; 0x16
    11dc:	9f 89       	ldd	r25, Y+23	; 0x17
    11de:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    11e2:	88 23       	and	r24, r24
    11e4:	2c f4       	brge	.+10     	; 0x11f0 <Adc_enuStartConversionSync+0x196>
		__ticks = 1;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	99 8f       	std	Y+25, r25	; 0x19
    11ec:	88 8f       	std	Y+24, r24	; 0x18
    11ee:	3f c0       	rjmp	.+126    	; 0x126e <Adc_enuStartConversionSync+0x214>
	else if (__tmp > 65535)
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	3f ef       	ldi	r19, 0xFF	; 255
    11f4:	4f e7       	ldi	r20, 0x7F	; 127
    11f6:	57 e4       	ldi	r21, 0x47	; 71
    11f8:	6c 89       	ldd	r22, Y+20	; 0x14
    11fa:	7d 89       	ldd	r23, Y+21	; 0x15
    11fc:	8e 89       	ldd	r24, Y+22	; 0x16
    11fe:	9f 89       	ldd	r25, Y+23	; 0x17
    1200:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    1204:	18 16       	cp	r1, r24
    1206:	4c f5       	brge	.+82     	; 0x125a <Adc_enuStartConversionSync+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e2       	ldi	r20, 0x20	; 32
    120e:	51 e4       	ldi	r21, 0x41	; 65
    1210:	68 89       	ldd	r22, Y+16	; 0x10
    1212:	79 89       	ldd	r23, Y+17	; 0x11
    1214:	8a 89       	ldd	r24, Y+18	; 0x12
    1216:	9b 89       	ldd	r25, Y+19	; 0x13
    1218:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	bc 01       	movw	r22, r24
    1222:	cd 01       	movw	r24, r26
    1224:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	99 8f       	std	Y+25, r25	; 0x19
    122e:	88 8f       	std	Y+24, r24	; 0x18
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <Adc_enuStartConversionSync+0x1f6>
    1232:	88 ec       	ldi	r24, 0xC8	; 200
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9b 8f       	std	Y+27, r25	; 0x1b
    1238:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    123a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    123c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <Adc_enuStartConversionSync+0x1e4>
    1242:	9b 8f       	std	Y+27, r25	; 0x1b
    1244:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1246:	88 8d       	ldd	r24, Y+24	; 0x18
    1248:	99 8d       	ldd	r25, Y+25	; 0x19
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	99 8f       	std	Y+25, r25	; 0x19
    124e:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1250:	88 8d       	ldd	r24, Y+24	; 0x18
    1252:	99 8d       	ldd	r25, Y+25	; 0x19
    1254:	89 2b       	or	r24, r25
    1256:	69 f7       	brne	.-38     	; 0x1232 <Adc_enuStartConversionSync+0x1d8>
    1258:	3f c0       	rjmp	.+126    	; 0x12d8 <Adc_enuStartConversionSync+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125a:	6c 89       	ldd	r22, Y+20	; 0x14
    125c:	7d 89       	ldd	r23, Y+21	; 0x15
    125e:	8e 89       	ldd	r24, Y+22	; 0x16
    1260:	9f 89       	ldd	r25, Y+23	; 0x17
    1262:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	99 8f       	std	Y+25, r25	; 0x19
    126c:	88 8f       	std	Y+24, r24	; 0x18
    126e:	88 8d       	ldd	r24, Y+24	; 0x18
    1270:	99 8d       	ldd	r25, Y+25	; 0x19
    1272:	9d 8f       	std	Y+29, r25	; 0x1d
    1274:	8c 8f       	std	Y+28, r24	; 0x1c
    1276:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1278:	9d 8d       	ldd	r25, Y+29	; 0x1d
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <Adc_enuStartConversionSync+0x220>
    127e:	9d 8f       	std	Y+29, r25	; 0x1d
    1280:	8c 8f       	std	Y+28, r24	; 0x1c
    1282:	2a c0       	rjmp	.+84     	; 0x12d8 <Adc_enuStartConversionSync+0x27e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4f e7       	ldi	r20, 0x7F	; 127
    128a:	53 e4       	ldi	r21, 0x43	; 67
    128c:	6f 81       	ldd	r22, Y+7	; 0x07
    128e:	78 85       	ldd	r23, Y+8	; 0x08
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    1298:	18 16       	cp	r1, r24
    129a:	ac f4       	brge	.+42     	; 0x12c6 <Adc_enuStartConversionSync+0x26c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    129c:	6b 85       	ldd	r22, Y+11	; 0x0b
    129e:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a4:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9f 8f       	std	Y+31, r25	; 0x1f
    12ae:	8e 8f       	std	Y+30, r24	; 0x1e
    12b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12b4:	99 a3       	std	Y+33, r25	; 0x21
    12b6:	88 a3       	std	Y+32, r24	; 0x20
    12b8:	88 a1       	ldd	r24, Y+32	; 0x20
    12ba:	99 a1       	ldd	r25, Y+33	; 0x21
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <Adc_enuStartConversionSync+0x262>
    12c0:	99 a3       	std	Y+33, r25	; 0x21
    12c2:	88 a3       	std	Y+32, r24	; 0x20
    12c4:	0f c0       	rjmp	.+30     	; 0x12e4 <Adc_enuStartConversionSync+0x28a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	8f 87       	std	Y+15, r24	; 0x0f
    12d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12da:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12dc:	8a a1       	ldd	r24, Y+34	; 0x22
    12de:	8a 95       	dec	r24
    12e0:	f1 f7       	brne	.-4      	; 0x12de <Adc_enuStartConversionSync+0x284>
    12e2:	8a a3       	std	Y+34, r24	; 0x22
	            _delay_us(10);

	            Loc_enuAdcStatus &= Adc_GetResult(Address_Adc->result_format ,Address_ResultDigitalVoltage);
    12e4:	8b a1       	ldd	r24, Y+35	; 0x23
    12e6:	9c a1       	ldd	r25, Y+36	; 0x24
    12e8:	fc 01       	movw	r30, r24
    12ea:	22 81       	ldd	r18, Z+2	; 0x02
    12ec:	8d a1       	ldd	r24, Y+37	; 0x25
    12ee:	9e a1       	ldd	r25, Y+38	; 0x26
    12f0:	bc 01       	movw	r22, r24
    12f2:	82 2f       	mov	r24, r18
    12f4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <Adc_GetResult>
    12f8:	98 2f       	mov	r25, r24
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	89 23       	and	r24, r25
    12fe:	89 83       	std	Y+1, r24	; 0x01

	            /* Return Status Of The Adc Interrupt*/
	            Adc_ClearInterruptFlag();
    1300:	86 e2       	ldi	r24, 0x26	; 38
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	26 e2       	ldi	r18, 0x26	; 38
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	f9 01       	movw	r30, r18
    130a:	20 81       	ld	r18, Z
    130c:	20 61       	ori	r18, 0x10	; 16
    130e:	fc 01       	movw	r30, r24
    1310:	20 83       	st	Z, r18
	            Adc_SetInterruptEnable(Loc_u8AdcInterruptStatus);
    1312:	86 e2       	ldi	r24, 0x26	; 38
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	26 e2       	ldi	r18, 0x26	; 38
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	42 2f       	mov	r20, r18
    1320:	47 7f       	andi	r20, 0xF7	; 247
    1322:	2a 81       	ldd	r18, Y+2	; 0x02
    1324:	22 2f       	mov	r18, r18
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	24 2b       	or	r18, r20
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
	        }

	    return Loc_enuAdcStatus;
    133a:	89 81       	ldd	r24, Y+1	; 0x01
}
    133c:	a6 96       	adiw	r28, 0x26	; 38
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <Adc_ConvertResultToVoltage>:



Adc_StatusErrorType Adc_ConvertResultToVoltage( u16 Copy_u16DigitalValue, f32* Address_ResultAnalogVoltage){
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	00 d0       	rcall	.+0      	; 0x1354 <Adc_ConvertResultToVoltage+0x6>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <Adc_ConvertResultToVoltage+0x8>
    1356:	1f 92       	push	r1
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	9b 83       	std	Y+3, r25	; 0x03
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	7d 83       	std	Y+5, r23	; 0x05
    1362:	6c 83       	std	Y+4, r22	; 0x04

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_ResultAnalogVoltage){
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	89 2b       	or	r24, r25
    136e:	19 f4       	brne	.+6      	; 0x1376 <Adc_ConvertResultToVoltage+0x28>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	1c c0       	rjmp	.+56     	; 0x13ae <Adc_ConvertResultToVoltage+0x60>
	    }
	    else{
	           /* Vanalog = Vdigital * step    */
	           /* Step Size = (Vmax-Vmin)/2^n      */
	           *Address_ResultAnalogVoltage = Copy_u16DigitalValue*0.004883F;
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	9b 81       	ldd	r25, Y+3	; 0x03
    137a:	cc 01       	movw	r24, r24
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	0e 94 97 1b 	call	0x372e	; 0x372e <__floatunsisf>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	23 e9       	ldi	r18, 0x93	; 147
    138e:	31 e0       	ldi	r19, 0x01	; 1
    1390:	40 ea       	ldi	r20, 0xA0	; 160
    1392:	5b e3       	ldi	r21, 0x3B	; 59
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	2c 81       	ldd	r18, Y+4	; 0x04
    13a2:	3d 81       	ldd	r19, Y+5	; 0x05
    13a4:	f9 01       	movw	r30, r18
    13a6:	80 83       	st	Z, r24
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	a2 83       	std	Z+2, r26	; 0x02
    13ac:	b3 83       	std	Z+3, r27	; 0x03
	       }

	    return Loc_enuAdcStatus;
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <Adc_StartConversionAsync>:


Adc_StatusErrorType Adc_StartConversionAsync(const Adc_PinConfigType* Address_Adc){
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <Adc_StartConversionAsync+0x6>
    13c6:	1f 92       	push	r1
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	9b 83       	std	Y+3, r25	; 0x03
    13ce:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	89 2b       	or	r24, r25
    13da:	19 f4       	brne	.+6      	; 0x13e2 <Adc_StartConversionAsync+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	34 c0       	rjmp	.+104    	; 0x144a <Adc_StartConversionAsync+0x8a>
	    }
	    else{
	    	 /* You can't start A new Conversion Unless The old One Is Done*/
	    	        while( ZERO_VALUE == Adc_IsConversionCompleted() );
    13e2:	00 00       	nop
    13e4:	86 e2       	ldi	r24, 0x26	; 38
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	fc 01       	movw	r30, r24
    13ea:	80 81       	ld	r24, Z
    13ec:	82 95       	swap	r24
    13ee:	86 95       	lsr	r24
    13f0:	86 95       	lsr	r24
    13f2:	83 70       	andi	r24, 0x03	; 3
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	81 70       	andi	r24, 0x01	; 1
    13fa:	99 27       	eor	r25, r25
    13fc:	89 2b       	or	r24, r25
    13fe:	91 f7       	brne	.-28     	; 0x13e4 <Adc_StartConversionAsync+0x24>

	    	        Global_AdcInterruptIndex = (u8)Address_Adc->channel_number;
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	9b 81       	ldd	r25, Y+3	; 0x03
    1404:	fc 01       	movw	r30, r24
    1406:	80 81       	ld	r24, Z
    1408:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Global_AdcInterruptIndex>
	    	        current_format = Address_Adc->result_format;
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	9b 81       	ldd	r25, Y+3	; 0x03
    1410:	fc 01       	movw	r30, r24
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <current_format>
	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    1418:	87 e2       	ldi	r24, 0x27	; 39
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	27 e2       	ldi	r18, 0x27	; 39
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	f9 01       	movw	r30, r18
    1422:	20 81       	ld	r18, Z
    1424:	42 2f       	mov	r20, r18
    1426:	48 7f       	andi	r20, 0xF8	; 248
    1428:	2a 81       	ldd	r18, Y+2	; 0x02
    142a:	3b 81       	ldd	r19, Y+3	; 0x03
    142c:	f9 01       	movw	r30, r18
    142e:	20 81       	ld	r18, Z
    1430:	27 70       	andi	r18, 0x07	; 7
    1432:	24 2b       	or	r18, r20
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18


	    	        /* Start Conversion  */
	    	        Adc_StartConversion();
    1438:	86 e2       	ldi	r24, 0x26	; 38
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	26 e2       	ldi	r18, 0x26	; 38
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	20 64       	ori	r18, 0x40	; 64
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
	    }

	    return Loc_enuAdcStatus;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
}
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	08 95       	ret

00001458 <Adc_enuEnableInterrupt>:


Adc_StatusErrorType Adc_enuEnableInterrupt(void){
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	1f 92       	push	r1
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	89 83       	std	Y+1, r24	; 0x01
	Adc_EnableInterrupt();
    1466:	86 e2       	ldi	r24, 0x26	; 38
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	26 e2       	ldi	r18, 0x26	; 38
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	f9 01       	movw	r30, r18
    1470:	20 81       	ld	r18, Z
    1472:	28 60       	ori	r18, 0x08	; 8
    1474:	fc 01       	movw	r30, r24
    1476:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    1478:	89 81       	ldd	r24, Y+1	; 0x01
}
    147a:	0f 90       	pop	r0
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	08 95       	ret

00001482 <Adc_enuDisableInterrupt>:


Adc_StatusErrorType Adc_enuDisableInterrupt(void){
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	1f 92       	push	r1
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
	Adc_DisableInterrupt();
    1490:	86 e2       	ldi	r24, 0x26	; 38
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	26 e2       	ldi	r18, 0x26	; 38
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	f9 01       	movw	r30, r18
    149a:	20 81       	ld	r18, Z
    149c:	27 7f       	andi	r18, 0xF7	; 247
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a4:	0f 90       	pop	r0
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <Adc_GetResult>:




////////////////////////////////////////////////Helpers Functions ///////////////////////////
static Adc_StatusErrorType Adc_GetResult(const Adc_ResultFormartType Copy_enuResultFormat, u16* Address_Result){
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <Adc_GetResult+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <Adc_GetResult+0x8>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	7c 83       	std	Y+4, r23	; 0x04
    14bc:	6b 83       	std	Y+3, r22	; 0x03

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Result){
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	89 2b       	or	r24, r25
    14c8:	19 f4       	brne	.+6      	; 0x14d0 <Adc_GetResult+0x24>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	30 c0       	rjmp	.+96     	; 0x1530 <Adc_GetResult+0x84>
	    }

	    	else{
	    	        switch(Copy_enuResultFormat){
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	89 2b       	or	r24, r25
    14d8:	b9 f4       	brne	.+46     	; 0x1508 <Adc_GetResult+0x5c>

	    	        case ADC_RIGHT_JUSTIFIED:



	    	                *Address_Result = (ADCL) | (ADCH <<8) ;
    14da:	84 e2       	ldi	r24, 0x24	; 36
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	fc 01       	movw	r30, r24
    14e0:	80 81       	ld	r24, Z
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	85 e2       	ldi	r24, 0x25	; 37
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	fc 01       	movw	r30, r24
    14ec:	80 81       	ld	r24, Z
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	98 2f       	mov	r25, r24
    14f4:	88 27       	eor	r24, r24
    14f6:	82 2b       	or	r24, r18
    14f8:	93 2b       	or	r25, r19
    14fa:	9c 01       	movw	r18, r24
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	fc 01       	movw	r30, r24
    1502:	31 83       	std	Z+1, r19	; 0x01
    1504:	20 83       	st	Z, r18
	    	                break;
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <Adc_GetResult+0x84>

	    	            default:
	    	            	*Address_Result = (ADCHL>>6) & 0x3FF;
    1508:	84 e2       	ldi	r24, 0x24	; 36
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	fc 01       	movw	r30, r24
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	9c 01       	movw	r18, r24
    1514:	00 24       	eor	r0, r0
    1516:	22 0f       	add	r18, r18
    1518:	33 1f       	adc	r19, r19
    151a:	00 1c       	adc	r0, r0
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	00 1c       	adc	r0, r0
    1522:	23 2f       	mov	r18, r19
    1524:	30 2d       	mov	r19, r0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	fc 01       	movw	r30, r24
    152c:	31 83       	std	Z+1, r19	; 0x01
    152e:	20 83       	st	Z, r18

	    	        }
	    	    }


	    return Loc_enuAdcStatus;
    1530:	89 81       	ldd	r24, Y+1	; 0x01
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <Adc_SetCallbackFunction>:

Adc_StatusErrorType Adc_SetCallbackFunction(const Adc_PinConfigType* Address_Adc, void (*callback)(u16)){
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	00 d0       	rcall	.+0      	; 0x1546 <Adc_SetCallbackFunction+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <Adc_SetCallbackFunction+0x8>
    1548:	1f 92       	push	r1
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9b 83       	std	Y+3, r25	; 0x03
    1550:	8a 83       	std	Y+2, r24	; 0x02
    1552:	7d 83       	std	Y+5, r23	; 0x05
    1554:	6c 83       	std	Y+4, r22	; 0x04
	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	89 83       	std	Y+1, r24	; 0x01
		    if(NULL == Address_Adc){
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	89 2b       	or	r24, r25
    1560:	19 f4       	brne	.+6      	; 0x1568 <Adc_SetCallbackFunction+0x28>
		    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <Adc_SetCallbackFunction+0x46>
		    }
		    else{
		    	Adc_InterruptHandlerArr[Address_Adc->channel_number] = callback;
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	fc 01       	movw	r30, r24
    156e:	80 81       	ld	r24, Z
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	8a 5f       	subi	r24, 0xFA	; 250
    157a:	9e 4f       	sbci	r25, 0xFE	; 254
    157c:	2c 81       	ldd	r18, Y+4	; 0x04
    157e:	3d 81       	ldd	r19, Y+5	; 0x05
    1580:	fc 01       	movw	r30, r24
    1582:	31 83       	std	Z+1, r19	; 0x01
    1584:	20 83       	st	Z, r18
		    }
		    return Loc_enuAdcStatus;
    1586:	89 81       	ldd	r24, Y+1	; 0x01
}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <__vector_16>:

// ISR function For ADC
void __vector_16(void) __attribute__((signal));

void __vector_16(void){
    1598:	1f 92       	push	r1
    159a:	0f 92       	push	r0
    159c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    15a0:	0f 92       	push	r0
    15a2:	11 24       	eor	r1, r1
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <__vector_16+0x2a>
    15c2:	1f 92       	push	r1
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62

	    u16 Loc_u16Result;
	    Adc_StatusErrorType Loc_enuAdcStatus  = ADC_STATUS_OK;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	89 83       	std	Y+1, r24	; 0x01

	    Loc_enuAdcStatus = Adc_GetResult(current_format,&Loc_u16Result);
    15cc:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <current_format>
    15d0:	ce 01       	movw	r24, r28
    15d2:	02 96       	adiw	r24, 0x02	; 2
    15d4:	bc 01       	movw	r22, r24
    15d6:	82 2f       	mov	r24, r18
    15d8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <Adc_GetResult>
    15dc:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL != Adc_InterruptHandlerArr[Global_AdcInterruptIndex]){
    15de:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Global_AdcInterruptIndex>
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	8a 5f       	subi	r24, 0xFA	; 250
    15ec:	9e 4f       	sbci	r25, 0xFE	; 254
    15ee:	fc 01       	movw	r30, r24
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	89 2b       	or	r24, r25
    15f6:	79 f0       	breq	.+30     	; 0x1616 <__vector_16+0x7e>
	        Adc_InterruptHandlerArr[Global_AdcInterruptIndex](Loc_u16Result);
    15f8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Global_AdcInterruptIndex>
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	8a 5f       	subi	r24, 0xFA	; 250
    1606:	9e 4f       	sbci	r25, 0xFE	; 254
    1608:	fc 01       	movw	r30, r24
    160a:	20 81       	ld	r18, Z
    160c:	31 81       	ldd	r19, Z+1	; 0x01
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	f9 01       	movw	r30, r18
    1614:	09 95       	icall
	    }
	    else {/* do nothing , error in declaration */ }

}
    1616:	00 00       	nop
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	ff 91       	pop	r31
    1624:	ef 91       	pop	r30
    1626:	bf 91       	pop	r27
    1628:	af 91       	pop	r26
    162a:	9f 91       	pop	r25
    162c:	8f 91       	pop	r24
    162e:	7f 91       	pop	r23
    1630:	6f 91       	pop	r22
    1632:	5f 91       	pop	r21
    1634:	4f 91       	pop	r20
    1636:	3f 91       	pop	r19
    1638:	2f 91       	pop	r18
    163a:	0f 90       	pop	r0
    163c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <Seven_Segment_WriteBCDConnection>:



/********************************** Software Interfaces Declarations *******************/

Seven_Segment_StatusErrorType  Seven_Segment_WriteBCDConnection(const Seven_Segment_BCDType* Address_Segment, u8 Copy_u8Value){
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	27 97       	sbiw	r28, 0x07	; 7
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	6f 83       	std	Y+7, r22	; 0x07

	Seven_Segment_StatusErrorType Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_OK;
    1660:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    1662:	1b 82       	std	Y+3, r1	; 0x03
	    u8 Loc_u8FinalBit = DIO_LOW;
    1664:	1c 82       	std	Y+4, r1	; 0x04
	    u8 Loc_u8Counter=ZERO_VALUE;
    1666:	1a 82       	std	Y+2, r1	; 0x02

	    if (NULL == Address_Segment  ){
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	89 2b       	or	r24, r25
    166e:	19 f4       	brne	.+6      	; 0x1676 <Seven_Segment_WriteBCDConnection+0x30>

	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	22 c0       	rjmp	.+68     	; 0x16ba <Seven_Segment_WriteBCDConnection+0x74>
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    1676:	1a 82       	std	Y+2, r1	; 0x02
    1678:	1d c0       	rjmp	.+58     	; 0x16b4 <Seven_Segment_WriteBCDConnection+0x6e>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
    167a:	8f 81       	ldd	r24, Y+7	; 0x07
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	2a 81       	ldd	r18, Y+2	; 0x02
    1682:	22 2f       	mov	r18, r18
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	02 c0       	rjmp	.+4      	; 0x168c <Seven_Segment_WriteBCDConnection+0x46>
    1688:	95 95       	asr	r25
    168a:	87 95       	ror	r24
    168c:	2a 95       	dec	r18
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <Seven_Segment_WriteBCDConnection+0x42>
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	8c 83       	std	Y+4, r24	; 0x04
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	2d 81       	ldd	r18, Y+5	; 0x05
    169c:	3e 81       	ldd	r19, Y+6	; 0x06
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	fc 01       	movw	r30, r24
    16a4:	80 81       	ld	r24, Z
    16a6:	6c 81       	ldd	r22, Y+4	; 0x04
    16a8:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    16ac:	8b 83       	std	Y+3, r24	; 0x03
	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	8a 83       	std	Y+2, r24	; 0x02
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	84 30       	cpi	r24, 0x04	; 4
    16b8:	00 f3       	brcs	.-64     	; 0x167a <Seven_Segment_WriteBCDConnection+0x34>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
	        }
	    }

	    return Loc_enuSegmentState;
    16ba:	89 81       	ldd	r24, Y+1	; 0x01

}
    16bc:	27 96       	adiw	r28, 0x07	; 7
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	08 95       	ret

000016ce <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	ef 97       	sbiw	r28, 0x3f	; 63
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	9f af       	std	Y+63, r25	; 0x3f
    16e4:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    16e6:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
    16e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ec:	89 2b       	or	r24, r25
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	0f c2       	rjmp	.+1054   	; 0x1b14 <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    16f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    16f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    16fa:	68 e3       	ldi	r22, 0x38	; 56
    16fc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a0 ea       	ldi	r26, 0xA0	; 160
    1708:	b0 e4       	ldi	r27, 0x40	; 64
    170a:	8a 83       	std	Y+2, r24	; 0x02
    170c:	9b 83       	std	Y+3, r25	; 0x03
    170e:	ac 83       	std	Y+4, r26	; 0x04
    1710:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a ef       	ldi	r20, 0xFA	; 250
    1718:	54 e4       	ldi	r21, 0x44	; 68
    171a:	6a 81       	ldd	r22, Y+2	; 0x02
    171c:	7b 81       	ldd	r23, Y+3	; 0x03
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8c ab       	std	Y+52, r24	; 0x34
    172c:	9d ab       	std	Y+53, r25	; 0x35
    172e:	ae ab       	std	Y+54, r26	; 0x36
    1730:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	6c a9       	ldd	r22, Y+52	; 0x34
    173c:	7d a9       	ldd	r23, Y+53	; 0x35
    173e:	8e a9       	ldd	r24, Y+54	; 0x36
    1740:	9f a9       	ldd	r25, Y+55	; 0x37
    1742:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	99 af       	std	Y+57, r25	; 0x39
    1750:	88 af       	std	Y+56, r24	; 0x38
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	6c a9       	ldd	r22, Y+52	; 0x34
    175e:	7d a9       	ldd	r23, Y+53	; 0x35
    1760:	8e a9       	ldd	r24, Y+54	; 0x36
    1762:	9f a9       	ldd	r25, Y+55	; 0x37
    1764:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	6a 81       	ldd	r22, Y+2	; 0x02
    1776:	7b 81       	ldd	r23, Y+3	; 0x03
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	99 af       	std	Y+57, r25	; 0x39
    1792:	88 af       	std	Y+56, r24	; 0x38
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <Lcd_4bit_enuInit+0xe6>
    1796:	88 ec       	ldi	r24, 0xC8	; 200
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9b af       	std	Y+59, r25	; 0x3b
    179c:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    179e:	8a ad       	ldd	r24, Y+58	; 0x3a
    17a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <Lcd_4bit_enuInit+0xd4>
    17a6:	9b af       	std	Y+59, r25	; 0x3b
    17a8:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	88 ad       	ldd	r24, Y+56	; 0x38
    17ac:	99 ad       	ldd	r25, Y+57	; 0x39
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	99 af       	std	Y+57, r25	; 0x39
    17b2:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	88 ad       	ldd	r24, Y+56	; 0x38
    17b6:	99 ad       	ldd	r25, Y+57	; 0x39
    17b8:	89 2b       	or	r24, r25
    17ba:	69 f7       	brne	.-38     	; 0x1796 <Lcd_4bit_enuInit+0xc8>
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	6c a9       	ldd	r22, Y+52	; 0x34
    17c0:	7d a9       	ldd	r23, Y+53	; 0x35
    17c2:	8e a9       	ldd	r24, Y+54	; 0x36
    17c4:	9f a9       	ldd	r25, Y+55	; 0x37
    17c6:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	99 af       	std	Y+57, r25	; 0x39
    17d0:	88 af       	std	Y+56, r24	; 0x38
    17d2:	88 ad       	ldd	r24, Y+56	; 0x38
    17d4:	99 ad       	ldd	r25, Y+57	; 0x39
    17d6:	9d af       	std	Y+61, r25	; 0x3d
    17d8:	8c af       	std	Y+60, r24	; 0x3c
    17da:	8c ad       	ldd	r24, Y+60	; 0x3c
    17dc:	9d ad       	ldd	r25, Y+61	; 0x3d
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <Lcd_4bit_enuInit+0x110>
    17e2:	9d af       	std	Y+61, r25	; 0x3d
    17e4:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    17e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    17e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    17ea:	68 e3       	ldi	r22, 0x38	; 56
    17ec:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a6 e1       	ldi	r26, 0x16	; 22
    17f8:	b3 e4       	ldi	r27, 0x43	; 67
    17fa:	8e 83       	std	Y+6, r24	; 0x06
    17fc:	9f 83       	std	Y+7, r25	; 0x07
    17fe:	a8 87       	std	Y+8, r26	; 0x08
    1800:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1802:	2b ea       	ldi	r18, 0xAB	; 171
    1804:	3a ea       	ldi	r19, 0xAA	; 170
    1806:	4a e2       	ldi	r20, 0x2A	; 42
    1808:	50 e4       	ldi	r21, 0x40	; 64
    180a:	6e 81       	ldd	r22, Y+6	; 0x06
    180c:	7f 81       	ldd	r23, Y+7	; 0x07
    180e:	88 85       	ldd	r24, Y+8	; 0x08
    1810:	99 85       	ldd	r25, Y+9	; 0x09
    1812:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	88 8f       	std	Y+24, r24	; 0x18
    181c:	99 8f       	std	Y+25, r25	; 0x19
    181e:	aa 8f       	std	Y+26, r26	; 0x1a
    1820:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1822:	8e 81       	ldd	r24, Y+6	; 0x06
    1824:	9f 81       	ldd	r25, Y+7	; 0x07
    1826:	a8 85       	ldd	r26, Y+8	; 0x08
    1828:	b9 85       	ldd	r27, Y+9	; 0x09
    182a:	9c 01       	movw	r18, r24
    182c:	ad 01       	movw	r20, r26
    182e:	bc 01       	movw	r22, r24
    1830:	cd 01       	movw	r24, r26
    1832:	0e 94 85 1a 	call	0x350a	; 0x350a <__addsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	8c 8f       	std	Y+28, r24	; 0x1c
    183c:	9d 8f       	std	Y+29, r25	; 0x1d
    183e:	ae 8f       	std	Y+30, r26	; 0x1e
    1840:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	68 8d       	ldd	r22, Y+24	; 0x18
    184c:	79 8d       	ldd	r23, Y+25	; 0x19
    184e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1850:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1852:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    1856:	88 23       	and	r24, r24
    1858:	1c f4       	brge	.+6      	; 0x1860 <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	88 a3       	std	Y+32, r24	; 0x20
    185e:	b2 c0       	rjmp	.+356    	; 0x19c4 <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	4f e7       	ldi	r20, 0x7F	; 127
    1866:	57 e4       	ldi	r21, 0x47	; 71
    1868:	6c 8d       	ldd	r22, Y+28	; 0x1c
    186a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    186c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    186e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1870:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    1874:	18 16       	cp	r1, r24
    1876:	0c f0       	brlt	.+2      	; 0x187a <Lcd_4bit_enuInit+0x1ac>
    1878:	7b c0       	rjmp	.+246    	; 0x1970 <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	4a e7       	ldi	r20, 0x7A	; 122
    1880:	54 e4       	ldi	r21, 0x44	; 68
    1882:	6e 81       	ldd	r22, Y+6	; 0x06
    1884:	7f 81       	ldd	r23, Y+7	; 0x07
    1886:	88 85       	ldd	r24, Y+8	; 0x08
    1888:	99 85       	ldd	r25, Y+9	; 0x09
    188a:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__divsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	89 a3       	std	Y+33, r24	; 0x21
    1894:	9a a3       	std	Y+34, r25	; 0x22
    1896:	ab a3       	std	Y+35, r26	; 0x23
    1898:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	69 a1       	ldd	r22, Y+33	; 0x21
    18a4:	7a a1       	ldd	r23, Y+34	; 0x22
    18a6:	8b a1       	ldd	r24, Y+35	; 0x23
    18a8:	9c a1       	ldd	r25, Y+36	; 0x24
    18aa:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	8d a3       	std	Y+37, r24	; 0x25
    18b4:	9e a3       	std	Y+38, r25	; 0x26
    18b6:	af a3       	std	Y+39, r26	; 0x27
    18b8:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	6d a1       	ldd	r22, Y+37	; 0x25
    18c4:	7e a1       	ldd	r23, Y+38	; 0x26
    18c6:	8f a1       	ldd	r24, Y+39	; 0x27
    18c8:	98 a5       	ldd	r25, Y+40	; 0x28
    18ca:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9a a7       	std	Y+42, r25	; 0x2a
    18d8:	89 a7       	std	Y+41, r24	; 0x29
    18da:	3f c0       	rjmp	.+126    	; 0x195a <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	6d a1       	ldd	r22, Y+37	; 0x25
    18e6:	7e a1       	ldd	r23, Y+38	; 0x26
    18e8:	8f a1       	ldd	r24, Y+39	; 0x27
    18ea:	98 a5       	ldd	r25, Y+40	; 0x28
    18ec:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	69 a1       	ldd	r22, Y+33	; 0x21
    18fe:	7a a1       	ldd	r23, Y+34	; 0x22
    1900:	8b a1       	ldd	r24, Y+35	; 0x23
    1902:	9c a1       	ldd	r25, Y+36	; 0x24
    1904:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9a a7       	std	Y+42, r25	; 0x2a
    191a:	89 a7       	std	Y+41, r24	; 0x29
    191c:	0f c0       	rjmp	.+30     	; 0x193c <Lcd_4bit_enuInit+0x26e>
    191e:	88 ec       	ldi	r24, 0xC8	; 200
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9c a7       	std	Y+44, r25	; 0x2c
    1924:	8b a7       	std	Y+43, r24	; 0x2b
    1926:	8b a5       	ldd	r24, Y+43	; 0x2b
    1928:	9c a5       	ldd	r25, Y+44	; 0x2c
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <Lcd_4bit_enuInit+0x25c>
    192e:	9c a7       	std	Y+44, r25	; 0x2c
    1930:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	89 a5       	ldd	r24, Y+41	; 0x29
    1934:	9a a5       	ldd	r25, Y+42	; 0x2a
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	9a a7       	std	Y+42, r25	; 0x2a
    193a:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	89 a5       	ldd	r24, Y+41	; 0x29
    193e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1940:	89 2b       	or	r24, r25
    1942:	69 f7       	brne	.-38     	; 0x191e <Lcd_4bit_enuInit+0x250>
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	6d a1       	ldd	r22, Y+37	; 0x25
    1948:	7e a1       	ldd	r23, Y+38	; 0x26
    194a:	8f a1       	ldd	r24, Y+39	; 0x27
    194c:	98 a5       	ldd	r25, Y+40	; 0x28
    194e:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9a a7       	std	Y+42, r25	; 0x2a
    1958:	89 a7       	std	Y+41, r24	; 0x29
    195a:	89 a5       	ldd	r24, Y+41	; 0x29
    195c:	9a a5       	ldd	r25, Y+42	; 0x2a
    195e:	9e a7       	std	Y+46, r25	; 0x2e
    1960:	8d a7       	std	Y+45, r24	; 0x2d
    1962:	8d a5       	ldd	r24, Y+45	; 0x2d
    1964:	9e a5       	ldd	r25, Y+46	; 0x2e
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <Lcd_4bit_enuInit+0x298>
    196a:	9e a7       	std	Y+46, r25	; 0x2e
    196c:	8d a7       	std	Y+45, r24	; 0x2d
    196e:	2a c0       	rjmp	.+84     	; 0x19c4 <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	53 e4       	ldi	r21, 0x43	; 67
    1978:	68 8d       	ldd	r22, Y+24	; 0x18
    197a:	79 8d       	ldd	r23, Y+25	; 0x19
    197c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    197e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1980:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    1984:	18 16       	cp	r1, r24
    1986:	ac f4       	brge	.+42     	; 0x19b2 <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1988:	6c 8d       	ldd	r22, Y+28	; 0x1c
    198a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    198c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    198e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1990:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	98 ab       	std	Y+48, r25	; 0x30
    199a:	8f a7       	std	Y+47, r24	; 0x2f
    199c:	8f a5       	ldd	r24, Y+47	; 0x2f
    199e:	98 a9       	ldd	r25, Y+48	; 0x30
    19a0:	9a ab       	std	Y+50, r25	; 0x32
    19a2:	89 ab       	std	Y+49, r24	; 0x31
    19a4:	89 a9       	ldd	r24, Y+49	; 0x31
    19a6:	9a a9       	ldd	r25, Y+50	; 0x32
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <Lcd_4bit_enuInit+0x2da>
    19ac:	9a ab       	std	Y+50, r25	; 0x32
    19ae:	89 ab       	std	Y+49, r24	; 0x31
    19b0:	0f c0       	rjmp	.+30     	; 0x19d0 <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19b2:	68 8d       	ldd	r22, Y+24	; 0x18
    19b4:	79 8d       	ldd	r23, Y+25	; 0x19
    19b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19ba:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	88 a3       	std	Y+32, r24	; 0x20
    19c4:	88 a1       	ldd	r24, Y+32	; 0x20
    19c6:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19c8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ca:	8a 95       	dec	r24
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <Lcd_4bit_enuInit+0x2fc>
    19ce:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    19d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    19d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    19d4:	68 e3       	ldi	r22, 0x38	; 56
    19d6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    19da:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    19dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    19de:	9f ad       	ldd	r25, Y+63	; 0x3f
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    19e6:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    19e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    19ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    19ec:	62 e0       	ldi	r22, 0x02	; 2
    19ee:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    19f2:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    19f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    19f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    19f8:	66 e0       	ldi	r22, 0x06	; 6
    19fa:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    19fe:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    1a00:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a02:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a04:	6c e0       	ldi	r22, 0x0C	; 12
    1a06:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1a0a:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    1a0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a10:	68 e2       	ldi	r22, 0x28	; 40
    1a12:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1a16:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    1a18:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a1c:	60 e8       	ldi	r22, 0x80	; 128
    1a1e:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1a22:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    1a24:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a26:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a0 ea       	ldi	r26, 0xA0	; 160
    1a36:	b0 e4       	ldi	r27, 0x40	; 64
    1a38:	8a 87       	std	Y+10, r24	; 0x0a
    1a3a:	9b 87       	std	Y+11, r25	; 0x0b
    1a3c:	ac 87       	std	Y+12, r26	; 0x0c
    1a3e:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a ef       	ldi	r20, 0xFA	; 250
    1a46:	54 e4       	ldi	r21, 0x44	; 68
    1a48:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a4a:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a50:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	8e 87       	std	Y+14, r24	; 0x0e
    1a5a:	9f 87       	std	Y+15, r25	; 0x0f
    1a5c:	a8 8b       	std	Y+16, r26	; 0x10
    1a5e:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a6a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a6c:	88 89       	ldd	r24, Y+16	; 0x10
    1a6e:	99 89       	ldd	r25, Y+17	; 0x11
    1a70:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9b 8b       	std	Y+19, r25	; 0x13
    1a7e:	8a 8b       	std	Y+18, r24	; 0x12
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a8c:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a8e:	88 89       	ldd	r24, Y+16	; 0x10
    1a90:	99 89       	ldd	r25, Y+17	; 0x11
    1a92:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	4c f5       	brge	.+82     	; 0x1aec <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	6a 85       	ldd	r22, Y+10	; 0x0a
    1aa4:	7b 85       	ldd	r23, Y+11	; 0x0b
    1aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1aa8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aaa:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9b 8b       	std	Y+19, r25	; 0x13
    1ac0:	8a 8b       	std	Y+18, r24	; 0x12
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <Lcd_4bit_enuInit+0x414>
    1ac4:	88 ec       	ldi	r24, 0xC8	; 200
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	9d 8b       	std	Y+21, r25	; 0x15
    1aca:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1acc:	8c 89       	ldd	r24, Y+20	; 0x14
    1ace:	9d 89       	ldd	r25, Y+21	; 0x15
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <Lcd_4bit_enuInit+0x402>
    1ad4:	9d 8b       	std	Y+21, r25	; 0x15
    1ad6:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	8a 89       	ldd	r24, Y+18	; 0x12
    1ada:	9b 89       	ldd	r25, Y+19	; 0x13
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9b 8b       	std	Y+19, r25	; 0x13
    1ae0:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae4:	9b 89       	ldd	r25, Y+19	; 0x13
    1ae6:	89 2b       	or	r24, r25
    1ae8:	69 f7       	brne	.-38     	; 0x1ac4 <Lcd_4bit_enuInit+0x3f6>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	6e 85       	ldd	r22, Y+14	; 0x0e
    1aee:	7f 85       	ldd	r23, Y+15	; 0x0f
    1af0:	88 89       	ldd	r24, Y+16	; 0x10
    1af2:	99 89       	ldd	r25, Y+17	; 0x11
    1af4:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9b 8b       	std	Y+19, r25	; 0x13
    1afe:	8a 8b       	std	Y+18, r24	; 0x12
    1b00:	8a 89       	ldd	r24, Y+18	; 0x12
    1b02:	9b 89       	ldd	r25, Y+19	; 0x13
    1b04:	9f 8b       	std	Y+23, r25	; 0x17
    1b06:	8e 8b       	std	Y+22, r24	; 0x16
    1b08:	8e 89       	ldd	r24, Y+22	; 0x16
    1b0a:	9f 89       	ldd	r25, Y+23	; 0x17
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <Lcd_4bit_enuInit+0x43e>
    1b10:	9f 8b       	std	Y+23, r25	; 0x17
    1b12:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b16:	ef 96       	adiw	r28, 0x3f	; 63
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <Lcd_4bit_enuSendCommand+0x6>
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <Lcd_4bit_enuSendCommand+0x8>
    1b30:	1f 92       	push	r1
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	9c 83       	std	Y+4, r25	; 0x04
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1b3c:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    1b3e:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	89 2b       	or	r24, r25
    1b46:	19 f4       	brne	.+6      	; 0x1b4e <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1b48:	82 e0       	ldi	r24, 0x02	; 2
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	22 c0       	rjmp	.+68     	; 0x1b92 <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	fc 01       	movw	r30, r24
    1b54:	84 81       	ldd	r24, Z+4	; 0x04
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	28 2f       	mov	r18, r24
    1b62:	22 95       	swap	r18
    1b64:	2f 70       	andi	r18, 0x0F	; 15
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	62 2f       	mov	r22, r18
    1b6c:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_4bit_enuSet4BitsOnPins>
    1b70:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	0e 94 4b 10 	call	0x2096	; 0x2096 <Lcd_4bit_enuSendEnableSignal>
    1b7a:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	6d 81       	ldd	r22, Y+5	; 0x05
    1b82:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_4bit_enuSet4BitsOnPins>
    1b86:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	0e 94 4b 10 	call	0x2096	; 0x2096 <Lcd_4bit_enuSendEnableSignal>
    1b90:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    1b92:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	08 95       	ret

00001ba4 <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <Lcd_4bit_enuDisplayCharacter+0x6>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <Lcd_4bit_enuDisplayCharacter+0x8>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	9b 83       	std	Y+3, r25	; 0x03
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
    1bb4:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1bb6:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbc:	89 2b       	or	r24, r25
    1bbe:	19 f4       	brne	.+6      	; 0x1bc6 <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	22 c0       	rjmp	.+68     	; 0x1c0a <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	fc 01       	movw	r30, r24
    1bcc:	84 81       	ldd	r24, Z+4	; 0x04
    1bce:	61 e0       	ldi	r22, 0x01	; 1
    1bd0:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    1bd4:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    1bd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd8:	28 2f       	mov	r18, r24
    1bda:	22 95       	swap	r18
    1bdc:	2f 70       	andi	r18, 0x0F	; 15
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	9b 81       	ldd	r25, Y+3	; 0x03
    1be2:	62 2f       	mov	r22, r18
    1be4:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_4bit_enuSet4BitsOnPins>
    1be8:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	0e 94 4b 10 	call	0x2096	; 0x2096 <Lcd_4bit_enuSendEnableSignal>
    1bf2:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	6c 81       	ldd	r22, Y+4	; 0x04
    1bfa:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_4bit_enuSet4BitsOnPins>
    1bfe:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	9b 81       	ldd	r25, Y+3	; 0x03
    1c04:	0e 94 4b 10 	call	0x2096	; 0x2096 <Lcd_4bit_enuSendEnableSignal>
    1c08:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	9b 83       	std	Y+3, r25	; 0x03
    1c2a:	8a 83       	std	Y+2, r24	; 0x02
    1c2c:	6c 83       	std	Y+4, r22	; 0x04
    1c2e:	4d 83       	std	Y+5, r20	; 0x05
    1c30:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1c32:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	89 2b       	or	r24, r25
    1c3a:	19 f4       	brne	.+6      	; 0x1c42 <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	29 c0       	rjmp	.+82     	; 0x1c94 <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	9b 81       	ldd	r25, Y+3	; 0x03
    1c46:	4e 81       	ldd	r20, Y+6	; 0x06
    1c48:	6d 81       	ldd	r22, Y+5	; 0x05
    1c4a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <Lcd_4bit_enuGoToXY>
    1c4e:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	9b 81       	ldd	r25, Y+3	; 0x03
    1c54:	fc 01       	movw	r30, r24
    1c56:	84 81       	ldd	r24, Z+4	; 0x04
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	28 2f       	mov	r18, r24
    1c64:	22 95       	swap	r18
    1c66:	2f 70       	andi	r18, 0x0F	; 15
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6c:	62 2f       	mov	r22, r18
    1c6e:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_4bit_enuSet4BitsOnPins>
    1c72:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	9b 81       	ldd	r25, Y+3	; 0x03
    1c78:	0e 94 4b 10 	call	0x2096	; 0x2096 <Lcd_4bit_enuSendEnableSignal>
    1c7c:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	6c 81       	ldd	r22, Y+4	; 0x04
    1c84:	0e 94 0d 10 	call	0x201a	; 0x201a <Lcd_4bit_enuSet4BitsOnPins>
    1c88:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	0e 94 4b 10 	call	0x2096	; 0x2096 <Lcd_4bit_enuSendEnableSignal>
    1c92:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c96:	26 96       	adiw	r28, 0x06	; 6
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <Lcd_4bit_enuCreateCustomCharacter>:


Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	27 97       	sbiw	r28, 0x07	; 7
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	9c 83       	std	Y+4, r25	; 0x04
    1cbe:	8b 83       	std	Y+3, r24	; 0x03
    1cc0:	7e 83       	std	Y+6, r23	; 0x06
    1cc2:	6d 83       	std	Y+5, r22	; 0x05
    1cc4:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1cc6:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    1cc8:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	89 2b       	or	r24, r25
    1cd0:	21 f0       	breq	.+8      	; 0x1cda <Lcd_4bit_enuCreateCustomCharacter+0x32>
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	89 2b       	or	r24, r25
    1cd8:	19 f4       	brne	.+6      	; 0x1ce0 <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	30 c0       	rjmp	.+96     	; 0x1d40 <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    1ce0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce2:	88 30       	cpi	r24, 0x08	; 8
    1ce4:	18 f0       	brcs	.+6      	; 0x1cec <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	2a c0       	rjmp	.+84     	; 0x1d40 <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    1cec:	8f 81       	ldd	r24, Y+7	; 0x07
    1cee:	88 2f       	mov	r24, r24
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	08 96       	adiw	r24, 0x08	; 8
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	22 0f       	add	r18, r18
    1cf8:	22 0f       	add	r18, r18
    1cfa:	22 0f       	add	r18, r18
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	62 2f       	mov	r22, r18
    1d02:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1d06:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    1d08:	1a 82       	std	Y+2, r1	; 0x02
    1d0a:	11 c0       	rjmp	.+34     	; 0x1d2e <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	2d 81       	ldd	r18, Y+5	; 0x05
    1d14:	3e 81       	ldd	r19, Y+6	; 0x06
    1d16:	82 0f       	add	r24, r18
    1d18:	93 1f       	adc	r25, r19
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 81       	ld	r18, Z
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	62 2f       	mov	r22, r18
    1d24:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	88 30       	cpi	r24, 0x08	; 8
    1d32:	60 f3       	brcs	.-40     	; 0x1d0c <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	60 e8       	ldi	r22, 0x80	; 128
    1d3a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1d3e:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1d40:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d42:	27 96       	adiw	r28, 0x07	; 7
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	08 95       	ret

00001d54 <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <Lcd_4bit_enuGoToXY+0x6>
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <Lcd_4bit_enuGoToXY+0x8>
    1d5c:	1f 92       	push	r1
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	9b 83       	std	Y+3, r25	; 0x03
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    1d66:	6c 83       	std	Y+4, r22	; 0x04
    1d68:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	89 2b       	or	r24, r25
    1d72:	19 f4       	brne	.+6      	; 0x1d7a <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	56 c0       	rjmp	.+172    	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	85 30       	cpi	r24, 0x05	; 5
    1d7e:	18 f0       	brcs	.+6      	; 0x1d86 <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    1d80:	85 e0       	ldi	r24, 0x05	; 5
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	50 c0       	rjmp	.+160    	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	85 31       	cpi	r24, 0x15	; 21
    1d8a:	18 f0       	brcs	.+6      	; 0x1d92 <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    1d8c:	84 e0       	ldi	r24, 0x04	; 4
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	4a c0       	rjmp	.+148    	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	81 50       	subi	r24, 0x01	; 1
    1d96:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    1d98:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	82 30       	cpi	r24, 0x02	; 2
    1da0:	91 05       	cpc	r25, r1
    1da2:	c9 f0       	breq	.+50     	; 0x1dd6 <Lcd_4bit_enuGoToXY+0x82>
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	1c f4       	brge	.+6      	; 0x1db0 <Lcd_4bit_enuGoToXY+0x5c>
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	39 f0       	breq	.+14     	; 0x1dbc <Lcd_4bit_enuGoToXY+0x68>
    1dae:	3a c0       	rjmp	.+116    	; 0x1e24 <Lcd_4bit_enuGoToXY+0xd0>
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	91 05       	cpc	r25, r1
    1db4:	e9 f0       	breq	.+58     	; 0x1df0 <Lcd_4bit_enuGoToXY+0x9c>
    1db6:	04 97       	sbiw	r24, 0x04	; 4
    1db8:	41 f1       	breq	.+80     	; 0x1e0a <Lcd_4bit_enuGoToXY+0xb6>
    1dba:	34 c0       	rjmp	.+104    	; 0x1e24 <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	20 e8       	ldi	r18, 0x80	; 128
    1dc0:	28 0f       	add	r18, r24
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	62 2f       	mov	r22, r18
    1dc8:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1dcc:	98 2f       	mov	r25, r24
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	89 23       	and	r24, r25
    1dd2:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1dd4:	28 c0       	rjmp	.+80     	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	20 ec       	ldi	r18, 0xC0	; 192
    1dda:	28 0f       	add	r18, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
    1de0:	62 2f       	mov	r22, r18
    1de2:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1de6:	98 2f       	mov	r25, r24
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	89 23       	and	r24, r25
    1dec:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1dee:	1b c0       	rjmp	.+54     	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	24 e9       	ldi	r18, 0x94	; 148
    1df4:	28 0f       	add	r18, r24
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	62 2f       	mov	r22, r18
    1dfc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1e00:	98 2f       	mov	r25, r24
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	89 23       	and	r24, r25
    1e06:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1e08:	0e c0       	rjmp	.+28     	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	24 ed       	ldi	r18, 0xD4	; 212
    1e0e:	28 0f       	add	r18, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	62 2f       	mov	r22, r18
    1e16:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    1e1a:	98 2f       	mov	r25, r24
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	89 23       	and	r24, r25
    1e20:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    1e24:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	08 95       	ret

00001e38 <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <Lcd_4bit_enuDisplayString+0x6>
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <Lcd_4bit_enuDisplayString+0x8>
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <Lcd_4bit_enuDisplayString+0xa>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	7e 83       	std	Y+6, r23	; 0x06
    1e4c:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1e4e:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    1e50:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	89 2b       	or	r24, r25
    1e58:	21 f0       	breq	.+8      	; 0x1e62 <Lcd_4bit_enuDisplayString+0x2a>
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	89 2b       	or	r24, r25
    1e60:	a9 f4       	brne	.+42     	; 0x1e8c <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	1d c0       	rjmp	.+58     	; 0x1ea2 <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e70:	3e 81       	ldd	r19, Y+6	; 0x06
    1e72:	82 0f       	add	r24, r18
    1e74:	93 1f       	adc	r25, r19
    1e76:	fc 01       	movw	r30, r24
    1e78:	20 81       	ld	r18, Z
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	62 2f       	mov	r22, r18
    1e80:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Lcd_4bit_enuDisplayCharacter>
    1e84:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	88 2f       	mov	r24, r24
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	2d 81       	ldd	r18, Y+5	; 0x05
    1e94:	3e 81       	ldd	r19, Y+6	; 0x06
    1e96:	82 0f       	add	r24, r18
    1e98:	93 1f       	adc	r25, r19
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	80 81       	ld	r24, Z
    1e9e:	88 23       	and	r24, r24
    1ea0:	19 f7       	brne	.-58     	; 0x1e68 <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ea4:	26 96       	adiw	r28, 0x06	; 6
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	08 95       	ret

00001eb6 <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number){
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	cc 56       	subi	r28, 0x6C	; 108
    1ec0:	d1 09       	sbc	r29, r1
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	9e 01       	movw	r18, r28
    1ece:	29 59       	subi	r18, 0x99	; 153
    1ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed2:	f9 01       	movw	r30, r18
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
    1ed8:	ce 01       	movw	r24, r28
    1eda:	87 59       	subi	r24, 0x97	; 151
    1edc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ede:	fc 01       	movw	r30, r24
    1ee0:	40 83       	st	Z, r20
    1ee2:	51 83       	std	Z+1, r21	; 0x01
    1ee4:	62 83       	std	Z+2, r22	; 0x02
    1ee6:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1ee8:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    1eea:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    1eec:	ce 01       	movw	r24, r28
    1eee:	89 59       	subi	r24, 0x99	; 153
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	80 81       	ld	r24, Z
    1ef6:	91 81       	ldd	r25, Z+1	; 0x01
    1ef8:	89 2b       	or	r24, r25
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <Lcd_4bit_enuDisplayNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	1e c0       	rjmp	.+60     	; 0x1f3e <Lcd_4bit_enuDisplayNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    1f02:	9e 01       	movw	r18, r28
    1f04:	2d 5f       	subi	r18, 0xFD	; 253
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	ce 01       	movw	r24, r28
    1f0a:	87 59       	subi	r24, 0x97	; 151
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	fc 01       	movw	r30, r24
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	a2 81       	ldd	r26, Z+2	; 0x02
    1f16:	b3 81       	ldd	r27, Z+3	; 0x03
    1f18:	a9 01       	movw	r20, r18
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <Convert_IntToString>
    1f22:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    1f24:	9e 01       	movw	r18, r28
    1f26:	2d 5f       	subi	r18, 0xFD	; 253
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	89 59       	subi	r24, 0x99	; 153
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	fc 01       	movw	r30, r24
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	b9 01       	movw	r22, r18
    1f38:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <Lcd_4bit_enuDisplayString>
    1f3c:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1f40:	c4 59       	subi	r28, 0x94	; 148
    1f42:	df 4f       	sbci	r29, 0xFF	; 255
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <Lcd_4bit_enuDisplayFloatNumber>:


#include <stdio.h>
#include <stdlib.h>

Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f32 Copy_f32Number){
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	cc 56       	subi	r28, 0x6C	; 108
    1f5e:	d1 09       	sbc	r29, r1
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	9e 01       	movw	r18, r28
    1f6c:	29 59       	subi	r18, 0x99	; 153
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	f9 01       	movw	r30, r18
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	ce 01       	movw	r24, r28
    1f78:	87 59       	subi	r24, 0x97	; 151
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	40 83       	st	Z, r20
    1f80:	51 83       	std	Z+1, r21	; 0x01
    1f82:	62 83       	std	Z+2, r22	; 0x02
    1f84:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1f86:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    1f88:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	89 59       	subi	r24, 0x99	; 153
    1f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f90:	fc 01       	movw	r30, r24
    1f92:	80 81       	ld	r24, Z
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	89 2b       	or	r24, r25
    1f98:	19 f4       	brne	.+6      	; 0x1fa0 <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	32 c0       	rjmp	.+100    	; 0x2004 <Lcd_4bit_enuDisplayFloatNumber+0xb0>
		}
		else{

//			Loc_enuStdStatus= Convert_FloatToString(Copy_f32Number, Loc_u8ConvertedNumberInArray);
//			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
			sprintf(Loc_u8ConvertedNumberInArray,"%g",Copy_f32Number);
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	87 59       	subi	r24, 0x97	; 151
    1fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	23 81       	ldd	r18, Z+3	; 0x03
    1faa:	2f 93       	push	r18
    1fac:	fc 01       	movw	r30, r24
    1fae:	22 81       	ldd	r18, Z+2	; 0x02
    1fb0:	2f 93       	push	r18
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	21 81       	ldd	r18, Z+1	; 0x01
    1fb6:	2f 93       	push	r18
    1fb8:	fc 01       	movw	r30, r24
    1fba:	80 81       	ld	r24, Z
    1fbc:	8f 93       	push	r24
    1fbe:	82 ee       	ldi	r24, 0xE2	; 226
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	89 2f       	mov	r24, r25
    1fc4:	8f 93       	push	r24
    1fc6:	82 ee       	ldi	r24, 0xE2	; 226
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	8f 93       	push	r24
    1fcc:	ce 01       	movw	r24, r28
    1fce:	03 96       	adiw	r24, 0x03	; 3
    1fd0:	29 2f       	mov	r18, r25
    1fd2:	2f 93       	push	r18
    1fd4:	8f 93       	push	r24
    1fd6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <sprintf>
    1fda:	8d b7       	in	r24, 0x3d	; 61
    1fdc:	9e b7       	in	r25, 0x3e	; 62
    1fde:	08 96       	adiw	r24, 0x08	; 8
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
						Loc_enuStatus = Lcd_4bit_enuDisplayCharacterWithPosition(Address_Lcd, Loc_u8ConvertedNumberInArray[0], 1, 2);
    1fea:	3b 81       	ldd	r19, Y+3	; 0x03
    1fec:	ce 01       	movw	r24, r28
    1fee:	89 59       	subi	r24, 0x99	; 153
    1ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	22 e0       	ldi	r18, 0x02	; 2
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	63 2f       	mov	r22, r19
    1ffe:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    2002:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    2004:	89 81       	ldd	r24, Y+1	; 0x01

}
    2006:	c4 59       	subi	r28, 0x94	; 148
    2008:	df 4f       	sbci	r29, 0xFF	; 255
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	00 d0       	rcall	.+0      	; 0x2020 <Lcd_4bit_enuSet4BitsOnPins+0x6>
    2020:	00 d0       	rcall	.+0      	; 0x2022 <Lcd_4bit_enuSet4BitsOnPins+0x8>
    2022:	1f 92       	push	r1
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
    202c:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    202e:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    2030:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	89 2b       	or	r24, r25
    2038:	19 f4       	brne	.+6      	; 0x2040 <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    203a:	82 e0       	ldi	r24, 0x02	; 2
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	22 c0       	rjmp	.+68     	; 0x2084 <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2040:	1a 82       	std	Y+2, r1	; 0x02
    2042:	1d c0       	rjmp	.+58     	; 0x207e <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	2a 81       	ldd	r18, Y+2	; 0x02
    204c:	22 2f       	mov	r18, r18
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    2052:	95 95       	asr	r25
    2054:	87 95       	ror	r24
    2056:	2a 95       	dec	r18
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <Lcd_4bit_enuSet4BitsOnPins+0x38>
    205a:	48 2f       	mov	r20, r24
    205c:	41 70       	andi	r20, 0x01	; 1
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	2b 81       	ldd	r18, Y+3	; 0x03
    2066:	3c 81       	ldd	r19, Y+4	; 0x04
    2068:	82 0f       	add	r24, r18
    206a:	93 1f       	adc	r25, r19
    206c:	fc 01       	movw	r30, r24
    206e:	80 81       	ld	r24, Z
    2070:	64 2f       	mov	r22, r20
    2072:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    2076:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	8f 5f       	subi	r24, 0xFF	; 255
    207c:	8a 83       	std	Y+2, r24	; 0x02
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	00 f3       	brcs	.-64     	; 0x2044 <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    2084:	89 81       	ldd	r24, Y+1	; 0x01

}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	08 95       	ret

00002096 <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	a3 97       	sbiw	r28, 0x23	; 35
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	9b a3       	std	Y+35, r25	; 0x23
    20ac:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    20ae:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    20b0:	8a a1       	ldd	r24, Y+34	; 0x22
    20b2:	9b a1       	ldd	r25, Y+35	; 0x23
    20b4:	89 2b       	or	r24, r25
    20b6:	19 f4       	brne	.+6      	; 0x20be <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	ff c0       	rjmp	.+510    	; 0x22bc <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    20be:	8a a1       	ldd	r24, Y+34	; 0x22
    20c0:	9b a1       	ldd	r25, Y+35	; 0x23
    20c2:	fc 01       	movw	r30, r24
    20c4:	85 81       	ldd	r24, Z+5	; 0x05
    20c6:	61 e0       	ldi	r22, 0x01	; 1
    20c8:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a0 ea       	ldi	r26, 0xA0	; 160
    20d4:	b0 e4       	ldi	r27, 0x40	; 64
    20d6:	8a 83       	std	Y+2, r24	; 0x02
    20d8:	9b 83       	std	Y+3, r25	; 0x03
    20da:	ac 83       	std	Y+4, r26	; 0x04
    20dc:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    20de:	2b ea       	ldi	r18, 0xAB	; 171
    20e0:	3a ea       	ldi	r19, 0xAA	; 170
    20e2:	4a e2       	ldi	r20, 0x2A	; 42
    20e4:	50 e4       	ldi	r21, 0x40	; 64
    20e6:	6a 81       	ldd	r22, Y+2	; 0x02
    20e8:	7b 81       	ldd	r23, Y+3	; 0x03
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	9d 81       	ldd	r25, Y+5	; 0x05
    20ee:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8e 83       	std	Y+6, r24	; 0x06
    20f8:	9f 83       	std	Y+7, r25	; 0x07
    20fa:	a8 87       	std	Y+8, r26	; 0x08
    20fc:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	ac 81       	ldd	r26, Y+4	; 0x04
    2104:	bd 81       	ldd	r27, Y+5	; 0x05
    2106:	9c 01       	movw	r18, r24
    2108:	ad 01       	movw	r20, r26
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 85 1a 	call	0x350a	; 0x350a <__addsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8a 87       	std	Y+10, r24	; 0x0a
    2118:	9b 87       	std	Y+11, r25	; 0x0b
    211a:	ac 87       	std	Y+12, r26	; 0x0c
    211c:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	6e 81       	ldd	r22, Y+6	; 0x06
    2128:	7f 81       	ldd	r23, Y+7	; 0x07
    212a:	88 85       	ldd	r24, Y+8	; 0x08
    212c:	99 85       	ldd	r25, Y+9	; 0x09
    212e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    2132:	88 23       	and	r24, r24
    2134:	1c f4       	brge	.+6      	; 0x213c <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	8e 87       	std	Y+14, r24	; 0x0e
    213a:	b2 c0       	rjmp	.+356    	; 0x22a0 <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	6a 85       	ldd	r22, Y+10	; 0x0a
    2146:	7b 85       	ldd	r23, Y+11	; 0x0b
    2148:	8c 85       	ldd	r24, Y+12	; 0x0c
    214a:	9d 85       	ldd	r25, Y+13	; 0x0d
    214c:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    2150:	18 16       	cp	r1, r24
    2152:	0c f0       	brlt	.+2      	; 0x2156 <Lcd_4bit_enuSendEnableSignal+0xc0>
    2154:	7b c0       	rjmp	.+246    	; 0x224c <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4a e7       	ldi	r20, 0x7A	; 122
    215c:	54 e4       	ldi	r21, 0x44	; 68
    215e:	6a 81       	ldd	r22, Y+2	; 0x02
    2160:	7b 81       	ldd	r23, Y+3	; 0x03
    2162:	8c 81       	ldd	r24, Y+4	; 0x04
    2164:	9d 81       	ldd	r25, Y+5	; 0x05
    2166:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__divsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	8f 87       	std	Y+15, r24	; 0x0f
    2170:	98 8b       	std	Y+16, r25	; 0x10
    2172:	a9 8b       	std	Y+17, r26	; 0x11
    2174:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a ef       	ldi	r20, 0xFA	; 250
    217c:	54 e4       	ldi	r21, 0x44	; 68
    217e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2180:	78 89       	ldd	r23, Y+16	; 0x10
    2182:	89 89       	ldd	r24, Y+17	; 0x11
    2184:	9a 89       	ldd	r25, Y+18	; 0x12
    2186:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	8b 8b       	std	Y+19, r24	; 0x13
    2190:	9c 8b       	std	Y+20, r25	; 0x14
    2192:	ad 8b       	std	Y+21, r26	; 0x15
    2194:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	6b 89       	ldd	r22, Y+19	; 0x13
    21a0:	7c 89       	ldd	r23, Y+20	; 0x14
    21a2:	8d 89       	ldd	r24, Y+21	; 0x15
    21a4:	9e 89       	ldd	r25, Y+22	; 0x16
    21a6:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	2c f4       	brge	.+10     	; 0x21b8 <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	98 8f       	std	Y+24, r25	; 0x18
    21b4:	8f 8b       	std	Y+23, r24	; 0x17
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	6b 89       	ldd	r22, Y+19	; 0x13
    21c2:	7c 89       	ldd	r23, Y+20	; 0x14
    21c4:	8d 89       	ldd	r24, Y+21	; 0x15
    21c6:	9e 89       	ldd	r25, Y+22	; 0x16
    21c8:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	4c f5       	brge	.+82     	; 0x2222 <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e2       	ldi	r20, 0x20	; 32
    21d6:	51 e4       	ldi	r21, 0x41	; 65
    21d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    21da:	78 89       	ldd	r23, Y+16	; 0x10
    21dc:	89 89       	ldd	r24, Y+17	; 0x11
    21de:	9a 89       	ldd	r25, Y+18	; 0x12
    21e0:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	98 8f       	std	Y+24, r25	; 0x18
    21f6:	8f 8b       	std	Y+23, r24	; 0x17
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <Lcd_4bit_enuSendEnableSignal+0x182>
    21fa:	88 ec       	ldi	r24, 0xC8	; 200
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2200:	89 8f       	std	Y+25, r24	; 0x19
    2202:	89 8d       	ldd	r24, Y+25	; 0x19
    2204:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <Lcd_4bit_enuSendEnableSignal+0x170>
    220a:	9a 8f       	std	Y+26, r25	; 0x1a
    220c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	8f 89       	ldd	r24, Y+23	; 0x17
    2210:	98 8d       	ldd	r25, Y+24	; 0x18
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	98 8f       	std	Y+24, r25	; 0x18
    2216:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	8f 89       	ldd	r24, Y+23	; 0x17
    221a:	98 8d       	ldd	r25, Y+24	; 0x18
    221c:	89 2b       	or	r24, r25
    221e:	69 f7       	brne	.-38     	; 0x21fa <Lcd_4bit_enuSendEnableSignal+0x164>
    2220:	3f c0       	rjmp	.+126    	; 0x22a0 <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	6b 89       	ldd	r22, Y+19	; 0x13
    2224:	7c 89       	ldd	r23, Y+20	; 0x14
    2226:	8d 89       	ldd	r24, Y+21	; 0x15
    2228:	9e 89       	ldd	r25, Y+22	; 0x16
    222a:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	98 8f       	std	Y+24, r25	; 0x18
    2234:	8f 8b       	std	Y+23, r24	; 0x17
    2236:	8f 89       	ldd	r24, Y+23	; 0x17
    2238:	98 8d       	ldd	r25, Y+24	; 0x18
    223a:	9c 8f       	std	Y+28, r25	; 0x1c
    223c:	8b 8f       	std	Y+27, r24	; 0x1b
    223e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2240:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <Lcd_4bit_enuSendEnableSignal+0x1ac>
    2246:	9c 8f       	std	Y+28, r25	; 0x1c
    2248:	8b 8f       	std	Y+27, r24	; 0x1b
    224a:	2a c0       	rjmp	.+84     	; 0x22a0 <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4f e7       	ldi	r20, 0x7F	; 127
    2252:	53 e4       	ldi	r21, 0x43	; 67
    2254:	6e 81       	ldd	r22, Y+6	; 0x06
    2256:	7f 81       	ldd	r23, Y+7	; 0x07
    2258:	88 85       	ldd	r24, Y+8	; 0x08
    225a:	99 85       	ldd	r25, Y+9	; 0x09
    225c:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    2260:	18 16       	cp	r1, r24
    2262:	ac f4       	brge	.+42     	; 0x228e <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2264:	6a 85       	ldd	r22, Y+10	; 0x0a
    2266:	7b 85       	ldd	r23, Y+11	; 0x0b
    2268:	8c 85       	ldd	r24, Y+12	; 0x0c
    226a:	9d 85       	ldd	r25, Y+13	; 0x0d
    226c:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9e 8f       	std	Y+30, r25	; 0x1e
    2276:	8d 8f       	std	Y+29, r24	; 0x1d
    2278:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    227c:	98 a3       	std	Y+32, r25	; 0x20
    227e:	8f 8f       	std	Y+31, r24	; 0x1f
    2280:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2282:	98 a1       	ldd	r25, Y+32	; 0x20
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <Lcd_4bit_enuSendEnableSignal+0x1ee>
    2288:	98 a3       	std	Y+32, r25	; 0x20
    228a:	8f 8f       	std	Y+31, r24	; 0x1f
    228c:	0f c0       	rjmp	.+30     	; 0x22ac <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    228e:	6e 81       	ldd	r22, Y+6	; 0x06
    2290:	7f 81       	ldd	r23, Y+7	; 0x07
    2292:	88 85       	ldd	r24, Y+8	; 0x08
    2294:	99 85       	ldd	r25, Y+9	; 0x09
    2296:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8e 87       	std	Y+14, r24	; 0x0e
    22a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22a2:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22a4:	89 a1       	ldd	r24, Y+33	; 0x21
    22a6:	8a 95       	dec	r24
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <Lcd_4bit_enuSendEnableSignal+0x210>
    22aa:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    22ac:	8a a1       	ldd	r24, Y+34	; 0x22
    22ae:	9b a1       	ldd	r25, Y+35	; 0x23
    22b0:	fc 01       	movw	r30, r24
    22b2:	85 81       	ldd	r24, Z+5	; 0x05
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    22ba:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01

}
    22be:	a3 96       	adiw	r28, 0x23	; 35
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	29 97       	sbiw	r28, 0x09	; 9
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	9f 83       	std	Y+7, r25	; 0x07
    22e6:	8e 83       	std	Y+6, r24	; 0x06
    22e8:	79 87       	std	Y+9, r23	; 0x09
    22ea:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    22ec:	83 e0       	ldi	r24, 0x03	; 3
    22ee:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    22f0:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    22f2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    22f4:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    22f6:	8e 81       	ldd	r24, Y+6	; 0x06
    22f8:	9f 81       	ldd	r25, Y+7	; 0x07
    22fa:	fc 01       	movw	r30, r24
    22fc:	81 85       	ldd	r24, Z+9	; 0x09
    22fe:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    2300:	8e 81       	ldd	r24, Y+6	; 0x06
    2302:	9f 81       	ldd	r25, Y+7	; 0x07
    2304:	89 2b       	or	r24, r25
    2306:	21 f0       	breq	.+8      	; 0x2310 <Keypad_enuRead+0x40>
    2308:	88 85       	ldd	r24, Y+8	; 0x08
    230a:	99 85       	ldd	r25, Y+9	; 0x09
    230c:	89 2b       	or	r24, r25
    230e:	19 f4       	brne	.+6      	; 0x2316 <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	df c0       	rjmp	.+446    	; 0x24d4 <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    2316:	8e 81       	ldd	r24, Y+6	; 0x06
    2318:	9f 81       	ldd	r25, Y+7	; 0x07
    231a:	0e 94 74 12 	call	0x24e8	; 0x24e8 <Keypad_DisableControlPins>
    231e:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    2320:	8e 81       	ldd	r24, Y+6	; 0x06
    2322:	9f 81       	ldd	r25, Y+7	; 0x07
    2324:	fc 01       	movw	r30, r24
    2326:	80 85       	ldd	r24, Z+8	; 0x08
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	21 f0       	breq	.+8      	; 0x2338 <Keypad_enuRead+0x68>
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	09 f4       	brne	.+2      	; 0x2336 <Keypad_enuRead+0x66>
    2334:	67 c0       	rjmp	.+206    	; 0x2404 <Keypad_enuRead+0x134>
    2336:	cc c0       	rjmp	.+408    	; 0x24d0 <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    2338:	1a 82       	std	Y+2, r1	; 0x02
    233a:	5f c0       	rjmp	.+190    	; 0x23fa <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    233c:	8e 81       	ldd	r24, Y+6	; 0x06
    233e:	9f 81       	ldd	r25, Y+7	; 0x07
    2340:	fc 01       	movw	r30, r24
    2342:	91 85       	ldd	r25, Z+9	; 0x09
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	99 23       	and	r25, r25
    2348:	09 f0       	breq	.+2      	; 0x234c <Keypad_enuRead+0x7c>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	48 2f       	mov	r20, r24
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	2e 81       	ldd	r18, Y+6	; 0x06
    2356:	3f 81       	ldd	r19, Y+7	; 0x07
    2358:	82 0f       	add	r24, r18
    235a:	93 1f       	adc	r25, r19
    235c:	fc 01       	movw	r30, r24
    235e:	80 81       	ld	r24, Z
    2360:	64 2f       	mov	r22, r20
    2362:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    2366:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    2368:	1b 82       	std	Y+3, r1	; 0x03
    236a:	30 c0       	rjmp	.+96     	; 0x23cc <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	2e 81       	ldd	r18, Y+6	; 0x06
    2374:	3f 81       	ldd	r19, Y+7	; 0x07
    2376:	82 0f       	add	r24, r18
    2378:	93 1f       	adc	r25, r19
    237a:	04 96       	adiw	r24, 0x04	; 4
    237c:	fc 01       	movw	r30, r24
    237e:	20 81       	ld	r18, Z
    2380:	ce 01       	movw	r24, r28
    2382:	05 96       	adiw	r24, 0x05	; 5
    2384:	bc 01       	movw	r22, r24
    2386:	82 2f       	mov	r24, r18
    2388:	0e 94 65 06 	call	0xcca	; 0xcca <Dio_enuReadChannel>
    238c:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    238e:	8e 81       	ldd	r24, Y+6	; 0x06
    2390:	9f 81       	ldd	r25, Y+7	; 0x07
    2392:	fc 01       	movw	r30, r24
    2394:	91 85       	ldd	r25, Z+9	; 0x09
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	98 17       	cp	r25, r24
    239a:	a9 f0       	breq	.+42     	; 0x23c6 <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	88 2f       	mov	r24, r24
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	22 0f       	add	r18, r18
    23aa:	33 1f       	adc	r19, r19
    23ac:	22 0f       	add	r18, r18
    23ae:	33 1f       	adc	r19, r19
    23b0:	82 0f       	add	r24, r18
    23b2:	93 1f       	adc	r25, r19
    23b4:	80 51       	subi	r24, 0x10	; 16
    23b6:	9f 4f       	sbci	r25, 0xFF	; 255
    23b8:	fc 01       	movw	r30, r24
    23ba:	20 81       	ld	r18, Z
    23bc:	88 85       	ldd	r24, Y+8	; 0x08
    23be:	99 85       	ldd	r25, Y+9	; 0x09
    23c0:	fc 01       	movw	r30, r24
    23c2:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    23c4:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	8f 5f       	subi	r24, 0xFF	; 255
    23ca:	8b 83       	std	Y+3, r24	; 0x03
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	84 30       	cpi	r24, 0x04	; 4
    23d0:	68 f2       	brcs	.-102    	; 0x236c <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    23d2:	8e 81       	ldd	r24, Y+6	; 0x06
    23d4:	9f 81       	ldd	r25, Y+7	; 0x07
    23d6:	fc 01       	movw	r30, r24
    23d8:	41 85       	ldd	r20, Z+9	; 0x09
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	88 2f       	mov	r24, r24
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	2e 81       	ldd	r18, Y+6	; 0x06
    23e2:	3f 81       	ldd	r19, Y+7	; 0x07
    23e4:	82 0f       	add	r24, r18
    23e6:	93 1f       	adc	r25, r19
    23e8:	fc 01       	movw	r30, r24
    23ea:	80 81       	ld	r24, Z
    23ec:	64 2f       	mov	r22, r20
    23ee:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    23f2:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	8f 5f       	subi	r24, 0xFF	; 255
    23f8:	8a 83       	std	Y+2, r24	; 0x02
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	84 30       	cpi	r24, 0x04	; 4
    23fe:	08 f4       	brcc	.+2      	; 0x2402 <Keypad_enuRead+0x132>
    2400:	9d cf       	rjmp	.-198    	; 0x233c <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    2402:	68 c0       	rjmp	.+208    	; 0x24d4 <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    2404:	1b 82       	std	Y+3, r1	; 0x03
    2406:	5f c0       	rjmp	.+190    	; 0x24c6 <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    2408:	8e 81       	ldd	r24, Y+6	; 0x06
    240a:	9f 81       	ldd	r25, Y+7	; 0x07
    240c:	fc 01       	movw	r30, r24
    240e:	91 85       	ldd	r25, Z+9	; 0x09
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	99 23       	and	r25, r25
    2414:	09 f0       	breq	.+2      	; 0x2418 <Keypad_enuRead+0x148>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	48 2f       	mov	r20, r24
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	2e 81       	ldd	r18, Y+6	; 0x06
    2422:	3f 81       	ldd	r19, Y+7	; 0x07
    2424:	82 0f       	add	r24, r18
    2426:	93 1f       	adc	r25, r19
    2428:	04 96       	adiw	r24, 0x04	; 4
    242a:	fc 01       	movw	r30, r24
    242c:	80 81       	ld	r24, Z
    242e:	64 2f       	mov	r22, r20
    2430:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    2434:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    2436:	1a 82       	std	Y+2, r1	; 0x02
    2438:	2e c0       	rjmp	.+92     	; 0x2496 <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	2e 81       	ldd	r18, Y+6	; 0x06
    2442:	3f 81       	ldd	r19, Y+7	; 0x07
    2444:	82 0f       	add	r24, r18
    2446:	93 1f       	adc	r25, r19
    2448:	fc 01       	movw	r30, r24
    244a:	20 81       	ld	r18, Z
    244c:	ce 01       	movw	r24, r28
    244e:	05 96       	adiw	r24, 0x05	; 5
    2450:	bc 01       	movw	r22, r24
    2452:	82 2f       	mov	r24, r18
    2454:	0e 94 65 06 	call	0xcca	; 0xcca <Dio_enuReadChannel>
    2458:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    245a:	8e 81       	ldd	r24, Y+6	; 0x06
    245c:	9f 81       	ldd	r25, Y+7	; 0x07
    245e:	fc 01       	movw	r30, r24
    2460:	91 85       	ldd	r25, Z+9	; 0x09
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	98 17       	cp	r25, r24
    2466:	a1 f0       	breq	.+40     	; 0x2490 <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	88 2f       	mov	r24, r24
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	22 0f       	add	r18, r18
    2476:	33 1f       	adc	r19, r19
    2478:	22 0f       	add	r18, r18
    247a:	33 1f       	adc	r19, r19
    247c:	82 0f       	add	r24, r18
    247e:	93 1f       	adc	r25, r19
    2480:	80 51       	subi	r24, 0x10	; 16
    2482:	9f 4f       	sbci	r25, 0xFF	; 255
    2484:	fc 01       	movw	r30, r24
    2486:	20 81       	ld	r18, Z
    2488:	88 85       	ldd	r24, Y+8	; 0x08
    248a:	99 85       	ldd	r25, Y+9	; 0x09
    248c:	fc 01       	movw	r30, r24
    248e:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	8f 5f       	subi	r24, 0xFF	; 255
    2494:	8a 83       	std	Y+2, r24	; 0x02
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	84 30       	cpi	r24, 0x04	; 4
    249a:	78 f2       	brcs	.-98     	; 0x243a <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    249c:	8e 81       	ldd	r24, Y+6	; 0x06
    249e:	9f 81       	ldd	r25, Y+7	; 0x07
    24a0:	fc 01       	movw	r30, r24
    24a2:	41 85       	ldd	r20, Z+9	; 0x09
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	88 2f       	mov	r24, r24
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	2e 81       	ldd	r18, Y+6	; 0x06
    24ac:	3f 81       	ldd	r19, Y+7	; 0x07
    24ae:	82 0f       	add	r24, r18
    24b0:	93 1f       	adc	r25, r19
    24b2:	04 96       	adiw	r24, 0x04	; 4
    24b4:	fc 01       	movw	r30, r24
    24b6:	80 81       	ld	r24, Z
    24b8:	64 2f       	mov	r22, r20
    24ba:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    24be:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	8f 5f       	subi	r24, 0xFF	; 255
    24c4:	8b 83       	std	Y+3, r24	; 0x03
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	84 30       	cpi	r24, 0x04	; 4
    24ca:	08 f4       	brcc	.+2      	; 0x24ce <Keypad_enuRead+0x1fe>
    24cc:	9d cf       	rjmp	.-198    	; 0x2408 <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d6:	29 96       	adiw	r28, 0x09	; 9
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	08 95       	ret

000024e8 <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <Keypad_DisableControlPins+0x6>
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <Keypad_DisableControlPins+0x8>
    24f0:	1f 92       	push	r1
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	9d 83       	std	Y+5, r25	; 0x05
    24f8:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    24fa:	83 e0       	ldi	r24, 0x03	; 3
    24fc:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    24fe:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    2500:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    2502:	8c 81       	ldd	r24, Y+4	; 0x04
    2504:	9d 81       	ldd	r25, Y+5	; 0x05
    2506:	89 2b       	or	r24, r25
    2508:	19 f4       	brne	.+6      	; 0x2510 <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	42 c0       	rjmp	.+132    	; 0x2594 <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	fc 01       	movw	r30, r24
    2516:	80 85       	ldd	r24, Z+8	; 0x08
    2518:	88 2f       	mov	r24, r24
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	19 f0       	breq	.+6      	; 0x2526 <Keypad_DisableControlPins+0x3e>
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	d9 f0       	breq	.+54     	; 0x255a <Keypad_DisableControlPins+0x72>
    2524:	35 c0       	rjmp	.+106    	; 0x2590 <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    2526:	1a 82       	std	Y+2, r1	; 0x02
    2528:	14 c0       	rjmp	.+40     	; 0x2552 <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    252a:	8c 81       	ldd	r24, Y+4	; 0x04
    252c:	9d 81       	ldd	r25, Y+5	; 0x05
    252e:	fc 01       	movw	r30, r24
    2530:	41 85       	ldd	r20, Z+9	; 0x09
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	2c 81       	ldd	r18, Y+4	; 0x04
    253a:	3d 81       	ldd	r19, Y+5	; 0x05
    253c:	82 0f       	add	r24, r18
    253e:	93 1f       	adc	r25, r19
    2540:	fc 01       	movw	r30, r24
    2542:	80 81       	ld	r24, Z
    2544:	64 2f       	mov	r22, r20
    2546:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    254a:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	8f 5f       	subi	r24, 0xFF	; 255
    2550:	8a 83       	std	Y+2, r24	; 0x02
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	84 30       	cpi	r24, 0x04	; 4
    2556:	48 f3       	brcs	.-46     	; 0x252a <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    2558:	1d c0       	rjmp	.+58     	; 0x2594 <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    255a:	1a 82       	std	Y+2, r1	; 0x02
    255c:	15 c0       	rjmp	.+42     	; 0x2588 <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    255e:	8c 81       	ldd	r24, Y+4	; 0x04
    2560:	9d 81       	ldd	r25, Y+5	; 0x05
    2562:	fc 01       	movw	r30, r24
    2564:	41 85       	ldd	r20, Z+9	; 0x09
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	2c 81       	ldd	r18, Y+4	; 0x04
    256e:	3d 81       	ldd	r19, Y+5	; 0x05
    2570:	82 0f       	add	r24, r18
    2572:	93 1f       	adc	r25, r19
    2574:	04 96       	adiw	r24, 0x04	; 4
    2576:	fc 01       	movw	r30, r24
    2578:	80 81       	ld	r24, Z
    257a:	64 2f       	mov	r22, r20
    257c:	0e 94 f6 05 	call	0xbec	; 0xbec <Dio_enuWriteChannel>
    2580:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	8a 83       	std	Y+2, r24	; 0x02
    2588:	8a 81       	ldd	r24, Y+2	; 0x02
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	40 f3       	brcs	.-48     	; 0x255e <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    2594:	89 81       	ldd	r24, Y+1	; 0x01
}
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	08 95       	ret

000025a6 <Button_enuRead>:



/********************************** Software Interfaces Declarations *******************/

Button_StatusErrorType Button_enuRead(const Button_ConfigType *Address_Button,Button_PressStatusType* Address_State ){
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <Button_enuRead+0x6>
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <Button_enuRead+0x8>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <Button_enuRead+0xa>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
    25b8:	7e 83       	std	Y+6, r23	; 0x06
    25ba:	6d 83       	std	Y+5, r22	; 0x05

	Button_StatusErrorType Loc_enuStatus = BUTTON_STATUS_OK;
    25bc:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    25be:	1a 82       	std	Y+2, r1	; 0x02
	if( NULL == Address_Button || NULL == Address_State ){
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	89 2b       	or	r24, r25
    25c6:	21 f0       	breq	.+8      	; 0x25d0 <Button_enuRead+0x2a>
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	9e 81       	ldd	r25, Y+6	; 0x06
    25cc:	89 2b       	or	r24, r25
    25ce:	19 f4       	brne	.+6      	; 0x25d6 <Button_enuRead+0x30>
		Loc_enuStatus = BUTTON_STATUS_NULL_POINTER_ADDRESS;
    25d0:	82 e0       	ldi	r24, 0x02	; 2
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	31 c0       	rjmp	.+98     	; 0x2638 <Button_enuRead+0x92>

	}
	else{
	        switch(Address_Button->button_connection){
    25d6:	8b 81       	ldd	r24, Y+3	; 0x03
    25d8:	9c 81       	ldd	r25, Y+4	; 0x04
    25da:	fc 01       	movw	r30, r24
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	71 f0       	breq	.+28     	; 0x2602 <Button_enuRead+0x5c>
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	29 f5       	brne	.+74     	; 0x2634 <Button_enuRead+0x8e>

	            case BUTTON_CONNECTION_PULL_DOWN:
	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	9c 81       	ldd	r25, Y+4	; 0x04
    25ee:	fc 01       	movw	r30, r24
    25f0:	20 81       	ld	r18, Z
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	9e 81       	ldd	r25, Y+6	; 0x06
    25f6:	bc 01       	movw	r22, r24
    25f8:	82 2f       	mov	r24, r18
    25fa:	0e 94 65 06 	call	0xcca	; 0xcca <Dio_enuReadChannel>
    25fe:	8a 83       	std	Y+2, r24	; 0x02
	                break;
    2600:	1b c0       	rjmp	.+54     	; 0x2638 <Button_enuRead+0x92>
	            case BUTTON_CONNECTION_PULL_UP:

	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	fc 01       	movw	r30, r24
    2608:	20 81       	ld	r18, Z
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	bc 01       	movw	r22, r24
    2610:	82 2f       	mov	r24, r18
    2612:	0e 94 65 06 	call	0xcca	; 0xcca <Dio_enuReadChannel>
    2616:	8a 83       	std	Y+2, r24	; 0x02
	                *Address_State = !(*Address_State);
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	fc 01       	movw	r30, r24
    261e:	90 81       	ld	r25, Z
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	99 23       	and	r25, r25
    2624:	09 f0       	breq	.+2      	; 0x2628 <Button_enuRead+0x82>
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	28 2f       	mov	r18, r24
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	fc 01       	movw	r30, r24
    2630:	20 83       	st	Z, r18
	                break;
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <Button_enuRead+0x92>

	            default:
	                Loc_enuStatus = BUTTON_STATUS_FAIL;
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	89 83       	std	Y+1, r24	; 0x01
	    }




	return Loc_enuStatus;
    2638:	89 81       	ldd	r24, Y+1	; 0x01

}
    263a:	26 96       	adiw	r28, 0x06	; 6
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	df 91       	pop	r29
    2648:	cf 91       	pop	r28
    264a:	08 95       	ret

0000264c <main>:

void Application_Adc1Left(u16 Copy_u16result);

void Application_Adc4Right(u16 Copy_u16result);

int main(void){
    264c:	0f 93       	push	r16
    264e:	1f 93       	push	r17
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	c6 56       	subi	r28, 0x66	; 102
    265a:	d1 09       	sbc	r29, r1
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61



	u8 Loc_u8PrevBallRow = LCD_ROW2;
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	8c 83       	std	Y+4, r24	; 0x04
	u8 Loc_u8PrevBallCol = LCD_COL10;
    266a:	8a e0       	ldi	r24, 0x0A	; 10
    266c:	89 83       	std	Y+1, r24	; 0x01

	u8 Loc_u8ColCounter;
	u8 Loc_u8RowCounter;
	s8 Loc_s8RowFlag = -1;
    266e:	8f ef       	ldi	r24, 0xFF	; 255
    2670:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loc_OnceFlag = 0;
    2672:	1b 82       	std	Y+3, r1	; 0x03

	Port_voidInit();
    2674:	0e 94 c8 01 	call	0x390	; 0x390 <Port_voidInit>
	Lcd_4bit_enuInit(&Lcd);
    2678:	80 e9       	ldi	r24, 0x90	; 144
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <Lcd_4bit_enuInit>
	Adc_enuInit(&Adc1);
    2680:	8b ea       	ldi	r24, 0xAB	; 171
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 9b 07 	call	0xf36	; 0xf36 <Adc_enuInit>
	Adc_enuInit(&Adc4);
    2688:	8f ea       	ldi	r24, 0xAF	; 175
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 9b 07 	call	0xf36	; 0xf36 <Adc_enuInit>

	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_LeftCustomChar, LEFT_CUSTOM_INDEX);
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	63 eb       	ldi	r22, 0xB3	; 179
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	80 e9       	ldi	r24, 0x90	; 144
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <Lcd_4bit_enuCreateCustomCharacter>
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_RightCustomChar, RIGHT_CUSTOM_INDEX);
    269e:	42 e0       	ldi	r20, 0x02	; 2
    26a0:	6b eb       	ldi	r22, 0xBB	; 187
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	80 e9       	ldi	r24, 0x90	; 144
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <Lcd_4bit_enuCreateCustomCharacter>
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_TheBallCustomChar, THEBALL_CUSTOM_INDEX);
    26ac:	43 e0       	ldi	r20, 0x03	; 3
    26ae:	63 ec       	ldi	r22, 0xC3	; 195
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	80 e9       	ldi	r24, 0x90	; 144
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <Lcd_4bit_enuCreateCustomCharacter>
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_HitRightCustomChar, HITRIGHT_CUSTOM_INDEX);
    26ba:	44 e0       	ldi	r20, 0x04	; 4
    26bc:	6b ec       	ldi	r22, 0xCB	; 203
    26be:	70 e0       	ldi	r23, 0x00	; 0
    26c0:	80 e9       	ldi	r24, 0x90	; 144
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <Lcd_4bit_enuCreateCustomCharacter>
	Lcd_4bit_enuCreateCustomCharacter(&Lcd, Lcd_HitLeftCustomChar, HITLEF_CUSTOM_INDEX);
    26c8:	45 e0       	ldi	r20, 0x05	; 5
    26ca:	63 ed       	ldi	r22, 0xD3	; 211
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	80 e9       	ldi	r24, 0x90	; 144
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <Lcd_4bit_enuCreateCustomCharacter>

	Adc_SetCallbackFunction(&Adc1, Application_Adc1Left);
    26d6:	68 e2       	ldi	r22, 0x28	; 40
    26d8:	79 e1       	ldi	r23, 0x19	; 25
    26da:	8b ea       	ldi	r24, 0xAB	; 171
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	0e 94 a0 0a 	call	0x1540	; 0x1540 <Adc_SetCallbackFunction>
	Adc_SetCallbackFunction(&Adc4, Application_Adc4Right);
    26e2:	65 ec       	ldi	r22, 0xC5	; 197
    26e4:	79 e1       	ldi	r23, 0x19	; 25
    26e6:	8f ea       	ldi	r24, 0xAF	; 175
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 a0 0a 	call	0x1540	; 0x1540 <Adc_SetCallbackFunction>
	Adc_enuEnableInterrupt();
    26ee:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Adc_enuEnableInterrupt>
	Gie_enuEnableGlobalInterrupt();
    26f2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Gie_enuEnableGlobalInterrupt>


	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2, LCD_COL1);
    26f6:	41 e0       	ldi	r20, 0x01	; 1
    26f8:	62 e0       	ldi	r22, 0x02	; 2
    26fa:	80 e9       	ldi	r24, 0x90	; 144
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <Lcd_4bit_enuGoToXY>
	Lcd_4bit_enuDisplayCharacter(&Lcd,LEFT_CUSTOM_INDEX);
    2702:	61 e0       	ldi	r22, 0x01	; 1
    2704:	80 e9       	ldi	r24, 0x90	; 144
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Lcd_4bit_enuDisplayCharacter>



	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2, LCD_COL20);
    270c:	44 e1       	ldi	r20, 0x14	; 20
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	80 e9       	ldi	r24, 0x90	; 144
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <Lcd_4bit_enuGoToXY>
	Lcd_4bit_enuDisplayCharacter(&Lcd,RIGHT_CUSTOM_INDEX);
    2718:	62 e0       	ldi	r22, 0x02	; 2
    271a:	80 e9       	ldi	r24, 0x90	; 144
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Lcd_4bit_enuDisplayCharacter>

	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2, LCD_COL10);
    2722:	4a e0       	ldi	r20, 0x0A	; 10
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	80 e9       	ldi	r24, 0x90	; 144
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <Lcd_4bit_enuGoToXY>
	Lcd_4bit_enuDisplayCharacter(&Lcd,THEBALL_CUSTOM_INDEX);
    272e:	63 e0       	ldi	r22, 0x03	; 3
    2730:	80 e9       	ldi	r24, 0x90	; 144
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Lcd_4bit_enuDisplayCharacter>
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	aa ef       	ldi	r26, 0xFA	; 250
    273e:	b3 e4       	ldi	r27, 0x43	; 67
    2740:	8d 8f       	std	Y+29, r24	; 0x1d
    2742:	9e 8f       	std	Y+30, r25	; 0x1e
    2744:	af 8f       	std	Y+31, r26	; 0x1f
    2746:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a ef       	ldi	r20, 0xFA	; 250
    274e:	54 e4       	ldi	r21, 0x44	; 68
    2750:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2752:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2754:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2756:	98 a1       	ldd	r25, Y+32	; 0x20
    2758:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	89 a3       	std	Y+33, r24	; 0x21
    2762:	9a a3       	std	Y+34, r25	; 0x22
    2764:	ab a3       	std	Y+35, r26	; 0x23
    2766:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e8       	ldi	r20, 0x80	; 128
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	69 a1       	ldd	r22, Y+33	; 0x21
    2772:	7a a1       	ldd	r23, Y+34	; 0x22
    2774:	8b a1       	ldd	r24, Y+35	; 0x23
    2776:	9c a1       	ldd	r25, Y+36	; 0x24
    2778:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    277c:	88 23       	and	r24, r24
    277e:	2c f4       	brge	.+10     	; 0x278a <main+0x13e>
		__ticks = 1;
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9e a3       	std	Y+38, r25	; 0x26
    2786:	8d a3       	std	Y+37, r24	; 0x25
    2788:	3f c0       	rjmp	.+126    	; 0x2808 <main+0x1bc>
	else if (__tmp > 65535)
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	3f ef       	ldi	r19, 0xFF	; 255
    278e:	4f e7       	ldi	r20, 0x7F	; 127
    2790:	57 e4       	ldi	r21, 0x47	; 71
    2792:	69 a1       	ldd	r22, Y+33	; 0x21
    2794:	7a a1       	ldd	r23, Y+34	; 0x22
    2796:	8b a1       	ldd	r24, Y+35	; 0x23
    2798:	9c a1       	ldd	r25, Y+36	; 0x24
    279a:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    279e:	18 16       	cp	r1, r24
    27a0:	4c f5       	brge	.+82     	; 0x27f4 <main+0x1a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e2       	ldi	r20, 0x20	; 32
    27a8:	51 e4       	ldi	r21, 0x41	; 65
    27aa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    27ac:	7e 8d       	ldd	r23, Y+30	; 0x1e
    27ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27b0:	98 a1       	ldd	r25, Y+32	; 0x20
    27b2:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	9e a3       	std	Y+38, r25	; 0x26
    27c8:	8d a3       	std	Y+37, r24	; 0x25
    27ca:	0f c0       	rjmp	.+30     	; 0x27ea <main+0x19e>
    27cc:	88 ec       	ldi	r24, 0xC8	; 200
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	98 a7       	std	Y+40, r25	; 0x28
    27d2:	8f a3       	std	Y+39, r24	; 0x27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27d4:	8f a1       	ldd	r24, Y+39	; 0x27
    27d6:	98 a5       	ldd	r25, Y+40	; 0x28
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	f1 f7       	brne	.-4      	; 0x27d8 <main+0x18c>
    27dc:	98 a7       	std	Y+40, r25	; 0x28
    27de:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e0:	8d a1       	ldd	r24, Y+37	; 0x25
    27e2:	9e a1       	ldd	r25, Y+38	; 0x26
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	9e a3       	std	Y+38, r25	; 0x26
    27e8:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ea:	8d a1       	ldd	r24, Y+37	; 0x25
    27ec:	9e a1       	ldd	r25, Y+38	; 0x26
    27ee:	89 2b       	or	r24, r25
    27f0:	69 f7       	brne	.-38     	; 0x27cc <main+0x180>
    27f2:	14 c0       	rjmp	.+40     	; 0x281c <main+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f4:	69 a1       	ldd	r22, Y+33	; 0x21
    27f6:	7a a1       	ldd	r23, Y+34	; 0x22
    27f8:	8b a1       	ldd	r24, Y+35	; 0x23
    27fa:	9c a1       	ldd	r25, Y+36	; 0x24
    27fc:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	9e a3       	std	Y+38, r25	; 0x26
    2806:	8d a3       	std	Y+37, r24	; 0x25
    2808:	8d a1       	ldd	r24, Y+37	; 0x25
    280a:	9e a1       	ldd	r25, Y+38	; 0x26
    280c:	9a a7       	std	Y+42, r25	; 0x2a
    280e:	89 a7       	std	Y+41, r24	; 0x29
    2810:	89 a5       	ldd	r24, Y+41	; 0x29
    2812:	9a a5       	ldd	r25, Y+42	; 0x2a
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	f1 f7       	brne	.-4      	; 0x2814 <main+0x1c8>
    2818:	9a a7       	std	Y+42, r25	; 0x2a
    281a:	89 a7       	std	Y+41, r24	; 0x29


	_delay_ms(500);
	while(1){

		Adc_StartConversionAsync(&Adc1);
    281c:	8b ea       	ldi	r24, 0xAB	; 171
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Adc_StartConversionAsync>
		Adc_StartConversionAsync(&Adc4);
    2824:	8f ea       	ldi	r24, 0xAF	; 175
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Adc_StartConversionAsync>


		if(Loc_u8CurrentBallRow == LCD_ROW4)
    282c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2830:	84 30       	cpi	r24, 0x04	; 4
    2832:	19 f4       	brne	.+6      	; 0x283a <main+0x1ee>
			Loc_s8RowFlag = -1;
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	8a 83       	std	Y+2, r24	; 0x02
    2838:	06 c0       	rjmp	.+12     	; 0x2846 <main+0x1fa>
		else if(Loc_u8CurrentBallRow == LCD_ROW1)
    283a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	11 f4       	brne	.+4      	; 0x2846 <main+0x1fa>
			Loc_s8RowFlag = 1;
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	8a 83       	std	Y+2, r24	; 0x02


		// Moving Right First

		for(Loc_u8CurrentBallCol = Loc_u8PrevBallCol+1,Loc_u8CurrentBallRow+=Loc_s8RowFlag;
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	8f 5f       	subi	r24, 0xFF	; 255
    284a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Loc_u8CurrentBallCol>
    284e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	89 0f       	add	r24, r25
    2856:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Loc_u8CurrentBallRow>
    285a:	bd c0       	rjmp	.+378    	; 0x29d6 <main+0x38a>
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	aa ef       	ldi	r26, 0xFA	; 250
    2862:	b3 e4       	ldi	r27, 0x43	; 67
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	af 83       	std	Y+7, r26	; 0x07
    286a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	4a ef       	ldi	r20, 0xFA	; 250
    2872:	54 e4       	ldi	r21, 0x44	; 68
    2874:	6d 81       	ldd	r22, Y+5	; 0x05
    2876:	7e 81       	ldd	r23, Y+6	; 0x06
    2878:	8f 81       	ldd	r24, Y+7	; 0x07
    287a:	98 85       	ldd	r25, Y+8	; 0x08
    287c:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	8b a7       	std	Y+43, r24	; 0x2b
    2886:	9c a7       	std	Y+44, r25	; 0x2c
    2888:	ad a7       	std	Y+45, r26	; 0x2d
    288a:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e8       	ldi	r20, 0x80	; 128
    2892:	5f e3       	ldi	r21, 0x3F	; 63
    2894:	6b a5       	ldd	r22, Y+43	; 0x2b
    2896:	7c a5       	ldd	r23, Y+44	; 0x2c
    2898:	8d a5       	ldd	r24, Y+45	; 0x2d
    289a:	9e a5       	ldd	r25, Y+46	; 0x2e
    289c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    28a0:	88 23       	and	r24, r24
    28a2:	2c f4       	brge	.+10     	; 0x28ae <main+0x262>
		__ticks = 1;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	98 ab       	std	Y+48, r25	; 0x30
    28aa:	8f a7       	std	Y+47, r24	; 0x2f
    28ac:	3f c0       	rjmp	.+126    	; 0x292c <main+0x2e0>
	else if (__tmp > 65535)
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	3f ef       	ldi	r19, 0xFF	; 255
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	57 e4       	ldi	r21, 0x47	; 71
    28b6:	6b a5       	ldd	r22, Y+43	; 0x2b
    28b8:	7c a5       	ldd	r23, Y+44	; 0x2c
    28ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    28bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    28be:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    28c2:	18 16       	cp	r1, r24
    28c4:	4c f5       	brge	.+82     	; 0x2918 <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e2       	ldi	r20, 0x20	; 32
    28cc:	51 e4       	ldi	r21, 0x41	; 65
    28ce:	6d 81       	ldd	r22, Y+5	; 0x05
    28d0:	7e 81       	ldd	r23, Y+6	; 0x06
    28d2:	8f 81       	ldd	r24, Y+7	; 0x07
    28d4:	98 85       	ldd	r25, Y+8	; 0x08
    28d6:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	98 ab       	std	Y+48, r25	; 0x30
    28ec:	8f a7       	std	Y+47, r24	; 0x2f
    28ee:	0f c0       	rjmp	.+30     	; 0x290e <main+0x2c2>
    28f0:	88 ec       	ldi	r24, 0xC8	; 200
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9a ab       	std	Y+50, r25	; 0x32
    28f6:	89 ab       	std	Y+49, r24	; 0x31
    28f8:	89 a9       	ldd	r24, Y+49	; 0x31
    28fa:	9a a9       	ldd	r25, Y+50	; 0x32
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <main+0x2b0>
    2900:	9a ab       	std	Y+50, r25	; 0x32
    2902:	89 ab       	std	Y+49, r24	; 0x31
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2904:	8f a5       	ldd	r24, Y+47	; 0x2f
    2906:	98 a9       	ldd	r25, Y+48	; 0x30
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	98 ab       	std	Y+48, r25	; 0x30
    290c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2910:	98 a9       	ldd	r25, Y+48	; 0x30
    2912:	89 2b       	or	r24, r25
    2914:	69 f7       	brne	.-38     	; 0x28f0 <main+0x2a4>
    2916:	14 c0       	rjmp	.+40     	; 0x2940 <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2918:	6b a5       	ldd	r22, Y+43	; 0x2b
    291a:	7c a5       	ldd	r23, Y+44	; 0x2c
    291c:	8d a5       	ldd	r24, Y+45	; 0x2d
    291e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2920:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	98 ab       	std	Y+48, r25	; 0x30
    292a:	8f a7       	std	Y+47, r24	; 0x2f
    292c:	8f a5       	ldd	r24, Y+47	; 0x2f
    292e:	98 a9       	ldd	r25, Y+48	; 0x30
    2930:	9c ab       	std	Y+52, r25	; 0x34
    2932:	8b ab       	std	Y+51, r24	; 0x33
    2934:	8b a9       	ldd	r24, Y+51	; 0x33
    2936:	9c a9       	ldd	r25, Y+52	; 0x34
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <main+0x2ec>
    293c:	9c ab       	std	Y+52, r25	; 0x34
    293e:	8b ab       	std	Y+51, r24	; 0x33
				Loc_u8CurrentBallCol<=LCD_COL20;
				                    Loc_u8CurrentBallCol++,Loc_u8CurrentBallRow+=Loc_s8RowFlag){


			_delay_ms(500);
			 Loc_u8PrevBallRow = Loc_u8CurrentBallRow - Loc_s8RowFlag;
    2940:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	29 2f       	mov	r18, r25
    2948:	28 1b       	sub	r18, r24
    294a:	82 2f       	mov	r24, r18
    294c:	8c 83       	std	Y+4, r24	; 0x04
			 Loc_u8PrevBallCol = Loc_u8CurrentBallCol - 1;
    294e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    2952:	81 50       	subi	r24, 0x01	; 1
    2954:	89 83       	std	Y+1, r24	; 0x01

			 if(Loc_OnceFlag == 0){
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	88 23       	and	r24, r24
    295a:	41 f4       	brne	.+16     	; 0x296c <main+0x320>
				 Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,' ', Loc_u8PrevBallRow, Loc_u8PrevBallCol);
    295c:	29 81       	ldd	r18, Y+1	; 0x01
    295e:	4c 81       	ldd	r20, Y+4	; 0x04
    2960:	60 e2       	ldi	r22, 0x20	; 32
    2962:	80 e9       	ldi	r24, 0x90	; 144
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    296a:	0a c0       	rjmp	.+20     	; 0x2980 <main+0x334>
			 }
			 else{
				 Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,LEFT_CUSTOM_INDEX,Loc_u8PrevBallRow , LCD_COL1);
    296c:	21 e0       	ldi	r18, 0x01	; 1
    296e:	4c 81       	ldd	r20, Y+4	; 0x04
    2970:	61 e0       	ldi	r22, 0x01	; 1
    2972:	80 e9       	ldi	r24, 0x90	; 144
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
				 Loc_OnceFlag =0;
    297a:	1b 82       	std	Y+3, r1	; 0x03
				 Adc_enuEnableInterrupt();
    297c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Adc_enuEnableInterrupt>
			 }

			 Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, THEBALL_CUSTOM_INDEX, Loc_u8CurrentBallRow, Loc_u8CurrentBallCol);
    2980:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    2984:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2988:	29 2f       	mov	r18, r25
    298a:	48 2f       	mov	r20, r24
    298c:	63 e0       	ldi	r22, 0x03	; 3
    298e:	80 e9       	ldi	r24, 0x90	; 144
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>



			if(Loc_u8CurrentBallRow == LCD_ROW4)
    2996:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    299a:	84 30       	cpi	r24, 0x04	; 4
    299c:	19 f4       	brne	.+6      	; 0x29a4 <main+0x358>
				Loc_s8RowFlag = -1;
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	8a 83       	std	Y+2, r24	; 0x02
    29a2:	06 c0       	rjmp	.+12     	; 0x29b0 <main+0x364>
			else if(Loc_u8CurrentBallRow == LCD_ROW1)
    29a4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    29a8:	81 30       	cpi	r24, 0x01	; 1
    29aa:	11 f4       	brne	.+4      	; 0x29b0 <main+0x364>
				Loc_s8RowFlag = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	8a 83       	std	Y+2, r24	; 0x02

			Adc_StartConversionAsync(&Adc1);
    29b0:	8b ea       	ldi	r24, 0xAB	; 171
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Adc_StartConversionAsync>
			Adc_StartConversionAsync(&Adc4);
    29b8:	8f ea       	ldi	r24, 0xAF	; 175
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Adc_StartConversionAsync>

		// Moving Right First

		for(Loc_u8CurrentBallCol = Loc_u8PrevBallCol+1,Loc_u8CurrentBallRow+=Loc_s8RowFlag;
				Loc_u8CurrentBallCol<=LCD_COL20;
				                    Loc_u8CurrentBallCol++,Loc_u8CurrentBallRow+=Loc_s8RowFlag){
    29c0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    29c4:	8f 5f       	subi	r24, 0xFF	; 255
    29c6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Loc_u8CurrentBallCol>
    29ca:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	89 0f       	add	r24, r25
    29d2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Loc_u8CurrentBallRow>


		// Moving Right First

		for(Loc_u8CurrentBallCol = Loc_u8PrevBallCol+1,Loc_u8CurrentBallRow+=Loc_s8RowFlag;
				Loc_u8CurrentBallCol<=LCD_COL20;
    29d6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
			Loc_s8RowFlag = 1;


		// Moving Right First

		for(Loc_u8CurrentBallCol = Loc_u8PrevBallCol+1,Loc_u8CurrentBallRow+=Loc_s8RowFlag;
    29da:	85 31       	cpi	r24, 0x15	; 21
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <main+0x394>
    29de:	3e cf       	rjmp	.-388    	; 0x285c <main+0x210>
			Adc_StartConversionAsync(&Adc4);

		}


		Adc_enuDisableInterrupt();
    29e0:	0e 94 41 0a 	call	0x1482	; 0x1482 <Adc_enuDisableInterrupt>
		Loc_u8CurrentBallRow =Loc_u8CurrentBallRow - Loc_s8RowFlag;
    29e4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	e9 2f       	mov	r30, r25
    29ec:	e8 1b       	sub	r30, r24
    29ee:	8e 2f       	mov	r24, r30
    29f0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Loc_u8CurrentBallRow>
		Loc_u8CurrentBallCol =LCD_COL20;
    29f4:	84 e1       	ldi	r24, 0x14	; 20
    29f6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Loc_u8CurrentBallCol>

		if(Loc_u8CurrentBallRow == LCD_ROW4)
    29fa:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    29fe:	84 30       	cpi	r24, 0x04	; 4
    2a00:	19 f4       	brne	.+6      	; 0x2a08 <main+0x3bc>
			Loc_s8RowFlag = -1;
    2a02:	8f ef       	ldi	r24, 0xFF	; 255
    2a04:	8a 83       	std	Y+2, r24	; 0x02
    2a06:	06 c0       	rjmp	.+12     	; 0x2a14 <main+0x3c8>
		else if(Loc_u8CurrentBallRow == LCD_ROW1)
    2a08:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	11 f4       	brne	.+4      	; 0x2a14 <main+0x3c8>
			Loc_s8RowFlag = 1;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	8a 83       	std	Y+2, r24	; 0x02


		if(Loc_u8CurrentBallRow == Global_u8CurrentRightRowWall){
    2a14:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2a18:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <Global_u8CurrentRightRowWall>
    2a1c:	98 17       	cp	r25, r24
    2a1e:	e9 f4       	brne	.+58     	; 0x2a5a <main+0x40e>

			 Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, HITRIGHT_CUSTOM_INDEX, Loc_u8CurrentBallRow, Loc_u8CurrentBallCol);
    2a20:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    2a24:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2a28:	29 2f       	mov	r18, r25
    2a2a:	48 2f       	mov	r20, r24
    2a2c:	64 e0       	ldi	r22, 0x04	; 4
    2a2e:	80 e9       	ldi	r24, 0x90	; 144
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			 Loc_OnceFlag = 1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	8b 83       	std	Y+3, r24	; 0x03
				while(1);

		}


		Loc_u8PrevBallRow = Loc_u8CurrentBallRow;
    2a3a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2a3e:	8c 83       	std	Y+4, r24	; 0x04
		Loc_u8PrevBallCol = LCD_COL20;
    2a40:	84 e1       	ldi	r24, 0x14	; 20
    2a42:	89 83       	std	Y+1, r24	; 0x01

		// Moving Left


		for(Loc_u8CurrentBallCol = Loc_u8PrevBallCol-1,Loc_u8CurrentBallRow+=Loc_s8RowFlag;
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	81 50       	subi	r24, 0x01	; 1
    2a48:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Loc_u8CurrentBallCol>
    2a4c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	89 0f       	add	r24, r25
    2a54:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Loc_u8CurrentBallRow>
    2a58:	3e c2       	rjmp	.+1148   	; 0x2ed6 <main+0x88a>


		}

		else{
			Gie_enuDisableGlobalInterrupt();
    2a5a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Gie_enuDisableGlobalInterrupt>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	aa ef       	ldi	r26, 0xFA	; 250
    2a64:	b3 e4       	ldi	r27, 0x43	; 67
    2a66:	8d 8b       	std	Y+21, r24	; 0x15
    2a68:	9e 8b       	std	Y+22, r25	; 0x16
    2a6a:	af 8b       	std	Y+23, r26	; 0x17
    2a6c:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a6e:	8e 01       	movw	r16, r28
    2a70:	01 5c       	subi	r16, 0xC1	; 193
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	4a ef       	ldi	r20, 0xFA	; 250
    2a7a:	54 e4       	ldi	r21, 0x44	; 68
    2a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a80:	8f 89       	ldd	r24, Y+23	; 0x17
    2a82:	98 8d       	ldd	r25, Y+24	; 0x18
    2a84:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	80 83       	st	Z, r24
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	a2 83       	std	Z+2, r26	; 0x02
    2a94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a96:	ce 01       	movw	r24, r28
    2a98:	cf 96       	adiw	r24, 0x3f	; 63
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e8       	ldi	r20, 0x80	; 128
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	60 81       	ld	r22, Z
    2aa6:	71 81       	ldd	r23, Z+1	; 0x01
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	93 81       	ldd	r25, Z+3	; 0x03
    2aac:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	4c f4       	brge	.+18     	; 0x2ac6 <main+0x47a>
		__ticks = 1;
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	8d 5b       	subi	r24, 0xBD	; 189
    2ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aba:	21 e0       	ldi	r18, 0x01	; 1
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	fc 01       	movw	r30, r24
    2ac0:	31 83       	std	Z+1, r19	; 0x01
    2ac2:	20 83       	st	Z, r18
    2ac4:	67 c0       	rjmp	.+206    	; 0x2b94 <main+0x548>
	else if (__tmp > 65535)
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	cf 96       	adiw	r24, 0x3f	; 63
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	3f ef       	ldi	r19, 0xFF	; 255
    2ace:	4f e7       	ldi	r20, 0x7F	; 127
    2ad0:	57 e4       	ldi	r21, 0x47	; 71
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	0c f0       	brlt	.+2      	; 0x2ae6 <main+0x49a>
    2ae4:	46 c0       	rjmp	.+140    	; 0x2b72 <main+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e2       	ldi	r20, 0x20	; 32
    2aec:	51 e4       	ldi	r21, 0x41	; 65
    2aee:	6d 89       	ldd	r22, Y+21	; 0x15
    2af0:	7e 89       	ldd	r23, Y+22	; 0x16
    2af2:	8f 89       	ldd	r24, Y+23	; 0x17
    2af4:	98 8d       	ldd	r25, Y+24	; 0x18
    2af6:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	8e 01       	movw	r16, r28
    2b00:	0d 5b       	subi	r16, 0xBD	; 189
    2b02:	1f 4f       	sbci	r17, 0xFF	; 255
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	f8 01       	movw	r30, r16
    2b12:	91 83       	std	Z+1, r25	; 0x01
    2b14:	80 83       	st	Z, r24
    2b16:	24 c0       	rjmp	.+72     	; 0x2b60 <main+0x514>
    2b18:	ce 01       	movw	r24, r28
    2b1a:	8b 5b       	subi	r24, 0xBB	; 187
    2b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1e:	28 ec       	ldi	r18, 0xC8	; 200
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	fc 01       	movw	r30, r24
    2b24:	31 83       	std	Z+1, r19	; 0x01
    2b26:	20 83       	st	Z, r18
    2b28:	ce 01       	movw	r24, r28
    2b2a:	8b 5b       	subi	r24, 0xBB	; 187
    2b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2e:	fc 01       	movw	r30, r24
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <main+0x4e8>
    2b38:	9e 01       	movw	r18, r28
    2b3a:	2b 5b       	subi	r18, 0xBB	; 187
    2b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3e:	f9 01       	movw	r30, r18
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b44:	ce 01       	movw	r24, r28
    2b46:	8d 5b       	subi	r24, 0xBD	; 189
    2b48:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4a:	9e 01       	movw	r18, r28
    2b4c:	2d 5b       	subi	r18, 0xBD	; 189
    2b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b50:	f9 01       	movw	r30, r18
    2b52:	20 81       	ld	r18, Z
    2b54:	31 81       	ldd	r19, Z+1	; 0x01
    2b56:	21 50       	subi	r18, 0x01	; 1
    2b58:	31 09       	sbc	r19, r1
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	31 83       	std	Z+1, r19	; 0x01
    2b5e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b60:	ce 01       	movw	r24, r28
    2b62:	8d 5b       	subi	r24, 0xBD	; 189
    2b64:	9f 4f       	sbci	r25, 0xFF	; 255
    2b66:	fc 01       	movw	r30, r24
    2b68:	80 81       	ld	r24, Z
    2b6a:	91 81       	ldd	r25, Z+1	; 0x01
    2b6c:	89 2b       	or	r24, r25
    2b6e:	a1 f6       	brne	.-88     	; 0x2b18 <main+0x4cc>
    2b70:	2b c0       	rjmp	.+86     	; 0x2bc8 <main+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b72:	8e 01       	movw	r16, r28
    2b74:	0d 5b       	subi	r16, 0xBD	; 189
    2b76:	1f 4f       	sbci	r17, 0xFF	; 255
    2b78:	ce 01       	movw	r24, r28
    2b7a:	cf 96       	adiw	r24, 0x3f	; 63
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	60 81       	ld	r22, Z
    2b80:	71 81       	ldd	r23, Z+1	; 0x01
    2b82:	82 81       	ldd	r24, Z+2	; 0x02
    2b84:	93 81       	ldd	r25, Z+3	; 0x03
    2b86:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	f8 01       	movw	r30, r16
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	ce 01       	movw	r24, r28
    2b96:	89 5b       	subi	r24, 0xB9	; 185
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	9e 01       	movw	r18, r28
    2b9c:	2d 5b       	subi	r18, 0xBD	; 189
    2b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba0:	f9 01       	movw	r30, r18
    2ba2:	20 81       	ld	r18, Z
    2ba4:	31 81       	ldd	r19, Z+1	; 0x01
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	31 83       	std	Z+1, r19	; 0x01
    2baa:	20 83       	st	Z, r18
    2bac:	ce 01       	movw	r24, r28
    2bae:	89 5b       	subi	r24, 0xB9	; 185
    2bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb2:	fc 01       	movw	r30, r24
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <main+0x56c>
    2bbc:	9e 01       	movw	r18, r28
    2bbe:	29 5b       	subi	r18, 0xB9	; 185
    2bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc2:	f9 01       	movw	r30, r18
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
			_delay_ms(500);
				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2bc8:	61 e0       	ldi	r22, 0x01	; 1
    2bca:	80 e9       	ldi	r24, 0x90	; 144
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a0 e4       	ldi	r26, 0x40	; 64
    2bd8:	b0 e4       	ldi	r27, 0x40	; 64
    2bda:	89 8f       	std	Y+25, r24	; 0x19
    2bdc:	9a 8f       	std	Y+26, r25	; 0x1a
    2bde:	ab 8f       	std	Y+27, r26	; 0x1b
    2be0:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	4a ef       	ldi	r20, 0xFA	; 250
    2be8:	54 e4       	ldi	r21, 0x44	; 68
    2bea:	69 8d       	ldd	r22, Y+25	; 0x19
    2bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bf2:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	8d ab       	std	Y+53, r24	; 0x35
    2bfc:	9e ab       	std	Y+54, r25	; 0x36
    2bfe:	af ab       	std	Y+55, r26	; 0x37
    2c00:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e8       	ldi	r20, 0x80	; 128
    2c08:	5f e3       	ldi	r21, 0x3F	; 63
    2c0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2c0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2c0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2c10:	98 ad       	ldd	r25, Y+56	; 0x38
    2c12:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    2c16:	88 23       	and	r24, r24
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <main+0x5d8>
		__ticks = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9a af       	std	Y+58, r25	; 0x3a
    2c20:	89 af       	std	Y+57, r24	; 0x39
    2c22:	3f c0       	rjmp	.+126    	; 0x2ca2 <main+0x656>
	else if (__tmp > 65535)
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	3f ef       	ldi	r19, 0xFF	; 255
    2c28:	4f e7       	ldi	r20, 0x7F	; 127
    2c2a:	57 e4       	ldi	r21, 0x47	; 71
    2c2c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c2e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c30:	8f a9       	ldd	r24, Y+55	; 0x37
    2c32:	98 ad       	ldd	r25, Y+56	; 0x38
    2c34:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	4c f5       	brge	.+82     	; 0x2c8e <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e2       	ldi	r20, 0x20	; 32
    2c42:	51 e4       	ldi	r21, 0x41	; 65
    2c44:	69 8d       	ldd	r22, Y+25	; 0x19
    2c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c4c:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9a af       	std	Y+58, r25	; 0x3a
    2c62:	89 af       	std	Y+57, r24	; 0x39
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <main+0x638>
    2c66:	88 ec       	ldi	r24, 0xC8	; 200
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c af       	std	Y+60, r25	; 0x3c
    2c6c:	8b af       	std	Y+59, r24	; 0x3b
    2c6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c70:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <main+0x626>
    2c76:	9c af       	std	Y+60, r25	; 0x3c
    2c78:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	89 ad       	ldd	r24, Y+57	; 0x39
    2c7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	9a af       	std	Y+58, r25	; 0x3a
    2c82:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	89 ad       	ldd	r24, Y+57	; 0x39
    2c86:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c88:	89 2b       	or	r24, r25
    2c8a:	69 f7       	brne	.-38     	; 0x2c66 <main+0x61a>
    2c8c:	14 c0       	rjmp	.+40     	; 0x2cb6 <main+0x66a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c90:	7e a9       	ldd	r23, Y+54	; 0x36
    2c92:	8f a9       	ldd	r24, Y+55	; 0x37
    2c94:	98 ad       	ldd	r25, Y+56	; 0x38
    2c96:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9a af       	std	Y+58, r25	; 0x3a
    2ca0:	89 af       	std	Y+57, r24	; 0x39
    2ca2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ca4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ca6:	9e af       	std	Y+62, r25	; 0x3e
    2ca8:	8d af       	std	Y+61, r24	; 0x3d
    2caa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cac:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <main+0x662>
    2cb2:	9e af       	std	Y+62, r25	; 0x3e
    2cb4:	8d af       	std	Y+61, r24	; 0x3d
				_delay_ms(3);
				Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2,LCD_COL5);
    2cb6:	45 e0       	ldi	r20, 0x05	; 5
    2cb8:	62 e0       	ldi	r22, 0x02	; 2
    2cba:	80 e9       	ldi	r24, 0x90	; 144
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <Lcd_4bit_enuGoToXY>

				Lcd_4bit_enuDisplayString(&Lcd, " GAME OVER");
    2cc2:	65 ee       	ldi	r22, 0xE5	; 229
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	80 e9       	ldi	r24, 0x90	; 144
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <Lcd_4bit_enuDisplayString>
				while(1);
    2cce:	ff cf       	rjmp	.-2      	; 0x2cce <main+0x682>
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	aa ef       	ldi	r26, 0xFA	; 250
    2cd6:	b3 e4       	ldi	r27, 0x43	; 67
    2cd8:	89 8b       	std	Y+17, r24	; 0x11
    2cda:	9a 8b       	std	Y+18, r25	; 0x12
    2cdc:	ab 8b       	std	Y+19, r26	; 0x13
    2cde:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ce0:	8e 01       	movw	r16, r28
    2ce2:	07 5b       	subi	r16, 0xB7	; 183
    2ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a ef       	ldi	r20, 0xFA	; 250
    2cec:	54 e4       	ldi	r21, 0x44	; 68
    2cee:	69 89       	ldd	r22, Y+17	; 0x11
    2cf0:	7a 89       	ldd	r23, Y+18	; 0x12
    2cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf6:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	f8 01       	movw	r30, r16
    2d00:	80 83       	st	Z, r24
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	a2 83       	std	Z+2, r26	; 0x02
    2d06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d08:	ce 01       	movw	r24, r28
    2d0a:	87 5b       	subi	r24, 0xB7	; 183
    2d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	fc 01       	movw	r30, r24
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	82 81       	ldd	r24, Z+2	; 0x02
    2d1e:	93 81       	ldd	r25, Z+3	; 0x03
    2d20:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    2d24:	88 23       	and	r24, r24
    2d26:	4c f4       	brge	.+18     	; 0x2d3a <main+0x6ee>
		__ticks = 1;
    2d28:	ce 01       	movw	r24, r28
    2d2a:	83 5b       	subi	r24, 0xB3	; 179
    2d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2e:	21 e0       	ldi	r18, 0x01	; 1
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	fc 01       	movw	r30, r24
    2d34:	31 83       	std	Z+1, r19	; 0x01
    2d36:	20 83       	st	Z, r18
    2d38:	69 c0       	rjmp	.+210    	; 0x2e0c <main+0x7c0>
	else if (__tmp > 65535)
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	87 5b       	subi	r24, 0xB7	; 183
    2d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	3f ef       	ldi	r19, 0xFF	; 255
    2d44:	4f e7       	ldi	r20, 0x7F	; 127
    2d46:	57 e4       	ldi	r21, 0x47	; 71
    2d48:	fc 01       	movw	r30, r24
    2d4a:	60 81       	ld	r22, Z
    2d4c:	71 81       	ldd	r23, Z+1	; 0x01
    2d4e:	82 81       	ldd	r24, Z+2	; 0x02
    2d50:	93 81       	ldd	r25, Z+3	; 0x03
    2d52:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    2d56:	18 16       	cp	r1, r24
    2d58:	0c f0       	brlt	.+2      	; 0x2d5c <main+0x710>
    2d5a:	46 c0       	rjmp	.+140    	; 0x2de8 <main+0x79c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	69 89       	ldd	r22, Y+17	; 0x11
    2d66:	7a 89       	ldd	r23, Y+18	; 0x12
    2d68:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6c:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	8e 01       	movw	r16, r28
    2d76:	03 5b       	subi	r16, 0xB3	; 179
    2d78:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	f8 01       	movw	r30, r16
    2d88:	91 83       	std	Z+1, r25	; 0x01
    2d8a:	80 83       	st	Z, r24
    2d8c:	24 c0       	rjmp	.+72     	; 0x2dd6 <main+0x78a>
    2d8e:	ce 01       	movw	r24, r28
    2d90:	81 5b       	subi	r24, 0xB1	; 177
    2d92:	9f 4f       	sbci	r25, 0xFF	; 255
    2d94:	28 ec       	ldi	r18, 0xC8	; 200
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	fc 01       	movw	r30, r24
    2d9a:	31 83       	std	Z+1, r19	; 0x01
    2d9c:	20 83       	st	Z, r18
    2d9e:	ce 01       	movw	r24, r28
    2da0:	81 5b       	subi	r24, 0xB1	; 177
    2da2:	9f 4f       	sbci	r25, 0xFF	; 255
    2da4:	fc 01       	movw	r30, r24
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <main+0x75e>
    2dae:	9e 01       	movw	r18, r28
    2db0:	21 5b       	subi	r18, 0xB1	; 177
    2db2:	3f 4f       	sbci	r19, 0xFF	; 255
    2db4:	f9 01       	movw	r30, r18
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dba:	ce 01       	movw	r24, r28
    2dbc:	83 5b       	subi	r24, 0xB3	; 179
    2dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc0:	9e 01       	movw	r18, r28
    2dc2:	23 5b       	subi	r18, 0xB3	; 179
    2dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc6:	f9 01       	movw	r30, r18
    2dc8:	20 81       	ld	r18, Z
    2dca:	31 81       	ldd	r19, Z+1	; 0x01
    2dcc:	21 50       	subi	r18, 0x01	; 1
    2dce:	31 09       	sbc	r19, r1
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	31 83       	std	Z+1, r19	; 0x01
    2dd4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	83 5b       	subi	r24, 0xB3	; 179
    2dda:	9f 4f       	sbci	r25, 0xFF	; 255
    2ddc:	fc 01       	movw	r30, r24
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	89 2b       	or	r24, r25
    2de4:	a1 f6       	brne	.-88     	; 0x2d8e <main+0x742>
    2de6:	2c c0       	rjmp	.+88     	; 0x2e40 <main+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de8:	8e 01       	movw	r16, r28
    2dea:	03 5b       	subi	r16, 0xB3	; 179
    2dec:	1f 4f       	sbci	r17, 0xFF	; 255
    2dee:	ce 01       	movw	r24, r28
    2df0:	87 5b       	subi	r24, 0xB7	; 183
    2df2:	9f 4f       	sbci	r25, 0xFF	; 255
    2df4:	fc 01       	movw	r30, r24
    2df6:	60 81       	ld	r22, Z
    2df8:	71 81       	ldd	r23, Z+1	; 0x01
    2dfa:	82 81       	ldd	r24, Z+2	; 0x02
    2dfc:	93 81       	ldd	r25, Z+3	; 0x03
    2dfe:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	f8 01       	movw	r30, r16
    2e08:	91 83       	std	Z+1, r25	; 0x01
    2e0a:	80 83       	st	Z, r24
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	8f 5a       	subi	r24, 0xAF	; 175
    2e10:	9f 4f       	sbci	r25, 0xFF	; 255
    2e12:	9e 01       	movw	r18, r28
    2e14:	23 5b       	subi	r18, 0xB3	; 179
    2e16:	3f 4f       	sbci	r19, 0xFF	; 255
    2e18:	f9 01       	movw	r30, r18
    2e1a:	20 81       	ld	r18, Z
    2e1c:	31 81       	ldd	r19, Z+1	; 0x01
    2e1e:	fc 01       	movw	r30, r24
    2e20:	31 83       	std	Z+1, r19	; 0x01
    2e22:	20 83       	st	Z, r18
    2e24:	ce 01       	movw	r24, r28
    2e26:	8f 5a       	subi	r24, 0xAF	; 175
    2e28:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	80 81       	ld	r24, Z
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <main+0x7e4>
    2e34:	9e 01       	movw	r18, r28
    2e36:	2f 5a       	subi	r18, 0xAF	; 175
    2e38:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3a:	f9 01       	movw	r30, r18
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	80 83       	st	Z, r24
		for(Loc_u8CurrentBallCol = Loc_u8PrevBallCol-1,Loc_u8CurrentBallRow+=Loc_s8RowFlag;
				Loc_u8CurrentBallCol>=LCD_COL1;
				                    Loc_u8CurrentBallCol--,Loc_u8CurrentBallRow+=Loc_s8RowFlag){

			_delay_ms(500);
			 Loc_u8PrevBallRow = Loc_u8CurrentBallRow - Loc_s8RowFlag;
    2e40:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	f9 2f       	mov	r31, r25
    2e48:	f8 1b       	sub	r31, r24
    2e4a:	8f 2f       	mov	r24, r31
    2e4c:	8c 83       	std	Y+4, r24	; 0x04
			 Loc_u8PrevBallCol = Loc_u8CurrentBallCol + 1;
    2e4e:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    2e52:	8f 5f       	subi	r24, 0xFF	; 255
    2e54:	89 83       	std	Y+1, r24	; 0x01


			 if(Loc_OnceFlag == 0){
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	88 23       	and	r24, r24
    2e5a:	41 f4       	brne	.+16     	; 0x2e6c <main+0x820>
				 Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,' ', Loc_u8PrevBallRow, Loc_u8PrevBallCol);
    2e5c:	29 81       	ldd	r18, Y+1	; 0x01
    2e5e:	4c 81       	ldd	r20, Y+4	; 0x04
    2e60:	60 e2       	ldi	r22, 0x20	; 32
    2e62:	80 e9       	ldi	r24, 0x90	; 144
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    2e6a:	0a c0       	rjmp	.+20     	; 0x2e80 <main+0x834>
			 }

			 else{
				 Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd,RIGHT_CUSTOM_INDEX,Loc_u8PrevBallRow , LCD_COL20);
    2e6c:	24 e1       	ldi	r18, 0x14	; 20
    2e6e:	4c 81       	ldd	r20, Y+4	; 0x04
    2e70:	62 e0       	ldi	r22, 0x02	; 2
    2e72:	80 e9       	ldi	r24, 0x90	; 144
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
				 				 Loc_OnceFlag =0;
    2e7a:	1b 82       	std	Y+3, r1	; 0x03
				 				 Adc_enuEnableInterrupt();
    2e7c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Adc_enuEnableInterrupt>

			 }

			 Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, THEBALL_CUSTOM_INDEX, Loc_u8CurrentBallRow, Loc_u8CurrentBallCol);
    2e80:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    2e84:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2e88:	29 2f       	mov	r18, r25
    2e8a:	48 2f       	mov	r20, r24
    2e8c:	63 e0       	ldi	r22, 0x03	; 3
    2e8e:	80 e9       	ldi	r24, 0x90	; 144
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>



			if(Loc_u8CurrentBallRow == LCD_ROW4)
    2e96:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2e9a:	84 30       	cpi	r24, 0x04	; 4
    2e9c:	19 f4       	brne	.+6      	; 0x2ea4 <main+0x858>
				Loc_s8RowFlag = -1;
    2e9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ea0:	8a 83       	std	Y+2, r24	; 0x02
    2ea2:	06 c0       	rjmp	.+12     	; 0x2eb0 <main+0x864>
			else if(Loc_u8CurrentBallRow == LCD_ROW1)
    2ea4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2ea8:	81 30       	cpi	r24, 0x01	; 1
    2eaa:	11 f4       	brne	.+4      	; 0x2eb0 <main+0x864>
				Loc_s8RowFlag = 1;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	8a 83       	std	Y+2, r24	; 0x02

			Adc_StartConversionAsync(&Adc1);
    2eb0:	8b ea       	ldi	r24, 0xAB	; 171
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Adc_StartConversionAsync>
			Adc_StartConversionAsync(&Adc4);
    2eb8:	8f ea       	ldi	r24, 0xAF	; 175
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Adc_StartConversionAsync>
		// Moving Left


		for(Loc_u8CurrentBallCol = Loc_u8PrevBallCol-1,Loc_u8CurrentBallRow+=Loc_s8RowFlag;
				Loc_u8CurrentBallCol>=LCD_COL1;
				                    Loc_u8CurrentBallCol--,Loc_u8CurrentBallRow+=Loc_s8RowFlag){
    2ec0:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    2ec4:	81 50       	subi	r24, 0x01	; 1
    2ec6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Loc_u8CurrentBallCol>
    2eca:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	89 0f       	add	r24, r25
    2ed2:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Loc_u8CurrentBallRow>

		// Moving Left


		for(Loc_u8CurrentBallCol = Loc_u8PrevBallCol-1,Loc_u8CurrentBallRow+=Loc_s8RowFlag;
				Loc_u8CurrentBallCol>=LCD_COL1;
    2ed6:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
		Loc_u8PrevBallCol = LCD_COL20;

		// Moving Left


		for(Loc_u8CurrentBallCol = Loc_u8PrevBallCol-1,Loc_u8CurrentBallRow+=Loc_s8RowFlag;
    2eda:	88 23       	and	r24, r24
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <main+0x894>
    2ede:	f8 ce       	rjmp	.-528    	; 0x2cd0 <main+0x684>

			Adc_StartConversionAsync(&Adc1);
			Adc_StartConversionAsync(&Adc4);
		}

		Adc_enuDisableInterrupt();
    2ee0:	0e 94 41 0a 	call	0x1482	; 0x1482 <Adc_enuDisableInterrupt>

		Loc_u8CurrentBallRow =Loc_u8CurrentBallRow - Loc_s8RowFlag;
    2ee4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	29 2f       	mov	r18, r25
    2eec:	28 1b       	sub	r18, r24
    2eee:	82 2f       	mov	r24, r18
    2ef0:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Loc_u8CurrentBallRow>
		Loc_u8CurrentBallCol =LCD_COL1;
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Loc_u8CurrentBallCol>

		if(Loc_u8CurrentBallRow == LCD_ROW4)
    2efa:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2efe:	84 30       	cpi	r24, 0x04	; 4
    2f00:	19 f4       	brne	.+6      	; 0x2f08 <main+0x8bc>
			Loc_s8RowFlag = -1;
    2f02:	8f ef       	ldi	r24, 0xFF	; 255
    2f04:	8a 83       	std	Y+2, r24	; 0x02
    2f06:	06 c0       	rjmp	.+12     	; 0x2f14 <main+0x8c8>
		else if(Loc_u8CurrentBallRow == LCD_ROW1)
    2f08:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	11 f4       	brne	.+4      	; 0x2f14 <main+0x8c8>
			Loc_s8RowFlag = 1;
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	8a 83       	std	Y+2, r24	; 0x02


		Loc_u8PrevBallRow = Loc_u8CurrentBallRow;
    2f14:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2f18:	8c 83       	std	Y+4, r24	; 0x04
		Loc_u8PrevBallCol = Loc_u8CurrentBallCol;
    2f1a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    2f1e:	89 83       	std	Y+1, r24	; 0x01
		if(Loc_u8CurrentBallRow == Global_u8CurrentLeftRowWall){
    2f20:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2f24:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Global_u8CurrentLeftRowWall>
    2f28:	98 17       	cp	r25, r24
    2f2a:	71 f4       	brne	.+28     	; 0x2f48 <main+0x8fc>

			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, HITRIGHT_CUSTOM_INDEX, Loc_u8CurrentBallRow, Loc_u8CurrentBallCol);
    2f2c:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    2f30:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    2f34:	29 2f       	mov	r18, r25
    2f36:	48 2f       	mov	r20, r24
    2f38:	64 e0       	ldi	r22, 0x04	; 4
    2f3a:	80 e9       	ldi	r24, 0x90	; 144
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Loc_OnceFlag = 1;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	8b 83       	std	Y+3, r24	; 0x03
    2f46:	6a cc       	rjmp	.-1836   	; 0x281c <main+0x1d0>
		}
		else{

			Gie_enuDisableGlobalInterrupt();
    2f48:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Gie_enuDisableGlobalInterrupt>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	aa ef       	ldi	r26, 0xFA	; 250
    2f52:	b3 e4       	ldi	r27, 0x43	; 67
    2f54:	8d 87       	std	Y+13, r24	; 0x0d
    2f56:	9e 87       	std	Y+14, r25	; 0x0e
    2f58:	af 87       	std	Y+15, r26	; 0x0f
    2f5a:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f5c:	8e 01       	movw	r16, r28
    2f5e:	03 5a       	subi	r16, 0xA3	; 163
    2f60:	1f 4f       	sbci	r17, 0xFF	; 255
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	4a ef       	ldi	r20, 0xFA	; 250
    2f68:	54 e4       	ldi	r21, 0x44	; 68
    2f6a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f6c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f70:	98 89       	ldd	r25, Y+16	; 0x10
    2f72:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	80 83       	st	Z, r24
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	a2 83       	std	Z+2, r26	; 0x02
    2f82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f84:	ce 01       	movw	r24, r28
    2f86:	83 5a       	subi	r24, 0xA3	; 163
    2f88:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	fc 01       	movw	r30, r24
    2f94:	60 81       	ld	r22, Z
    2f96:	71 81       	ldd	r23, Z+1	; 0x01
    2f98:	82 81       	ldd	r24, Z+2	; 0x02
    2f9a:	93 81       	ldd	r25, Z+3	; 0x03
    2f9c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    2fa0:	88 23       	and	r24, r24
    2fa2:	4c f4       	brge	.+18     	; 0x2fb6 <main+0x96a>
		__ticks = 1;
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	8f 59       	subi	r24, 0x9F	; 159
    2fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    2faa:	21 e0       	ldi	r18, 0x01	; 1
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	fc 01       	movw	r30, r24
    2fb0:	31 83       	std	Z+1, r19	; 0x01
    2fb2:	20 83       	st	Z, r18
    2fb4:	69 c0       	rjmp	.+210    	; 0x3088 <main+0xa3c>
	else if (__tmp > 65535)
    2fb6:	ce 01       	movw	r24, r28
    2fb8:	83 5a       	subi	r24, 0xA3	; 163
    2fba:	9f 4f       	sbci	r25, 0xFF	; 255
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	3f ef       	ldi	r19, 0xFF	; 255
    2fc0:	4f e7       	ldi	r20, 0x7F	; 127
    2fc2:	57 e4       	ldi	r21, 0x47	; 71
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	60 81       	ld	r22, Z
    2fc8:	71 81       	ldd	r23, Z+1	; 0x01
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    2fd2:	18 16       	cp	r1, r24
    2fd4:	0c f0       	brlt	.+2      	; 0x2fd8 <main+0x98c>
    2fd6:	46 c0       	rjmp	.+140    	; 0x3064 <main+0xa18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	40 e2       	ldi	r20, 0x20	; 32
    2fde:	51 e4       	ldi	r21, 0x41	; 65
    2fe0:	6d 85       	ldd	r22, Y+13	; 0x0d
    2fe2:	7e 85       	ldd	r23, Y+14	; 0x0e
    2fe4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe6:	98 89       	ldd	r25, Y+16	; 0x10
    2fe8:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	8e 01       	movw	r16, r28
    2ff2:	0f 59       	subi	r16, 0x9F	; 159
    2ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	f8 01       	movw	r30, r16
    3004:	91 83       	std	Z+1, r25	; 0x01
    3006:	80 83       	st	Z, r24
    3008:	24 c0       	rjmp	.+72     	; 0x3052 <main+0xa06>
    300a:	ce 01       	movw	r24, r28
    300c:	8d 59       	subi	r24, 0x9D	; 157
    300e:	9f 4f       	sbci	r25, 0xFF	; 255
    3010:	28 ec       	ldi	r18, 0xC8	; 200
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	fc 01       	movw	r30, r24
    3016:	31 83       	std	Z+1, r19	; 0x01
    3018:	20 83       	st	Z, r18
    301a:	ce 01       	movw	r24, r28
    301c:	8d 59       	subi	r24, 0x9D	; 157
    301e:	9f 4f       	sbci	r25, 0xFF	; 255
    3020:	fc 01       	movw	r30, r24
    3022:	80 81       	ld	r24, Z
    3024:	91 81       	ldd	r25, Z+1	; 0x01
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <main+0x9da>
    302a:	9e 01       	movw	r18, r28
    302c:	2d 59       	subi	r18, 0x9D	; 157
    302e:	3f 4f       	sbci	r19, 0xFF	; 255
    3030:	f9 01       	movw	r30, r18
    3032:	91 83       	std	Z+1, r25	; 0x01
    3034:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3036:	ce 01       	movw	r24, r28
    3038:	8f 59       	subi	r24, 0x9F	; 159
    303a:	9f 4f       	sbci	r25, 0xFF	; 255
    303c:	9e 01       	movw	r18, r28
    303e:	2f 59       	subi	r18, 0x9F	; 159
    3040:	3f 4f       	sbci	r19, 0xFF	; 255
    3042:	f9 01       	movw	r30, r18
    3044:	20 81       	ld	r18, Z
    3046:	31 81       	ldd	r19, Z+1	; 0x01
    3048:	21 50       	subi	r18, 0x01	; 1
    304a:	31 09       	sbc	r19, r1
    304c:	fc 01       	movw	r30, r24
    304e:	31 83       	std	Z+1, r19	; 0x01
    3050:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3052:	ce 01       	movw	r24, r28
    3054:	8f 59       	subi	r24, 0x9F	; 159
    3056:	9f 4f       	sbci	r25, 0xFF	; 255
    3058:	fc 01       	movw	r30, r24
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	89 2b       	or	r24, r25
    3060:	a1 f6       	brne	.-88     	; 0x300a <main+0x9be>
    3062:	2c c0       	rjmp	.+88     	; 0x30bc <main+0xa70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3064:	8e 01       	movw	r16, r28
    3066:	0f 59       	subi	r16, 0x9F	; 159
    3068:	1f 4f       	sbci	r17, 0xFF	; 255
    306a:	ce 01       	movw	r24, r28
    306c:	83 5a       	subi	r24, 0xA3	; 163
    306e:	9f 4f       	sbci	r25, 0xFF	; 255
    3070:	fc 01       	movw	r30, r24
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	f8 01       	movw	r30, r16
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	80 83       	st	Z, r24
    3088:	ce 01       	movw	r24, r28
    308a:	8b 59       	subi	r24, 0x9B	; 155
    308c:	9f 4f       	sbci	r25, 0xFF	; 255
    308e:	9e 01       	movw	r18, r28
    3090:	2f 59       	subi	r18, 0x9F	; 159
    3092:	3f 4f       	sbci	r19, 0xFF	; 255
    3094:	f9 01       	movw	r30, r18
    3096:	20 81       	ld	r18, Z
    3098:	31 81       	ldd	r19, Z+1	; 0x01
    309a:	fc 01       	movw	r30, r24
    309c:	31 83       	std	Z+1, r19	; 0x01
    309e:	20 83       	st	Z, r18
    30a0:	ce 01       	movw	r24, r28
    30a2:	8b 59       	subi	r24, 0x9B	; 155
    30a4:	9f 4f       	sbci	r25, 0xFF	; 255
    30a6:	fc 01       	movw	r30, r24
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <main+0xa60>
    30b0:	9e 01       	movw	r18, r28
    30b2:	2b 59       	subi	r18, 0x9B	; 155
    30b4:	3f 4f       	sbci	r19, 0xFF	; 255
    30b6:	f9 01       	movw	r30, r18
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	80 83       	st	Z, r24
			_delay_ms(500);
			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    30bc:	61 e0       	ldi	r22, 0x01	; 1
    30be:	80 e9       	ldi	r24, 0x90	; 144
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_4bit_enuSendCommand>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	a0 e4       	ldi	r26, 0x40	; 64
    30cc:	b0 e4       	ldi	r27, 0x40	; 64
    30ce:	89 87       	std	Y+9, r24	; 0x09
    30d0:	9a 87       	std	Y+10, r25	; 0x0a
    30d2:	ab 87       	std	Y+11, r26	; 0x0b
    30d4:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    30d6:	8e 01       	movw	r16, r28
    30d8:	0d 5a       	subi	r16, 0xAD	; 173
    30da:	1f 4f       	sbci	r17, 0xFF	; 255
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4a ef       	ldi	r20, 0xFA	; 250
    30e2:	54 e4       	ldi	r21, 0x44	; 68
    30e4:	69 85       	ldd	r22, Y+9	; 0x09
    30e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    30e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    30ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    30ec:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	f8 01       	movw	r30, r16
    30f6:	80 83       	st	Z, r24
    30f8:	91 83       	std	Z+1, r25	; 0x01
    30fa:	a2 83       	std	Z+2, r26	; 0x02
    30fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30fe:	ce 01       	movw	r24, r28
    3100:	8d 5a       	subi	r24, 0xAD	; 173
    3102:	9f 4f       	sbci	r25, 0xFF	; 255
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e8       	ldi	r20, 0x80	; 128
    310a:	5f e3       	ldi	r21, 0x3F	; 63
    310c:	fc 01       	movw	r30, r24
    310e:	60 81       	ld	r22, Z
    3110:	71 81       	ldd	r23, Z+1	; 0x01
    3112:	82 81       	ldd	r24, Z+2	; 0x02
    3114:	93 81       	ldd	r25, Z+3	; 0x03
    3116:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__cmpsf2>
    311a:	88 23       	and	r24, r24
    311c:	4c f4       	brge	.+18     	; 0x3130 <main+0xae4>
		__ticks = 1;
    311e:	ce 01       	movw	r24, r28
    3120:	89 5a       	subi	r24, 0xA9	; 169
    3122:	9f 4f       	sbci	r25, 0xFF	; 255
    3124:	21 e0       	ldi	r18, 0x01	; 1
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	fc 01       	movw	r30, r24
    312a:	31 83       	std	Z+1, r19	; 0x01
    312c:	20 83       	st	Z, r18
    312e:	69 c0       	rjmp	.+210    	; 0x3202 <main+0xbb6>
	else if (__tmp > 65535)
    3130:	ce 01       	movw	r24, r28
    3132:	8d 5a       	subi	r24, 0xAD	; 173
    3134:	9f 4f       	sbci	r25, 0xFF	; 255
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	3f ef       	ldi	r19, 0xFF	; 255
    313a:	4f e7       	ldi	r20, 0x7F	; 127
    313c:	57 e4       	ldi	r21, 0x47	; 71
    313e:	fc 01       	movw	r30, r24
    3140:	60 81       	ld	r22, Z
    3142:	71 81       	ldd	r23, Z+1	; 0x01
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	93 81       	ldd	r25, Z+3	; 0x03
    3148:	0e 94 49 1c 	call	0x3892	; 0x3892 <__gesf2>
    314c:	18 16       	cp	r1, r24
    314e:	0c f0       	brlt	.+2      	; 0x3152 <main+0xb06>
    3150:	46 c0       	rjmp	.+140    	; 0x31de <main+0xb92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e2       	ldi	r20, 0x20	; 32
    3158:	51 e4       	ldi	r21, 0x41	; 65
    315a:	69 85       	ldd	r22, Y+9	; 0x09
    315c:	7a 85       	ldd	r23, Y+10	; 0x0a
    315e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3160:	9c 85       	ldd	r25, Y+12	; 0x0c
    3162:	0e 94 4e 1c 	call	0x389c	; 0x389c <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	8e 01       	movw	r16, r28
    316c:	09 5a       	subi	r16, 0xA9	; 169
    316e:	1f 4f       	sbci	r17, 0xFF	; 255
    3170:	bc 01       	movw	r22, r24
    3172:	cd 01       	movw	r24, r26
    3174:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	f8 01       	movw	r30, r16
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	80 83       	st	Z, r24
    3182:	24 c0       	rjmp	.+72     	; 0x31cc <main+0xb80>
    3184:	ce 01       	movw	r24, r28
    3186:	87 5a       	subi	r24, 0xA7	; 167
    3188:	9f 4f       	sbci	r25, 0xFF	; 255
    318a:	28 ec       	ldi	r18, 0xC8	; 200
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	fc 01       	movw	r30, r24
    3190:	31 83       	std	Z+1, r19	; 0x01
    3192:	20 83       	st	Z, r18
    3194:	ce 01       	movw	r24, r28
    3196:	87 5a       	subi	r24, 0xA7	; 167
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	fc 01       	movw	r30, r24
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <main+0xb54>
    31a4:	9e 01       	movw	r18, r28
    31a6:	27 5a       	subi	r18, 0xA7	; 167
    31a8:	3f 4f       	sbci	r19, 0xFF	; 255
    31aa:	f9 01       	movw	r30, r18
    31ac:	91 83       	std	Z+1, r25	; 0x01
    31ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b0:	ce 01       	movw	r24, r28
    31b2:	89 5a       	subi	r24, 0xA9	; 169
    31b4:	9f 4f       	sbci	r25, 0xFF	; 255
    31b6:	9e 01       	movw	r18, r28
    31b8:	29 5a       	subi	r18, 0xA9	; 169
    31ba:	3f 4f       	sbci	r19, 0xFF	; 255
    31bc:	f9 01       	movw	r30, r18
    31be:	20 81       	ld	r18, Z
    31c0:	31 81       	ldd	r19, Z+1	; 0x01
    31c2:	21 50       	subi	r18, 0x01	; 1
    31c4:	31 09       	sbc	r19, r1
    31c6:	fc 01       	movw	r30, r24
    31c8:	31 83       	std	Z+1, r19	; 0x01
    31ca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31cc:	ce 01       	movw	r24, r28
    31ce:	89 5a       	subi	r24, 0xA9	; 169
    31d0:	9f 4f       	sbci	r25, 0xFF	; 255
    31d2:	fc 01       	movw	r30, r24
    31d4:	80 81       	ld	r24, Z
    31d6:	91 81       	ldd	r25, Z+1	; 0x01
    31d8:	89 2b       	or	r24, r25
    31da:	a1 f6       	brne	.-88     	; 0x3184 <main+0xb38>
    31dc:	2c c0       	rjmp	.+88     	; 0x3236 <main+0xbea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31de:	8e 01       	movw	r16, r28
    31e0:	09 5a       	subi	r16, 0xA9	; 169
    31e2:	1f 4f       	sbci	r17, 0xFF	; 255
    31e4:	ce 01       	movw	r24, r28
    31e6:	8d 5a       	subi	r24, 0xAD	; 173
    31e8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ea:	fc 01       	movw	r30, r24
    31ec:	60 81       	ld	r22, Z
    31ee:	71 81       	ldd	r23, Z+1	; 0x01
    31f0:	82 81       	ldd	r24, Z+2	; 0x02
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	f8 01       	movw	r30, r16
    31fe:	91 83       	std	Z+1, r25	; 0x01
    3200:	80 83       	st	Z, r24
    3202:	ce 01       	movw	r24, r28
    3204:	85 5a       	subi	r24, 0xA5	; 165
    3206:	9f 4f       	sbci	r25, 0xFF	; 255
    3208:	9e 01       	movw	r18, r28
    320a:	29 5a       	subi	r18, 0xA9	; 169
    320c:	3f 4f       	sbci	r19, 0xFF	; 255
    320e:	f9 01       	movw	r30, r18
    3210:	20 81       	ld	r18, Z
    3212:	31 81       	ldd	r19, Z+1	; 0x01
    3214:	fc 01       	movw	r30, r24
    3216:	31 83       	std	Z+1, r19	; 0x01
    3218:	20 83       	st	Z, r18
    321a:	ce 01       	movw	r24, r28
    321c:	85 5a       	subi	r24, 0xA5	; 165
    321e:	9f 4f       	sbci	r25, 0xFF	; 255
    3220:	fc 01       	movw	r30, r24
    3222:	80 81       	ld	r24, Z
    3224:	91 81       	ldd	r25, Z+1	; 0x01
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	f1 f7       	brne	.-4      	; 0x3226 <main+0xbda>
    322a:	9e 01       	movw	r18, r28
    322c:	25 5a       	subi	r18, 0xA5	; 165
    322e:	3f 4f       	sbci	r19, 0xFF	; 255
    3230:	f9 01       	movw	r30, r18
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	80 83       	st	Z, r24
			_delay_ms(3);
			Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2,LCD_COL5);
    3236:	45 e0       	ldi	r20, 0x05	; 5
    3238:	62 e0       	ldi	r22, 0x02	; 2
    323a:	80 e9       	ldi	r24, 0x90	; 144
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <Lcd_4bit_enuGoToXY>

			Lcd_4bit_enuDisplayString(&Lcd, " GAME OVER");
    3242:	65 ee       	ldi	r22, 0xE5	; 229
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	80 e9       	ldi	r24, 0x90	; 144
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <Lcd_4bit_enuDisplayString>
			while(1);
    324e:	ff cf       	rjmp	.-2      	; 0x324e <main+0xc02>

00003250 <Application_Adc1Left>:
	return 0;
}



void Application_Adc1Left(u16 Copy_u16Result){
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	00 d0       	rcall	.+0      	; 0x3256 <Application_Adc1Left+0x6>
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	9a 83       	std	Y+2, r25	; 0x02
    325c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u16Result<=255){
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	9a 81       	ldd	r25, Y+2	; 0x02
    3262:	8f 3f       	cpi	r24, 0xFF	; 255
    3264:	91 05       	cpc	r25, r1
    3266:	09 f0       	breq	.+2      	; 0x326a <Application_Adc1Left+0x1a>
    3268:	c8 f4       	brcc	.+50     	; 0x329c <Application_Adc1Left+0x4c>

		// ROW 4
			Global_u8CurrentLeftRowWall =LCD_ROW4;
    326a:	84 e0       	ldi	r24, 0x04	; 4
    326c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Global_u8CurrentLeftRowWall>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW1, LCD_COL1);
    3270:	21 e0       	ldi	r18, 0x01	; 1
    3272:	41 e0       	ldi	r20, 0x01	; 1
    3274:	60 e2       	ldi	r22, 0x20	; 32
    3276:	80 e9       	ldi	r24, 0x90	; 144
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL1);
    327e:	21 e0       	ldi	r18, 0x01	; 1
    3280:	42 e0       	ldi	r20, 0x02	; 2
    3282:	60 e2       	ldi	r22, 0x20	; 32
    3284:	80 e9       	ldi	r24, 0x90	; 144
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW3, LCD_COL1);
    328c:	21 e0       	ldi	r18, 0x01	; 1
    328e:	43 e0       	ldi	r20, 0x03	; 3
    3290:	60 e2       	ldi	r22, 0x20	; 32
    3292:	80 e9       	ldi	r24, 0x90	; 144
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    329a:	54 c0       	rjmp	.+168    	; 0x3344 <Application_Adc1Left+0xf4>
//			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LEFT_CUSTOM_INDEX, LCD_ROW4, LCD_COL1);

		}

		else if(Copy_u16Result<=511){
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	9a 81       	ldd	r25, Y+2	; 0x02
    32a0:	81 15       	cp	r24, r1
    32a2:	92 40       	sbci	r25, 0x02	; 2
    32a4:	c8 f4       	brcc	.+50     	; 0x32d8 <Application_Adc1Left+0x88>
			// ROW3
			Global_u8CurrentLeftRowWall =LCD_ROW3;
    32a6:	83 e0       	ldi	r24, 0x03	; 3
    32a8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Global_u8CurrentLeftRowWall>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW1, LCD_COL1);
    32ac:	21 e0       	ldi	r18, 0x01	; 1
    32ae:	41 e0       	ldi	r20, 0x01	; 1
    32b0:	60 e2       	ldi	r22, 0x20	; 32
    32b2:	80 e9       	ldi	r24, 0x90	; 144
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL1);
    32ba:	21 e0       	ldi	r18, 0x01	; 1
    32bc:	42 e0       	ldi	r20, 0x02	; 2
    32be:	60 e2       	ldi	r22, 0x20	; 32
    32c0:	80 e9       	ldi	r24, 0x90	; 144
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW4, LCD_COL1);
    32c8:	21 e0       	ldi	r18, 0x01	; 1
    32ca:	44 e0       	ldi	r20, 0x04	; 4
    32cc:	60 e2       	ldi	r22, 0x20	; 32
    32ce:	80 e9       	ldi	r24, 0x90	; 144
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    32d6:	36 c0       	rjmp	.+108    	; 0x3344 <Application_Adc1Left+0xf4>
//			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LEFT_CUSTOM_INDEX, LCD_ROW3, LCD_COL1);



			}
		else if(Copy_u16Result<=767){
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	9a 81       	ldd	r25, Y+2	; 0x02
    32dc:	81 15       	cp	r24, r1
    32de:	93 40       	sbci	r25, 0x03	; 3
    32e0:	c8 f4       	brcc	.+50     	; 0x3314 <Application_Adc1Left+0xc4>
			// ROW 2
			Global_u8CurrentLeftRowWall =LCD_ROW2;
    32e2:	82 e0       	ldi	r24, 0x02	; 2
    32e4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Global_u8CurrentLeftRowWall>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW1, LCD_COL1);
    32e8:	21 e0       	ldi	r18, 0x01	; 1
    32ea:	41 e0       	ldi	r20, 0x01	; 1
    32ec:	60 e2       	ldi	r22, 0x20	; 32
    32ee:	80 e9       	ldi	r24, 0x90	; 144
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW3, LCD_COL1);
    32f6:	21 e0       	ldi	r18, 0x01	; 1
    32f8:	43 e0       	ldi	r20, 0x03	; 3
    32fa:	60 e2       	ldi	r22, 0x20	; 32
    32fc:	80 e9       	ldi	r24, 0x90	; 144
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW4, LCD_COL1);
    3304:	21 e0       	ldi	r18, 0x01	; 1
    3306:	44 e0       	ldi	r20, 0x04	; 4
    3308:	60 e2       	ldi	r22, 0x20	; 32
    330a:	80 e9       	ldi	r24, 0x90	; 144
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    3312:	18 c0       	rjmp	.+48     	; 0x3344 <Application_Adc1Left+0xf4>
		}
		else{


			// ROW 1
			Global_u8CurrentLeftRowWall =LCD_ROW1;
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Global_u8CurrentLeftRowWall>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW3, LCD_COL1);
    331a:	21 e0       	ldi	r18, 0x01	; 1
    331c:	43 e0       	ldi	r20, 0x03	; 3
    331e:	60 e2       	ldi	r22, 0x20	; 32
    3320:	80 e9       	ldi	r24, 0x90	; 144
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL1);
    3328:	21 e0       	ldi	r18, 0x01	; 1
    332a:	42 e0       	ldi	r20, 0x02	; 2
    332c:	60 e2       	ldi	r22, 0x20	; 32
    332e:	80 e9       	ldi	r24, 0x90	; 144
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW4, LCD_COL1);
    3336:	21 e0       	ldi	r18, 0x01	; 1
    3338:	44 e0       	ldi	r20, 0x04	; 4
    333a:	60 e2       	ldi	r22, 0x20	; 32
    333c:	80 e9       	ldi	r24, 0x90	; 144
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
//			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LEFT_CUSTOM_INDEX, LCD_ROW1, LCD_COL1);


		}

	if(Global_u8CurrentLeftRowWall == Loc_u8CurrentBallRow && Loc_u8CurrentBallCol == LCD_COL1)
    3344:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <Global_u8CurrentLeftRowWall>
    3348:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    334c:	98 17       	cp	r25, r24
    334e:	71 f4       	brne	.+28     	; 0x336c <Application_Adc1Left+0x11c>
    3350:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    3354:	81 30       	cpi	r24, 0x01	; 1
    3356:	51 f4       	brne	.+20     	; 0x336c <Application_Adc1Left+0x11c>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, HITLEF_CUSTOM_INDEX, Loc_u8CurrentBallRow, LCD_COL1);
    3358:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    335c:	21 e0       	ldi	r18, 0x01	; 1
    335e:	48 2f       	mov	r20, r24
    3360:	65 e0       	ldi	r22, 0x05	; 5
    3362:	80 e9       	ldi	r24, 0x90	; 144
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    336a:	09 c0       	rjmp	.+18     	; 0x337e <Application_Adc1Left+0x12e>
	else{
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LEFT_CUSTOM_INDEX, Global_u8CurrentLeftRowWall, LCD_COL1);
    336c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Global_u8CurrentLeftRowWall>
    3370:	21 e0       	ldi	r18, 0x01	; 1
    3372:	48 2f       	mov	r20, r24
    3374:	61 e0       	ldi	r22, 0x01	; 1
    3376:	80 e9       	ldi	r24, 0x90	; 144
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>

	}


}
    337e:	00 00       	nop
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	08 95       	ret

0000338a <Application_Adc4Right>:



void Application_Adc4Right(u16 Copy_u16Result){
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	00 d0       	rcall	.+0      	; 0x3390 <Application_Adc4Right+0x6>
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	9a 83       	std	Y+2, r25	; 0x02
    3396:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16Result<=255){
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	9a 81       	ldd	r25, Y+2	; 0x02
    339c:	8f 3f       	cpi	r24, 0xFF	; 255
    339e:	91 05       	cpc	r25, r1
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <Application_Adc4Right+0x1a>
    33a2:	c8 f4       	brcc	.+50     	; 0x33d6 <Application_Adc4Right+0x4c>

		// ROW 4
			Global_u8CurrentRightRowWall =LCD_ROW4;
    33a4:	84 e0       	ldi	r24, 0x04	; 4
    33a6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8CurrentRightRowWall>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW1, LCD_COL20);
    33aa:	24 e1       	ldi	r18, 0x14	; 20
    33ac:	41 e0       	ldi	r20, 0x01	; 1
    33ae:	60 e2       	ldi	r22, 0x20	; 32
    33b0:	80 e9       	ldi	r24, 0x90	; 144
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL20);
    33b8:	24 e1       	ldi	r18, 0x14	; 20
    33ba:	42 e0       	ldi	r20, 0x02	; 2
    33bc:	60 e2       	ldi	r22, 0x20	; 32
    33be:	80 e9       	ldi	r24, 0x90	; 144
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW3, LCD_COL20);
    33c6:	24 e1       	ldi	r18, 0x14	; 20
    33c8:	43 e0       	ldi	r20, 0x03	; 3
    33ca:	60 e2       	ldi	r22, 0x20	; 32
    33cc:	80 e9       	ldi	r24, 0x90	; 144
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    33d4:	54 c0       	rjmp	.+168    	; 0x347e <Application_Adc4Right+0xf4>
//			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, RIGHT_CUSTOM_INDEX ,LCD_ROW4, LCD_COL20);


		}

		else if(Copy_u16Result<=511){
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	9a 81       	ldd	r25, Y+2	; 0x02
    33da:	81 15       	cp	r24, r1
    33dc:	92 40       	sbci	r25, 0x02	; 2
    33de:	c8 f4       	brcc	.+50     	; 0x3412 <Application_Adc4Right+0x88>
			// ROW3
			Global_u8CurrentRightRowWall =LCD_ROW3;
    33e0:	83 e0       	ldi	r24, 0x03	; 3
    33e2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8CurrentRightRowWall>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW1, LCD_COL20);
    33e6:	24 e1       	ldi	r18, 0x14	; 20
    33e8:	41 e0       	ldi	r20, 0x01	; 1
    33ea:	60 e2       	ldi	r22, 0x20	; 32
    33ec:	80 e9       	ldi	r24, 0x90	; 144
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL20);
    33f4:	24 e1       	ldi	r18, 0x14	; 20
    33f6:	42 e0       	ldi	r20, 0x02	; 2
    33f8:	60 e2       	ldi	r22, 0x20	; 32
    33fa:	80 e9       	ldi	r24, 0x90	; 144
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW4, LCD_COL20);
    3402:	24 e1       	ldi	r18, 0x14	; 20
    3404:	44 e0       	ldi	r20, 0x04	; 4
    3406:	60 e2       	ldi	r22, 0x20	; 32
    3408:	80 e9       	ldi	r24, 0x90	; 144
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    3410:	36 c0       	rjmp	.+108    	; 0x347e <Application_Adc4Right+0xf4>
//			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, RIGHT_CUSTOM_INDEX, LCD_ROW3, LCD_COL20);

			}
		else if(Copy_u16Result<=767){
    3412:	89 81       	ldd	r24, Y+1	; 0x01
    3414:	9a 81       	ldd	r25, Y+2	; 0x02
    3416:	81 15       	cp	r24, r1
    3418:	93 40       	sbci	r25, 0x03	; 3
    341a:	c8 f4       	brcc	.+50     	; 0x344e <Application_Adc4Right+0xc4>
			// ROW 2
			Global_u8CurrentRightRowWall =LCD_ROW2;
    341c:	82 e0       	ldi	r24, 0x02	; 2
    341e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8CurrentRightRowWall>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW1, LCD_COL20);
    3422:	24 e1       	ldi	r18, 0x14	; 20
    3424:	41 e0       	ldi	r20, 0x01	; 1
    3426:	60 e2       	ldi	r22, 0x20	; 32
    3428:	80 e9       	ldi	r24, 0x90	; 144
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW3, LCD_COL20);
    3430:	24 e1       	ldi	r18, 0x14	; 20
    3432:	43 e0       	ldi	r20, 0x03	; 3
    3434:	60 e2       	ldi	r22, 0x20	; 32
    3436:	80 e9       	ldi	r24, 0x90	; 144
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW4, LCD_COL20);
    343e:	24 e1       	ldi	r18, 0x14	; 20
    3440:	44 e0       	ldi	r20, 0x04	; 4
    3442:	60 e2       	ldi	r22, 0x20	; 32
    3444:	80 e9       	ldi	r24, 0x90	; 144
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    344c:	18 c0       	rjmp	.+48     	; 0x347e <Application_Adc4Right+0xf4>

		}
		else{

			// ROW 1
			Global_u8CurrentRightRowWall =LCD_ROW1;
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <Global_u8CurrentRightRowWall>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW3, LCD_COL20);
    3454:	24 e1       	ldi	r18, 0x14	; 20
    3456:	43 e0       	ldi	r20, 0x03	; 3
    3458:	60 e2       	ldi	r22, 0x20	; 32
    345a:	80 e9       	ldi	r24, 0x90	; 144
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW2, LCD_COL20);
    3462:	24 e1       	ldi	r18, 0x14	; 20
    3464:	42 e0       	ldi	r20, 0x02	; 2
    3466:	60 e2       	ldi	r22, 0x20	; 32
    3468:	80 e9       	ldi	r24, 0x90	; 144
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ' ', LCD_ROW4, LCD_COL20);
    3470:	24 e1       	ldi	r18, 0x14	; 20
    3472:	44 e0       	ldi	r20, 0x04	; 4
    3474:	60 e2       	ldi	r22, 0x20	; 32
    3476:	80 e9       	ldi	r24, 0x90	; 144
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
//			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, RIGHT_CUSTOM_INDEX, LCD_ROW1, LCD_COL20);

		}

	if(Global_u8CurrentRightRowWall == Loc_u8CurrentBallRow && Loc_u8CurrentBallCol == 20)
    347e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <Global_u8CurrentRightRowWall>
    3482:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    3486:	98 17       	cp	r25, r24
    3488:	71 f4       	brne	.+28     	; 0x34a6 <Application_Adc4Right+0x11c>
    348a:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Loc_u8CurrentBallCol>
    348e:	84 31       	cpi	r24, 0x14	; 20
    3490:	51 f4       	brne	.+20     	; 0x34a6 <Application_Adc4Right+0x11c>
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, HITRIGHT_CUSTOM_INDEX, Loc_u8CurrentBallRow, LCD_COL20);
    3492:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Loc_u8CurrentBallRow>
    3496:	24 e1       	ldi	r18, 0x14	; 20
    3498:	48 2f       	mov	r20, r24
    349a:	64 e0       	ldi	r22, 0x04	; 4
    349c:	80 e9       	ldi	r24, 0x90	; 144
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
    34a4:	09 c0       	rjmp	.+18     	; 0x34b8 <Application_Adc4Right+0x12e>
	else{
		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, RIGHT_CUSTOM_INDEX, Global_u8CurrentRightRowWall, LCD_COL20);
    34a6:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <Global_u8CurrentRightRowWall>
    34aa:	24 e1       	ldi	r18, 0x14	; 20
    34ac:	48 2f       	mov	r20, r24
    34ae:	62 e0       	ldi	r22, 0x02	; 2
    34b0:	80 e9       	ldi	r24, 0x90	; 144
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Lcd_4bit_enuDisplayCharacterWithPosition>
	}

//			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, RIGHT_CUSTOM_INDEX, Global_u8CurrentRightRowWall, LCD_COL20);

}
    34b8:	00 00       	nop
    34ba:	0f 90       	pop	r0
    34bc:	0f 90       	pop	r0
    34be:	df 91       	pop	r29
    34c0:	cf 91       	pop	r28
    34c2:	08 95       	ret

000034c4 <__ashldi3>:
    34c4:	0f 93       	push	r16
    34c6:	08 30       	cpi	r16, 0x08	; 8
    34c8:	90 f0       	brcs	.+36     	; 0x34ee <__ashldi3+0x2a>
    34ca:	98 2f       	mov	r25, r24
    34cc:	87 2f       	mov	r24, r23
    34ce:	76 2f       	mov	r23, r22
    34d0:	65 2f       	mov	r22, r21
    34d2:	54 2f       	mov	r21, r20
    34d4:	43 2f       	mov	r20, r19
    34d6:	32 2f       	mov	r19, r18
    34d8:	22 27       	eor	r18, r18
    34da:	08 50       	subi	r16, 0x08	; 8
    34dc:	f4 cf       	rjmp	.-24     	; 0x34c6 <__ashldi3+0x2>
    34de:	22 0f       	add	r18, r18
    34e0:	33 1f       	adc	r19, r19
    34e2:	44 1f       	adc	r20, r20
    34e4:	55 1f       	adc	r21, r21
    34e6:	66 1f       	adc	r22, r22
    34e8:	77 1f       	adc	r23, r23
    34ea:	88 1f       	adc	r24, r24
    34ec:	99 1f       	adc	r25, r25
    34ee:	0a 95       	dec	r16
    34f0:	b2 f7       	brpl	.-20     	; 0x34de <__ashldi3+0x1a>
    34f2:	0f 91       	pop	r16
    34f4:	08 95       	ret

000034f6 <__adddi3>:
    34f6:	2a 0d       	add	r18, r10
    34f8:	3b 1d       	adc	r19, r11
    34fa:	4c 1d       	adc	r20, r12
    34fc:	5d 1d       	adc	r21, r13
    34fe:	6e 1d       	adc	r22, r14
    3500:	7f 1d       	adc	r23, r15
    3502:	80 1f       	adc	r24, r16
    3504:	91 1f       	adc	r25, r17
    3506:	08 95       	ret

00003508 <__subsf3>:
    3508:	50 58       	subi	r21, 0x80	; 128

0000350a <__addsf3>:
    350a:	bb 27       	eor	r27, r27
    350c:	aa 27       	eor	r26, r26
    350e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__addsf3x>
    3512:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__fp_round>
    3516:	0e 94 01 1c 	call	0x3802	; 0x3802 <__fp_pscA>
    351a:	38 f0       	brcs	.+14     	; 0x352a <__addsf3+0x20>
    351c:	0e 94 08 1c 	call	0x3810	; 0x3810 <__fp_pscB>
    3520:	20 f0       	brcs	.+8      	; 0x352a <__addsf3+0x20>
    3522:	39 f4       	brne	.+14     	; 0x3532 <__addsf3+0x28>
    3524:	9f 3f       	cpi	r25, 0xFF	; 255
    3526:	19 f4       	brne	.+6      	; 0x352e <__addsf3+0x24>
    3528:	26 f4       	brtc	.+8      	; 0x3532 <__addsf3+0x28>
    352a:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__fp_nan>
    352e:	0e f4       	brtc	.+2      	; 0x3532 <__addsf3+0x28>
    3530:	e0 95       	com	r30
    3532:	e7 fb       	bst	r30, 7
    3534:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_inf>

00003538 <__addsf3x>:
    3538:	e9 2f       	mov	r30, r25
    353a:	0e 94 20 1c 	call	0x3840	; 0x3840 <__fp_split3>
    353e:	58 f3       	brcs	.-42     	; 0x3516 <__addsf3+0xc>
    3540:	ba 17       	cp	r27, r26
    3542:	62 07       	cpc	r22, r18
    3544:	73 07       	cpc	r23, r19
    3546:	84 07       	cpc	r24, r20
    3548:	95 07       	cpc	r25, r21
    354a:	20 f0       	brcs	.+8      	; 0x3554 <__addsf3x+0x1c>
    354c:	79 f4       	brne	.+30     	; 0x356c <__addsf3x+0x34>
    354e:	a6 f5       	brtc	.+104    	; 0x35b8 <__addsf3x+0x80>
    3550:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__fp_zero>
    3554:	0e f4       	brtc	.+2      	; 0x3558 <__addsf3x+0x20>
    3556:	e0 95       	com	r30
    3558:	0b 2e       	mov	r0, r27
    355a:	ba 2f       	mov	r27, r26
    355c:	a0 2d       	mov	r26, r0
    355e:	0b 01       	movw	r0, r22
    3560:	b9 01       	movw	r22, r18
    3562:	90 01       	movw	r18, r0
    3564:	0c 01       	movw	r0, r24
    3566:	ca 01       	movw	r24, r20
    3568:	a0 01       	movw	r20, r0
    356a:	11 24       	eor	r1, r1
    356c:	ff 27       	eor	r31, r31
    356e:	59 1b       	sub	r21, r25
    3570:	99 f0       	breq	.+38     	; 0x3598 <__addsf3x+0x60>
    3572:	59 3f       	cpi	r21, 0xF9	; 249
    3574:	50 f4       	brcc	.+20     	; 0x358a <__addsf3x+0x52>
    3576:	50 3e       	cpi	r21, 0xE0	; 224
    3578:	68 f1       	brcs	.+90     	; 0x35d4 <__addsf3x+0x9c>
    357a:	1a 16       	cp	r1, r26
    357c:	f0 40       	sbci	r31, 0x00	; 0
    357e:	a2 2f       	mov	r26, r18
    3580:	23 2f       	mov	r18, r19
    3582:	34 2f       	mov	r19, r20
    3584:	44 27       	eor	r20, r20
    3586:	58 5f       	subi	r21, 0xF8	; 248
    3588:	f3 cf       	rjmp	.-26     	; 0x3570 <__addsf3x+0x38>
    358a:	46 95       	lsr	r20
    358c:	37 95       	ror	r19
    358e:	27 95       	ror	r18
    3590:	a7 95       	ror	r26
    3592:	f0 40       	sbci	r31, 0x00	; 0
    3594:	53 95       	inc	r21
    3596:	c9 f7       	brne	.-14     	; 0x358a <__addsf3x+0x52>
    3598:	7e f4       	brtc	.+30     	; 0x35b8 <__addsf3x+0x80>
    359a:	1f 16       	cp	r1, r31
    359c:	ba 0b       	sbc	r27, r26
    359e:	62 0b       	sbc	r22, r18
    35a0:	73 0b       	sbc	r23, r19
    35a2:	84 0b       	sbc	r24, r20
    35a4:	ba f0       	brmi	.+46     	; 0x35d4 <__addsf3x+0x9c>
    35a6:	91 50       	subi	r25, 0x01	; 1
    35a8:	a1 f0       	breq	.+40     	; 0x35d2 <__addsf3x+0x9a>
    35aa:	ff 0f       	add	r31, r31
    35ac:	bb 1f       	adc	r27, r27
    35ae:	66 1f       	adc	r22, r22
    35b0:	77 1f       	adc	r23, r23
    35b2:	88 1f       	adc	r24, r24
    35b4:	c2 f7       	brpl	.-16     	; 0x35a6 <__addsf3x+0x6e>
    35b6:	0e c0       	rjmp	.+28     	; 0x35d4 <__addsf3x+0x9c>
    35b8:	ba 0f       	add	r27, r26
    35ba:	62 1f       	adc	r22, r18
    35bc:	73 1f       	adc	r23, r19
    35be:	84 1f       	adc	r24, r20
    35c0:	48 f4       	brcc	.+18     	; 0x35d4 <__addsf3x+0x9c>
    35c2:	87 95       	ror	r24
    35c4:	77 95       	ror	r23
    35c6:	67 95       	ror	r22
    35c8:	b7 95       	ror	r27
    35ca:	f7 95       	ror	r31
    35cc:	9e 3f       	cpi	r25, 0xFE	; 254
    35ce:	08 f0       	brcs	.+2      	; 0x35d2 <__addsf3x+0x9a>
    35d0:	b0 cf       	rjmp	.-160    	; 0x3532 <__addsf3+0x28>
    35d2:	93 95       	inc	r25
    35d4:	88 0f       	add	r24, r24
    35d6:	08 f0       	brcs	.+2      	; 0x35da <__addsf3x+0xa2>
    35d8:	99 27       	eor	r25, r25
    35da:	ee 0f       	add	r30, r30
    35dc:	97 95       	ror	r25
    35de:	87 95       	ror	r24
    35e0:	08 95       	ret

000035e2 <__cmpsf2>:
    35e2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__fp_cmp>
    35e6:	08 f4       	brcc	.+2      	; 0x35ea <__cmpsf2+0x8>
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	08 95       	ret

000035ec <__divsf3>:
    35ec:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__divsf3x>
    35f0:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__fp_round>
    35f4:	0e 94 08 1c 	call	0x3810	; 0x3810 <__fp_pscB>
    35f8:	58 f0       	brcs	.+22     	; 0x3610 <__divsf3+0x24>
    35fa:	0e 94 01 1c 	call	0x3802	; 0x3802 <__fp_pscA>
    35fe:	40 f0       	brcs	.+16     	; 0x3610 <__divsf3+0x24>
    3600:	29 f4       	brne	.+10     	; 0x360c <__divsf3+0x20>
    3602:	5f 3f       	cpi	r21, 0xFF	; 255
    3604:	29 f0       	breq	.+10     	; 0x3610 <__divsf3+0x24>
    3606:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_inf>
    360a:	51 11       	cpse	r21, r1
    360c:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__fp_szero>
    3610:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__fp_nan>

00003614 <__divsf3x>:
    3614:	0e 94 20 1c 	call	0x3840	; 0x3840 <__fp_split3>
    3618:	68 f3       	brcs	.-38     	; 0x35f4 <__divsf3+0x8>

0000361a <__divsf3_pse>:
    361a:	99 23       	and	r25, r25
    361c:	b1 f3       	breq	.-20     	; 0x360a <__divsf3+0x1e>
    361e:	55 23       	and	r21, r21
    3620:	91 f3       	breq	.-28     	; 0x3606 <__divsf3+0x1a>
    3622:	95 1b       	sub	r25, r21
    3624:	55 0b       	sbc	r21, r21
    3626:	bb 27       	eor	r27, r27
    3628:	aa 27       	eor	r26, r26
    362a:	62 17       	cp	r22, r18
    362c:	73 07       	cpc	r23, r19
    362e:	84 07       	cpc	r24, r20
    3630:	38 f0       	brcs	.+14     	; 0x3640 <__divsf3_pse+0x26>
    3632:	9f 5f       	subi	r25, 0xFF	; 255
    3634:	5f 4f       	sbci	r21, 0xFF	; 255
    3636:	22 0f       	add	r18, r18
    3638:	33 1f       	adc	r19, r19
    363a:	44 1f       	adc	r20, r20
    363c:	aa 1f       	adc	r26, r26
    363e:	a9 f3       	breq	.-22     	; 0x362a <__divsf3_pse+0x10>
    3640:	35 d0       	rcall	.+106    	; 0x36ac <__divsf3_pse+0x92>
    3642:	0e 2e       	mov	r0, r30
    3644:	3a f0       	brmi	.+14     	; 0x3654 <__divsf3_pse+0x3a>
    3646:	e0 e8       	ldi	r30, 0x80	; 128
    3648:	32 d0       	rcall	.+100    	; 0x36ae <__divsf3_pse+0x94>
    364a:	91 50       	subi	r25, 0x01	; 1
    364c:	50 40       	sbci	r21, 0x00	; 0
    364e:	e6 95       	lsr	r30
    3650:	00 1c       	adc	r0, r0
    3652:	ca f7       	brpl	.-14     	; 0x3646 <__divsf3_pse+0x2c>
    3654:	2b d0       	rcall	.+86     	; 0x36ac <__divsf3_pse+0x92>
    3656:	fe 2f       	mov	r31, r30
    3658:	29 d0       	rcall	.+82     	; 0x36ac <__divsf3_pse+0x92>
    365a:	66 0f       	add	r22, r22
    365c:	77 1f       	adc	r23, r23
    365e:	88 1f       	adc	r24, r24
    3660:	bb 1f       	adc	r27, r27
    3662:	26 17       	cp	r18, r22
    3664:	37 07       	cpc	r19, r23
    3666:	48 07       	cpc	r20, r24
    3668:	ab 07       	cpc	r26, r27
    366a:	b0 e8       	ldi	r27, 0x80	; 128
    366c:	09 f0       	breq	.+2      	; 0x3670 <__divsf3_pse+0x56>
    366e:	bb 0b       	sbc	r27, r27
    3670:	80 2d       	mov	r24, r0
    3672:	bf 01       	movw	r22, r30
    3674:	ff 27       	eor	r31, r31
    3676:	93 58       	subi	r25, 0x83	; 131
    3678:	5f 4f       	sbci	r21, 0xFF	; 255
    367a:	3a f0       	brmi	.+14     	; 0x368a <__divsf3_pse+0x70>
    367c:	9e 3f       	cpi	r25, 0xFE	; 254
    367e:	51 05       	cpc	r21, r1
    3680:	78 f0       	brcs	.+30     	; 0x36a0 <__divsf3_pse+0x86>
    3682:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_inf>
    3686:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__fp_szero>
    368a:	5f 3f       	cpi	r21, 0xFF	; 255
    368c:	e4 f3       	brlt	.-8      	; 0x3686 <__divsf3_pse+0x6c>
    368e:	98 3e       	cpi	r25, 0xE8	; 232
    3690:	d4 f3       	brlt	.-12     	; 0x3686 <__divsf3_pse+0x6c>
    3692:	86 95       	lsr	r24
    3694:	77 95       	ror	r23
    3696:	67 95       	ror	r22
    3698:	b7 95       	ror	r27
    369a:	f7 95       	ror	r31
    369c:	9f 5f       	subi	r25, 0xFF	; 255
    369e:	c9 f7       	brne	.-14     	; 0x3692 <__divsf3_pse+0x78>
    36a0:	88 0f       	add	r24, r24
    36a2:	91 1d       	adc	r25, r1
    36a4:	96 95       	lsr	r25
    36a6:	87 95       	ror	r24
    36a8:	97 f9       	bld	r25, 7
    36aa:	08 95       	ret
    36ac:	e1 e0       	ldi	r30, 0x01	; 1
    36ae:	66 0f       	add	r22, r22
    36b0:	77 1f       	adc	r23, r23
    36b2:	88 1f       	adc	r24, r24
    36b4:	bb 1f       	adc	r27, r27
    36b6:	62 17       	cp	r22, r18
    36b8:	73 07       	cpc	r23, r19
    36ba:	84 07       	cpc	r24, r20
    36bc:	ba 07       	cpc	r27, r26
    36be:	20 f0       	brcs	.+8      	; 0x36c8 <__divsf3_pse+0xae>
    36c0:	62 1b       	sub	r22, r18
    36c2:	73 0b       	sbc	r23, r19
    36c4:	84 0b       	sbc	r24, r20
    36c6:	ba 0b       	sbc	r27, r26
    36c8:	ee 1f       	adc	r30, r30
    36ca:	88 f7       	brcc	.-30     	; 0x36ae <__divsf3_pse+0x94>
    36cc:	e0 95       	com	r30
    36ce:	08 95       	ret

000036d0 <__fixunssfsi>:
    36d0:	0e 94 28 1c 	call	0x3850	; 0x3850 <__fp_splitA>
    36d4:	88 f0       	brcs	.+34     	; 0x36f8 <__fixunssfsi+0x28>
    36d6:	9f 57       	subi	r25, 0x7F	; 127
    36d8:	98 f0       	brcs	.+38     	; 0x3700 <__fixunssfsi+0x30>
    36da:	b9 2f       	mov	r27, r25
    36dc:	99 27       	eor	r25, r25
    36de:	b7 51       	subi	r27, 0x17	; 23
    36e0:	b0 f0       	brcs	.+44     	; 0x370e <__fixunssfsi+0x3e>
    36e2:	e1 f0       	breq	.+56     	; 0x371c <__fixunssfsi+0x4c>
    36e4:	66 0f       	add	r22, r22
    36e6:	77 1f       	adc	r23, r23
    36e8:	88 1f       	adc	r24, r24
    36ea:	99 1f       	adc	r25, r25
    36ec:	1a f0       	brmi	.+6      	; 0x36f4 <__fixunssfsi+0x24>
    36ee:	ba 95       	dec	r27
    36f0:	c9 f7       	brne	.-14     	; 0x36e4 <__fixunssfsi+0x14>
    36f2:	14 c0       	rjmp	.+40     	; 0x371c <__fixunssfsi+0x4c>
    36f4:	b1 30       	cpi	r27, 0x01	; 1
    36f6:	91 f0       	breq	.+36     	; 0x371c <__fixunssfsi+0x4c>
    36f8:	0e 94 42 1c 	call	0x3884	; 0x3884 <__fp_zero>
    36fc:	b1 e0       	ldi	r27, 0x01	; 1
    36fe:	08 95       	ret
    3700:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <__fp_zero>
    3704:	67 2f       	mov	r22, r23
    3706:	78 2f       	mov	r23, r24
    3708:	88 27       	eor	r24, r24
    370a:	b8 5f       	subi	r27, 0xF8	; 248
    370c:	39 f0       	breq	.+14     	; 0x371c <__fixunssfsi+0x4c>
    370e:	b9 3f       	cpi	r27, 0xF9	; 249
    3710:	cc f3       	brlt	.-14     	; 0x3704 <__fixunssfsi+0x34>
    3712:	86 95       	lsr	r24
    3714:	77 95       	ror	r23
    3716:	67 95       	ror	r22
    3718:	b3 95       	inc	r27
    371a:	d9 f7       	brne	.-10     	; 0x3712 <__fixunssfsi+0x42>
    371c:	3e f4       	brtc	.+14     	; 0x372c <__fixunssfsi+0x5c>
    371e:	90 95       	com	r25
    3720:	80 95       	com	r24
    3722:	70 95       	com	r23
    3724:	61 95       	neg	r22
    3726:	7f 4f       	sbci	r23, 0xFF	; 255
    3728:	8f 4f       	sbci	r24, 0xFF	; 255
    372a:	9f 4f       	sbci	r25, 0xFF	; 255
    372c:	08 95       	ret

0000372e <__floatunsisf>:
    372e:	e8 94       	clt
    3730:	09 c0       	rjmp	.+18     	; 0x3744 <__floatsisf+0x12>

00003732 <__floatsisf>:
    3732:	97 fb       	bst	r25, 7
    3734:	3e f4       	brtc	.+14     	; 0x3744 <__floatsisf+0x12>
    3736:	90 95       	com	r25
    3738:	80 95       	com	r24
    373a:	70 95       	com	r23
    373c:	61 95       	neg	r22
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    3740:	8f 4f       	sbci	r24, 0xFF	; 255
    3742:	9f 4f       	sbci	r25, 0xFF	; 255
    3744:	99 23       	and	r25, r25
    3746:	a9 f0       	breq	.+42     	; 0x3772 <__floatsisf+0x40>
    3748:	f9 2f       	mov	r31, r25
    374a:	96 e9       	ldi	r25, 0x96	; 150
    374c:	bb 27       	eor	r27, r27
    374e:	93 95       	inc	r25
    3750:	f6 95       	lsr	r31
    3752:	87 95       	ror	r24
    3754:	77 95       	ror	r23
    3756:	67 95       	ror	r22
    3758:	b7 95       	ror	r27
    375a:	f1 11       	cpse	r31, r1
    375c:	f8 cf       	rjmp	.-16     	; 0x374e <__floatsisf+0x1c>
    375e:	fa f4       	brpl	.+62     	; 0x379e <__floatsisf+0x6c>
    3760:	bb 0f       	add	r27, r27
    3762:	11 f4       	brne	.+4      	; 0x3768 <__floatsisf+0x36>
    3764:	60 ff       	sbrs	r22, 0
    3766:	1b c0       	rjmp	.+54     	; 0x379e <__floatsisf+0x6c>
    3768:	6f 5f       	subi	r22, 0xFF	; 255
    376a:	7f 4f       	sbci	r23, 0xFF	; 255
    376c:	8f 4f       	sbci	r24, 0xFF	; 255
    376e:	9f 4f       	sbci	r25, 0xFF	; 255
    3770:	16 c0       	rjmp	.+44     	; 0x379e <__floatsisf+0x6c>
    3772:	88 23       	and	r24, r24
    3774:	11 f0       	breq	.+4      	; 0x377a <__floatsisf+0x48>
    3776:	96 e9       	ldi	r25, 0x96	; 150
    3778:	11 c0       	rjmp	.+34     	; 0x379c <__floatsisf+0x6a>
    377a:	77 23       	and	r23, r23
    377c:	21 f0       	breq	.+8      	; 0x3786 <__floatsisf+0x54>
    377e:	9e e8       	ldi	r25, 0x8E	; 142
    3780:	87 2f       	mov	r24, r23
    3782:	76 2f       	mov	r23, r22
    3784:	05 c0       	rjmp	.+10     	; 0x3790 <__floatsisf+0x5e>
    3786:	66 23       	and	r22, r22
    3788:	71 f0       	breq	.+28     	; 0x37a6 <__floatsisf+0x74>
    378a:	96 e8       	ldi	r25, 0x86	; 134
    378c:	86 2f       	mov	r24, r22
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	2a f0       	brmi	.+10     	; 0x379e <__floatsisf+0x6c>
    3794:	9a 95       	dec	r25
    3796:	66 0f       	add	r22, r22
    3798:	77 1f       	adc	r23, r23
    379a:	88 1f       	adc	r24, r24
    379c:	da f7       	brpl	.-10     	; 0x3794 <__floatsisf+0x62>
    379e:	88 0f       	add	r24, r24
    37a0:	96 95       	lsr	r25
    37a2:	87 95       	ror	r24
    37a4:	97 f9       	bld	r25, 7
    37a6:	08 95       	ret

000037a8 <__fp_cmp>:
    37a8:	99 0f       	add	r25, r25
    37aa:	00 08       	sbc	r0, r0
    37ac:	55 0f       	add	r21, r21
    37ae:	aa 0b       	sbc	r26, r26
    37b0:	e0 e8       	ldi	r30, 0x80	; 128
    37b2:	fe ef       	ldi	r31, 0xFE	; 254
    37b4:	16 16       	cp	r1, r22
    37b6:	17 06       	cpc	r1, r23
    37b8:	e8 07       	cpc	r30, r24
    37ba:	f9 07       	cpc	r31, r25
    37bc:	c0 f0       	brcs	.+48     	; 0x37ee <__fp_cmp+0x46>
    37be:	12 16       	cp	r1, r18
    37c0:	13 06       	cpc	r1, r19
    37c2:	e4 07       	cpc	r30, r20
    37c4:	f5 07       	cpc	r31, r21
    37c6:	98 f0       	brcs	.+38     	; 0x37ee <__fp_cmp+0x46>
    37c8:	62 1b       	sub	r22, r18
    37ca:	73 0b       	sbc	r23, r19
    37cc:	84 0b       	sbc	r24, r20
    37ce:	95 0b       	sbc	r25, r21
    37d0:	39 f4       	brne	.+14     	; 0x37e0 <__fp_cmp+0x38>
    37d2:	0a 26       	eor	r0, r26
    37d4:	61 f0       	breq	.+24     	; 0x37ee <__fp_cmp+0x46>
    37d6:	23 2b       	or	r18, r19
    37d8:	24 2b       	or	r18, r20
    37da:	25 2b       	or	r18, r21
    37dc:	21 f4       	brne	.+8      	; 0x37e6 <__fp_cmp+0x3e>
    37de:	08 95       	ret
    37e0:	0a 26       	eor	r0, r26
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <__fp_cmp+0x3e>
    37e4:	a1 40       	sbci	r26, 0x01	; 1
    37e6:	a6 95       	lsr	r26
    37e8:	8f ef       	ldi	r24, 0xFF	; 255
    37ea:	81 1d       	adc	r24, r1
    37ec:	81 1d       	adc	r24, r1
    37ee:	08 95       	ret

000037f0 <__fp_inf>:
    37f0:	97 f9       	bld	r25, 7
    37f2:	9f 67       	ori	r25, 0x7F	; 127
    37f4:	80 e8       	ldi	r24, 0x80	; 128
    37f6:	70 e0       	ldi	r23, 0x00	; 0
    37f8:	60 e0       	ldi	r22, 0x00	; 0
    37fa:	08 95       	ret

000037fc <__fp_nan>:
    37fc:	9f ef       	ldi	r25, 0xFF	; 255
    37fe:	80 ec       	ldi	r24, 0xC0	; 192
    3800:	08 95       	ret

00003802 <__fp_pscA>:
    3802:	00 24       	eor	r0, r0
    3804:	0a 94       	dec	r0
    3806:	16 16       	cp	r1, r22
    3808:	17 06       	cpc	r1, r23
    380a:	18 06       	cpc	r1, r24
    380c:	09 06       	cpc	r0, r25
    380e:	08 95       	ret

00003810 <__fp_pscB>:
    3810:	00 24       	eor	r0, r0
    3812:	0a 94       	dec	r0
    3814:	12 16       	cp	r1, r18
    3816:	13 06       	cpc	r1, r19
    3818:	14 06       	cpc	r1, r20
    381a:	05 06       	cpc	r0, r21
    381c:	08 95       	ret

0000381e <__fp_round>:
    381e:	09 2e       	mov	r0, r25
    3820:	03 94       	inc	r0
    3822:	00 0c       	add	r0, r0
    3824:	11 f4       	brne	.+4      	; 0x382a <__fp_round+0xc>
    3826:	88 23       	and	r24, r24
    3828:	52 f0       	brmi	.+20     	; 0x383e <__fp_round+0x20>
    382a:	bb 0f       	add	r27, r27
    382c:	40 f4       	brcc	.+16     	; 0x383e <__fp_round+0x20>
    382e:	bf 2b       	or	r27, r31
    3830:	11 f4       	brne	.+4      	; 0x3836 <__fp_round+0x18>
    3832:	60 ff       	sbrs	r22, 0
    3834:	04 c0       	rjmp	.+8      	; 0x383e <__fp_round+0x20>
    3836:	6f 5f       	subi	r22, 0xFF	; 255
    3838:	7f 4f       	sbci	r23, 0xFF	; 255
    383a:	8f 4f       	sbci	r24, 0xFF	; 255
    383c:	9f 4f       	sbci	r25, 0xFF	; 255
    383e:	08 95       	ret

00003840 <__fp_split3>:
    3840:	57 fd       	sbrc	r21, 7
    3842:	90 58       	subi	r25, 0x80	; 128
    3844:	44 0f       	add	r20, r20
    3846:	55 1f       	adc	r21, r21
    3848:	59 f0       	breq	.+22     	; 0x3860 <__fp_splitA+0x10>
    384a:	5f 3f       	cpi	r21, 0xFF	; 255
    384c:	71 f0       	breq	.+28     	; 0x386a <__fp_splitA+0x1a>
    384e:	47 95       	ror	r20

00003850 <__fp_splitA>:
    3850:	88 0f       	add	r24, r24
    3852:	97 fb       	bst	r25, 7
    3854:	99 1f       	adc	r25, r25
    3856:	61 f0       	breq	.+24     	; 0x3870 <__fp_splitA+0x20>
    3858:	9f 3f       	cpi	r25, 0xFF	; 255
    385a:	79 f0       	breq	.+30     	; 0x387a <__fp_splitA+0x2a>
    385c:	87 95       	ror	r24
    385e:	08 95       	ret
    3860:	12 16       	cp	r1, r18
    3862:	13 06       	cpc	r1, r19
    3864:	14 06       	cpc	r1, r20
    3866:	55 1f       	adc	r21, r21
    3868:	f2 cf       	rjmp	.-28     	; 0x384e <__fp_split3+0xe>
    386a:	46 95       	lsr	r20
    386c:	f1 df       	rcall	.-30     	; 0x3850 <__fp_splitA>
    386e:	08 c0       	rjmp	.+16     	; 0x3880 <__fp_splitA+0x30>
    3870:	16 16       	cp	r1, r22
    3872:	17 06       	cpc	r1, r23
    3874:	18 06       	cpc	r1, r24
    3876:	99 1f       	adc	r25, r25
    3878:	f1 cf       	rjmp	.-30     	; 0x385c <__fp_splitA+0xc>
    387a:	86 95       	lsr	r24
    387c:	71 05       	cpc	r23, r1
    387e:	61 05       	cpc	r22, r1
    3880:	08 94       	sec
    3882:	08 95       	ret

00003884 <__fp_zero>:
    3884:	e8 94       	clt

00003886 <__fp_szero>:
    3886:	bb 27       	eor	r27, r27
    3888:	66 27       	eor	r22, r22
    388a:	77 27       	eor	r23, r23
    388c:	cb 01       	movw	r24, r22
    388e:	97 f9       	bld	r25, 7
    3890:	08 95       	ret

00003892 <__gesf2>:
    3892:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__fp_cmp>
    3896:	08 f4       	brcc	.+2      	; 0x389a <__gesf2+0x8>
    3898:	8f ef       	ldi	r24, 0xFF	; 255
    389a:	08 95       	ret

0000389c <__mulsf3>:
    389c:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__mulsf3x>
    38a0:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__fp_round>
    38a4:	0e 94 01 1c 	call	0x3802	; 0x3802 <__fp_pscA>
    38a8:	38 f0       	brcs	.+14     	; 0x38b8 <__mulsf3+0x1c>
    38aa:	0e 94 08 1c 	call	0x3810	; 0x3810 <__fp_pscB>
    38ae:	20 f0       	brcs	.+8      	; 0x38b8 <__mulsf3+0x1c>
    38b0:	95 23       	and	r25, r21
    38b2:	11 f0       	breq	.+4      	; 0x38b8 <__mulsf3+0x1c>
    38b4:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_inf>
    38b8:	0c 94 fe 1b 	jmp	0x37fc	; 0x37fc <__fp_nan>
    38bc:	11 24       	eor	r1, r1
    38be:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__fp_szero>

000038c2 <__mulsf3x>:
    38c2:	0e 94 20 1c 	call	0x3840	; 0x3840 <__fp_split3>
    38c6:	70 f3       	brcs	.-36     	; 0x38a4 <__mulsf3+0x8>

000038c8 <__mulsf3_pse>:
    38c8:	95 9f       	mul	r25, r21
    38ca:	c1 f3       	breq	.-16     	; 0x38bc <__mulsf3+0x20>
    38cc:	95 0f       	add	r25, r21
    38ce:	50 e0       	ldi	r21, 0x00	; 0
    38d0:	55 1f       	adc	r21, r21
    38d2:	62 9f       	mul	r22, r18
    38d4:	f0 01       	movw	r30, r0
    38d6:	72 9f       	mul	r23, r18
    38d8:	bb 27       	eor	r27, r27
    38da:	f0 0d       	add	r31, r0
    38dc:	b1 1d       	adc	r27, r1
    38de:	63 9f       	mul	r22, r19
    38e0:	aa 27       	eor	r26, r26
    38e2:	f0 0d       	add	r31, r0
    38e4:	b1 1d       	adc	r27, r1
    38e6:	aa 1f       	adc	r26, r26
    38e8:	64 9f       	mul	r22, r20
    38ea:	66 27       	eor	r22, r22
    38ec:	b0 0d       	add	r27, r0
    38ee:	a1 1d       	adc	r26, r1
    38f0:	66 1f       	adc	r22, r22
    38f2:	82 9f       	mul	r24, r18
    38f4:	22 27       	eor	r18, r18
    38f6:	b0 0d       	add	r27, r0
    38f8:	a1 1d       	adc	r26, r1
    38fa:	62 1f       	adc	r22, r18
    38fc:	73 9f       	mul	r23, r19
    38fe:	b0 0d       	add	r27, r0
    3900:	a1 1d       	adc	r26, r1
    3902:	62 1f       	adc	r22, r18
    3904:	83 9f       	mul	r24, r19
    3906:	a0 0d       	add	r26, r0
    3908:	61 1d       	adc	r22, r1
    390a:	22 1f       	adc	r18, r18
    390c:	74 9f       	mul	r23, r20
    390e:	33 27       	eor	r19, r19
    3910:	a0 0d       	add	r26, r0
    3912:	61 1d       	adc	r22, r1
    3914:	23 1f       	adc	r18, r19
    3916:	84 9f       	mul	r24, r20
    3918:	60 0d       	add	r22, r0
    391a:	21 1d       	adc	r18, r1
    391c:	82 2f       	mov	r24, r18
    391e:	76 2f       	mov	r23, r22
    3920:	6a 2f       	mov	r22, r26
    3922:	11 24       	eor	r1, r1
    3924:	9f 57       	subi	r25, 0x7F	; 127
    3926:	50 40       	sbci	r21, 0x00	; 0
    3928:	9a f0       	brmi	.+38     	; 0x3950 <__mulsf3_pse+0x88>
    392a:	f1 f0       	breq	.+60     	; 0x3968 <__mulsf3_pse+0xa0>
    392c:	88 23       	and	r24, r24
    392e:	4a f0       	brmi	.+18     	; 0x3942 <__mulsf3_pse+0x7a>
    3930:	ee 0f       	add	r30, r30
    3932:	ff 1f       	adc	r31, r31
    3934:	bb 1f       	adc	r27, r27
    3936:	66 1f       	adc	r22, r22
    3938:	77 1f       	adc	r23, r23
    393a:	88 1f       	adc	r24, r24
    393c:	91 50       	subi	r25, 0x01	; 1
    393e:	50 40       	sbci	r21, 0x00	; 0
    3940:	a9 f7       	brne	.-22     	; 0x392c <__mulsf3_pse+0x64>
    3942:	9e 3f       	cpi	r25, 0xFE	; 254
    3944:	51 05       	cpc	r21, r1
    3946:	80 f0       	brcs	.+32     	; 0x3968 <__mulsf3_pse+0xa0>
    3948:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_inf>
    394c:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__fp_szero>
    3950:	5f 3f       	cpi	r21, 0xFF	; 255
    3952:	e4 f3       	brlt	.-8      	; 0x394c <__mulsf3_pse+0x84>
    3954:	98 3e       	cpi	r25, 0xE8	; 232
    3956:	d4 f3       	brlt	.-12     	; 0x394c <__mulsf3_pse+0x84>
    3958:	86 95       	lsr	r24
    395a:	77 95       	ror	r23
    395c:	67 95       	ror	r22
    395e:	b7 95       	ror	r27
    3960:	f7 95       	ror	r31
    3962:	e7 95       	ror	r30
    3964:	9f 5f       	subi	r25, 0xFF	; 255
    3966:	c1 f7       	brne	.-16     	; 0x3958 <__mulsf3_pse+0x90>
    3968:	fe 2b       	or	r31, r30
    396a:	88 0f       	add	r24, r24
    396c:	91 1d       	adc	r25, r1
    396e:	96 95       	lsr	r25
    3970:	87 95       	ror	r24
    3972:	97 f9       	bld	r25, 7
    3974:	08 95       	ret

00003976 <sprintf>:
    3976:	ae e0       	ldi	r26, 0x0E	; 14
    3978:	b0 e0       	ldi	r27, 0x00	; 0
    397a:	e1 ec       	ldi	r30, 0xC1	; 193
    397c:	fc e1       	ldi	r31, 0x1C	; 28
    397e:	0c 94 7c 1f 	jmp	0x3ef8	; 0x3ef8 <__prologue_saves__+0x1c>
    3982:	0d 89       	ldd	r16, Y+21	; 0x15
    3984:	1e 89       	ldd	r17, Y+22	; 0x16
    3986:	86 e0       	ldi	r24, 0x06	; 6
    3988:	8c 83       	std	Y+4, r24	; 0x04
    398a:	1a 83       	std	Y+2, r17	; 0x02
    398c:	09 83       	std	Y+1, r16	; 0x01
    398e:	8f ef       	ldi	r24, 0xFF	; 255
    3990:	9f e7       	ldi	r25, 0x7F	; 127
    3992:	9e 83       	std	Y+6, r25	; 0x06
    3994:	8d 83       	std	Y+5, r24	; 0x05
    3996:	ae 01       	movw	r20, r28
    3998:	47 5e       	subi	r20, 0xE7	; 231
    399a:	5f 4f       	sbci	r21, 0xFF	; 255
    399c:	6f 89       	ldd	r22, Y+23	; 0x17
    399e:	78 8d       	ldd	r23, Y+24	; 0x18
    39a0:	ce 01       	movw	r24, r28
    39a2:	01 96       	adiw	r24, 0x01	; 1
    39a4:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <vfprintf>
    39a8:	ef 81       	ldd	r30, Y+7	; 0x07
    39aa:	f8 85       	ldd	r31, Y+8	; 0x08
    39ac:	e0 0f       	add	r30, r16
    39ae:	f1 1f       	adc	r31, r17
    39b0:	10 82       	st	Z, r1
    39b2:	2e 96       	adiw	r28, 0x0e	; 14
    39b4:	e4 e0       	ldi	r30, 0x04	; 4
    39b6:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__epilogue_restores__+0x1c>

000039ba <vfprintf>:
    39ba:	ab e0       	ldi	r26, 0x0B	; 11
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e3 ee       	ldi	r30, 0xE3	; 227
    39c0:	fc e1       	ldi	r31, 0x1C	; 28
    39c2:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <__prologue_saves__>
    39c6:	6c 01       	movw	r12, r24
    39c8:	7b 01       	movw	r14, r22
    39ca:	8a 01       	movw	r16, r20
    39cc:	fc 01       	movw	r30, r24
    39ce:	17 82       	std	Z+7, r1	; 0x07
    39d0:	16 82       	std	Z+6, r1	; 0x06
    39d2:	83 81       	ldd	r24, Z+3	; 0x03
    39d4:	81 ff       	sbrs	r24, 1
    39d6:	cc c1       	rjmp	.+920    	; 0x3d70 <vfprintf+0x3b6>
    39d8:	ce 01       	movw	r24, r28
    39da:	01 96       	adiw	r24, 0x01	; 1
    39dc:	3c 01       	movw	r6, r24
    39de:	f6 01       	movw	r30, r12
    39e0:	93 81       	ldd	r25, Z+3	; 0x03
    39e2:	f7 01       	movw	r30, r14
    39e4:	93 fd       	sbrc	r25, 3
    39e6:	85 91       	lpm	r24, Z+
    39e8:	93 ff       	sbrs	r25, 3
    39ea:	81 91       	ld	r24, Z+
    39ec:	7f 01       	movw	r14, r30
    39ee:	88 23       	and	r24, r24
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <vfprintf+0x3a>
    39f2:	ba c1       	rjmp	.+884    	; 0x3d68 <vfprintf+0x3ae>
    39f4:	85 32       	cpi	r24, 0x25	; 37
    39f6:	39 f4       	brne	.+14     	; 0x3a06 <vfprintf+0x4c>
    39f8:	93 fd       	sbrc	r25, 3
    39fa:	85 91       	lpm	r24, Z+
    39fc:	93 ff       	sbrs	r25, 3
    39fe:	81 91       	ld	r24, Z+
    3a00:	7f 01       	movw	r14, r30
    3a02:	85 32       	cpi	r24, 0x25	; 37
    3a04:	29 f4       	brne	.+10     	; 0x3a10 <vfprintf+0x56>
    3a06:	b6 01       	movw	r22, r12
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <fputc>
    3a0e:	e7 cf       	rjmp	.-50     	; 0x39de <vfprintf+0x24>
    3a10:	91 2c       	mov	r9, r1
    3a12:	21 2c       	mov	r2, r1
    3a14:	31 2c       	mov	r3, r1
    3a16:	ff e1       	ldi	r31, 0x1F	; 31
    3a18:	f3 15       	cp	r31, r3
    3a1a:	d8 f0       	brcs	.+54     	; 0x3a52 <vfprintf+0x98>
    3a1c:	8b 32       	cpi	r24, 0x2B	; 43
    3a1e:	79 f0       	breq	.+30     	; 0x3a3e <vfprintf+0x84>
    3a20:	38 f4       	brcc	.+14     	; 0x3a30 <vfprintf+0x76>
    3a22:	80 32       	cpi	r24, 0x20	; 32
    3a24:	79 f0       	breq	.+30     	; 0x3a44 <vfprintf+0x8a>
    3a26:	83 32       	cpi	r24, 0x23	; 35
    3a28:	a1 f4       	brne	.+40     	; 0x3a52 <vfprintf+0x98>
    3a2a:	23 2d       	mov	r18, r3
    3a2c:	20 61       	ori	r18, 0x10	; 16
    3a2e:	1d c0       	rjmp	.+58     	; 0x3a6a <vfprintf+0xb0>
    3a30:	8d 32       	cpi	r24, 0x2D	; 45
    3a32:	61 f0       	breq	.+24     	; 0x3a4c <vfprintf+0x92>
    3a34:	80 33       	cpi	r24, 0x30	; 48
    3a36:	69 f4       	brne	.+26     	; 0x3a52 <vfprintf+0x98>
    3a38:	23 2d       	mov	r18, r3
    3a3a:	21 60       	ori	r18, 0x01	; 1
    3a3c:	16 c0       	rjmp	.+44     	; 0x3a6a <vfprintf+0xb0>
    3a3e:	83 2d       	mov	r24, r3
    3a40:	82 60       	ori	r24, 0x02	; 2
    3a42:	38 2e       	mov	r3, r24
    3a44:	e3 2d       	mov	r30, r3
    3a46:	e4 60       	ori	r30, 0x04	; 4
    3a48:	3e 2e       	mov	r3, r30
    3a4a:	2a c0       	rjmp	.+84     	; 0x3aa0 <vfprintf+0xe6>
    3a4c:	f3 2d       	mov	r31, r3
    3a4e:	f8 60       	ori	r31, 0x08	; 8
    3a50:	1d c0       	rjmp	.+58     	; 0x3a8c <vfprintf+0xd2>
    3a52:	37 fc       	sbrc	r3, 7
    3a54:	2d c0       	rjmp	.+90     	; 0x3ab0 <vfprintf+0xf6>
    3a56:	20 ed       	ldi	r18, 0xD0	; 208
    3a58:	28 0f       	add	r18, r24
    3a5a:	2a 30       	cpi	r18, 0x0A	; 10
    3a5c:	40 f0       	brcs	.+16     	; 0x3a6e <vfprintf+0xb4>
    3a5e:	8e 32       	cpi	r24, 0x2E	; 46
    3a60:	b9 f4       	brne	.+46     	; 0x3a90 <vfprintf+0xd6>
    3a62:	36 fc       	sbrc	r3, 6
    3a64:	81 c1       	rjmp	.+770    	; 0x3d68 <vfprintf+0x3ae>
    3a66:	23 2d       	mov	r18, r3
    3a68:	20 64       	ori	r18, 0x40	; 64
    3a6a:	32 2e       	mov	r3, r18
    3a6c:	19 c0       	rjmp	.+50     	; 0x3aa0 <vfprintf+0xe6>
    3a6e:	36 fe       	sbrs	r3, 6
    3a70:	06 c0       	rjmp	.+12     	; 0x3a7e <vfprintf+0xc4>
    3a72:	8a e0       	ldi	r24, 0x0A	; 10
    3a74:	98 9e       	mul	r9, r24
    3a76:	20 0d       	add	r18, r0
    3a78:	11 24       	eor	r1, r1
    3a7a:	92 2e       	mov	r9, r18
    3a7c:	11 c0       	rjmp	.+34     	; 0x3aa0 <vfprintf+0xe6>
    3a7e:	ea e0       	ldi	r30, 0x0A	; 10
    3a80:	2e 9e       	mul	r2, r30
    3a82:	20 0d       	add	r18, r0
    3a84:	11 24       	eor	r1, r1
    3a86:	22 2e       	mov	r2, r18
    3a88:	f3 2d       	mov	r31, r3
    3a8a:	f0 62       	ori	r31, 0x20	; 32
    3a8c:	3f 2e       	mov	r3, r31
    3a8e:	08 c0       	rjmp	.+16     	; 0x3aa0 <vfprintf+0xe6>
    3a90:	8c 36       	cpi	r24, 0x6C	; 108
    3a92:	21 f4       	brne	.+8      	; 0x3a9c <vfprintf+0xe2>
    3a94:	83 2d       	mov	r24, r3
    3a96:	80 68       	ori	r24, 0x80	; 128
    3a98:	38 2e       	mov	r3, r24
    3a9a:	02 c0       	rjmp	.+4      	; 0x3aa0 <vfprintf+0xe6>
    3a9c:	88 36       	cpi	r24, 0x68	; 104
    3a9e:	41 f4       	brne	.+16     	; 0x3ab0 <vfprintf+0xf6>
    3aa0:	f7 01       	movw	r30, r14
    3aa2:	93 fd       	sbrc	r25, 3
    3aa4:	85 91       	lpm	r24, Z+
    3aa6:	93 ff       	sbrs	r25, 3
    3aa8:	81 91       	ld	r24, Z+
    3aaa:	7f 01       	movw	r14, r30
    3aac:	81 11       	cpse	r24, r1
    3aae:	b3 cf       	rjmp	.-154    	; 0x3a16 <vfprintf+0x5c>
    3ab0:	98 2f       	mov	r25, r24
    3ab2:	9f 7d       	andi	r25, 0xDF	; 223
    3ab4:	95 54       	subi	r25, 0x45	; 69
    3ab6:	93 30       	cpi	r25, 0x03	; 3
    3ab8:	28 f4       	brcc	.+10     	; 0x3ac4 <vfprintf+0x10a>
    3aba:	0c 5f       	subi	r16, 0xFC	; 252
    3abc:	1f 4f       	sbci	r17, 0xFF	; 255
    3abe:	9f e3       	ldi	r25, 0x3F	; 63
    3ac0:	99 83       	std	Y+1, r25	; 0x01
    3ac2:	0d c0       	rjmp	.+26     	; 0x3ade <vfprintf+0x124>
    3ac4:	83 36       	cpi	r24, 0x63	; 99
    3ac6:	31 f0       	breq	.+12     	; 0x3ad4 <vfprintf+0x11a>
    3ac8:	83 37       	cpi	r24, 0x73	; 115
    3aca:	71 f0       	breq	.+28     	; 0x3ae8 <vfprintf+0x12e>
    3acc:	83 35       	cpi	r24, 0x53	; 83
    3ace:	09 f0       	breq	.+2      	; 0x3ad2 <vfprintf+0x118>
    3ad0:	59 c0       	rjmp	.+178    	; 0x3b84 <vfprintf+0x1ca>
    3ad2:	21 c0       	rjmp	.+66     	; 0x3b16 <vfprintf+0x15c>
    3ad4:	f8 01       	movw	r30, r16
    3ad6:	80 81       	ld	r24, Z
    3ad8:	89 83       	std	Y+1, r24	; 0x01
    3ada:	0e 5f       	subi	r16, 0xFE	; 254
    3adc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ade:	88 24       	eor	r8, r8
    3ae0:	83 94       	inc	r8
    3ae2:	91 2c       	mov	r9, r1
    3ae4:	53 01       	movw	r10, r6
    3ae6:	13 c0       	rjmp	.+38     	; 0x3b0e <vfprintf+0x154>
    3ae8:	28 01       	movw	r4, r16
    3aea:	f2 e0       	ldi	r31, 0x02	; 2
    3aec:	4f 0e       	add	r4, r31
    3aee:	51 1c       	adc	r5, r1
    3af0:	f8 01       	movw	r30, r16
    3af2:	a0 80       	ld	r10, Z
    3af4:	b1 80       	ldd	r11, Z+1	; 0x01
    3af6:	36 fe       	sbrs	r3, 6
    3af8:	03 c0       	rjmp	.+6      	; 0x3b00 <vfprintf+0x146>
    3afa:	69 2d       	mov	r22, r9
    3afc:	70 e0       	ldi	r23, 0x00	; 0
    3afe:	02 c0       	rjmp	.+4      	; 0x3b04 <vfprintf+0x14a>
    3b00:	6f ef       	ldi	r22, 0xFF	; 255
    3b02:	7f ef       	ldi	r23, 0xFF	; 255
    3b04:	c5 01       	movw	r24, r10
    3b06:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <strnlen>
    3b0a:	4c 01       	movw	r8, r24
    3b0c:	82 01       	movw	r16, r4
    3b0e:	f3 2d       	mov	r31, r3
    3b10:	ff 77       	andi	r31, 0x7F	; 127
    3b12:	3f 2e       	mov	r3, r31
    3b14:	16 c0       	rjmp	.+44     	; 0x3b42 <vfprintf+0x188>
    3b16:	28 01       	movw	r4, r16
    3b18:	22 e0       	ldi	r18, 0x02	; 2
    3b1a:	42 0e       	add	r4, r18
    3b1c:	51 1c       	adc	r5, r1
    3b1e:	f8 01       	movw	r30, r16
    3b20:	a0 80       	ld	r10, Z
    3b22:	b1 80       	ldd	r11, Z+1	; 0x01
    3b24:	36 fe       	sbrs	r3, 6
    3b26:	03 c0       	rjmp	.+6      	; 0x3b2e <vfprintf+0x174>
    3b28:	69 2d       	mov	r22, r9
    3b2a:	70 e0       	ldi	r23, 0x00	; 0
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <vfprintf+0x178>
    3b2e:	6f ef       	ldi	r22, 0xFF	; 255
    3b30:	7f ef       	ldi	r23, 0xFF	; 255
    3b32:	c5 01       	movw	r24, r10
    3b34:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <strnlen_P>
    3b38:	4c 01       	movw	r8, r24
    3b3a:	f3 2d       	mov	r31, r3
    3b3c:	f0 68       	ori	r31, 0x80	; 128
    3b3e:	3f 2e       	mov	r3, r31
    3b40:	82 01       	movw	r16, r4
    3b42:	33 fc       	sbrc	r3, 3
    3b44:	1b c0       	rjmp	.+54     	; 0x3b7c <vfprintf+0x1c2>
    3b46:	82 2d       	mov	r24, r2
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	88 16       	cp	r8, r24
    3b4c:	99 06       	cpc	r9, r25
    3b4e:	b0 f4       	brcc	.+44     	; 0x3b7c <vfprintf+0x1c2>
    3b50:	b6 01       	movw	r22, r12
    3b52:	80 e2       	ldi	r24, 0x20	; 32
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <fputc>
    3b5a:	2a 94       	dec	r2
    3b5c:	f4 cf       	rjmp	.-24     	; 0x3b46 <vfprintf+0x18c>
    3b5e:	f5 01       	movw	r30, r10
    3b60:	37 fc       	sbrc	r3, 7
    3b62:	85 91       	lpm	r24, Z+
    3b64:	37 fe       	sbrs	r3, 7
    3b66:	81 91       	ld	r24, Z+
    3b68:	5f 01       	movw	r10, r30
    3b6a:	b6 01       	movw	r22, r12
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <fputc>
    3b72:	21 10       	cpse	r2, r1
    3b74:	2a 94       	dec	r2
    3b76:	21 e0       	ldi	r18, 0x01	; 1
    3b78:	82 1a       	sub	r8, r18
    3b7a:	91 08       	sbc	r9, r1
    3b7c:	81 14       	cp	r8, r1
    3b7e:	91 04       	cpc	r9, r1
    3b80:	71 f7       	brne	.-36     	; 0x3b5e <vfprintf+0x1a4>
    3b82:	e8 c0       	rjmp	.+464    	; 0x3d54 <vfprintf+0x39a>
    3b84:	84 36       	cpi	r24, 0x64	; 100
    3b86:	11 f0       	breq	.+4      	; 0x3b8c <vfprintf+0x1d2>
    3b88:	89 36       	cpi	r24, 0x69	; 105
    3b8a:	41 f5       	brne	.+80     	; 0x3bdc <vfprintf+0x222>
    3b8c:	f8 01       	movw	r30, r16
    3b8e:	37 fe       	sbrs	r3, 7
    3b90:	07 c0       	rjmp	.+14     	; 0x3ba0 <vfprintf+0x1e6>
    3b92:	60 81       	ld	r22, Z
    3b94:	71 81       	ldd	r23, Z+1	; 0x01
    3b96:	82 81       	ldd	r24, Z+2	; 0x02
    3b98:	93 81       	ldd	r25, Z+3	; 0x03
    3b9a:	0c 5f       	subi	r16, 0xFC	; 252
    3b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9e:	08 c0       	rjmp	.+16     	; 0x3bb0 <vfprintf+0x1f6>
    3ba0:	60 81       	ld	r22, Z
    3ba2:	71 81       	ldd	r23, Z+1	; 0x01
    3ba4:	07 2e       	mov	r0, r23
    3ba6:	00 0c       	add	r0, r0
    3ba8:	88 0b       	sbc	r24, r24
    3baa:	99 0b       	sbc	r25, r25
    3bac:	0e 5f       	subi	r16, 0xFE	; 254
    3bae:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb0:	f3 2d       	mov	r31, r3
    3bb2:	ff 76       	andi	r31, 0x6F	; 111
    3bb4:	3f 2e       	mov	r3, r31
    3bb6:	97 ff       	sbrs	r25, 7
    3bb8:	09 c0       	rjmp	.+18     	; 0x3bcc <vfprintf+0x212>
    3bba:	90 95       	com	r25
    3bbc:	80 95       	com	r24
    3bbe:	70 95       	com	r23
    3bc0:	61 95       	neg	r22
    3bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc8:	f0 68       	ori	r31, 0x80	; 128
    3bca:	3f 2e       	mov	r3, r31
    3bcc:	2a e0       	ldi	r18, 0x0A	; 10
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	a3 01       	movw	r20, r6
    3bd2:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <__ultoa_invert>
    3bd6:	88 2e       	mov	r8, r24
    3bd8:	86 18       	sub	r8, r6
    3bda:	45 c0       	rjmp	.+138    	; 0x3c66 <vfprintf+0x2ac>
    3bdc:	85 37       	cpi	r24, 0x75	; 117
    3bde:	31 f4       	brne	.+12     	; 0x3bec <vfprintf+0x232>
    3be0:	23 2d       	mov	r18, r3
    3be2:	2f 7e       	andi	r18, 0xEF	; 239
    3be4:	b2 2e       	mov	r11, r18
    3be6:	2a e0       	ldi	r18, 0x0A	; 10
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	25 c0       	rjmp	.+74     	; 0x3c36 <vfprintf+0x27c>
    3bec:	93 2d       	mov	r25, r3
    3bee:	99 7f       	andi	r25, 0xF9	; 249
    3bf0:	b9 2e       	mov	r11, r25
    3bf2:	8f 36       	cpi	r24, 0x6F	; 111
    3bf4:	c1 f0       	breq	.+48     	; 0x3c26 <vfprintf+0x26c>
    3bf6:	18 f4       	brcc	.+6      	; 0x3bfe <vfprintf+0x244>
    3bf8:	88 35       	cpi	r24, 0x58	; 88
    3bfa:	79 f0       	breq	.+30     	; 0x3c1a <vfprintf+0x260>
    3bfc:	b5 c0       	rjmp	.+362    	; 0x3d68 <vfprintf+0x3ae>
    3bfe:	80 37       	cpi	r24, 0x70	; 112
    3c00:	19 f0       	breq	.+6      	; 0x3c08 <vfprintf+0x24e>
    3c02:	88 37       	cpi	r24, 0x78	; 120
    3c04:	21 f0       	breq	.+8      	; 0x3c0e <vfprintf+0x254>
    3c06:	b0 c0       	rjmp	.+352    	; 0x3d68 <vfprintf+0x3ae>
    3c08:	e9 2f       	mov	r30, r25
    3c0a:	e0 61       	ori	r30, 0x10	; 16
    3c0c:	be 2e       	mov	r11, r30
    3c0e:	b4 fe       	sbrs	r11, 4
    3c10:	0d c0       	rjmp	.+26     	; 0x3c2c <vfprintf+0x272>
    3c12:	fb 2d       	mov	r31, r11
    3c14:	f4 60       	ori	r31, 0x04	; 4
    3c16:	bf 2e       	mov	r11, r31
    3c18:	09 c0       	rjmp	.+18     	; 0x3c2c <vfprintf+0x272>
    3c1a:	34 fe       	sbrs	r3, 4
    3c1c:	0a c0       	rjmp	.+20     	; 0x3c32 <vfprintf+0x278>
    3c1e:	29 2f       	mov	r18, r25
    3c20:	26 60       	ori	r18, 0x06	; 6
    3c22:	b2 2e       	mov	r11, r18
    3c24:	06 c0       	rjmp	.+12     	; 0x3c32 <vfprintf+0x278>
    3c26:	28 e0       	ldi	r18, 0x08	; 8
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	05 c0       	rjmp	.+10     	; 0x3c36 <vfprintf+0x27c>
    3c2c:	20 e1       	ldi	r18, 0x10	; 16
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	02 c0       	rjmp	.+4      	; 0x3c36 <vfprintf+0x27c>
    3c32:	20 e1       	ldi	r18, 0x10	; 16
    3c34:	32 e0       	ldi	r19, 0x02	; 2
    3c36:	f8 01       	movw	r30, r16
    3c38:	b7 fe       	sbrs	r11, 7
    3c3a:	07 c0       	rjmp	.+14     	; 0x3c4a <vfprintf+0x290>
    3c3c:	60 81       	ld	r22, Z
    3c3e:	71 81       	ldd	r23, Z+1	; 0x01
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	0c 5f       	subi	r16, 0xFC	; 252
    3c46:	1f 4f       	sbci	r17, 0xFF	; 255
    3c48:	06 c0       	rjmp	.+12     	; 0x3c56 <vfprintf+0x29c>
    3c4a:	60 81       	ld	r22, Z
    3c4c:	71 81       	ldd	r23, Z+1	; 0x01
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	0e 5f       	subi	r16, 0xFE	; 254
    3c54:	1f 4f       	sbci	r17, 0xFF	; 255
    3c56:	a3 01       	movw	r20, r6
    3c58:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <__ultoa_invert>
    3c5c:	88 2e       	mov	r8, r24
    3c5e:	86 18       	sub	r8, r6
    3c60:	fb 2d       	mov	r31, r11
    3c62:	ff 77       	andi	r31, 0x7F	; 127
    3c64:	3f 2e       	mov	r3, r31
    3c66:	36 fe       	sbrs	r3, 6
    3c68:	0d c0       	rjmp	.+26     	; 0x3c84 <vfprintf+0x2ca>
    3c6a:	23 2d       	mov	r18, r3
    3c6c:	2e 7f       	andi	r18, 0xFE	; 254
    3c6e:	a2 2e       	mov	r10, r18
    3c70:	89 14       	cp	r8, r9
    3c72:	58 f4       	brcc	.+22     	; 0x3c8a <vfprintf+0x2d0>
    3c74:	34 fe       	sbrs	r3, 4
    3c76:	0b c0       	rjmp	.+22     	; 0x3c8e <vfprintf+0x2d4>
    3c78:	32 fc       	sbrc	r3, 2
    3c7a:	09 c0       	rjmp	.+18     	; 0x3c8e <vfprintf+0x2d4>
    3c7c:	83 2d       	mov	r24, r3
    3c7e:	8e 7e       	andi	r24, 0xEE	; 238
    3c80:	a8 2e       	mov	r10, r24
    3c82:	05 c0       	rjmp	.+10     	; 0x3c8e <vfprintf+0x2d4>
    3c84:	b8 2c       	mov	r11, r8
    3c86:	a3 2c       	mov	r10, r3
    3c88:	03 c0       	rjmp	.+6      	; 0x3c90 <vfprintf+0x2d6>
    3c8a:	b8 2c       	mov	r11, r8
    3c8c:	01 c0       	rjmp	.+2      	; 0x3c90 <vfprintf+0x2d6>
    3c8e:	b9 2c       	mov	r11, r9
    3c90:	a4 fe       	sbrs	r10, 4
    3c92:	0f c0       	rjmp	.+30     	; 0x3cb2 <vfprintf+0x2f8>
    3c94:	fe 01       	movw	r30, r28
    3c96:	e8 0d       	add	r30, r8
    3c98:	f1 1d       	adc	r31, r1
    3c9a:	80 81       	ld	r24, Z
    3c9c:	80 33       	cpi	r24, 0x30	; 48
    3c9e:	21 f4       	brne	.+8      	; 0x3ca8 <vfprintf+0x2ee>
    3ca0:	9a 2d       	mov	r25, r10
    3ca2:	99 7e       	andi	r25, 0xE9	; 233
    3ca4:	a9 2e       	mov	r10, r25
    3ca6:	09 c0       	rjmp	.+18     	; 0x3cba <vfprintf+0x300>
    3ca8:	a2 fe       	sbrs	r10, 2
    3caa:	06 c0       	rjmp	.+12     	; 0x3cb8 <vfprintf+0x2fe>
    3cac:	b3 94       	inc	r11
    3cae:	b3 94       	inc	r11
    3cb0:	04 c0       	rjmp	.+8      	; 0x3cba <vfprintf+0x300>
    3cb2:	8a 2d       	mov	r24, r10
    3cb4:	86 78       	andi	r24, 0x86	; 134
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <vfprintf+0x300>
    3cb8:	b3 94       	inc	r11
    3cba:	a3 fc       	sbrc	r10, 3
    3cbc:	11 c0       	rjmp	.+34     	; 0x3ce0 <vfprintf+0x326>
    3cbe:	a0 fe       	sbrs	r10, 0
    3cc0:	06 c0       	rjmp	.+12     	; 0x3cce <vfprintf+0x314>
    3cc2:	b2 14       	cp	r11, r2
    3cc4:	88 f4       	brcc	.+34     	; 0x3ce8 <vfprintf+0x32e>
    3cc6:	28 0c       	add	r2, r8
    3cc8:	92 2c       	mov	r9, r2
    3cca:	9b 18       	sub	r9, r11
    3ccc:	0e c0       	rjmp	.+28     	; 0x3cea <vfprintf+0x330>
    3cce:	b2 14       	cp	r11, r2
    3cd0:	60 f4       	brcc	.+24     	; 0x3cea <vfprintf+0x330>
    3cd2:	b6 01       	movw	r22, r12
    3cd4:	80 e2       	ldi	r24, 0x20	; 32
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <fputc>
    3cdc:	b3 94       	inc	r11
    3cde:	f7 cf       	rjmp	.-18     	; 0x3cce <vfprintf+0x314>
    3ce0:	b2 14       	cp	r11, r2
    3ce2:	18 f4       	brcc	.+6      	; 0x3cea <vfprintf+0x330>
    3ce4:	2b 18       	sub	r2, r11
    3ce6:	02 c0       	rjmp	.+4      	; 0x3cec <vfprintf+0x332>
    3ce8:	98 2c       	mov	r9, r8
    3cea:	21 2c       	mov	r2, r1
    3cec:	a4 fe       	sbrs	r10, 4
    3cee:	10 c0       	rjmp	.+32     	; 0x3d10 <vfprintf+0x356>
    3cf0:	b6 01       	movw	r22, r12
    3cf2:	80 e3       	ldi	r24, 0x30	; 48
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <fputc>
    3cfa:	a2 fe       	sbrs	r10, 2
    3cfc:	17 c0       	rjmp	.+46     	; 0x3d2c <vfprintf+0x372>
    3cfe:	a1 fc       	sbrc	r10, 1
    3d00:	03 c0       	rjmp	.+6      	; 0x3d08 <vfprintf+0x34e>
    3d02:	88 e7       	ldi	r24, 0x78	; 120
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	02 c0       	rjmp	.+4      	; 0x3d0c <vfprintf+0x352>
    3d08:	88 e5       	ldi	r24, 0x58	; 88
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	b6 01       	movw	r22, r12
    3d0e:	0c c0       	rjmp	.+24     	; 0x3d28 <vfprintf+0x36e>
    3d10:	8a 2d       	mov	r24, r10
    3d12:	86 78       	andi	r24, 0x86	; 134
    3d14:	59 f0       	breq	.+22     	; 0x3d2c <vfprintf+0x372>
    3d16:	a1 fe       	sbrs	r10, 1
    3d18:	02 c0       	rjmp	.+4      	; 0x3d1e <vfprintf+0x364>
    3d1a:	8b e2       	ldi	r24, 0x2B	; 43
    3d1c:	01 c0       	rjmp	.+2      	; 0x3d20 <vfprintf+0x366>
    3d1e:	80 e2       	ldi	r24, 0x20	; 32
    3d20:	a7 fc       	sbrc	r10, 7
    3d22:	8d e2       	ldi	r24, 0x2D	; 45
    3d24:	b6 01       	movw	r22, r12
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <fputc>
    3d2c:	89 14       	cp	r8, r9
    3d2e:	38 f4       	brcc	.+14     	; 0x3d3e <vfprintf+0x384>
    3d30:	b6 01       	movw	r22, r12
    3d32:	80 e3       	ldi	r24, 0x30	; 48
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <fputc>
    3d3a:	9a 94       	dec	r9
    3d3c:	f7 cf       	rjmp	.-18     	; 0x3d2c <vfprintf+0x372>
    3d3e:	8a 94       	dec	r8
    3d40:	f3 01       	movw	r30, r6
    3d42:	e8 0d       	add	r30, r8
    3d44:	f1 1d       	adc	r31, r1
    3d46:	80 81       	ld	r24, Z
    3d48:	b6 01       	movw	r22, r12
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <fputc>
    3d50:	81 10       	cpse	r8, r1
    3d52:	f5 cf       	rjmp	.-22     	; 0x3d3e <vfprintf+0x384>
    3d54:	22 20       	and	r2, r2
    3d56:	09 f4       	brne	.+2      	; 0x3d5a <vfprintf+0x3a0>
    3d58:	42 ce       	rjmp	.-892    	; 0x39de <vfprintf+0x24>
    3d5a:	b6 01       	movw	r22, r12
    3d5c:	80 e2       	ldi	r24, 0x20	; 32
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <fputc>
    3d64:	2a 94       	dec	r2
    3d66:	f6 cf       	rjmp	.-20     	; 0x3d54 <vfprintf+0x39a>
    3d68:	f6 01       	movw	r30, r12
    3d6a:	86 81       	ldd	r24, Z+6	; 0x06
    3d6c:	97 81       	ldd	r25, Z+7	; 0x07
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <vfprintf+0x3ba>
    3d70:	8f ef       	ldi	r24, 0xFF	; 255
    3d72:	9f ef       	ldi	r25, 0xFF	; 255
    3d74:	2b 96       	adiw	r28, 0x0b	; 11
    3d76:	e2 e1       	ldi	r30, 0x12	; 18
    3d78:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__epilogue_restores__>

00003d7c <strnlen_P>:
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	05 90       	lpm	r0, Z+
    3d80:	61 50       	subi	r22, 0x01	; 1
    3d82:	70 40       	sbci	r23, 0x00	; 0
    3d84:	01 10       	cpse	r0, r1
    3d86:	d8 f7       	brcc	.-10     	; 0x3d7e <strnlen_P+0x2>
    3d88:	80 95       	com	r24
    3d8a:	90 95       	com	r25
    3d8c:	8e 0f       	add	r24, r30
    3d8e:	9f 1f       	adc	r25, r31
    3d90:	08 95       	ret

00003d92 <strnlen>:
    3d92:	fc 01       	movw	r30, r24
    3d94:	61 50       	subi	r22, 0x01	; 1
    3d96:	70 40       	sbci	r23, 0x00	; 0
    3d98:	01 90       	ld	r0, Z+
    3d9a:	01 10       	cpse	r0, r1
    3d9c:	d8 f7       	brcc	.-10     	; 0x3d94 <strnlen+0x2>
    3d9e:	80 95       	com	r24
    3da0:	90 95       	com	r25
    3da2:	8e 0f       	add	r24, r30
    3da4:	9f 1f       	adc	r25, r31
    3da6:	08 95       	ret

00003da8 <fputc>:
    3da8:	0f 93       	push	r16
    3daa:	1f 93       	push	r17
    3dac:	cf 93       	push	r28
    3dae:	df 93       	push	r29
    3db0:	fb 01       	movw	r30, r22
    3db2:	23 81       	ldd	r18, Z+3	; 0x03
    3db4:	21 fd       	sbrc	r18, 1
    3db6:	03 c0       	rjmp	.+6      	; 0x3dbe <fputc+0x16>
    3db8:	8f ef       	ldi	r24, 0xFF	; 255
    3dba:	9f ef       	ldi	r25, 0xFF	; 255
    3dbc:	2c c0       	rjmp	.+88     	; 0x3e16 <fputc+0x6e>
    3dbe:	22 ff       	sbrs	r18, 2
    3dc0:	16 c0       	rjmp	.+44     	; 0x3dee <fputc+0x46>
    3dc2:	46 81       	ldd	r20, Z+6	; 0x06
    3dc4:	57 81       	ldd	r21, Z+7	; 0x07
    3dc6:	24 81       	ldd	r18, Z+4	; 0x04
    3dc8:	35 81       	ldd	r19, Z+5	; 0x05
    3dca:	42 17       	cp	r20, r18
    3dcc:	53 07       	cpc	r21, r19
    3dce:	44 f4       	brge	.+16     	; 0x3de0 <fputc+0x38>
    3dd0:	a0 81       	ld	r26, Z
    3dd2:	b1 81       	ldd	r27, Z+1	; 0x01
    3dd4:	9d 01       	movw	r18, r26
    3dd6:	2f 5f       	subi	r18, 0xFF	; 255
    3dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dda:	31 83       	std	Z+1, r19	; 0x01
    3ddc:	20 83       	st	Z, r18
    3dde:	8c 93       	st	X, r24
    3de0:	26 81       	ldd	r18, Z+6	; 0x06
    3de2:	37 81       	ldd	r19, Z+7	; 0x07
    3de4:	2f 5f       	subi	r18, 0xFF	; 255
    3de6:	3f 4f       	sbci	r19, 0xFF	; 255
    3de8:	37 83       	std	Z+7, r19	; 0x07
    3dea:	26 83       	std	Z+6, r18	; 0x06
    3dec:	14 c0       	rjmp	.+40     	; 0x3e16 <fputc+0x6e>
    3dee:	8b 01       	movw	r16, r22
    3df0:	ec 01       	movw	r28, r24
    3df2:	fb 01       	movw	r30, r22
    3df4:	00 84       	ldd	r0, Z+8	; 0x08
    3df6:	f1 85       	ldd	r31, Z+9	; 0x09
    3df8:	e0 2d       	mov	r30, r0
    3dfa:	09 95       	icall
    3dfc:	89 2b       	or	r24, r25
    3dfe:	e1 f6       	brne	.-72     	; 0x3db8 <fputc+0x10>
    3e00:	d8 01       	movw	r26, r16
    3e02:	16 96       	adiw	r26, 0x06	; 6
    3e04:	8d 91       	ld	r24, X+
    3e06:	9c 91       	ld	r25, X
    3e08:	17 97       	sbiw	r26, 0x07	; 7
    3e0a:	01 96       	adiw	r24, 0x01	; 1
    3e0c:	17 96       	adiw	r26, 0x07	; 7
    3e0e:	9c 93       	st	X, r25
    3e10:	8e 93       	st	-X, r24
    3e12:	16 97       	sbiw	r26, 0x06	; 6
    3e14:	ce 01       	movw	r24, r28
    3e16:	df 91       	pop	r29
    3e18:	cf 91       	pop	r28
    3e1a:	1f 91       	pop	r17
    3e1c:	0f 91       	pop	r16
    3e1e:	08 95       	ret

00003e20 <__ultoa_invert>:
    3e20:	fa 01       	movw	r30, r20
    3e22:	aa 27       	eor	r26, r26
    3e24:	28 30       	cpi	r18, 0x08	; 8
    3e26:	51 f1       	breq	.+84     	; 0x3e7c <__ultoa_invert+0x5c>
    3e28:	20 31       	cpi	r18, 0x10	; 16
    3e2a:	81 f1       	breq	.+96     	; 0x3e8c <__ultoa_invert+0x6c>
    3e2c:	e8 94       	clt
    3e2e:	6f 93       	push	r22
    3e30:	6e 7f       	andi	r22, 0xFE	; 254
    3e32:	6e 5f       	subi	r22, 0xFE	; 254
    3e34:	7f 4f       	sbci	r23, 0xFF	; 255
    3e36:	8f 4f       	sbci	r24, 0xFF	; 255
    3e38:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3a:	af 4f       	sbci	r26, 0xFF	; 255
    3e3c:	b1 e0       	ldi	r27, 0x01	; 1
    3e3e:	3e d0       	rcall	.+124    	; 0x3ebc <__ultoa_invert+0x9c>
    3e40:	b4 e0       	ldi	r27, 0x04	; 4
    3e42:	3c d0       	rcall	.+120    	; 0x3ebc <__ultoa_invert+0x9c>
    3e44:	67 0f       	add	r22, r23
    3e46:	78 1f       	adc	r23, r24
    3e48:	89 1f       	adc	r24, r25
    3e4a:	9a 1f       	adc	r25, r26
    3e4c:	a1 1d       	adc	r26, r1
    3e4e:	68 0f       	add	r22, r24
    3e50:	79 1f       	adc	r23, r25
    3e52:	8a 1f       	adc	r24, r26
    3e54:	91 1d       	adc	r25, r1
    3e56:	a1 1d       	adc	r26, r1
    3e58:	6a 0f       	add	r22, r26
    3e5a:	71 1d       	adc	r23, r1
    3e5c:	81 1d       	adc	r24, r1
    3e5e:	91 1d       	adc	r25, r1
    3e60:	a1 1d       	adc	r26, r1
    3e62:	20 d0       	rcall	.+64     	; 0x3ea4 <__ultoa_invert+0x84>
    3e64:	09 f4       	brne	.+2      	; 0x3e68 <__ultoa_invert+0x48>
    3e66:	68 94       	set
    3e68:	3f 91       	pop	r19
    3e6a:	2a e0       	ldi	r18, 0x0A	; 10
    3e6c:	26 9f       	mul	r18, r22
    3e6e:	11 24       	eor	r1, r1
    3e70:	30 19       	sub	r19, r0
    3e72:	30 5d       	subi	r19, 0xD0	; 208
    3e74:	31 93       	st	Z+, r19
    3e76:	de f6       	brtc	.-74     	; 0x3e2e <__ultoa_invert+0xe>
    3e78:	cf 01       	movw	r24, r30
    3e7a:	08 95       	ret
    3e7c:	46 2f       	mov	r20, r22
    3e7e:	47 70       	andi	r20, 0x07	; 7
    3e80:	40 5d       	subi	r20, 0xD0	; 208
    3e82:	41 93       	st	Z+, r20
    3e84:	b3 e0       	ldi	r27, 0x03	; 3
    3e86:	0f d0       	rcall	.+30     	; 0x3ea6 <__ultoa_invert+0x86>
    3e88:	c9 f7       	brne	.-14     	; 0x3e7c <__ultoa_invert+0x5c>
    3e8a:	f6 cf       	rjmp	.-20     	; 0x3e78 <__ultoa_invert+0x58>
    3e8c:	46 2f       	mov	r20, r22
    3e8e:	4f 70       	andi	r20, 0x0F	; 15
    3e90:	40 5d       	subi	r20, 0xD0	; 208
    3e92:	4a 33       	cpi	r20, 0x3A	; 58
    3e94:	18 f0       	brcs	.+6      	; 0x3e9c <__ultoa_invert+0x7c>
    3e96:	49 5d       	subi	r20, 0xD9	; 217
    3e98:	31 fd       	sbrc	r19, 1
    3e9a:	40 52       	subi	r20, 0x20	; 32
    3e9c:	41 93       	st	Z+, r20
    3e9e:	02 d0       	rcall	.+4      	; 0x3ea4 <__ultoa_invert+0x84>
    3ea0:	a9 f7       	brne	.-22     	; 0x3e8c <__ultoa_invert+0x6c>
    3ea2:	ea cf       	rjmp	.-44     	; 0x3e78 <__ultoa_invert+0x58>
    3ea4:	b4 e0       	ldi	r27, 0x04	; 4
    3ea6:	a6 95       	lsr	r26
    3ea8:	97 95       	ror	r25
    3eaa:	87 95       	ror	r24
    3eac:	77 95       	ror	r23
    3eae:	67 95       	ror	r22
    3eb0:	ba 95       	dec	r27
    3eb2:	c9 f7       	brne	.-14     	; 0x3ea6 <__ultoa_invert+0x86>
    3eb4:	00 97       	sbiw	r24, 0x00	; 0
    3eb6:	61 05       	cpc	r22, r1
    3eb8:	71 05       	cpc	r23, r1
    3eba:	08 95       	ret
    3ebc:	9b 01       	movw	r18, r22
    3ebe:	ac 01       	movw	r20, r24
    3ec0:	0a 2e       	mov	r0, r26
    3ec2:	06 94       	lsr	r0
    3ec4:	57 95       	ror	r21
    3ec6:	47 95       	ror	r20
    3ec8:	37 95       	ror	r19
    3eca:	27 95       	ror	r18
    3ecc:	ba 95       	dec	r27
    3ece:	c9 f7       	brne	.-14     	; 0x3ec2 <__ultoa_invert+0xa2>
    3ed0:	62 0f       	add	r22, r18
    3ed2:	73 1f       	adc	r23, r19
    3ed4:	84 1f       	adc	r24, r20
    3ed6:	95 1f       	adc	r25, r21
    3ed8:	a0 1d       	adc	r26, r0
    3eda:	08 95       	ret

00003edc <__prologue_saves__>:
    3edc:	2f 92       	push	r2
    3ede:	3f 92       	push	r3
    3ee0:	4f 92       	push	r4
    3ee2:	5f 92       	push	r5
    3ee4:	6f 92       	push	r6
    3ee6:	7f 92       	push	r7
    3ee8:	8f 92       	push	r8
    3eea:	9f 92       	push	r9
    3eec:	af 92       	push	r10
    3eee:	bf 92       	push	r11
    3ef0:	cf 92       	push	r12
    3ef2:	df 92       	push	r13
    3ef4:	ef 92       	push	r14
    3ef6:	ff 92       	push	r15
    3ef8:	0f 93       	push	r16
    3efa:	1f 93       	push	r17
    3efc:	cf 93       	push	r28
    3efe:	df 93       	push	r29
    3f00:	cd b7       	in	r28, 0x3d	; 61
    3f02:	de b7       	in	r29, 0x3e	; 62
    3f04:	ca 1b       	sub	r28, r26
    3f06:	db 0b       	sbc	r29, r27
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	f8 94       	cli
    3f0c:	de bf       	out	0x3e, r29	; 62
    3f0e:	0f be       	out	0x3f, r0	; 63
    3f10:	cd bf       	out	0x3d, r28	; 61
    3f12:	09 94       	ijmp

00003f14 <__epilogue_restores__>:
    3f14:	2a 88       	ldd	r2, Y+18	; 0x12
    3f16:	39 88       	ldd	r3, Y+17	; 0x11
    3f18:	48 88       	ldd	r4, Y+16	; 0x10
    3f1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f20:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f22:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f24:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f26:	b9 84       	ldd	r11, Y+9	; 0x09
    3f28:	c8 84       	ldd	r12, Y+8	; 0x08
    3f2a:	df 80       	ldd	r13, Y+7	; 0x07
    3f2c:	ee 80       	ldd	r14, Y+6	; 0x06
    3f2e:	fd 80       	ldd	r15, Y+5	; 0x05
    3f30:	0c 81       	ldd	r16, Y+4	; 0x04
    3f32:	1b 81       	ldd	r17, Y+3	; 0x03
    3f34:	aa 81       	ldd	r26, Y+2	; 0x02
    3f36:	b9 81       	ldd	r27, Y+1	; 0x01
    3f38:	ce 0f       	add	r28, r30
    3f3a:	d1 1d       	adc	r29, r1
    3f3c:	0f b6       	in	r0, 0x3f	; 63
    3f3e:	f8 94       	cli
    3f40:	de bf       	out	0x3e, r29	; 62
    3f42:	0f be       	out	0x3f, r0	; 63
    3f44:	cd bf       	out	0x3d, r28	; 61
    3f46:	ed 01       	movw	r28, r26
    3f48:	08 95       	ret

00003f4a <_exit>:
    3f4a:	f8 94       	cli

00003f4c <__stop_program>:
    3f4c:	ff cf       	rjmp	.-2      	; 0x3f4c <__stop_program>
