
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00002852  000028e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000b0  008000b0  00002936  2**0
                  ALLOC
  3 .stab         000050f4  00000000  00000000  00002938  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002de7  00000000  00000000  00007a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000a813  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000a824  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0000a860  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0000ad46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000b1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000b203  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__vector_1>
       8:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_2>
       c:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <main>
      8a:	0c 94 27 14 	jmp	0x284e	; 0x284e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Convert_IntToString>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <Convert_IntToString+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <Convert_IntToString+0x8>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	8a 83       	std	Y+2, r24	; 0x02
      a0:	7c 83       	std	Y+4, r23	; 0x04
      a2:	6b 83       	std	Y+3, r22	; 0x03
      a4:	19 82       	std	Y+1, r1	; 0x01
      a6:	8b 81       	ldd	r24, Y+3	; 0x03
      a8:	9c 81       	ldd	r25, Y+4	; 0x04
      aa:	89 2b       	or	r24, r25
      ac:	19 f4       	brne	.+6      	; 0xb4 <Convert_IntToString+0x22>
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	89 83       	std	Y+1, r24	; 0x01
      b2:	19 c0       	rjmp	.+50     	; 0xe6 <Convert_IntToString+0x54>
      b4:	8a 81       	ldd	r24, Y+2	; 0x02
      b6:	88 2f       	mov	r24, r24
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	29 2f       	mov	r18, r25
      bc:	2f 93       	push	r18
      be:	8f 93       	push	r24
      c0:	89 e9       	ldi	r24, 0x99	; 153
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	89 2f       	mov	r24, r25
      c6:	8f 93       	push	r24
      c8:	89 e9       	ldi	r24, 0x99	; 153
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	8f 93       	push	r24
      ce:	8c 81       	ldd	r24, Y+4	; 0x04
      d0:	8f 93       	push	r24
      d2:	8b 81       	ldd	r24, Y+3	; 0x03
      d4:	8f 93       	push	r24
      d6:	0e 94 3d 11 	call	0x227a	; 0x227a <sprintf>
      da:	0f 90       	pop	r0
      dc:	0f 90       	pop	r0
      de:	0f 90       	pop	r0
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	0f 90       	pop	r0
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	0f 90       	pop	r0
      ee:	0f 90       	pop	r0
      f0:	df 91       	pop	r29
      f2:	cf 91       	pop	r28
      f4:	08 95       	ret

000000f6 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u8Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f32 Copy_f32Number, pu8 Address_str){
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
      fe:	27 97       	sbiw	r28, 0x07	; 7
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	6a 83       	std	Y+2, r22	; 0x02
     10c:	7b 83       	std	Y+3, r23	; 0x03
     10e:	8c 83       	std	Y+4, r24	; 0x04
     110:	9d 83       	std	Y+5, r25	; 0x05
     112:	5f 83       	std	Y+7, r21	; 0x07
     114:	4e 83       	std	Y+6, r20	; 0x06


	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     116:	19 82       	std	Y+1, r1	; 0x01
		if(NULL == Address_str){
     118:	8e 81       	ldd	r24, Y+6	; 0x06
     11a:	9f 81       	ldd	r25, Y+7	; 0x07
     11c:	89 2b       	or	r24, r25
     11e:	19 f4       	brne	.+6      	; 0x126 <Convert_FloatToString+0x30>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	89 83       	std	Y+1, r24	; 0x01
     124:	1d c0       	rjmp	.+58     	; 0x160 <Convert_FloatToString+0x6a>
		}

		else{

			sprintf(Address_str, "%f", Copy_f32Number);
     126:	8d 81       	ldd	r24, Y+5	; 0x05
     128:	8f 93       	push	r24
     12a:	8c 81       	ldd	r24, Y+4	; 0x04
     12c:	8f 93       	push	r24
     12e:	8b 81       	ldd	r24, Y+3	; 0x03
     130:	8f 93       	push	r24
     132:	8a 81       	ldd	r24, Y+2	; 0x02
     134:	8f 93       	push	r24
     136:	8d e9       	ldi	r24, 0x9D	; 157
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	89 2f       	mov	r24, r25
     13c:	8f 93       	push	r24
     13e:	8d e9       	ldi	r24, 0x9D	; 157
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	8f 93       	push	r24
     144:	8f 81       	ldd	r24, Y+7	; 0x07
     146:	8f 93       	push	r24
     148:	8e 81       	ldd	r24, Y+6	; 0x06
     14a:	8f 93       	push	r24
     14c:	0e 94 3d 11 	call	0x227a	; 0x227a <sprintf>
     150:	8d b7       	in	r24, 0x3d	; 61
     152:	9e b7       	in	r25, 0x3e	; 62
     154:	08 96       	adiw	r24, 0x08	; 8
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
		}

		return Loc_enuStatus;
     160:	89 81       	ldd	r24, Y+1	; 0x01


}
     162:	27 96       	adiw	r28, 0x07	; 7
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <Convert_StringToInt>:


Std_StatusType Convert_StringToInt (u64* Address_Number, pu8 Address_str){
     174:	2f 92       	push	r2
     176:	3f 92       	push	r3
     178:	4f 92       	push	r4
     17a:	5f 92       	push	r5
     17c:	6f 92       	push	r6
     17e:	7f 92       	push	r7
     180:	8f 92       	push	r8
     182:	9f 92       	push	r9
     184:	af 92       	push	r10
     186:	bf 92       	push	r11
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	6e 97       	sbiw	r28, 0x1e	; 30
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
     1a8:	9c 87       	std	Y+12, r25	; 0x0c
     1aa:	8b 87       	std	Y+11, r24	; 0x0b
     1ac:	7e 87       	std	Y+14, r23	; 0x0e
     1ae:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     1b0:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     1b2:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     1b4:	1b 82       	std	Y+3, r1	; 0x03
     1b6:	1c 82       	std	Y+4, r1	; 0x04
     1b8:	1d 82       	std	Y+5, r1	; 0x05
     1ba:	1e 82       	std	Y+6, r1	; 0x06
     1bc:	1f 82       	std	Y+7, r1	; 0x07
     1be:	18 86       	std	Y+8, r1	; 0x08
     1c0:	19 86       	std	Y+9, r1	; 0x09
     1c2:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     1c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1c8:	89 2b       	or	r24, r25
     1ca:	21 f0       	breq	.+8      	; 0x1d4 <Convert_StringToInt+0x60>
     1cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     1d0:	89 2b       	or	r24, r25
     1d2:	19 f4       	brne	.+6      	; 0x1da <Convert_StringToInt+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	b4 c0       	rjmp	.+360    	; 0x342 <Convert_StringToInt+0x1ce>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     1da:	1a 82       	std	Y+2, r1	; 0x02
     1dc:	8c c0       	rjmp	.+280    	; 0x2f6 <Convert_StringToInt+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     1de:	2b 81       	ldd	r18, Y+3	; 0x03
     1e0:	3c 81       	ldd	r19, Y+4	; 0x04
     1e2:	4d 81       	ldd	r20, Y+5	; 0x05
     1e4:	5e 81       	ldd	r21, Y+6	; 0x06
     1e6:	6f 81       	ldd	r22, Y+7	; 0x07
     1e8:	78 85       	ldd	r23, Y+8	; 0x08
     1ea:	89 85       	ldd	r24, Y+9	; 0x09
     1ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ee:	22 2e       	mov	r2, r18
     1f0:	33 2e       	mov	r3, r19
     1f2:	44 2e       	mov	r4, r20
     1f4:	55 2e       	mov	r5, r21
     1f6:	66 2e       	mov	r6, r22
     1f8:	77 2e       	mov	r7, r23
     1fa:	88 2e       	mov	r8, r24
     1fc:	99 2e       	mov	r9, r25
     1fe:	22 2d       	mov	r18, r2
     200:	33 2d       	mov	r19, r3
     202:	44 2d       	mov	r20, r4
     204:	55 2d       	mov	r21, r5
     206:	66 2d       	mov	r22, r6
     208:	77 2d       	mov	r23, r7
     20a:	88 2d       	mov	r24, r8
     20c:	99 2d       	mov	r25, r9
     20e:	01 e0       	ldi	r16, 0x01	; 1
     210:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__ashldi3>
     214:	a2 2e       	mov	r10, r18
     216:	b3 2e       	mov	r11, r19
     218:	c4 2e       	mov	r12, r20
     21a:	d5 2e       	mov	r13, r21
     21c:	e6 2e       	mov	r14, r22
     21e:	f7 2e       	mov	r15, r23
     220:	08 2f       	mov	r16, r24
     222:	19 2f       	mov	r17, r25
     224:	2a 2c       	mov	r2, r10
     226:	3b 2c       	mov	r3, r11
     228:	4c 2c       	mov	r4, r12
     22a:	5d 2c       	mov	r5, r13
     22c:	6e 2c       	mov	r6, r14
     22e:	7f 2c       	mov	r7, r15
     230:	80 2e       	mov	r8, r16
     232:	91 2e       	mov	r9, r17
     234:	22 2d       	mov	r18, r2
     236:	33 2d       	mov	r19, r3
     238:	44 2d       	mov	r20, r4
     23a:	55 2d       	mov	r21, r5
     23c:	66 2d       	mov	r22, r6
     23e:	77 2d       	mov	r23, r7
     240:	88 2d       	mov	r24, r8
     242:	99 2d       	mov	r25, r9
     244:	02 e0       	ldi	r16, 0x02	; 2
     246:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <__ashldi3>
     24a:	2f 8b       	std	Y+23, r18	; 0x17
     24c:	38 8f       	std	Y+24, r19	; 0x18
     24e:	49 8f       	std	Y+25, r20	; 0x19
     250:	5a 8f       	std	Y+26, r21	; 0x1a
     252:	6b 8f       	std	Y+27, r22	; 0x1b
     254:	7c 8f       	std	Y+28, r23	; 0x1c
     256:	8d 8f       	std	Y+29, r24	; 0x1d
     258:	9e 8f       	std	Y+30, r25	; 0x1e
     25a:	22 2d       	mov	r18, r2
     25c:	33 2d       	mov	r19, r3
     25e:	44 2d       	mov	r20, r4
     260:	55 2d       	mov	r21, r5
     262:	66 2d       	mov	r22, r6
     264:	77 2d       	mov	r23, r7
     266:	88 2d       	mov	r24, r8
     268:	99 2d       	mov	r25, r9
     26a:	af 88       	ldd	r10, Y+23	; 0x17
     26c:	b8 8c       	ldd	r11, Y+24	; 0x18
     26e:	c9 8c       	ldd	r12, Y+25	; 0x19
     270:	da 8c       	ldd	r13, Y+26	; 0x1a
     272:	eb 8c       	ldd	r14, Y+27	; 0x1b
     274:	fc 8c       	ldd	r15, Y+28	; 0x1c
     276:	0d 8d       	ldd	r16, Y+29	; 0x1d
     278:	1e 8d       	ldd	r17, Y+30	; 0x1e
     27a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__adddi3>
     27e:	a2 2e       	mov	r10, r18
     280:	b3 2e       	mov	r11, r19
     282:	c4 2e       	mov	r12, r20
     284:	d5 2e       	mov	r13, r21
     286:	e6 2e       	mov	r14, r22
     288:	f7 2e       	mov	r15, r23
     28a:	08 2f       	mov	r16, r24
     28c:	19 2f       	mov	r17, r25
     28e:	8a 81       	ldd	r24, Y+2	; 0x02
     290:	88 2f       	mov	r24, r24
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	2d 85       	ldd	r18, Y+13	; 0x0d
     296:	3e 85       	ldd	r19, Y+14	; 0x0e
     298:	82 0f       	add	r24, r18
     29a:	93 1f       	adc	r25, r19
     29c:	fc 01       	movw	r30, r24
     29e:	80 81       	ld	r24, Z
     2a0:	88 2f       	mov	r24, r24
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	c0 97       	sbiw	r24, 0x30	; 48
     2a6:	98 8b       	std	Y+16, r25	; 0x10
     2a8:	8f 87       	std	Y+15, r24	; 0x0f
     2aa:	89 2f       	mov	r24, r25
     2ac:	88 0f       	add	r24, r24
     2ae:	88 0b       	sbc	r24, r24
     2b0:	89 8b       	std	Y+17, r24	; 0x11
     2b2:	8a 8b       	std	Y+18, r24	; 0x12
     2b4:	8b 8b       	std	Y+19, r24	; 0x13
     2b6:	8c 8b       	std	Y+20, r24	; 0x14
     2b8:	8d 8b       	std	Y+21, r24	; 0x15
     2ba:	8e 8b       	std	Y+22, r24	; 0x16
     2bc:	2a 2d       	mov	r18, r10
     2be:	3b 2d       	mov	r19, r11
     2c0:	4c 2d       	mov	r20, r12
     2c2:	5d 2d       	mov	r21, r13
     2c4:	6e 2d       	mov	r22, r14
     2c6:	7f 2d       	mov	r23, r15
     2c8:	80 2f       	mov	r24, r16
     2ca:	91 2f       	mov	r25, r17
     2cc:	af 84       	ldd	r10, Y+15	; 0x0f
     2ce:	b8 88       	ldd	r11, Y+16	; 0x10
     2d0:	c9 88       	ldd	r12, Y+17	; 0x11
     2d2:	da 88       	ldd	r13, Y+18	; 0x12
     2d4:	eb 88       	ldd	r14, Y+19	; 0x13
     2d6:	fc 88       	ldd	r15, Y+20	; 0x14
     2d8:	0d 89       	ldd	r16, Y+21	; 0x15
     2da:	1e 89       	ldd	r17, Y+22	; 0x16
     2dc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__adddi3>
     2e0:	2b 83       	std	Y+3, r18	; 0x03
     2e2:	3c 83       	std	Y+4, r19	; 0x04
     2e4:	4d 83       	std	Y+5, r20	; 0x05
     2e6:	5e 83       	std	Y+6, r21	; 0x06
     2e8:	6f 83       	std	Y+7, r22	; 0x07
     2ea:	78 87       	std	Y+8, r23	; 0x08
     2ec:	89 87       	std	Y+9, r24	; 0x09
     2ee:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	8f 5f       	subi	r24, 0xFF	; 255
     2f4:	8a 83       	std	Y+2, r24	; 0x02
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	88 2f       	mov	r24, r24
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2fe:	3e 85       	ldd	r19, Y+14	; 0x0e
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	fc 01       	movw	r30, r24
     306:	80 81       	ld	r24, Z
     308:	88 23       	and	r24, r24
     30a:	09 f0       	breq	.+2      	; 0x30e <Convert_StringToInt+0x19a>
     30c:	68 cf       	rjmp	.-304    	; 0x1de <Convert_StringToInt+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     30e:	8b 85       	ldd	r24, Y+11	; 0x0b
     310:	9c 85       	ldd	r25, Y+12	; 0x0c
     312:	2b 81       	ldd	r18, Y+3	; 0x03
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
     318:	2c 81       	ldd	r18, Y+4	; 0x04
     31a:	fc 01       	movw	r30, r24
     31c:	21 83       	std	Z+1, r18	; 0x01
     31e:	2d 81       	ldd	r18, Y+5	; 0x05
     320:	fc 01       	movw	r30, r24
     322:	22 83       	std	Z+2, r18	; 0x02
     324:	2e 81       	ldd	r18, Y+6	; 0x06
     326:	fc 01       	movw	r30, r24
     328:	23 83       	std	Z+3, r18	; 0x03
     32a:	2f 81       	ldd	r18, Y+7	; 0x07
     32c:	fc 01       	movw	r30, r24
     32e:	24 83       	std	Z+4, r18	; 0x04
     330:	28 85       	ldd	r18, Y+8	; 0x08
     332:	fc 01       	movw	r30, r24
     334:	25 83       	std	Z+5, r18	; 0x05
     336:	29 85       	ldd	r18, Y+9	; 0x09
     338:	fc 01       	movw	r30, r24
     33a:	26 83       	std	Z+6, r18	; 0x06
     33c:	2a 85       	ldd	r18, Y+10	; 0x0a
     33e:	fc 01       	movw	r30, r24
     340:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     342:	89 81       	ldd	r24, Y+1	; 0x01

}
     344:	6e 96       	adiw	r28, 0x1e	; 30
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
     358:	ff 90       	pop	r15
     35a:	ef 90       	pop	r14
     35c:	df 90       	pop	r13
     35e:	cf 90       	pop	r12
     360:	bf 90       	pop	r11
     362:	af 90       	pop	r10
     364:	9f 90       	pop	r9
     366:	8f 90       	pop	r8
     368:	7f 90       	pop	r7
     36a:	6f 90       	pop	r6
     36c:	5f 90       	pop	r5
     36e:	4f 90       	pop	r4
     370:	3f 90       	pop	r3
     372:	2f 90       	pop	r2
     374:	08 95       	ret

00000376 <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     37e:	8a e3       	ldi	r24, 0x3A	; 58
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	2d e7       	ldi	r18, 0x7D	; 125
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     388:	87 e3       	ldi	r24, 0x37	; 55
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	23 e3       	ldi	r18, 0x33	; 51
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     392:	84 e3       	ldi	r24, 0x34	; 52
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	2f ef       	ldi	r18, 0xFF	; 255
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     39c:	81 e3       	ldi	r24, 0x31	; 49
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	10 82       	st	Z, r1

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     3a4:	8b e3       	ldi	r24, 0x3B	; 59
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	fc 01       	movw	r30, r24
     3aa:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     3ac:	88 e3       	ldi	r24, 0x38	; 56
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	fc 01       	movw	r30, r24
     3b2:	10 82       	st	Z, r1
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     3b4:	85 e3       	ldi	r24, 0x35	; 53
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	fc 01       	movw	r30, r24
     3ba:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     3bc:	82 e3       	ldi	r24, 0x32	; 50
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	2c ee       	ldi	r18, 0xEC	; 236
     3c2:	fc 01       	movw	r30, r24
     3c4:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
     3c6:	00 00       	nop
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <Port_enuSetPinDirection+0x6>
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <Port_enuSetPinDirection+0x8>
     3d6:	1f 92       	push	r1
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	8c 83       	std	Y+4, r24	; 0x04
     3de:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     3e0:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     3e2:	8c 81       	ldd	r24, Y+4	; 0x04
     3e4:	87 70       	andi	r24, 0x07	; 7
     3e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     3e8:	8c 81       	ldd	r24, Y+4	; 0x04
     3ea:	86 95       	lsr	r24
     3ec:	86 95       	lsr	r24
     3ee:	86 95       	lsr	r24
     3f0:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     3f2:	8c 81       	ldd	r24, Y+4	; 0x04
     3f4:	80 32       	cpi	r24, 0x20	; 32
     3f6:	18 f0       	brcs	.+6      	; 0x3fe <Port_enuSetPinDirection+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	59 c0       	rjmp	.+178    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
     3fe:	8d 81       	ldd	r24, Y+5	; 0x05
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	18 f0       	brcs	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	89 83       	std	Y+1, r24	; 0x01
     408:	53 c0       	rjmp	.+166    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		}

	else{

			switch(Copy_u8PinDirection){
     40a:	8d 81       	ldd	r24, Y+5	; 0x05
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	00 97       	sbiw	r24, 0x00	; 0
     412:	41 f1       	breq	.+80     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
							break;

			default:

				// impossible
					break;
     418:	4b c0       	rjmp	.+150    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     41a:	8b 81       	ldd	r24, Y+3	; 0x03
     41c:	88 2f       	mov	r24, r24
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	80 5a       	subi	r24, 0xA0	; 160
     426:	9f 4f       	sbci	r25, 0xFF	; 255
     428:	fc 01       	movw	r30, r24
     42a:	80 81       	ld	r24, Z
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	2b 81       	ldd	r18, Y+3	; 0x03
     430:	22 2f       	mov	r18, r18
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	22 0f       	add	r18, r18
     436:	33 1f       	adc	r19, r19
     438:	20 5a       	subi	r18, 0xA0	; 160
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	f9 01       	movw	r30, r18
     43e:	20 81       	ld	r18, Z
     440:	31 81       	ldd	r19, Z+1	; 0x01
     442:	f9 01       	movw	r30, r18
     444:	20 81       	ld	r18, Z
     446:	62 2f       	mov	r22, r18
     448:	2a 81       	ldd	r18, Y+2	; 0x02
     44a:	42 2f       	mov	r20, r18
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	02 c0       	rjmp	.+4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     454:	22 0f       	add	r18, r18
     456:	33 1f       	adc	r19, r19
     458:	4a 95       	dec	r20
     45a:	e2 f7       	brpl	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     45c:	26 2b       	or	r18, r22
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
					break;
     462:	26 c0       	rjmp	.+76     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     464:	8b 81       	ldd	r24, Y+3	; 0x03
     466:	88 2f       	mov	r24, r24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	88 0f       	add	r24, r24
     46c:	99 1f       	adc	r25, r25
     46e:	80 5a       	subi	r24, 0xA0	; 160
     470:	9f 4f       	sbci	r25, 0xFF	; 255
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	91 81       	ldd	r25, Z+1	; 0x01
     478:	2b 81       	ldd	r18, Y+3	; 0x03
     47a:	22 2f       	mov	r18, r18
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	20 5a       	subi	r18, 0xA0	; 160
     484:	3f 4f       	sbci	r19, 0xFF	; 255
     486:	f9 01       	movw	r30, r18
     488:	20 81       	ld	r18, Z
     48a:	31 81       	ldd	r19, Z+1	; 0x01
     48c:	f9 01       	movw	r30, r18
     48e:	20 81       	ld	r18, Z
     490:	62 2f       	mov	r22, r18
     492:	2a 81       	ldd	r18, Y+2	; 0x02
     494:	42 2f       	mov	r20, r18
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	21 e0       	ldi	r18, 0x01	; 1
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49e:	22 0f       	add	r18, r18
     4a0:	33 1f       	adc	r19, r19
     4a2:	4a 95       	dec	r20
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     4a6:	20 95       	com	r18
     4a8:	26 23       	and	r18, r22
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 83       	st	Z, r18
							break;
     4ae:	00 00       	nop

	}



	return Loc_enuState;
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <Port_enuSetPinMode+0x6>
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <Port_enuSetPinMode+0x8>
     4ca:	1f 92       	push	r1
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	8c 83       	std	Y+4, r24	; 0x04
     4d2:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     4d4:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     4d6:	8c 81       	ldd	r24, Y+4	; 0x04
     4d8:	87 70       	andi	r24, 0x07	; 7
     4da:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     4dc:	8c 81       	ldd	r24, Y+4	; 0x04
     4de:	86 95       	lsr	r24
     4e0:	86 95       	lsr	r24
     4e2:	86 95       	lsr	r24
     4e4:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     4e6:	8c 81       	ldd	r24, Y+4	; 0x04
     4e8:	80 32       	cpi	r24, 0x20	; 32
     4ea:	18 f0       	brcs	.+6      	; 0x4f2 <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	89 83       	std	Y+1, r24	; 0x01
     4f0:	43 c1       	rjmp	.+646    	; 0x778 <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
     4f2:	8d 81       	ldd	r24, Y+5	; 0x05
     4f4:	84 30       	cpi	r24, 0x04	; 4
     4f6:	18 f0       	brcs	.+6      	; 0x4fe <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	89 83       	std	Y+1, r24	; 0x01
     4fc:	3d c1       	rjmp	.+634    	; 0x778 <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
     4fe:	8d 81       	ldd	r24, Y+5	; 0x05
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	91 05       	cpc	r25, r1
     508:	09 f4       	brne	.+2      	; 0x50c <Port_enuSetPinMode+0x4a>
     50a:	57 c0       	rjmp	.+174    	; 0x5ba <Port_enuSetPinMode+0xf8>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	91 05       	cpc	r25, r1
     510:	1c f4       	brge	.+6      	; 0x518 <Port_enuSetPinMode+0x56>
     512:	89 2b       	or	r24, r25
     514:	49 f0       	breq	.+18     	; 0x528 <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
     516:	30 c1       	rjmp	.+608    	; 0x778 <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	91 05       	cpc	r25, r1
     51c:	09 f4       	brne	.+2      	; 0x520 <Port_enuSetPinMode+0x5e>
     51e:	97 c0       	rjmp	.+302    	; 0x64e <Port_enuSetPinMode+0x18c>
     520:	03 97       	sbiw	r24, 0x03	; 3
     522:	09 f4       	brne	.+2      	; 0x526 <Port_enuSetPinMode+0x64>
     524:	df c0       	rjmp	.+446    	; 0x6e4 <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
     526:	28 c1       	rjmp	.+592    	; 0x778 <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	88 2f       	mov	r24, r24
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	80 5a       	subi	r24, 0xA0	; 160
     534:	9f 4f       	sbci	r25, 0xFF	; 255
     536:	fc 01       	movw	r30, r24
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	2b 81       	ldd	r18, Y+3	; 0x03
     53e:	22 2f       	mov	r18, r18
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	22 0f       	add	r18, r18
     544:	33 1f       	adc	r19, r19
     546:	20 5a       	subi	r18, 0xA0	; 160
     548:	3f 4f       	sbci	r19, 0xFF	; 255
     54a:	f9 01       	movw	r30, r18
     54c:	20 81       	ld	r18, Z
     54e:	31 81       	ldd	r19, Z+1	; 0x01
     550:	f9 01       	movw	r30, r18
     552:	20 81       	ld	r18, Z
     554:	62 2f       	mov	r22, r18
     556:	2a 81       	ldd	r18, Y+2	; 0x02
     558:	42 2f       	mov	r20, r18
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	02 c0       	rjmp	.+4      	; 0x566 <Port_enuSetPinMode+0xa4>
     562:	22 0f       	add	r18, r18
     564:	33 1f       	adc	r19, r19
     566:	4a 95       	dec	r20
     568:	e2 f7       	brpl	.-8      	; 0x562 <Port_enuSetPinMode+0xa0>
     56a:	26 2b       	or	r18, r22
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     570:	8b 81       	ldd	r24, Y+3	; 0x03
     572:	88 2f       	mov	r24, r24
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	88 59       	subi	r24, 0x98	; 152
     57c:	9f 4f       	sbci	r25, 0xFF	; 255
     57e:	fc 01       	movw	r30, r24
     580:	80 81       	ld	r24, Z
     582:	91 81       	ldd	r25, Z+1	; 0x01
     584:	2b 81       	ldd	r18, Y+3	; 0x03
     586:	22 2f       	mov	r18, r18
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	22 0f       	add	r18, r18
     58c:	33 1f       	adc	r19, r19
     58e:	28 59       	subi	r18, 0x98	; 152
     590:	3f 4f       	sbci	r19, 0xFF	; 255
     592:	f9 01       	movw	r30, r18
     594:	20 81       	ld	r18, Z
     596:	31 81       	ldd	r19, Z+1	; 0x01
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	62 2f       	mov	r22, r18
     59e:	2a 81       	ldd	r18, Y+2	; 0x02
     5a0:	42 2f       	mov	r20, r18
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <Port_enuSetPinMode+0xec>
     5aa:	22 0f       	add	r18, r18
     5ac:	33 1f       	adc	r19, r19
     5ae:	4a 95       	dec	r20
     5b0:	e2 f7       	brpl	.-8      	; 0x5aa <Port_enuSetPinMode+0xe8>
     5b2:	26 2b       	or	r18, r22
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18
					break;
     5b8:	df c0       	rjmp	.+446    	; 0x778 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	88 2f       	mov	r24, r24
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	80 5a       	subi	r24, 0xA0	; 160
     5c6:	9f 4f       	sbci	r25, 0xFF	; 255
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	91 81       	ldd	r25, Z+1	; 0x01
     5ce:	2b 81       	ldd	r18, Y+3	; 0x03
     5d0:	22 2f       	mov	r18, r18
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	22 0f       	add	r18, r18
     5d6:	33 1f       	adc	r19, r19
     5d8:	20 5a       	subi	r18, 0xA0	; 160
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
     5dc:	f9 01       	movw	r30, r18
     5de:	20 81       	ld	r18, Z
     5e0:	31 81       	ldd	r19, Z+1	; 0x01
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	62 2f       	mov	r22, r18
     5e8:	2a 81       	ldd	r18, Y+2	; 0x02
     5ea:	42 2f       	mov	r20, r18
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <Port_enuSetPinMode+0x136>
     5f4:	22 0f       	add	r18, r18
     5f6:	33 1f       	adc	r19, r19
     5f8:	4a 95       	dec	r20
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <Port_enuSetPinMode+0x132>
     5fc:	26 2b       	or	r18, r22
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	88 59       	subi	r24, 0x98	; 152
     60e:	9f 4f       	sbci	r25, 0xFF	; 255
     610:	fc 01       	movw	r30, r24
     612:	80 81       	ld	r24, Z
     614:	91 81       	ldd	r25, Z+1	; 0x01
     616:	2b 81       	ldd	r18, Y+3	; 0x03
     618:	22 2f       	mov	r18, r18
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	22 0f       	add	r18, r18
     61e:	33 1f       	adc	r19, r19
     620:	28 59       	subi	r18, 0x98	; 152
     622:	3f 4f       	sbci	r19, 0xFF	; 255
     624:	f9 01       	movw	r30, r18
     626:	20 81       	ld	r18, Z
     628:	31 81       	ldd	r19, Z+1	; 0x01
     62a:	f9 01       	movw	r30, r18
     62c:	20 81       	ld	r18, Z
     62e:	62 2f       	mov	r22, r18
     630:	2a 81       	ldd	r18, Y+2	; 0x02
     632:	42 2f       	mov	r20, r18
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	21 e0       	ldi	r18, 0x01	; 1
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	02 c0       	rjmp	.+4      	; 0x640 <Port_enuSetPinMode+0x17e>
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	4a 95       	dec	r20
     642:	e2 f7       	brpl	.-8      	; 0x63c <Port_enuSetPinMode+0x17a>
     644:	20 95       	com	r18
     646:	26 23       	and	r18, r22
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
							break;
     64c:	95 c0       	rjmp	.+298    	; 0x778 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	88 2f       	mov	r24, r24
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	80 5a       	subi	r24, 0xA0	; 160
     65a:	9f 4f       	sbci	r25, 0xFF	; 255
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	2b 81       	ldd	r18, Y+3	; 0x03
     664:	22 2f       	mov	r18, r18
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	20 5a       	subi	r18, 0xA0	; 160
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	f9 01       	movw	r30, r18
     672:	20 81       	ld	r18, Z
     674:	31 81       	ldd	r19, Z+1	; 0x01
     676:	f9 01       	movw	r30, r18
     678:	20 81       	ld	r18, Z
     67a:	62 2f       	mov	r22, r18
     67c:	2a 81       	ldd	r18, Y+2	; 0x02
     67e:	42 2f       	mov	r20, r18
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	02 c0       	rjmp	.+4      	; 0x68c <Port_enuSetPinMode+0x1ca>
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	4a 95       	dec	r20
     68e:	e2 f7       	brpl	.-8      	; 0x688 <Port_enuSetPinMode+0x1c6>
     690:	20 95       	com	r18
     692:	26 23       	and	r18, r22
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	88 2f       	mov	r24, r24
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	88 59       	subi	r24, 0x98	; 152
     6a4:	9f 4f       	sbci	r25, 0xFF	; 255
     6a6:	fc 01       	movw	r30, r24
     6a8:	80 81       	ld	r24, Z
     6aa:	91 81       	ldd	r25, Z+1	; 0x01
     6ac:	2b 81       	ldd	r18, Y+3	; 0x03
     6ae:	22 2f       	mov	r18, r18
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	22 0f       	add	r18, r18
     6b4:	33 1f       	adc	r19, r19
     6b6:	28 59       	subi	r18, 0x98	; 152
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	f9 01       	movw	r30, r18
     6bc:	20 81       	ld	r18, Z
     6be:	31 81       	ldd	r19, Z+1	; 0x01
     6c0:	f9 01       	movw	r30, r18
     6c2:	20 81       	ld	r18, Z
     6c4:	62 2f       	mov	r22, r18
     6c6:	2a 81       	ldd	r18, Y+2	; 0x02
     6c8:	42 2f       	mov	r20, r18
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	21 e0       	ldi	r18, 0x01	; 1
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <Port_enuSetPinMode+0x214>
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	4a 95       	dec	r20
     6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <Port_enuSetPinMode+0x210>
     6da:	20 95       	com	r18
     6dc:	26 23       	and	r18, r22
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
								break;
     6e2:	4a c0       	rjmp	.+148    	; 0x778 <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	88 2f       	mov	r24, r24
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	80 5a       	subi	r24, 0xA0	; 160
     6f0:	9f 4f       	sbci	r25, 0xFF	; 255
     6f2:	fc 01       	movw	r30, r24
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	2b 81       	ldd	r18, Y+3	; 0x03
     6fa:	22 2f       	mov	r18, r18
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	20 5a       	subi	r18, 0xA0	; 160
     704:	3f 4f       	sbci	r19, 0xFF	; 255
     706:	f9 01       	movw	r30, r18
     708:	20 81       	ld	r18, Z
     70a:	31 81       	ldd	r19, Z+1	; 0x01
     70c:	f9 01       	movw	r30, r18
     70e:	20 81       	ld	r18, Z
     710:	62 2f       	mov	r22, r18
     712:	2a 81       	ldd	r18, Y+2	; 0x02
     714:	42 2f       	mov	r20, r18
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	21 e0       	ldi	r18, 0x01	; 1
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	02 c0       	rjmp	.+4      	; 0x722 <Port_enuSetPinMode+0x260>
     71e:	22 0f       	add	r18, r18
     720:	33 1f       	adc	r19, r19
     722:	4a 95       	dec	r20
     724:	e2 f7       	brpl	.-8      	; 0x71e <Port_enuSetPinMode+0x25c>
     726:	20 95       	com	r18
     728:	26 23       	and	r18, r22
     72a:	fc 01       	movw	r30, r24
     72c:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
     72e:	8b 81       	ldd	r24, Y+3	; 0x03
     730:	88 2f       	mov	r24, r24
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	88 59       	subi	r24, 0x98	; 152
     73a:	9f 4f       	sbci	r25, 0xFF	; 255
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	91 81       	ldd	r25, Z+1	; 0x01
     742:	2b 81       	ldd	r18, Y+3	; 0x03
     744:	22 2f       	mov	r18, r18
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	22 0f       	add	r18, r18
     74a:	33 1f       	adc	r19, r19
     74c:	28 59       	subi	r18, 0x98	; 152
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	f9 01       	movw	r30, r18
     752:	20 81       	ld	r18, Z
     754:	31 81       	ldd	r19, Z+1	; 0x01
     756:	f9 01       	movw	r30, r18
     758:	20 81       	ld	r18, Z
     75a:	62 2f       	mov	r22, r18
     75c:	2a 81       	ldd	r18, Y+2	; 0x02
     75e:	42 2f       	mov	r20, r18
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	02 c0       	rjmp	.+4      	; 0x76c <Port_enuSetPinMode+0x2aa>
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	4a 95       	dec	r20
     76e:	e2 f7       	brpl	.-8      	; 0x768 <Port_enuSetPinMode+0x2a6>
     770:	26 2b       	or	r18, r22
     772:	fc 01       	movw	r30, r24
     774:	20 83       	st	Z, r18
								break;
     776:	00 00       	nop



	}

	return Loc_enuState;
     778:	89 81       	ldd	r24, Y+1	; 0x01
}
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	1f 92       	push	r1
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     794:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
     796:	8f e5       	ldi	r24, 0x5F	; 95
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	2f e5       	ldi	r18, 0x5F	; 95
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	f9 01       	movw	r30, r18
     7a0:	20 81       	ld	r18, Z
     7a2:	20 68       	ori	r18, 0x80	; 128
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18

	return Loc_enuGieState;
     7a8:	89 81       	ldd	r24, Y+1	; 0x01

}
     7aa:	0f 90       	pop	r0
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	1f 92       	push	r1
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     7bc:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
     7be:	8f e5       	ldi	r24, 0x5F	; 95
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	2f e5       	ldi	r18, 0x5F	; 95
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	2f 77       	andi	r18, 0x7F	; 127
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 83       	st	Z, r18

		return Loc_enuGieState;
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
}
     7d2:	0f 90       	pop	r0
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <Gie_enuSetGloablInterrupt+0x6>
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     7e6:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
     7e8:	8f e5       	ldi	r24, 0x5F	; 95
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	2f e5       	ldi	r18, 0x5F	; 95
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	f9 01       	movw	r30, r18
     7f2:	20 81       	ld	r18, Z
     7f4:	42 2f       	mov	r20, r18
     7f6:	4f 77       	andi	r20, 0x7F	; 127
     7f8:	2a 81       	ldd	r18, Y+2	; 0x02
     7fa:	22 2f       	mov	r18, r18
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	36 95       	lsr	r19
     800:	32 2f       	mov	r19, r18
     802:	22 27       	eor	r18, r18
     804:	37 95       	ror	r19
     806:	27 95       	ror	r18
     808:	24 2b       	or	r18, r20
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18

			return Loc_enuGieState;
     80e:	89 81       	ldd	r24, Y+1	; 0x01
}
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	00 d0       	rcall	.+0      	; 0x820 <Gie_enuGetGloablInterrupt+0x6>
     820:	00 d0       	rcall	.+0      	; 0x822 <Gie_enuGetGloablInterrupt+0x8>
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	8a 83       	std	Y+2, r24	; 0x02
     828:	7c 83       	std	Y+4, r23	; 0x04
     82a:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
     82c:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	89 2b       	or	r24, r25
     834:	19 f4       	brne	.+6      	; 0x83c <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	89 83       	std	Y+1, r24	; 0x01
     83a:	0c c0       	rjmp	.+24     	; 0x854 <Gie_enuGetGloablInterrupt+0x3a>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
     83c:	8f e5       	ldi	r24, 0x5F	; 95
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	28 2f       	mov	r18, r24
     846:	22 1f       	adc	r18, r18
     848:	22 27       	eor	r18, r18
     84a:	22 1f       	adc	r18, r18
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
     854:	89 81       	ldd	r24, Y+1	; 0x01
}
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	00 d0       	rcall	.+0      	; 0x86a <Exti_enuEnable+0x6>
     86a:	1f 92       	push	r1
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	8a 83       	std	Y+2, r24	; 0x02
     872:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     878:	8a 81       	ldd	r24, Y+2	; 0x02
     87a:	83 30       	cpi	r24, 0x03	; 3
     87c:	18 f0       	brcs	.+6      	; 0x884 <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	8f c0       	rjmp	.+286    	; 0x9a2 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	91 05       	cpc	r25, r1
     88e:	89 f1       	breq	.+98     	; 0x8f2 <Exti_enuEnable+0x8e>
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	91 05       	cpc	r25, r1
     894:	09 f4       	brne	.+2      	; 0x898 <Exti_enuEnable+0x34>
     896:	62 c0       	rjmp	.+196    	; 0x95c <Exti_enuEnable+0xf8>
     898:	89 2b       	or	r24, r25
     89a:	09 f0       	breq	.+2      	; 0x89e <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
     89c:	82 c0       	rjmp	.+260    	; 0x9a2 <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
     89e:	85 e5       	ldi	r24, 0x55	; 85
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	25 e5       	ldi	r18, 0x55	; 85
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	f9 01       	movw	r30, r18
     8a8:	20 81       	ld	r18, Z
     8aa:	32 2f       	mov	r19, r18
     8ac:	3e 7f       	andi	r19, 0xFE	; 254
     8ae:	2b 81       	ldd	r18, Y+3	; 0x03
     8b0:	21 70       	andi	r18, 0x01	; 1
     8b2:	23 2b       	or	r18, r19
     8b4:	fc 01       	movw	r30, r24
     8b6:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
     8b8:	85 e5       	ldi	r24, 0x55	; 85
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	25 e5       	ldi	r18, 0x55	; 85
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	f9 01       	movw	r30, r18
     8c2:	20 81       	ld	r18, Z
     8c4:	42 2f       	mov	r20, r18
     8c6:	4d 7f       	andi	r20, 0xFD	; 253
     8c8:	2b 81       	ldd	r18, Y+3	; 0x03
     8ca:	26 95       	lsr	r18
     8cc:	22 2f       	mov	r18, r18
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	21 70       	andi	r18, 0x01	; 1
     8d2:	33 27       	eor	r19, r19
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	24 2b       	or	r18, r20
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
     8de:	8b e5       	ldi	r24, 0x5B	; 91
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	2b e5       	ldi	r18, 0x5B	; 91
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	f9 01       	movw	r30, r18
     8e8:	20 81       	ld	r18, Z
     8ea:	20 64       	ori	r18, 0x40	; 64
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18

			break;
     8f0:	58 c0       	rjmp	.+176    	; 0x9a2 <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
     8f2:	85 e5       	ldi	r24, 0x55	; 85
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	25 e5       	ldi	r18, 0x55	; 85
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	f9 01       	movw	r30, r18
     8fc:	20 81       	ld	r18, Z
     8fe:	42 2f       	mov	r20, r18
     900:	4b 7f       	andi	r20, 0xFB	; 251
     902:	2b 81       	ldd	r18, Y+3	; 0x03
     904:	22 2f       	mov	r18, r18
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	21 70       	andi	r18, 0x01	; 1
     90a:	33 27       	eor	r19, r19
     90c:	22 0f       	add	r18, r18
     90e:	33 1f       	adc	r19, r19
     910:	22 0f       	add	r18, r18
     912:	33 1f       	adc	r19, r19
     914:	24 2b       	or	r18, r20
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
     91a:	85 e5       	ldi	r24, 0x55	; 85
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	25 e5       	ldi	r18, 0x55	; 85
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	f9 01       	movw	r30, r18
     924:	20 81       	ld	r18, Z
     926:	42 2f       	mov	r20, r18
     928:	47 7f       	andi	r20, 0xF7	; 247
     92a:	2b 81       	ldd	r18, Y+3	; 0x03
     92c:	26 95       	lsr	r18
     92e:	22 2f       	mov	r18, r18
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	21 70       	andi	r18, 0x01	; 1
     934:	33 27       	eor	r19, r19
     936:	22 0f       	add	r18, r18
     938:	33 1f       	adc	r19, r19
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	22 0f       	add	r18, r18
     940:	33 1f       	adc	r19, r19
     942:	24 2b       	or	r18, r20
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
     948:	8b e5       	ldi	r24, 0x5B	; 91
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	2b e5       	ldi	r18, 0x5B	; 91
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	f9 01       	movw	r30, r18
     952:	20 81       	ld	r18, Z
     954:	20 68       	ori	r18, 0x80	; 128
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
			break;
     95a:	23 c0       	rjmp	.+70     	; 0x9a2 <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
     95c:	84 e5       	ldi	r24, 0x54	; 84
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	24 e5       	ldi	r18, 0x54	; 84
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	20 81       	ld	r18, Z
     968:	42 2f       	mov	r20, r18
     96a:	4f 7b       	andi	r20, 0xBF	; 191
     96c:	2b 81       	ldd	r18, Y+3	; 0x03
     96e:	22 2f       	mov	r18, r18
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	21 70       	andi	r18, 0x01	; 1
     974:	33 27       	eor	r19, r19
     976:	00 24       	eor	r0, r0
     978:	36 95       	lsr	r19
     97a:	27 95       	ror	r18
     97c:	07 94       	ror	r0
     97e:	36 95       	lsr	r19
     980:	27 95       	ror	r18
     982:	07 94       	ror	r0
     984:	32 2f       	mov	r19, r18
     986:	20 2d       	mov	r18, r0
     988:	24 2b       	or	r18, r20
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
     98e:	8b e5       	ldi	r24, 0x5B	; 91
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	2b e5       	ldi	r18, 0x5B	; 91
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	f9 01       	movw	r30, r18
     998:	20 81       	ld	r18, Z
     99a:	20 62       	ori	r18, 0x20	; 32
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18
			break;
     9a0:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
     9a2:	89 81       	ldd	r24, Y+1	; 0x01

}
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <Exti_enuDisable+0x6>
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	83 30       	cpi	r24, 0x03	; 3
     9c4:	18 f0       	brcs	.+6      	; 0x9cc <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	89 83       	std	Y+1, r24	; 0x01
     9ca:	2a c0       	rjmp	.+84     	; 0xa20 <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
     9cc:	8a 81       	ldd	r24, Y+2	; 0x02
     9ce:	88 2f       	mov	r24, r24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	91 05       	cpc	r25, r1
     9d6:	81 f0       	breq	.+32     	; 0x9f8 <Exti_enuDisable+0x48>
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	91 05       	cpc	r25, r1
     9dc:	b9 f0       	breq	.+46     	; 0xa0c <Exti_enuDisable+0x5c>
     9de:	89 2b       	or	r24, r25
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
     9e2:	1e c0       	rjmp	.+60     	; 0xa20 <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
     9e4:	8b e5       	ldi	r24, 0x5B	; 91
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	2b e5       	ldi	r18, 0x5B	; 91
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	f9 01       	movw	r30, r18
     9ee:	20 81       	ld	r18, Z
     9f0:	2f 7b       	andi	r18, 0xBF	; 191
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
			break;
     9f6:	14 c0       	rjmp	.+40     	; 0xa20 <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
     9f8:	8b e5       	ldi	r24, 0x5B	; 91
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	2b e5       	ldi	r18, 0x5B	; 91
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	f9 01       	movw	r30, r18
     a02:	20 81       	ld	r18, Z
     a04:	2f 77       	andi	r18, 0x7F	; 127
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
			break;
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
     a0c:	8b e5       	ldi	r24, 0x5B	; 91
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	2b e5       	ldi	r18, 0x5B	; 91
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	f9 01       	movw	r30, r18
     a16:	20 81       	ld	r18, Z
     a18:	2f 7d       	andi	r18, 0xDF	; 223
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 83       	st	Z, r18
			break;
     a1e:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
     a20:	89 81       	ldd	r24, Y+1	; 0x01

}
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	00 d0       	rcall	.+0      	; 0xa32 <Exti_enuSetCallbackFunction+0x6>
     a32:	00 d0       	rcall	.+0      	; 0xa34 <Exti_enuSetCallbackFunction+0x8>
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	8a 83       	std	Y+2, r24	; 0x02
     a3a:	7c 83       	std	Y+4, r23	; 0x04
     a3c:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	83 30       	cpi	r24, 0x03	; 3
     a46:	18 f0       	brcs	.+6      	; 0xa4e <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	13 c0       	rjmp	.+38     	; 0xa74 <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
     a4e:	8b 81       	ldd	r24, Y+3	; 0x03
     a50:	9c 81       	ldd	r25, Y+4	; 0x04
     a52:	89 2b       	or	r24, r25
     a54:	19 f4       	brne	.+6      	; 0xa5c <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	89 83       	std	Y+1, r24	; 0x01
     a5a:	0c c0       	rjmp	.+24     	; 0xa74 <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
     a5c:	8a 81       	ldd	r24, Y+2	; 0x02
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	80 55       	subi	r24, 0x50	; 80
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	2b 81       	ldd	r18, Y+3	; 0x03
     a6c:	3c 81       	ldd	r19, Y+4	; 0x04
     a6e:	fc 01       	movw	r30, r24
     a70:	31 83       	std	Z+1, r19	; 0x01
     a72:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
     a74:	89 81       	ldd	r24, Y+1	; 0x01

}
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
     ab0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
     ab4:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__data_end+0x1>
     ab8:	89 2b       	or	r24, r25
     aba:	31 f0       	breq	.+12     	; 0xac8 <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
     abc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
     ac0:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__data_end+0x1>
     ac4:	fc 01       	movw	r30, r24
     ac6:	09 95       	icall

}
     ac8:	00 00       	nop
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	ff 91       	pop	r31
     ad0:	ef 91       	pop	r30
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	0f 90       	pop	r0
     ae8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	4f 93       	push	r20
     b04:	5f 93       	push	r21
     b06:	6f 93       	push	r22
     b08:	7f 93       	push	r23
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
     b12:	ef 93       	push	r30
     b14:	ff 93       	push	r31
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
     b1e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end+0x2>
     b22:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x3>
     b26:	89 2b       	or	r24, r25
     b28:	31 f0       	breq	.+12     	; 0xb36 <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
     b2a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__data_end+0x2>
     b2e:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <__data_end+0x3>
     b32:	fc 01       	movw	r30, r24
     b34:	09 95       	icall

}
     b36:	00 00       	nop
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b5a:	0f 90       	pop	r0
     b5c:	1f 90       	pop	r1
     b5e:	18 95       	reti

00000b60 <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	ef 93       	push	r30
     b82:	ff 93       	push	r31
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
     b8c:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end+0x4>
     b90:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x5>
     b94:	89 2b       	or	r24, r25
     b96:	31 f0       	breq	.+12     	; 0xba4 <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
     b98:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end+0x4>
     b9c:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x5>
     ba0:	fc 01       	movw	r30, r24
     ba2:	09 95       	icall

}
     ba4:	00 00       	nop
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	ff 91       	pop	r31
     bac:	ef 91       	pop	r30
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bc8:	0f 90       	pop	r0
     bca:	1f 90       	pop	r1
     bcc:	18 95       	reti

00000bce <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <Dio_enuWriteChannel+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <Dio_enuWriteChannel+0x8>
     bd6:	1f 92       	push	r1
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	8c 83       	std	Y+4, r24	; 0x04
     bde:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     be0:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	87 70       	andi	r24, 0x07	; 7
     be6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
     be8:	8c 81       	ldd	r24, Y+4	; 0x04
     bea:	86 95       	lsr	r24
     bec:	86 95       	lsr	r24
     bee:	86 95       	lsr	r24
     bf0:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	80 32       	cpi	r24, 0x20	; 32
     bf6:	18 f0       	brcs	.+6      	; 0xbfe <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	89 83       	std	Y+1, r24	; 0x01
     bfc:	4e c0       	rjmp	.+156    	; 0xc9a <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	80 59       	subi	r24, 0x90	; 144
     c0a:	9f 4f       	sbci	r25, 0xFF	; 255
     c0c:	fc 01       	movw	r30, r24
     c0e:	80 81       	ld	r24, Z
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	2a 81       	ldd	r18, Y+2	; 0x02
     c1c:	22 2f       	mov	r18, r18
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <Dio_enuWriteChannel+0x58>
     c22:	95 95       	asr	r25
     c24:	87 95       	ror	r24
     c26:	2a 95       	dec	r18
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <Dio_enuWriteChannel+0x54>
     c2a:	81 70       	andi	r24, 0x01	; 1
     c2c:	99 27       	eor	r25, r25
     c2e:	89 2b       	or	r24, r25
     c30:	19 f4       	brne	.+6      	; 0xc38 <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	31 c0       	rjmp	.+98     	; 0xc9a <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	88 58       	subi	r24, 0x88	; 136
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	91 81       	ldd	r25, Z+1	; 0x01
     c4c:	2b 81       	ldd	r18, Y+3	; 0x03
     c4e:	22 2f       	mov	r18, r18
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	28 58       	subi	r18, 0x88	; 136
     c58:	3f 4f       	sbci	r19, 0xFF	; 255
     c5a:	f9 01       	movw	r30, r18
     c5c:	20 81       	ld	r18, Z
     c5e:	31 81       	ldd	r19, Z+1	; 0x01
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	62 2f       	mov	r22, r18
     c66:	2a 81       	ldd	r18, Y+2	; 0x02
     c68:	42 2f       	mov	r20, r18
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <Dio_enuWriteChannel+0xa8>
     c72:	22 0f       	add	r18, r18
     c74:	33 1f       	adc	r19, r19
     c76:	4a 95       	dec	r20
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <Dio_enuWriteChannel+0xa4>
     c7a:	20 95       	com	r18
     c7c:	62 23       	and	r22, r18
     c7e:	2d 81       	ldd	r18, Y+5	; 0x05
     c80:	22 2f       	mov	r18, r18
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4a 81       	ldd	r20, Y+2	; 0x02
     c86:	44 2f       	mov	r20, r20
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <Dio_enuWriteChannel+0xc2>
     c8c:	22 0f       	add	r18, r18
     c8e:	33 1f       	adc	r19, r19
     c90:	4a 95       	dec	r20
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <Dio_enuWriteChannel+0xbe>
     c94:	26 2b       	or	r18, r22
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18

}

	return Loc_enuState;
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <Dio_enuReadChannel+0x6>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <Dio_enuReadChannel+0x8>
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <Dio_enuReadChannel+0xa>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	8c 83       	std	Y+4, r24	; 0x04
     cbc:	7e 83       	std	Y+6, r23	; 0x06
     cbe:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     cc0:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	87 70       	andi	r24, 0x07	; 7
     cc6:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     cc8:	8c 81       	ldd	r24, Y+4	; 0x04
     cca:	86 95       	lsr	r24
     ccc:	86 95       	lsr	r24
     cce:	86 95       	lsr	r24
     cd0:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	80 32       	cpi	r24, 0x20	; 32
     cd6:	18 f0       	brcs	.+6      	; 0xcde <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	40 c0       	rjmp	.+128    	; 0xd5e <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	80 59       	subi	r24, 0x90	; 144
     cea:	9f 4f       	sbci	r25, 0xFF	; 255
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	fc 01       	movw	r30, r24
     cf4:	80 81       	ld	r24, Z
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	2a 81       	ldd	r18, Y+2	; 0x02
     cfc:	22 2f       	mov	r18, r18
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <Dio_enuReadChannel+0x5a>
     d02:	95 95       	asr	r25
     d04:	87 95       	ror	r24
     d06:	2a 95       	dec	r18
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <Dio_enuReadChannel+0x56>
     d0a:	81 70       	andi	r24, 0x01	; 1
     d0c:	99 27       	eor	r25, r25
     d0e:	89 2b       	or	r24, r25
     d10:	19 f0       	breq	.+6      	; 0xd18 <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	23 c0       	rjmp	.+70     	; 0xd5e <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
     d18:	8d 81       	ldd	r24, Y+5	; 0x05
     d1a:	9e 81       	ldd	r25, Y+6	; 0x06
     d1c:	89 2b       	or	r24, r25
     d1e:	19 f4       	brne	.+6      	; 0xd26 <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     d20:	84 e0       	ldi	r24, 0x04	; 4
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	1c c0       	rjmp	.+56     	; 0xd5e <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	88 2f       	mov	r24, r24
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	80 58       	subi	r24, 0x80	; 128
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	fc 01       	movw	r30, r24
     d3c:	80 81       	ld	r24, Z
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	2a 81       	ldd	r18, Y+2	; 0x02
     d44:	22 2f       	mov	r18, r18
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <Dio_enuReadChannel+0xa2>
     d4a:	95 95       	asr	r25
     d4c:	87 95       	ror	r24
     d4e:	2a 95       	dec	r18
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <Dio_enuReadChannel+0x9e>
     d52:	28 2f       	mov	r18, r24
     d54:	21 70       	andi	r18, 0x01	; 1
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 83       	st	Z, r18


	}

		return Loc_enuState;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01

}
     d60:	26 96       	adiw	r28, 0x06	; 6
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	00 d0       	rcall	.+0      	; 0xd78 <Dio_enuWritePort+0x6>
     d78:	1f 92       	push	r1
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     d82:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	84 30       	cpi	r24, 0x04	; 4
     d88:	18 f0       	brcs	.+6      	; 0xd90 <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	1e c0       	rjmp	.+60     	; 0xdcc <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	80 59       	subi	r24, 0x90	; 144
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	fc 01       	movw	r30, r24
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	fc 01       	movw	r30, r24
     da6:	80 81       	ld	r24, Z
     da8:	8f 3f       	cpi	r24, 0xFF	; 255
     daa:	19 f0       	breq	.+6      	; 0xdb2 <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	88 58       	subi	r24, 0x88	; 136
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	fc 01       	movw	r30, r24
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	2b 81       	ldd	r18, Y+3	; 0x03
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     dcc:	89 81       	ldd	r24, Y+1	; 0x01



}
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <Dio_enuReadPort+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <Dio_enuReadPort+0x8>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	8a 83       	std	Y+2, r24	; 0x02
     de8:	7c 83       	std	Y+4, r23	; 0x04
     dea:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     dec:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	84 30       	cpi	r24, 0x04	; 4
     df2:	18 f0       	brcs	.+6      	; 0xdfa <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	89 83       	std	Y+1, r24	; 0x01
     df8:	28 c0       	rjmp	.+80     	; 0xe4a <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	80 59       	subi	r24, 0x90	; 144
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	fc 01       	movw	r30, r24
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	fc 01       	movw	r30, r24
     e10:	80 81       	ld	r24, Z
     e12:	88 23       	and	r24, r24
     e14:	19 f0       	breq	.+6      	; 0xe1c <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	17 c0       	rjmp	.+46     	; 0xe4a <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	89 2b       	or	r24, r25
     e22:	19 f4       	brne	.+6      	; 0xe2a <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	10 c0       	rjmp	.+32     	; 0xe4a <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	80 58       	subi	r24, 0x80	; 128
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	fc 01       	movw	r30, r24
     e3a:	80 81       	ld	r24, Z
     e3c:	91 81       	ldd	r25, Z+1	; 0x01
     e3e:	fc 01       	movw	r30, r24
     e40:	20 81       	ld	r18, Z
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	fc 01       	movw	r30, r24
     e48:	20 83       	st	Z, r18

		}

			return Loc_enuState;
     e4a:	89 81       	ldd	r24, Y+1	; 0x01

}
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <Dio_enuFlipChannel+0x6>
     e60:	00 d0       	rcall	.+0      	; 0xe62 <Dio_enuFlipChannel+0x8>
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
     e68:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	87 70       	andi	r24, 0x07	; 7
     e6e:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	86 95       	lsr	r24
     e74:	86 95       	lsr	r24
     e76:	86 95       	lsr	r24
     e78:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	80 32       	cpi	r24, 0x20	; 32
     e7e:	18 f0       	brcs	.+6      	; 0xe86 <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	41 c0       	rjmp	.+130    	; 0xf08 <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	80 59       	subi	r24, 0x90	; 144
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	fc 01       	movw	r30, r24
     e96:	80 81       	ld	r24, Z
     e98:	91 81       	ldd	r25, Z+1	; 0x01
     e9a:	fc 01       	movw	r30, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	2a 81       	ldd	r18, Y+2	; 0x02
     ea4:	22 2f       	mov	r18, r18
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <Dio_enuFlipChannel+0x54>
     eaa:	95 95       	asr	r25
     eac:	87 95       	ror	r24
     eae:	2a 95       	dec	r18
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <Dio_enuFlipChannel+0x50>
     eb2:	81 70       	andi	r24, 0x01	; 1
     eb4:	99 27       	eor	r25, r25
     eb6:	89 2b       	or	r24, r25
     eb8:	19 f4       	brne	.+6      	; 0xec0 <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	24 c0       	rjmp	.+72     	; 0xf08 <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	88 58       	subi	r24, 0x88	; 136
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	fc 01       	movw	r30, r24
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	2b 81       	ldd	r18, Y+3	; 0x03
     ed6:	22 2f       	mov	r18, r18
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	28 58       	subi	r18, 0x88	; 136
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
     ee2:	f9 01       	movw	r30, r18
     ee4:	20 81       	ld	r18, Z
     ee6:	31 81       	ldd	r19, Z+1	; 0x01
     ee8:	f9 01       	movw	r30, r18
     eea:	20 81       	ld	r18, Z
     eec:	62 2f       	mov	r22, r18
     eee:	2a 81       	ldd	r18, Y+2	; 0x02
     ef0:	42 2f       	mov	r20, r18
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	21 e0       	ldi	r18, 0x01	; 1
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <Dio_enuFlipChannel+0xa4>
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	4a 95       	dec	r20
     f00:	e2 f7       	brpl	.-8      	; 0xefa <Dio_enuFlipChannel+0xa0>
     f02:	26 27       	eor	r18, r22
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18

	}

		return Loc_enuState;
     f08:	89 81       	ldd	r24, Y+1	; 0x01
}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	ef 97       	sbiw	r28, 0x3f	; 63
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	9f af       	std	Y+63, r25	; 0x3f
     f2e:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
     f30:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
     f32:	8e ad       	ldd	r24, Y+62	; 0x3e
     f34:	9f ad       	ldd	r25, Y+63	; 0x3f
     f36:	89 2b       	or	r24, r25
     f38:	19 f4       	brne	.+6      	; 0xf40 <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	0f c2       	rjmp	.+1054   	; 0x135e <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
     f40:	8e ad       	ldd	r24, Y+62	; 0x3e
     f42:	9f ad       	ldd	r25, Y+63	; 0x3f
     f44:	68 e3       	ldi	r22, 0x38	; 56
     f46:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a0 ea       	ldi	r26, 0xA0	; 160
     f52:	b0 e4       	ldi	r27, 0x40	; 64
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	9b 83       	std	Y+3, r25	; 0x03
     f58:	ac 83       	std	Y+4, r26	; 0x04
     f5a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4a ef       	ldi	r20, 0xFA	; 250
     f62:	54 e4       	ldi	r21, 0x44	; 68
     f64:	6a 81       	ldd	r22, Y+2	; 0x02
     f66:	7b 81       	ldd	r23, Y+3	; 0x03
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8c ab       	std	Y+52, r24	; 0x34
     f76:	9d ab       	std	Y+53, r25	; 0x35
     f78:	ae ab       	std	Y+54, r26	; 0x36
     f7a:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e8       	ldi	r20, 0x80	; 128
     f82:	5f e3       	ldi	r21, 0x3F	; 63
     f84:	6c a9       	ldd	r22, Y+52	; 0x34
     f86:	7d a9       	ldd	r23, Y+53	; 0x35
     f88:	8e a9       	ldd	r24, Y+54	; 0x36
     f8a:	9f a9       	ldd	r25, Y+55	; 0x37
     f8c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__cmpsf2>
     f90:	88 23       	and	r24, r24
     f92:	2c f4       	brge	.+10     	; 0xf9e <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	99 af       	std	Y+57, r25	; 0x39
     f9a:	88 af       	std	Y+56, r24	; 0x38
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	3f ef       	ldi	r19, 0xFF	; 255
     fa2:	4f e7       	ldi	r20, 0x7F	; 127
     fa4:	57 e4       	ldi	r21, 0x47	; 71
     fa6:	6c a9       	ldd	r22, Y+52	; 0x34
     fa8:	7d a9       	ldd	r23, Y+53	; 0x35
     faa:	8e a9       	ldd	r24, Y+54	; 0x36
     fac:	9f a9       	ldd	r25, Y+55	; 0x37
     fae:	0e 94 cb 10 	call	0x2196	; 0x2196 <__gesf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f5       	brge	.+82     	; 0x1008 <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e2       	ldi	r20, 0x20	; 32
     fbc:	51 e4       	ldi	r21, 0x41	; 65
     fbe:	6a 81       	ldd	r22, Y+2	; 0x02
     fc0:	7b 81       	ldd	r23, Y+3	; 0x03
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	9d 81       	ldd	r25, Y+5	; 0x05
     fc6:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	99 af       	std	Y+57, r25	; 0x39
     fdc:	88 af       	std	Y+56, r24	; 0x38
     fde:	0f c0       	rjmp	.+30     	; 0xffe <Lcd_4bit_enuInit+0xe6>
     fe0:	88 ec       	ldi	r24, 0xC8	; 200
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9b af       	std	Y+59, r25	; 0x3b
     fe6:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe8:	8a ad       	ldd	r24, Y+58	; 0x3a
     fea:	9b ad       	ldd	r25, Y+59	; 0x3b
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <Lcd_4bit_enuInit+0xd4>
     ff0:	9b af       	std	Y+59, r25	; 0x3b
     ff2:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	88 ad       	ldd	r24, Y+56	; 0x38
     ff6:	99 ad       	ldd	r25, Y+57	; 0x39
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	99 af       	std	Y+57, r25	; 0x39
     ffc:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	88 ad       	ldd	r24, Y+56	; 0x38
    1000:	99 ad       	ldd	r25, Y+57	; 0x39
    1002:	89 2b       	or	r24, r25
    1004:	69 f7       	brne	.-38     	; 0xfe0 <Lcd_4bit_enuInit+0xc8>
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	6c a9       	ldd	r22, Y+52	; 0x34
    100a:	7d a9       	ldd	r23, Y+53	; 0x35
    100c:	8e a9       	ldd	r24, Y+54	; 0x36
    100e:	9f a9       	ldd	r25, Y+55	; 0x37
    1010:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	99 af       	std	Y+57, r25	; 0x39
    101a:	88 af       	std	Y+56, r24	; 0x38
    101c:	88 ad       	ldd	r24, Y+56	; 0x38
    101e:	99 ad       	ldd	r25, Y+57	; 0x39
    1020:	9d af       	std	Y+61, r25	; 0x3d
    1022:	8c af       	std	Y+60, r24	; 0x3c
    1024:	8c ad       	ldd	r24, Y+60	; 0x3c
    1026:	9d ad       	ldd	r25, Y+61	; 0x3d
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <Lcd_4bit_enuInit+0x110>
    102c:	9d af       	std	Y+61, r25	; 0x3d
    102e:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    1030:	8e ad       	ldd	r24, Y+62	; 0x3e
    1032:	9f ad       	ldd	r25, Y+63	; 0x3f
    1034:	68 e3       	ldi	r22, 0x38	; 56
    1036:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a6 e1       	ldi	r26, 0x16	; 22
    1042:	b3 e4       	ldi	r27, 0x43	; 67
    1044:	8e 83       	std	Y+6, r24	; 0x06
    1046:	9f 83       	std	Y+7, r25	; 0x07
    1048:	a8 87       	std	Y+8, r26	; 0x08
    104a:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    104c:	2b ea       	ldi	r18, 0xAB	; 171
    104e:	3a ea       	ldi	r19, 0xAA	; 170
    1050:	4a e2       	ldi	r20, 0x2A	; 42
    1052:	50 e4       	ldi	r21, 0x40	; 64
    1054:	6e 81       	ldd	r22, Y+6	; 0x06
    1056:	7f 81       	ldd	r23, Y+7	; 0x07
    1058:	88 85       	ldd	r24, Y+8	; 0x08
    105a:	99 85       	ldd	r25, Y+9	; 0x09
    105c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	88 8f       	std	Y+24, r24	; 0x18
    1066:	99 8f       	std	Y+25, r25	; 0x19
    1068:	aa 8f       	std	Y+26, r26	; 0x1a
    106a:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    106c:	8e 81       	ldd	r24, Y+6	; 0x06
    106e:	9f 81       	ldd	r25, Y+7	; 0x07
    1070:	a8 85       	ldd	r26, Y+8	; 0x08
    1072:	b9 85       	ldd	r27, Y+9	; 0x09
    1074:	9c 01       	movw	r18, r24
    1076:	ad 01       	movw	r20, r26
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__addsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8c 8f       	std	Y+28, r24	; 0x1c
    1086:	9d 8f       	std	Y+29, r25	; 0x1d
    1088:	ae 8f       	std	Y+30, r26	; 0x1e
    108a:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e8       	ldi	r20, 0x80	; 128
    1092:	5f e3       	ldi	r21, 0x3F	; 63
    1094:	68 8d       	ldd	r22, Y+24	; 0x18
    1096:	79 8d       	ldd	r23, Y+25	; 0x19
    1098:	8a 8d       	ldd	r24, Y+26	; 0x1a
    109a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    109c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__cmpsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	1c f4       	brge	.+6      	; 0x10aa <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	88 a3       	std	Y+32, r24	; 0x20
    10a8:	b2 c0       	rjmp	.+356    	; 0x120e <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	3f ef       	ldi	r19, 0xFF	; 255
    10ae:	4f e7       	ldi	r20, 0x7F	; 127
    10b0:	57 e4       	ldi	r21, 0x47	; 71
    10b2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    10b4:	7d 8d       	ldd	r23, Y+29	; 0x1d
    10b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10ba:	0e 94 cb 10 	call	0x2196	; 0x2196 <__gesf2>
    10be:	18 16       	cp	r1, r24
    10c0:	0c f0       	brlt	.+2      	; 0x10c4 <Lcd_4bit_enuInit+0x1ac>
    10c2:	7b c0       	rjmp	.+246    	; 0x11ba <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4a e7       	ldi	r20, 0x7A	; 122
    10ca:	54 e4       	ldi	r21, 0x44	; 68
    10cc:	6e 81       	ldd	r22, Y+6	; 0x06
    10ce:	7f 81       	ldd	r23, Y+7	; 0x07
    10d0:	88 85       	ldd	r24, Y+8	; 0x08
    10d2:	99 85       	ldd	r25, Y+9	; 0x09
    10d4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	89 a3       	std	Y+33, r24	; 0x21
    10de:	9a a3       	std	Y+34, r25	; 0x22
    10e0:	ab a3       	std	Y+35, r26	; 0x23
    10e2:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	4a ef       	ldi	r20, 0xFA	; 250
    10ea:	54 e4       	ldi	r21, 0x44	; 68
    10ec:	69 a1       	ldd	r22, Y+33	; 0x21
    10ee:	7a a1       	ldd	r23, Y+34	; 0x22
    10f0:	8b a1       	ldd	r24, Y+35	; 0x23
    10f2:	9c a1       	ldd	r25, Y+36	; 0x24
    10f4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	8d a3       	std	Y+37, r24	; 0x25
    10fe:	9e a3       	std	Y+38, r25	; 0x26
    1100:	af a3       	std	Y+39, r26	; 0x27
    1102:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	6d a1       	ldd	r22, Y+37	; 0x25
    110e:	7e a1       	ldd	r23, Y+38	; 0x26
    1110:	8f a1       	ldd	r24, Y+39	; 0x27
    1112:	98 a5       	ldd	r25, Y+40	; 0x28
    1114:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__cmpsf2>
    1118:	88 23       	and	r24, r24
    111a:	2c f4       	brge	.+10     	; 0x1126 <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9a a7       	std	Y+42, r25	; 0x2a
    1122:	89 a7       	std	Y+41, r24	; 0x29
    1124:	3f c0       	rjmp	.+126    	; 0x11a4 <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	3f ef       	ldi	r19, 0xFF	; 255
    112a:	4f e7       	ldi	r20, 0x7F	; 127
    112c:	57 e4       	ldi	r21, 0x47	; 71
    112e:	6d a1       	ldd	r22, Y+37	; 0x25
    1130:	7e a1       	ldd	r23, Y+38	; 0x26
    1132:	8f a1       	ldd	r24, Y+39	; 0x27
    1134:	98 a5       	ldd	r25, Y+40	; 0x28
    1136:	0e 94 cb 10 	call	0x2196	; 0x2196 <__gesf2>
    113a:	18 16       	cp	r1, r24
    113c:	4c f5       	brge	.+82     	; 0x1190 <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e2       	ldi	r20, 0x20	; 32
    1144:	51 e4       	ldi	r21, 0x41	; 65
    1146:	69 a1       	ldd	r22, Y+33	; 0x21
    1148:	7a a1       	ldd	r23, Y+34	; 0x22
    114a:	8b a1       	ldd	r24, Y+35	; 0x23
    114c:	9c a1       	ldd	r25, Y+36	; 0x24
    114e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9a a7       	std	Y+42, r25	; 0x2a
    1164:	89 a7       	std	Y+41, r24	; 0x29
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <Lcd_4bit_enuInit+0x26e>
    1168:	88 ec       	ldi	r24, 0xC8	; 200
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9c a7       	std	Y+44, r25	; 0x2c
    116e:	8b a7       	std	Y+43, r24	; 0x2b
    1170:	8b a5       	ldd	r24, Y+43	; 0x2b
    1172:	9c a5       	ldd	r25, Y+44	; 0x2c
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <Lcd_4bit_enuInit+0x25c>
    1178:	9c a7       	std	Y+44, r25	; 0x2c
    117a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117c:	89 a5       	ldd	r24, Y+41	; 0x29
    117e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	9a a7       	std	Y+42, r25	; 0x2a
    1184:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1186:	89 a5       	ldd	r24, Y+41	; 0x29
    1188:	9a a5       	ldd	r25, Y+42	; 0x2a
    118a:	89 2b       	or	r24, r25
    118c:	69 f7       	brne	.-38     	; 0x1168 <Lcd_4bit_enuInit+0x250>
    118e:	3f c0       	rjmp	.+126    	; 0x120e <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1190:	6d a1       	ldd	r22, Y+37	; 0x25
    1192:	7e a1       	ldd	r23, Y+38	; 0x26
    1194:	8f a1       	ldd	r24, Y+39	; 0x27
    1196:	98 a5       	ldd	r25, Y+40	; 0x28
    1198:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9a a7       	std	Y+42, r25	; 0x2a
    11a2:	89 a7       	std	Y+41, r24	; 0x29
    11a4:	89 a5       	ldd	r24, Y+41	; 0x29
    11a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    11a8:	9e a7       	std	Y+46, r25	; 0x2e
    11aa:	8d a7       	std	Y+45, r24	; 0x2d
    11ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    11ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <Lcd_4bit_enuInit+0x298>
    11b4:	9e a7       	std	Y+46, r25	; 0x2e
    11b6:	8d a7       	std	Y+45, r24	; 0x2d
    11b8:	2a c0       	rjmp	.+84     	; 0x120e <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4f e7       	ldi	r20, 0x7F	; 127
    11c0:	53 e4       	ldi	r21, 0x43	; 67
    11c2:	68 8d       	ldd	r22, Y+24	; 0x18
    11c4:	79 8d       	ldd	r23, Y+25	; 0x19
    11c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11ca:	0e 94 cb 10 	call	0x2196	; 0x2196 <__gesf2>
    11ce:	18 16       	cp	r1, r24
    11d0:	ac f4       	brge	.+42     	; 0x11fc <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    11d2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    11d4:	7d 8d       	ldd	r23, Y+29	; 0x1d
    11d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11da:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	98 ab       	std	Y+48, r25	; 0x30
    11e4:	8f a7       	std	Y+47, r24	; 0x2f
    11e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    11e8:	98 a9       	ldd	r25, Y+48	; 0x30
    11ea:	9a ab       	std	Y+50, r25	; 0x32
    11ec:	89 ab       	std	Y+49, r24	; 0x31
    11ee:	89 a9       	ldd	r24, Y+49	; 0x31
    11f0:	9a a9       	ldd	r25, Y+50	; 0x32
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <Lcd_4bit_enuInit+0x2da>
    11f6:	9a ab       	std	Y+50, r25	; 0x32
    11f8:	89 ab       	std	Y+49, r24	; 0x31
    11fa:	0f c0       	rjmp	.+30     	; 0x121a <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11fc:	68 8d       	ldd	r22, Y+24	; 0x18
    11fe:	79 8d       	ldd	r23, Y+25	; 0x19
    1200:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1202:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1204:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	88 a3       	std	Y+32, r24	; 0x20
    120e:	88 a1       	ldd	r24, Y+32	; 0x20
    1210:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1212:	8b a9       	ldd	r24, Y+51	; 0x33
    1214:	8a 95       	dec	r24
    1216:	f1 f7       	brne	.-4      	; 0x1214 <Lcd_4bit_enuInit+0x2fc>
    1218:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    121a:	8e ad       	ldd	r24, Y+62	; 0x3e
    121c:	9f ad       	ldd	r25, Y+63	; 0x3f
    121e:	68 e3       	ldi	r22, 0x38	; 56
    1220:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1224:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    1226:	8e ad       	ldd	r24, Y+62	; 0x3e
    1228:	9f ad       	ldd	r25, Y+63	; 0x3f
    122a:	61 e0       	ldi	r22, 0x01	; 1
    122c:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1230:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    1232:	8e ad       	ldd	r24, Y+62	; 0x3e
    1234:	9f ad       	ldd	r25, Y+63	; 0x3f
    1236:	62 e0       	ldi	r22, 0x02	; 2
    1238:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    123c:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    123e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1240:	9f ad       	ldd	r25, Y+63	; 0x3f
    1242:	66 e0       	ldi	r22, 0x06	; 6
    1244:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1248:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    124a:	8e ad       	ldd	r24, Y+62	; 0x3e
    124c:	9f ad       	ldd	r25, Y+63	; 0x3f
    124e:	6c e0       	ldi	r22, 0x0C	; 12
    1250:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1254:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    1256:	8e ad       	ldd	r24, Y+62	; 0x3e
    1258:	9f ad       	ldd	r25, Y+63	; 0x3f
    125a:	68 e2       	ldi	r22, 0x28	; 40
    125c:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1260:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    1262:	8e ad       	ldd	r24, Y+62	; 0x3e
    1264:	9f ad       	ldd	r25, Y+63	; 0x3f
    1266:	60 e8       	ldi	r22, 0x80	; 128
    1268:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    126c:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    126e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1270:	9f ad       	ldd	r25, Y+63	; 0x3f
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 ea       	ldi	r26, 0xA0	; 160
    1280:	b0 e4       	ldi	r27, 0x40	; 64
    1282:	8a 87       	std	Y+10, r24	; 0x0a
    1284:	9b 87       	std	Y+11, r25	; 0x0b
    1286:	ac 87       	std	Y+12, r26	; 0x0c
    1288:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	4a ef       	ldi	r20, 0xFA	; 250
    1290:	54 e4       	ldi	r21, 0x44	; 68
    1292:	6a 85       	ldd	r22, Y+10	; 0x0a
    1294:	7b 85       	ldd	r23, Y+11	; 0x0b
    1296:	8c 85       	ldd	r24, Y+12	; 0x0c
    1298:	9d 85       	ldd	r25, Y+13	; 0x0d
    129a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	8e 87       	std	Y+14, r24	; 0x0e
    12a4:	9f 87       	std	Y+15, r25	; 0x0f
    12a6:	a8 8b       	std	Y+16, r26	; 0x10
    12a8:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e8       	ldi	r20, 0x80	; 128
    12b0:	5f e3       	ldi	r21, 0x3F	; 63
    12b2:	6e 85       	ldd	r22, Y+14	; 0x0e
    12b4:	7f 85       	ldd	r23, Y+15	; 0x0f
    12b6:	88 89       	ldd	r24, Y+16	; 0x10
    12b8:	99 89       	ldd	r25, Y+17	; 0x11
    12ba:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__cmpsf2>
    12be:	88 23       	and	r24, r24
    12c0:	2c f4       	brge	.+10     	; 0x12cc <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9b 8b       	std	Y+19, r25	; 0x13
    12c8:	8a 8b       	std	Y+18, r24	; 0x12
    12ca:	3f c0       	rjmp	.+126    	; 0x134a <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	6e 85       	ldd	r22, Y+14	; 0x0e
    12d6:	7f 85       	ldd	r23, Y+15	; 0x0f
    12d8:	88 89       	ldd	r24, Y+16	; 0x10
    12da:	99 89       	ldd	r25, Y+17	; 0x11
    12dc:	0e 94 cb 10 	call	0x2196	; 0x2196 <__gesf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	4c f5       	brge	.+82     	; 0x1336 <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e2       	ldi	r20, 0x20	; 32
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	6a 85       	ldd	r22, Y+10	; 0x0a
    12ee:	7b 85       	ldd	r23, Y+11	; 0x0b
    12f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12f4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9b 8b       	std	Y+19, r25	; 0x13
    130a:	8a 8b       	std	Y+18, r24	; 0x12
    130c:	0f c0       	rjmp	.+30     	; 0x132c <Lcd_4bit_enuInit+0x414>
    130e:	88 ec       	ldi	r24, 0xC8	; 200
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9d 8b       	std	Y+21, r25	; 0x15
    1314:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1316:	8c 89       	ldd	r24, Y+20	; 0x14
    1318:	9d 89       	ldd	r25, Y+21	; 0x15
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <Lcd_4bit_enuInit+0x402>
    131e:	9d 8b       	std	Y+21, r25	; 0x15
    1320:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	8a 89       	ldd	r24, Y+18	; 0x12
    1324:	9b 89       	ldd	r25, Y+19	; 0x13
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9b 8b       	std	Y+19, r25	; 0x13
    132a:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	8a 89       	ldd	r24, Y+18	; 0x12
    132e:	9b 89       	ldd	r25, Y+19	; 0x13
    1330:	89 2b       	or	r24, r25
    1332:	69 f7       	brne	.-38     	; 0x130e <Lcd_4bit_enuInit+0x3f6>
    1334:	14 c0       	rjmp	.+40     	; 0x135e <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	6e 85       	ldd	r22, Y+14	; 0x0e
    1338:	7f 85       	ldd	r23, Y+15	; 0x0f
    133a:	88 89       	ldd	r24, Y+16	; 0x10
    133c:	99 89       	ldd	r25, Y+17	; 0x11
    133e:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9b 8b       	std	Y+19, r25	; 0x13
    1348:	8a 8b       	std	Y+18, r24	; 0x12
    134a:	8a 89       	ldd	r24, Y+18	; 0x12
    134c:	9b 89       	ldd	r25, Y+19	; 0x13
    134e:	9f 8b       	std	Y+23, r25	; 0x17
    1350:	8e 8b       	std	Y+22, r24	; 0x16
    1352:	8e 89       	ldd	r24, Y+22	; 0x16
    1354:	9f 89       	ldd	r25, Y+23	; 0x17
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <Lcd_4bit_enuInit+0x43e>
    135a:	9f 8b       	std	Y+23, r25	; 0x17
    135c:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    135e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1360:	ef 96       	adiw	r28, 0x3f	; 63
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	00 d0       	rcall	.+0      	; 0x1378 <Lcd_4bit_enuSendCommand+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <Lcd_4bit_enuSendCommand+0x8>
    137a:	1f 92       	push	r1
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1386:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    1388:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	89 2b       	or	r24, r25
    1390:	19 f4       	brne	.+6      	; 0x1398 <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	22 c0       	rjmp	.+68     	; 0x13dc <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	fc 01       	movw	r30, r24
    139e:	84 81       	ldd	r24, Z+4	; 0x04
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    13a6:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	28 2f       	mov	r18, r24
    13ac:	22 95       	swap	r18
    13ae:	2f 70       	andi	r18, 0x0F	; 15
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	62 2f       	mov	r22, r18
    13b6:	0e 94 16 0c 	call	0x182c	; 0x182c <Lcd_4bit_enuSet4BitsOnPins>
    13ba:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Lcd_4bit_enuSendEnableSignal>
    13c4:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	6d 81       	ldd	r22, Y+5	; 0x05
    13cc:	0e 94 16 0c 	call	0x182c	; 0x182c <Lcd_4bit_enuSet4BitsOnPins>
    13d0:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Lcd_4bit_enuSendEnableSignal>
    13da:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01

}
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <Lcd_4bit_enuDisplayCharacter+0x6>
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <Lcd_4bit_enuDisplayCharacter+0x8>
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	9b 83       	std	Y+3, r25	; 0x03
    13fc:	8a 83       	std	Y+2, r24	; 0x02
    13fe:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1400:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	9b 81       	ldd	r25, Y+3	; 0x03
    1406:	89 2b       	or	r24, r25
    1408:	19 f4       	brne	.+6      	; 0x1410 <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	22 c0       	rjmp	.+68     	; 0x1454 <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	9b 81       	ldd	r25, Y+3	; 0x03
    1414:	fc 01       	movw	r30, r24
    1416:	84 81       	ldd	r24, Z+4	; 0x04
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    141e:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	28 2f       	mov	r18, r24
    1424:	22 95       	swap	r18
    1426:	2f 70       	andi	r18, 0x0F	; 15
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	9b 81       	ldd	r25, Y+3	; 0x03
    142c:	62 2f       	mov	r22, r18
    142e:	0e 94 16 0c 	call	0x182c	; 0x182c <Lcd_4bit_enuSet4BitsOnPins>
    1432:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	9b 81       	ldd	r25, Y+3	; 0x03
    1438:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Lcd_4bit_enuSendEnableSignal>
    143c:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	9b 81       	ldd	r25, Y+3	; 0x03
    1442:	6c 81       	ldd	r22, Y+4	; 0x04
    1444:	0e 94 16 0c 	call	0x182c	; 0x182c <Lcd_4bit_enuSet4BitsOnPins>
    1448:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Lcd_4bit_enuSendEnableSignal>
    1452:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1454:	89 81       	ldd	r24, Y+1	; 0x01

}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	00 d0       	rcall	.+0      	; 0x146a <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    146a:	00 d0       	rcall	.+0      	; 0x146c <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    146c:	00 d0       	rcall	.+0      	; 0x146e <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	9b 83       	std	Y+3, r25	; 0x03
    1474:	8a 83       	std	Y+2, r24	; 0x02
    1476:	6c 83       	std	Y+4, r22	; 0x04
    1478:	4d 83       	std	Y+5, r20	; 0x05
    147a:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    147c:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	9b 81       	ldd	r25, Y+3	; 0x03
    1482:	89 2b       	or	r24, r25
    1484:	19 f4       	brne	.+6      	; 0x148c <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	29 c0       	rjmp	.+82     	; 0x14de <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	9b 81       	ldd	r25, Y+3	; 0x03
    1490:	4e 81       	ldd	r20, Y+6	; 0x06
    1492:	6d 81       	ldd	r22, Y+5	; 0x05
    1494:	0e 94 cf 0a 	call	0x159e	; 0x159e <Lcd_4bit_enuGoToXY>
    1498:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	9b 81       	ldd	r25, Y+3	; 0x03
    149e:	fc 01       	movw	r30, r24
    14a0:	84 81       	ldd	r24, Z+4	; 0x04
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    14a8:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	28 2f       	mov	r18, r24
    14ae:	22 95       	swap	r18
    14b0:	2f 70       	andi	r18, 0x0F	; 15
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	62 2f       	mov	r22, r18
    14b8:	0e 94 16 0c 	call	0x182c	; 0x182c <Lcd_4bit_enuSet4BitsOnPins>
    14bc:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	9b 81       	ldd	r25, Y+3	; 0x03
    14c2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Lcd_4bit_enuSendEnableSignal>
    14c6:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	9b 81       	ldd	r25, Y+3	; 0x03
    14cc:	6c 81       	ldd	r22, Y+4	; 0x04
    14ce:	0e 94 16 0c 	call	0x182c	; 0x182c <Lcd_4bit_enuSet4BitsOnPins>
    14d2:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <Lcd_4bit_enuSendEnableSignal>
    14dc:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    14de:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e0:	26 96       	adiw	r28, 0x06	; 6
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <Lcd_4bit_enuCreateCustomCharacter>:


Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	27 97       	sbiw	r28, 0x07	; 7
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
    150a:	7e 83       	std	Y+6, r23	; 0x06
    150c:	6d 83       	std	Y+5, r22	; 0x05
    150e:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1510:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    1512:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	89 2b       	or	r24, r25
    151a:	21 f0       	breq	.+8      	; 0x1524 <Lcd_4bit_enuCreateCustomCharacter+0x32>
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	89 2b       	or	r24, r25
    1522:	19 f4       	brne	.+6      	; 0x152a <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	30 c0       	rjmp	.+96     	; 0x158a <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    152a:	8f 81       	ldd	r24, Y+7	; 0x07
    152c:	88 30       	cpi	r24, 0x08	; 8
    152e:	18 f0       	brcs	.+6      	; 0x1536 <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	2a c0       	rjmp	.+84     	; 0x158a <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    1536:	8f 81       	ldd	r24, Y+7	; 0x07
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	08 96       	adiw	r24, 0x08	; 8
    153e:	28 2f       	mov	r18, r24
    1540:	22 0f       	add	r18, r18
    1542:	22 0f       	add	r18, r18
    1544:	22 0f       	add	r18, r18
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	62 2f       	mov	r22, r18
    154c:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1550:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    1552:	1a 82       	std	Y+2, r1	; 0x02
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	2d 81       	ldd	r18, Y+5	; 0x05
    155e:	3e 81       	ldd	r19, Y+6	; 0x06
    1560:	82 0f       	add	r24, r18
    1562:	93 1f       	adc	r25, r19
    1564:	fc 01       	movw	r30, r24
    1566:	20 81       	ld	r18, Z
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	62 2f       	mov	r22, r18
    156e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	88 30       	cpi	r24, 0x08	; 8
    157c:	60 f3       	brcs	.-40     	; 0x1556 <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	60 e8       	ldi	r22, 0x80	; 128
    1584:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1588:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    158a:	89 81       	ldd	r24, Y+1	; 0x01

}
    158c:	27 96       	adiw	r28, 0x07	; 7
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <Lcd_4bit_enuGoToXY+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <Lcd_4bit_enuGoToXY+0x8>
    15a6:	1f 92       	push	r1
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	9b 83       	std	Y+3, r25	; 0x03
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	6c 83       	std	Y+4, r22	; 0x04
    15b2:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    15b4:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ba:	89 2b       	or	r24, r25
    15bc:	19 f4       	brne	.+6      	; 0x15c4 <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	56 c0       	rjmp	.+172    	; 0x1670 <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	85 30       	cpi	r24, 0x05	; 5
    15c8:	18 f0       	brcs	.+6      	; 0x15d0 <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    15ca:	85 e0       	ldi	r24, 0x05	; 5
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	50 c0       	rjmp	.+160    	; 0x1670 <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	85 31       	cpi	r24, 0x15	; 21
    15d4:	18 f0       	brcs	.+6      	; 0x15dc <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    15d6:	84 e0       	ldi	r24, 0x04	; 4
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	4a c0       	rjmp	.+148    	; 0x1670 <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	81 50       	subi	r24, 0x01	; 1
    15e0:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	91 05       	cpc	r25, r1
    15ec:	c9 f0       	breq	.+50     	; 0x1620 <Lcd_4bit_enuGoToXY+0x82>
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	1c f4       	brge	.+6      	; 0x15fa <Lcd_4bit_enuGoToXY+0x5c>
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	39 f0       	breq	.+14     	; 0x1606 <Lcd_4bit_enuGoToXY+0x68>
    15f8:	3a c0       	rjmp	.+116    	; 0x166e <Lcd_4bit_enuGoToXY+0xd0>
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	e9 f0       	breq	.+58     	; 0x163a <Lcd_4bit_enuGoToXY+0x9c>
    1600:	04 97       	sbiw	r24, 0x04	; 4
    1602:	41 f1       	breq	.+80     	; 0x1654 <Lcd_4bit_enuGoToXY+0xb6>
    1604:	34 c0       	rjmp	.+104    	; 0x166e <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	20 e8       	ldi	r18, 0x80	; 128
    160a:	28 0f       	add	r18, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	9b 81       	ldd	r25, Y+3	; 0x03
    1610:	62 2f       	mov	r22, r18
    1612:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1616:	98 2f       	mov	r25, r24
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	89 23       	and	r24, r25
    161c:	89 83       	std	Y+1, r24	; 0x01
			                break;
    161e:	28 c0       	rjmp	.+80     	; 0x1670 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	20 ec       	ldi	r18, 0xC0	; 192
    1624:	28 0f       	add	r18, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	9b 81       	ldd	r25, Y+3	; 0x03
    162a:	62 2f       	mov	r22, r18
    162c:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1630:	98 2f       	mov	r25, r24
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	89 23       	and	r24, r25
    1636:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1638:	1b c0       	rjmp	.+54     	; 0x1670 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	24 e9       	ldi	r18, 0x94	; 148
    163e:	28 0f       	add	r18, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	9b 81       	ldd	r25, Y+3	; 0x03
    1644:	62 2f       	mov	r22, r18
    1646:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    164a:	98 2f       	mov	r25, r24
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	89 23       	and	r24, r25
    1650:	89 83       	std	Y+1, r24	; 0x01
			                break;
    1652:	0e c0       	rjmp	.+28     	; 0x1670 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	24 ed       	ldi	r18, 0xD4	; 212
    1658:	28 0f       	add	r18, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	9b 81       	ldd	r25, Y+3	; 0x03
    165e:	62 2f       	mov	r22, r18
    1660:	0e 94 b9 09 	call	0x1372	; 0x1372 <Lcd_4bit_enuSendCommand>
    1664:	98 2f       	mov	r25, r24
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	89 23       	and	r24, r25
    166a:	89 83       	std	Y+1, r24	; 0x01
			                break;
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    166e:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    1670:	89 81       	ldd	r24, Y+1	; 0x01

}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	08 95       	ret

00001682 <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	00 d0       	rcall	.+0      	; 0x1688 <Lcd_4bit_enuDisplayString+0x6>
    1688:	00 d0       	rcall	.+0      	; 0x168a <Lcd_4bit_enuDisplayString+0x8>
    168a:	00 d0       	rcall	.+0      	; 0x168c <Lcd_4bit_enuDisplayString+0xa>
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	9c 83       	std	Y+4, r25	; 0x04
    1692:	8b 83       	std	Y+3, r24	; 0x03
    1694:	7e 83       	std	Y+6, r23	; 0x06
    1696:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1698:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    169a:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	89 2b       	or	r24, r25
    16a2:	21 f0       	breq	.+8      	; 0x16ac <Lcd_4bit_enuDisplayString+0x2a>
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	89 2b       	or	r24, r25
    16aa:	a9 f4       	brne	.+42     	; 0x16d6 <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	1d c0       	rjmp	.+58     	; 0x16ec <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ba:	3e 81       	ldd	r19, Y+6	; 0x06
    16bc:	82 0f       	add	r24, r18
    16be:	93 1f       	adc	r25, r19
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 81       	ld	r18, Z
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	62 2f       	mov	r22, r18
    16ca:	0e 94 f7 09 	call	0x13ee	; 0x13ee <Lcd_4bit_enuDisplayCharacter>
    16ce:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	2d 81       	ldd	r18, Y+5	; 0x05
    16de:	3e 81       	ldd	r19, Y+6	; 0x06
    16e0:	82 0f       	add	r24, r18
    16e2:	93 1f       	adc	r25, r19
    16e4:	fc 01       	movw	r30, r24
    16e6:	80 81       	ld	r24, Z
    16e8:	88 23       	and	r24, r24
    16ea:	19 f7       	brne	.-58     	; 0x16b2 <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    16ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    16ee:	26 96       	adiw	r28, 0x06	; 6
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Number){
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	c9 56       	subi	r28, 0x69	; 105
    170a:	d1 09       	sbc	r29, r1
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	9e 01       	movw	r18, r28
    1718:	29 59       	subi	r18, 0x99	; 153
    171a:	3f 4f       	sbci	r19, 0xFF	; 255
    171c:	f9 01       	movw	r30, r18
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	80 83       	st	Z, r24
    1722:	ce 01       	movw	r24, r28
    1724:	87 59       	subi	r24, 0x97	; 151
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	fc 01       	movw	r30, r24
    172a:	60 83       	st	Z, r22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    172c:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    172e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    1730:	ce 01       	movw	r24, r28
    1732:	89 59       	subi	r24, 0x99	; 153
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	89 2b       	or	r24, r25
    173e:	19 f4       	brne	.+6      	; 0x1746 <Lcd_4bit_enuDisplayNumber+0x46>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	19 c0       	rjmp	.+50     	; 0x1778 <Lcd_4bit_enuDisplayNumber+0x78>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u8Number, Loc_u8ConvertedNumberInArray);
    1746:	9e 01       	movw	r18, r28
    1748:	2d 5f       	subi	r18, 0xFD	; 253
    174a:	3f 4f       	sbci	r19, 0xFF	; 255
    174c:	ce 01       	movw	r24, r28
    174e:	87 59       	subi	r24, 0x97	; 151
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	b9 01       	movw	r22, r18
    1754:	fc 01       	movw	r30, r24
    1756:	80 81       	ld	r24, Z
    1758:	0e 94 49 00 	call	0x92	; 0x92 <Convert_IntToString>
    175c:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    175e:	9e 01       	movw	r18, r28
    1760:	2d 5f       	subi	r18, 0xFD	; 253
    1762:	3f 4f       	sbci	r19, 0xFF	; 255
    1764:	ce 01       	movw	r24, r28
    1766:	89 59       	subi	r24, 0x99	; 153
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	fc 01       	movw	r30, r24
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	b9 01       	movw	r22, r18
    1772:	0e 94 41 0b 	call	0x1682	; 0x1682 <Lcd_4bit_enuDisplayString>
    1776:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1778:	89 81       	ldd	r24, Y+1	; 0x01

}
    177a:	c7 59       	subi	r28, 0x97	; 151
    177c:	df 4f       	sbci	r29, 0xFF	; 255
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f64 Copy_f64Number){
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	cc 56       	subi	r28, 0x6C	; 108
    1798:	d1 09       	sbc	r29, r1
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	9e 01       	movw	r18, r28
    17a6:	29 59       	subi	r18, 0x99	; 153
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	f9 01       	movw	r30, r18
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	80 83       	st	Z, r24
    17b0:	ce 01       	movw	r24, r28
    17b2:	87 59       	subi	r24, 0x97	; 151
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	fc 01       	movw	r30, r24
    17b8:	40 83       	st	Z, r20
    17ba:	51 83       	std	Z+1, r21	; 0x01
    17bc:	62 83       	std	Z+2, r22	; 0x02
    17be:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    17c0:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    17c2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    17c4:	ce 01       	movw	r24, r28
    17c6:	89 59       	subi	r24, 0x99	; 153
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	fc 01       	movw	r30, r24
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	89 2b       	or	r24, r25
    17d2:	19 f4       	brne	.+6      	; 0x17da <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	1e c0       	rjmp	.+60     	; 0x1816 <Lcd_4bit_enuDisplayFloatNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_FloatToString(Copy_f64Number, Loc_u8ConvertedNumberInArray);
    17da:	9e 01       	movw	r18, r28
    17dc:	2d 5f       	subi	r18, 0xFD	; 253
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	ce 01       	movw	r24, r28
    17e2:	87 59       	subi	r24, 0x97	; 151
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	fc 01       	movw	r30, r24
    17e8:	80 81       	ld	r24, Z
    17ea:	91 81       	ldd	r25, Z+1	; 0x01
    17ec:	a2 81       	ldd	r26, Z+2	; 0x02
    17ee:	b3 81       	ldd	r27, Z+3	; 0x03
    17f0:	a9 01       	movw	r20, r18
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 7b 00 	call	0xf6	; 0xf6 <Convert_FloatToString>
    17fa:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    17fc:	9e 01       	movw	r18, r28
    17fe:	2d 5f       	subi	r18, 0xFD	; 253
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    1802:	ce 01       	movw	r24, r28
    1804:	89 59       	subi	r24, 0x99	; 153
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	fc 01       	movw	r30, r24
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	b9 01       	movw	r22, r18
    1810:	0e 94 41 0b 	call	0x1682	; 0x1682 <Lcd_4bit_enuDisplayString>
    1814:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1816:	89 81       	ldd	r24, Y+1	; 0x01

}
    1818:	c4 59       	subi	r28, 0x94	; 148
    181a:	df 4f       	sbci	r29, 0xFF	; 255
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	00 d0       	rcall	.+0      	; 0x1832 <Lcd_4bit_enuSet4BitsOnPins+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <Lcd_4bit_enuSet4BitsOnPins+0x8>
    1834:	1f 92       	push	r1
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	9c 83       	std	Y+4, r25	; 0x04
    183c:	8b 83       	std	Y+3, r24	; 0x03
    183e:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    1840:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    1842:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	89 2b       	or	r24, r25
    184a:	19 f4       	brne	.+6      	; 0x1852 <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	22 c0       	rjmp	.+68     	; 0x1896 <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    1852:	1a 82       	std	Y+2, r1	; 0x02
    1854:	1d c0       	rjmp	.+58     	; 0x1890 <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	2a 81       	ldd	r18, Y+2	; 0x02
    185e:	22 2f       	mov	r18, r18
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    1864:	95 95       	asr	r25
    1866:	87 95       	ror	r24
    1868:	2a 95       	dec	r18
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <Lcd_4bit_enuSet4BitsOnPins+0x38>
    186c:	48 2f       	mov	r20, r24
    186e:	41 70       	andi	r20, 0x01	; 1
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	2b 81       	ldd	r18, Y+3	; 0x03
    1878:	3c 81       	ldd	r19, Y+4	; 0x04
    187a:	82 0f       	add	r24, r18
    187c:	93 1f       	adc	r25, r19
    187e:	fc 01       	movw	r30, r24
    1880:	80 81       	ld	r24, Z
    1882:	64 2f       	mov	r22, r20
    1884:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    1888:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	8f 5f       	subi	r24, 0xFF	; 255
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	84 30       	cpi	r24, 0x04	; 4
    1894:	00 f3       	brcs	.-64     	; 0x1856 <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    1896:	89 81       	ldd	r24, Y+1	; 0x01

}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	a3 97       	sbiw	r28, 0x23	; 35
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	9b a3       	std	Y+35, r25	; 0x23
    18be:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    18c0:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    18c2:	8a a1       	ldd	r24, Y+34	; 0x22
    18c4:	9b a1       	ldd	r25, Y+35	; 0x23
    18c6:	89 2b       	or	r24, r25
    18c8:	19 f4       	brne	.+6      	; 0x18d0 <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	ff c0       	rjmp	.+510    	; 0x1ace <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    18d0:	8a a1       	ldd	r24, Y+34	; 0x22
    18d2:	9b a1       	ldd	r25, Y+35	; 0x23
    18d4:	fc 01       	movw	r30, r24
    18d6:	85 81       	ldd	r24, Z+5	; 0x05
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a0 ea       	ldi	r26, 0xA0	; 160
    18e6:	b0 e4       	ldi	r27, 0x40	; 64
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    18ea:	9b 83       	std	Y+3, r25	; 0x03
    18ec:	ac 83       	std	Y+4, r26	; 0x04
    18ee:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    18f0:	2b ea       	ldi	r18, 0xAB	; 171
    18f2:	3a ea       	ldi	r19, 0xAA	; 170
    18f4:	4a e2       	ldi	r20, 0x2A	; 42
    18f6:	50 e4       	ldi	r21, 0x40	; 64
    18f8:	6a 81       	ldd	r22, Y+2	; 0x02
    18fa:	7b 81       	ldd	r23, Y+3	; 0x03
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	8e 83       	std	Y+6, r24	; 0x06
    190a:	9f 83       	std	Y+7, r25	; 0x07
    190c:	a8 87       	std	Y+8, r26	; 0x08
    190e:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	ac 81       	ldd	r26, Y+4	; 0x04
    1916:	bd 81       	ldd	r27, Y+5	; 0x05
    1918:	9c 01       	movw	r18, r24
    191a:	ad 01       	movw	r20, r26
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__addsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8a 87       	std	Y+10, r24	; 0x0a
    192a:	9b 87       	std	Y+11, r25	; 0x0b
    192c:	ac 87       	std	Y+12, r26	; 0x0c
    192e:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	6e 81       	ldd	r22, Y+6	; 0x06
    193a:	7f 81       	ldd	r23, Y+7	; 0x07
    193c:	88 85       	ldd	r24, Y+8	; 0x08
    193e:	99 85       	ldd	r25, Y+9	; 0x09
    1940:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__cmpsf2>
    1944:	88 23       	and	r24, r24
    1946:	1c f4       	brge	.+6      	; 0x194e <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	8e 87       	std	Y+14, r24	; 0x0e
    194c:	b2 c0       	rjmp	.+356    	; 0x1ab2 <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	6a 85       	ldd	r22, Y+10	; 0x0a
    1958:	7b 85       	ldd	r23, Y+11	; 0x0b
    195a:	8c 85       	ldd	r24, Y+12	; 0x0c
    195c:	9d 85       	ldd	r25, Y+13	; 0x0d
    195e:	0e 94 cb 10 	call	0x2196	; 0x2196 <__gesf2>
    1962:	18 16       	cp	r1, r24
    1964:	0c f0       	brlt	.+2      	; 0x1968 <Lcd_4bit_enuSendEnableSignal+0xc0>
    1966:	7b c0       	rjmp	.+246    	; 0x1a5e <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a e7       	ldi	r20, 0x7A	; 122
    196e:	54 e4       	ldi	r21, 0x44	; 68
    1970:	6a 81       	ldd	r22, Y+2	; 0x02
    1972:	7b 81       	ldd	r23, Y+3	; 0x03
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8f 87       	std	Y+15, r24	; 0x0f
    1982:	98 8b       	std	Y+16, r25	; 0x10
    1984:	a9 8b       	std	Y+17, r26	; 0x11
    1986:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a ef       	ldi	r20, 0xFA	; 250
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	6f 85       	ldd	r22, Y+15	; 0x0f
    1992:	78 89       	ldd	r23, Y+16	; 0x10
    1994:	89 89       	ldd	r24, Y+17	; 0x11
    1996:	9a 89       	ldd	r25, Y+18	; 0x12
    1998:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8b 8b       	std	Y+19, r24	; 0x13
    19a2:	9c 8b       	std	Y+20, r25	; 0x14
    19a4:	ad 8b       	std	Y+21, r26	; 0x15
    19a6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	6b 89       	ldd	r22, Y+19	; 0x13
    19b2:	7c 89       	ldd	r23, Y+20	; 0x14
    19b4:	8d 89       	ldd	r24, Y+21	; 0x15
    19b6:	9e 89       	ldd	r25, Y+22	; 0x16
    19b8:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__cmpsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	98 8f       	std	Y+24, r25	; 0x18
    19c6:	8f 8b       	std	Y+23, r24	; 0x17
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	6b 89       	ldd	r22, Y+19	; 0x13
    19d4:	7c 89       	ldd	r23, Y+20	; 0x14
    19d6:	8d 89       	ldd	r24, Y+21	; 0x15
    19d8:	9e 89       	ldd	r25, Y+22	; 0x16
    19da:	0e 94 cb 10 	call	0x2196	; 0x2196 <__gesf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    19ec:	78 89       	ldd	r23, Y+16	; 0x10
    19ee:	89 89       	ldd	r24, Y+17	; 0x11
    19f0:	9a 89       	ldd	r25, Y+18	; 0x12
    19f2:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	98 8f       	std	Y+24, r25	; 0x18
    1a08:	8f 8b       	std	Y+23, r24	; 0x17
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <Lcd_4bit_enuSendEnableSignal+0x182>
    1a0c:	88 ec       	ldi	r24, 0xC8	; 200
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9a 8f       	std	Y+26, r25	; 0x1a
    1a12:	89 8f       	std	Y+25, r24	; 0x19
    1a14:	89 8d       	ldd	r24, Y+25	; 0x19
    1a16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <Lcd_4bit_enuSendEnableSignal+0x170>
    1a1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a1e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8f 89       	ldd	r24, Y+23	; 0x17
    1a22:	98 8d       	ldd	r25, Y+24	; 0x18
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	98 8f       	std	Y+24, r25	; 0x18
    1a28:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2e:	89 2b       	or	r24, r25
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <Lcd_4bit_enuSendEnableSignal+0x164>
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6b 89       	ldd	r22, Y+19	; 0x13
    1a36:	7c 89       	ldd	r23, Y+20	; 0x14
    1a38:	8d 89       	ldd	r24, Y+21	; 0x15
    1a3a:	9e 89       	ldd	r25, Y+22	; 0x16
    1a3c:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	98 8f       	std	Y+24, r25	; 0x18
    1a46:	8f 8b       	std	Y+23, r24	; 0x17
    1a48:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4c:	9c 8f       	std	Y+28, r25	; 0x1c
    1a4e:	8b 8f       	std	Y+27, r24	; 0x1b
    1a50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <Lcd_4bit_enuSendEnableSignal+0x1ac>
    1a58:	9c 8f       	std	Y+28, r25	; 0x1c
    1a5a:	8b 8f       	std	Y+27, r24	; 0x1b
    1a5c:	2a c0       	rjmp	.+84     	; 0x1ab2 <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	53 e4       	ldi	r21, 0x43	; 67
    1a66:	6e 81       	ldd	r22, Y+6	; 0x06
    1a68:	7f 81       	ldd	r23, Y+7	; 0x07
    1a6a:	88 85       	ldd	r24, Y+8	; 0x08
    1a6c:	99 85       	ldd	r25, Y+9	; 0x09
    1a6e:	0e 94 cb 10 	call	0x2196	; 0x2196 <__gesf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	ac f4       	brge	.+42     	; 0x1aa0 <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1a76:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a78:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a7e:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e 8f       	std	Y+30, r25	; 0x1e
    1a88:	8d 8f       	std	Y+29, r24	; 0x1d
    1a8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a8e:	98 a3       	std	Y+32, r25	; 0x20
    1a90:	8f 8f       	std	Y+31, r24	; 0x1f
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <Lcd_4bit_enuSendEnableSignal+0x1ee>
    1a9a:	98 a3       	std	Y+32, r25	; 0x20
    1a9c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aa0:	6e 81       	ldd	r22, Y+6	; 0x06
    1aa2:	7f 81       	ldd	r23, Y+7	; 0x07
    1aa4:	88 85       	ldd	r24, Y+8	; 0x08
    1aa6:	99 85       	ldd	r25, Y+9	; 0x09
    1aa8:	0e 94 27 10 	call	0x204e	; 0x204e <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	8e 87       	std	Y+14, r24	; 0x0e
    1ab2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ab4:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab8:	8a 95       	dec	r24
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <Lcd_4bit_enuSendEnableSignal+0x210>
    1abc:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    1abe:	8a a1       	ldd	r24, Y+34	; 0x22
    1ac0:	9b a1       	ldd	r25, Y+35	; 0x23
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	85 81       	ldd	r24, Z+5	; 0x05
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    1acc:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ad0:	a3 96       	adiw	r28, 0x23	; 35
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	29 97       	sbiw	r28, 0x09	; 9
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	9f 83       	std	Y+7, r25	; 0x07
    1af8:	8e 83       	std	Y+6, r24	; 0x06
    1afa:	79 87       	std	Y+9, r23	; 0x09
    1afc:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    1b02:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    1b04:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    1b06:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    1b08:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	81 85       	ldd	r24, Z+9	; 0x09
    1b10:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    1b12:	8e 81       	ldd	r24, Y+6	; 0x06
    1b14:	9f 81       	ldd	r25, Y+7	; 0x07
    1b16:	89 2b       	or	r24, r25
    1b18:	21 f0       	breq	.+8      	; 0x1b22 <Keypad_enuRead+0x40>
    1b1a:	88 85       	ldd	r24, Y+8	; 0x08
    1b1c:	99 85       	ldd	r25, Y+9	; 0x09
    1b1e:	89 2b       	or	r24, r25
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	df c0       	rjmp	.+446    	; 0x1ce6 <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    1b28:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <Keypad_DisableControlPins>
    1b30:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    1b32:	8e 81       	ldd	r24, Y+6	; 0x06
    1b34:	9f 81       	ldd	r25, Y+7	; 0x07
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 85       	ldd	r24, Z+8	; 0x08
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	21 f0       	breq	.+8      	; 0x1b4a <Keypad_enuRead+0x68>
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <Keypad_enuRead+0x66>
    1b46:	67 c0       	rjmp	.+206    	; 0x1c16 <Keypad_enuRead+0x134>
    1b48:	cc c0       	rjmp	.+408    	; 0x1ce2 <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    1b4a:	1a 82       	std	Y+2, r1	; 0x02
    1b4c:	5f c0       	rjmp	.+190    	; 0x1c0c <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    1b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b50:	9f 81       	ldd	r25, Y+7	; 0x07
    1b52:	fc 01       	movw	r30, r24
    1b54:	91 85       	ldd	r25, Z+9	; 0x09
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	99 23       	and	r25, r25
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <Keypad_enuRead+0x7c>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	2e 81       	ldd	r18, Y+6	; 0x06
    1b68:	3f 81       	ldd	r19, Y+7	; 0x07
    1b6a:	82 0f       	add	r24, r18
    1b6c:	93 1f       	adc	r25, r19
    1b6e:	fc 01       	movw	r30, r24
    1b70:	80 81       	ld	r24, Z
    1b72:	64 2f       	mov	r22, r20
    1b74:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    1b78:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1b7a:	1b 82       	std	Y+3, r1	; 0x03
    1b7c:	30 c0       	rjmp	.+96     	; 0x1bde <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	2e 81       	ldd	r18, Y+6	; 0x06
    1b86:	3f 81       	ldd	r19, Y+7	; 0x07
    1b88:	82 0f       	add	r24, r18
    1b8a:	93 1f       	adc	r25, r19
    1b8c:	04 96       	adiw	r24, 0x04	; 4
    1b8e:	fc 01       	movw	r30, r24
    1b90:	20 81       	ld	r18, Z
    1b92:	ce 01       	movw	r24, r28
    1b94:	05 96       	adiw	r24, 0x05	; 5
    1b96:	bc 01       	movw	r22, r24
    1b98:	82 2f       	mov	r24, r18
    1b9a:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_enuReadChannel>
    1b9e:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	91 85       	ldd	r25, Z+9	; 0x09
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	98 17       	cp	r25, r24
    1bac:	a9 f0       	breq	.+42     	; 0x1bd8 <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	22 0f       	add	r18, r18
    1bbc:	33 1f       	adc	r19, r19
    1bbe:	22 0f       	add	r18, r18
    1bc0:	33 1f       	adc	r19, r19
    1bc2:	82 0f       	add	r24, r18
    1bc4:	93 1f       	adc	r25, r19
    1bc6:	80 56       	subi	r24, 0x60	; 96
    1bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bca:	fc 01       	movw	r30, r24
    1bcc:	20 81       	ld	r18, Z
    1bce:	88 85       	ldd	r24, Y+8	; 0x08
    1bd0:	99 85       	ldd	r25, Y+9	; 0x09
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    1bd6:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	84 30       	cpi	r24, 0x04	; 4
    1be2:	68 f2       	brcs	.-102    	; 0x1b7e <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    1be4:	8e 81       	ldd	r24, Y+6	; 0x06
    1be6:	9f 81       	ldd	r25, Y+7	; 0x07
    1be8:	fc 01       	movw	r30, r24
    1bea:	41 85       	ldd	r20, Z+9	; 0x09
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bf4:	3f 81       	ldd	r19, Y+7	; 0x07
    1bf6:	82 0f       	add	r24, r18
    1bf8:	93 1f       	adc	r25, r19
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	80 81       	ld	r24, Z
    1bfe:	64 2f       	mov	r22, r20
    1c00:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    1c04:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	8f 5f       	subi	r24, 0xFF	; 255
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	84 30       	cpi	r24, 0x04	; 4
    1c10:	08 f4       	brcc	.+2      	; 0x1c14 <Keypad_enuRead+0x132>
    1c12:	9d cf       	rjmp	.-198    	; 0x1b4e <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    1c14:	68 c0       	rjmp	.+208    	; 0x1ce6 <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1c16:	1b 82       	std	Y+3, r1	; 0x03
    1c18:	5f c0       	rjmp	.+190    	; 0x1cd8 <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    1c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c1e:	fc 01       	movw	r30, r24
    1c20:	91 85       	ldd	r25, Z+9	; 0x09
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	99 23       	and	r25, r25
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <Keypad_enuRead+0x148>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	88 2f       	mov	r24, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	2e 81       	ldd	r18, Y+6	; 0x06
    1c34:	3f 81       	ldd	r19, Y+7	; 0x07
    1c36:	82 0f       	add	r24, r18
    1c38:	93 1f       	adc	r25, r19
    1c3a:	04 96       	adiw	r24, 0x04	; 4
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 81       	ld	r24, Z
    1c40:	64 2f       	mov	r22, r20
    1c42:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    1c46:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    1c48:	1a 82       	std	Y+2, r1	; 0x02
    1c4a:	2e c0       	rjmp	.+92     	; 0x1ca8 <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	88 2f       	mov	r24, r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	2e 81       	ldd	r18, Y+6	; 0x06
    1c54:	3f 81       	ldd	r19, Y+7	; 0x07
    1c56:	82 0f       	add	r24, r18
    1c58:	93 1f       	adc	r25, r19
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	20 81       	ld	r18, Z
    1c5e:	ce 01       	movw	r24, r28
    1c60:	05 96       	adiw	r24, 0x05	; 5
    1c62:	bc 01       	movw	r22, r24
    1c64:	82 2f       	mov	r24, r18
    1c66:	0e 94 56 06 	call	0xcac	; 0xcac <Dio_enuReadChannel>
    1c6a:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    1c6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c70:	fc 01       	movw	r30, r24
    1c72:	91 85       	ldd	r25, Z+9	; 0x09
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	98 17       	cp	r25, r24
    1c78:	a1 f0       	breq	.+40     	; 0x1ca2 <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	22 0f       	add	r18, r18
    1c88:	33 1f       	adc	r19, r19
    1c8a:	22 0f       	add	r18, r18
    1c8c:	33 1f       	adc	r19, r19
    1c8e:	82 0f       	add	r24, r18
    1c90:	93 1f       	adc	r25, r19
    1c92:	80 56       	subi	r24, 0x60	; 96
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	fc 01       	movw	r30, r24
    1c98:	20 81       	ld	r18, Z
    1c9a:	88 85       	ldd	r24, Y+8	; 0x08
    1c9c:	99 85       	ldd	r25, Y+9	; 0x09
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	8a 83       	std	Y+2, r24	; 0x02
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	84 30       	cpi	r24, 0x04	; 4
    1cac:	78 f2       	brcs	.-98     	; 0x1c4c <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    1cae:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	41 85       	ldd	r20, Z+9	; 0x09
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cbe:	3f 81       	ldd	r19, Y+7	; 0x07
    1cc0:	82 0f       	add	r24, r18
    1cc2:	93 1f       	adc	r25, r19
    1cc4:	04 96       	adiw	r24, 0x04	; 4
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	80 81       	ld	r24, Z
    1cca:	64 2f       	mov	r22, r20
    1ccc:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    1cd0:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	84 30       	cpi	r24, 0x04	; 4
    1cdc:	08 f4       	brcc	.+2      	; 0x1ce0 <Keypad_enuRead+0x1fe>
    1cde:	9d cf       	rjmp	.-198    	; 0x1c1a <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce8:	29 96       	adiw	r28, 0x09	; 9
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	08 95       	ret

00001cfa <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <Keypad_DisableControlPins+0x6>
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <Keypad_DisableControlPins+0x8>
    1d02:	1f 92       	push	r1
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	9d 83       	std	Y+5, r25	; 0x05
    1d0a:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    1d10:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    1d12:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	9d 81       	ldd	r25, Y+5	; 0x05
    1d18:	89 2b       	or	r24, r25
    1d1a:	19 f4       	brne	.+6      	; 0x1d22 <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	42 c0       	rjmp	.+132    	; 0x1da6 <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    1d22:	8c 81       	ldd	r24, Y+4	; 0x04
    1d24:	9d 81       	ldd	r25, Y+5	; 0x05
    1d26:	fc 01       	movw	r30, r24
    1d28:	80 85       	ldd	r24, Z+8	; 0x08
    1d2a:	88 2f       	mov	r24, r24
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	19 f0       	breq	.+6      	; 0x1d38 <Keypad_DisableControlPins+0x3e>
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	d9 f0       	breq	.+54     	; 0x1d6c <Keypad_DisableControlPins+0x72>
    1d36:	35 c0       	rjmp	.+106    	; 0x1da2 <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    1d38:	1a 82       	std	Y+2, r1	; 0x02
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    1d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d40:	fc 01       	movw	r30, r24
    1d42:	41 85       	ldd	r20, Z+9	; 0x09
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4e:	82 0f       	add	r24, r18
    1d50:	93 1f       	adc	r25, r19
    1d52:	fc 01       	movw	r30, r24
    1d54:	80 81       	ld	r24, Z
    1d56:	64 2f       	mov	r22, r20
    1d58:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	8a 83       	std	Y+2, r24	; 0x02
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	48 f3       	brcs	.-46     	; 0x1d3c <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    1d6a:	1d c0       	rjmp	.+58     	; 0x1da6 <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    1d6c:	1a 82       	std	Y+2, r1	; 0x02
    1d6e:	15 c0       	rjmp	.+42     	; 0x1d9a <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	fc 01       	movw	r30, r24
    1d76:	41 85       	ldd	r20, Z+9	; 0x09
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d80:	3d 81       	ldd	r19, Y+5	; 0x05
    1d82:	82 0f       	add	r24, r18
    1d84:	93 1f       	adc	r25, r19
    1d86:	04 96       	adiw	r24, 0x04	; 4
    1d88:	fc 01       	movw	r30, r24
    1d8a:	80 81       	ld	r24, Z
    1d8c:	64 2f       	mov	r22, r20
    1d8e:	0e 94 e7 05 	call	0xbce	; 0xbce <Dio_enuWriteChannel>
    1d92:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	8a 83       	std	Y+2, r24	; 0x02
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	84 30       	cpi	r24, 0x04	; 4
    1d9e:	40 f3       	brcs	.-48     	; 0x1d70 <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	08 95       	ret

00001db8 <Exti_ApplicationIsr0>:





void Exti_ApplicationIsr0(){
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62

	Dio_enuFlipChannel(DIO_PINA4_CHANNEL4);
    1dc0:	84 e0       	ldi	r24, 0x04	; 4
    1dc2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <Dio_enuFlipChannel>

}
    1dc6:	00 00       	nop
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <Exti_ApplicationIsr1>:

void Exti_ApplicationIsr1(){
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62


	Dio_enuFlipChannel(DIO_PINA6_CHANNEL6);
    1dd6:	86 e0       	ldi	r24, 0x06	; 6
    1dd8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <Dio_enuFlipChannel>
}
    1ddc:	00 00       	nop
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <Exti_ApplicationIsr2>:


void Exti_ApplicationIsr2(){
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62


	Dio_enuFlipChannel(DIO_PINA5_CHANNEL5);
    1dec:	85 e0       	ldi	r24, 0x05	; 5
    1dee:	0e 94 2d 07 	call	0xe5a	; 0xe5a <Dio_enuFlipChannel>

}
    1df2:	00 00       	nop
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <main>:

int main(void){
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62

	Port_voidInit();
    1e02:	0e 94 bb 01 	call	0x376	; 0x376 <Port_voidInit>

	Exti_enuEnable(EXTI_INT0_INDEX, EXTI_INT0_SELECT_FAILING_EDGE);
    1e06:	62 e0       	ldi	r22, 0x02	; 2
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	0e 94 32 04 	call	0x864	; 0x864 <Exti_enuEnable>
	Exti_enuSetCallbackFunction(EXTI_INT0_INDEX, Exti_ApplicationIsr0);
    1e0e:	6c ed       	ldi	r22, 0xDC	; 220
    1e10:	7e e0       	ldi	r23, 0x0E	; 14
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	0e 94 16 05 	call	0xa2c	; 0xa2c <Exti_enuSetCallbackFunction>

	Exti_enuEnable(EXTI_INT1_INDEX, EXTI_INT1_SELECT_FAILING_EDGE);
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	0e 94 32 04 	call	0x864	; 0x864 <Exti_enuEnable>
	Exti_enuSetCallbackFunction(EXTI_INT1_INDEX, Exti_ApplicationIsr1);
    1e20:	67 ee       	ldi	r22, 0xE7	; 231
    1e22:	7e e0       	ldi	r23, 0x0E	; 14
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	0e 94 16 05 	call	0xa2c	; 0xa2c <Exti_enuSetCallbackFunction>

	Exti_enuEnable(EXTI_INT2_INDEX, EXTI_INT2_SELECT_FAILING_EDGE);
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	0e 94 32 04 	call	0x864	; 0x864 <Exti_enuEnable>
	Exti_enuSetCallbackFunction(EXTI_INT2_INDEX, Exti_ApplicationIsr2);
    1e32:	62 ef       	ldi	r22, 0xF2	; 242
    1e34:	7e e0       	ldi	r23, 0x0E	; 14
    1e36:	82 e0       	ldi	r24, 0x02	; 2
    1e38:	0e 94 16 05 	call	0xa2c	; 0xa2c <Exti_enuSetCallbackFunction>


	Gie_enuEnableGlobalInterrupt();
    1e3c:	0e 94 c5 03 	call	0x78a	; 0x78a <Gie_enuEnableGlobalInterrupt>

	while(1){



	}
    1e40:	ff cf       	rjmp	.-2      	; 0x1e40 <main+0x46>

00001e42 <__ashldi3>:
    1e42:	0f 93       	push	r16
    1e44:	08 30       	cpi	r16, 0x08	; 8
    1e46:	90 f0       	brcs	.+36     	; 0x1e6c <__ashldi3+0x2a>
    1e48:	98 2f       	mov	r25, r24
    1e4a:	87 2f       	mov	r24, r23
    1e4c:	76 2f       	mov	r23, r22
    1e4e:	65 2f       	mov	r22, r21
    1e50:	54 2f       	mov	r21, r20
    1e52:	43 2f       	mov	r20, r19
    1e54:	32 2f       	mov	r19, r18
    1e56:	22 27       	eor	r18, r18
    1e58:	08 50       	subi	r16, 0x08	; 8
    1e5a:	f4 cf       	rjmp	.-24     	; 0x1e44 <__ashldi3+0x2>
    1e5c:	22 0f       	add	r18, r18
    1e5e:	33 1f       	adc	r19, r19
    1e60:	44 1f       	adc	r20, r20
    1e62:	55 1f       	adc	r21, r21
    1e64:	66 1f       	adc	r22, r22
    1e66:	77 1f       	adc	r23, r23
    1e68:	88 1f       	adc	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0a 95       	dec	r16
    1e6e:	b2 f7       	brpl	.-20     	; 0x1e5c <__ashldi3+0x1a>
    1e70:	0f 91       	pop	r16
    1e72:	08 95       	ret

00001e74 <__adddi3>:
    1e74:	2a 0d       	add	r18, r10
    1e76:	3b 1d       	adc	r19, r11
    1e78:	4c 1d       	adc	r20, r12
    1e7a:	5d 1d       	adc	r21, r13
    1e7c:	6e 1d       	adc	r22, r14
    1e7e:	7f 1d       	adc	r23, r15
    1e80:	80 1f       	adc	r24, r16
    1e82:	91 1f       	adc	r25, r17
    1e84:	08 95       	ret

00001e86 <__subsf3>:
    1e86:	50 58       	subi	r21, 0x80	; 128

00001e88 <__addsf3>:
    1e88:	bb 27       	eor	r27, r27
    1e8a:	aa 27       	eor	r26, r26
    1e8c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__addsf3x>
    1e90:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__fp_round>
    1e94:	0e 94 83 10 	call	0x2106	; 0x2106 <__fp_pscA>
    1e98:	38 f0       	brcs	.+14     	; 0x1ea8 <__addsf3+0x20>
    1e9a:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fp_pscB>
    1e9e:	20 f0       	brcs	.+8      	; 0x1ea8 <__addsf3+0x20>
    1ea0:	39 f4       	brne	.+14     	; 0x1eb0 <__addsf3+0x28>
    1ea2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <__addsf3+0x24>
    1ea6:	26 f4       	brtc	.+8      	; 0x1eb0 <__addsf3+0x28>
    1ea8:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__fp_nan>
    1eac:	0e f4       	brtc	.+2      	; 0x1eb0 <__addsf3+0x28>
    1eae:	e0 95       	com	r30
    1eb0:	e7 fb       	bst	r30, 7
    1eb2:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__fp_inf>

00001eb6 <__addsf3x>:
    1eb6:	e9 2f       	mov	r30, r25
    1eb8:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fp_split3>
    1ebc:	58 f3       	brcs	.-42     	; 0x1e94 <__addsf3+0xc>
    1ebe:	ba 17       	cp	r27, r26
    1ec0:	62 07       	cpc	r22, r18
    1ec2:	73 07       	cpc	r23, r19
    1ec4:	84 07       	cpc	r24, r20
    1ec6:	95 07       	cpc	r25, r21
    1ec8:	20 f0       	brcs	.+8      	; 0x1ed2 <__addsf3x+0x1c>
    1eca:	79 f4       	brne	.+30     	; 0x1eea <__addsf3x+0x34>
    1ecc:	a6 f5       	brtc	.+104    	; 0x1f36 <__addsf3x+0x80>
    1ece:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__fp_zero>
    1ed2:	0e f4       	brtc	.+2      	; 0x1ed6 <__addsf3x+0x20>
    1ed4:	e0 95       	com	r30
    1ed6:	0b 2e       	mov	r0, r27
    1ed8:	ba 2f       	mov	r27, r26
    1eda:	a0 2d       	mov	r26, r0
    1edc:	0b 01       	movw	r0, r22
    1ede:	b9 01       	movw	r22, r18
    1ee0:	90 01       	movw	r18, r0
    1ee2:	0c 01       	movw	r0, r24
    1ee4:	ca 01       	movw	r24, r20
    1ee6:	a0 01       	movw	r20, r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	ff 27       	eor	r31, r31
    1eec:	59 1b       	sub	r21, r25
    1eee:	99 f0       	breq	.+38     	; 0x1f16 <__addsf3x+0x60>
    1ef0:	59 3f       	cpi	r21, 0xF9	; 249
    1ef2:	50 f4       	brcc	.+20     	; 0x1f08 <__addsf3x+0x52>
    1ef4:	50 3e       	cpi	r21, 0xE0	; 224
    1ef6:	68 f1       	brcs	.+90     	; 0x1f52 <__addsf3x+0x9c>
    1ef8:	1a 16       	cp	r1, r26
    1efa:	f0 40       	sbci	r31, 0x00	; 0
    1efc:	a2 2f       	mov	r26, r18
    1efe:	23 2f       	mov	r18, r19
    1f00:	34 2f       	mov	r19, r20
    1f02:	44 27       	eor	r20, r20
    1f04:	58 5f       	subi	r21, 0xF8	; 248
    1f06:	f3 cf       	rjmp	.-26     	; 0x1eee <__addsf3x+0x38>
    1f08:	46 95       	lsr	r20
    1f0a:	37 95       	ror	r19
    1f0c:	27 95       	ror	r18
    1f0e:	a7 95       	ror	r26
    1f10:	f0 40       	sbci	r31, 0x00	; 0
    1f12:	53 95       	inc	r21
    1f14:	c9 f7       	brne	.-14     	; 0x1f08 <__addsf3x+0x52>
    1f16:	7e f4       	brtc	.+30     	; 0x1f36 <__addsf3x+0x80>
    1f18:	1f 16       	cp	r1, r31
    1f1a:	ba 0b       	sbc	r27, r26
    1f1c:	62 0b       	sbc	r22, r18
    1f1e:	73 0b       	sbc	r23, r19
    1f20:	84 0b       	sbc	r24, r20
    1f22:	ba f0       	brmi	.+46     	; 0x1f52 <__addsf3x+0x9c>
    1f24:	91 50       	subi	r25, 0x01	; 1
    1f26:	a1 f0       	breq	.+40     	; 0x1f50 <__addsf3x+0x9a>
    1f28:	ff 0f       	add	r31, r31
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	66 1f       	adc	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	88 1f       	adc	r24, r24
    1f32:	c2 f7       	brpl	.-16     	; 0x1f24 <__addsf3x+0x6e>
    1f34:	0e c0       	rjmp	.+28     	; 0x1f52 <__addsf3x+0x9c>
    1f36:	ba 0f       	add	r27, r26
    1f38:	62 1f       	adc	r22, r18
    1f3a:	73 1f       	adc	r23, r19
    1f3c:	84 1f       	adc	r24, r20
    1f3e:	48 f4       	brcc	.+18     	; 0x1f52 <__addsf3x+0x9c>
    1f40:	87 95       	ror	r24
    1f42:	77 95       	ror	r23
    1f44:	67 95       	ror	r22
    1f46:	b7 95       	ror	r27
    1f48:	f7 95       	ror	r31
    1f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <__addsf3x+0x9a>
    1f4e:	b0 cf       	rjmp	.-160    	; 0x1eb0 <__addsf3+0x28>
    1f50:	93 95       	inc	r25
    1f52:	88 0f       	add	r24, r24
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <__addsf3x+0xa2>
    1f56:	99 27       	eor	r25, r25
    1f58:	ee 0f       	add	r30, r30
    1f5a:	97 95       	ror	r25
    1f5c:	87 95       	ror	r24
    1f5e:	08 95       	ret

00001f60 <__cmpsf2>:
    1f60:	0e 94 56 10 	call	0x20ac	; 0x20ac <__fp_cmp>
    1f64:	08 f4       	brcc	.+2      	; 0x1f68 <__cmpsf2+0x8>
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	08 95       	ret

00001f6a <__divsf3>:
    1f6a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__divsf3x>
    1f6e:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__fp_round>
    1f72:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fp_pscB>
    1f76:	58 f0       	brcs	.+22     	; 0x1f8e <__divsf3+0x24>
    1f78:	0e 94 83 10 	call	0x2106	; 0x2106 <__fp_pscA>
    1f7c:	40 f0       	brcs	.+16     	; 0x1f8e <__divsf3+0x24>
    1f7e:	29 f4       	brne	.+10     	; 0x1f8a <__divsf3+0x20>
    1f80:	5f 3f       	cpi	r21, 0xFF	; 255
    1f82:	29 f0       	breq	.+10     	; 0x1f8e <__divsf3+0x24>
    1f84:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__fp_inf>
    1f88:	51 11       	cpse	r21, r1
    1f8a:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__fp_szero>
    1f8e:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__fp_nan>

00001f92 <__divsf3x>:
    1f92:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fp_split3>
    1f96:	68 f3       	brcs	.-38     	; 0x1f72 <__divsf3+0x8>

00001f98 <__divsf3_pse>:
    1f98:	99 23       	and	r25, r25
    1f9a:	b1 f3       	breq	.-20     	; 0x1f88 <__divsf3+0x1e>
    1f9c:	55 23       	and	r21, r21
    1f9e:	91 f3       	breq	.-28     	; 0x1f84 <__divsf3+0x1a>
    1fa0:	95 1b       	sub	r25, r21
    1fa2:	55 0b       	sbc	r21, r21
    1fa4:	bb 27       	eor	r27, r27
    1fa6:	aa 27       	eor	r26, r26
    1fa8:	62 17       	cp	r22, r18
    1faa:	73 07       	cpc	r23, r19
    1fac:	84 07       	cpc	r24, r20
    1fae:	38 f0       	brcs	.+14     	; 0x1fbe <__divsf3_pse+0x26>
    1fb0:	9f 5f       	subi	r25, 0xFF	; 255
    1fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb4:	22 0f       	add	r18, r18
    1fb6:	33 1f       	adc	r19, r19
    1fb8:	44 1f       	adc	r20, r20
    1fba:	aa 1f       	adc	r26, r26
    1fbc:	a9 f3       	breq	.-22     	; 0x1fa8 <__divsf3_pse+0x10>
    1fbe:	35 d0       	rcall	.+106    	; 0x202a <__divsf3_pse+0x92>
    1fc0:	0e 2e       	mov	r0, r30
    1fc2:	3a f0       	brmi	.+14     	; 0x1fd2 <__divsf3_pse+0x3a>
    1fc4:	e0 e8       	ldi	r30, 0x80	; 128
    1fc6:	32 d0       	rcall	.+100    	; 0x202c <__divsf3_pse+0x94>
    1fc8:	91 50       	subi	r25, 0x01	; 1
    1fca:	50 40       	sbci	r21, 0x00	; 0
    1fcc:	e6 95       	lsr	r30
    1fce:	00 1c       	adc	r0, r0
    1fd0:	ca f7       	brpl	.-14     	; 0x1fc4 <__divsf3_pse+0x2c>
    1fd2:	2b d0       	rcall	.+86     	; 0x202a <__divsf3_pse+0x92>
    1fd4:	fe 2f       	mov	r31, r30
    1fd6:	29 d0       	rcall	.+82     	; 0x202a <__divsf3_pse+0x92>
    1fd8:	66 0f       	add	r22, r22
    1fda:	77 1f       	adc	r23, r23
    1fdc:	88 1f       	adc	r24, r24
    1fde:	bb 1f       	adc	r27, r27
    1fe0:	26 17       	cp	r18, r22
    1fe2:	37 07       	cpc	r19, r23
    1fe4:	48 07       	cpc	r20, r24
    1fe6:	ab 07       	cpc	r26, r27
    1fe8:	b0 e8       	ldi	r27, 0x80	; 128
    1fea:	09 f0       	breq	.+2      	; 0x1fee <__divsf3_pse+0x56>
    1fec:	bb 0b       	sbc	r27, r27
    1fee:	80 2d       	mov	r24, r0
    1ff0:	bf 01       	movw	r22, r30
    1ff2:	ff 27       	eor	r31, r31
    1ff4:	93 58       	subi	r25, 0x83	; 131
    1ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff8:	3a f0       	brmi	.+14     	; 0x2008 <__divsf3_pse+0x70>
    1ffa:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	78 f0       	brcs	.+30     	; 0x201e <__divsf3_pse+0x86>
    2000:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__fp_inf>
    2004:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__fp_szero>
    2008:	5f 3f       	cpi	r21, 0xFF	; 255
    200a:	e4 f3       	brlt	.-8      	; 0x2004 <__divsf3_pse+0x6c>
    200c:	98 3e       	cpi	r25, 0xE8	; 232
    200e:	d4 f3       	brlt	.-12     	; 0x2004 <__divsf3_pse+0x6c>
    2010:	86 95       	lsr	r24
    2012:	77 95       	ror	r23
    2014:	67 95       	ror	r22
    2016:	b7 95       	ror	r27
    2018:	f7 95       	ror	r31
    201a:	9f 5f       	subi	r25, 0xFF	; 255
    201c:	c9 f7       	brne	.-14     	; 0x2010 <__divsf3_pse+0x78>
    201e:	88 0f       	add	r24, r24
    2020:	91 1d       	adc	r25, r1
    2022:	96 95       	lsr	r25
    2024:	87 95       	ror	r24
    2026:	97 f9       	bld	r25, 7
    2028:	08 95       	ret
    202a:	e1 e0       	ldi	r30, 0x01	; 1
    202c:	66 0f       	add	r22, r22
    202e:	77 1f       	adc	r23, r23
    2030:	88 1f       	adc	r24, r24
    2032:	bb 1f       	adc	r27, r27
    2034:	62 17       	cp	r22, r18
    2036:	73 07       	cpc	r23, r19
    2038:	84 07       	cpc	r24, r20
    203a:	ba 07       	cpc	r27, r26
    203c:	20 f0       	brcs	.+8      	; 0x2046 <__divsf3_pse+0xae>
    203e:	62 1b       	sub	r22, r18
    2040:	73 0b       	sbc	r23, r19
    2042:	84 0b       	sbc	r24, r20
    2044:	ba 0b       	sbc	r27, r26
    2046:	ee 1f       	adc	r30, r30
    2048:	88 f7       	brcc	.-30     	; 0x202c <__divsf3_pse+0x94>
    204a:	e0 95       	com	r30
    204c:	08 95       	ret

0000204e <__fixunssfsi>:
    204e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__fp_splitA>
    2052:	88 f0       	brcs	.+34     	; 0x2076 <__fixunssfsi+0x28>
    2054:	9f 57       	subi	r25, 0x7F	; 127
    2056:	98 f0       	brcs	.+38     	; 0x207e <__fixunssfsi+0x30>
    2058:	b9 2f       	mov	r27, r25
    205a:	99 27       	eor	r25, r25
    205c:	b7 51       	subi	r27, 0x17	; 23
    205e:	b0 f0       	brcs	.+44     	; 0x208c <__fixunssfsi+0x3e>
    2060:	e1 f0       	breq	.+56     	; 0x209a <__fixunssfsi+0x4c>
    2062:	66 0f       	add	r22, r22
    2064:	77 1f       	adc	r23, r23
    2066:	88 1f       	adc	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	1a f0       	brmi	.+6      	; 0x2072 <__fixunssfsi+0x24>
    206c:	ba 95       	dec	r27
    206e:	c9 f7       	brne	.-14     	; 0x2062 <__fixunssfsi+0x14>
    2070:	14 c0       	rjmp	.+40     	; 0x209a <__fixunssfsi+0x4c>
    2072:	b1 30       	cpi	r27, 0x01	; 1
    2074:	91 f0       	breq	.+36     	; 0x209a <__fixunssfsi+0x4c>
    2076:	0e 94 c4 10 	call	0x2188	; 0x2188 <__fp_zero>
    207a:	b1 e0       	ldi	r27, 0x01	; 1
    207c:	08 95       	ret
    207e:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__fp_zero>
    2082:	67 2f       	mov	r22, r23
    2084:	78 2f       	mov	r23, r24
    2086:	88 27       	eor	r24, r24
    2088:	b8 5f       	subi	r27, 0xF8	; 248
    208a:	39 f0       	breq	.+14     	; 0x209a <__fixunssfsi+0x4c>
    208c:	b9 3f       	cpi	r27, 0xF9	; 249
    208e:	cc f3       	brlt	.-14     	; 0x2082 <__fixunssfsi+0x34>
    2090:	86 95       	lsr	r24
    2092:	77 95       	ror	r23
    2094:	67 95       	ror	r22
    2096:	b3 95       	inc	r27
    2098:	d9 f7       	brne	.-10     	; 0x2090 <__fixunssfsi+0x42>
    209a:	3e f4       	brtc	.+14     	; 0x20aa <__fixunssfsi+0x5c>
    209c:	90 95       	com	r25
    209e:	80 95       	com	r24
    20a0:	70 95       	com	r23
    20a2:	61 95       	neg	r22
    20a4:	7f 4f       	sbci	r23, 0xFF	; 255
    20a6:	8f 4f       	sbci	r24, 0xFF	; 255
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	08 95       	ret

000020ac <__fp_cmp>:
    20ac:	99 0f       	add	r25, r25
    20ae:	00 08       	sbc	r0, r0
    20b0:	55 0f       	add	r21, r21
    20b2:	aa 0b       	sbc	r26, r26
    20b4:	e0 e8       	ldi	r30, 0x80	; 128
    20b6:	fe ef       	ldi	r31, 0xFE	; 254
    20b8:	16 16       	cp	r1, r22
    20ba:	17 06       	cpc	r1, r23
    20bc:	e8 07       	cpc	r30, r24
    20be:	f9 07       	cpc	r31, r25
    20c0:	c0 f0       	brcs	.+48     	; 0x20f2 <__fp_cmp+0x46>
    20c2:	12 16       	cp	r1, r18
    20c4:	13 06       	cpc	r1, r19
    20c6:	e4 07       	cpc	r30, r20
    20c8:	f5 07       	cpc	r31, r21
    20ca:	98 f0       	brcs	.+38     	; 0x20f2 <__fp_cmp+0x46>
    20cc:	62 1b       	sub	r22, r18
    20ce:	73 0b       	sbc	r23, r19
    20d0:	84 0b       	sbc	r24, r20
    20d2:	95 0b       	sbc	r25, r21
    20d4:	39 f4       	brne	.+14     	; 0x20e4 <__fp_cmp+0x38>
    20d6:	0a 26       	eor	r0, r26
    20d8:	61 f0       	breq	.+24     	; 0x20f2 <__fp_cmp+0x46>
    20da:	23 2b       	or	r18, r19
    20dc:	24 2b       	or	r18, r20
    20de:	25 2b       	or	r18, r21
    20e0:	21 f4       	brne	.+8      	; 0x20ea <__fp_cmp+0x3e>
    20e2:	08 95       	ret
    20e4:	0a 26       	eor	r0, r26
    20e6:	09 f4       	brne	.+2      	; 0x20ea <__fp_cmp+0x3e>
    20e8:	a1 40       	sbci	r26, 0x01	; 1
    20ea:	a6 95       	lsr	r26
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	81 1d       	adc	r24, r1
    20f0:	81 1d       	adc	r24, r1
    20f2:	08 95       	ret

000020f4 <__fp_inf>:
    20f4:	97 f9       	bld	r25, 7
    20f6:	9f 67       	ori	r25, 0x7F	; 127
    20f8:	80 e8       	ldi	r24, 0x80	; 128
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	08 95       	ret

00002100 <__fp_nan>:
    2100:	9f ef       	ldi	r25, 0xFF	; 255
    2102:	80 ec       	ldi	r24, 0xC0	; 192
    2104:	08 95       	ret

00002106 <__fp_pscA>:
    2106:	00 24       	eor	r0, r0
    2108:	0a 94       	dec	r0
    210a:	16 16       	cp	r1, r22
    210c:	17 06       	cpc	r1, r23
    210e:	18 06       	cpc	r1, r24
    2110:	09 06       	cpc	r0, r25
    2112:	08 95       	ret

00002114 <__fp_pscB>:
    2114:	00 24       	eor	r0, r0
    2116:	0a 94       	dec	r0
    2118:	12 16       	cp	r1, r18
    211a:	13 06       	cpc	r1, r19
    211c:	14 06       	cpc	r1, r20
    211e:	05 06       	cpc	r0, r21
    2120:	08 95       	ret

00002122 <__fp_round>:
    2122:	09 2e       	mov	r0, r25
    2124:	03 94       	inc	r0
    2126:	00 0c       	add	r0, r0
    2128:	11 f4       	brne	.+4      	; 0x212e <__fp_round+0xc>
    212a:	88 23       	and	r24, r24
    212c:	52 f0       	brmi	.+20     	; 0x2142 <__fp_round+0x20>
    212e:	bb 0f       	add	r27, r27
    2130:	40 f4       	brcc	.+16     	; 0x2142 <__fp_round+0x20>
    2132:	bf 2b       	or	r27, r31
    2134:	11 f4       	brne	.+4      	; 0x213a <__fp_round+0x18>
    2136:	60 ff       	sbrs	r22, 0
    2138:	04 c0       	rjmp	.+8      	; 0x2142 <__fp_round+0x20>
    213a:	6f 5f       	subi	r22, 0xFF	; 255
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
    213e:	8f 4f       	sbci	r24, 0xFF	; 255
    2140:	9f 4f       	sbci	r25, 0xFF	; 255
    2142:	08 95       	ret

00002144 <__fp_split3>:
    2144:	57 fd       	sbrc	r21, 7
    2146:	90 58       	subi	r25, 0x80	; 128
    2148:	44 0f       	add	r20, r20
    214a:	55 1f       	adc	r21, r21
    214c:	59 f0       	breq	.+22     	; 0x2164 <__fp_splitA+0x10>
    214e:	5f 3f       	cpi	r21, 0xFF	; 255
    2150:	71 f0       	breq	.+28     	; 0x216e <__fp_splitA+0x1a>
    2152:	47 95       	ror	r20

00002154 <__fp_splitA>:
    2154:	88 0f       	add	r24, r24
    2156:	97 fb       	bst	r25, 7
    2158:	99 1f       	adc	r25, r25
    215a:	61 f0       	breq	.+24     	; 0x2174 <__fp_splitA+0x20>
    215c:	9f 3f       	cpi	r25, 0xFF	; 255
    215e:	79 f0       	breq	.+30     	; 0x217e <__fp_splitA+0x2a>
    2160:	87 95       	ror	r24
    2162:	08 95       	ret
    2164:	12 16       	cp	r1, r18
    2166:	13 06       	cpc	r1, r19
    2168:	14 06       	cpc	r1, r20
    216a:	55 1f       	adc	r21, r21
    216c:	f2 cf       	rjmp	.-28     	; 0x2152 <__fp_split3+0xe>
    216e:	46 95       	lsr	r20
    2170:	f1 df       	rcall	.-30     	; 0x2154 <__fp_splitA>
    2172:	08 c0       	rjmp	.+16     	; 0x2184 <__fp_splitA+0x30>
    2174:	16 16       	cp	r1, r22
    2176:	17 06       	cpc	r1, r23
    2178:	18 06       	cpc	r1, r24
    217a:	99 1f       	adc	r25, r25
    217c:	f1 cf       	rjmp	.-30     	; 0x2160 <__fp_splitA+0xc>
    217e:	86 95       	lsr	r24
    2180:	71 05       	cpc	r23, r1
    2182:	61 05       	cpc	r22, r1
    2184:	08 94       	sec
    2186:	08 95       	ret

00002188 <__fp_zero>:
    2188:	e8 94       	clt

0000218a <__fp_szero>:
    218a:	bb 27       	eor	r27, r27
    218c:	66 27       	eor	r22, r22
    218e:	77 27       	eor	r23, r23
    2190:	cb 01       	movw	r24, r22
    2192:	97 f9       	bld	r25, 7
    2194:	08 95       	ret

00002196 <__gesf2>:
    2196:	0e 94 56 10 	call	0x20ac	; 0x20ac <__fp_cmp>
    219a:	08 f4       	brcc	.+2      	; 0x219e <__gesf2+0x8>
    219c:	8f ef       	ldi	r24, 0xFF	; 255
    219e:	08 95       	ret

000021a0 <__mulsf3>:
    21a0:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3x>
    21a4:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__fp_round>
    21a8:	0e 94 83 10 	call	0x2106	; 0x2106 <__fp_pscA>
    21ac:	38 f0       	brcs	.+14     	; 0x21bc <__mulsf3+0x1c>
    21ae:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fp_pscB>
    21b2:	20 f0       	brcs	.+8      	; 0x21bc <__mulsf3+0x1c>
    21b4:	95 23       	and	r25, r21
    21b6:	11 f0       	breq	.+4      	; 0x21bc <__mulsf3+0x1c>
    21b8:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__fp_inf>
    21bc:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__fp_nan>
    21c0:	11 24       	eor	r1, r1
    21c2:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__fp_szero>

000021c6 <__mulsf3x>:
    21c6:	0e 94 a2 10 	call	0x2144	; 0x2144 <__fp_split3>
    21ca:	70 f3       	brcs	.-36     	; 0x21a8 <__mulsf3+0x8>

000021cc <__mulsf3_pse>:
    21cc:	95 9f       	mul	r25, r21
    21ce:	c1 f3       	breq	.-16     	; 0x21c0 <__mulsf3+0x20>
    21d0:	95 0f       	add	r25, r21
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	55 1f       	adc	r21, r21
    21d6:	62 9f       	mul	r22, r18
    21d8:	f0 01       	movw	r30, r0
    21da:	72 9f       	mul	r23, r18
    21dc:	bb 27       	eor	r27, r27
    21de:	f0 0d       	add	r31, r0
    21e0:	b1 1d       	adc	r27, r1
    21e2:	63 9f       	mul	r22, r19
    21e4:	aa 27       	eor	r26, r26
    21e6:	f0 0d       	add	r31, r0
    21e8:	b1 1d       	adc	r27, r1
    21ea:	aa 1f       	adc	r26, r26
    21ec:	64 9f       	mul	r22, r20
    21ee:	66 27       	eor	r22, r22
    21f0:	b0 0d       	add	r27, r0
    21f2:	a1 1d       	adc	r26, r1
    21f4:	66 1f       	adc	r22, r22
    21f6:	82 9f       	mul	r24, r18
    21f8:	22 27       	eor	r18, r18
    21fa:	b0 0d       	add	r27, r0
    21fc:	a1 1d       	adc	r26, r1
    21fe:	62 1f       	adc	r22, r18
    2200:	73 9f       	mul	r23, r19
    2202:	b0 0d       	add	r27, r0
    2204:	a1 1d       	adc	r26, r1
    2206:	62 1f       	adc	r22, r18
    2208:	83 9f       	mul	r24, r19
    220a:	a0 0d       	add	r26, r0
    220c:	61 1d       	adc	r22, r1
    220e:	22 1f       	adc	r18, r18
    2210:	74 9f       	mul	r23, r20
    2212:	33 27       	eor	r19, r19
    2214:	a0 0d       	add	r26, r0
    2216:	61 1d       	adc	r22, r1
    2218:	23 1f       	adc	r18, r19
    221a:	84 9f       	mul	r24, r20
    221c:	60 0d       	add	r22, r0
    221e:	21 1d       	adc	r18, r1
    2220:	82 2f       	mov	r24, r18
    2222:	76 2f       	mov	r23, r22
    2224:	6a 2f       	mov	r22, r26
    2226:	11 24       	eor	r1, r1
    2228:	9f 57       	subi	r25, 0x7F	; 127
    222a:	50 40       	sbci	r21, 0x00	; 0
    222c:	9a f0       	brmi	.+38     	; 0x2254 <__mulsf3_pse+0x88>
    222e:	f1 f0       	breq	.+60     	; 0x226c <__mulsf3_pse+0xa0>
    2230:	88 23       	and	r24, r24
    2232:	4a f0       	brmi	.+18     	; 0x2246 <__mulsf3_pse+0x7a>
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	bb 1f       	adc	r27, r27
    223a:	66 1f       	adc	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	91 50       	subi	r25, 0x01	; 1
    2242:	50 40       	sbci	r21, 0x00	; 0
    2244:	a9 f7       	brne	.-22     	; 0x2230 <__mulsf3_pse+0x64>
    2246:	9e 3f       	cpi	r25, 0xFE	; 254
    2248:	51 05       	cpc	r21, r1
    224a:	80 f0       	brcs	.+32     	; 0x226c <__mulsf3_pse+0xa0>
    224c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__fp_inf>
    2250:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__fp_szero>
    2254:	5f 3f       	cpi	r21, 0xFF	; 255
    2256:	e4 f3       	brlt	.-8      	; 0x2250 <__mulsf3_pse+0x84>
    2258:	98 3e       	cpi	r25, 0xE8	; 232
    225a:	d4 f3       	brlt	.-12     	; 0x2250 <__mulsf3_pse+0x84>
    225c:	86 95       	lsr	r24
    225e:	77 95       	ror	r23
    2260:	67 95       	ror	r22
    2262:	b7 95       	ror	r27
    2264:	f7 95       	ror	r31
    2266:	e7 95       	ror	r30
    2268:	9f 5f       	subi	r25, 0xFF	; 255
    226a:	c1 f7       	brne	.-16     	; 0x225c <__mulsf3_pse+0x90>
    226c:	fe 2b       	or	r31, r30
    226e:	88 0f       	add	r24, r24
    2270:	91 1d       	adc	r25, r1
    2272:	96 95       	lsr	r25
    2274:	87 95       	ror	r24
    2276:	97 f9       	bld	r25, 7
    2278:	08 95       	ret

0000227a <sprintf>:
    227a:	ae e0       	ldi	r26, 0x0E	; 14
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e3 e4       	ldi	r30, 0x43	; 67
    2280:	f1 e1       	ldi	r31, 0x11	; 17
    2282:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__prologue_saves__+0x1c>
    2286:	0d 89       	ldd	r16, Y+21	; 0x15
    2288:	1e 89       	ldd	r17, Y+22	; 0x16
    228a:	86 e0       	ldi	r24, 0x06	; 6
    228c:	8c 83       	std	Y+4, r24	; 0x04
    228e:	1a 83       	std	Y+2, r17	; 0x02
    2290:	09 83       	std	Y+1, r16	; 0x01
    2292:	8f ef       	ldi	r24, 0xFF	; 255
    2294:	9f e7       	ldi	r25, 0x7F	; 127
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
    229a:	ae 01       	movw	r20, r28
    229c:	47 5e       	subi	r20, 0xE7	; 231
    229e:	5f 4f       	sbci	r21, 0xFF	; 255
    22a0:	6f 89       	ldd	r22, Y+23	; 0x17
    22a2:	78 8d       	ldd	r23, Y+24	; 0x18
    22a4:	ce 01       	movw	r24, r28
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	0e 94 5f 11 	call	0x22be	; 0x22be <vfprintf>
    22ac:	ef 81       	ldd	r30, Y+7	; 0x07
    22ae:	f8 85       	ldd	r31, Y+8	; 0x08
    22b0:	e0 0f       	add	r30, r16
    22b2:	f1 1f       	adc	r31, r17
    22b4:	10 82       	st	Z, r1
    22b6:	2e 96       	adiw	r28, 0x0e	; 14
    22b8:	e4 e0       	ldi	r30, 0x04	; 4
    22ba:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__epilogue_restores__+0x1c>

000022be <vfprintf>:
    22be:	ab e0       	ldi	r26, 0x0B	; 11
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e6       	ldi	r30, 0x65	; 101
    22c4:	f1 e1       	ldi	r31, 0x11	; 17
    22c6:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__prologue_saves__>
    22ca:	6c 01       	movw	r12, r24
    22cc:	7b 01       	movw	r14, r22
    22ce:	8a 01       	movw	r16, r20
    22d0:	fc 01       	movw	r30, r24
    22d2:	17 82       	std	Z+7, r1	; 0x07
    22d4:	16 82       	std	Z+6, r1	; 0x06
    22d6:	83 81       	ldd	r24, Z+3	; 0x03
    22d8:	81 ff       	sbrs	r24, 1
    22da:	cc c1       	rjmp	.+920    	; 0x2674 <vfprintf+0x3b6>
    22dc:	ce 01       	movw	r24, r28
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	3c 01       	movw	r6, r24
    22e2:	f6 01       	movw	r30, r12
    22e4:	93 81       	ldd	r25, Z+3	; 0x03
    22e6:	f7 01       	movw	r30, r14
    22e8:	93 fd       	sbrc	r25, 3
    22ea:	85 91       	lpm	r24, Z+
    22ec:	93 ff       	sbrs	r25, 3
    22ee:	81 91       	ld	r24, Z+
    22f0:	7f 01       	movw	r14, r30
    22f2:	88 23       	and	r24, r24
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <vfprintf+0x3a>
    22f6:	ba c1       	rjmp	.+884    	; 0x266c <vfprintf+0x3ae>
    22f8:	85 32       	cpi	r24, 0x25	; 37
    22fa:	39 f4       	brne	.+14     	; 0x230a <vfprintf+0x4c>
    22fc:	93 fd       	sbrc	r25, 3
    22fe:	85 91       	lpm	r24, Z+
    2300:	93 ff       	sbrs	r25, 3
    2302:	81 91       	ld	r24, Z+
    2304:	7f 01       	movw	r14, r30
    2306:	85 32       	cpi	r24, 0x25	; 37
    2308:	29 f4       	brne	.+10     	; 0x2314 <vfprintf+0x56>
    230a:	b6 01       	movw	r22, r12
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    2312:	e7 cf       	rjmp	.-50     	; 0x22e2 <vfprintf+0x24>
    2314:	91 2c       	mov	r9, r1
    2316:	21 2c       	mov	r2, r1
    2318:	31 2c       	mov	r3, r1
    231a:	ff e1       	ldi	r31, 0x1F	; 31
    231c:	f3 15       	cp	r31, r3
    231e:	d8 f0       	brcs	.+54     	; 0x2356 <vfprintf+0x98>
    2320:	8b 32       	cpi	r24, 0x2B	; 43
    2322:	79 f0       	breq	.+30     	; 0x2342 <vfprintf+0x84>
    2324:	38 f4       	brcc	.+14     	; 0x2334 <vfprintf+0x76>
    2326:	80 32       	cpi	r24, 0x20	; 32
    2328:	79 f0       	breq	.+30     	; 0x2348 <vfprintf+0x8a>
    232a:	83 32       	cpi	r24, 0x23	; 35
    232c:	a1 f4       	brne	.+40     	; 0x2356 <vfprintf+0x98>
    232e:	23 2d       	mov	r18, r3
    2330:	20 61       	ori	r18, 0x10	; 16
    2332:	1d c0       	rjmp	.+58     	; 0x236e <vfprintf+0xb0>
    2334:	8d 32       	cpi	r24, 0x2D	; 45
    2336:	61 f0       	breq	.+24     	; 0x2350 <vfprintf+0x92>
    2338:	80 33       	cpi	r24, 0x30	; 48
    233a:	69 f4       	brne	.+26     	; 0x2356 <vfprintf+0x98>
    233c:	23 2d       	mov	r18, r3
    233e:	21 60       	ori	r18, 0x01	; 1
    2340:	16 c0       	rjmp	.+44     	; 0x236e <vfprintf+0xb0>
    2342:	83 2d       	mov	r24, r3
    2344:	82 60       	ori	r24, 0x02	; 2
    2346:	38 2e       	mov	r3, r24
    2348:	e3 2d       	mov	r30, r3
    234a:	e4 60       	ori	r30, 0x04	; 4
    234c:	3e 2e       	mov	r3, r30
    234e:	2a c0       	rjmp	.+84     	; 0x23a4 <vfprintf+0xe6>
    2350:	f3 2d       	mov	r31, r3
    2352:	f8 60       	ori	r31, 0x08	; 8
    2354:	1d c0       	rjmp	.+58     	; 0x2390 <vfprintf+0xd2>
    2356:	37 fc       	sbrc	r3, 7
    2358:	2d c0       	rjmp	.+90     	; 0x23b4 <vfprintf+0xf6>
    235a:	20 ed       	ldi	r18, 0xD0	; 208
    235c:	28 0f       	add	r18, r24
    235e:	2a 30       	cpi	r18, 0x0A	; 10
    2360:	40 f0       	brcs	.+16     	; 0x2372 <vfprintf+0xb4>
    2362:	8e 32       	cpi	r24, 0x2E	; 46
    2364:	b9 f4       	brne	.+46     	; 0x2394 <vfprintf+0xd6>
    2366:	36 fc       	sbrc	r3, 6
    2368:	81 c1       	rjmp	.+770    	; 0x266c <vfprintf+0x3ae>
    236a:	23 2d       	mov	r18, r3
    236c:	20 64       	ori	r18, 0x40	; 64
    236e:	32 2e       	mov	r3, r18
    2370:	19 c0       	rjmp	.+50     	; 0x23a4 <vfprintf+0xe6>
    2372:	36 fe       	sbrs	r3, 6
    2374:	06 c0       	rjmp	.+12     	; 0x2382 <vfprintf+0xc4>
    2376:	8a e0       	ldi	r24, 0x0A	; 10
    2378:	98 9e       	mul	r9, r24
    237a:	20 0d       	add	r18, r0
    237c:	11 24       	eor	r1, r1
    237e:	92 2e       	mov	r9, r18
    2380:	11 c0       	rjmp	.+34     	; 0x23a4 <vfprintf+0xe6>
    2382:	ea e0       	ldi	r30, 0x0A	; 10
    2384:	2e 9e       	mul	r2, r30
    2386:	20 0d       	add	r18, r0
    2388:	11 24       	eor	r1, r1
    238a:	22 2e       	mov	r2, r18
    238c:	f3 2d       	mov	r31, r3
    238e:	f0 62       	ori	r31, 0x20	; 32
    2390:	3f 2e       	mov	r3, r31
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <vfprintf+0xe6>
    2394:	8c 36       	cpi	r24, 0x6C	; 108
    2396:	21 f4       	brne	.+8      	; 0x23a0 <vfprintf+0xe2>
    2398:	83 2d       	mov	r24, r3
    239a:	80 68       	ori	r24, 0x80	; 128
    239c:	38 2e       	mov	r3, r24
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <vfprintf+0xe6>
    23a0:	88 36       	cpi	r24, 0x68	; 104
    23a2:	41 f4       	brne	.+16     	; 0x23b4 <vfprintf+0xf6>
    23a4:	f7 01       	movw	r30, r14
    23a6:	93 fd       	sbrc	r25, 3
    23a8:	85 91       	lpm	r24, Z+
    23aa:	93 ff       	sbrs	r25, 3
    23ac:	81 91       	ld	r24, Z+
    23ae:	7f 01       	movw	r14, r30
    23b0:	81 11       	cpse	r24, r1
    23b2:	b3 cf       	rjmp	.-154    	; 0x231a <vfprintf+0x5c>
    23b4:	98 2f       	mov	r25, r24
    23b6:	9f 7d       	andi	r25, 0xDF	; 223
    23b8:	95 54       	subi	r25, 0x45	; 69
    23ba:	93 30       	cpi	r25, 0x03	; 3
    23bc:	28 f4       	brcc	.+10     	; 0x23c8 <vfprintf+0x10a>
    23be:	0c 5f       	subi	r16, 0xFC	; 252
    23c0:	1f 4f       	sbci	r17, 0xFF	; 255
    23c2:	9f e3       	ldi	r25, 0x3F	; 63
    23c4:	99 83       	std	Y+1, r25	; 0x01
    23c6:	0d c0       	rjmp	.+26     	; 0x23e2 <vfprintf+0x124>
    23c8:	83 36       	cpi	r24, 0x63	; 99
    23ca:	31 f0       	breq	.+12     	; 0x23d8 <vfprintf+0x11a>
    23cc:	83 37       	cpi	r24, 0x73	; 115
    23ce:	71 f0       	breq	.+28     	; 0x23ec <vfprintf+0x12e>
    23d0:	83 35       	cpi	r24, 0x53	; 83
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <vfprintf+0x118>
    23d4:	59 c0       	rjmp	.+178    	; 0x2488 <vfprintf+0x1ca>
    23d6:	21 c0       	rjmp	.+66     	; 0x241a <vfprintf+0x15c>
    23d8:	f8 01       	movw	r30, r16
    23da:	80 81       	ld	r24, Z
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	0e 5f       	subi	r16, 0xFE	; 254
    23e0:	1f 4f       	sbci	r17, 0xFF	; 255
    23e2:	88 24       	eor	r8, r8
    23e4:	83 94       	inc	r8
    23e6:	91 2c       	mov	r9, r1
    23e8:	53 01       	movw	r10, r6
    23ea:	13 c0       	rjmp	.+38     	; 0x2412 <vfprintf+0x154>
    23ec:	28 01       	movw	r4, r16
    23ee:	f2 e0       	ldi	r31, 0x02	; 2
    23f0:	4f 0e       	add	r4, r31
    23f2:	51 1c       	adc	r5, r1
    23f4:	f8 01       	movw	r30, r16
    23f6:	a0 80       	ld	r10, Z
    23f8:	b1 80       	ldd	r11, Z+1	; 0x01
    23fa:	36 fe       	sbrs	r3, 6
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <vfprintf+0x146>
    23fe:	69 2d       	mov	r22, r9
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <vfprintf+0x14a>
    2404:	6f ef       	ldi	r22, 0xFF	; 255
    2406:	7f ef       	ldi	r23, 0xFF	; 255
    2408:	c5 01       	movw	r24, r10
    240a:	0e 94 4b 13 	call	0x2696	; 0x2696 <strnlen>
    240e:	4c 01       	movw	r8, r24
    2410:	82 01       	movw	r16, r4
    2412:	f3 2d       	mov	r31, r3
    2414:	ff 77       	andi	r31, 0x7F	; 127
    2416:	3f 2e       	mov	r3, r31
    2418:	16 c0       	rjmp	.+44     	; 0x2446 <vfprintf+0x188>
    241a:	28 01       	movw	r4, r16
    241c:	22 e0       	ldi	r18, 0x02	; 2
    241e:	42 0e       	add	r4, r18
    2420:	51 1c       	adc	r5, r1
    2422:	f8 01       	movw	r30, r16
    2424:	a0 80       	ld	r10, Z
    2426:	b1 80       	ldd	r11, Z+1	; 0x01
    2428:	36 fe       	sbrs	r3, 6
    242a:	03 c0       	rjmp	.+6      	; 0x2432 <vfprintf+0x174>
    242c:	69 2d       	mov	r22, r9
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <vfprintf+0x178>
    2432:	6f ef       	ldi	r22, 0xFF	; 255
    2434:	7f ef       	ldi	r23, 0xFF	; 255
    2436:	c5 01       	movw	r24, r10
    2438:	0e 94 40 13 	call	0x2680	; 0x2680 <strnlen_P>
    243c:	4c 01       	movw	r8, r24
    243e:	f3 2d       	mov	r31, r3
    2440:	f0 68       	ori	r31, 0x80	; 128
    2442:	3f 2e       	mov	r3, r31
    2444:	82 01       	movw	r16, r4
    2446:	33 fc       	sbrc	r3, 3
    2448:	1b c0       	rjmp	.+54     	; 0x2480 <vfprintf+0x1c2>
    244a:	82 2d       	mov	r24, r2
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	88 16       	cp	r8, r24
    2450:	99 06       	cpc	r9, r25
    2452:	b0 f4       	brcc	.+44     	; 0x2480 <vfprintf+0x1c2>
    2454:	b6 01       	movw	r22, r12
    2456:	80 e2       	ldi	r24, 0x20	; 32
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    245e:	2a 94       	dec	r2
    2460:	f4 cf       	rjmp	.-24     	; 0x244a <vfprintf+0x18c>
    2462:	f5 01       	movw	r30, r10
    2464:	37 fc       	sbrc	r3, 7
    2466:	85 91       	lpm	r24, Z+
    2468:	37 fe       	sbrs	r3, 7
    246a:	81 91       	ld	r24, Z+
    246c:	5f 01       	movw	r10, r30
    246e:	b6 01       	movw	r22, r12
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    2476:	21 10       	cpse	r2, r1
    2478:	2a 94       	dec	r2
    247a:	21 e0       	ldi	r18, 0x01	; 1
    247c:	82 1a       	sub	r8, r18
    247e:	91 08       	sbc	r9, r1
    2480:	81 14       	cp	r8, r1
    2482:	91 04       	cpc	r9, r1
    2484:	71 f7       	brne	.-36     	; 0x2462 <vfprintf+0x1a4>
    2486:	e8 c0       	rjmp	.+464    	; 0x2658 <vfprintf+0x39a>
    2488:	84 36       	cpi	r24, 0x64	; 100
    248a:	11 f0       	breq	.+4      	; 0x2490 <vfprintf+0x1d2>
    248c:	89 36       	cpi	r24, 0x69	; 105
    248e:	41 f5       	brne	.+80     	; 0x24e0 <vfprintf+0x222>
    2490:	f8 01       	movw	r30, r16
    2492:	37 fe       	sbrs	r3, 7
    2494:	07 c0       	rjmp	.+14     	; 0x24a4 <vfprintf+0x1e6>
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	0c 5f       	subi	r16, 0xFC	; 252
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	08 c0       	rjmp	.+16     	; 0x24b4 <vfprintf+0x1f6>
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	07 2e       	mov	r0, r23
    24aa:	00 0c       	add	r0, r0
    24ac:	88 0b       	sbc	r24, r24
    24ae:	99 0b       	sbc	r25, r25
    24b0:	0e 5f       	subi	r16, 0xFE	; 254
    24b2:	1f 4f       	sbci	r17, 0xFF	; 255
    24b4:	f3 2d       	mov	r31, r3
    24b6:	ff 76       	andi	r31, 0x6F	; 111
    24b8:	3f 2e       	mov	r3, r31
    24ba:	97 ff       	sbrs	r25, 7
    24bc:	09 c0       	rjmp	.+18     	; 0x24d0 <vfprintf+0x212>
    24be:	90 95       	com	r25
    24c0:	80 95       	com	r24
    24c2:	70 95       	com	r23
    24c4:	61 95       	neg	r22
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	f0 68       	ori	r31, 0x80	; 128
    24ce:	3f 2e       	mov	r3, r31
    24d0:	2a e0       	ldi	r18, 0x0A	; 10
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	a3 01       	movw	r20, r6
    24d6:	0e 94 92 13 	call	0x2724	; 0x2724 <__ultoa_invert>
    24da:	88 2e       	mov	r8, r24
    24dc:	86 18       	sub	r8, r6
    24de:	45 c0       	rjmp	.+138    	; 0x256a <vfprintf+0x2ac>
    24e0:	85 37       	cpi	r24, 0x75	; 117
    24e2:	31 f4       	brne	.+12     	; 0x24f0 <vfprintf+0x232>
    24e4:	23 2d       	mov	r18, r3
    24e6:	2f 7e       	andi	r18, 0xEF	; 239
    24e8:	b2 2e       	mov	r11, r18
    24ea:	2a e0       	ldi	r18, 0x0A	; 10
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	25 c0       	rjmp	.+74     	; 0x253a <vfprintf+0x27c>
    24f0:	93 2d       	mov	r25, r3
    24f2:	99 7f       	andi	r25, 0xF9	; 249
    24f4:	b9 2e       	mov	r11, r25
    24f6:	8f 36       	cpi	r24, 0x6F	; 111
    24f8:	c1 f0       	breq	.+48     	; 0x252a <vfprintf+0x26c>
    24fa:	18 f4       	brcc	.+6      	; 0x2502 <vfprintf+0x244>
    24fc:	88 35       	cpi	r24, 0x58	; 88
    24fe:	79 f0       	breq	.+30     	; 0x251e <vfprintf+0x260>
    2500:	b5 c0       	rjmp	.+362    	; 0x266c <vfprintf+0x3ae>
    2502:	80 37       	cpi	r24, 0x70	; 112
    2504:	19 f0       	breq	.+6      	; 0x250c <vfprintf+0x24e>
    2506:	88 37       	cpi	r24, 0x78	; 120
    2508:	21 f0       	breq	.+8      	; 0x2512 <vfprintf+0x254>
    250a:	b0 c0       	rjmp	.+352    	; 0x266c <vfprintf+0x3ae>
    250c:	e9 2f       	mov	r30, r25
    250e:	e0 61       	ori	r30, 0x10	; 16
    2510:	be 2e       	mov	r11, r30
    2512:	b4 fe       	sbrs	r11, 4
    2514:	0d c0       	rjmp	.+26     	; 0x2530 <vfprintf+0x272>
    2516:	fb 2d       	mov	r31, r11
    2518:	f4 60       	ori	r31, 0x04	; 4
    251a:	bf 2e       	mov	r11, r31
    251c:	09 c0       	rjmp	.+18     	; 0x2530 <vfprintf+0x272>
    251e:	34 fe       	sbrs	r3, 4
    2520:	0a c0       	rjmp	.+20     	; 0x2536 <vfprintf+0x278>
    2522:	29 2f       	mov	r18, r25
    2524:	26 60       	ori	r18, 0x06	; 6
    2526:	b2 2e       	mov	r11, r18
    2528:	06 c0       	rjmp	.+12     	; 0x2536 <vfprintf+0x278>
    252a:	28 e0       	ldi	r18, 0x08	; 8
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	05 c0       	rjmp	.+10     	; 0x253a <vfprintf+0x27c>
    2530:	20 e1       	ldi	r18, 0x10	; 16
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	02 c0       	rjmp	.+4      	; 0x253a <vfprintf+0x27c>
    2536:	20 e1       	ldi	r18, 0x10	; 16
    2538:	32 e0       	ldi	r19, 0x02	; 2
    253a:	f8 01       	movw	r30, r16
    253c:	b7 fe       	sbrs	r11, 7
    253e:	07 c0       	rjmp	.+14     	; 0x254e <vfprintf+0x290>
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	0c 5f       	subi	r16, 0xFC	; 252
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	06 c0       	rjmp	.+12     	; 0x255a <vfprintf+0x29c>
    254e:	60 81       	ld	r22, Z
    2550:	71 81       	ldd	r23, Z+1	; 0x01
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	0e 5f       	subi	r16, 0xFE	; 254
    2558:	1f 4f       	sbci	r17, 0xFF	; 255
    255a:	a3 01       	movw	r20, r6
    255c:	0e 94 92 13 	call	0x2724	; 0x2724 <__ultoa_invert>
    2560:	88 2e       	mov	r8, r24
    2562:	86 18       	sub	r8, r6
    2564:	fb 2d       	mov	r31, r11
    2566:	ff 77       	andi	r31, 0x7F	; 127
    2568:	3f 2e       	mov	r3, r31
    256a:	36 fe       	sbrs	r3, 6
    256c:	0d c0       	rjmp	.+26     	; 0x2588 <vfprintf+0x2ca>
    256e:	23 2d       	mov	r18, r3
    2570:	2e 7f       	andi	r18, 0xFE	; 254
    2572:	a2 2e       	mov	r10, r18
    2574:	89 14       	cp	r8, r9
    2576:	58 f4       	brcc	.+22     	; 0x258e <vfprintf+0x2d0>
    2578:	34 fe       	sbrs	r3, 4
    257a:	0b c0       	rjmp	.+22     	; 0x2592 <vfprintf+0x2d4>
    257c:	32 fc       	sbrc	r3, 2
    257e:	09 c0       	rjmp	.+18     	; 0x2592 <vfprintf+0x2d4>
    2580:	83 2d       	mov	r24, r3
    2582:	8e 7e       	andi	r24, 0xEE	; 238
    2584:	a8 2e       	mov	r10, r24
    2586:	05 c0       	rjmp	.+10     	; 0x2592 <vfprintf+0x2d4>
    2588:	b8 2c       	mov	r11, r8
    258a:	a3 2c       	mov	r10, r3
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <vfprintf+0x2d6>
    258e:	b8 2c       	mov	r11, r8
    2590:	01 c0       	rjmp	.+2      	; 0x2594 <vfprintf+0x2d6>
    2592:	b9 2c       	mov	r11, r9
    2594:	a4 fe       	sbrs	r10, 4
    2596:	0f c0       	rjmp	.+30     	; 0x25b6 <vfprintf+0x2f8>
    2598:	fe 01       	movw	r30, r28
    259a:	e8 0d       	add	r30, r8
    259c:	f1 1d       	adc	r31, r1
    259e:	80 81       	ld	r24, Z
    25a0:	80 33       	cpi	r24, 0x30	; 48
    25a2:	21 f4       	brne	.+8      	; 0x25ac <vfprintf+0x2ee>
    25a4:	9a 2d       	mov	r25, r10
    25a6:	99 7e       	andi	r25, 0xE9	; 233
    25a8:	a9 2e       	mov	r10, r25
    25aa:	09 c0       	rjmp	.+18     	; 0x25be <vfprintf+0x300>
    25ac:	a2 fe       	sbrs	r10, 2
    25ae:	06 c0       	rjmp	.+12     	; 0x25bc <vfprintf+0x2fe>
    25b0:	b3 94       	inc	r11
    25b2:	b3 94       	inc	r11
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <vfprintf+0x300>
    25b6:	8a 2d       	mov	r24, r10
    25b8:	86 78       	andi	r24, 0x86	; 134
    25ba:	09 f0       	breq	.+2      	; 0x25be <vfprintf+0x300>
    25bc:	b3 94       	inc	r11
    25be:	a3 fc       	sbrc	r10, 3
    25c0:	11 c0       	rjmp	.+34     	; 0x25e4 <vfprintf+0x326>
    25c2:	a0 fe       	sbrs	r10, 0
    25c4:	06 c0       	rjmp	.+12     	; 0x25d2 <vfprintf+0x314>
    25c6:	b2 14       	cp	r11, r2
    25c8:	88 f4       	brcc	.+34     	; 0x25ec <vfprintf+0x32e>
    25ca:	28 0c       	add	r2, r8
    25cc:	92 2c       	mov	r9, r2
    25ce:	9b 18       	sub	r9, r11
    25d0:	0e c0       	rjmp	.+28     	; 0x25ee <vfprintf+0x330>
    25d2:	b2 14       	cp	r11, r2
    25d4:	60 f4       	brcc	.+24     	; 0x25ee <vfprintf+0x330>
    25d6:	b6 01       	movw	r22, r12
    25d8:	80 e2       	ldi	r24, 0x20	; 32
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    25e0:	b3 94       	inc	r11
    25e2:	f7 cf       	rjmp	.-18     	; 0x25d2 <vfprintf+0x314>
    25e4:	b2 14       	cp	r11, r2
    25e6:	18 f4       	brcc	.+6      	; 0x25ee <vfprintf+0x330>
    25e8:	2b 18       	sub	r2, r11
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <vfprintf+0x332>
    25ec:	98 2c       	mov	r9, r8
    25ee:	21 2c       	mov	r2, r1
    25f0:	a4 fe       	sbrs	r10, 4
    25f2:	10 c0       	rjmp	.+32     	; 0x2614 <vfprintf+0x356>
    25f4:	b6 01       	movw	r22, r12
    25f6:	80 e3       	ldi	r24, 0x30	; 48
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    25fe:	a2 fe       	sbrs	r10, 2
    2600:	17 c0       	rjmp	.+46     	; 0x2630 <vfprintf+0x372>
    2602:	a1 fc       	sbrc	r10, 1
    2604:	03 c0       	rjmp	.+6      	; 0x260c <vfprintf+0x34e>
    2606:	88 e7       	ldi	r24, 0x78	; 120
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <vfprintf+0x352>
    260c:	88 e5       	ldi	r24, 0x58	; 88
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	b6 01       	movw	r22, r12
    2612:	0c c0       	rjmp	.+24     	; 0x262c <vfprintf+0x36e>
    2614:	8a 2d       	mov	r24, r10
    2616:	86 78       	andi	r24, 0x86	; 134
    2618:	59 f0       	breq	.+22     	; 0x2630 <vfprintf+0x372>
    261a:	a1 fe       	sbrs	r10, 1
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <vfprintf+0x364>
    261e:	8b e2       	ldi	r24, 0x2B	; 43
    2620:	01 c0       	rjmp	.+2      	; 0x2624 <vfprintf+0x366>
    2622:	80 e2       	ldi	r24, 0x20	; 32
    2624:	a7 fc       	sbrc	r10, 7
    2626:	8d e2       	ldi	r24, 0x2D	; 45
    2628:	b6 01       	movw	r22, r12
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    2630:	89 14       	cp	r8, r9
    2632:	38 f4       	brcc	.+14     	; 0x2642 <vfprintf+0x384>
    2634:	b6 01       	movw	r22, r12
    2636:	80 e3       	ldi	r24, 0x30	; 48
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    263e:	9a 94       	dec	r9
    2640:	f7 cf       	rjmp	.-18     	; 0x2630 <vfprintf+0x372>
    2642:	8a 94       	dec	r8
    2644:	f3 01       	movw	r30, r6
    2646:	e8 0d       	add	r30, r8
    2648:	f1 1d       	adc	r31, r1
    264a:	80 81       	ld	r24, Z
    264c:	b6 01       	movw	r22, r12
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    2654:	81 10       	cpse	r8, r1
    2656:	f5 cf       	rjmp	.-22     	; 0x2642 <vfprintf+0x384>
    2658:	22 20       	and	r2, r2
    265a:	09 f4       	brne	.+2      	; 0x265e <vfprintf+0x3a0>
    265c:	42 ce       	rjmp	.-892    	; 0x22e2 <vfprintf+0x24>
    265e:	b6 01       	movw	r22, r12
    2660:	80 e2       	ldi	r24, 0x20	; 32
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	0e 94 56 13 	call	0x26ac	; 0x26ac <fputc>
    2668:	2a 94       	dec	r2
    266a:	f6 cf       	rjmp	.-20     	; 0x2658 <vfprintf+0x39a>
    266c:	f6 01       	movw	r30, r12
    266e:	86 81       	ldd	r24, Z+6	; 0x06
    2670:	97 81       	ldd	r25, Z+7	; 0x07
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <vfprintf+0x3ba>
    2674:	8f ef       	ldi	r24, 0xFF	; 255
    2676:	9f ef       	ldi	r25, 0xFF	; 255
    2678:	2b 96       	adiw	r28, 0x0b	; 11
    267a:	e2 e1       	ldi	r30, 0x12	; 18
    267c:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__epilogue_restores__>

00002680 <strnlen_P>:
    2680:	fc 01       	movw	r30, r24
    2682:	05 90       	lpm	r0, Z+
    2684:	61 50       	subi	r22, 0x01	; 1
    2686:	70 40       	sbci	r23, 0x00	; 0
    2688:	01 10       	cpse	r0, r1
    268a:	d8 f7       	brcc	.-10     	; 0x2682 <strnlen_P+0x2>
    268c:	80 95       	com	r24
    268e:	90 95       	com	r25
    2690:	8e 0f       	add	r24, r30
    2692:	9f 1f       	adc	r25, r31
    2694:	08 95       	ret

00002696 <strnlen>:
    2696:	fc 01       	movw	r30, r24
    2698:	61 50       	subi	r22, 0x01	; 1
    269a:	70 40       	sbci	r23, 0x00	; 0
    269c:	01 90       	ld	r0, Z+
    269e:	01 10       	cpse	r0, r1
    26a0:	d8 f7       	brcc	.-10     	; 0x2698 <strnlen+0x2>
    26a2:	80 95       	com	r24
    26a4:	90 95       	com	r25
    26a6:	8e 0f       	add	r24, r30
    26a8:	9f 1f       	adc	r25, r31
    26aa:	08 95       	ret

000026ac <fputc>:
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	fb 01       	movw	r30, r22
    26b6:	23 81       	ldd	r18, Z+3	; 0x03
    26b8:	21 fd       	sbrc	r18, 1
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <fputc+0x16>
    26bc:	8f ef       	ldi	r24, 0xFF	; 255
    26be:	9f ef       	ldi	r25, 0xFF	; 255
    26c0:	2c c0       	rjmp	.+88     	; 0x271a <fputc+0x6e>
    26c2:	22 ff       	sbrs	r18, 2
    26c4:	16 c0       	rjmp	.+44     	; 0x26f2 <fputc+0x46>
    26c6:	46 81       	ldd	r20, Z+6	; 0x06
    26c8:	57 81       	ldd	r21, Z+7	; 0x07
    26ca:	24 81       	ldd	r18, Z+4	; 0x04
    26cc:	35 81       	ldd	r19, Z+5	; 0x05
    26ce:	42 17       	cp	r20, r18
    26d0:	53 07       	cpc	r21, r19
    26d2:	44 f4       	brge	.+16     	; 0x26e4 <fputc+0x38>
    26d4:	a0 81       	ld	r26, Z
    26d6:	b1 81       	ldd	r27, Z+1	; 0x01
    26d8:	9d 01       	movw	r18, r26
    26da:	2f 5f       	subi	r18, 0xFF	; 255
    26dc:	3f 4f       	sbci	r19, 0xFF	; 255
    26de:	31 83       	std	Z+1, r19	; 0x01
    26e0:	20 83       	st	Z, r18
    26e2:	8c 93       	st	X, r24
    26e4:	26 81       	ldd	r18, Z+6	; 0x06
    26e6:	37 81       	ldd	r19, Z+7	; 0x07
    26e8:	2f 5f       	subi	r18, 0xFF	; 255
    26ea:	3f 4f       	sbci	r19, 0xFF	; 255
    26ec:	37 83       	std	Z+7, r19	; 0x07
    26ee:	26 83       	std	Z+6, r18	; 0x06
    26f0:	14 c0       	rjmp	.+40     	; 0x271a <fputc+0x6e>
    26f2:	8b 01       	movw	r16, r22
    26f4:	ec 01       	movw	r28, r24
    26f6:	fb 01       	movw	r30, r22
    26f8:	00 84       	ldd	r0, Z+8	; 0x08
    26fa:	f1 85       	ldd	r31, Z+9	; 0x09
    26fc:	e0 2d       	mov	r30, r0
    26fe:	09 95       	icall
    2700:	89 2b       	or	r24, r25
    2702:	e1 f6       	brne	.-72     	; 0x26bc <fputc+0x10>
    2704:	d8 01       	movw	r26, r16
    2706:	16 96       	adiw	r26, 0x06	; 6
    2708:	8d 91       	ld	r24, X+
    270a:	9c 91       	ld	r25, X
    270c:	17 97       	sbiw	r26, 0x07	; 7
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	17 96       	adiw	r26, 0x07	; 7
    2712:	9c 93       	st	X, r25
    2714:	8e 93       	st	-X, r24
    2716:	16 97       	sbiw	r26, 0x06	; 6
    2718:	ce 01       	movw	r24, r28
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	08 95       	ret

00002724 <__ultoa_invert>:
    2724:	fa 01       	movw	r30, r20
    2726:	aa 27       	eor	r26, r26
    2728:	28 30       	cpi	r18, 0x08	; 8
    272a:	51 f1       	breq	.+84     	; 0x2780 <__ultoa_invert+0x5c>
    272c:	20 31       	cpi	r18, 0x10	; 16
    272e:	81 f1       	breq	.+96     	; 0x2790 <__ultoa_invert+0x6c>
    2730:	e8 94       	clt
    2732:	6f 93       	push	r22
    2734:	6e 7f       	andi	r22, 0xFE	; 254
    2736:	6e 5f       	subi	r22, 0xFE	; 254
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	8f 4f       	sbci	r24, 0xFF	; 255
    273c:	9f 4f       	sbci	r25, 0xFF	; 255
    273e:	af 4f       	sbci	r26, 0xFF	; 255
    2740:	b1 e0       	ldi	r27, 0x01	; 1
    2742:	3e d0       	rcall	.+124    	; 0x27c0 <__ultoa_invert+0x9c>
    2744:	b4 e0       	ldi	r27, 0x04	; 4
    2746:	3c d0       	rcall	.+120    	; 0x27c0 <__ultoa_invert+0x9c>
    2748:	67 0f       	add	r22, r23
    274a:	78 1f       	adc	r23, r24
    274c:	89 1f       	adc	r24, r25
    274e:	9a 1f       	adc	r25, r26
    2750:	a1 1d       	adc	r26, r1
    2752:	68 0f       	add	r22, r24
    2754:	79 1f       	adc	r23, r25
    2756:	8a 1f       	adc	r24, r26
    2758:	91 1d       	adc	r25, r1
    275a:	a1 1d       	adc	r26, r1
    275c:	6a 0f       	add	r22, r26
    275e:	71 1d       	adc	r23, r1
    2760:	81 1d       	adc	r24, r1
    2762:	91 1d       	adc	r25, r1
    2764:	a1 1d       	adc	r26, r1
    2766:	20 d0       	rcall	.+64     	; 0x27a8 <__ultoa_invert+0x84>
    2768:	09 f4       	brne	.+2      	; 0x276c <__ultoa_invert+0x48>
    276a:	68 94       	set
    276c:	3f 91       	pop	r19
    276e:	2a e0       	ldi	r18, 0x0A	; 10
    2770:	26 9f       	mul	r18, r22
    2772:	11 24       	eor	r1, r1
    2774:	30 19       	sub	r19, r0
    2776:	30 5d       	subi	r19, 0xD0	; 208
    2778:	31 93       	st	Z+, r19
    277a:	de f6       	brtc	.-74     	; 0x2732 <__ultoa_invert+0xe>
    277c:	cf 01       	movw	r24, r30
    277e:	08 95       	ret
    2780:	46 2f       	mov	r20, r22
    2782:	47 70       	andi	r20, 0x07	; 7
    2784:	40 5d       	subi	r20, 0xD0	; 208
    2786:	41 93       	st	Z+, r20
    2788:	b3 e0       	ldi	r27, 0x03	; 3
    278a:	0f d0       	rcall	.+30     	; 0x27aa <__ultoa_invert+0x86>
    278c:	c9 f7       	brne	.-14     	; 0x2780 <__ultoa_invert+0x5c>
    278e:	f6 cf       	rjmp	.-20     	; 0x277c <__ultoa_invert+0x58>
    2790:	46 2f       	mov	r20, r22
    2792:	4f 70       	andi	r20, 0x0F	; 15
    2794:	40 5d       	subi	r20, 0xD0	; 208
    2796:	4a 33       	cpi	r20, 0x3A	; 58
    2798:	18 f0       	brcs	.+6      	; 0x27a0 <__ultoa_invert+0x7c>
    279a:	49 5d       	subi	r20, 0xD9	; 217
    279c:	31 fd       	sbrc	r19, 1
    279e:	40 52       	subi	r20, 0x20	; 32
    27a0:	41 93       	st	Z+, r20
    27a2:	02 d0       	rcall	.+4      	; 0x27a8 <__ultoa_invert+0x84>
    27a4:	a9 f7       	brne	.-22     	; 0x2790 <__ultoa_invert+0x6c>
    27a6:	ea cf       	rjmp	.-44     	; 0x277c <__ultoa_invert+0x58>
    27a8:	b4 e0       	ldi	r27, 0x04	; 4
    27aa:	a6 95       	lsr	r26
    27ac:	97 95       	ror	r25
    27ae:	87 95       	ror	r24
    27b0:	77 95       	ror	r23
    27b2:	67 95       	ror	r22
    27b4:	ba 95       	dec	r27
    27b6:	c9 f7       	brne	.-14     	; 0x27aa <__ultoa_invert+0x86>
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	61 05       	cpc	r22, r1
    27bc:	71 05       	cpc	r23, r1
    27be:	08 95       	ret
    27c0:	9b 01       	movw	r18, r22
    27c2:	ac 01       	movw	r20, r24
    27c4:	0a 2e       	mov	r0, r26
    27c6:	06 94       	lsr	r0
    27c8:	57 95       	ror	r21
    27ca:	47 95       	ror	r20
    27cc:	37 95       	ror	r19
    27ce:	27 95       	ror	r18
    27d0:	ba 95       	dec	r27
    27d2:	c9 f7       	brne	.-14     	; 0x27c6 <__ultoa_invert+0xa2>
    27d4:	62 0f       	add	r22, r18
    27d6:	73 1f       	adc	r23, r19
    27d8:	84 1f       	adc	r24, r20
    27da:	95 1f       	adc	r25, r21
    27dc:	a0 1d       	adc	r26, r0
    27de:	08 95       	ret

000027e0 <__prologue_saves__>:
    27e0:	2f 92       	push	r2
    27e2:	3f 92       	push	r3
    27e4:	4f 92       	push	r4
    27e6:	5f 92       	push	r5
    27e8:	6f 92       	push	r6
    27ea:	7f 92       	push	r7
    27ec:	8f 92       	push	r8
    27ee:	9f 92       	push	r9
    27f0:	af 92       	push	r10
    27f2:	bf 92       	push	r11
    27f4:	cf 92       	push	r12
    27f6:	df 92       	push	r13
    27f8:	ef 92       	push	r14
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	ca 1b       	sub	r28, r26
    280a:	db 0b       	sbc	r29, r27
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	09 94       	ijmp

00002818 <__epilogue_restores__>:
    2818:	2a 88       	ldd	r2, Y+18	; 0x12
    281a:	39 88       	ldd	r3, Y+17	; 0x11
    281c:	48 88       	ldd	r4, Y+16	; 0x10
    281e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2820:	6e 84       	ldd	r6, Y+14	; 0x0e
    2822:	7d 84       	ldd	r7, Y+13	; 0x0d
    2824:	8c 84       	ldd	r8, Y+12	; 0x0c
    2826:	9b 84       	ldd	r9, Y+11	; 0x0b
    2828:	aa 84       	ldd	r10, Y+10	; 0x0a
    282a:	b9 84       	ldd	r11, Y+9	; 0x09
    282c:	c8 84       	ldd	r12, Y+8	; 0x08
    282e:	df 80       	ldd	r13, Y+7	; 0x07
    2830:	ee 80       	ldd	r14, Y+6	; 0x06
    2832:	fd 80       	ldd	r15, Y+5	; 0x05
    2834:	0c 81       	ldd	r16, Y+4	; 0x04
    2836:	1b 81       	ldd	r17, Y+3	; 0x03
    2838:	aa 81       	ldd	r26, Y+2	; 0x02
    283a:	b9 81       	ldd	r27, Y+1	; 0x01
    283c:	ce 0f       	add	r28, r30
    283e:	d1 1d       	adc	r29, r1
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	ed 01       	movw	r28, r26
    284c:	08 95       	ret

0000284e <_exit>:
    284e:	f8 94       	cli

00002850 <__stop_program>:
    2850:	ff cf       	rjmp	.-2      	; 0x2850 <__stop_program>
