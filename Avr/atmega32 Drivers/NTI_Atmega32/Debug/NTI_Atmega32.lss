
NTI_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000784a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  0000784a  000078de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  008000d0  008000d0  0000794e  2**0
                  ALLOC
  3 .stab         00012354  00000000  00000000  00007950  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000c7ab  00000000  00000000  00019ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0002644f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00026460  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0002649c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  00026982  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00026e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00026e3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <__vector_1>
       8:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <__vector_2>
       c:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <__vector_3>
      10:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <__vector_4>
      14:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__vector_5>
      18:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <__vector_6>
      1c:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__vector_7>
      20:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__vector_8>
      24:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__vector_9>
      28:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__vector_10>
      2c:	0c 94 85 13 	jmp	0x270a	; 0x270a <__vector_11>
      30:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__vector_12>
      34:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_13>
      38:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_14>
      3c:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_15>
      40:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__vector_16>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	64 0a       	sbc	r6, r20
      56:	bf 0a       	sbc	r11, r31
      58:	64 0a       	sbc	r6, r20
      5a:	bf 0a       	sbc	r11, r31
      5c:	bf 0a       	sbc	r11, r31
      5e:	bf 0a       	sbc	r11, r31
      60:	64 0a       	sbc	r6, r20
      62:	bf 0a       	sbc	r11, r31
      64:	bf 0a       	sbc	r11, r31
      66:	93 0a       	sbc	r9, r19
      68:	64 0a       	sbc	r6, r20
      6a:	93 0a       	sbc	r9, r19
      6c:	bf 0a       	sbc	r11, r31
      6e:	66 0a       	sbc	r6, r22
      70:	64 0a       	sbc	r6, r20
      72:	66 0a       	sbc	r6, r22
      74:	ea 12       	cpse	r14, r26
      76:	45 13       	cpse	r20, r21
      78:	ea 12       	cpse	r14, r26
      7a:	45 13       	cpse	r20, r21
      7c:	45 13       	cpse	r20, r21
      7e:	45 13       	cpse	r20, r21
      80:	ea 12       	cpse	r14, r26
      82:	45 13       	cpse	r20, r21
      84:	45 13       	cpse	r20, r21
      86:	19 13       	cpse	r17, r25
      88:	ea 12       	cpse	r14, r26
      8a:	19 13       	cpse	r17, r25
      8c:	45 13       	cpse	r20, r21
      8e:	ec 12       	cpse	r14, r28
      90:	ea 12       	cpse	r14, r26
      92:	ec 12       	cpse	r14, r28

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	ea e4       	ldi	r30, 0x4A	; 74
      a8:	f8 e7       	ldi	r31, 0x78	; 120
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	a0 3d       	cpi	r26, 0xD0	; 208
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	21 e0       	ldi	r18, 0x01	; 1
      b8:	a0 ed       	ldi	r26, 0xD0	; 208
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a0 33       	cpi	r26, 0x30	; 48
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <main>
      ca:	0c 94 23 3c 	jmp	0x7846	; 0x7846 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <Convert_IntToString>:
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	27 97       	sbiw	r28, 0x07	; 7
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
      e6:	6a 83       	std	Y+2, r22	; 0x02
      e8:	7b 83       	std	Y+3, r23	; 0x03
      ea:	8c 83       	std	Y+4, r24	; 0x04
      ec:	9d 83       	std	Y+5, r25	; 0x05
      ee:	5f 83       	std	Y+7, r21	; 0x07
      f0:	4e 83       	std	Y+6, r20	; 0x06
      f2:	19 82       	std	Y+1, r1	; 0x01
      f4:	8e 81       	ldd	r24, Y+6	; 0x06
      f6:	9f 81       	ldd	r25, Y+7	; 0x07
      f8:	89 2b       	or	r24, r25
      fa:	19 f4       	brne	.+6      	; 0x102 <Convert_IntToString+0x30>
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	89 83       	std	Y+1, r24	; 0x01
     100:	1d c0       	rjmp	.+58     	; 0x13c <Convert_IntToString+0x6a>
     102:	8d 81       	ldd	r24, Y+5	; 0x05
     104:	8f 93       	push	r24
     106:	8c 81       	ldd	r24, Y+4	; 0x04
     108:	8f 93       	push	r24
     10a:	8b 81       	ldd	r24, Y+3	; 0x03
     10c:	8f 93       	push	r24
     10e:	8a 81       	ldd	r24, Y+2	; 0x02
     110:	8f 93       	push	r24
     112:	80 eb       	ldi	r24, 0xB0	; 176
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	89 2f       	mov	r24, r25
     118:	8f 93       	push	r24
     11a:	80 eb       	ldi	r24, 0xB0	; 176
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	8f 93       	push	r24
     120:	8f 81       	ldd	r24, Y+7	; 0x07
     122:	8f 93       	push	r24
     124:	8e 81       	ldd	r24, Y+6	; 0x06
     126:	8f 93       	push	r24
     128:	0e 94 39 39 	call	0x7272	; 0x7272 <sprintf>
     12c:	8d b7       	in	r24, 0x3d	; 61
     12e:	9e b7       	in	r25, 0x3e	; 62
     130:	08 96       	adiw	r24, 0x08	; 8
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
     13c:	89 81       	ldd	r24, Y+1	; 0x01
     13e:	27 96       	adiw	r28, 0x07	; 7
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f64 Copy_f64Number, pu8 Address_str){
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	65 97       	sbiw	r28, 0x15	; 21
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	68 8b       	std	Y+16, r22	; 0x10
     166:	79 8b       	std	Y+17, r23	; 0x11
     168:	8a 8b       	std	Y+18, r24	; 0x12
     16a:	9b 8b       	std	Y+19, r25	; 0x13
     16c:	5d 8b       	std	Y+21, r21	; 0x15
     16e:	4c 8b       	std	Y+20, r20	; 0x14

	//-5.99

	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     170:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8TempSign[2]="";
     172:	1f 86       	std	Y+15, r1	; 0x0f
     174:	1e 86       	std	Y+14, r1	; 0x0e
	s32  Loc_s64IntPart;
	f32 Loc_f32FractionPart;
	s32  Loc_s64FractionPartAsInteger;


		if(NULL == Address_str){
     176:	8c 89       	ldd	r24, Y+20	; 0x14
     178:	9d 89       	ldd	r25, Y+21	; 0x15
     17a:	89 2b       	or	r24, r25
     17c:	19 f4       	brne	.+6      	; 0x184 <Convert_FloatToString+0x34>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	78 c0       	rjmp	.+240    	; 0x274 <Convert_FloatToString+0x124>
		}

		else{

			if(Copy_f64Number<0){
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	a9 01       	movw	r20, r18
     18a:	68 89       	ldd	r22, Y+16	; 0x10
     18c:	79 89       	ldd	r23, Y+17	; 0x11
     18e:	8a 89       	ldd	r24, Y+18	; 0x12
     190:	9b 89       	ldd	r25, Y+19	; 0x13
     192:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	5c f4       	brge	.+22     	; 0x1b0 <Convert_FloatToString+0x60>
				Copy_f64Number = -Copy_f64Number ;
     19a:	88 89       	ldd	r24, Y+16	; 0x10
     19c:	99 89       	ldd	r25, Y+17	; 0x11
     19e:	aa 89       	ldd	r26, Y+18	; 0x12
     1a0:	bb 89       	ldd	r27, Y+19	; 0x13
     1a2:	b0 58       	subi	r27, 0x80	; 128
     1a4:	88 8b       	std	Y+16, r24	; 0x10
     1a6:	99 8b       	std	Y+17, r25	; 0x11
     1a8:	aa 8b       	std	Y+18, r26	; 0x12
     1aa:	bb 8b       	std	Y+19, r27	; 0x13
				Loc_u8TempSign[0] ='-';
     1ac:	8d e2       	ldi	r24, 0x2D	; 45
     1ae:	8e 87       	std	Y+14, r24	; 0x0e
			}


			Loc_s64IntPart = Copy_f64Number;                  // Get the integer (5).
     1b0:	68 89       	ldd	r22, Y+16	; 0x10
     1b2:	79 89       	ldd	r23, Y+17	; 0x11
     1b4:	8a 89       	ldd	r24, Y+18	; 0x12
     1b6:	9b 89       	ldd	r25, Y+19	; 0x13
     1b8:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <__fixsfsi>
     1bc:	dc 01       	movw	r26, r24
     1be:	cb 01       	movw	r24, r22
     1c0:	8a 83       	std	Y+2, r24	; 0x02
     1c2:	9b 83       	std	Y+3, r25	; 0x03
     1c4:	ac 83       	std	Y+4, r26	; 0x04
     1c6:	bd 83       	std	Y+5, r27	; 0x05
			Loc_f32FractionPart = Copy_f64Number - Loc_s64IntPart;      // Get fraction (.99).
     1c8:	6a 81       	ldd	r22, Y+2	; 0x02
     1ca:	7b 81       	ldd	r23, Y+3	; 0x03
     1cc:	8c 81       	ldd	r24, Y+4	; 0x04
     1ce:	9d 81       	ldd	r25, Y+5	; 0x05
     1d0:	0e 94 17 38 	call	0x702e	; 0x702e <__floatsisf>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
     1d8:	9c 01       	movw	r18, r24
     1da:	ad 01       	movw	r20, r26
     1dc:	68 89       	ldd	r22, Y+16	; 0x10
     1de:	79 89       	ldd	r23, Y+17	; 0x11
     1e0:	8a 89       	ldd	r24, Y+18	; 0x12
     1e2:	9b 89       	ldd	r25, Y+19	; 0x13
     1e4:	0e 94 fb 36 	call	0x6df6	; 0x6df6 <__subsf3>
     1e8:	dc 01       	movw	r26, r24
     1ea:	cb 01       	movw	r24, r22
     1ec:	8e 83       	std	Y+6, r24	; 0x06
     1ee:	9f 83       	std	Y+7, r25	; 0x07
     1f0:	a8 87       	std	Y+8, r26	; 0x08
     1f2:	b9 87       	std	Y+9, r27	; 0x09
			 Loc_s64FractionPartAsInteger = (Loc_f32FractionPart * 10000);  // Turn into integer (9900).
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e4       	ldi	r19, 0x40	; 64
     1f8:	4c e1       	ldi	r20, 0x1C	; 28
     1fa:	56 e4       	ldi	r21, 0x46	; 70
     1fc:	6e 81       	ldd	r22, Y+6	; 0x06
     1fe:	7f 81       	ldd	r23, Y+7	; 0x07
     200:	88 85       	ldd	r24, Y+8	; 0x08
     202:	99 85       	ldd	r25, Y+9	; 0x09
     204:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
     208:	dc 01       	movw	r26, r24
     20a:	cb 01       	movw	r24, r22
     20c:	bc 01       	movw	r22, r24
     20e:	cd 01       	movw	r24, r26
     210:	0e 94 df 37 	call	0x6fbe	; 0x6fbe <__fixsfsi>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	8a 87       	std	Y+10, r24	; 0x0a
     21a:	9b 87       	std	Y+11, r25	; 0x0b
     21c:	ac 87       	std	Y+12, r26	; 0x0c
     21e:	bd 87       	std	Y+13, r27	; 0x0d

			// Print as parts, note that you need 0-padding for fractional bit.

			sprintf (Address_str, "%s%ld.%04d", Loc_u8TempSign, Loc_s64IntPart, Loc_s64FractionPartAsInteger);
     220:	8d 85       	ldd	r24, Y+13	; 0x0d
     222:	8f 93       	push	r24
     224:	8c 85       	ldd	r24, Y+12	; 0x0c
     226:	8f 93       	push	r24
     228:	8b 85       	ldd	r24, Y+11	; 0x0b
     22a:	8f 93       	push	r24
     22c:	8a 85       	ldd	r24, Y+10	; 0x0a
     22e:	8f 93       	push	r24
     230:	8d 81       	ldd	r24, Y+5	; 0x05
     232:	8f 93       	push	r24
     234:	8c 81       	ldd	r24, Y+4	; 0x04
     236:	8f 93       	push	r24
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	8f 93       	push	r24
     23c:	8a 81       	ldd	r24, Y+2	; 0x02
     23e:	8f 93       	push	r24
     240:	ce 01       	movw	r24, r28
     242:	0e 96       	adiw	r24, 0x0e	; 14
     244:	29 2f       	mov	r18, r25
     246:	2f 93       	push	r18
     248:	8f 93       	push	r24
     24a:	84 eb       	ldi	r24, 0xB4	; 180
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	89 2f       	mov	r24, r25
     250:	8f 93       	push	r24
     252:	84 eb       	ldi	r24, 0xB4	; 180
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	8f 93       	push	r24
     258:	8d 89       	ldd	r24, Y+21	; 0x15
     25a:	8f 93       	push	r24
     25c:	8c 89       	ldd	r24, Y+20	; 0x14
     25e:	8f 93       	push	r24
     260:	0e 94 39 39 	call	0x7272	; 0x7272 <sprintf>
     264:	8d b7       	in	r24, 0x3d	; 61
     266:	9e b7       	in	r25, 0x3e	; 62
     268:	0e 96       	adiw	r24, 0x0e	; 14
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61



		}

		return Loc_enuStatus;
     274:	89 81       	ldd	r24, Y+1	; 0x01


}
     276:	65 96       	adiw	r28, 0x15	; 21
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <Convert_StringTou8>:



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){
     288:	2f 92       	push	r2
     28a:	3f 92       	push	r3
     28c:	4f 92       	push	r4
     28e:	5f 92       	push	r5
     290:	6f 92       	push	r6
     292:	7f 92       	push	r7
     294:	8f 92       	push	r8
     296:	9f 92       	push	r9
     298:	af 92       	push	r10
     29a:	bf 92       	push	r11
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	6e 97       	sbiw	r28, 0x1e	; 30
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	9c 87       	std	Y+12, r25	; 0x0c
     2be:	8b 87       	std	Y+11, r24	; 0x0b
     2c0:	7e 87       	std	Y+14, r23	; 0x0e
     2c2:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     2c4:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     2c6:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     2c8:	1b 82       	std	Y+3, r1	; 0x03
     2ca:	1c 82       	std	Y+4, r1	; 0x04
     2cc:	1d 82       	std	Y+5, r1	; 0x05
     2ce:	1e 82       	std	Y+6, r1	; 0x06
     2d0:	1f 82       	std	Y+7, r1	; 0x07
     2d2:	18 86       	std	Y+8, r1	; 0x08
     2d4:	19 86       	std	Y+9, r1	; 0x09
     2d6:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     2d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2da:	9e 85       	ldd	r25, Y+14	; 0x0e
     2dc:	89 2b       	or	r24, r25
     2de:	21 f0       	breq	.+8      	; 0x2e8 <Convert_StringTou8+0x60>
     2e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2e4:	89 2b       	or	r24, r25
     2e6:	19 f4       	brne	.+6      	; 0x2ee <Convert_StringTou8+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	9f c0       	rjmp	.+318    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     2ee:	1a 82       	std	Y+2, r1	; 0x02
     2f0:	8c c0       	rjmp	.+280    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     2f2:	2b 81       	ldd	r18, Y+3	; 0x03
     2f4:	3c 81       	ldd	r19, Y+4	; 0x04
     2f6:	4d 81       	ldd	r20, Y+5	; 0x05
     2f8:	5e 81       	ldd	r21, Y+6	; 0x06
     2fa:	6f 81       	ldd	r22, Y+7	; 0x07
     2fc:	78 85       	ldd	r23, Y+8	; 0x08
     2fe:	89 85       	ldd	r24, Y+9	; 0x09
     300:	9a 85       	ldd	r25, Y+10	; 0x0a
     302:	22 2e       	mov	r2, r18
     304:	33 2e       	mov	r3, r19
     306:	44 2e       	mov	r4, r20
     308:	55 2e       	mov	r5, r21
     30a:	66 2e       	mov	r6, r22
     30c:	77 2e       	mov	r7, r23
     30e:	88 2e       	mov	r8, r24
     310:	99 2e       	mov	r9, r25
     312:	22 2d       	mov	r18, r2
     314:	33 2d       	mov	r19, r3
     316:	44 2d       	mov	r20, r4
     318:	55 2d       	mov	r21, r5
     31a:	66 2d       	mov	r22, r6
     31c:	77 2d       	mov	r23, r7
     31e:	88 2d       	mov	r24, r8
     320:	99 2d       	mov	r25, r9
     322:	01 e0       	ldi	r16, 0x01	; 1
     324:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <__ashldi3>
     328:	a2 2e       	mov	r10, r18
     32a:	b3 2e       	mov	r11, r19
     32c:	c4 2e       	mov	r12, r20
     32e:	d5 2e       	mov	r13, r21
     330:	e6 2e       	mov	r14, r22
     332:	f7 2e       	mov	r15, r23
     334:	08 2f       	mov	r16, r24
     336:	19 2f       	mov	r17, r25
     338:	2a 2c       	mov	r2, r10
     33a:	3b 2c       	mov	r3, r11
     33c:	4c 2c       	mov	r4, r12
     33e:	5d 2c       	mov	r5, r13
     340:	6e 2c       	mov	r6, r14
     342:	7f 2c       	mov	r7, r15
     344:	80 2e       	mov	r8, r16
     346:	91 2e       	mov	r9, r17
     348:	22 2d       	mov	r18, r2
     34a:	33 2d       	mov	r19, r3
     34c:	44 2d       	mov	r20, r4
     34e:	55 2d       	mov	r21, r5
     350:	66 2d       	mov	r22, r6
     352:	77 2d       	mov	r23, r7
     354:	88 2d       	mov	r24, r8
     356:	99 2d       	mov	r25, r9
     358:	02 e0       	ldi	r16, 0x02	; 2
     35a:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <__ashldi3>
     35e:	2f 8b       	std	Y+23, r18	; 0x17
     360:	38 8f       	std	Y+24, r19	; 0x18
     362:	49 8f       	std	Y+25, r20	; 0x19
     364:	5a 8f       	std	Y+26, r21	; 0x1a
     366:	6b 8f       	std	Y+27, r22	; 0x1b
     368:	7c 8f       	std	Y+28, r23	; 0x1c
     36a:	8d 8f       	std	Y+29, r24	; 0x1d
     36c:	9e 8f       	std	Y+30, r25	; 0x1e
     36e:	22 2d       	mov	r18, r2
     370:	33 2d       	mov	r19, r3
     372:	44 2d       	mov	r20, r4
     374:	55 2d       	mov	r21, r5
     376:	66 2d       	mov	r22, r6
     378:	77 2d       	mov	r23, r7
     37a:	88 2d       	mov	r24, r8
     37c:	99 2d       	mov	r25, r9
     37e:	af 88       	ldd	r10, Y+23	; 0x17
     380:	b8 8c       	ldd	r11, Y+24	; 0x18
     382:	c9 8c       	ldd	r12, Y+25	; 0x19
     384:	da 8c       	ldd	r13, Y+26	; 0x1a
     386:	eb 8c       	ldd	r14, Y+27	; 0x1b
     388:	fc 8c       	ldd	r15, Y+28	; 0x1c
     38a:	0d 8d       	ldd	r16, Y+29	; 0x1d
     38c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     38e:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <__adddi3>
     392:	a2 2e       	mov	r10, r18
     394:	b3 2e       	mov	r11, r19
     396:	c4 2e       	mov	r12, r20
     398:	d5 2e       	mov	r13, r21
     39a:	e6 2e       	mov	r14, r22
     39c:	f7 2e       	mov	r15, r23
     39e:	08 2f       	mov	r16, r24
     3a0:	19 2f       	mov	r17, r25
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	88 2f       	mov	r24, r24
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	2d 85       	ldd	r18, Y+13	; 0x0d
     3aa:	3e 85       	ldd	r19, Y+14	; 0x0e
     3ac:	82 0f       	add	r24, r18
     3ae:	93 1f       	adc	r25, r19
     3b0:	fc 01       	movw	r30, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	88 2f       	mov	r24, r24
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	c0 97       	sbiw	r24, 0x30	; 48
     3ba:	98 8b       	std	Y+16, r25	; 0x10
     3bc:	8f 87       	std	Y+15, r24	; 0x0f
     3be:	89 2f       	mov	r24, r25
     3c0:	88 0f       	add	r24, r24
     3c2:	88 0b       	sbc	r24, r24
     3c4:	89 8b       	std	Y+17, r24	; 0x11
     3c6:	8a 8b       	std	Y+18, r24	; 0x12
     3c8:	8b 8b       	std	Y+19, r24	; 0x13
     3ca:	8c 8b       	std	Y+20, r24	; 0x14
     3cc:	8d 8b       	std	Y+21, r24	; 0x15
     3ce:	8e 8b       	std	Y+22, r24	; 0x16
     3d0:	2a 2d       	mov	r18, r10
     3d2:	3b 2d       	mov	r19, r11
     3d4:	4c 2d       	mov	r20, r12
     3d6:	5d 2d       	mov	r21, r13
     3d8:	6e 2d       	mov	r22, r14
     3da:	7f 2d       	mov	r23, r15
     3dc:	80 2f       	mov	r24, r16
     3de:	91 2f       	mov	r25, r17
     3e0:	af 84       	ldd	r10, Y+15	; 0x0f
     3e2:	b8 88       	ldd	r11, Y+16	; 0x10
     3e4:	c9 88       	ldd	r12, Y+17	; 0x11
     3e6:	da 88       	ldd	r13, Y+18	; 0x12
     3e8:	eb 88       	ldd	r14, Y+19	; 0x13
     3ea:	fc 88       	ldd	r15, Y+20	; 0x14
     3ec:	0d 89       	ldd	r16, Y+21	; 0x15
     3ee:	1e 89       	ldd	r17, Y+22	; 0x16
     3f0:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <__adddi3>
     3f4:	2b 83       	std	Y+3, r18	; 0x03
     3f6:	3c 83       	std	Y+4, r19	; 0x04
     3f8:	4d 83       	std	Y+5, r20	; 0x05
     3fa:	5e 83       	std	Y+6, r21	; 0x06
     3fc:	6f 83       	std	Y+7, r22	; 0x07
     3fe:	78 87       	std	Y+8, r23	; 0x08
     400:	89 87       	std	Y+9, r24	; 0x09
     402:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	8f 5f       	subi	r24, 0xFF	; 255
     408:	8a 83       	std	Y+2, r24	; 0x02
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	2d 85       	ldd	r18, Y+13	; 0x0d
     412:	3e 85       	ldd	r19, Y+14	; 0x0e
     414:	82 0f       	add	r24, r18
     416:	93 1f       	adc	r25, r19
     418:	fc 01       	movw	r30, r24
     41a:	80 81       	ld	r24, Z
     41c:	88 23       	and	r24, r24
     41e:	09 f0       	breq	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	68 cf       	rjmp	.-304    	; 0x2f2 <Convert_StringTou8+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     422:	2b 81       	ldd	r18, Y+3	; 0x03
     424:	8b 85       	ldd	r24, Y+11	; 0x0b
     426:	9c 85       	ldd	r25, Y+12	; 0x0c
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     42c:	89 81       	ldd	r24, Y+1	; 0x01

}
     42e:	6e 96       	adiw	r28, 0x1e	; 30
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	bf 90       	pop	r11
     44c:	af 90       	pop	r10
     44e:	9f 90       	pop	r9
     450:	8f 90       	pop	r8
     452:	7f 90       	pop	r7
     454:	6f 90       	pop	r6
     456:	5f 90       	pop	r5
     458:	4f 90       	pop	r4
     45a:	3f 90       	pop	r3
     45c:	2f 90       	pop	r2
     45e:	08 95       	ret

00000460 <Convert_StringTou16>:


Std_StatusType Convert_StringTou16 (u16* Address_Number, pu8 Address_str){
     460:	2f 92       	push	r2
     462:	3f 92       	push	r3
     464:	4f 92       	push	r4
     466:	5f 92       	push	r5
     468:	6f 92       	push	r6
     46a:	7f 92       	push	r7
     46c:	8f 92       	push	r8
     46e:	9f 92       	push	r9
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	6e 97       	sbiw	r28, 0x1e	; 30
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	9c 87       	std	Y+12, r25	; 0x0c
     496:	8b 87       	std	Y+11, r24	; 0x0b
     498:	7e 87       	std	Y+14, r23	; 0x0e
     49a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     49c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     49e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     4a0:	1b 82       	std	Y+3, r1	; 0x03
     4a2:	1c 82       	std	Y+4, r1	; 0x04
     4a4:	1d 82       	std	Y+5, r1	; 0x05
     4a6:	1e 82       	std	Y+6, r1	; 0x06
     4a8:	1f 82       	std	Y+7, r1	; 0x07
     4aa:	18 86       	std	Y+8, r1	; 0x08
     4ac:	19 86       	std	Y+9, r1	; 0x09
     4ae:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     4b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     4b2:	9e 85       	ldd	r25, Y+14	; 0x0e
     4b4:	89 2b       	or	r24, r25
     4b6:	21 f0       	breq	.+8      	; 0x4c0 <Convert_StringTou16+0x60>
     4b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     4ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     4bc:	89 2b       	or	r24, r25
     4be:	19 f4       	brne	.+6      	; 0x4c6 <Convert_StringTou16+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	89 83       	std	Y+1, r24	; 0x01
     4c4:	a1 c0       	rjmp	.+322    	; 0x608 <Convert_StringTou16+0x1a8>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     4c6:	1a 82       	std	Y+2, r1	; 0x02
     4c8:	8c c0       	rjmp	.+280    	; 0x5e2 <Convert_StringTou16+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     4ca:	2b 81       	ldd	r18, Y+3	; 0x03
     4cc:	3c 81       	ldd	r19, Y+4	; 0x04
     4ce:	4d 81       	ldd	r20, Y+5	; 0x05
     4d0:	5e 81       	ldd	r21, Y+6	; 0x06
     4d2:	6f 81       	ldd	r22, Y+7	; 0x07
     4d4:	78 85       	ldd	r23, Y+8	; 0x08
     4d6:	89 85       	ldd	r24, Y+9	; 0x09
     4d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4da:	22 2e       	mov	r2, r18
     4dc:	33 2e       	mov	r3, r19
     4de:	44 2e       	mov	r4, r20
     4e0:	55 2e       	mov	r5, r21
     4e2:	66 2e       	mov	r6, r22
     4e4:	77 2e       	mov	r7, r23
     4e6:	88 2e       	mov	r8, r24
     4e8:	99 2e       	mov	r9, r25
     4ea:	22 2d       	mov	r18, r2
     4ec:	33 2d       	mov	r19, r3
     4ee:	44 2d       	mov	r20, r4
     4f0:	55 2d       	mov	r21, r5
     4f2:	66 2d       	mov	r22, r6
     4f4:	77 2d       	mov	r23, r7
     4f6:	88 2d       	mov	r24, r8
     4f8:	99 2d       	mov	r25, r9
     4fa:	01 e0       	ldi	r16, 0x01	; 1
     4fc:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <__ashldi3>
     500:	a2 2e       	mov	r10, r18
     502:	b3 2e       	mov	r11, r19
     504:	c4 2e       	mov	r12, r20
     506:	d5 2e       	mov	r13, r21
     508:	e6 2e       	mov	r14, r22
     50a:	f7 2e       	mov	r15, r23
     50c:	08 2f       	mov	r16, r24
     50e:	19 2f       	mov	r17, r25
     510:	2a 2c       	mov	r2, r10
     512:	3b 2c       	mov	r3, r11
     514:	4c 2c       	mov	r4, r12
     516:	5d 2c       	mov	r5, r13
     518:	6e 2c       	mov	r6, r14
     51a:	7f 2c       	mov	r7, r15
     51c:	80 2e       	mov	r8, r16
     51e:	91 2e       	mov	r9, r17
     520:	22 2d       	mov	r18, r2
     522:	33 2d       	mov	r19, r3
     524:	44 2d       	mov	r20, r4
     526:	55 2d       	mov	r21, r5
     528:	66 2d       	mov	r22, r6
     52a:	77 2d       	mov	r23, r7
     52c:	88 2d       	mov	r24, r8
     52e:	99 2d       	mov	r25, r9
     530:	02 e0       	ldi	r16, 0x02	; 2
     532:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <__ashldi3>
     536:	2f 8b       	std	Y+23, r18	; 0x17
     538:	38 8f       	std	Y+24, r19	; 0x18
     53a:	49 8f       	std	Y+25, r20	; 0x19
     53c:	5a 8f       	std	Y+26, r21	; 0x1a
     53e:	6b 8f       	std	Y+27, r22	; 0x1b
     540:	7c 8f       	std	Y+28, r23	; 0x1c
     542:	8d 8f       	std	Y+29, r24	; 0x1d
     544:	9e 8f       	std	Y+30, r25	; 0x1e
     546:	22 2d       	mov	r18, r2
     548:	33 2d       	mov	r19, r3
     54a:	44 2d       	mov	r20, r4
     54c:	55 2d       	mov	r21, r5
     54e:	66 2d       	mov	r22, r6
     550:	77 2d       	mov	r23, r7
     552:	88 2d       	mov	r24, r8
     554:	99 2d       	mov	r25, r9
     556:	af 88       	ldd	r10, Y+23	; 0x17
     558:	b8 8c       	ldd	r11, Y+24	; 0x18
     55a:	c9 8c       	ldd	r12, Y+25	; 0x19
     55c:	da 8c       	ldd	r13, Y+26	; 0x1a
     55e:	eb 8c       	ldd	r14, Y+27	; 0x1b
     560:	fc 8c       	ldd	r15, Y+28	; 0x1c
     562:	0d 8d       	ldd	r16, Y+29	; 0x1d
     564:	1e 8d       	ldd	r17, Y+30	; 0x1e
     566:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <__adddi3>
     56a:	a2 2e       	mov	r10, r18
     56c:	b3 2e       	mov	r11, r19
     56e:	c4 2e       	mov	r12, r20
     570:	d5 2e       	mov	r13, r21
     572:	e6 2e       	mov	r14, r22
     574:	f7 2e       	mov	r15, r23
     576:	08 2f       	mov	r16, r24
     578:	19 2f       	mov	r17, r25
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	2d 85       	ldd	r18, Y+13	; 0x0d
     582:	3e 85       	ldd	r19, Y+14	; 0x0e
     584:	82 0f       	add	r24, r18
     586:	93 1f       	adc	r25, r19
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	c0 97       	sbiw	r24, 0x30	; 48
     592:	98 8b       	std	Y+16, r25	; 0x10
     594:	8f 87       	std	Y+15, r24	; 0x0f
     596:	89 2f       	mov	r24, r25
     598:	88 0f       	add	r24, r24
     59a:	88 0b       	sbc	r24, r24
     59c:	89 8b       	std	Y+17, r24	; 0x11
     59e:	8a 8b       	std	Y+18, r24	; 0x12
     5a0:	8b 8b       	std	Y+19, r24	; 0x13
     5a2:	8c 8b       	std	Y+20, r24	; 0x14
     5a4:	8d 8b       	std	Y+21, r24	; 0x15
     5a6:	8e 8b       	std	Y+22, r24	; 0x16
     5a8:	2a 2d       	mov	r18, r10
     5aa:	3b 2d       	mov	r19, r11
     5ac:	4c 2d       	mov	r20, r12
     5ae:	5d 2d       	mov	r21, r13
     5b0:	6e 2d       	mov	r22, r14
     5b2:	7f 2d       	mov	r23, r15
     5b4:	80 2f       	mov	r24, r16
     5b6:	91 2f       	mov	r25, r17
     5b8:	af 84       	ldd	r10, Y+15	; 0x0f
     5ba:	b8 88       	ldd	r11, Y+16	; 0x10
     5bc:	c9 88       	ldd	r12, Y+17	; 0x11
     5be:	da 88       	ldd	r13, Y+18	; 0x12
     5c0:	eb 88       	ldd	r14, Y+19	; 0x13
     5c2:	fc 88       	ldd	r15, Y+20	; 0x14
     5c4:	0d 89       	ldd	r16, Y+21	; 0x15
     5c6:	1e 89       	ldd	r17, Y+22	; 0x16
     5c8:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <__adddi3>
     5cc:	2b 83       	std	Y+3, r18	; 0x03
     5ce:	3c 83       	std	Y+4, r19	; 0x04
     5d0:	4d 83       	std	Y+5, r20	; 0x05
     5d2:	5e 83       	std	Y+6, r21	; 0x06
     5d4:	6f 83       	std	Y+7, r22	; 0x07
     5d6:	78 87       	std	Y+8, r23	; 0x08
     5d8:	89 87       	std	Y+9, r24	; 0x09
     5da:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	8a 83       	std	Y+2, r24	; 0x02
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	88 2f       	mov	r24, r24
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	2d 85       	ldd	r18, Y+13	; 0x0d
     5ea:	3e 85       	ldd	r19, Y+14	; 0x0e
     5ec:	82 0f       	add	r24, r18
     5ee:	93 1f       	adc	r25, r19
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	09 f0       	breq	.+2      	; 0x5fa <Convert_StringTou16+0x19a>
     5f8:	68 cf       	rjmp	.-304    	; 0x4ca <Convert_StringTou16+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     5fa:	2b 81       	ldd	r18, Y+3	; 0x03
     5fc:	3c 81       	ldd	r19, Y+4	; 0x04
     5fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     600:	9c 85       	ldd	r25, Y+12	; 0x0c
     602:	fc 01       	movw	r30, r24
     604:	31 83       	std	Z+1, r19	; 0x01
     606:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     608:	89 81       	ldd	r24, Y+1	; 0x01

}
     60a:	6e 96       	adiw	r28, 0x1e	; 30
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	df 90       	pop	r13
     624:	cf 90       	pop	r12
     626:	bf 90       	pop	r11
     628:	af 90       	pop	r10
     62a:	9f 90       	pop	r9
     62c:	8f 90       	pop	r8
     62e:	7f 90       	pop	r7
     630:	6f 90       	pop	r6
     632:	5f 90       	pop	r5
     634:	4f 90       	pop	r4
     636:	3f 90       	pop	r3
     638:	2f 90       	pop	r2
     63a:	08 95       	ret

0000063c <Convert_StringTou32>:


Std_StatusType Convert_StringTou32 (u32* Address_Number, pu8 Address_str){
     63c:	2f 92       	push	r2
     63e:	3f 92       	push	r3
     640:	4f 92       	push	r4
     642:	5f 92       	push	r5
     644:	6f 92       	push	r6
     646:	7f 92       	push	r7
     648:	8f 92       	push	r8
     64a:	9f 92       	push	r9
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	6e 97       	sbiw	r28, 0x1e	; 30
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	9c 87       	std	Y+12, r25	; 0x0c
     672:	8b 87       	std	Y+11, r24	; 0x0b
     674:	7e 87       	std	Y+14, r23	; 0x0e
     676:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     678:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     67a:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     67c:	1b 82       	std	Y+3, r1	; 0x03
     67e:	1c 82       	std	Y+4, r1	; 0x04
     680:	1d 82       	std	Y+5, r1	; 0x05
     682:	1e 82       	std	Y+6, r1	; 0x06
     684:	1f 82       	std	Y+7, r1	; 0x07
     686:	18 86       	std	Y+8, r1	; 0x08
     688:	19 86       	std	Y+9, r1	; 0x09
     68a:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     68c:	8d 85       	ldd	r24, Y+13	; 0x0d
     68e:	9e 85       	ldd	r25, Y+14	; 0x0e
     690:	89 2b       	or	r24, r25
     692:	21 f0       	breq	.+8      	; 0x69c <Convert_StringTou32+0x60>
     694:	8b 85       	ldd	r24, Y+11	; 0x0b
     696:	9c 85       	ldd	r25, Y+12	; 0x0c
     698:	89 2b       	or	r24, r25
     69a:	19 f4       	brne	.+6      	; 0x6a2 <Convert_StringTou32+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	a5 c0       	rjmp	.+330    	; 0x7ec <Convert_StringTou32+0x1b0>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     6a2:	1a 82       	std	Y+2, r1	; 0x02
     6a4:	8c c0       	rjmp	.+280    	; 0x7be <Convert_StringTou32+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     6a6:	2b 81       	ldd	r18, Y+3	; 0x03
     6a8:	3c 81       	ldd	r19, Y+4	; 0x04
     6aa:	4d 81       	ldd	r20, Y+5	; 0x05
     6ac:	5e 81       	ldd	r21, Y+6	; 0x06
     6ae:	6f 81       	ldd	r22, Y+7	; 0x07
     6b0:	78 85       	ldd	r23, Y+8	; 0x08
     6b2:	89 85       	ldd	r24, Y+9	; 0x09
     6b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b6:	22 2e       	mov	r2, r18
     6b8:	33 2e       	mov	r3, r19
     6ba:	44 2e       	mov	r4, r20
     6bc:	55 2e       	mov	r5, r21
     6be:	66 2e       	mov	r6, r22
     6c0:	77 2e       	mov	r7, r23
     6c2:	88 2e       	mov	r8, r24
     6c4:	99 2e       	mov	r9, r25
     6c6:	22 2d       	mov	r18, r2
     6c8:	33 2d       	mov	r19, r3
     6ca:	44 2d       	mov	r20, r4
     6cc:	55 2d       	mov	r21, r5
     6ce:	66 2d       	mov	r22, r6
     6d0:	77 2d       	mov	r23, r7
     6d2:	88 2d       	mov	r24, r8
     6d4:	99 2d       	mov	r25, r9
     6d6:	01 e0       	ldi	r16, 0x01	; 1
     6d8:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <__ashldi3>
     6dc:	a2 2e       	mov	r10, r18
     6de:	b3 2e       	mov	r11, r19
     6e0:	c4 2e       	mov	r12, r20
     6e2:	d5 2e       	mov	r13, r21
     6e4:	e6 2e       	mov	r14, r22
     6e6:	f7 2e       	mov	r15, r23
     6e8:	08 2f       	mov	r16, r24
     6ea:	19 2f       	mov	r17, r25
     6ec:	2a 2c       	mov	r2, r10
     6ee:	3b 2c       	mov	r3, r11
     6f0:	4c 2c       	mov	r4, r12
     6f2:	5d 2c       	mov	r5, r13
     6f4:	6e 2c       	mov	r6, r14
     6f6:	7f 2c       	mov	r7, r15
     6f8:	80 2e       	mov	r8, r16
     6fa:	91 2e       	mov	r9, r17
     6fc:	22 2d       	mov	r18, r2
     6fe:	33 2d       	mov	r19, r3
     700:	44 2d       	mov	r20, r4
     702:	55 2d       	mov	r21, r5
     704:	66 2d       	mov	r22, r6
     706:	77 2d       	mov	r23, r7
     708:	88 2d       	mov	r24, r8
     70a:	99 2d       	mov	r25, r9
     70c:	02 e0       	ldi	r16, 0x02	; 2
     70e:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <__ashldi3>
     712:	2f 8b       	std	Y+23, r18	; 0x17
     714:	38 8f       	std	Y+24, r19	; 0x18
     716:	49 8f       	std	Y+25, r20	; 0x19
     718:	5a 8f       	std	Y+26, r21	; 0x1a
     71a:	6b 8f       	std	Y+27, r22	; 0x1b
     71c:	7c 8f       	std	Y+28, r23	; 0x1c
     71e:	8d 8f       	std	Y+29, r24	; 0x1d
     720:	9e 8f       	std	Y+30, r25	; 0x1e
     722:	22 2d       	mov	r18, r2
     724:	33 2d       	mov	r19, r3
     726:	44 2d       	mov	r20, r4
     728:	55 2d       	mov	r21, r5
     72a:	66 2d       	mov	r22, r6
     72c:	77 2d       	mov	r23, r7
     72e:	88 2d       	mov	r24, r8
     730:	99 2d       	mov	r25, r9
     732:	af 88       	ldd	r10, Y+23	; 0x17
     734:	b8 8c       	ldd	r11, Y+24	; 0x18
     736:	c9 8c       	ldd	r12, Y+25	; 0x19
     738:	da 8c       	ldd	r13, Y+26	; 0x1a
     73a:	eb 8c       	ldd	r14, Y+27	; 0x1b
     73c:	fc 8c       	ldd	r15, Y+28	; 0x1c
     73e:	0d 8d       	ldd	r16, Y+29	; 0x1d
     740:	1e 8d       	ldd	r17, Y+30	; 0x1e
     742:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <__adddi3>
     746:	a2 2e       	mov	r10, r18
     748:	b3 2e       	mov	r11, r19
     74a:	c4 2e       	mov	r12, r20
     74c:	d5 2e       	mov	r13, r21
     74e:	e6 2e       	mov	r14, r22
     750:	f7 2e       	mov	r15, r23
     752:	08 2f       	mov	r16, r24
     754:	19 2f       	mov	r17, r25
     756:	8a 81       	ldd	r24, Y+2	; 0x02
     758:	88 2f       	mov	r24, r24
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	2d 85       	ldd	r18, Y+13	; 0x0d
     75e:	3e 85       	ldd	r19, Y+14	; 0x0e
     760:	82 0f       	add	r24, r18
     762:	93 1f       	adc	r25, r19
     764:	fc 01       	movw	r30, r24
     766:	80 81       	ld	r24, Z
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	c0 97       	sbiw	r24, 0x30	; 48
     76e:	98 8b       	std	Y+16, r25	; 0x10
     770:	8f 87       	std	Y+15, r24	; 0x0f
     772:	89 2f       	mov	r24, r25
     774:	88 0f       	add	r24, r24
     776:	88 0b       	sbc	r24, r24
     778:	89 8b       	std	Y+17, r24	; 0x11
     77a:	8a 8b       	std	Y+18, r24	; 0x12
     77c:	8b 8b       	std	Y+19, r24	; 0x13
     77e:	8c 8b       	std	Y+20, r24	; 0x14
     780:	8d 8b       	std	Y+21, r24	; 0x15
     782:	8e 8b       	std	Y+22, r24	; 0x16
     784:	2a 2d       	mov	r18, r10
     786:	3b 2d       	mov	r19, r11
     788:	4c 2d       	mov	r20, r12
     78a:	5d 2d       	mov	r21, r13
     78c:	6e 2d       	mov	r22, r14
     78e:	7f 2d       	mov	r23, r15
     790:	80 2f       	mov	r24, r16
     792:	91 2f       	mov	r25, r17
     794:	af 84       	ldd	r10, Y+15	; 0x0f
     796:	b8 88       	ldd	r11, Y+16	; 0x10
     798:	c9 88       	ldd	r12, Y+17	; 0x11
     79a:	da 88       	ldd	r13, Y+18	; 0x12
     79c:	eb 88       	ldd	r14, Y+19	; 0x13
     79e:	fc 88       	ldd	r15, Y+20	; 0x14
     7a0:	0d 89       	ldd	r16, Y+21	; 0x15
     7a2:	1e 89       	ldd	r17, Y+22	; 0x16
     7a4:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <__adddi3>
     7a8:	2b 83       	std	Y+3, r18	; 0x03
     7aa:	3c 83       	std	Y+4, r19	; 0x04
     7ac:	4d 83       	std	Y+5, r20	; 0x05
     7ae:	5e 83       	std	Y+6, r21	; 0x06
     7b0:	6f 83       	std	Y+7, r22	; 0x07
     7b2:	78 87       	std	Y+8, r23	; 0x08
     7b4:	89 87       	std	Y+9, r24	; 0x09
     7b6:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     7b8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ba:	8f 5f       	subi	r24, 0xFF	; 255
     7bc:	8a 83       	std	Y+2, r24	; 0x02
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	88 2f       	mov	r24, r24
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	2d 85       	ldd	r18, Y+13	; 0x0d
     7c6:	3e 85       	ldd	r19, Y+14	; 0x0e
     7c8:	82 0f       	add	r24, r18
     7ca:	93 1f       	adc	r25, r19
     7cc:	fc 01       	movw	r30, r24
     7ce:	80 81       	ld	r24, Z
     7d0:	88 23       	and	r24, r24
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <Convert_StringTou32+0x19a>
     7d4:	68 cf       	rjmp	.-304    	; 0x6a6 <Convert_StringTou32+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	ad 81       	ldd	r26, Y+5	; 0x05
     7dc:	be 81       	ldd	r27, Y+6	; 0x06
     7de:	2b 85       	ldd	r18, Y+11	; 0x0b
     7e0:	3c 85       	ldd	r19, Y+12	; 0x0c
     7e2:	f9 01       	movw	r30, r18
     7e4:	80 83       	st	Z, r24
     7e6:	91 83       	std	Z+1, r25	; 0x01
     7e8:	a2 83       	std	Z+2, r26	; 0x02
     7ea:	b3 83       	std	Z+3, r27	; 0x03
			}

			return Loc_enuStatus;
     7ec:	89 81       	ldd	r24, Y+1	; 0x01

}
     7ee:	6e 96       	adiw	r28, 0x1e	; 30
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	bf 90       	pop	r11
     80c:	af 90       	pop	r10
     80e:	9f 90       	pop	r9
     810:	8f 90       	pop	r8
     812:	7f 90       	pop	r7
     814:	6f 90       	pop	r6
     816:	5f 90       	pop	r5
     818:	4f 90       	pop	r4
     81a:	3f 90       	pop	r3
     81c:	2f 90       	pop	r2
     81e:	08 95       	ret

00000820 <Convert_StringTou64>:


Std_StatusType Convert_StringTou64 (u64* Address_Number, pu8 Address_str){
     820:	2f 92       	push	r2
     822:	3f 92       	push	r3
     824:	4f 92       	push	r4
     826:	5f 92       	push	r5
     828:	6f 92       	push	r6
     82a:	7f 92       	push	r7
     82c:	8f 92       	push	r8
     82e:	9f 92       	push	r9
     830:	af 92       	push	r10
     832:	bf 92       	push	r11
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	6e 97       	sbiw	r28, 0x1e	; 30
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	9c 87       	std	Y+12, r25	; 0x0c
     856:	8b 87       	std	Y+11, r24	; 0x0b
     858:	7e 87       	std	Y+14, r23	; 0x0e
     85a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     85c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     85e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     860:	1b 82       	std	Y+3, r1	; 0x03
     862:	1c 82       	std	Y+4, r1	; 0x04
     864:	1d 82       	std	Y+5, r1	; 0x05
     866:	1e 82       	std	Y+6, r1	; 0x06
     868:	1f 82       	std	Y+7, r1	; 0x07
     86a:	18 86       	std	Y+8, r1	; 0x08
     86c:	19 86       	std	Y+9, r1	; 0x09
     86e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     870:	8d 85       	ldd	r24, Y+13	; 0x0d
     872:	9e 85       	ldd	r25, Y+14	; 0x0e
     874:	89 2b       	or	r24, r25
     876:	21 f0       	breq	.+8      	; 0x880 <__stack+0x21>
     878:	8b 85       	ldd	r24, Y+11	; 0x0b
     87a:	9c 85       	ldd	r25, Y+12	; 0x0c
     87c:	89 2b       	or	r24, r25
     87e:	19 f4       	brne	.+6      	; 0x886 <__stack+0x27>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	b4 c0       	rjmp	.+360    	; 0x9ee <__stack+0x18f>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     886:	1a 82       	std	Y+2, r1	; 0x02
     888:	8c c0       	rjmp	.+280    	; 0x9a2 <__stack+0x143>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     88a:	2b 81       	ldd	r18, Y+3	; 0x03
     88c:	3c 81       	ldd	r19, Y+4	; 0x04
     88e:	4d 81       	ldd	r20, Y+5	; 0x05
     890:	5e 81       	ldd	r21, Y+6	; 0x06
     892:	6f 81       	ldd	r22, Y+7	; 0x07
     894:	78 85       	ldd	r23, Y+8	; 0x08
     896:	89 85       	ldd	r24, Y+9	; 0x09
     898:	9a 85       	ldd	r25, Y+10	; 0x0a
     89a:	22 2e       	mov	r2, r18
     89c:	33 2e       	mov	r3, r19
     89e:	44 2e       	mov	r4, r20
     8a0:	55 2e       	mov	r5, r21
     8a2:	66 2e       	mov	r6, r22
     8a4:	77 2e       	mov	r7, r23
     8a6:	88 2e       	mov	r8, r24
     8a8:	99 2e       	mov	r9, r25
     8aa:	22 2d       	mov	r18, r2
     8ac:	33 2d       	mov	r19, r3
     8ae:	44 2d       	mov	r20, r4
     8b0:	55 2d       	mov	r21, r5
     8b2:	66 2d       	mov	r22, r6
     8b4:	77 2d       	mov	r23, r7
     8b6:	88 2d       	mov	r24, r8
     8b8:	99 2d       	mov	r25, r9
     8ba:	01 e0       	ldi	r16, 0x01	; 1
     8bc:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <__ashldi3>
     8c0:	a2 2e       	mov	r10, r18
     8c2:	b3 2e       	mov	r11, r19
     8c4:	c4 2e       	mov	r12, r20
     8c6:	d5 2e       	mov	r13, r21
     8c8:	e6 2e       	mov	r14, r22
     8ca:	f7 2e       	mov	r15, r23
     8cc:	08 2f       	mov	r16, r24
     8ce:	19 2f       	mov	r17, r25
     8d0:	2a 2c       	mov	r2, r10
     8d2:	3b 2c       	mov	r3, r11
     8d4:	4c 2c       	mov	r4, r12
     8d6:	5d 2c       	mov	r5, r13
     8d8:	6e 2c       	mov	r6, r14
     8da:	7f 2c       	mov	r7, r15
     8dc:	80 2e       	mov	r8, r16
     8de:	91 2e       	mov	r9, r17
     8e0:	22 2d       	mov	r18, r2
     8e2:	33 2d       	mov	r19, r3
     8e4:	44 2d       	mov	r20, r4
     8e6:	55 2d       	mov	r21, r5
     8e8:	66 2d       	mov	r22, r6
     8ea:	77 2d       	mov	r23, r7
     8ec:	88 2d       	mov	r24, r8
     8ee:	99 2d       	mov	r25, r9
     8f0:	02 e0       	ldi	r16, 0x02	; 2
     8f2:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <__ashldi3>
     8f6:	2f 8b       	std	Y+23, r18	; 0x17
     8f8:	38 8f       	std	Y+24, r19	; 0x18
     8fa:	49 8f       	std	Y+25, r20	; 0x19
     8fc:	5a 8f       	std	Y+26, r21	; 0x1a
     8fe:	6b 8f       	std	Y+27, r22	; 0x1b
     900:	7c 8f       	std	Y+28, r23	; 0x1c
     902:	8d 8f       	std	Y+29, r24	; 0x1d
     904:	9e 8f       	std	Y+30, r25	; 0x1e
     906:	22 2d       	mov	r18, r2
     908:	33 2d       	mov	r19, r3
     90a:	44 2d       	mov	r20, r4
     90c:	55 2d       	mov	r21, r5
     90e:	66 2d       	mov	r22, r6
     910:	77 2d       	mov	r23, r7
     912:	88 2d       	mov	r24, r8
     914:	99 2d       	mov	r25, r9
     916:	af 88       	ldd	r10, Y+23	; 0x17
     918:	b8 8c       	ldd	r11, Y+24	; 0x18
     91a:	c9 8c       	ldd	r12, Y+25	; 0x19
     91c:	da 8c       	ldd	r13, Y+26	; 0x1a
     91e:	eb 8c       	ldd	r14, Y+27	; 0x1b
     920:	fc 8c       	ldd	r15, Y+28	; 0x1c
     922:	0d 8d       	ldd	r16, Y+29	; 0x1d
     924:	1e 8d       	ldd	r17, Y+30	; 0x1e
     926:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <__adddi3>
     92a:	a2 2e       	mov	r10, r18
     92c:	b3 2e       	mov	r11, r19
     92e:	c4 2e       	mov	r12, r20
     930:	d5 2e       	mov	r13, r21
     932:	e6 2e       	mov	r14, r22
     934:	f7 2e       	mov	r15, r23
     936:	08 2f       	mov	r16, r24
     938:	19 2f       	mov	r17, r25
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	88 2f       	mov	r24, r24
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	2d 85       	ldd	r18, Y+13	; 0x0d
     942:	3e 85       	ldd	r19, Y+14	; 0x0e
     944:	82 0f       	add	r24, r18
     946:	93 1f       	adc	r25, r19
     948:	fc 01       	movw	r30, r24
     94a:	80 81       	ld	r24, Z
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	c0 97       	sbiw	r24, 0x30	; 48
     952:	98 8b       	std	Y+16, r25	; 0x10
     954:	8f 87       	std	Y+15, r24	; 0x0f
     956:	89 2f       	mov	r24, r25
     958:	88 0f       	add	r24, r24
     95a:	88 0b       	sbc	r24, r24
     95c:	89 8b       	std	Y+17, r24	; 0x11
     95e:	8a 8b       	std	Y+18, r24	; 0x12
     960:	8b 8b       	std	Y+19, r24	; 0x13
     962:	8c 8b       	std	Y+20, r24	; 0x14
     964:	8d 8b       	std	Y+21, r24	; 0x15
     966:	8e 8b       	std	Y+22, r24	; 0x16
     968:	2a 2d       	mov	r18, r10
     96a:	3b 2d       	mov	r19, r11
     96c:	4c 2d       	mov	r20, r12
     96e:	5d 2d       	mov	r21, r13
     970:	6e 2d       	mov	r22, r14
     972:	7f 2d       	mov	r23, r15
     974:	80 2f       	mov	r24, r16
     976:	91 2f       	mov	r25, r17
     978:	af 84       	ldd	r10, Y+15	; 0x0f
     97a:	b8 88       	ldd	r11, Y+16	; 0x10
     97c:	c9 88       	ldd	r12, Y+17	; 0x11
     97e:	da 88       	ldd	r13, Y+18	; 0x12
     980:	eb 88       	ldd	r14, Y+19	; 0x13
     982:	fc 88       	ldd	r15, Y+20	; 0x14
     984:	0d 89       	ldd	r16, Y+21	; 0x15
     986:	1e 89       	ldd	r17, Y+22	; 0x16
     988:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <__adddi3>
     98c:	2b 83       	std	Y+3, r18	; 0x03
     98e:	3c 83       	std	Y+4, r19	; 0x04
     990:	4d 83       	std	Y+5, r20	; 0x05
     992:	5e 83       	std	Y+6, r21	; 0x06
     994:	6f 83       	std	Y+7, r22	; 0x07
     996:	78 87       	std	Y+8, r23	; 0x08
     998:	89 87       	std	Y+9, r24	; 0x09
     99a:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	8f 5f       	subi	r24, 0xFF	; 255
     9a0:	8a 83       	std	Y+2, r24	; 0x02
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	2d 85       	ldd	r18, Y+13	; 0x0d
     9aa:	3e 85       	ldd	r19, Y+14	; 0x0e
     9ac:	82 0f       	add	r24, r18
     9ae:	93 1f       	adc	r25, r19
     9b0:	fc 01       	movw	r30, r24
     9b2:	80 81       	ld	r24, Z
     9b4:	88 23       	and	r24, r24
     9b6:	09 f0       	breq	.+2      	; 0x9ba <__stack+0x15b>
     9b8:	68 cf       	rjmp	.-304    	; 0x88a <__stack+0x2b>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     9ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     9bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     9be:	2b 81       	ldd	r18, Y+3	; 0x03
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18
     9c4:	2c 81       	ldd	r18, Y+4	; 0x04
     9c6:	fc 01       	movw	r30, r24
     9c8:	21 83       	std	Z+1, r18	; 0x01
     9ca:	2d 81       	ldd	r18, Y+5	; 0x05
     9cc:	fc 01       	movw	r30, r24
     9ce:	22 83       	std	Z+2, r18	; 0x02
     9d0:	2e 81       	ldd	r18, Y+6	; 0x06
     9d2:	fc 01       	movw	r30, r24
     9d4:	23 83       	std	Z+3, r18	; 0x03
     9d6:	2f 81       	ldd	r18, Y+7	; 0x07
     9d8:	fc 01       	movw	r30, r24
     9da:	24 83       	std	Z+4, r18	; 0x04
     9dc:	28 85       	ldd	r18, Y+8	; 0x08
     9de:	fc 01       	movw	r30, r24
     9e0:	25 83       	std	Z+5, r18	; 0x05
     9e2:	29 85       	ldd	r18, Y+9	; 0x09
     9e4:	fc 01       	movw	r30, r24
     9e6:	26 83       	std	Z+6, r18	; 0x06
     9e8:	2a 85       	ldd	r18, Y+10	; 0x0a
     9ea:	fc 01       	movw	r30, r24
     9ec:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     9ee:	89 81       	ldd	r24, Y+1	; 0x01

}
     9f0:	6e 96       	adiw	r28, 0x1e	; 30
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	7f 90       	pop	r7
     a16:	6f 90       	pop	r6
     a18:	5f 90       	pop	r5
     a1a:	4f 90       	pop	r4
     a1c:	3f 90       	pop	r3
     a1e:	2f 90       	pop	r2
     a20:	08 95       	ret

00000a22 <Convert_BCDToInt>:


Std_StatusType Convert_BCDToInt(u8 Copy_u8BCDdata, u8* Address_Asnwer){
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	00 d0       	rcall	.+0      	; 0xa28 <Convert_BCDToInt+0x6>
     a28:	00 d0       	rcall	.+0      	; 0xa2a <Convert_BCDToInt+0x8>
     a2a:	1f 92       	push	r1
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	8b 83       	std	Y+3, r24	; 0x03
     a32:	7d 83       	std	Y+5, r23	; 0x05
     a34:	6c 83       	std	Y+4, r22	; 0x04
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     a36:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ONE_VALUE;
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == Address_Asnwer){
     a3c:	8c 81       	ldd	r24, Y+4	; 0x04
     a3e:	9d 81       	ldd	r25, Y+5	; 0x05
     a40:	89 2b       	or	r24, r25
     a42:	19 f4       	brne	.+6      	; 0xa4a <Convert_BCDToInt+0x28>
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	1d c0       	rjmp	.+58     	; 0xa84 <Convert_BCDToInt+0x62>
	}
	else{
		*Address_Asnwer = ZERO_VALUE;
     a4a:	8c 81       	ldd	r24, Y+4	; 0x04
     a4c:	9d 81       	ldd	r25, Y+5	; 0x05
     a4e:	fc 01       	movw	r30, r24
     a50:	10 82       	st	Z, r1

			*Address_Asnwer = GET_HIGHEST_NIBBLE(Copy_u8BCDdata);
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	28 2f       	mov	r18, r24
     a56:	22 95       	swap	r18
     a58:	2f 70       	andi	r18, 0x0F	; 15
     a5a:	8c 81       	ldd	r24, Y+4	; 0x04
     a5c:	9d 81       	ldd	r25, Y+5	; 0x05
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
			(*Address_Asnwer) =(*Address_Asnwer)*10 + GET_LOWEST_NIBBLE(Copy_u8BCDdata);
     a62:	8c 81       	ldd	r24, Y+4	; 0x04
     a64:	9d 81       	ldd	r25, Y+5	; 0x05
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	88 0f       	add	r24, r24
     a6c:	98 2f       	mov	r25, r24
     a6e:	99 0f       	add	r25, r25
     a70:	99 0f       	add	r25, r25
     a72:	98 0f       	add	r25, r24
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	8f 70       	andi	r24, 0x0F	; 15
     a78:	29 2f       	mov	r18, r25
     a7a:	28 0f       	add	r18, r24
     a7c:	8c 81       	ldd	r24, Y+4	; 0x04
     a7e:	9d 81       	ldd	r25, Y+5	; 0x05
     a80:	fc 01       	movw	r30, r24
     a82:	20 83       	st	Z, r18



	}

	return Loc_enuStatus;
     a84:	89 81       	ldd	r24, Y+1	; 0x01

}
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <Convert_VoltToTempLm35>:

Std_StatusType Convert_VoltToTempLm35(f32 Copy_f32Volt, u16* Address_Result){
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	cd b7       	in	r28, 0x3d	; 61
     a9c:	de b7       	in	r29, 0x3e	; 62
     a9e:	27 97       	sbiw	r28, 0x07	; 7
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	6a 83       	std	Y+2, r22	; 0x02
     aac:	7b 83       	std	Y+3, r23	; 0x03
     aae:	8c 83       	std	Y+4, r24	; 0x04
     ab0:	9d 83       	std	Y+5, r25	; 0x05
     ab2:	5f 83       	std	Y+7, r21	; 0x07
     ab4:	4e 83       	std	Y+6, r20	; 0x06
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     ab6:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Address_Result){
     ab8:	8e 81       	ldd	r24, Y+6	; 0x06
     aba:	9f 81       	ldd	r25, Y+7	; 0x07
     abc:	89 2b       	or	r24, r25
     abe:	19 f4       	brne	.+6      	; 0xac6 <Convert_VoltToTempLm35+0x30>
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	18 c0       	rjmp	.+48     	; 0xaf6 <Convert_VoltToTempLm35+0x60>
	}
	else{
		*Address_Result = Copy_f32Volt*100;
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	48 ec       	ldi	r20, 0xC8	; 200
     acc:	52 e4       	ldi	r21, 0x42	; 66
     ace:	6a 81       	ldd	r22, Y+2	; 0x02
     ad0:	7b 81       	ldd	r23, Y+3	; 0x03
     ad2:	8c 81       	ldd	r24, Y+4	; 0x04
     ad4:	9d 81       	ldd	r25, Y+5	; 0x05
     ad6:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
     ada:	dc 01       	movw	r26, r24
     adc:	cb 01       	movw	r24, r22
     ade:	bc 01       	movw	r22, r24
     ae0:	cd 01       	movw	r24, r26
     ae2:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9c 01       	movw	r18, r24
     aec:	8e 81       	ldd	r24, Y+6	; 0x06
     aee:	9f 81       	ldd	r25, Y+7	; 0x07
     af0:	fc 01       	movw	r30, r24
     af2:	31 83       	std	Z+1, r19	; 0x01
     af4:	20 83       	st	Z, r18

	}

	return Loc_enuStatus;
     af6:	89 81       	ldd	r24, Y+1	; 0x01
}
     af8:	27 96       	adiw	r28, 0x07	; 7
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <Wtd_enuSleep>:



/********************************** Software Interfaces Declarations *******************/

Wtd_StatusErrorType Wtd_enuSleep (Wtd_SelectSleepTime Copy_enuSleepTime){
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <Wtd_enuSleep+0x6>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	8a 83       	std	Y+2, r24	; 0x02
	Wtd_StatusErrorType Loc_enuWtdStatus = WTD_STATUS_OK;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	89 83       	std	Y+1, r24	; 0x01

	Wtd_Enable(Copy_enuSleepTime);
     b1a:	81 e4       	ldi	r24, 0x41	; 65
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	21 e4       	ldi	r18, 0x41	; 65
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	32 2f       	mov	r19, r18
     b28:	30 7e       	andi	r19, 0xE0	; 224
     b2a:	2a 81       	ldd	r18, Y+2	; 0x02
     b2c:	23 2b       	or	r18, r19
     b2e:	28 60       	ori	r18, 0x08	; 8
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18

			return Loc_enuWtdStatus;
     b34:	89 81       	ldd	r24, Y+1	; 0x01
}
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <Wtd_enuDisable>:

Wtd_StatusErrorType Wtd_enuDisable (void){
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	1f 92       	push	r1
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62

	Wtd_StatusErrorType Loc_enuWtdStatus = WTD_STATUS_OK;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	89 83       	std	Y+1, r24	; 0x01
	Wtd_Disable();
     b4e:	81 e4       	ldi	r24, 0x41	; 65
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	21 e4       	ldi	r18, 0x41	; 65
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	f9 01       	movw	r30, r18
     b58:	20 81       	ld	r18, Z
     b5a:	20 7e       	andi	r18, 0xE0	; 224
     b5c:	28 61       	ori	r18, 0x18	; 24
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
     b62:	81 e4       	ldi	r24, 0x41	; 65
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	fc 01       	movw	r30, r24
     b68:	10 82       	st	Z, r1



	return Loc_enuWtdStatus;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     b6c:	0f 90       	pop	r0
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <Usart_enuInit>:




/********************************** Software Interfaces Declarations *******************/
Usart_StatusErrorType Usart_enuInit(const Usart_ConfigType* Address_Usart){
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	00 d0       	rcall	.+0      	; 0xb7a <Usart_enuInit+0x6>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <Usart_enuInit+0x8>
     b7c:	1f 92       	push	r1
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	9d 83       	std	Y+5, r25	; 0x05
     b84:	8c 83       	std	Y+4, r24	; 0x04

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	89 83       	std	Y+1, r24	; 0x01
	u16 Loc_u16BuadRateEquation ;

	if(Address_Usart == NULL){
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	89 2b       	or	r24, r25
     b90:	19 f4       	brne	.+6      	; 0xb98 <Usart_enuInit+0x24>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	bc c0       	rjmp	.+376    	; 0xd10 <Usart_enuInit+0x19c>
	}
	else{

		/* Enable Tx, RX */
		SET_BIT(UCSRB ,UCSRB_RX_EN_BIT );
     b98:	8a e2       	ldi	r24, 0x2A	; 42
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	2a e2       	ldi	r18, 0x2A	; 42
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	f9 01       	movw	r30, r18
     ba2:	20 81       	ld	r18, Z
     ba4:	20 61       	ori	r18, 0x10	; 16
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
		SET_BIT(UCSRB ,UCSRB_TX_EN_BIT );
     baa:	8a e2       	ldi	r24, 0x2A	; 42
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	2a e2       	ldi	r18, 0x2A	; 42
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	f9 01       	movw	r30, r18
     bb4:	20 81       	ld	r18, Z
     bb6:	28 60       	ori	r18, 0x08	; 8
     bb8:	fc 01       	movw	r30, r24
     bba:	20 83       	st	Z, r18


		/* Select Data Size */
		Usart_SelectCharacterSize(Address_Usart->character_size);
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	20 e4       	ldi	r18, 0x40	; 64
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	f9 01       	movw	r30, r18
     bc6:	20 81       	ld	r18, Z
     bc8:	20 68       	ori	r18, 0x80	; 128
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
     bce:	80 e4       	ldi	r24, 0x40	; 64
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	20 e4       	ldi	r18, 0x40	; 64
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	f9 01       	movw	r30, r18
     bd8:	20 81       	ld	r18, Z
     bda:	42 2f       	mov	r20, r18
     bdc:	49 7f       	andi	r20, 0xF9	; 249
     bde:	2c 81       	ldd	r18, Y+4	; 0x04
     be0:	3d 81       	ldd	r19, Y+5	; 0x05
     be2:	f9 01       	movw	r30, r18
     be4:	20 81       	ld	r18, Z
     be6:	22 2f       	mov	r18, r18
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	26 70       	andi	r18, 0x06	; 6
     bf0:	24 2b       	or	r18, r20
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
     bf6:	8a e2       	ldi	r24, 0x2A	; 42
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	2a e2       	ldi	r18, 0x2A	; 42
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	f9 01       	movw	r30, r18
     c00:	20 81       	ld	r18, Z
     c02:	42 2f       	mov	r20, r18
     c04:	4b 7f       	andi	r20, 0xFB	; 251
     c06:	2c 81       	ldd	r18, Y+4	; 0x04
     c08:	3d 81       	ldd	r19, Y+5	; 0x05
     c0a:	f9 01       	movw	r30, r18
     c0c:	20 81       	ld	r18, Z
     c0e:	24 70       	andi	r18, 0x04	; 4
     c10:	24 2b       	or	r18, r20
     c12:	fc 01       	movw	r30, r24
     c14:	20 83       	st	Z, r18

		/* Select Parity Bit */
		Usart_SelectParityBitConfg(Address_Usart->parity_bits);
     c16:	80 e4       	ldi	r24, 0x40	; 64
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	20 e4       	ldi	r18, 0x40	; 64
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	f9 01       	movw	r30, r18
     c20:	20 81       	ld	r18, Z
     c22:	42 2f       	mov	r20, r18
     c24:	4f 7c       	andi	r20, 0xCF	; 207
     c26:	2c 81       	ldd	r18, Y+4	; 0x04
     c28:	3d 81       	ldd	r19, Y+5	; 0x05
     c2a:	f9 01       	movw	r30, r18
     c2c:	23 81       	ldd	r18, Z+3	; 0x03
     c2e:	22 2f       	mov	r18, r18
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	22 95       	swap	r18
     c34:	32 95       	swap	r19
     c36:	30 7f       	andi	r19, 0xF0	; 240
     c38:	32 27       	eor	r19, r18
     c3a:	20 7f       	andi	r18, 0xF0	; 240
     c3c:	32 27       	eor	r19, r18
     c3e:	24 2b       	or	r18, r20
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18

		/* Select STOP Bit */
		Usart_SelectStopBitConfig(Address_Usart->stop_bits);
     c44:	80 e4       	ldi	r24, 0x40	; 64
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	20 e4       	ldi	r18, 0x40	; 64
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	f9 01       	movw	r30, r18
     c4e:	20 81       	ld	r18, Z
     c50:	42 2f       	mov	r20, r18
     c52:	47 7f       	andi	r20, 0xF7	; 247
     c54:	2c 81       	ldd	r18, Y+4	; 0x04
     c56:	3d 81       	ldd	r19, Y+5	; 0x05
     c58:	f9 01       	movw	r30, r18
     c5a:	22 81       	ldd	r18, Z+2	; 0x02
     c5c:	22 2f       	mov	r18, r18
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	22 0f       	add	r18, r18
     c62:	33 1f       	adc	r19, r19
     c64:	22 0f       	add	r18, r18
     c66:	33 1f       	adc	r19, r19
     c68:	22 0f       	add	r18, r18
     c6a:	33 1f       	adc	r19, r19
     c6c:	24 2b       	or	r18, r20
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18

		/* Select Sync Mode */
		Usart_SelectStopBitConfig(Address_Usart->stop_bits);
     c72:	80 e4       	ldi	r24, 0x40	; 64
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	20 e4       	ldi	r18, 0x40	; 64
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	f9 01       	movw	r30, r18
     c7c:	20 81       	ld	r18, Z
     c7e:	42 2f       	mov	r20, r18
     c80:	47 7f       	andi	r20, 0xF7	; 247
     c82:	2c 81       	ldd	r18, Y+4	; 0x04
     c84:	3d 81       	ldd	r19, Y+5	; 0x05
     c86:	f9 01       	movw	r30, r18
     c88:	22 81       	ldd	r18, Z+2	; 0x02
     c8a:	22 2f       	mov	r18, r18
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	24 2b       	or	r18, r20
     c9c:	fc 01       	movw	r30, r24
     c9e:	20 83       	st	Z, r18


//		Usart_SelectUbbrhReg();
		switch(Address_Usart->sync_mode){
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
     ca2:	9d 81       	ldd	r25, Y+5	; 0x05
     ca4:	fc 01       	movw	r30, r24
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	89 2b       	or	r24, r25
     cae:	79 f5       	brne	.+94     	; 0xd0e <Usart_enuInit+0x19a>

			case USAR_SELECT_ASYNCHRONOUS_MODE:
				Loc_u16BuadRateEquation = (USART_F_CPU/16.0/Address_Usart->baude_rate)-1;
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	9d 81       	ldd	r25, Y+5	; 0x05
     cb4:	fc 01       	movw	r30, r24
     cb6:	84 81       	ldd	r24, Z+4	; 0x04
     cb8:	95 81       	ldd	r25, Z+5	; 0x05
     cba:	a6 81       	ldd	r26, Z+6	; 0x06
     cbc:	b7 81       	ldd	r27, Z+7	; 0x07
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	9c 01       	movw	r18, r24
     ccc:	ad 01       	movw	r20, r26
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	74 e2       	ldi	r23, 0x24	; 36
     cd2:	84 e7       	ldi	r24, 0x74	; 116
     cd4:	99 e4       	ldi	r25, 0x49	; 73
     cd6:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	bc 01       	movw	r22, r24
     ce8:	cd 01       	movw	r24, r26
     cea:	0e 94 fb 36 	call	0x6df6	; 0x6df6 <__subsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	bc 01       	movw	r22, r24
     cf4:	cd 01       	movw	r24, r26
     cf6:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	9b 83       	std	Y+3, r25	; 0x03
     d00:	8a 83       	std	Y+2, r24	; 0x02
				ASSIGN_REG(UBRRL,(u8)Loc_u16BuadRateEquation);
     d02:	89 e2       	ldi	r24, 0x29	; 41
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	2a 81       	ldd	r18, Y+2	; 0x02
     d08:	fc 01       	movw	r30, r24
     d0a:	20 83       	st	Z, r18
//				ASSIGN_REG(UBRRH,((u8)Loc_u16BuadRateEquation)>>8);
				break;
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <Usart_enuInit+0x19c>

			case USAR_SELET_SYNCHRONOUS_MODE:

			break;
     d0e:	00 00       	nop

		}

	}
		return Loc_enuUsartStatus;
     d10:	89 81       	ldd	r24, Y+1	; 0x01
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <Usart_enuTransmitCharBlocking>:



Usart_StatusErrorType Usart_enuTransmitCharBlocking(const Usart_ConfigType* Address_Usart, u16 Copy_u16Data){
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	00 d0       	rcall	.+0      	; 0xd28 <Usart_enuTransmitCharBlocking+0x6>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <Usart_enuTransmitCharBlocking+0x8>
     d2a:	1f 92       	push	r1
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	9b 83       	std	Y+3, r25	; 0x03
     d32:	8a 83       	std	Y+2, r24	; 0x02
     d34:	7d 83       	std	Y+5, r23	; 0x05
     d36:	6c 83       	std	Y+4, r22	; 0x04

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	89 83       	std	Y+1, r24	; 0x01

	if(Address_Usart == NULL){
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	89 2b       	or	r24, r25
     d42:	19 f4       	brne	.+6      	; 0xd4a <Usart_enuTransmitCharBlocking+0x28>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	13 c0       	rjmp	.+38     	; 0xd70 <Usart_enuTransmitCharBlocking+0x4e>
	}
	else{

		while(Usart_IsRegisterDataEmpty() == ZERO_VALUE);
     d4a:	00 00       	nop
     d4c:	8b e2       	ldi	r24, 0x2B	; 43
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	fc 01       	movw	r30, r24
     d52:	80 81       	ld	r24, Z
     d54:	82 95       	swap	r24
     d56:	86 95       	lsr	r24
     d58:	87 70       	andi	r24, 0x07	; 7
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	81 70       	andi	r24, 0x01	; 1
     d60:	99 27       	eor	r25, r25
     d62:	89 2b       	or	r24, r25
     d64:	99 f3       	breq	.-26     	; 0xd4c <Usart_enuTransmitCharBlocking+0x2a>

			UDR = (u8)Copy_u16Data;
     d66:	8c e2       	ldi	r24, 0x2C	; 44
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	fc 01       	movw	r30, r24
     d6e:	20 83       	st	Z, r18
	}
		return Loc_enuUsartStatus;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <Usart_enuReceiveBlocking>:

Usart_StatusErrorType Usart_enuReceiveBlocking(const Usart_ConfigType* Address_Usart, u16* Address_Data){
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	00 d0       	rcall	.+0      	; 0xd88 <Usart_enuReceiveBlocking+0x6>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <Usart_enuReceiveBlocking+0x8>
     d8a:	1f 92       	push	r1
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	9b 83       	std	Y+3, r25	; 0x03
     d92:	8a 83       	std	Y+2, r24	; 0x02
     d94:	7d 83       	std	Y+5, r23	; 0x05
     d96:	6c 83       	std	Y+4, r22	; 0x04

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	89 83       	std	Y+1, r24	; 0x01

	if(Address_Usart == NULL || Address_Data == NULL){
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	9b 81       	ldd	r25, Y+3	; 0x03
     da0:	89 2b       	or	r24, r25
     da2:	21 f0       	breq	.+8      	; 0xdac <Usart_enuReceiveBlocking+0x2a>
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	9d 81       	ldd	r25, Y+5	; 0x05
     da8:	89 2b       	or	r24, r25
     daa:	19 f4       	brne	.+6      	; 0xdb2 <Usart_enuReceiveBlocking+0x30>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	19 c0       	rjmp	.+50     	; 0xde4 <Usart_enuReceiveBlocking+0x62>
	}
	else{

		while(Usart_IsRecevingDone() == ZERO_VALUE);
     db2:	00 00       	nop
     db4:	8b e2       	ldi	r24, 0x2B	; 43
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	88 1f       	adc	r24, r24
     dbe:	88 27       	eor	r24, r24
     dc0:	88 1f       	adc	r24, r24
     dc2:	88 2f       	mov	r24, r24
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	81 70       	andi	r24, 0x01	; 1
     dc8:	99 27       	eor	r25, r25
     dca:	89 2b       	or	r24, r25
     dcc:	99 f3       	breq	.-26     	; 0xdb4 <Usart_enuReceiveBlocking+0x32>

		*Address_Data = UDR ;
     dce:	8c e2       	ldi	r24, 0x2C	; 44
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	fc 01       	movw	r30, r24
     dd4:	80 81       	ld	r24, Z
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	fc 01       	movw	r30, r24
     de0:	31 83       	std	Z+1, r19	; 0x01
     de2:	20 83       	st	Z, r18
	}
		return Loc_enuUsartStatus;
     de4:	89 81       	ldd	r24, Y+1	; 0x01
}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <Usart_enuTransmitStringBlocking>:


Usart_StatusErrorType Usart_enuTransmitStringBlocking(const Usart_ConfigType* Address_Usart, u8* Address_Data){
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <Usart_enuTransmitStringBlocking+0x6>
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <Usart_enuTransmitStringBlocking+0x8>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <Usart_enuTransmitStringBlocking+0xa>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	9c 83       	std	Y+4, r25	; 0x04
     e06:	8b 83       	std	Y+3, r24	; 0x03
     e08:	7e 83       	std	Y+6, r23	; 0x06
     e0a:	6d 83       	std	Y+5, r22	; 0x05

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
     e10:	1a 82       	std	Y+2, r1	; 0x02

	if(Address_Usart == NULL || Address_Data == NULL){
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	89 2b       	or	r24, r25
     e18:	21 f0       	breq	.+8      	; 0xe22 <Usart_enuTransmitStringBlocking+0x2c>
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	9e 81       	ldd	r25, Y+6	; 0x06
     e1e:	89 2b       	or	r24, r25
     e20:	b9 f4       	brne	.+46     	; 0xe50 <Usart_enuTransmitStringBlocking+0x5a>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	1f c0       	rjmp	.+62     	; 0xe66 <Usart_enuTransmitStringBlocking+0x70>
	}
	else{
		while(Address_Data[Loc_u8Counter] ){
			Loc_enuUsartStatus = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_u8Counter++]);
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	98 0f       	add	r25, r24
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	88 2f       	mov	r24, r24
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	2d 81       	ldd	r18, Y+5	; 0x05
     e36:	3e 81       	ldd	r19, Y+6	; 0x06
     e38:	82 0f       	add	r24, r18
     e3a:	93 1f       	adc	r25, r19
     e3c:	fc 01       	movw	r30, r24
     e3e:	80 81       	ld	r24, Z
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	b9 01       	movw	r22, r18
     e4a:	0e 94 91 06 	call	0xd22	; 0xd22 <Usart_enuTransmitCharBlocking>
     e4e:	89 83       	std	Y+1, r24	; 0x01

	if(Address_Usart == NULL || Address_Data == NULL){
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		while(Address_Data[Loc_u8Counter] ){
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	2d 81       	ldd	r18, Y+5	; 0x05
     e58:	3e 81       	ldd	r19, Y+6	; 0x06
     e5a:	82 0f       	add	r24, r18
     e5c:	93 1f       	adc	r25, r19
     e5e:	fc 01       	movw	r30, r24
     e60:	80 81       	ld	r24, Z
     e62:	88 23       	and	r24, r24
     e64:	09 f7       	brne	.-62     	; 0xe28 <Usart_enuTransmitStringBlocking+0x32>
			Loc_enuUsartStatus = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_u8Counter++]);
		}
	}
		return Loc_enuUsartStatus;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
}
     e68:	26 96       	adiw	r28, 0x06	; 6
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <Usart_enuEnableRxInterrupt>:


Usart_StatusErrorType Usart_enuEnableRxInterrupt(void){
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	1f 92       	push	r1
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	89 83       	std	Y+1, r24	; 0x01

	Usart_EnableRxInterrupt();
     e88:	8a e2       	ldi	r24, 0x2A	; 42
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	2a e2       	ldi	r18, 0x2A	; 42
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	f9 01       	movw	r30, r18
     e92:	20 81       	ld	r18, Z
     e94:	20 68       	ori	r18, 0x80	; 128
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18

	return Loc_enuUsartStatus;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e9c:	0f 90       	pop	r0
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <Usart_enuDisableRxInterrupt>:
Usart_StatusErrorType Usart_enuDisableRxInterrupt(void){
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	1f 92       	push	r1
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	89 83       	std	Y+1, r24	; 0x01
	Usart_DisableRxInterrupt();
     eb2:	8a e2       	ldi	r24, 0x2A	; 42
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	2a e2       	ldi	r18, 0x2A	; 42
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	f9 01       	movw	r30, r18
     ebc:	20 81       	ld	r18, Z
     ebe:	2f 77       	andi	r18, 0x7F	; 127
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18

	return Loc_enuUsartStatus;
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec6:	0f 90       	pop	r0
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <Usart_enuSetCallbackRxFunction>:

Usart_StatusErrorType Usart_enuSetCallbackRxFunction(void (*callback)(u16 Copy_u16Result)){
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <Usart_enuSetCallbackRxFunction+0x6>
     ed4:	1f 92       	push	r1
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	9b 83       	std	Y+3, r25	; 0x03
     edc:	8a 83       	std	Y+2, r24	; 0x02
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == callback){
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	89 2b       	or	r24, r25
     ee8:	19 f4       	brne	.+6      	; 0xef0 <Usart_enuSetCallbackRxFunction+0x22>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	06 c0       	rjmp	.+12     	; 0xefc <Usart_enuSetCallbackRxFunction+0x2e>
		}
		else{

			Usart_RxInterruptHandler = callback;
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	9b 81       	ldd	r25, Y+3	; 0x03
     ef4:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <__data_end+0x1>
     ef8:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__data_end>
		}
	return Loc_enuUsartStatus;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	08 95       	ret

00000f0a <Usart_enuEnableTxInterrupt>:


Usart_StatusErrorType Usart_enuEnableTxInterrupt(void){
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	1f 92       	push	r1
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	89 83       	std	Y+1, r24	; 0x01
	Usart_EnableTxInterrupt();
     f18:	8a e2       	ldi	r24, 0x2A	; 42
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	2a e2       	ldi	r18, 0x2A	; 42
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	f9 01       	movw	r30, r18
     f22:	20 81       	ld	r18, Z
     f24:	20 64       	ori	r18, 0x40	; 64
     f26:	fc 01       	movw	r30, r24
     f28:	20 83       	st	Z, r18
	return Loc_enuUsartStatus;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2c:	0f 90       	pop	r0
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <Usart_enuDisableTxInterrupt>:
Usart_StatusErrorType Usart_enuDisableTxInterrupt(void){
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	1f 92       	push	r1
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	89 83       	std	Y+1, r24	; 0x01

	Usart_DisableTxInterrupt();
     f42:	8a e2       	ldi	r24, 0x2A	; 42
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	2a e2       	ldi	r18, 0x2A	; 42
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	f9 01       	movw	r30, r18
     f4c:	20 81       	ld	r18, Z
     f4e:	2f 7b       	andi	r18, 0xBF	; 191
     f50:	fc 01       	movw	r30, r24
     f52:	20 83       	st	Z, r18

	return Loc_enuUsartStatus;
     f54:	89 81       	ldd	r24, Y+1	; 0x01
}
     f56:	0f 90       	pop	r0
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <Usart_enuSetCallbackTxFunction>:
Usart_StatusErrorType Usart_enuSetCallbackTxFunction(void (*callback)(void)){
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	00 d0       	rcall	.+0      	; 0xf64 <Usart_enuSetCallbackTxFunction+0x6>
     f64:	1f 92       	push	r1
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	9b 83       	std	Y+3, r25	; 0x03
     f6c:	8a 83       	std	Y+2, r24	; 0x02
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == callback){
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	9b 81       	ldd	r25, Y+3	; 0x03
     f76:	89 2b       	or	r24, r25
     f78:	19 f4       	brne	.+6      	; 0xf80 <Usart_enuSetCallbackTxFunction+0x22>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	06 c0       	rjmp	.+12     	; 0xf8c <Usart_enuSetCallbackTxFunction+0x2e>
		}
		else{

			Usart_TxInterruptHandler = callback;
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	9b 81       	ldd	r25, Y+3	; 0x03
     f84:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <Usart_TxInterruptHandler+0x1>
     f88:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Usart_TxInterruptHandler>
		}
	return Loc_enuUsartStatus;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <Usart_enuEnableDataRegEmptyInterrupt>:


Usart_StatusErrorType Usart_enuEnableDataRegEmptyInterrupt(void){
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	1f 92       	push	r1
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	89 83       	std	Y+1, r24	; 0x01

	Usart_EnableDataRegEmpyInterrupt();
     fa8:	8a e2       	ldi	r24, 0x2A	; 42
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	2a e2       	ldi	r18, 0x2A	; 42
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	f9 01       	movw	r30, r18
     fb2:	20 81       	ld	r18, Z
     fb4:	20 62       	ori	r18, 0x20	; 32
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 83       	st	Z, r18
	return Loc_enuUsartStatus;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
}
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <Usart_enuDisableDataRegEmptyInterrupt>:
Usart_StatusErrorType Usart_enuDisableDataRegEmptyInterrupt(void){
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	1f 92       	push	r1
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01

	Usart_DisableDataRegEmpyInterrupt();
     fd2:	8a e2       	ldi	r24, 0x2A	; 42
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	2a e2       	ldi	r18, 0x2A	; 42
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	f9 01       	movw	r30, r18
     fdc:	20 81       	ld	r18, Z
     fde:	2f 7d       	andi	r18, 0xDF	; 223
     fe0:	fc 01       	movw	r30, r24
     fe2:	20 83       	st	Z, r18
	return Loc_enuUsartStatus;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe6:	0f 90       	pop	r0
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <Usart_enuSetCallbackDataRegEmptyFunction>:



Usart_StatusErrorType Usart_enuSetCallbackDataRegEmptyFunction(void (*callback)(void)){
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <Usart_enuSetCallbackDataRegEmptyFunction+0x6>
     ff4:	1f 92       	push	r1
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	9b 83       	std	Y+3, r25	; 0x03
     ffc:	8a 83       	std	Y+2, r24	; 0x02
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == callback){
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	9b 81       	ldd	r25, Y+3	; 0x03
    1006:	89 2b       	or	r24, r25
    1008:	19 f4       	brne	.+6      	; 0x1010 <Usart_enuSetCallbackDataRegEmptyFunction+0x22>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	06 c0       	rjmp	.+12     	; 0x101c <Usart_enuSetCallbackDataRegEmptyFunction+0x2e>
		}
		else{

			Usart_DataRegEmptyInterruptHandler = callback;
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <Usart_DataRegEmptyInterruptHandler+0x1>
    1018:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <Usart_DataRegEmptyInterruptHandler>
		}
	return Loc_enuUsartStatus;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <__vector_15>:


// ISR function For Tx Complete
void __vector_15(void) __attribute__((signal));

void __vector_15(void){
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62

    if(NULL !=Usart_TxInterruptHandler ){
    1056:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <Usart_TxInterruptHandler>
    105a:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <Usart_TxInterruptHandler+0x1>
    105e:	89 2b       	or	r24, r25
    1060:	31 f0       	breq	.+12     	; 0x106e <__vector_15+0x44>

    	Usart_TxInterruptHandler();
    1062:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <Usart_TxInterruptHandler>
    1066:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <Usart_TxInterruptHandler+0x1>
    106a:	fc 01       	movw	r30, r24
    106c:	09 95       	icall

    }
    else {/*  error in declaration */   }

}
    106e:	00 00       	nop
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	7f 91       	pop	r23
    1082:	6f 91       	pop	r22
    1084:	5f 91       	pop	r21
    1086:	4f 91       	pop	r20
    1088:	3f 91       	pop	r19
    108a:	2f 91       	pop	r18
    108c:	0f 90       	pop	r0
    108e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <__vector_13>:


// ISR function For Rx Complete
void __vector_13(void) __attribute__((signal));

void __vector_13(void){
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <__vector_13+0x2a>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62

	u16 Loc_u16Result = UDR;
    10c6:	8c e2       	ldi	r24, 0x2C	; 44
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	fc 01       	movw	r30, r24
    10cc:	80 81       	ld	r24, Z
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 83       	std	Y+1, r24	; 0x01
    if(NULL !=Usart_RxInterruptHandler ){
    10d6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__data_end>
    10da:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <__data_end+0x1>
    10de:	89 2b       	or	r24, r25
    10e0:	41 f0       	breq	.+16     	; 0x10f2 <__vector_13+0x5a>

    	Usart_RxInterruptHandler(Loc_u16Result);
    10e2:	20 91 d0 00 	lds	r18, 0x00D0	; 0x8000d0 <__data_end>
    10e6:	30 91 d1 00 	lds	r19, 0x00D1	; 0x8000d1 <__data_end+0x1>
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	9a 81       	ldd	r25, Y+2	; 0x02
    10ee:	f9 01       	movw	r30, r18
    10f0:	09 95       	icall

    }
    else {/*  error in declaration */   }

}
    10f2:	00 00       	nop
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_14>:


// ISR function For Data Empty Register
void __vector_14(void) __attribute__((signal));

void __vector_14(void){
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62

    if(NULL !=Usart_DataRegEmptyInterruptHandler ){
    114c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <Usart_DataRegEmptyInterruptHandler>
    1150:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <Usart_DataRegEmptyInterruptHandler+0x1>
    1154:	89 2b       	or	r24, r25
    1156:	31 f0       	breq	.+12     	; 0x1164 <__vector_14+0x44>

    	Usart_DataRegEmptyInterruptHandler();
    1158:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <Usart_DataRegEmptyInterruptHandler>
    115c:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <Usart_DataRegEmptyInterruptHandler+0x1>
    1160:	fc 01       	movw	r30, r24
    1162:	09 95       	icall

    }
    else {/*  error in declaration */   }

}
    1164:	00 00       	nop
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	bf 91       	pop	r27
    1170:	af 91       	pop	r26
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	7f 91       	pop	r23
    1178:	6f 91       	pop	r22
    117a:	5f 91       	pop	r21
    117c:	4f 91       	pop	r20
    117e:	3f 91       	pop	r19
    1180:	2f 91       	pop	r18
    1182:	0f 90       	pop	r0
    1184:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <Timer2_enuInit>:




/********************************** Software Interfaces Declarations *******************/
Timer2_StatusErrorType Timer2_enuInit(const Timer2_ConfigType* Address_Timer2){
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	00 d0       	rcall	.+0      	; 0x1194 <Timer2_enuInit+0x6>
    1194:	1f 92       	push	r1
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	9b 83       	std	Y+3, r25	; 0x03
    119c:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	89 83       	std	Y+1, r24	; 0x01

			    if(NULL == Address_Timer2){
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	9b 81       	ldd	r25, Y+3	; 0x03
    11a6:	89 2b       	or	r24, r25
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <Timer2_enuInit+0x22>

			    	Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	9a c0       	rjmp	.+308    	; 0x12e4 <Timer2_enuInit+0x156>
			    }
			    else{

			    	/* Disable Timer2 Peripheral */
			    	        Timer2_Disable();
    11b0:	85 e4       	ldi	r24, 0x45	; 69
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	25 e4       	ldi	r18, 0x45	; 69
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	f9 01       	movw	r30, r18
    11ba:	20 81       	ld	r18, Z
    11bc:	28 7f       	andi	r18, 0xF8	; 248
    11be:	fc 01       	movw	r30, r24
    11c0:	20 83       	st	Z, r18

			    	        /* Select Mode timer */
			    	        Timer2_SelectMode((Address_Timer2->select_mode));
    11c2:	85 e4       	ldi	r24, 0x45	; 69
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	25 e4       	ldi	r18, 0x45	; 69
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	f9 01       	movw	r30, r18
    11cc:	20 81       	ld	r18, Z
    11ce:	42 2f       	mov	r20, r18
    11d0:	4f 7b       	andi	r20, 0xBF	; 191
    11d2:	2a 81       	ldd	r18, Y+2	; 0x02
    11d4:	3b 81       	ldd	r19, Y+3	; 0x03
    11d6:	f9 01       	movw	r30, r18
    11d8:	21 81       	ldd	r18, Z+1	; 0x01
    11da:	22 2f       	mov	r18, r18
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	21 70       	andi	r18, 0x01	; 1
    11e0:	33 27       	eor	r19, r19
    11e2:	00 24       	eor	r0, r0
    11e4:	36 95       	lsr	r19
    11e6:	27 95       	ror	r18
    11e8:	07 94       	ror	r0
    11ea:	36 95       	lsr	r19
    11ec:	27 95       	ror	r18
    11ee:	07 94       	ror	r0
    11f0:	32 2f       	mov	r19, r18
    11f2:	20 2d       	mov	r18, r0
    11f4:	24 2b       	or	r18, r20
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
    11fa:	85 e4       	ldi	r24, 0x45	; 69
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	25 e4       	ldi	r18, 0x45	; 69
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	f9 01       	movw	r30, r18
    1204:	20 81       	ld	r18, Z
    1206:	42 2f       	mov	r20, r18
    1208:	47 7f       	andi	r20, 0xF7	; 247
    120a:	2a 81       	ldd	r18, Y+2	; 0x02
    120c:	3b 81       	ldd	r19, Y+3	; 0x03
    120e:	f9 01       	movw	r30, r18
    1210:	21 81       	ldd	r18, Z+1	; 0x01
    1212:	26 95       	lsr	r18
    1214:	22 2f       	mov	r18, r18
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	21 70       	andi	r18, 0x01	; 1
    121a:	33 27       	eor	r19, r19
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	24 2b       	or	r18, r20
    122a:	fc 01       	movw	r30, r24
    122c:	20 83       	st	Z, r18
    122e:	85 e4       	ldi	r24, 0x45	; 69
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	25 e4       	ldi	r18, 0x45	; 69
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	f9 01       	movw	r30, r18
    1238:	20 81       	ld	r18, Z
    123a:	42 2f       	mov	r20, r18
    123c:	4f 7e       	andi	r20, 0xEF	; 239
    123e:	2a 81       	ldd	r18, Y+2	; 0x02
    1240:	3b 81       	ldd	r19, Y+3	; 0x03
    1242:	f9 01       	movw	r30, r18
    1244:	21 81       	ldd	r18, Z+1	; 0x01
    1246:	26 95       	lsr	r18
    1248:	26 95       	lsr	r18
    124a:	22 2f       	mov	r18, r18
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	21 70       	andi	r18, 0x01	; 1
    1250:	33 27       	eor	r19, r19
    1252:	22 95       	swap	r18
    1254:	32 95       	swap	r19
    1256:	30 7f       	andi	r19, 0xF0	; 240
    1258:	32 27       	eor	r19, r18
    125a:	20 7f       	andi	r18, 0xF0	; 240
    125c:	32 27       	eor	r19, r18
    125e:	24 2b       	or	r18, r20
    1260:	fc 01       	movw	r30, r24
    1262:	20 83       	st	Z, r18
    1264:	85 e4       	ldi	r24, 0x45	; 69
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	25 e4       	ldi	r18, 0x45	; 69
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	f9 01       	movw	r30, r18
    126e:	20 81       	ld	r18, Z
    1270:	42 2f       	mov	r20, r18
    1272:	4f 7d       	andi	r20, 0xDF	; 223
    1274:	2a 81       	ldd	r18, Y+2	; 0x02
    1276:	3b 81       	ldd	r19, Y+3	; 0x03
    1278:	f9 01       	movw	r30, r18
    127a:	21 81       	ldd	r18, Z+1	; 0x01
    127c:	26 95       	lsr	r18
    127e:	26 95       	lsr	r18
    1280:	26 95       	lsr	r18
    1282:	22 2f       	mov	r18, r18
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	21 70       	andi	r18, 0x01	; 1
    1288:	33 27       	eor	r19, r19
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	22 95       	swap	r18
    1290:	32 95       	swap	r19
    1292:	30 7f       	andi	r19, 0xF0	; 240
    1294:	32 27       	eor	r19, r18
    1296:	20 7f       	andi	r18, 0xF0	; 240
    1298:	32 27       	eor	r19, r18
    129a:	24 2b       	or	r18, r20
    129c:	fc 01       	movw	r30, r24
    129e:	20 83       	st	Z, r18

			    	        Global_StaticU8InitValueTimer2 = Address_Timer2->init_value_general_counter;
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	9b 81       	ldd	r25, Y+3	; 0x03
    12a4:	fc 01       	movw	r30, r24
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <Global_StaticU8InitValueTimer2>
			    	        Global_enuTimer2Mode = Address_Timer2->select_mode;
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	9b 81       	ldd	r25, Y+3	; 0x03
    12b0:	fc 01       	movw	r30, r24
    12b2:	81 81       	ldd	r24, Z+1	; 0x01
    12b4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <Global_enuTimer2Mode>
			    	        /* Update Init Value*/
			    	        Loc_enuTimer2Status= Timer2_enuSetValueNormalCounter(Address_Timer2->init_value_general_counter);
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	fc 01       	movw	r30, r24
    12be:	82 81       	ldd	r24, Z+2	; 0x02
    12c0:	0e 94 c6 0a 	call	0x158c	; 0x158c <Timer2_enuSetValueNormalCounter>
    12c4:	89 83       	std	Y+1, r24	; 0x01

			    	        /* Enable Timer2 Peripheral */
			    	        Timer2_Enable(Address_Timer2->prescaler_value);
    12c6:	85 e4       	ldi	r24, 0x45	; 69
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	25 e4       	ldi	r18, 0x45	; 69
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	f9 01       	movw	r30, r18
    12d0:	20 81       	ld	r18, Z
    12d2:	42 2f       	mov	r20, r18
    12d4:	48 7f       	andi	r20, 0xF8	; 248
    12d6:	2a 81       	ldd	r18, Y+2	; 0x02
    12d8:	3b 81       	ldd	r19, Y+3	; 0x03
    12da:	f9 01       	movw	r30, r18
    12dc:	20 81       	ld	r18, Z
    12de:	24 2b       	or	r18, r20
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 83       	st	Z, r18

			    }

			    return Loc_enuTimer2Status;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <Timer2_DeInit>:

Timer2_StatusErrorType Timer2_DeInit(const Timer2_ConfigType* Address_Timer2){
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <Timer2_DeInit+0x6>
    12f8:	1f 92       	push	r1
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	9b 83       	std	Y+3, r25	; 0x03
    1300:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	89 83       	std	Y+1, r24	; 0x01

			    if(NULL == Address_Timer2){
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	89 2b       	or	r24, r25
    130c:	19 f4       	brne	.+6      	; 0x1314 <Timer2_DeInit+0x22>

			    	Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <Timer2_DeInit+0x34>
			    }
			    else{
			    	/* Disable Timer2 Peripheral */
			    	Timer2_Disable();
    1314:	85 e4       	ldi	r24, 0x45	; 69
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	25 e4       	ldi	r18, 0x45	; 69
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	f9 01       	movw	r30, r18
    131e:	20 81       	ld	r18, Z
    1320:	28 7f       	andi	r18, 0xF8	; 248
    1322:	fc 01       	movw	r30, r24
    1324:	20 83       	st	Z, r18


			    }

			    return Loc_enuTimer2Status;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <Timer2_enuEnableOverflowInterrupt>:

Timer2_StatusErrorType Timer2_enuEnableOverflowInterrupt(void){
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	1f 92       	push	r1
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01

	Timer2_EnableOverviewInterrupt();
    1342:	89 e5       	ldi	r24, 0x59	; 89
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	29 e5       	ldi	r18, 0x59	; 89
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	20 81       	ld	r18, Z
    134e:	20 64       	ori	r18, 0x40	; 64
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	0f 90       	pop	r0
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <Timer2_enuEnableCaptureInterrupt>:


Timer2_StatusErrorType Timer2_enuEnableCaptureInterrupt(void){
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	1f 92       	push	r1
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	89 83       	std	Y+1, r24	; 0x01

	Timer2_EnableComparePwmInterrupt();
    136c:	89 e5       	ldi	r24, 0x59	; 89
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	29 e5       	ldi	r18, 0x59	; 89
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	f9 01       	movw	r30, r18
    1376:	20 81       	ld	r18, Z
    1378:	20 68       	ori	r18, 0x80	; 128
    137a:	fc 01       	movw	r30, r24
    137c:	20 83       	st	Z, r18
	return Loc_enuTimer2Status;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1380:	0f 90       	pop	r0
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <Timer2_enuDisableOverflowInterrupt>:

Timer2_StatusErrorType Timer2_enuDisableOverflowInterrupt(void){
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	1f 92       	push	r1
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01

	Timer2_DisableOverviewInterrupt();
    1396:	89 e5       	ldi	r24, 0x59	; 89
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	29 e5       	ldi	r18, 0x59	; 89
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	f9 01       	movw	r30, r18
    13a0:	20 81       	ld	r18, Z
    13a2:	2f 7b       	andi	r18, 0xBF	; 191
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13aa:	0f 90       	pop	r0
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <Timer2_enuDisableCaptureInterrupt>:
Timer2_StatusErrorType Timer2_enuDisableCaptureInterrupt(void){
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	89 83       	std	Y+1, r24	; 0x01
	Timer2_DisbleComparePwmInterrupt();
    13c0:	89 e5       	ldi	r24, 0x59	; 89
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	29 e5       	ldi	r18, 0x59	; 89
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	f9 01       	movw	r30, r18
    13ca:	20 81       	ld	r18, Z
    13cc:	2f 77       	andi	r18, 0x7F	; 127
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d4:	0f 90       	pop	r0
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	08 95       	ret

000013dc <Timer2_enuSetCallbackOverflowInterrupt>:

Timer2_StatusErrorType Timer2_enuSetCallbackOverflowInterrupt(void (*callback)(void)){
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <Timer2_enuSetCallbackOverflowInterrupt+0x6>
    13e2:	1f 92       	push	r1
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	9b 83       	std	Y+3, r25	; 0x03
    13ea:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == callback){
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	89 2b       	or	r24, r25
    13f6:	19 f4       	brne	.+6      	; 0x13fe <Timer2_enuSetCallbackOverflowInterrupt+0x22>

		Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <Timer2_enuSetCallbackOverflowInterrupt+0x2e>
	}
	else{
		Timer2_OverflowInterruptHandler = callback;
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	9b 81       	ldd	r25, Y+3	; 0x03
    1402:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <Timer2_OverflowInterruptHandler+0x1>
    1406:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <Timer2_OverflowInterruptHandler>


	}

	return Loc_enuTimer2Status;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret

00001418 <Timer2_enuSetCallbackCompareInterrupt>:

Timer2_StatusErrorType Timer2_enuSetCallbackCompareInterrupt(void (*callback)(void)){
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	00 d0       	rcall	.+0      	; 0x141e <Timer2_enuSetCallbackCompareInterrupt+0x6>
    141e:	1f 92       	push	r1
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	9b 83       	std	Y+3, r25	; 0x03
    1426:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	89 83       	std	Y+1, r24	; 0x01

			    if(NULL == callback){
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	9b 81       	ldd	r25, Y+3	; 0x03
    1430:	89 2b       	or	r24, r25
    1432:	19 f4       	brne	.+6      	; 0x143a <Timer2_enuSetCallbackCompareInterrupt+0x22>

			    	Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <Timer2_enuSetCallbackCompareInterrupt+0x2e>
			    }
			    else{

			    	Timer2_CompareInterruptHandler = callback;
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <Timer2_CompareInterruptHandler+0x1>
    1442:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <Timer2_CompareInterruptHandler>

			    }

			    return Loc_enuTimer2Status;
    1446:	89 81       	ldd	r24, Y+1	; 0x01
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <Timer2_enuCtcForcePinImmediatly>:

Timer2_StatusErrorType Timer2_enuCtcForcePinImmediatly(void){
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(TCCR2,TCCR2_FOC2_BIT);
    1462:	85 e4       	ldi	r24, 0x45	; 69
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	25 e4       	ldi	r18, 0x45	; 69
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	f9 01       	movw	r30, r18
    146c:	20 81       	ld	r18, Z
    146e:	20 68       	ori	r18, 0x80	; 128
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
}
    1476:	0f 90       	pop	r0
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <Timer2_enuSetDutyCyclePwm>:




Timer2_StatusErrorType Timer2_enuSetDutyCyclePwm(u8 Copy_u8DutyCylePrecentage){
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	00 d0       	rcall	.+0      	; 0x1484 <Timer2_enuSetDutyCyclePwm+0x6>
    1484:	1f 92       	push	r1
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	8b 83       	std	Y+3, r24	; 0x03
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8DutyCycle;
	Copy_u8DutyCylePrecentage = (Copy_u8DutyCylePrecentage >= 100) ? 100 :Copy_u8DutyCylePrecentage;
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	85 36       	cpi	r24, 0x65	; 101
    1494:	08 f0       	brcs	.+2      	; 0x1498 <Timer2_enuSetDutyCyclePwm+0x1a>
    1496:	84 e6       	ldi	r24, 0x64	; 100
    1498:	8b 83       	std	Y+3, r24	; 0x03

	switch(Global_enuTimer2Mode){
    149a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <Global_enuTimer2Mode>
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	09 2e       	mov	r0, r25
    14a4:	00 0c       	add	r0, r0
    14a6:	aa 0b       	sbc	r26, r26
    14a8:	bb 0b       	sbc	r27, r27
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	2f e0       	ldi	r18, 0x0F	; 15
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	84 1b       	sub	r24, r20
    14b4:	95 0b       	sbc	r25, r21
    14b6:	28 17       	cp	r18, r24
    14b8:	39 07       	cpc	r19, r25
    14ba:	08 f4       	brcc	.+2      	; 0x14be <Timer2_enuSetDutyCyclePwm+0x40>
    14bc:	60 c0       	rjmp	.+192    	; 0x157e <Timer2_enuSetDutyCyclePwm+0x100>
    14be:	86 5d       	subi	r24, 0xD6	; 214
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	fc 01       	movw	r30, r24
    14c4:	0c 94 b9 36 	jmp	0x6d72	; 0x6d72 <__tablejump2__>
	case  TIMER2_SELECT_MODE_NORMAL:
	case  TIMER2_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC2_NORMAEL:
	case  TIMER2_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC2_TOGGLE :
	case  TIMER2_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC2_CLEAR  :
	case  TIMER2_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC2_SET :
		Loc_enuTimer2Status = TIMER2_STATUS_FAIL;
    14c8:	19 82       	std	Y+1, r1	; 0x01
		break;
    14ca:	59 c0       	rjmp	.+178    	; 0x157e <Timer2_enuSetDutyCyclePwm+0x100>
		/* i don't know what is the usage of this */
		break;

	case TIMER2_SELECT_MODE_PWM_FAST_INVERTED_OC2_SET_ON_MATCH_CLEAR_AT_TOP:
	case TIMER2_SELECT_MODE_PWM_PHASE_CORRECT_OC2_SET_ON_MATCH_UPCOUNTING_CLEAR_ON_MATCH_DOWNCOUNTING:
		Loc_u8DutyCycle = TIMER2_FULL_VALUE_IN_REGISTER- (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER2_FULL_VALUE_IN_REGISTER);
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	88 2f       	mov	r24, r24
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	48 ec       	ldi	r20, 0xC8	; 200
    14e8:	52 e4       	ldi	r21, 0x42	; 66
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	53 e4       	ldi	r21, 0x43	; 67
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	80 95       	com	r24
    1518:	8a 83       	std	Y+2, r24	; 0x02
		ASSIGN_REG(OCR2,Loc_u8DutyCycle);
    151a:	83 e4       	ldi	r24, 0x43	; 67
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	2a 81       	ldd	r18, Y+2	; 0x02
    1520:	fc 01       	movw	r30, r24
    1522:	20 83       	st	Z, r18

		break;
    1524:	2c c0       	rjmp	.+88     	; 0x157e <Timer2_enuSetDutyCyclePwm+0x100>

	case TIMER2_SELECT_MODE_PWM_FAST_NOT_INVERTED_OC2_CLEAR_ON_MATCH_SET_AT_TOP:
	case TIMER2_SELECT_MODE_PWM_PHASE_CORRECT_OC2_CLEAR_ON_MATCH_UPCOUNTING_SET_ON_MATCH_DOWNCOUNTING:
		Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER2_FULL_VALUE_IN_REGISTER);
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 e0       	ldi	r26, 0x00	; 0
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	48 ec       	ldi	r20, 0xC8	; 200
    1542:	52 e4       	ldi	r21, 0x42	; 66
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	4f e7       	ldi	r20, 0x7F	; 127
    1556:	53 e4       	ldi	r21, 0x43	; 67
    1558:	bc 01       	movw	r22, r24
    155a:	cd 01       	movw	r24, r26
    155c:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	8a 83       	std	Y+2, r24	; 0x02
		ASSIGN_REG(OCR2,Loc_u8DutyCycle);
    1572:	83 e4       	ldi	r24, 0x43	; 67
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	2a 81       	ldd	r18, Y+2	; 0x02
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18

		break;
    157c:	00 00       	nop

	}

	return Loc_enuTimer2Status;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <Timer2_enuSetValueNormalCounter>:



Timer2_StatusErrorType Timer2_enuSetValueNormalCounter(u8 Copy_u8Value){
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	00 d0       	rcall	.+0      	; 0x1592 <Timer2_enuSetValueNormalCounter+0x6>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
	ASSIGN_REG(TCNT2,Copy_u8Value);
    159c:	84 e4       	ldi	r24, 0x44	; 68
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	2a 81       	ldd	r18, Y+2	; 0x02
    15a2:	fc 01       	movw	r30, r24
    15a4:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret

000015b2 <Timer2_enuGetTimeElapsedNormalCounter>:
Timer2_StatusErrorType Timer2_enuGetTimeElapsedNormalCounter(u8* Address_Value){
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <Timer2_enuGetTimeElapsedNormalCounter+0x6>
    15b8:	1f 92       	push	r1
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	9b 83       	std	Y+3, r25	; 0x03
    15c0:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Address_Value){
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ca:	89 2b       	or	r24, r25
    15cc:	19 f4       	brne	.+6      	; 0x15d4 <Timer2_enuGetTimeElapsedNormalCounter+0x22>

		Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <Timer2_enuGetTimeElapsedNormalCounter+0x32>
	}
	else{

		*Address_Value = TCNT2;
    15d4:	84 e4       	ldi	r24, 0x44	; 68
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	fc 01       	movw	r30, r24
    15da:	20 81       	ld	r18, Z
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18

	}

	return Loc_enuTimer2Status;
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <Timer2_enuGetRemainingNormalCounter>:


Timer2_StatusErrorType Timer2_enuGetRemainingNormalCounter(u8* Address_Value){
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <Timer2_enuGetRemainingNormalCounter+0x6>
    15f8:	1f 92       	push	r1
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	9b 83       	std	Y+3, r25	; 0x03
    1600:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Address_Value){
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	9b 81       	ldd	r25, Y+3	; 0x03
    160a:	89 2b       	or	r24, r25
    160c:	19 f4       	brne	.+6      	; 0x1614 <Timer2_enuGetRemainingNormalCounter+0x22>

		Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	0a c0       	rjmp	.+20     	; 0x1628 <Timer2_enuGetRemainingNormalCounter+0x36>
	}
	else{

		*Address_Value = TIMER2_FULL_VALUE_IN_REGISTER - TCNT2;
    1614:	84 e4       	ldi	r24, 0x44	; 68
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	fc 01       	movw	r30, r24
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	20 95       	com	r18
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	fc 01       	movw	r30, r24
    1626:	20 83       	st	Z, r18

	}

	return Loc_enuTimer2Status;
    1628:	89 81       	ldd	r24, Y+1	; 0x01
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <Timer2_enuSetValueCompareMode>:



Timer2_StatusErrorType Timer2_enuSetValueCompareMode(u8 Copy_u8Value){
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	00 d0       	rcall	.+0      	; 0x163c <Timer2_enuSetValueCompareMode+0x6>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	89 83       	std	Y+1, r24	; 0x01

	ASSIGN_REG(OCR2,Copy_u8Value);
    1646:	83 e4       	ldi	r24, 0x43	; 67
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	2a 81       	ldd	r18, Y+2	; 0x02
    164c:	fc 01       	movw	r30, r24
    164e:	20 83       	st	Z, r18

	return Loc_enuTimer2Status;
    1650:	89 81       	ldd	r24, Y+1	; 0x01
}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	08 95       	ret

0000165c <Timer2_enuGetTimeElapsedCompareMode>:


Timer2_StatusErrorType Timer2_enuGetTimeElapsedCompareMode(u8* Address_Value){
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	00 d0       	rcall	.+0      	; 0x1662 <Timer2_enuGetTimeElapsedCompareMode+0x6>
    1662:	1f 92       	push	r1
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	9b 83       	std	Y+3, r25	; 0x03
    166a:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Address_Value){
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	9b 81       	ldd	r25, Y+3	; 0x03
    1674:	89 2b       	or	r24, r25
    1676:	19 f4       	brne	.+6      	; 0x167e <Timer2_enuGetTimeElapsedCompareMode+0x22>

		Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	08 c0       	rjmp	.+16     	; 0x168e <Timer2_enuGetTimeElapsedCompareMode+0x32>
	}
	else{

		*Address_Value = TCNT2;
    167e:	84 e4       	ldi	r24, 0x44	; 68
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	fc 01       	movw	r30, r24
    1684:	20 81       	ld	r18, Z
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	9b 81       	ldd	r25, Y+3	; 0x03
    168a:	fc 01       	movw	r30, r24
    168c:	20 83       	st	Z, r18

	}

			    return Loc_enuTimer2Status;
    168e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <Timer2_enuGetRemainingCompareMode>:
Timer2_StatusErrorType Timer2_enuGetRemainingCompareMode(u8* Address_Value){
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <Timer2_enuGetRemainingCompareMode+0x6>
    16a2:	1f 92       	push	r1
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	9b 83       	std	Y+3, r25	; 0x03
    16aa:	8a 83       	std	Y+2, r24	; 0x02
	Timer2_StatusErrorType Loc_enuTimer2Status = TIMER2_STATUS_OK;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	89 83       	std	Y+1, r24	; 0x01

			    if(NULL == Address_Value){
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	9b 81       	ldd	r25, Y+3	; 0x03
    16b4:	89 2b       	or	r24, r25
    16b6:	19 f4       	brne	.+6      	; 0x16be <Timer2_enuGetRemainingCompareMode+0x22>

			    	Loc_enuTimer2Status = TIMER2_STATUS_NULL_POINTER_ADDRESS;
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	0d c0       	rjmp	.+26     	; 0x16d8 <Timer2_enuGetRemainingCompareMode+0x3c>
			    }
			    else{

			    	*Address_Value = OCR2 - TCNT2;
    16be:	83 e4       	ldi	r24, 0x43	; 67
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	fc 01       	movw	r30, r24
    16c4:	20 81       	ld	r18, Z
    16c6:	84 e4       	ldi	r24, 0x44	; 68
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	fc 01       	movw	r30, r24
    16cc:	80 81       	ld	r24, Z
    16ce:	28 1b       	sub	r18, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	9b 81       	ldd	r25, Y+3	; 0x03
    16d4:	fc 01       	movw	r30, r24
    16d6:	20 83       	st	Z, r18

			    }

			    return Loc_enuTimer2Status;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <__vector_4>:


// ISR function For TIMER2 Compare Match
void __vector_4(void) __attribute__((signal));

void __vector_4(void){
    16e6:	1f 92       	push	r1
    16e8:	0f 92       	push	r0
    16ea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16ee:	0f 92       	push	r0
    16f0:	11 24       	eor	r1, r1
    16f2:	2f 93       	push	r18
    16f4:	3f 93       	push	r19
    16f6:	4f 93       	push	r20
    16f8:	5f 93       	push	r21
    16fa:	6f 93       	push	r22
    16fc:	7f 93       	push	r23
    16fe:	8f 93       	push	r24
    1700:	9f 93       	push	r25
    1702:	af 93       	push	r26
    1704:	bf 93       	push	r27
    1706:	ef 93       	push	r30
    1708:	ff 93       	push	r31
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62

	    if(NULL !=Timer2_CompareInterruptHandler ){
    1712:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Timer2_CompareInterruptHandler>
    1716:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <Timer2_CompareInterruptHandler+0x1>
    171a:	89 2b       	or	r24, r25
    171c:	31 f0       	breq	.+12     	; 0x172a <__vector_4+0x44>
	    	Timer2_CompareInterruptHandler();
    171e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Timer2_CompareInterruptHandler>
    1722:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <Timer2_CompareInterruptHandler+0x1>
    1726:	fc 01       	movw	r30, r24
    1728:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
    172a:	00 00       	nop
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	bf 91       	pop	r27
    1736:	af 91       	pop	r26
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	7f 91       	pop	r23
    173e:	6f 91       	pop	r22
    1740:	5f 91       	pop	r21
    1742:	4f 91       	pop	r20
    1744:	3f 91       	pop	r19
    1746:	2f 91       	pop	r18
    1748:	0f 90       	pop	r0
    174a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    174e:	0f 90       	pop	r0
    1750:	1f 90       	pop	r1
    1752:	18 95       	reti

00001754 <__vector_5>:


// ISR function For TIMER2 OverFlow
void __vector_5(void) __attribute__((signal));

void __vector_5(void){
    1754:	1f 92       	push	r1
    1756:	0f 92       	push	r0
    1758:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62

//	Timer0_DisableOverviewInterrupt();



    if(NULL !=Timer2_OverflowInterruptHandler ){
    1780:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <Timer2_OverflowInterruptHandler>
    1784:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <Timer2_OverflowInterruptHandler+0x1>
    1788:	89 2b       	or	r24, r25
    178a:	61 f0       	breq	.+24     	; 0x17a4 <__vector_5+0x50>

    	TCNT2= Global_StaticU8InitValueTimer2;
    178c:	84 e4       	ldi	r24, 0x44	; 68
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	20 91 da 00 	lds	r18, 0x00DA	; 0x8000da <Global_StaticU8InitValueTimer2>
    1794:	fc 01       	movw	r30, r24
    1796:	20 83       	st	Z, r18
    	Timer2_OverflowInterruptHandler();
    1798:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <Timer2_OverflowInterruptHandler>
    179c:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <Timer2_OverflowInterruptHandler+0x1>
    17a0:	fc 01       	movw	r30, r24
    17a2:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
    17a4:	00 00       	nop
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	ff 91       	pop	r31
    17ac:	ef 91       	pop	r30
    17ae:	bf 91       	pop	r27
    17b0:	af 91       	pop	r26
    17b2:	9f 91       	pop	r25
    17b4:	8f 91       	pop	r24
    17b6:	7f 91       	pop	r23
    17b8:	6f 91       	pop	r22
    17ba:	5f 91       	pop	r21
    17bc:	4f 91       	pop	r20
    17be:	3f 91       	pop	r19
    17c0:	2f 91       	pop	r18
    17c2:	0f 90       	pop	r0
    17c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17c8:	0f 90       	pop	r0
    17ca:	1f 90       	pop	r1
    17cc:	18 95       	reti

000017ce <Timer1_enuInit>:



/********************************** Software Interfaces Declarations *******************/

Timer1_StatusErrorType Timer1_enuInit(const Timer1_ConfigType* Address_Timer1){
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <Timer1_enuInit+0x6>
    17d4:	1f 92       	push	r1
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	9b 83       	std	Y+3, r25	; 0x03
    17dc:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    17de:	19 82       	std	Y+1, r1	; 0x01

			    if(NULL == Address_Timer1){
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	9b 81       	ldd	r25, Y+3	; 0x03
    17e4:	89 2b       	or	r24, r25
    17e6:	19 f4       	brne	.+6      	; 0x17ee <Timer1_enuInit+0x20>

			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	7c c0       	rjmp	.+248    	; 0x18e6 <Timer1_enuInit+0x118>
			    }
			    else{

			    	/* Disable Timer1 Peripheral */
			    	        Timer1_Disable();
    17ee:	8e e4       	ldi	r24, 0x4E	; 78
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	2e e4       	ldi	r18, 0x4E	; 78
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	f9 01       	movw	r30, r18
    17f8:	20 81       	ld	r18, Z
    17fa:	28 7f       	andi	r18, 0xF8	; 248
    17fc:	fc 01       	movw	r30, r24
    17fe:	20 83       	st	Z, r18

			    	        /* Select Mode timer */
			    	        Timer1_SelectMode((Address_Timer1->select_mode));
    1800:	8f e4       	ldi	r24, 0x4F	; 79
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	2f e4       	ldi	r18, 0x4F	; 79
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	f9 01       	movw	r30, r18
    180a:	20 81       	ld	r18, Z
    180c:	42 2f       	mov	r20, r18
    180e:	4c 7f       	andi	r20, 0xFC	; 252
    1810:	2a 81       	ldd	r18, Y+2	; 0x02
    1812:	3b 81       	ldd	r19, Y+3	; 0x03
    1814:	f9 01       	movw	r30, r18
    1816:	21 81       	ldd	r18, Z+1	; 0x01
    1818:	24 2b       	or	r18, r20
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
    181e:	8e e4       	ldi	r24, 0x4E	; 78
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	2e e4       	ldi	r18, 0x4E	; 78
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	f9 01       	movw	r30, r18
    1828:	20 81       	ld	r18, Z
    182a:	42 2f       	mov	r20, r18
    182c:	47 7e       	andi	r20, 0xE7	; 231
    182e:	2a 81       	ldd	r18, Y+2	; 0x02
    1830:	3b 81       	ldd	r19, Y+3	; 0x03
    1832:	f9 01       	movw	r30, r18
    1834:	21 81       	ldd	r18, Z+1	; 0x01
    1836:	22 2f       	mov	r18, r18
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	22 0f       	add	r18, r18
    183c:	33 1f       	adc	r19, r19
    183e:	24 2b       	or	r18, r20
    1840:	fc 01       	movw	r30, r24
    1842:	20 83       	st	Z, r18

			    	        /* Select Mode timer ChannelA*/
			    	        Timer1_SelectOutputModeChannelA(Address_Timer1->select_output_mode_channelA);
    1844:	8f e4       	ldi	r24, 0x4F	; 79
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	2f e4       	ldi	r18, 0x4F	; 79
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	f9 01       	movw	r30, r18
    184e:	20 81       	ld	r18, Z
    1850:	42 2f       	mov	r20, r18
    1852:	4f 73       	andi	r20, 0x3F	; 63
    1854:	2a 81       	ldd	r18, Y+2	; 0x02
    1856:	3b 81       	ldd	r19, Y+3	; 0x03
    1858:	f9 01       	movw	r30, r18
    185a:	22 81       	ldd	r18, Z+2	; 0x02
    185c:	22 2f       	mov	r18, r18
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	00 24       	eor	r0, r0
    1862:	36 95       	lsr	r19
    1864:	27 95       	ror	r18
    1866:	07 94       	ror	r0
    1868:	36 95       	lsr	r19
    186a:	27 95       	ror	r18
    186c:	07 94       	ror	r0
    186e:	32 2f       	mov	r19, r18
    1870:	20 2d       	mov	r18, r0
    1872:	24 2b       	or	r18, r20
    1874:	fc 01       	movw	r30, r24
    1876:	20 83       	st	Z, r18

			    	        /* Select Mode timer Channel B*/
			    	        Timer1_SelectOutputModeChannelB((Address_Timer1->select_output_mode_channelB));
    1878:	8f e4       	ldi	r24, 0x4F	; 79
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	2f e4       	ldi	r18, 0x4F	; 79
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	f9 01       	movw	r30, r18
    1882:	20 81       	ld	r18, Z
    1884:	42 2f       	mov	r20, r18
    1886:	4f 7c       	andi	r20, 0xCF	; 207
    1888:	2a 81       	ldd	r18, Y+2	; 0x02
    188a:	3b 81       	ldd	r19, Y+3	; 0x03
    188c:	f9 01       	movw	r30, r18
    188e:	23 81       	ldd	r18, Z+3	; 0x03
    1890:	22 2f       	mov	r18, r18
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	22 95       	swap	r18
    1896:	32 95       	swap	r19
    1898:	30 7f       	andi	r19, 0xF0	; 240
    189a:	32 27       	eor	r19, r18
    189c:	20 7f       	andi	r18, 0xF0	; 240
    189e:	32 27       	eor	r19, r18
    18a0:	24 2b       	or	r18, r20
    18a2:	fc 01       	movw	r30, r24
    18a4:	20 83       	st	Z, r18

			    	        Timer1_StaticU16InitValue = Address_Timer1->init_counter_value;
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	9b 81       	ldd	r25, Y+3	; 0x03
    18aa:	fc 01       	movw	r30, r24
    18ac:	84 81       	ldd	r24, Z+4	; 0x04
    18ae:	95 81       	ldd	r25, Z+5	; 0x05
    18b0:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <Timer1_StaticU16InitValue+0x1>
    18b4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <Timer1_StaticU16InitValue>

			    	        /* Update Init Value*/
			    	        Loc_enuTimer1Status= Timer1_enuSetValueNormalCounter(Address_Timer1->init_counter_value);
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	fc 01       	movw	r30, r24
    18be:	84 81       	ldd	r24, Z+4	; 0x04
    18c0:	95 81       	ldd	r25, Z+5	; 0x05
    18c2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Timer1_enuSetValueNormalCounter>
    18c6:	89 83       	std	Y+1, r24	; 0x01

			    	        /* Enable Timer1 Peripheral */
			    	        Timer1_Enable(Address_Timer1->prescaler_value);
    18c8:	8e e4       	ldi	r24, 0x4E	; 78
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	2e e4       	ldi	r18, 0x4E	; 78
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	f9 01       	movw	r30, r18
    18d2:	20 81       	ld	r18, Z
    18d4:	42 2f       	mov	r20, r18
    18d6:	48 7f       	andi	r20, 0xF8	; 248
    18d8:	2a 81       	ldd	r18, Y+2	; 0x02
    18da:	3b 81       	ldd	r19, Y+3	; 0x03
    18dc:	f9 01       	movw	r30, r18
    18de:	20 81       	ld	r18, Z
    18e0:	24 2b       	or	r18, r20
    18e2:	fc 01       	movw	r30, r24
    18e4:	20 83       	st	Z, r18

			    }

			    return Loc_enuTimer1Status;
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <Timer1_DeInit>:

Timer1_StatusErrorType Timer1_DeInit(const Timer1_ConfigType* Address_Timer1){
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <Timer1_DeInit+0x6>
    18fa:	1f 92       	push	r1
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	9b 83       	std	Y+3, r25	; 0x03
    1902:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1904:	19 82       	std	Y+1, r1	; 0x01

			    if(NULL == Address_Timer1){
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	9b 81       	ldd	r25, Y+3	; 0x03
    190a:	89 2b       	or	r24, r25
    190c:	19 f4       	brne	.+6      	; 0x1914 <Timer1_DeInit+0x20>

			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    190e:	82 e0       	ldi	r24, 0x02	; 2
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <Timer1_DeInit+0x32>
			    }
			    else{

			    	/* Disable Timer1 Peripheral */
			    	        Timer1_Disable();
    1914:	8e e4       	ldi	r24, 0x4E	; 78
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	2e e4       	ldi	r18, 0x4E	; 78
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	f9 01       	movw	r30, r18
    191e:	20 81       	ld	r18, Z
    1920:	28 7f       	andi	r18, 0xF8	; 248
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
			    }

			    return Loc_enuTimer1Status;
    1926:	89 81       	ldd	r24, Y+1	; 0x01
}
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <Timer1_enuEnableInterruptOverflow>:

Timer1_StatusErrorType Timer1_enuEnableInterruptOverflow(void){
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	1f 92       	push	r1
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    193e:	19 82       	std	Y+1, r1	; 0x01
	Timer1_EnableOverviewInterrupt();
    1940:	89 e5       	ldi	r24, 0x59	; 89
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	29 e5       	ldi	r18, 0x59	; 89
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	f9 01       	movw	r30, r18
    194a:	20 81       	ld	r18, Z
    194c:	24 60       	ori	r18, 0x04	; 4
    194e:	fc 01       	movw	r30, r24
    1950:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1952:	89 81       	ldd	r24, Y+1	; 0x01
}
    1954:	0f 90       	pop	r0
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <Timer1_enuDisableInterruptOverflow>:

Timer1_StatusErrorType Timer1_enuDisableInterruptOverflow(void){
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	1f 92       	push	r1
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1966:	19 82       	std	Y+1, r1	; 0x01

	Timer1_DisableOverviewInterrupt();
    1968:	89 e5       	ldi	r24, 0x59	; 89
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	29 e5       	ldi	r18, 0x59	; 89
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	f9 01       	movw	r30, r18
    1972:	20 81       	ld	r18, Z
    1974:	2b 7f       	andi	r18, 0xFB	; 251
    1976:	fc 01       	movw	r30, r24
    1978:	20 83       	st	Z, r18
	return Loc_enuTimer1Status;
    197a:	89 81       	ldd	r24, Y+1	; 0x01
}
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <Timer1_enuEnableInterruptCompareChannelA>:

Timer1_StatusErrorType Timer1_enuEnableInterruptCompareChannelA(void){
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	1f 92       	push	r1
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    198e:	19 82       	std	Y+1, r1	; 0x01
	Timer1_EnableChannelA_ComparePwmInterrupt();
    1990:	89 e5       	ldi	r24, 0x59	; 89
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	29 e5       	ldi	r18, 0x59	; 89
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	f9 01       	movw	r30, r18
    199a:	20 81       	ld	r18, Z
    199c:	28 60       	ori	r18, 0x08	; 8
    199e:	fc 01       	movw	r30, r24
    19a0:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a4:	0f 90       	pop	r0
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <Timer1_enuDisableInterruptCompareChannelA>:
Timer1_StatusErrorType Timer1_enuDisableInterruptCompareChannelA(void){
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	1f 92       	push	r1
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    19b6:	19 82       	std	Y+1, r1	; 0x01
	Timer1_DisbleChannelA_ComparePwmInterrupt();
    19b8:	89 e5       	ldi	r24, 0x59	; 89
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	29 e5       	ldi	r18, 0x59	; 89
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	f9 01       	movw	r30, r18
    19c2:	20 81       	ld	r18, Z
    19c4:	27 7f       	andi	r18, 0xF7	; 247
    19c6:	fc 01       	movw	r30, r24
    19c8:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    19cc:	0f 90       	pop	r0
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <Timer1_enuEnableInterruptCompareChannelB>:


Timer1_StatusErrorType Timer1_enuEnableInterruptCompareChannelB(void){
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	1f 92       	push	r1
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    19de:	19 82       	std	Y+1, r1	; 0x01

	Timer1_EnableChannelB_ComparePwmInterrupt();
    19e0:	89 e5       	ldi	r24, 0x59	; 89
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	29 e5       	ldi	r18, 0x59	; 89
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	f9 01       	movw	r30, r18
    19ea:	20 81       	ld	r18, Z
    19ec:	20 61       	ori	r18, 0x10	; 16
    19ee:	fc 01       	movw	r30, r24
    19f0:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f4:	0f 90       	pop	r0
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <Timer1_enuDisableInterruptCompareChannelB>:
Timer1_StatusErrorType Timer1_enuDisableInterruptCompareChannelB(void){
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	1f 92       	push	r1
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1a06:	19 82       	std	Y+1, r1	; 0x01
	Timer1_DisbleChannelB_ComparePwmInterrupt();
    1a08:	89 e5       	ldi	r24, 0x59	; 89
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	29 e5       	ldi	r18, 0x59	; 89
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	f9 01       	movw	r30, r18
    1a12:	20 81       	ld	r18, Z
    1a14:	2f 7e       	andi	r18, 0xEF	; 239
    1a16:	fc 01       	movw	r30, r24
    1a18:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1c:	0f 90       	pop	r0
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <Timer1_enuEnableInterruptIcu>:


Timer1_StatusErrorType Timer1_enuEnableInterruptIcu(void){
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	1f 92       	push	r1
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1a2e:	19 82       	std	Y+1, r1	; 0x01
	Timer1_EnableIcuInterrupt();
    1a30:	89 e5       	ldi	r24, 0x59	; 89
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	29 e5       	ldi	r18, 0x59	; 89
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	f9 01       	movw	r30, r18
    1a3a:	20 81       	ld	r18, Z
    1a3c:	20 62       	ori	r18, 0x20	; 32
    1a3e:	fc 01       	movw	r30, r24
    1a40:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a44:	0f 90       	pop	r0
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <Timer1_enuDisableInterruptIcu>:
Timer1_StatusErrorType Timer1_enuDisableInterruptIcu(void){
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	1f 92       	push	r1
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1a56:	19 82       	std	Y+1, r1	; 0x01
	Timer1_DisableIcuInterrupt();
    1a58:	89 e5       	ldi	r24, 0x59	; 89
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	29 e5       	ldi	r18, 0x59	; 89
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	f9 01       	movw	r30, r18
    1a62:	20 81       	ld	r18, Z
    1a64:	2f 7d       	andi	r18, 0xDF	; 223
    1a66:	fc 01       	movw	r30, r24
    1a68:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6c:	0f 90       	pop	r0
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <Timer1_enuSetCallbackFunctionOverflow>:



Timer1_StatusErrorType Timer1_enuSetCallbackFunctionOverflow(void (*callback)(void)){
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <Timer1_enuSetCallbackFunctionOverflow+0x6>
    1a7a:	1f 92       	push	r1
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	9b 83       	std	Y+3, r25	; 0x03
    1a82:	8a 83       	std	Y+2, r24	; 0x02

		Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1a84:	19 82       	std	Y+1, r1	; 0x01

		if(NULL == callback){
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8a:	89 2b       	or	r24, r25
    1a8c:	19 f4       	brne	.+6      	; 0x1a94 <Timer1_enuSetCallbackFunctionOverflow+0x20>

			Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	06 c0       	rjmp	.+12     	; 0x1aa0 <Timer1_enuSetCallbackFunctionOverflow+0x2c>
		}
		else{
			Timer1_OverflowInterruptHandler = callback;
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	9b 81       	ldd	r25, Y+3	; 0x03
    1a98:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <Timer1_OverflowInterruptHandler+0x1>
    1a9c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <Timer1_OverflowInterruptHandler>
		}

		return Loc_enuTimer1Status;
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	08 95       	ret

00001aae <Timer1_enuSetCallbackFunctionCompareChannelA>:
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelA(void (*callback)(void)){
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <Timer1_enuSetCallbackFunctionCompareChannelA+0x6>
    1ab4:	1f 92       	push	r1
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	9b 83       	std	Y+3, r25	; 0x03
    1abc:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1abe:	19 82       	std	Y+1, r1	; 0x01

			if(NULL == callback){
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac4:	89 2b       	or	r24, r25
    1ac6:	19 f4       	brne	.+6      	; 0x1ace <Timer1_enuSetCallbackFunctionCompareChannelA+0x20>

				Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	06 c0       	rjmp	.+12     	; 0x1ada <Timer1_enuSetCallbackFunctionCompareChannelA+0x2c>
			}
			else{
				Timer1_CompareChannelAInterruptHandler = callback;
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad2:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <Timer1_CompareChannelAInterruptHandler+0x1>
    1ad6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <Timer1_CompareChannelAInterruptHandler>
			}

			return Loc_enuTimer1Status;
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	08 95       	ret

00001ae8 <Timer1_enuSetCallbackFunctionCompareChannelB>:
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelB(void (*callback)(void)){
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <Timer1_enuSetCallbackFunctionCompareChannelB+0x6>
    1aee:	1f 92       	push	r1
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	9b 83       	std	Y+3, r25	; 0x03
    1af6:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1af8:	19 82       	std	Y+1, r1	; 0x01

				if(NULL == callback){
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	9b 81       	ldd	r25, Y+3	; 0x03
    1afe:	89 2b       	or	r24, r25
    1b00:	19 f4       	brne	.+6      	; 0x1b08 <Timer1_enuSetCallbackFunctionCompareChannelB+0x20>

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <Timer1_enuSetCallbackFunctionCompareChannelB+0x2c>
				}
				else{
					Timer1_CompareChannelBInterruptHandler = callback;
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0c:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <Timer1_CompareChannelBInterruptHandler+0x1>
    1b10:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <Timer1_CompareChannelBInterruptHandler>
				}

				return Loc_enuTimer1Status;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	08 95       	ret

00001b22 <Timer1_enuSetCallbackFunctionIcu>:

Timer1_StatusErrorType Timer1_enuSetCallbackFunctionIcu(void (*callback)(void)){
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <Timer1_enuSetCallbackFunctionIcu+0x6>
    1b28:	1f 92       	push	r1
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	9b 83       	std	Y+3, r25	; 0x03
    1b30:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1b32:	19 82       	std	Y+1, r1	; 0x01

				if(NULL == callback){
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	9b 81       	ldd	r25, Y+3	; 0x03
    1b38:	89 2b       	or	r24, r25
    1b3a:	19 f4       	brne	.+6      	; 0x1b42 <Timer1_enuSetCallbackFunctionIcu+0x20>

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1b3c:	82 e0       	ldi	r24, 0x02	; 2
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	06 c0       	rjmp	.+12     	; 0x1b4e <Timer1_enuSetCallbackFunctionIcu+0x2c>
				}
				else{
					Timer1_IcuInterruptHandler = callback;
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	9b 81       	ldd	r25, Y+3	; 0x03
    1b46:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <Timer1_IcuInterruptHandler+0x1>
    1b4a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <Timer1_IcuInterruptHandler>
				}

				return Loc_enuTimer1Status;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <Timer1_enuSetValueNormalCounter>:


Timer1_StatusErrorType Timer1_enuSetValueNormalCounter(u16 Copy_u16Value){
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <Timer1_enuSetValueNormalCounter+0x6>
    1b62:	1f 92       	push	r1
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	9b 83       	std	Y+3, r25	; 0x03
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1b6c:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(TCNT1H,(Copy_u16Value>>8));
    1b6e:	8d e4       	ldi	r24, 0x4D	; 77
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	2a 81       	ldd	r18, Y+2	; 0x02
    1b74:	3b 81       	ldd	r19, Y+3	; 0x03
    1b76:	23 2f       	mov	r18, r19
    1b78:	33 27       	eor	r19, r19
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	20 83       	st	Z, r18
	ASSIGN_REG(TCNT1L,(Copy_u16Value &0x0F));
    1b7e:	8c e4       	ldi	r24, 0x4C	; 76
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	2a 81       	ldd	r18, Y+2	; 0x02
    1b84:	2f 70       	andi	r18, 0x0F	; 15
    1b86:	fc 01       	movw	r30, r24
    1b88:	20 83       	st	Z, r18

		return Loc_enuTimer1Status;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	08 95       	ret

00001b98 <Timer1_enuSetValueCompareChannelA>:
Timer1_StatusErrorType Timer1_enuSetValueCompareChannelA(u16 Copy_u16Value){
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <Timer1_enuSetValueCompareChannelA+0x6>
    1b9e:	1f 92       	push	r1
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9b 83       	std	Y+3, r25	; 0x03
    1ba6:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1ba8:	19 82       	std	Y+1, r1	; 0x01
	ASSIGN_REG(OCR1AH,(Copy_u16Value>>8));
    1baa:	8b e4       	ldi	r24, 0x4B	; 75
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	2a 81       	ldd	r18, Y+2	; 0x02
    1bb0:	3b 81       	ldd	r19, Y+3	; 0x03
    1bb2:	23 2f       	mov	r18, r19
    1bb4:	33 27       	eor	r19, r19
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	20 83       	st	Z, r18
	ASSIGN_REG(OCR1AL,(Copy_u16Value &0x0F));
    1bba:	8a e4       	ldi	r24, 0x4A	; 74
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc0:	2f 70       	andi	r18, 0x0F	; 15
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <Timer1_enuSetValueCompareChannelB>:
Timer1_StatusErrorType Timer1_enuSetValueCompareChannelB(u16 Copy_u16Value){
    1bd4:	cf 93       	push	r28
    1bd6:	df 93       	push	r29
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <Timer1_enuSetValueCompareChannelB+0x6>
    1bda:	1f 92       	push	r1
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	9b 83       	std	Y+3, r25	; 0x03
    1be2:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1be4:	19 82       	std	Y+1, r1	; 0x01

	ASSIGN_REG(OCR1B, Copy_u16Value);
    1be6:	88 e4       	ldi	r24, 0x48	; 72
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	2a 81       	ldd	r18, Y+2	; 0x02
    1bec:	3b 81       	ldd	r19, Y+3	; 0x03
    1bee:	fc 01       	movw	r30, r24
    1bf0:	31 83       	std	Z+1, r19	; 0x01
    1bf2:	20 83       	st	Z, r18
	return Loc_enuTimer1Status;
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <Timer1_enuSetValueIcu>:
Timer1_StatusErrorType Timer1_enuSetValueIcu(u16 Copy_u16Value){
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <Timer1_enuSetValueIcu+0x6>
    1c08:	1f 92       	push	r1
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	9b 83       	std	Y+3, r25	; 0x03
    1c10:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1c12:	19 82       	std	Y+1, r1	; 0x01

	ASSIGN_REG(ICR1, Copy_u16Value);
    1c14:	86 e4       	ldi	r24, 0x46	; 70
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	2a 81       	ldd	r18, Y+2	; 0x02
    1c1a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	31 83       	std	Z+1, r19	; 0x01
    1c20:	20 83       	st	Z, r18
	return Loc_enuTimer1Status;
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <Timer1_enuGetTimeElapsedNormalCounter>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedNormalCounter(u16* Address_Value){
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <Timer1_enuGetTimeElapsedNormalCounter+0x6>
    1c36:	1f 92       	push	r1
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	9b 83       	std	Y+3, r25	; 0x03
    1c3e:	8a 83       	std	Y+2, r24	; 0x02

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1c40:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Value){
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	9b 81       	ldd	r25, Y+3	; 0x03
    1c46:	89 2b       	or	r24, r25
    1c48:	19 f4       	brne	.+6      	; 0x1c50 <Timer1_enuGetTimeElapsedNormalCounter+0x20>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	1f c0       	rjmp	.+62     	; 0x1c8e <Timer1_enuGetTimeElapsedNormalCounter+0x5e>
	}
	else{
		*Address_Value=TCNT1L;
    1c50:	8c e4       	ldi	r24, 0x4C	; 76
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	fc 01       	movw	r30, r24
    1c56:	80 81       	ld	r24, Z
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c60:	fc 01       	movw	r30, r24
    1c62:	31 83       	std	Z+1, r19	; 0x01
    1c64:	20 83       	st	Z, r18
		*Address_Value|=(TCNT1H<<EIGHT_VALUE);
    1c66:	8d e4       	ldi	r24, 0x4D	; 77
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	80 81       	ld	r24, Z
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	38 2f       	mov	r19, r24
    1c74:	22 27       	eor	r18, r18
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	28 2b       	or	r18, r24
    1c82:	39 2b       	or	r19, r25
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	9b 81       	ldd	r25, Y+3	; 0x03
    1c88:	fc 01       	movw	r30, r24
    1c8a:	31 83       	std	Z+1, r19	; 0x01
    1c8c:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <Timer1_enuGetTimeElapsedCompareChannelA>:
Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelA(u16* Address_Value){
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <Timer1_enuGetTimeElapsedCompareChannelA+0x6>
    1ca2:	1f 92       	push	r1
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	9b 83       	std	Y+3, r25	; 0x03
    1caa:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1cac:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Value){
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	89 2b       	or	r24, r25
    1cb4:	19 f4       	brne	.+6      	; 0x1cbc <Timer1_enuGetTimeElapsedCompareChannelA+0x20>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	1f c0       	rjmp	.+62     	; 0x1cfa <Timer1_enuGetTimeElapsedCompareChannelA+0x5e>
	}
	else{
		*Address_Value=OCR1AL;
    1cbc:	8a e4       	ldi	r24, 0x4A	; 74
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	80 81       	ld	r24, Z
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	fc 01       	movw	r30, r24
    1cce:	31 83       	std	Z+1, r19	; 0x01
    1cd0:	20 83       	st	Z, r18
		*Address_Value|=(OCR1AH<<EIGHT_VALUE);
    1cd2:	8b e4       	ldi	r24, 0x4B	; 75
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	38 2f       	mov	r19, r24
    1ce0:	22 27       	eor	r18, r18
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	28 2b       	or	r18, r24
    1cee:	39 2b       	or	r19, r25
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	31 83       	std	Z+1, r19	; 0x01
    1cf8:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01

}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	08 95       	ret

00001d08 <Timer1_enuGetTimeElapsedCompareChannelB>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelB(u16* Address_Value){
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <Timer1_enuGetTimeElapsedCompareChannelB+0x6>
    1d0e:	1f 92       	push	r1
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	9b 83       	std	Y+3, r25	; 0x03
    1d16:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1d18:	19 82       	std	Y+1, r1	; 0x01

				    if(NULL == Address_Value){
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1e:	89 2b       	or	r24, r25
    1d20:	19 f4       	brne	.+6      	; 0x1d28 <Timer1_enuGetTimeElapsedCompareChannelB+0x20>

				    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	1f c0       	rjmp	.+62     	; 0x1d66 <Timer1_enuGetTimeElapsedCompareChannelB+0x5e>
				    }
				    else{
						*Address_Value=OCR1BL;
    1d28:	88 e4       	ldi	r24, 0x48	; 72
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	80 81       	ld	r24, Z
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	9b 81       	ldd	r25, Y+3	; 0x03
    1d38:	fc 01       	movw	r30, r24
    1d3a:	31 83       	std	Z+1, r19	; 0x01
    1d3c:	20 83       	st	Z, r18
						*Address_Value|=(OCR1BH<<EIGHT_VALUE);
    1d3e:	89 e4       	ldi	r24, 0x49	; 73
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	fc 01       	movw	r30, r24
    1d44:	80 81       	ld	r24, Z
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	38 2f       	mov	r19, r24
    1d4c:	22 27       	eor	r18, r18
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	9b 81       	ldd	r25, Y+3	; 0x03
    1d52:	fc 01       	movw	r30, r24
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	28 2b       	or	r18, r24
    1d5a:	39 2b       	or	r19, r25
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d60:	fc 01       	movw	r30, r24
    1d62:	31 83       	std	Z+1, r19	; 0x01
    1d64:	20 83       	st	Z, r18
				    }

				    return Loc_enuTimer1Status;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <Timer1_enuGetTimeElapsedIcu>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedIcu(u16* Address_Value){
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <Timer1_enuGetTimeElapsedIcu+0x6>
    1d7a:	1f 92       	push	r1
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9b 83       	std	Y+3, r25	; 0x03
    1d82:	8a 83       	std	Y+2, r24	; 0x02
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1d84:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Value){
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8a:	89 2b       	or	r24, r25
    1d8c:	19 f4       	brne	.+6      	; 0x1d94 <Timer1_enuGetTimeElapsedIcu+0x20>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	1f c0       	rjmp	.+62     	; 0x1dd2 <Timer1_enuGetTimeElapsedIcu+0x5e>
	}
	else{
		*Address_Value=ICR1L;
    1d94:	86 e4       	ldi	r24, 0x46	; 70
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	fc 01       	movw	r30, r24
    1d9a:	80 81       	ld	r24, Z
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	fc 01       	movw	r30, r24
    1da6:	31 83       	std	Z+1, r19	; 0x01
    1da8:	20 83       	st	Z, r18
		*Address_Value|=(ICR1H<<EIGHT_VALUE);
    1daa:	87 e4       	ldi	r24, 0x47	; 71
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	fc 01       	movw	r30, r24
    1db0:	80 81       	ld	r24, Z
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	38 2f       	mov	r19, r24
    1db8:	22 27       	eor	r18, r18
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	28 2b       	or	r18, r24
    1dc6:	39 2b       	or	r19, r25
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	fc 01       	movw	r30, r24
    1dce:	31 83       	std	Z+1, r19	; 0x01
    1dd0:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01

}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	08 95       	ret

00001de0 <Timer1_enuCtcForcePinImmediatlyChannelA>:




Timer1_StatusErrorType Timer1_enuCtcForcePinImmediatlyChannelA(void){
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	1f 92       	push	r1
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1dea:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TCCR1A,TCCR1A_FOC1A_BIT);
    1dec:	8f e4       	ldi	r24, 0x4F	; 79
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	2f e4       	ldi	r18, 0x4F	; 79
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	f9 01       	movw	r30, r18
    1df6:	20 81       	ld	r18, Z
    1df8:	28 60       	ori	r18, 0x08	; 8
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e00:	0f 90       	pop	r0
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	08 95       	ret

00001e08 <Timer1_enuCtcForcePinImmediatlyChannelB>:
Timer1_StatusErrorType Timer1_enuCtcForcePinImmediatlyChannelB(void){
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	1f 92       	push	r1
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1e12:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TCCR1A,TCCR1A_FOC1B_BIT);
    1e14:	8f e4       	ldi	r24, 0x4F	; 79
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	2f e4       	ldi	r18, 0x4F	; 79
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	f9 01       	movw	r30, r18
    1e1e:	20 81       	ld	r18, Z
    1e20:	24 60       	ori	r18, 0x04	; 4
    1e22:	fc 01       	movw	r30, r24
    1e24:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e28:	0f 90       	pop	r0
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	08 95       	ret

00001e30 <Timer1_enuSetRisingEdgeIcu>:

Timer1_StatusErrorType Timer1_enuSetRisingEdgeIcu(void){
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	1f 92       	push	r1
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1e3a:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TCCR1B,TCCR1B_ICES1_BIT);
    1e3c:	8e e4       	ldi	r24, 0x4E	; 78
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	2e e4       	ldi	r18, 0x4E	; 78
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	f9 01       	movw	r30, r18
    1e46:	20 81       	ld	r18, Z
    1e48:	20 64       	ori	r18, 0x40	; 64
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e50:	0f 90       	pop	r0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	08 95       	ret

00001e58 <Timer1_enuSetFailingEdgeIcu>:
Timer1_StatusErrorType Timer1_enuSetFailingEdgeIcu(void){
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	1f 92       	push	r1
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1e62:	19 82       	std	Y+1, r1	; 0x01
	CLEAR_BIT(TCCR1B,TCCR1B_ICES1_BIT);
    1e64:	8e e4       	ldi	r24, 0x4E	; 78
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	2e e4       	ldi	r18, 0x4E	; 78
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	f9 01       	movw	r30, r18
    1e6e:	20 81       	ld	r18, Z
    1e70:	2f 7b       	andi	r18, 0xBF	; 191
    1e72:	fc 01       	movw	r30, r24
    1e74:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e78:	0f 90       	pop	r0
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	08 95       	ret

00001e80 <Timer1_enuToggleEdgeIcu>:
Timer1_StatusErrorType Timer1_enuToggleEdgeIcu(void){
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	1f 92       	push	r1
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
    1e8a:	19 82       	std	Y+1, r1	; 0x01
	TOGGLE_BIT(TCCR1B,TCCR1B_ICES1_BIT);
    1e8c:	8e e4       	ldi	r24, 0x4E	; 78
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	2e e4       	ldi	r18, 0x4E	; 78
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	f9 01       	movw	r30, r18
    1e96:	30 81       	ld	r19, Z
    1e98:	20 e4       	ldi	r18, 0x40	; 64
    1e9a:	23 27       	eor	r18, r19
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	20 83       	st	Z, r18

	return Loc_enuTimer1Status;
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea2:	0f 90       	pop	r0
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <__vector_9>:
///////////////////////////////////////////////////////////////////////////////////////////

// ISR function For TIMER1 OverFlow
void __vector_9(void) __attribute__((signal));

void __vector_9(void){
    1eaa:	1f 92       	push	r1
    1eac:	0f 92       	push	r0
    1eae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1eb2:	0f 92       	push	r0
    1eb4:	11 24       	eor	r1, r1
    1eb6:	2f 93       	push	r18
    1eb8:	3f 93       	push	r19
    1eba:	4f 93       	push	r20
    1ebc:	5f 93       	push	r21
    1ebe:	6f 93       	push	r22
    1ec0:	7f 93       	push	r23
    1ec2:	8f 93       	push	r24
    1ec4:	9f 93       	push	r25
    1ec6:	af 93       	push	r26
    1ec8:	bf 93       	push	r27
    1eca:	ef 93       	push	r30
    1ecc:	ff 93       	push	r31
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_OverflowInterruptHandler ){
    1ed6:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <Timer1_OverflowInterruptHandler>
    1eda:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <Timer1_OverflowInterruptHandler+0x1>
    1ede:	89 2b       	or	r24, r25
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <__vector_9+0x50>

    	Timer1_enuSetValueNormalCounter(Timer1_StaticU16InitValue);
    1ee2:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <Timer1_StaticU16InitValue>
    1ee6:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <Timer1_StaticU16InitValue+0x1>
    1eea:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Timer1_enuSetValueNormalCounter>
    	Timer1_OverflowInterruptHandler();
    1eee:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <Timer1_OverflowInterruptHandler>
    1ef2:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <Timer1_OverflowInterruptHandler+0x1>
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    1efa:	00 00       	nop
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	ff 91       	pop	r31
    1f02:	ef 91       	pop	r30
    1f04:	bf 91       	pop	r27
    1f06:	af 91       	pop	r26
    1f08:	9f 91       	pop	r25
    1f0a:	8f 91       	pop	r24
    1f0c:	7f 91       	pop	r23
    1f0e:	6f 91       	pop	r22
    1f10:	5f 91       	pop	r21
    1f12:	4f 91       	pop	r20
    1f14:	3f 91       	pop	r19
    1f16:	2f 91       	pop	r18
    1f18:	0f 90       	pop	r0
    1f1a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f1e:	0f 90       	pop	r0
    1f20:	1f 90       	pop	r1
    1f22:	18 95       	reti

00001f24 <__vector_6>:


// ISR function For TIMER1 ICU
void __vector_6(void) __attribute__((signal));

void __vector_6(void){
    1f24:	1f 92       	push	r1
    1f26:	0f 92       	push	r0
    1f28:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	4f 93       	push	r20
    1f36:	5f 93       	push	r21
    1f38:	6f 93       	push	r22
    1f3a:	7f 93       	push	r23
    1f3c:	8f 93       	push	r24
    1f3e:	9f 93       	push	r25
    1f40:	af 93       	push	r26
    1f42:	bf 93       	push	r27
    1f44:	ef 93       	push	r30
    1f46:	ff 93       	push	r31
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_IcuInterruptHandler ){
    1f50:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <Timer1_IcuInterruptHandler>
    1f54:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <Timer1_IcuInterruptHandler+0x1>
    1f58:	89 2b       	or	r24, r25
    1f5a:	31 f0       	breq	.+12     	; 0x1f68 <__vector_6+0x44>

    	Timer1_IcuInterruptHandler();
    1f5c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <Timer1_IcuInterruptHandler>
    1f60:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <Timer1_IcuInterruptHandler+0x1>
    1f64:	fc 01       	movw	r30, r24
    1f66:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    1f68:	00 00       	nop
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	ff 91       	pop	r31
    1f70:	ef 91       	pop	r30
    1f72:	bf 91       	pop	r27
    1f74:	af 91       	pop	r26
    1f76:	9f 91       	pop	r25
    1f78:	8f 91       	pop	r24
    1f7a:	7f 91       	pop	r23
    1f7c:	6f 91       	pop	r22
    1f7e:	5f 91       	pop	r21
    1f80:	4f 91       	pop	r20
    1f82:	3f 91       	pop	r19
    1f84:	2f 91       	pop	r18
    1f86:	0f 90       	pop	r0
    1f88:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <__vector_8>:


// ISR function For TIMER1 Compare Channel B
void __vector_8(void) __attribute__((signal));

void __vector_8(void){
    1f92:	1f 92       	push	r1
    1f94:	0f 92       	push	r0
    1f96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f9a:	0f 92       	push	r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	2f 93       	push	r18
    1fa0:	3f 93       	push	r19
    1fa2:	4f 93       	push	r20
    1fa4:	5f 93       	push	r21
    1fa6:	6f 93       	push	r22
    1fa8:	7f 93       	push	r23
    1faa:	8f 93       	push	r24
    1fac:	9f 93       	push	r25
    1fae:	af 93       	push	r26
    1fb0:	bf 93       	push	r27
    1fb2:	ef 93       	push	r30
    1fb4:	ff 93       	push	r31
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_CompareChannelBInterruptHandler ){
    1fbe:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <Timer1_CompareChannelBInterruptHandler>
    1fc2:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <Timer1_CompareChannelBInterruptHandler+0x1>
    1fc6:	89 2b       	or	r24, r25
    1fc8:	31 f0       	breq	.+12     	; 0x1fd6 <__vector_8+0x44>

    	Timer1_CompareChannelBInterruptHandler();
    1fca:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <Timer1_CompareChannelBInterruptHandler>
    1fce:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <Timer1_CompareChannelBInterruptHandler+0x1>
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    1fd6:	00 00       	nop
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	ff 91       	pop	r31
    1fde:	ef 91       	pop	r30
    1fe0:	bf 91       	pop	r27
    1fe2:	af 91       	pop	r26
    1fe4:	9f 91       	pop	r25
    1fe6:	8f 91       	pop	r24
    1fe8:	7f 91       	pop	r23
    1fea:	6f 91       	pop	r22
    1fec:	5f 91       	pop	r21
    1fee:	4f 91       	pop	r20
    1ff0:	3f 91       	pop	r19
    1ff2:	2f 91       	pop	r18
    1ff4:	0f 90       	pop	r0
    1ff6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ffa:	0f 90       	pop	r0
    1ffc:	1f 90       	pop	r1
    1ffe:	18 95       	reti

00002000 <__vector_7>:


// ISR function For TIMER1 Compare Channel A
void __vector_7(void) __attribute__((signal));

void __vector_7(void){
    2000:	1f 92       	push	r1
    2002:	0f 92       	push	r0
    2004:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2008:	0f 92       	push	r0
    200a:	11 24       	eor	r1, r1
    200c:	2f 93       	push	r18
    200e:	3f 93       	push	r19
    2010:	4f 93       	push	r20
    2012:	5f 93       	push	r21
    2014:	6f 93       	push	r22
    2016:	7f 93       	push	r23
    2018:	8f 93       	push	r24
    201a:	9f 93       	push	r25
    201c:	af 93       	push	r26
    201e:	bf 93       	push	r27
    2020:	ef 93       	push	r30
    2022:	ff 93       	push	r31
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_CompareChannelAInterruptHandler ){
    202c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <Timer1_CompareChannelAInterruptHandler>
    2030:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <Timer1_CompareChannelAInterruptHandler+0x1>
    2034:	89 2b       	or	r24, r25
    2036:	31 f0       	breq	.+12     	; 0x2044 <__vector_7+0x44>

    	Timer1_CompareChannelAInterruptHandler();
    2038:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <Timer1_CompareChannelAInterruptHandler>
    203c:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <Timer1_CompareChannelAInterruptHandler+0x1>
    2040:	fc 01       	movw	r30, r24
    2042:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
    2044:	00 00       	nop
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	ff 91       	pop	r31
    204c:	ef 91       	pop	r30
    204e:	bf 91       	pop	r27
    2050:	af 91       	pop	r26
    2052:	9f 91       	pop	r25
    2054:	8f 91       	pop	r24
    2056:	7f 91       	pop	r23
    2058:	6f 91       	pop	r22
    205a:	5f 91       	pop	r21
    205c:	4f 91       	pop	r20
    205e:	3f 91       	pop	r19
    2060:	2f 91       	pop	r18
    2062:	0f 90       	pop	r0
    2064:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2068:	0f 90       	pop	r0
    206a:	1f 90       	pop	r1
    206c:	18 95       	reti

0000206e <Timer0_enuInit>:
static  u8 Timer0_InitValue;
/********************************** Software Interfaces Declarations *******************/



Timer0_StatusErrorType Timer0_enuInit(const Timer0_ConfigType* Address_Timer0){
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	00 d0       	rcall	.+0      	; 0x2074 <Timer0_enuInit+0x6>
    2074:	1f 92       	push	r1
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	9b 83       	std	Y+3, r25	; 0x03
    207c:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	9b 81       	ldd	r25, Y+3	; 0x03
    2086:	89 2b       	or	r24, r25
    2088:	19 f4       	brne	.+6      	; 0x2090 <Timer0_enuInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	97 c0       	rjmp	.+302    	; 0x21be <Timer0_enuInit+0x150>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	        Timer0_Disable();
    2090:	83 e5       	ldi	r24, 0x53	; 83
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	23 e5       	ldi	r18, 0x53	; 83
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	f9 01       	movw	r30, r18
    209a:	20 81       	ld	r18, Z
    209c:	28 7f       	andi	r18, 0xF8	; 248
    209e:	fc 01       	movw	r30, r24
    20a0:	20 83       	st	Z, r18

		    	        /* Select Mode timer */
		    	        Timer0_SelectMode((Address_Timer0->select_mode));
    20a2:	83 e5       	ldi	r24, 0x53	; 83
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	23 e5       	ldi	r18, 0x53	; 83
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	f9 01       	movw	r30, r18
    20ac:	20 81       	ld	r18, Z
    20ae:	42 2f       	mov	r20, r18
    20b0:	4f 7b       	andi	r20, 0xBF	; 191
    20b2:	2a 81       	ldd	r18, Y+2	; 0x02
    20b4:	3b 81       	ldd	r19, Y+3	; 0x03
    20b6:	f9 01       	movw	r30, r18
    20b8:	21 81       	ldd	r18, Z+1	; 0x01
    20ba:	22 2f       	mov	r18, r18
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	21 70       	andi	r18, 0x01	; 1
    20c0:	33 27       	eor	r19, r19
    20c2:	00 24       	eor	r0, r0
    20c4:	36 95       	lsr	r19
    20c6:	27 95       	ror	r18
    20c8:	07 94       	ror	r0
    20ca:	36 95       	lsr	r19
    20cc:	27 95       	ror	r18
    20ce:	07 94       	ror	r0
    20d0:	32 2f       	mov	r19, r18
    20d2:	20 2d       	mov	r18, r0
    20d4:	24 2b       	or	r18, r20
    20d6:	fc 01       	movw	r30, r24
    20d8:	20 83       	st	Z, r18
    20da:	83 e5       	ldi	r24, 0x53	; 83
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	23 e5       	ldi	r18, 0x53	; 83
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	f9 01       	movw	r30, r18
    20e4:	20 81       	ld	r18, Z
    20e6:	42 2f       	mov	r20, r18
    20e8:	47 7f       	andi	r20, 0xF7	; 247
    20ea:	2a 81       	ldd	r18, Y+2	; 0x02
    20ec:	3b 81       	ldd	r19, Y+3	; 0x03
    20ee:	f9 01       	movw	r30, r18
    20f0:	21 81       	ldd	r18, Z+1	; 0x01
    20f2:	26 95       	lsr	r18
    20f4:	22 2f       	mov	r18, r18
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	21 70       	andi	r18, 0x01	; 1
    20fa:	33 27       	eor	r19, r19
    20fc:	22 0f       	add	r18, r18
    20fe:	33 1f       	adc	r19, r19
    2100:	22 0f       	add	r18, r18
    2102:	33 1f       	adc	r19, r19
    2104:	22 0f       	add	r18, r18
    2106:	33 1f       	adc	r19, r19
    2108:	24 2b       	or	r18, r20
    210a:	fc 01       	movw	r30, r24
    210c:	20 83       	st	Z, r18
    210e:	83 e5       	ldi	r24, 0x53	; 83
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	23 e5       	ldi	r18, 0x53	; 83
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	f9 01       	movw	r30, r18
    2118:	20 81       	ld	r18, Z
    211a:	42 2f       	mov	r20, r18
    211c:	4f 7e       	andi	r20, 0xEF	; 239
    211e:	2a 81       	ldd	r18, Y+2	; 0x02
    2120:	3b 81       	ldd	r19, Y+3	; 0x03
    2122:	f9 01       	movw	r30, r18
    2124:	21 81       	ldd	r18, Z+1	; 0x01
    2126:	26 95       	lsr	r18
    2128:	26 95       	lsr	r18
    212a:	22 2f       	mov	r18, r18
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	21 70       	andi	r18, 0x01	; 1
    2130:	33 27       	eor	r19, r19
    2132:	22 95       	swap	r18
    2134:	32 95       	swap	r19
    2136:	30 7f       	andi	r19, 0xF0	; 240
    2138:	32 27       	eor	r19, r18
    213a:	20 7f       	andi	r18, 0xF0	; 240
    213c:	32 27       	eor	r19, r18
    213e:	24 2b       	or	r18, r20
    2140:	fc 01       	movw	r30, r24
    2142:	20 83       	st	Z, r18
    2144:	83 e5       	ldi	r24, 0x53	; 83
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	23 e5       	ldi	r18, 0x53	; 83
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	f9 01       	movw	r30, r18
    214e:	20 81       	ld	r18, Z
    2150:	42 2f       	mov	r20, r18
    2152:	4f 7d       	andi	r20, 0xDF	; 223
    2154:	2a 81       	ldd	r18, Y+2	; 0x02
    2156:	3b 81       	ldd	r19, Y+3	; 0x03
    2158:	f9 01       	movw	r30, r18
    215a:	21 81       	ldd	r18, Z+1	; 0x01
    215c:	26 95       	lsr	r18
    215e:	26 95       	lsr	r18
    2160:	26 95       	lsr	r18
    2162:	22 2f       	mov	r18, r18
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	21 70       	andi	r18, 0x01	; 1
    2168:	33 27       	eor	r19, r19
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	22 95       	swap	r18
    2170:	32 95       	swap	r19
    2172:	30 7f       	andi	r19, 0xF0	; 240
    2174:	32 27       	eor	r19, r18
    2176:	20 7f       	andi	r18, 0xF0	; 240
    2178:	32 27       	eor	r19, r18
    217a:	24 2b       	or	r18, r20
    217c:	fc 01       	movw	r30, r24
    217e:	20 83       	st	Z, r18

		    	        Timer0_InitValue = Address_Timer0->init_value;
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	fc 01       	movw	r30, r24
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <Timer0_InitValue>
		    	        /* Update Init Value*/
		    	       Loc_enuTimer0Status= Timer0_enuSetValue(Address_Timer0, Address_Timer0->init_value);
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	9b 81       	ldd	r25, Y+3	; 0x03
    2190:	fc 01       	movw	r30, r24
    2192:	22 81       	ldd	r18, Z+2	; 0x02
    2194:	8a 81       	ldd	r24, Y+2	; 0x02
    2196:	9b 81       	ldd	r25, Y+3	; 0x03
    2198:	62 2f       	mov	r22, r18
    219a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <Timer0_enuSetValue>
    219e:	89 83       	std	Y+1, r24	; 0x01

		    	        /* Enable Timer0 Peripheral */
		    	        Timer0_Enable(Address_Timer0->prescaler_value);
    21a0:	83 e5       	ldi	r24, 0x53	; 83
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	23 e5       	ldi	r18, 0x53	; 83
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	f9 01       	movw	r30, r18
    21aa:	20 81       	ld	r18, Z
    21ac:	42 2f       	mov	r20, r18
    21ae:	48 7f       	andi	r20, 0xF8	; 248
    21b0:	2a 81       	ldd	r18, Y+2	; 0x02
    21b2:	3b 81       	ldd	r19, Y+3	; 0x03
    21b4:	f9 01       	movw	r30, r18
    21b6:	20 81       	ld	r18, Z
    21b8:	24 2b       	or	r18, r20
    21ba:	fc 01       	movw	r30, r24
    21bc:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
    21be:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <Timer0_enuDeInit>:

Timer0_StatusErrorType Timer0_enuDeInit(const Timer0_ConfigType* Address_Timer0){
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <Timer0_enuDeInit+0x6>
    21d2:	1f 92       	push	r1
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	9b 83       	std	Y+3, r25	; 0x03
    21da:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	9b 81       	ldd	r25, Y+3	; 0x03
    21e4:	89 2b       	or	r24, r25
    21e6:	19 f4       	brne	.+6      	; 0x21ee <Timer0_enuDeInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	09 c0       	rjmp	.+18     	; 0x2200 <Timer0_enuDeInit+0x34>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	Timer0_Disable();
    21ee:	83 e5       	ldi	r24, 0x53	; 83
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	23 e5       	ldi	r18, 0x53	; 83
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	f9 01       	movw	r30, r18
    21f8:	20 81       	ld	r18, Z
    21fa:	28 7f       	andi	r18, 0xF8	; 248
    21fc:	fc 01       	movw	r30, r24
    21fe:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
    2200:	89 81       	ldd	r24, Y+1	; 0x01
}
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	08 95       	ret

0000220e <Timer0_enuEnableInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableInterrupt(const Timer0_ConfigType* Address_Timer0){
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	00 d0       	rcall	.+0      	; 0x2214 <Timer0_enuEnableInterrupt+0x6>
    2214:	1f 92       	push	r1
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	9b 83       	std	Y+3, r25	; 0x03
    221c:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	89 2b       	or	r24, r25
    2228:	19 f4       	brne	.+6      	; 0x2230 <Timer0_enuEnableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	19 c0       	rjmp	.+50     	; 0x2262 <Timer0_enuEnableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	9b 81       	ldd	r25, Y+3	; 0x03
    2234:	fc 01       	movw	r30, r24
    2236:	81 81       	ldd	r24, Z+1	; 0x01
    2238:	88 23       	and	r24, r24
    223a:	51 f4       	brne	.+20     	; 0x2250 <Timer0_enuEnableInterrupt+0x42>

		    		Timer0_EnableOverviewInterrupt();
    223c:	89 e5       	ldi	r24, 0x59	; 89
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	29 e5       	ldi	r18, 0x59	; 89
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	f9 01       	movw	r30, r18
    2246:	20 81       	ld	r18, Z
    2248:	21 60       	ori	r18, 0x01	; 1
    224a:	fc 01       	movw	r30, r24
    224c:	20 83       	st	Z, r18
    224e:	09 c0       	rjmp	.+18     	; 0x2262 <Timer0_enuEnableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_EnableComparePwmInterrupt();
    2250:	89 e5       	ldi	r24, 0x59	; 89
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	29 e5       	ldi	r18, 0x59	; 89
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	f9 01       	movw	r30, r18
    225a:	20 81       	ld	r18, Z
    225c:	22 60       	ori	r18, 0x02	; 2
    225e:	fc 01       	movw	r30, r24
    2260:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	08 95       	ret

00002270 <Timer0_enuDisableInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableInterrupt(const Timer0_ConfigType* Address_Timer0){
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	00 d0       	rcall	.+0      	; 0x2276 <Timer0_enuDisableInterrupt+0x6>
    2276:	1f 92       	push	r1
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	9b 83       	std	Y+3, r25	; 0x03
    227e:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	9b 81       	ldd	r25, Y+3	; 0x03
    2288:	89 2b       	or	r24, r25
    228a:	19 f4       	brne	.+6      	; 0x2292 <Timer0_enuDisableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	19 c0       	rjmp	.+50     	; 0x22c4 <Timer0_enuDisableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	9b 81       	ldd	r25, Y+3	; 0x03
    2296:	fc 01       	movw	r30, r24
    2298:	81 81       	ldd	r24, Z+1	; 0x01
    229a:	88 23       	and	r24, r24
    229c:	51 f4       	brne	.+20     	; 0x22b2 <Timer0_enuDisableInterrupt+0x42>

		    		Timer0_DisableOverviewInterrupt();
    229e:	89 e5       	ldi	r24, 0x59	; 89
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	29 e5       	ldi	r18, 0x59	; 89
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	f9 01       	movw	r30, r18
    22a8:	20 81       	ld	r18, Z
    22aa:	2e 7f       	andi	r18, 0xFE	; 254
    22ac:	fc 01       	movw	r30, r24
    22ae:	20 83       	st	Z, r18
    22b0:	09 c0       	rjmp	.+18     	; 0x22c4 <Timer0_enuDisableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_DisbleComparePwmInterrupt();
    22b2:	89 e5       	ldi	r24, 0x59	; 89
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	29 e5       	ldi	r18, 0x59	; 89
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	f9 01       	movw	r30, r18
    22bc:	20 81       	ld	r18, Z
    22be:	2d 7f       	andi	r18, 0xFD	; 253
    22c0:	fc 01       	movw	r30, r24
    22c2:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	08 95       	ret

000022d2 <Timer0_enuSetValue>:


Timer0_StatusErrorType Timer0_enuSetValue(const Timer0_ConfigType* Address_Timer0, u8 Copy_u8Value){
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <Timer0_enuSetValue+0x6>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <Timer0_enuSetValue+0x8>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	9b 83       	std	Y+3, r25	; 0x03
    22e0:	8a 83       	std	Y+2, r24	; 0x02
    22e2:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	89 2b       	or	r24, r25
    22ee:	19 f4       	brne	.+6      	; 0x22f6 <Timer0_enuSetValue+0x24>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	11 c0       	rjmp	.+34     	; 0x2318 <Timer0_enuSetValue+0x46>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	fc 01       	movw	r30, r24
    22fc:	81 81       	ldd	r24, Z+1	; 0x01
    22fe:	88 23       	and	r24, r24
    2300:	31 f4       	brne	.+12     	; 0x230e <Timer0_enuSetValue+0x3c>



		    		ASSIGN_REG(TCNT0,Copy_u8Value);
    2302:	82 e5       	ldi	r24, 0x52	; 82
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	2c 81       	ldd	r18, Y+4	; 0x04
    2308:	fc 01       	movw	r30, r24
    230a:	20 83       	st	Z, r18
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <Timer0_enuSetValue+0x46>

		    	}
		    	else{
		    		ASSIGN_REG(OCR0,Copy_u8Value);
    230e:	8c e5       	ldi	r24, 0x5C	; 92
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	2c 81       	ldd	r18, Y+4	; 0x04
    2314:	fc 01       	movw	r30, r24
    2316:	20 83       	st	Z, r18



		    }

		    return Loc_enuTimer0Status;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	08 95       	ret

00002328 <Timer0_enuGetTimeElapsed>:
Timer0_StatusErrorType Timer0_enuGetTimeElapsed(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	00 d0       	rcall	.+0      	; 0x232e <Timer0_enuGetTimeElapsed+0x6>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <Timer0_enuGetTimeElapsed+0x8>
    2330:	1f 92       	push	r1
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	9b 83       	std	Y+3, r25	; 0x03
    2338:	8a 83       	std	Y+2, r24	; 0x02
    233a:	7d 83       	std	Y+5, r23	; 0x05
    233c:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	9b 81       	ldd	r25, Y+3	; 0x03
    2346:	89 2b       	or	r24, r25
    2348:	19 f4       	brne	.+6      	; 0x2350 <Timer0_enuGetTimeElapsed+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	0b c0       	rjmp	.+22     	; 0x2366 <Timer0_enuGetTimeElapsed+0x3e>
		    }
		    else{

		    	*Address_Value = TCNT0;
    2350:	82 e5       	ldi	r24, 0x52	; 82
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	fc 01       	movw	r30, r24
    2356:	80 81       	ld	r24, Z
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	9d 81       	ldd	r25, Y+5	; 0x05
    2360:	fc 01       	movw	r30, r24
    2362:	31 83       	std	Z+1, r19	; 0x01
    2364:	20 83       	st	Z, r18
		    }

		    return Loc_enuTimer0Status;
    2366:	89 81       	ldd	r24, Y+1	; 0x01
}
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	08 95       	ret

00002378 <Timer0_enuGetRemaining>:
Timer0_StatusErrorType Timer0_enuGetRemaining(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	00 d0       	rcall	.+0      	; 0x237e <Timer0_enuGetRemaining+0x6>
    237e:	00 d0       	rcall	.+0      	; 0x2380 <Timer0_enuGetRemaining+0x8>
    2380:	1f 92       	push	r1
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	9b 83       	std	Y+3, r25	; 0x03
    2388:	8a 83       	std	Y+2, r24	; 0x02
    238a:	7d 83       	std	Y+5, r23	; 0x05
    238c:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	9b 81       	ldd	r25, Y+3	; 0x03
    2396:	89 2b       	or	r24, r25
    2398:	11 f4       	brne	.+4      	; 0x239e <Timer0_enuGetRemaining+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	89 83       	std	Y+1, r24	; 0x01
		    else{


		    }

		    return Loc_enuTimer0Status;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	08 95       	ret

000023b0 <Timer0_enuSetCallbackFunction>:


Timer0_StatusErrorType Timer0_enuSetCallbackFunction(const Timer0_ConfigType* Address_Timer0,void (*callback)(void)){
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <Timer0_enuSetCallbackFunction+0x6>
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <Timer0_enuSetCallbackFunction+0x8>
    23b8:	1f 92       	push	r1
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	9b 83       	std	Y+3, r25	; 0x03
    23c0:	8a 83       	std	Y+2, r24	; 0x02
    23c2:	7d 83       	std	Y+5, r23	; 0x05
    23c4:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	9b 81       	ldd	r25, Y+3	; 0x03
    23ce:	89 2b       	or	r24, r25
    23d0:	19 f4       	brne	.+6      	; 0x23d8 <Timer0_enuSetCallbackFunction+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	13 c0       	rjmp	.+38     	; 0x23fe <Timer0_enuSetCallbackFunction+0x4e>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	9b 81       	ldd	r25, Y+3	; 0x03
    23dc:	fc 01       	movw	r30, r24
    23de:	81 81       	ldd	r24, Z+1	; 0x01
    23e0:	88 23       	and	r24, r24
    23e2:	39 f4       	brne	.+14     	; 0x23f2 <Timer0_enuSetCallbackFunction+0x42>

		    		Timer0_OverflowInterruptHandler = callback;
    23e4:	8c 81       	ldd	r24, Y+4	; 0x04
    23e6:	9d 81       	ldd	r25, Y+5	; 0x05
    23e8:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <Timer0_OverflowInterruptHandler+0x1>
    23ec:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <Timer0_OverflowInterruptHandler>
    23f0:	06 c0       	rjmp	.+12     	; 0x23fe <Timer0_enuSetCallbackFunction+0x4e>


		    	}
		    	else{
		    		Timer0_CompareInterruptHandler = callback;
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	9d 81       	ldd	r25, Y+5	; 0x05
    23f6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer0_CompareInterruptHandler+0x1>
    23fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer0_CompareInterruptHandler>
		    	}


		    }

		    return Loc_enuTimer0Status;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	08 95       	ret

00002410 <Timer0_enuEnableOverflowInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableOverflowInterrupt(void){
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	1f 92       	push	r1
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableOverviewInterrupt();
    241e:	89 e5       	ldi	r24, 0x59	; 89
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	29 e5       	ldi	r18, 0x59	; 89
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	f9 01       	movw	r30, r18
    2428:	20 81       	ld	r18, Z
    242a:	21 60       	ori	r18, 0x01	; 1
    242c:	fc 01       	movw	r30, r24
    242e:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
    2430:	89 81       	ldd	r24, Y+1	; 0x01
}
    2432:	0f 90       	pop	r0
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	08 95       	ret

0000243a <Timer0_enuEnableCaptureInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableCaptureInterrupt(void){
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
    243e:	1f 92       	push	r1
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableComparePwmInterrupt();
    2448:	89 e5       	ldi	r24, 0x59	; 89
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	29 e5       	ldi	r18, 0x59	; 89
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	f9 01       	movw	r30, r18
    2452:	20 81       	ld	r18, Z
    2454:	22 60       	ori	r18, 0x02	; 2
    2456:	fc 01       	movw	r30, r24
    2458:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
    245a:	89 81       	ldd	r24, Y+1	; 0x01
}
    245c:	0f 90       	pop	r0
    245e:	df 91       	pop	r29
    2460:	cf 91       	pop	r28
    2462:	08 95       	ret

00002464 <Timer0_enuSetCallbackOverflowInterrupt>:


Timer0_StatusErrorType Timer0_enuSetCallbackOverflowInterrupt(void (*callback)(void)){
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	00 d0       	rcall	.+0      	; 0x246a <Timer0_enuSetCallbackOverflowInterrupt+0x6>
    246a:	1f 92       	push	r1
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	9b 83       	std	Y+3, r25	; 0x03
    2472:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	9b 81       	ldd	r25, Y+3	; 0x03
    247c:	89 2b       	or	r24, r25
    247e:	19 f4       	brne	.+6      	; 0x2486 <Timer0_enuSetCallbackOverflowInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	06 c0       	rjmp	.+12     	; 0x2492 <Timer0_enuSetCallbackOverflowInterrupt+0x2e>
		    }

		    else{
		    		Timer0_OverflowInterruptHandler = callback;
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	9b 81       	ldd	r25, Y+3	; 0x03
    248a:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <Timer0_OverflowInterruptHandler+0x1>
    248e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <Timer0_OverflowInterruptHandler>


		    }

		    return Loc_enuTimer0Status;
    2492:	89 81       	ldd	r24, Y+1	; 0x01
}
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	08 95       	ret

000024a0 <Timer0_enuSetCallbackCompareInterrupt>:
Timer0_StatusErrorType Timer0_enuSetCallbackCompareInterrupt(void (*callback)(void)){
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <Timer0_enuSetCallbackCompareInterrupt+0x6>
    24a6:	1f 92       	push	r1
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	9b 83       	std	Y+3, r25	; 0x03
    24ae:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	9b 81       	ldd	r25, Y+3	; 0x03
    24b8:	89 2b       	or	r24, r25
    24ba:	19 f4       	brne	.+6      	; 0x24c2 <Timer0_enuSetCallbackCompareInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	06 c0       	rjmp	.+12     	; 0x24ce <Timer0_enuSetCallbackCompareInterrupt+0x2e>
		    }

		    else{
		    		Timer0_CompareInterruptHandler = callback;
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Timer0_CompareInterruptHandler+0x1>
    24ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <Timer0_CompareInterruptHandler>


		    }

		    return Loc_enuTimer0Status;
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	08 95       	ret

000024dc <Timer0_enuDisableOverflowInterrupt>:


Timer0_StatusErrorType Timer0_enuDisableOverflowInterrupt(void){
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	1f 92       	push	r1
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	89 83       	std	Y+1, r24	; 0x01

			Timer0_DisableOverviewInterrupt();
    24ea:	89 e5       	ldi	r24, 0x59	; 89
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	29 e5       	ldi	r18, 0x59	; 89
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	f9 01       	movw	r30, r18
    24f4:	20 81       	ld	r18, Z
    24f6:	2e 7f       	andi	r18, 0xFE	; 254
    24f8:	fc 01       	movw	r30, r24
    24fa:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    24fe:	0f 90       	pop	r0
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <Timer0_enuDisableCaptureInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableCaptureInterrupt(void){
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	1f 92       	push	r1
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62

		Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	89 83       	std	Y+1, r24	; 0x01

	  	Timer0_DisbleComparePwmInterrupt();
    2514:	89 e5       	ldi	r24, 0x59	; 89
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	29 e5       	ldi	r18, 0x59	; 89
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	f9 01       	movw	r30, r18
    251e:	20 81       	ld	r18, Z
    2520:	2d 7f       	andi	r18, 0xFD	; 253
    2522:	fc 01       	movw	r30, r24
    2524:	20 83       	st	Z, r18

			    return Loc_enuTimer0Status;
    2526:	89 81       	ldd	r24, Y+1	; 0x01

}
    2528:	0f 90       	pop	r0
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	08 95       	ret

00002530 <Timer0_enuCtcForcePinImmediatly>:



Timer0_StatusErrorType Timer0_enuCtcForcePinImmediatly(const Timer0_ConfigType* Address_Timer0){
    2530:	cf 93       	push	r28
    2532:	df 93       	push	r29
    2534:	00 d0       	rcall	.+0      	; 0x2536 <Timer0_enuCtcForcePinImmediatly+0x6>
    2536:	1f 92       	push	r1
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9b 83       	std	Y+3, r25	; 0x03
    253e:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	89 2b       	or	r24, r25
    254a:	19 f4       	brne	.+6      	; 0x2552 <Timer0_enuCtcForcePinImmediatly+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	09 c0       	rjmp	.+18     	; 0x2564 <Timer0_enuCtcForcePinImmediatly+0x34>
		    }
		    else{

		    	SET_BIT(TCCR0,FOC0_BIT);
    2552:	83 e5       	ldi	r24, 0x53	; 83
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	23 e5       	ldi	r18, 0x53	; 83
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	f9 01       	movw	r30, r18
    255c:	20 81       	ld	r18, Z
    255e:	20 68       	ori	r18, 0x80	; 128
    2560:	fc 01       	movw	r30, r24
    2562:	20 83       	st	Z, r18


		    }

		    return Loc_enuTimer0Status;
    2564:	89 81       	ldd	r24, Y+1	; 0x01
}
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <Timer0_enuSetDutyCyclePwm>:


Timer0_StatusErrorType Timer0_enuSetDutyCyclePwm(const Timer0_ConfigType* Address_Timer0,u8 Copy_u8DutyCylePrecentage){
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	00 d0       	rcall	.+0      	; 0x2578 <Timer0_enuSetDutyCyclePwm+0x6>
    2578:	00 d0       	rcall	.+0      	; 0x257a <Timer0_enuSetDutyCyclePwm+0x8>
    257a:	1f 92       	push	r1
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	6d 83       	std	Y+5, r22	; 0x05
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	89 83       	std	Y+1, r24	; 0x01

//	u8 Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * 255);
	u8 Loc_u8DutyCycle;

		    if(NULL == Address_Timer0){
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	9c 81       	ldd	r25, Y+4	; 0x04
    258e:	89 2b       	or	r24, r25
    2590:	19 f4       	brne	.+6      	; 0x2598 <Timer0_enuSetDutyCyclePwm+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	79 c0       	rjmp	.+242    	; 0x268a <Timer0_enuSetDutyCyclePwm+0x118>
		    }

		    else {

		    	Copy_u8DutyCylePrecentage = (Copy_u8DutyCylePrecentage >= 100) ? 100 :Copy_u8DutyCylePrecentage;
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	85 36       	cpi	r24, 0x65	; 101
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <Timer0_enuSetDutyCyclePwm+0x2e>
    259e:	84 e6       	ldi	r24, 0x64	; 100
    25a0:	8d 83       	std	Y+5, r24	; 0x05

		    	switch(Address_Timer0->select_mode){
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	fc 01       	movw	r30, r24
    25a8:	81 81       	ldd	r24, Z+1	; 0x01
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	09 2e       	mov	r0, r25
    25b0:	00 0c       	add	r0, r0
    25b2:	aa 0b       	sbc	r26, r26
    25b4:	bb 0b       	sbc	r27, r27
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	2f e0       	ldi	r18, 0x0F	; 15
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	84 1b       	sub	r24, r20
    25c0:	95 0b       	sbc	r25, r21
    25c2:	28 17       	cp	r18, r24
    25c4:	39 07       	cpc	r19, r25
    25c6:	08 f4       	brcc	.+2      	; 0x25ca <Timer0_enuSetDutyCyclePwm+0x58>
    25c8:	60 c0       	rjmp	.+192    	; 0x268a <Timer0_enuSetDutyCyclePwm+0x118>
    25ca:	86 5c       	subi	r24, 0xC6	; 198
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	fc 01       	movw	r30, r24
    25d0:	0c 94 b9 36 	jmp	0x6d72	; 0x6d72 <__tablejump2__>
		    	case  TIMER0_SELECT_MODE_NORMAL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_NORMAEL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_TOGGLE :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_CLEAR  :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_SET :
		    		Loc_enuTimer0Status = TIMER0_STATUS_FAIL;
    25d4:	19 82       	std	Y+1, r1	; 0x01
		    		break;
    25d6:	59 c0       	rjmp	.+178    	; 0x268a <Timer0_enuSetDutyCyclePwm+0x118>
		    		/* i don't know what is the usage of this */
		    		break;

		    	case TIMER0_SELECT_MODE_PWM_FAST_INVERTED_OC0_SET_ON_MATCH_CLEAR_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_SET_ON_MATCH_UPCOUNTING_CLEAR_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = TIMER0_FULL_VALUE_IN_REGISTER- (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	a0 e0       	ldi	r26, 0x00	; 0
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	48 ec       	ldi	r20, 0xC8	; 200
    25f4:	52 e4       	ldi	r21, 0x42	; 66
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4f e7       	ldi	r20, 0x7F	; 127
    2608:	53 e4       	ldi	r21, 0x43	; 67
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	80 95       	com	r24
    2624:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    2626:	8c e5       	ldi	r24, 0x5C	; 92
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	2a 81       	ldd	r18, Y+2	; 0x02
    262c:	fc 01       	movw	r30, r24
    262e:	20 83       	st	Z, r18

		    		break;
    2630:	2c c0       	rjmp	.+88     	; 0x268a <Timer0_enuSetDutyCyclePwm+0x118>

		    	case TIMER0_SELECT_MODE_PWM_FAST_NOT_INVERTED_OC0_CLEAR_ON_MATCH_SET_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_CLEAR_ON_MATCH_UPCOUNTING_SET_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 e0       	ldi	r26, 0x00	; 0
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	48 ec       	ldi	r20, 0xC8	; 200
    264e:	52 e4       	ldi	r21, 0x42	; 66
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	53 e4       	ldi	r21, 0x43	; 67
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    267e:	8c e5       	ldi	r24, 0x5C	; 92
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	2a 81       	ldd	r18, Y+2	; 0x02
    2684:	fc 01       	movw	r30, r24
    2686:	20 83       	st	Z, r18

		    		break;
    2688:	00 00       	nop

		    }


		    }
		    return Loc_enuTimer0Status;
    268a:	89 81       	ldd	r24, Y+1	; 0x01
}
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	08 95       	ret

0000269c <__vector_10>:


// ISR function For TIMER0 Compare Match
void __vector_10(void) __attribute__((signal));

void __vector_10(void){
    269c:	1f 92       	push	r1
    269e:	0f 92       	push	r0
    26a0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    26a4:	0f 92       	push	r0
    26a6:	11 24       	eor	r1, r1
    26a8:	2f 93       	push	r18
    26aa:	3f 93       	push	r19
    26ac:	4f 93       	push	r20
    26ae:	5f 93       	push	r21
    26b0:	6f 93       	push	r22
    26b2:	7f 93       	push	r23
    26b4:	8f 93       	push	r24
    26b6:	9f 93       	push	r25
    26b8:	af 93       	push	r26
    26ba:	bf 93       	push	r27
    26bc:	ef 93       	push	r30
    26be:	ff 93       	push	r31
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62

	    if(NULL !=Timer0_CompareInterruptHandler ){
    26c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <Timer0_CompareInterruptHandler>
    26cc:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <Timer0_CompareInterruptHandler+0x1>
    26d0:	89 2b       	or	r24, r25
    26d2:	31 f0       	breq	.+12     	; 0x26e0 <__vector_10+0x44>
	    	Timer0_CompareInterruptHandler();
    26d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <Timer0_CompareInterruptHandler>
    26d8:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <Timer0_CompareInterruptHandler+0x1>
    26dc:	fc 01       	movw	r30, r24
    26de:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
    26e0:	00 00       	nop
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	ff 91       	pop	r31
    26e8:	ef 91       	pop	r30
    26ea:	bf 91       	pop	r27
    26ec:	af 91       	pop	r26
    26ee:	9f 91       	pop	r25
    26f0:	8f 91       	pop	r24
    26f2:	7f 91       	pop	r23
    26f4:	6f 91       	pop	r22
    26f6:	5f 91       	pop	r21
    26f8:	4f 91       	pop	r20
    26fa:	3f 91       	pop	r19
    26fc:	2f 91       	pop	r18
    26fe:	0f 90       	pop	r0
    2700:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2704:	0f 90       	pop	r0
    2706:	1f 90       	pop	r1
    2708:	18 95       	reti

0000270a <__vector_11>:


// ISR function For TIMER0 OverFlow
void __vector_11(void) __attribute__((signal));

void __vector_11(void){
    270a:	1f 92       	push	r1
    270c:	0f 92       	push	r0
    270e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2712:	0f 92       	push	r0
    2714:	11 24       	eor	r1, r1
    2716:	2f 93       	push	r18
    2718:	3f 93       	push	r19
    271a:	4f 93       	push	r20
    271c:	5f 93       	push	r21
    271e:	6f 93       	push	r22
    2720:	7f 93       	push	r23
    2722:	8f 93       	push	r24
    2724:	9f 93       	push	r25
    2726:	af 93       	push	r26
    2728:	bf 93       	push	r27
    272a:	ef 93       	push	r30
    272c:	ff 93       	push	r31
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62

//	Timer0_DisableOverviewInterrupt();



    if(NULL !=Timer0_OverflowInterruptHandler ){
    2736:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <Timer0_OverflowInterruptHandler>
    273a:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <Timer0_OverflowInterruptHandler+0x1>
    273e:	89 2b       	or	r24, r25
    2740:	61 f0       	breq	.+24     	; 0x275a <__vector_11+0x50>

    	TCNT0 = Timer0_InitValue;
    2742:	82 e5       	ldi	r24, 0x52	; 82
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	20 91 ea 00 	lds	r18, 0x00EA	; 0x8000ea <Timer0_InitValue>
    274a:	fc 01       	movw	r30, r24
    274c:	20 83       	st	Z, r18
    	Timer0_OverflowInterruptHandler();
    274e:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <Timer0_OverflowInterruptHandler>
    2752:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <Timer0_OverflowInterruptHandler+0x1>
    2756:	fc 01       	movw	r30, r24
    2758:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
    275a:	00 00       	nop
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	ff 91       	pop	r31
    2762:	ef 91       	pop	r30
    2764:	bf 91       	pop	r27
    2766:	af 91       	pop	r26
    2768:	9f 91       	pop	r25
    276a:	8f 91       	pop	r24
    276c:	7f 91       	pop	r23
    276e:	6f 91       	pop	r22
    2770:	5f 91       	pop	r21
    2772:	4f 91       	pop	r20
    2774:	3f 91       	pop	r19
    2776:	2f 91       	pop	r18
    2778:	0f 90       	pop	r0
    277a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    277e:	0f 90       	pop	r0
    2780:	1f 90       	pop	r1
    2782:	18 95       	reti

00002784 <Spi_enuInit>:
/********************************** Data Type Declarations ****************************/


/********************************** Software Interfaces Declarations *******************/

Spi_StatusErrorType Spi_enuInit(const Spi_ConfigType* Address_Spi){
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	00 d0       	rcall	.+0      	; 0x278a <Spi_enuInit+0x6>
    278a:	1f 92       	push	r1
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	9b 83       	std	Y+3, r25	; 0x03
    2792:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_Spi){
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	9b 81       	ldd	r25, Y+3	; 0x03
    279c:	89 2b       	or	r24, r25
    279e:	19 f4       	brne	.+6      	; 0x27a6 <Spi_enuInit+0x22>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	8f c0       	rjmp	.+286    	; 0x28c4 <Spi_enuInit+0x140>
	}
	else{

		/* Disable During Configuration */
		Spi_Disable();
    27a6:	8d e2       	ldi	r24, 0x2D	; 45
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	2d e2       	ldi	r18, 0x2D	; 45
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	f9 01       	movw	r30, r18
    27b0:	20 81       	ld	r18, Z
    27b2:	2f 7b       	andi	r18, 0xBF	; 191
    27b4:	fc 01       	movw	r30, r24
    27b6:	20 83       	st	Z, r18

		/* Select MasterSlaveType */
		Spi_SelectMasterSlave(Address_Spi->select_master_or_slave);
    27b8:	8d e2       	ldi	r24, 0x2D	; 45
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	2d e2       	ldi	r18, 0x2D	; 45
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	f9 01       	movw	r30, r18
    27c2:	20 81       	ld	r18, Z
    27c4:	42 2f       	mov	r20, r18
    27c6:	4f 7e       	andi	r20, 0xEF	; 239
    27c8:	2a 81       	ldd	r18, Y+2	; 0x02
    27ca:	3b 81       	ldd	r19, Y+3	; 0x03
    27cc:	f9 01       	movw	r30, r18
    27ce:	20 81       	ld	r18, Z
    27d0:	22 2f       	mov	r18, r18
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	22 95       	swap	r18
    27d6:	32 95       	swap	r19
    27d8:	30 7f       	andi	r19, 0xF0	; 240
    27da:	32 27       	eor	r19, r18
    27dc:	20 7f       	andi	r18, 0xF0	; 240
    27de:	32 27       	eor	r19, r18
    27e0:	24 2b       	or	r18, r20
    27e2:	fc 01       	movw	r30, r24
    27e4:	20 83       	st	Z, r18

		/* Select data ording */
		Spi_SelectDataOrding(Address_Spi->select_data_ording);
    27e6:	8d e2       	ldi	r24, 0x2D	; 45
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	2d e2       	ldi	r18, 0x2D	; 45
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	f9 01       	movw	r30, r18
    27f0:	20 81       	ld	r18, Z
    27f2:	42 2f       	mov	r20, r18
    27f4:	4f 7d       	andi	r20, 0xDF	; 223
    27f6:	2a 81       	ldd	r18, Y+2	; 0x02
    27f8:	3b 81       	ldd	r19, Y+3	; 0x03
    27fa:	f9 01       	movw	r30, r18
    27fc:	21 81       	ldd	r18, Z+1	; 0x01
    27fe:	22 2f       	mov	r18, r18
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	22 95       	swap	r18
    2808:	32 95       	swap	r19
    280a:	30 7f       	andi	r19, 0xF0	; 240
    280c:	32 27       	eor	r19, r18
    280e:	20 7f       	andi	r18, 0xF0	; 240
    2810:	32 27       	eor	r19, r18
    2812:	24 2b       	or	r18, r20
    2814:	fc 01       	movw	r30, r24
    2816:	20 83       	st	Z, r18

		/* Select Polarity */
		Spi_SelectPolarity(Address_Spi->select_polarity);
    2818:	8d e2       	ldi	r24, 0x2D	; 45
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	2d e2       	ldi	r18, 0x2D	; 45
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	f9 01       	movw	r30, r18
    2822:	20 81       	ld	r18, Z
    2824:	42 2f       	mov	r20, r18
    2826:	47 7f       	andi	r20, 0xF7	; 247
    2828:	2a 81       	ldd	r18, Y+2	; 0x02
    282a:	3b 81       	ldd	r19, Y+3	; 0x03
    282c:	f9 01       	movw	r30, r18
    282e:	22 81       	ldd	r18, Z+2	; 0x02
    2830:	22 2f       	mov	r18, r18
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	22 0f       	add	r18, r18
    2836:	33 1f       	adc	r19, r19
    2838:	22 0f       	add	r18, r18
    283a:	33 1f       	adc	r19, r19
    283c:	22 0f       	add	r18, r18
    283e:	33 1f       	adc	r19, r19
    2840:	24 2b       	or	r18, r20
    2842:	fc 01       	movw	r30, r24
    2844:	20 83       	st	Z, r18

		/* Select Phase */
		Spi_SelectPhase(Address_Spi->select_phase);
    2846:	8d e2       	ldi	r24, 0x2D	; 45
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	2d e2       	ldi	r18, 0x2D	; 45
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	f9 01       	movw	r30, r18
    2850:	20 81       	ld	r18, Z
    2852:	42 2f       	mov	r20, r18
    2854:	4b 7f       	andi	r20, 0xFB	; 251
    2856:	2a 81       	ldd	r18, Y+2	; 0x02
    2858:	3b 81       	ldd	r19, Y+3	; 0x03
    285a:	f9 01       	movw	r30, r18
    285c:	23 81       	ldd	r18, Z+3	; 0x03
    285e:	22 2f       	mov	r18, r18
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	22 0f       	add	r18, r18
    2864:	33 1f       	adc	r19, r19
    2866:	22 0f       	add	r18, r18
    2868:	33 1f       	adc	r19, r19
    286a:	24 2b       	or	r18, r20
    286c:	fc 01       	movw	r30, r24
    286e:	20 83       	st	Z, r18

		/* Select Clock Speed */
		Spi_SelectClkSpeed(Address_Spi->select_clk_speed);
    2870:	8d e2       	ldi	r24, 0x2D	; 45
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	2d e2       	ldi	r18, 0x2D	; 45
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	f9 01       	movw	r30, r18
    287a:	20 81       	ld	r18, Z
    287c:	42 2f       	mov	r20, r18
    287e:	4c 7f       	andi	r20, 0xFC	; 252
    2880:	2a 81       	ldd	r18, Y+2	; 0x02
    2882:	3b 81       	ldd	r19, Y+3	; 0x03
    2884:	f9 01       	movw	r30, r18
    2886:	24 81       	ldd	r18, Z+4	; 0x04
    2888:	23 70       	andi	r18, 0x03	; 3
    288a:	24 2b       	or	r18, r20
    288c:	fc 01       	movw	r30, r24
    288e:	20 83       	st	Z, r18
    2890:	8e e2       	ldi	r24, 0x2E	; 46
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	2e e2       	ldi	r18, 0x2E	; 46
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	f9 01       	movw	r30, r18
    289a:	20 81       	ld	r18, Z
    289c:	42 2f       	mov	r20, r18
    289e:	4e 7f       	andi	r20, 0xFE	; 254
    28a0:	2a 81       	ldd	r18, Y+2	; 0x02
    28a2:	3b 81       	ldd	r19, Y+3	; 0x03
    28a4:	f9 01       	movw	r30, r18
    28a6:	24 81       	ldd	r18, Z+4	; 0x04
    28a8:	26 95       	lsr	r18
    28aa:	26 95       	lsr	r18
    28ac:	24 2b       	or	r18, r20
    28ae:	fc 01       	movw	r30, r24
    28b0:	20 83       	st	Z, r18

		/* Enable During Configuration */
		Spi_Enable();
    28b2:	8d e2       	ldi	r24, 0x2D	; 45
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	2d e2       	ldi	r18, 0x2D	; 45
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	f9 01       	movw	r30, r18
    28bc:	20 81       	ld	r18, Z
    28be:	20 64       	ori	r18, 0x40	; 64
    28c0:	fc 01       	movw	r30, r24
    28c2:	20 83       	st	Z, r18

	}

	return Loc_enuSpiStatus;
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	08 95       	ret

000028d2 <Spi_enuDeInit>:

Spi_StatusErrorType Spi_enuDeInit(void){
    28d2:	cf 93       	push	r28
    28d4:	df 93       	push	r29
    28d6:	1f 92       	push	r1
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	89 83       	std	Y+1, r24	; 0x01

	/* Disable  */
	Spi_Disable();
    28e0:	8d e2       	ldi	r24, 0x2D	; 45
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	2d e2       	ldi	r18, 0x2D	; 45
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	f9 01       	movw	r30, r18
    28ea:	20 81       	ld	r18, Z
    28ec:	2f 7b       	andi	r18, 0xBF	; 191
    28ee:	fc 01       	movw	r30, r24
    28f0:	20 83       	st	Z, r18

	return Loc_enuSpiStatus;
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    28f4:	0f 90       	pop	r0
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	08 95       	ret

000028fc <Spi_enuEnableInterrupt>:

Spi_StatusErrorType Spi_enuEnableInterrupt(void){
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	1f 92       	push	r1
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	89 83       	std	Y+1, r24	; 0x01

	Spi_EnableInterrupt();
    290a:	8d e2       	ldi	r24, 0x2D	; 45
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	2d e2       	ldi	r18, 0x2D	; 45
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	f9 01       	movw	r30, r18
    2914:	20 81       	ld	r18, Z
    2916:	20 68       	ori	r18, 0x80	; 128
    2918:	fc 01       	movw	r30, r24
    291a:	20 83       	st	Z, r18

	return Loc_enuSpiStatus;
    291c:	89 81       	ldd	r24, Y+1	; 0x01
}
    291e:	0f 90       	pop	r0
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	08 95       	ret

00002926 <Spi_enuDisableInterrupt>:

Spi_StatusErrorType Spi_enuDisableInterrupt(void){
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	1f 92       	push	r1
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	89 83       	std	Y+1, r24	; 0x01

	Spi_DisableInterrupt();
    2934:	8d e2       	ldi	r24, 0x2D	; 45
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	2d e2       	ldi	r18, 0x2D	; 45
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	f9 01       	movw	r30, r18
    293e:	20 81       	ld	r18, Z
    2940:	2f 77       	andi	r18, 0x7F	; 127
    2942:	fc 01       	movw	r30, r24
    2944:	20 83       	st	Z, r18

	return Loc_enuSpiStatus;
    2946:	89 81       	ldd	r24, Y+1	; 0x01
}
    2948:	0f 90       	pop	r0
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	08 95       	ret

00002950 <Spi_enuSetCallbackFunction>:

Spi_StatusErrorType Spi_enuSetCallbackFunction(void (*callback)(u8 Copy_u8Result)){
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	00 d0       	rcall	.+0      	; 0x2956 <Spi_enuSetCallbackFunction+0x6>
    2956:	1f 92       	push	r1
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	9b 83       	std	Y+3, r25	; 0x03
    295e:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == callback){
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	9b 81       	ldd	r25, Y+3	; 0x03
    2968:	89 2b       	or	r24, r25
    296a:	19 f4       	brne	.+6      	; 0x2972 <Spi_enuSetCallbackFunction+0x22>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	06 c0       	rjmp	.+12     	; 0x297e <Spi_enuSetCallbackFunction+0x2e>
	}
	else{

		Spi_InterruptHandler = callback;
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	9b 81       	ldd	r25, Y+3	; 0x03
    2976:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <Spi_InterruptHandler+0x1>
    297a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <Spi_InterruptHandler>
	}

	return Loc_enuSpiStatus;
    297e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <Spi_enuChangeClk>:



Spi_StatusErrorType Spi_enuChangeClk(Spi_SelectClkSpeedType Copy_enuClkSpeed){
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	00 d0       	rcall	.+0      	; 0x2992 <Spi_enuChangeClk+0x6>
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	89 83       	std	Y+1, r24	; 0x01

	/* Disable During Configuration */
		Spi_Disable();
    299c:	8d e2       	ldi	r24, 0x2D	; 45
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	2d e2       	ldi	r18, 0x2D	; 45
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	f9 01       	movw	r30, r18
    29a6:	20 81       	ld	r18, Z
    29a8:	2f 7b       	andi	r18, 0xBF	; 191
    29aa:	fc 01       	movw	r30, r24
    29ac:	20 83       	st	Z, r18

		/* Select Clock Speed */
		Spi_SelectClkSpeed(Copy_enuClkSpeed);
    29ae:	8d e2       	ldi	r24, 0x2D	; 45
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	2d e2       	ldi	r18, 0x2D	; 45
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	f9 01       	movw	r30, r18
    29b8:	20 81       	ld	r18, Z
    29ba:	32 2f       	mov	r19, r18
    29bc:	3c 7f       	andi	r19, 0xFC	; 252
    29be:	2a 81       	ldd	r18, Y+2	; 0x02
    29c0:	23 70       	andi	r18, 0x03	; 3
    29c2:	23 2b       	or	r18, r19
    29c4:	fc 01       	movw	r30, r24
    29c6:	20 83       	st	Z, r18
    29c8:	8e e2       	ldi	r24, 0x2E	; 46
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	2e e2       	ldi	r18, 0x2E	; 46
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	f9 01       	movw	r30, r18
    29d2:	20 81       	ld	r18, Z
    29d4:	2e 7f       	andi	r18, 0xFE	; 254
    29d6:	3a 81       	ldd	r19, Y+2	; 0x02
    29d8:	36 95       	lsr	r19
    29da:	36 95       	lsr	r19
    29dc:	23 2b       	or	r18, r19
    29de:	fc 01       	movw	r30, r24
    29e0:	20 83       	st	Z, r18

		/* Enable During Configuration */
		Spi_Enable();
    29e2:	8d e2       	ldi	r24, 0x2D	; 45
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	2d e2       	ldi	r18, 0x2D	; 45
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	f9 01       	movw	r30, r18
    29ec:	20 81       	ld	r18, Z
    29ee:	20 64       	ori	r18, 0x40	; 64
    29f0:	fc 01       	movw	r30, r24
    29f2:	20 83       	st	Z, r18


	return Loc_enuSpiStatus;
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	df 91       	pop	r29
    29fc:	cf 91       	pop	r28
    29fe:	08 95       	ret

00002a00 <Spi_enuIsWriteCollisionHappened>:

Spi_StatusErrorType Spi_enuIsWriteCollisionHappened(Spi_IsWriteCollisionHappenedType* Address_Result){
    2a00:	cf 93       	push	r28
    2a02:	df 93       	push	r29
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <Spi_enuIsWriteCollisionHappened+0x6>
    2a06:	1f 92       	push	r1
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	9b 83       	std	Y+3, r25	; 0x03
    2a0e:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_Result){
    2a14:	8a 81       	ldd	r24, Y+2	; 0x02
    2a16:	9b 81       	ldd	r25, Y+3	; 0x03
    2a18:	89 2b       	or	r24, r25
    2a1a:	19 f4       	brne	.+6      	; 0x2a22 <Spi_enuIsWriteCollisionHappened+0x22>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    2a1c:	82 e0       	ldi	r24, 0x02	; 2
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	14 c0       	rjmp	.+40     	; 0x2a4a <Spi_enuIsWriteCollisionHappened+0x4a>
	}
	else{
		*Address_Result = Spi_isWirteCollisionHappened();
    2a22:	8e e2       	ldi	r24, 0x2E	; 46
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	fc 01       	movw	r30, r24
    2a28:	80 81       	ld	r24, Z
    2a2a:	82 95       	swap	r24
    2a2c:	86 95       	lsr	r24
    2a2e:	86 95       	lsr	r24
    2a30:	83 70       	andi	r24, 0x03	; 3
    2a32:	88 2f       	mov	r24, r24
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	81 70       	andi	r24, 0x01	; 1
    2a38:	99 27       	eor	r25, r25
    2a3a:	21 e0       	ldi	r18, 0x01	; 1
    2a3c:	89 2b       	or	r24, r25
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <Spi_enuIsWriteCollisionHappened+0x42>
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	fc 01       	movw	r30, r24
    2a48:	20 83       	st	Z, r18
	}

	return Loc_enuSpiStatus;
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	08 95       	ret

00002a58 <Spi_enuReceiveBlocking>:


Spi_StatusErrorType Spi_enuReceiveBlocking(pu8 Address_ReceiveDataFromMaster, u8 Copy_u8SendDataToMaster){
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <Spi_enuReceiveBlocking+0x6>
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <Spi_enuReceiveBlocking+0x8>
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	9b 83       	std	Y+3, r25	; 0x03
    2a66:	8a 83       	std	Y+2, r24	; 0x02
    2a68:	6c 83       	std	Y+4, r22	; 0x04
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceiveDataFromMaster){
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	9b 81       	ldd	r25, Y+3	; 0x03
    2a72:	89 2b       	or	r24, r25
    2a74:	19 f4       	brne	.+6      	; 0x2a7c <Spi_enuReceiveBlocking+0x24>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    2a76:	82 e0       	ldi	r24, 0x02	; 2
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	1b c0       	rjmp	.+54     	; 0x2ab2 <Spi_enuReceiveBlocking+0x5a>
	}
	else{

		// data that will send to master
		Spi_SetDataRegister(Copy_u8SendDataToMaster); // might cause logical error here
    2a7c:	8f e2       	ldi	r24, 0x2F	; 47
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	2c 81       	ldd	r18, Y+4	; 0x04
    2a82:	fc 01       	movw	r30, r24
    2a84:	20 83       	st	Z, r18
		while(Spi_IsRecevingDone() == ZERO_VALUE);
    2a86:	00 00       	nop
    2a88:	8e e2       	ldi	r24, 0x2E	; 46
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	80 81       	ld	r24, Z
    2a90:	88 1f       	adc	r24, r24
    2a92:	88 27       	eor	r24, r24
    2a94:	88 1f       	adc	r24, r24
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	81 70       	andi	r24, 0x01	; 1
    2a9c:	99 27       	eor	r25, r25
    2a9e:	89 2b       	or	r24, r25
    2aa0:	99 f3       	breq	.-26     	; 0x2a88 <Spi_enuReceiveBlocking+0x30>
		*Address_ReceiveDataFromMaster = Spi_GetDataRegister();
    2aa2:	8f e2       	ldi	r24, 0x2F	; 47
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	20 81       	ld	r18, Z
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	9b 81       	ldd	r25, Y+3	; 0x03
    2aae:	fc 01       	movw	r30, r24
    2ab0:	20 83       	st	Z, r18

	}

	return Loc_enuSpiStatus;
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	08 95       	ret

00002ac2 <Spi_enuTransmitBlocking>:


Spi_StatusErrorType Spi_enuTransmitBlocking(u8 Copy_u8SlaveSelectPin, u8 Copy_u8SendData, pu8 Address_ReceiveDataFromSlave){
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <Spi_enuTransmitBlocking+0x6>
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <Spi_enuTransmitBlocking+0x8>
    2aca:	1f 92       	push	r1
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	8a 83       	std	Y+2, r24	; 0x02
    2ad2:	6b 83       	std	Y+3, r22	; 0x03
    2ad4:	5d 83       	std	Y+5, r21	; 0x05
    2ad6:	4c 83       	std	Y+4, r20	; 0x04
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceiveDataFromSlave){
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae0:	89 2b       	or	r24, r25
    2ae2:	19 f4       	brne	.+6      	; 0x2aea <Spi_enuTransmitBlocking+0x28>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	23 c0       	rjmp	.+70     	; 0x2b30 <Spi_enuTransmitBlocking+0x6e>
	}
	else{
		Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_LOW);
    2aea:	60 e0       	ldi	r22, 0x00	; 0
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
		Spi_SetDataRegister(Copy_u8SendData);
    2af2:	8f e2       	ldi	r24, 0x2F	; 47
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	2b 81       	ldd	r18, Y+3	; 0x03
    2af8:	fc 01       	movw	r30, r24
    2afa:	20 83       	st	Z, r18
		while(Spi_IsTransmittingDone() == ZERO_VALUE);
    2afc:	00 00       	nop
    2afe:	8e e2       	ldi	r24, 0x2E	; 46
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	fc 01       	movw	r30, r24
    2b04:	80 81       	ld	r24, Z
    2b06:	88 1f       	adc	r24, r24
    2b08:	88 27       	eor	r24, r24
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	81 70       	andi	r24, 0x01	; 1
    2b12:	99 27       	eor	r25, r25
    2b14:	89 2b       	or	r24, r25
    2b16:	99 f3       	breq	.-26     	; 0x2afe <Spi_enuTransmitBlocking+0x3c>
		*Address_ReceiveDataFromSlave = Spi_GetDataRegister();
    2b18:	8f e2       	ldi	r24, 0x2F	; 47
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	20 81       	ld	r18, Z
    2b20:	8c 81       	ldd	r24, Y+4	; 0x04
    2b22:	9d 81       	ldd	r25, Y+5	; 0x05
    2b24:	fc 01       	movw	r30, r24
    2b26:	20 83       	st	Z, r18
		Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_HIGH);
    2b28:	61 e0       	ldi	r22, 0x01	; 1
    2b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2c:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>

	}

	return Loc_enuSpiStatus;
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	08 95       	ret

00002b42 <Spi_enuTransmitNonBlockingMasterMode>:



Spi_StatusErrorType Spi_enuTransmitNonBlockingMasterMode(u8 Copy_u8SlaveSelectPin, u8 Copy_u8SendDataToSlave){
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <Spi_enuTransmitNonBlockingMasterMode+0x6>
    2b48:	1f 92       	push	r1
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	8a 83       	std	Y+2, r24	; 0x02
    2b50:	6b 83       	std	Y+3, r22	; 0x03

	// interrupt happens when transmiting is done, so read in ISR
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	89 83       	std	Y+1, r24	; 0x01

	Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_LOW);
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
	Global_StaticU8SlavePin = Copy_u8SlaveSelectPin;
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <Global_StaticU8SlavePin>
	Spi_SetDataRegister(Copy_u8SendDataToSlave);
    2b64:	8f e2       	ldi	r24, 0x2F	; 47
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	2b 81       	ldd	r18, Y+3	; 0x03
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	20 83       	st	Z, r18


		return Loc_enuSpiStatus;
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b70:	0f 90       	pop	r0
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	08 95       	ret

00002b7c <Spi_enuRecevingNonBlockingSlaveModeForever>:

Spi_StatusErrorType Spi_enuRecevingNonBlockingSlaveModeForever( u8 Copy_u8SendDataToMaster){
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <Spi_enuRecevingNonBlockingSlaveModeForever+0x6>
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	8a 83       	std	Y+2, r24	; 0x02
	// interrupt happens when transmiting is done, so read in ISR


		Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	89 83       	std	Y+1, r24	; 0x01
		Spi_SetDataRegister(Copy_u8SendDataToMaster);
    2b8c:	8f e2       	ldi	r24, 0x2F	; 47
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	2a 81       	ldd	r18, Y+2	; 0x02
    2b92:	fc 01       	movw	r30, r24
    2b94:	20 83       	st	Z, r18

		return Loc_enuSpiStatus;
    2b96:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	08 95       	ret

00002ba2 <__vector_12>:


// ISR function For SPI
void __vector_12(void) __attribute__((signal));

void __vector_12(void){
    2ba2:	1f 92       	push	r1
    2ba4:	0f 92       	push	r0
    2ba6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2baa:	0f 92       	push	r0
    2bac:	11 24       	eor	r1, r1
    2bae:	2f 93       	push	r18
    2bb0:	3f 93       	push	r19
    2bb2:	4f 93       	push	r20
    2bb4:	5f 93       	push	r21
    2bb6:	6f 93       	push	r22
    2bb8:	7f 93       	push	r23
    2bba:	8f 93       	push	r24
    2bbc:	9f 93       	push	r25
    2bbe:	af 93       	push	r26
    2bc0:	bf 93       	push	r27
    2bc2:	ef 93       	push	r30
    2bc4:	ff 93       	push	r31
    2bc6:	cf 93       	push	r28
    2bc8:	df 93       	push	r29
    2bca:	1f 92       	push	r1
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62

u8 Loc_u8Result ;
/* don't forget in master mode, to make ss high after reading from slave */

    if(NULL !=Spi_InterruptHandler ){
    2bd0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <Spi_InterruptHandler>
    2bd4:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <Spi_InterruptHandler+0x1>
    2bd8:	89 2b       	or	r24, r25
    2bda:	c9 f0       	breq	.+50     	; 0x2c0e <__vector_12+0x6c>

    	Loc_u8Result = Spi_GetDataRegister();
    2bdc:	8f e2       	ldi	r24, 0x2F	; 47
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	fc 01       	movw	r30, r24
    2be2:	80 81       	ld	r24, Z
    2be4:	89 83       	std	Y+1, r24	; 0x01
    	Spi_InterruptHandler(Loc_u8Result);
    2be6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <Spi_InterruptHandler>
    2bea:	30 91 ec 00 	lds	r19, 0x00EC	; 0x8000ec <Spi_InterruptHandler+0x1>
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	f9 01       	movw	r30, r18
    2bf2:	09 95       	icall

    	switch (Global_StaticEnuMode){
    2bf4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <Global_StaticEnuMode>
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	09 f0       	breq	.+2      	; 0x2c02 <__vector_12+0x60>
    	case SPI_SELECT_MASTER_MODE:
    		Dio_enuWriteChannel(Global_StaticU8SlavePin, DIO_HIGH);
    		break;

    	default:
    		break;
    2c00:	06 c0       	rjmp	.+12     	; 0x2c0e <__vector_12+0x6c>
    	Spi_InterruptHandler(Loc_u8Result);

    	switch (Global_StaticEnuMode){

    	case SPI_SELECT_MASTER_MODE:
    		Dio_enuWriteChannel(Global_StaticU8SlavePin, DIO_HIGH);
    2c02:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <Global_StaticU8SlavePin>
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    		break;
    2c0c:	00 00       	nop
    	}

    }
    else {/*  error in declaration */   }

}
    2c0e:	00 00       	nop
    2c10:	0f 90       	pop	r0
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	ff 91       	pop	r31
    2c18:	ef 91       	pop	r30
    2c1a:	bf 91       	pop	r27
    2c1c:	af 91       	pop	r26
    2c1e:	9f 91       	pop	r25
    2c20:	8f 91       	pop	r24
    2c22:	7f 91       	pop	r23
    2c24:	6f 91       	pop	r22
    2c26:	5f 91       	pop	r21
    2c28:	4f 91       	pop	r20
    2c2a:	3f 91       	pop	r19
    2c2c:	2f 91       	pop	r18
    2c2e:	0f 90       	pop	r0
    2c30:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2c34:	0f 90       	pop	r0
    2c36:	1f 90       	pop	r1
    2c38:	18 95       	reti

00002c3a <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    2c42:	8a e3       	ldi	r24, 0x3A	; 58
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	2e ef       	ldi	r18, 0xFE	; 254
    2c48:	fc 01       	movw	r30, r24
    2c4a:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    2c4c:	87 e3       	ldi	r24, 0x37	; 55
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	27 ea       	ldi	r18, 0xA7	; 167
    2c52:	fc 01       	movw	r30, r24
    2c54:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    2c56:	84 e3       	ldi	r24, 0x34	; 52
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	2f ef       	ldi	r18, 0xFF	; 255
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    2c60:	81 e3       	ldi	r24, 0x31	; 49
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	2f e3       	ldi	r18, 0x3F	; 63
    2c66:	fc 01       	movw	r30, r24
    2c68:	20 83       	st	Z, r18

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    2c6a:	8b e3       	ldi	r24, 0x3B	; 59
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	fc 01       	movw	r30, r24
    2c70:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    2c72:	88 e3       	ldi	r24, 0x38	; 56
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	28 e1       	ldi	r18, 0x18	; 24
    2c78:	fc 01       	movw	r30, r24
    2c7a:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    2c7c:	85 e3       	ldi	r24, 0x35	; 53
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	fc 01       	movw	r30, r24
    2c82:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    2c84:	82 e3       	ldi	r24, 0x32	; 50
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	20 e8       	ldi	r18, 0x80	; 128
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
    2c8e:	00 00       	nop
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	08 95       	ret

00002c96 <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <Port_enuSetPinDirection+0x6>
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <Port_enuSetPinDirection+0x8>
    2c9e:	1f 92       	push	r1
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	8c 83       	std	Y+4, r24	; 0x04
    2ca6:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    2ca8:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    2caa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cac:	87 70       	andi	r24, 0x07	; 7
    2cae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    2cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb2:	86 95       	lsr	r24
    2cb4:	86 95       	lsr	r24
    2cb6:	86 95       	lsr	r24
    2cb8:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    2cba:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbc:	80 32       	cpi	r24, 0x20	; 32
    2cbe:	18 f0       	brcs	.+6      	; 0x2cc6 <Port_enuSetPinDirection+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	59 c0       	rjmp	.+178    	; 0x2d78 <Port_enuSetPinDirection+0xe2>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	82 30       	cpi	r24, 0x02	; 2
    2cca:	18 f0       	brcs	.+6      	; 0x2cd2 <Port_enuSetPinDirection+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	53 c0       	rjmp	.+166    	; 0x2d78 <Port_enuSetPinDirection+0xe2>
		}

	else{

			switch(Copy_u8PinDirection){
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	41 f1       	breq	.+80     	; 0x2d2c <Port_enuSetPinDirection+0x96>
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <Port_enuSetPinDirection+0x4c>
							break;

			default:

				// impossible
					break;
    2ce0:	4b c0       	rjmp	.+150    	; 0x2d78 <Port_enuSetPinDirection+0xe2>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	88 2f       	mov	r24, r24
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	80 5a       	subi	r24, 0xA0	; 160
    2cee:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	2b 81       	ldd	r18, Y+3	; 0x03
    2cf8:	22 2f       	mov	r18, r18
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	22 0f       	add	r18, r18
    2cfe:	33 1f       	adc	r19, r19
    2d00:	20 5a       	subi	r18, 0xA0	; 160
    2d02:	3f 4f       	sbci	r19, 0xFF	; 255
    2d04:	f9 01       	movw	r30, r18
    2d06:	20 81       	ld	r18, Z
    2d08:	31 81       	ldd	r19, Z+1	; 0x01
    2d0a:	f9 01       	movw	r30, r18
    2d0c:	20 81       	ld	r18, Z
    2d0e:	62 2f       	mov	r22, r18
    2d10:	2a 81       	ldd	r18, Y+2	; 0x02
    2d12:	42 2f       	mov	r20, r18
    2d14:	50 e0       	ldi	r21, 0x00	; 0
    2d16:	21 e0       	ldi	r18, 0x01	; 1
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <Port_enuSetPinDirection+0x8a>
    2d1c:	22 0f       	add	r18, r18
    2d1e:	33 1f       	adc	r19, r19
    2d20:	4a 95       	dec	r20
    2d22:	e2 f7       	brpl	.-8      	; 0x2d1c <Port_enuSetPinDirection+0x86>
    2d24:	26 2b       	or	r18, r22
    2d26:	fc 01       	movw	r30, r24
    2d28:	20 83       	st	Z, r18
					break;
    2d2a:	26 c0       	rjmp	.+76     	; 0x2d78 <Port_enuSetPinDirection+0xe2>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	88 2f       	mov	r24, r24
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	80 5a       	subi	r24, 0xA0	; 160
    2d38:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
    2d40:	2b 81       	ldd	r18, Y+3	; 0x03
    2d42:	22 2f       	mov	r18, r18
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	22 0f       	add	r18, r18
    2d48:	33 1f       	adc	r19, r19
    2d4a:	20 5a       	subi	r18, 0xA0	; 160
    2d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4e:	f9 01       	movw	r30, r18
    2d50:	20 81       	ld	r18, Z
    2d52:	31 81       	ldd	r19, Z+1	; 0x01
    2d54:	f9 01       	movw	r30, r18
    2d56:	20 81       	ld	r18, Z
    2d58:	62 2f       	mov	r22, r18
    2d5a:	2a 81       	ldd	r18, Y+2	; 0x02
    2d5c:	42 2f       	mov	r20, r18
    2d5e:	50 e0       	ldi	r21, 0x00	; 0
    2d60:	21 e0       	ldi	r18, 0x01	; 1
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <Port_enuSetPinDirection+0xd4>
    2d66:	22 0f       	add	r18, r18
    2d68:	33 1f       	adc	r19, r19
    2d6a:	4a 95       	dec	r20
    2d6c:	e2 f7       	brpl	.-8      	; 0x2d66 <Port_enuSetPinDirection+0xd0>
    2d6e:	20 95       	com	r18
    2d70:	26 23       	and	r18, r22
    2d72:	fc 01       	movw	r30, r24
    2d74:	20 83       	st	Z, r18
							break;
    2d76:	00 00       	nop

	}



	return Loc_enuState;
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	08 95       	ret

00002d8a <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
    2d8a:	cf 93       	push	r28
    2d8c:	df 93       	push	r29
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <Port_enuSetPinMode+0x6>
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <Port_enuSetPinMode+0x8>
    2d92:	1f 92       	push	r1
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	8c 83       	std	Y+4, r24	; 0x04
    2d9a:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    2d9c:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    2d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2da0:	87 70       	andi	r24, 0x07	; 7
    2da2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    2da4:	8c 81       	ldd	r24, Y+4	; 0x04
    2da6:	86 95       	lsr	r24
    2da8:	86 95       	lsr	r24
    2daa:	86 95       	lsr	r24
    2dac:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    2dae:	8c 81       	ldd	r24, Y+4	; 0x04
    2db0:	80 32       	cpi	r24, 0x20	; 32
    2db2:	18 f0       	brcs	.+6      	; 0x2dba <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    2db4:	82 e0       	ldi	r24, 0x02	; 2
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	43 c1       	rjmp	.+646    	; 0x3040 <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	84 30       	cpi	r24, 0x04	; 4
    2dbe:	18 f0       	brcs	.+6      	; 0x2dc6 <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	3d c1       	rjmp	.+634    	; 0x3040 <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	81 30       	cpi	r24, 0x01	; 1
    2dce:	91 05       	cpc	r25, r1
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <Port_enuSetPinMode+0x4a>
    2dd2:	57 c0       	rjmp	.+174    	; 0x2e82 <Port_enuSetPinMode+0xf8>
    2dd4:	82 30       	cpi	r24, 0x02	; 2
    2dd6:	91 05       	cpc	r25, r1
    2dd8:	1c f4       	brge	.+6      	; 0x2de0 <Port_enuSetPinMode+0x56>
    2dda:	89 2b       	or	r24, r25
    2ddc:	49 f0       	breq	.+18     	; 0x2df0 <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
    2dde:	30 c1       	rjmp	.+608    	; 0x3040 <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
    2de0:	82 30       	cpi	r24, 0x02	; 2
    2de2:	91 05       	cpc	r25, r1
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <Port_enuSetPinMode+0x5e>
    2de6:	97 c0       	rjmp	.+302    	; 0x2f16 <Port_enuSetPinMode+0x18c>
    2de8:	03 97       	sbiw	r24, 0x03	; 3
    2dea:	09 f4       	brne	.+2      	; 0x2dee <Port_enuSetPinMode+0x64>
    2dec:	df c0       	rjmp	.+446    	; 0x2fac <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
    2dee:	28 c1       	rjmp	.+592    	; 0x3040 <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	88 2f       	mov	r24, r24
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	80 5a       	subi	r24, 0xA0	; 160
    2dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfe:	fc 01       	movw	r30, r24
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	2b 81       	ldd	r18, Y+3	; 0x03
    2e06:	22 2f       	mov	r18, r18
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	22 0f       	add	r18, r18
    2e0c:	33 1f       	adc	r19, r19
    2e0e:	20 5a       	subi	r18, 0xA0	; 160
    2e10:	3f 4f       	sbci	r19, 0xFF	; 255
    2e12:	f9 01       	movw	r30, r18
    2e14:	20 81       	ld	r18, Z
    2e16:	31 81       	ldd	r19, Z+1	; 0x01
    2e18:	f9 01       	movw	r30, r18
    2e1a:	20 81       	ld	r18, Z
    2e1c:	62 2f       	mov	r22, r18
    2e1e:	2a 81       	ldd	r18, Y+2	; 0x02
    2e20:	42 2f       	mov	r20, r18
    2e22:	50 e0       	ldi	r21, 0x00	; 0
    2e24:	21 e0       	ldi	r18, 0x01	; 1
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <Port_enuSetPinMode+0xa4>
    2e2a:	22 0f       	add	r18, r18
    2e2c:	33 1f       	adc	r19, r19
    2e2e:	4a 95       	dec	r20
    2e30:	e2 f7       	brpl	.-8      	; 0x2e2a <Port_enuSetPinMode+0xa0>
    2e32:	26 2b       	or	r18, r22
    2e34:	fc 01       	movw	r30, r24
    2e36:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	88 2f       	mov	r24, r24
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	88 59       	subi	r24, 0x98	; 152
    2e44:	9f 4f       	sbci	r25, 0xFF	; 255
    2e46:	fc 01       	movw	r30, r24
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e4e:	22 2f       	mov	r18, r18
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	22 0f       	add	r18, r18
    2e54:	33 1f       	adc	r19, r19
    2e56:	28 59       	subi	r18, 0x98	; 152
    2e58:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5a:	f9 01       	movw	r30, r18
    2e5c:	20 81       	ld	r18, Z
    2e5e:	31 81       	ldd	r19, Z+1	; 0x01
    2e60:	f9 01       	movw	r30, r18
    2e62:	20 81       	ld	r18, Z
    2e64:	62 2f       	mov	r22, r18
    2e66:	2a 81       	ldd	r18, Y+2	; 0x02
    2e68:	42 2f       	mov	r20, r18
    2e6a:	50 e0       	ldi	r21, 0x00	; 0
    2e6c:	21 e0       	ldi	r18, 0x01	; 1
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <Port_enuSetPinMode+0xec>
    2e72:	22 0f       	add	r18, r18
    2e74:	33 1f       	adc	r19, r19
    2e76:	4a 95       	dec	r20
    2e78:	e2 f7       	brpl	.-8      	; 0x2e72 <Port_enuSetPinMode+0xe8>
    2e7a:	26 2b       	or	r18, r22
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	20 83       	st	Z, r18
					break;
    2e80:	df c0       	rjmp	.+446    	; 0x3040 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	88 2f       	mov	r24, r24
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	80 5a       	subi	r24, 0xA0	; 160
    2e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e90:	fc 01       	movw	r30, r24
    2e92:	80 81       	ld	r24, Z
    2e94:	91 81       	ldd	r25, Z+1	; 0x01
    2e96:	2b 81       	ldd	r18, Y+3	; 0x03
    2e98:	22 2f       	mov	r18, r18
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	22 0f       	add	r18, r18
    2e9e:	33 1f       	adc	r19, r19
    2ea0:	20 5a       	subi	r18, 0xA0	; 160
    2ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea4:	f9 01       	movw	r30, r18
    2ea6:	20 81       	ld	r18, Z
    2ea8:	31 81       	ldd	r19, Z+1	; 0x01
    2eaa:	f9 01       	movw	r30, r18
    2eac:	20 81       	ld	r18, Z
    2eae:	62 2f       	mov	r22, r18
    2eb0:	2a 81       	ldd	r18, Y+2	; 0x02
    2eb2:	42 2f       	mov	r20, r18
    2eb4:	50 e0       	ldi	r21, 0x00	; 0
    2eb6:	21 e0       	ldi	r18, 0x01	; 1
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <Port_enuSetPinMode+0x136>
    2ebc:	22 0f       	add	r18, r18
    2ebe:	33 1f       	adc	r19, r19
    2ec0:	4a 95       	dec	r20
    2ec2:	e2 f7       	brpl	.-8      	; 0x2ebc <Port_enuSetPinMode+0x132>
    2ec4:	26 2b       	or	r18, r22
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	88 2f       	mov	r24, r24
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	88 59       	subi	r24, 0x98	; 152
    2ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed8:	fc 01       	movw	r30, r24
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	2b 81       	ldd	r18, Y+3	; 0x03
    2ee0:	22 2f       	mov	r18, r18
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	22 0f       	add	r18, r18
    2ee6:	33 1f       	adc	r19, r19
    2ee8:	28 59       	subi	r18, 0x98	; 152
    2eea:	3f 4f       	sbci	r19, 0xFF	; 255
    2eec:	f9 01       	movw	r30, r18
    2eee:	20 81       	ld	r18, Z
    2ef0:	31 81       	ldd	r19, Z+1	; 0x01
    2ef2:	f9 01       	movw	r30, r18
    2ef4:	20 81       	ld	r18, Z
    2ef6:	62 2f       	mov	r22, r18
    2ef8:	2a 81       	ldd	r18, Y+2	; 0x02
    2efa:	42 2f       	mov	r20, r18
    2efc:	50 e0       	ldi	r21, 0x00	; 0
    2efe:	21 e0       	ldi	r18, 0x01	; 1
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	02 c0       	rjmp	.+4      	; 0x2f08 <Port_enuSetPinMode+0x17e>
    2f04:	22 0f       	add	r18, r18
    2f06:	33 1f       	adc	r19, r19
    2f08:	4a 95       	dec	r20
    2f0a:	e2 f7       	brpl	.-8      	; 0x2f04 <Port_enuSetPinMode+0x17a>
    2f0c:	20 95       	com	r18
    2f0e:	26 23       	and	r18, r22
    2f10:	fc 01       	movw	r30, r24
    2f12:	20 83       	st	Z, r18
							break;
    2f14:	95 c0       	rjmp	.+298    	; 0x3040 <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	88 2f       	mov	r24, r24
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	80 5a       	subi	r24, 0xA0	; 160
    2f22:	9f 4f       	sbci	r25, 0xFF	; 255
    2f24:	fc 01       	movw	r30, r24
    2f26:	80 81       	ld	r24, Z
    2f28:	91 81       	ldd	r25, Z+1	; 0x01
    2f2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f2c:	22 2f       	mov	r18, r18
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	22 0f       	add	r18, r18
    2f32:	33 1f       	adc	r19, r19
    2f34:	20 5a       	subi	r18, 0xA0	; 160
    2f36:	3f 4f       	sbci	r19, 0xFF	; 255
    2f38:	f9 01       	movw	r30, r18
    2f3a:	20 81       	ld	r18, Z
    2f3c:	31 81       	ldd	r19, Z+1	; 0x01
    2f3e:	f9 01       	movw	r30, r18
    2f40:	20 81       	ld	r18, Z
    2f42:	62 2f       	mov	r22, r18
    2f44:	2a 81       	ldd	r18, Y+2	; 0x02
    2f46:	42 2f       	mov	r20, r18
    2f48:	50 e0       	ldi	r21, 0x00	; 0
    2f4a:	21 e0       	ldi	r18, 0x01	; 1
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	02 c0       	rjmp	.+4      	; 0x2f54 <Port_enuSetPinMode+0x1ca>
    2f50:	22 0f       	add	r18, r18
    2f52:	33 1f       	adc	r19, r19
    2f54:	4a 95       	dec	r20
    2f56:	e2 f7       	brpl	.-8      	; 0x2f50 <Port_enuSetPinMode+0x1c6>
    2f58:	20 95       	com	r18
    2f5a:	26 23       	and	r18, r22
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    2f60:	8b 81       	ldd	r24, Y+3	; 0x03
    2f62:	88 2f       	mov	r24, r24
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	88 59       	subi	r24, 0x98	; 152
    2f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6e:	fc 01       	movw	r30, r24
    2f70:	80 81       	ld	r24, Z
    2f72:	91 81       	ldd	r25, Z+1	; 0x01
    2f74:	2b 81       	ldd	r18, Y+3	; 0x03
    2f76:	22 2f       	mov	r18, r18
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	22 0f       	add	r18, r18
    2f7c:	33 1f       	adc	r19, r19
    2f7e:	28 59       	subi	r18, 0x98	; 152
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	f9 01       	movw	r30, r18
    2f84:	20 81       	ld	r18, Z
    2f86:	31 81       	ldd	r19, Z+1	; 0x01
    2f88:	f9 01       	movw	r30, r18
    2f8a:	20 81       	ld	r18, Z
    2f8c:	62 2f       	mov	r22, r18
    2f8e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f90:	42 2f       	mov	r20, r18
    2f92:	50 e0       	ldi	r21, 0x00	; 0
    2f94:	21 e0       	ldi	r18, 0x01	; 1
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <Port_enuSetPinMode+0x214>
    2f9a:	22 0f       	add	r18, r18
    2f9c:	33 1f       	adc	r19, r19
    2f9e:	4a 95       	dec	r20
    2fa0:	e2 f7       	brpl	.-8      	; 0x2f9a <Port_enuSetPinMode+0x210>
    2fa2:	20 95       	com	r18
    2fa4:	26 23       	and	r18, r22
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	20 83       	st	Z, r18
								break;
    2faa:	4a c0       	rjmp	.+148    	; 0x3040 <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	88 2f       	mov	r24, r24
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	88 0f       	add	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	80 5a       	subi	r24, 0xA0	; 160
    2fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fba:	fc 01       	movw	r30, r24
    2fbc:	80 81       	ld	r24, Z
    2fbe:	91 81       	ldd	r25, Z+1	; 0x01
    2fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2fc2:	22 2f       	mov	r18, r18
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	22 0f       	add	r18, r18
    2fc8:	33 1f       	adc	r19, r19
    2fca:	20 5a       	subi	r18, 0xA0	; 160
    2fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fce:	f9 01       	movw	r30, r18
    2fd0:	20 81       	ld	r18, Z
    2fd2:	31 81       	ldd	r19, Z+1	; 0x01
    2fd4:	f9 01       	movw	r30, r18
    2fd6:	20 81       	ld	r18, Z
    2fd8:	62 2f       	mov	r22, r18
    2fda:	2a 81       	ldd	r18, Y+2	; 0x02
    2fdc:	42 2f       	mov	r20, r18
    2fde:	50 e0       	ldi	r21, 0x00	; 0
    2fe0:	21 e0       	ldi	r18, 0x01	; 1
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <Port_enuSetPinMode+0x260>
    2fe6:	22 0f       	add	r18, r18
    2fe8:	33 1f       	adc	r19, r19
    2fea:	4a 95       	dec	r20
    2fec:	e2 f7       	brpl	.-8      	; 0x2fe6 <Port_enuSetPinMode+0x25c>
    2fee:	20 95       	com	r18
    2ff0:	26 23       	and	r18, r22
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    2ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff8:	88 2f       	mov	r24, r24
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	88 59       	subi	r24, 0x98	; 152
    3002:	9f 4f       	sbci	r25, 0xFF	; 255
    3004:	fc 01       	movw	r30, r24
    3006:	80 81       	ld	r24, Z
    3008:	91 81       	ldd	r25, Z+1	; 0x01
    300a:	2b 81       	ldd	r18, Y+3	; 0x03
    300c:	22 2f       	mov	r18, r18
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	22 0f       	add	r18, r18
    3012:	33 1f       	adc	r19, r19
    3014:	28 59       	subi	r18, 0x98	; 152
    3016:	3f 4f       	sbci	r19, 0xFF	; 255
    3018:	f9 01       	movw	r30, r18
    301a:	20 81       	ld	r18, Z
    301c:	31 81       	ldd	r19, Z+1	; 0x01
    301e:	f9 01       	movw	r30, r18
    3020:	20 81       	ld	r18, Z
    3022:	62 2f       	mov	r22, r18
    3024:	2a 81       	ldd	r18, Y+2	; 0x02
    3026:	42 2f       	mov	r20, r18
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	21 e0       	ldi	r18, 0x01	; 1
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <Port_enuSetPinMode+0x2aa>
    3030:	22 0f       	add	r18, r18
    3032:	33 1f       	adc	r19, r19
    3034:	4a 95       	dec	r20
    3036:	e2 f7       	brpl	.-8      	; 0x3030 <Port_enuSetPinMode+0x2a6>
    3038:	26 2b       	or	r18, r22
    303a:	fc 01       	movw	r30, r24
    303c:	20 83       	st	Z, r18
								break;
    303e:	00 00       	nop



	}

	return Loc_enuState;
    3040:	89 81       	ldd	r24, Y+1	; 0x01
}
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	df 91       	pop	r29
    304e:	cf 91       	pop	r28
    3050:	08 95       	ret

00003052 <I2c_enuInit>:



/********************************** Software Interfaces Declarations *******************/

I2c_StatusErrorType I2c_enuInit(const I2c_ConfigType* Address_I2c){
    3052:	cf 92       	push	r12
    3054:	df 92       	push	r13
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	00 d0       	rcall	.+0      	; 0x3064 <I2c_enuInit+0x12>
    3064:	1f 92       	push	r1
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	9b 83       	std	Y+3, r25	; 0x03
    306c:	8a 83       	std	Y+2, r24	; 0x02
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_I2c){
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	89 2b       	or	r24, r25
    3078:	19 f4       	brne	.+6      	; 0x3080 <I2c_enuInit+0x2e>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    307a:	84 e0       	ldi	r24, 0x04	; 4
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	8f c0       	rjmp	.+286    	; 0x319e <I2c_enuInit+0x14c>
	}
	else{

		/* I2c Disable during Config */
		I2c_Disable();
    3080:	86 e5       	ldi	r24, 0x56	; 86
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	26 e5       	ldi	r18, 0x56	; 86
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	f9 01       	movw	r30, r18
    308a:	20 81       	ld	r18, Z
    308c:	2b 7f       	andi	r18, 0xFB	; 251
    308e:	fc 01       	movw	r30, r24
    3090:	20 83       	st	Z, r18

		/* I2c Set Prescaler */
		I2c_SelectPrescaler(Address_I2c->select_prescale_value_twps);
    3092:	81 e2       	ldi	r24, 0x21	; 33
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	2a 81       	ldd	r18, Y+2	; 0x02
    3098:	3b 81       	ldd	r19, Y+3	; 0x03
    309a:	f9 01       	movw	r30, r18
    309c:	24 81       	ldd	r18, Z+4	; 0x04
    309e:	fc 01       	movw	r30, r24
    30a0:	20 83       	st	Z, r18

		/* I2c Set Clock COnfig */
		I2c_ConfigClock(Address_I2c->clock_freq,Address_I2c->select_prescale_value_twps);
    30a2:	68 94       	set
    30a4:	cc 24       	eor	r12, r12
    30a6:	c5 f8       	bld	r12, 5
    30a8:	d1 2c       	mov	r13, r1
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	9b 81       	ldd	r25, Y+3	; 0x03
    30ae:	fc 01       	movw	r30, r24
    30b0:	20 81       	ld	r18, Z
    30b2:	31 81       	ldd	r19, Z+1	; 0x01
    30b4:	42 81       	ldd	r20, Z+2	; 0x02
    30b6:	53 81       	ldd	r21, Z+3	; 0x03
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	dc 01       	movw	r26, r24
    30be:	82 1b       	sub	r24, r18
    30c0:	93 0b       	sbc	r25, r19
    30c2:	a4 0b       	sbc	r26, r20
    30c4:	b5 0b       	sbc	r27, r21
    30c6:	88 0f       	add	r24, r24
    30c8:	99 1f       	adc	r25, r25
    30ca:	aa 1f       	adc	r26, r26
    30cc:	bb 1f       	adc	r27, r27
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	aa 1f       	adc	r26, r26
    30d4:	bb 1f       	adc	r27, r27
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	aa 1f       	adc	r26, r26
    30dc:	bb 1f       	adc	r27, r27
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	aa 1f       	adc	r26, r26
    30e4:	bb 1f       	adc	r27, r27
    30e6:	7c 01       	movw	r14, r24
    30e8:	8d 01       	movw	r16, r26
    30ea:	fc ed       	ldi	r31, 0xDC	; 220
    30ec:	ff 1a       	sub	r15, r31
    30ee:	0b 40       	sbci	r16, 0x0B	; 11
    30f0:	1f 4f       	sbci	r17, 0xFF	; 255
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	9b 81       	ldd	r25, Y+3	; 0x03
    30f6:	fc 01       	movw	r30, r24
    30f8:	20 81       	ld	r18, Z
    30fa:	31 81       	ldd	r19, Z+1	; 0x01
    30fc:	42 81       	ldd	r20, Z+2	; 0x02
    30fe:	53 81       	ldd	r21, Z+3	; 0x03
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
    3102:	9b 81       	ldd	r25, Y+3	; 0x03
    3104:	fc 01       	movw	r30, r24
    3106:	84 81       	ldd	r24, Z+4	; 0x04
    3108:	88 2f       	mov	r24, r24
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	bc 01       	movw	r22, r24
    3112:	6f 5f       	subi	r22, 0xFF	; 255
    3114:	7f 4f       	sbci	r23, 0xFF	; 255
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <I2c_enuInit+0xce>
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	6a 95       	dec	r22
    3122:	e2 f7       	brpl	.-8      	; 0x311c <I2c_enuInit+0xca>
    3124:	09 2e       	mov	r0, r25
    3126:	00 0c       	add	r0, r0
    3128:	aa 0b       	sbc	r26, r26
    312a:	bb 0b       	sbc	r27, r27
    312c:	bc 01       	movw	r22, r24
    312e:	cd 01       	movw	r24, r26
    3130:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <__mulsi3>
    3134:	9b 01       	movw	r18, r22
    3136:	ac 01       	movw	r20, r24
    3138:	c8 01       	movw	r24, r16
    313a:	b7 01       	movw	r22, r14
    313c:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <__udivmodsi4>
    3140:	da 01       	movw	r26, r20
    3142:	c9 01       	movw	r24, r18
    3144:	f6 01       	movw	r30, r12
    3146:	80 83       	st	Z, r24

		if(Address_I2c->slave_address_or_minus_one_for_master_mode != I2C_MASTER_INDEX){
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	9b 81       	ldd	r25, Y+3	; 0x03
    314c:	fc 01       	movw	r30, r24
    314e:	85 81       	ldd	r24, Z+5	; 0x05
    3150:	96 81       	ldd	r25, Z+6	; 0x06
    3152:	01 96       	adiw	r24, 0x01	; 1
    3154:	91 f0       	breq	.+36     	; 0x317a <I2c_enuInit+0x128>
			I2c_SetAddress7Bit((Address_I2c->slave_address_or_minus_one_for_master_mode));
    3156:	82 e2       	ldi	r24, 0x22	; 34
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	22 e2       	ldi	r18, 0x22	; 34
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	f9 01       	movw	r30, r18
    3160:	20 81       	ld	r18, Z
    3162:	42 2f       	mov	r20, r18
    3164:	41 70       	andi	r20, 0x01	; 1
    3166:	2a 81       	ldd	r18, Y+2	; 0x02
    3168:	3b 81       	ldd	r19, Y+3	; 0x03
    316a:	f9 01       	movw	r30, r18
    316c:	25 81       	ldd	r18, Z+5	; 0x05
    316e:	36 81       	ldd	r19, Z+6	; 0x06
    3170:	22 0f       	add	r18, r18
    3172:	33 1f       	adc	r19, r19
    3174:	24 2b       	or	r18, r20
    3176:	fc 01       	movw	r30, r24
    3178:	20 83       	st	Z, r18
		}
		else { /* Do nothing */}

		/* I2c Enable */
		I2c_Enable();
    317a:	86 e5       	ldi	r24, 0x56	; 86
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	26 e5       	ldi	r18, 0x56	; 86
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	f9 01       	movw	r30, r18
    3184:	20 81       	ld	r18, Z
    3186:	24 60       	ori	r18, 0x04	; 4
    3188:	fc 01       	movw	r30, r24
    318a:	20 83       	st	Z, r18

		I2c_ClearFlag();
    318c:	86 e5       	ldi	r24, 0x56	; 86
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	26 e5       	ldi	r18, 0x56	; 86
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	f9 01       	movw	r30, r18
    3196:	20 81       	ld	r18, Z
    3198:	20 68       	ori	r18, 0x80	; 128
    319a:	fc 01       	movw	r30, r24
    319c:	20 83       	st	Z, r18
	}

	return Loc_enuI2cStatus;
    319e:	89 81       	ldd	r24, Y+1	; 0x01
}
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	df 91       	pop	r29
    31a8:	cf 91       	pop	r28
    31aa:	1f 91       	pop	r17
    31ac:	0f 91       	pop	r16
    31ae:	ff 90       	pop	r15
    31b0:	ef 90       	pop	r14
    31b2:	df 90       	pop	r13
    31b4:	cf 90       	pop	r12
    31b6:	08 95       	ret

000031b8 <I2c_DeInit>:

I2c_StatusErrorType I2c_DeInit(const I2c_ConfigType* Address_I2c){
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	00 d0       	rcall	.+0      	; 0x31be <I2c_DeInit+0x6>
    31be:	1f 92       	push	r1
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	9b 83       	std	Y+3, r25	; 0x03
    31c6:	8a 83       	std	Y+2, r24	; 0x02
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_I2c){
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	9b 81       	ldd	r25, Y+3	; 0x03
    31d0:	89 2b       	or	r24, r25
    31d2:	19 f4       	brne	.+6      	; 0x31da <I2c_DeInit+0x22>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    31d4:	84 e0       	ldi	r24, 0x04	; 4
    31d6:	89 83       	std	Y+1, r24	; 0x01
    31d8:	09 c0       	rjmp	.+18     	; 0x31ec <I2c_DeInit+0x34>
	}
	else{
		I2c_Disable();
    31da:	86 e5       	ldi	r24, 0x56	; 86
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	26 e5       	ldi	r18, 0x56	; 86
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	f9 01       	movw	r30, r18
    31e4:	20 81       	ld	r18, Z
    31e6:	2b 7f       	andi	r18, 0xFB	; 251
    31e8:	fc 01       	movw	r30, r24
    31ea:	20 83       	st	Z, r18
	}

	return Loc_enuI2cStatus;
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	08 95       	ret

000031fa <I2c_enuEnableInterrupt>:


I2c_StatusErrorType I2c_enuEnableInterrupt(void){
    31fa:	cf 93       	push	r28
    31fc:	df 93       	push	r29
    31fe:	1f 92       	push	r1
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	89 83       	std	Y+1, r24	; 0x01

	I2c_EnableInterrupt();
    3208:	86 e5       	ldi	r24, 0x56	; 86
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	26 e5       	ldi	r18, 0x56	; 86
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	f9 01       	movw	r30, r18
    3212:	20 81       	ld	r18, Z
    3214:	21 60       	ori	r18, 0x01	; 1
    3216:	fc 01       	movw	r30, r24
    3218:	20 83       	st	Z, r18

	return Loc_enuI2cStatus;
    321a:	89 81       	ldd	r24, Y+1	; 0x01
}
    321c:	0f 90       	pop	r0
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	08 95       	ret

00003224 <I2c_enuDisableInterrupt>:

I2c_StatusErrorType I2c_enuDisableInterrupt(void){
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	1f 92       	push	r1
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	89 83       	std	Y+1, r24	; 0x01

	I2c_DisableInterrupt();
    3232:	86 e5       	ldi	r24, 0x56	; 86
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	26 e5       	ldi	r18, 0x56	; 86
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	f9 01       	movw	r30, r18
    323c:	20 81       	ld	r18, Z
    323e:	2e 7f       	andi	r18, 0xFE	; 254
    3240:	fc 01       	movw	r30, r24
    3242:	20 83       	st	Z, r18

	return Loc_enuI2cStatus;
    3244:	89 81       	ldd	r24, Y+1	; 0x01
}
    3246:	0f 90       	pop	r0
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	08 95       	ret

0000324e <I2c_enuSetCallbackFunction>:

I2c_StatusErrorType I2c_enuSetCallbackFunction(void (*callback)(u8 Copy_u8Status)){
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	00 d0       	rcall	.+0      	; 0x3254 <I2c_enuSetCallbackFunction+0x6>
    3254:	1f 92       	push	r1
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	9b 83       	std	Y+3, r25	; 0x03
    325c:	8a 83       	std	Y+2, r24	; 0x02
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == callback){
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	9b 81       	ldd	r25, Y+3	; 0x03
    3266:	89 2b       	or	r24, r25
    3268:	19 f4       	brne	.+6      	; 0x3270 <I2c_enuSetCallbackFunction+0x22>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    326a:	84 e0       	ldi	r24, 0x04	; 4
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	06 c0       	rjmp	.+12     	; 0x327c <I2c_enuSetCallbackFunction+0x2e>
	}
	else{
		I2c_InterruptHandler = callback;
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	9b 81       	ldd	r25, Y+3	; 0x03
    3274:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <I2c_InterruptHandler+0x1>
    3278:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <I2c_InterruptHandler>
	}

	return Loc_enuI2cStatus;
    327c:	89 81       	ldd	r24, Y+1	; 0x01
}
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	08 95       	ret

0000328a <I2c_enuIsWriteCollisionHappened>:


I2c_StatusErrorType I2c_enuIsWriteCollisionHappened(I2c_IsWriteCollisionHappenedType* Address_Result){
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	00 d0       	rcall	.+0      	; 0x3290 <I2c_enuIsWriteCollisionHappened+0x6>
    3290:	1f 92       	push	r1
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	9b 83       	std	Y+3, r25	; 0x03
    3298:	8a 83       	std	Y+2, r24	; 0x02
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_Result){
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	9b 81       	ldd	r25, Y+3	; 0x03
    32a2:	89 2b       	or	r24, r25
    32a4:	19 f4       	brne	.+6      	; 0x32ac <I2c_enuIsWriteCollisionHappened+0x22>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    32a6:	84 e0       	ldi	r24, 0x04	; 4
    32a8:	89 83       	std	Y+1, r24	; 0x01
    32aa:	13 c0       	rjmp	.+38     	; 0x32d2 <I2c_enuIsWriteCollisionHappened+0x48>
	}
	else{
		*Address_Result = I2c_isWirteCollisionHappened();
    32ac:	86 e5       	ldi	r24, 0x56	; 86
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	fc 01       	movw	r30, r24
    32b2:	80 81       	ld	r24, Z
    32b4:	86 95       	lsr	r24
    32b6:	86 95       	lsr	r24
    32b8:	86 95       	lsr	r24
    32ba:	88 2f       	mov	r24, r24
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	81 70       	andi	r24, 0x01	; 1
    32c0:	99 27       	eor	r25, r25
    32c2:	21 e0       	ldi	r18, 0x01	; 1
    32c4:	89 2b       	or	r24, r25
    32c6:	09 f4       	brne	.+2      	; 0x32ca <I2c_enuIsWriteCollisionHappened+0x40>
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	9b 81       	ldd	r25, Y+3	; 0x03
    32ce:	fc 01       	movw	r30, r24
    32d0:	20 83       	st	Z, r18
	}

	return Loc_enuI2cStatus;
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	0f 90       	pop	r0
    32da:	df 91       	pop	r29
    32dc:	cf 91       	pop	r28
    32de:	08 95       	ret

000032e0 <I2c_enuMasterTransmitStartConditionBlocking>:



I2c_StatusErrorType I2c_enuMasterTransmitStartConditionBlocking(void){
    32e0:	cf 93       	push	r28
    32e2:	df 93       	push	r29
    32e4:	1f 92       	push	r1
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	89 83       	std	Y+1, r24	; 0x01

	I2c_StartCondition();
    32ee:	86 e5       	ldi	r24, 0x56	; 86
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	24 ea       	ldi	r18, 0xA4	; 164
    32f4:	fc 01       	movw	r30, r24
    32f6:	20 83       	st	Z, r18
	while(I2c_IsTheJobDone() == ZERO_VALUE);
    32f8:	00 00       	nop
    32fa:	86 e5       	ldi	r24, 0x56	; 86
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	fc 01       	movw	r30, r24
    3300:	80 81       	ld	r24, Z
    3302:	88 1f       	adc	r24, r24
    3304:	88 27       	eor	r24, r24
    3306:	88 1f       	adc	r24, r24
    3308:	88 2f       	mov	r24, r24
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	81 70       	andi	r24, 0x01	; 1
    330e:	99 27       	eor	r25, r25
    3310:	89 2b       	or	r24, r25
    3312:	99 f3       	breq	.-26     	; 0x32fa <I2c_enuMasterTransmitStartConditionBlocking+0x1a>


	return Loc_enuI2cStatus;
    3314:	89 81       	ldd	r24, Y+1	; 0x01
}
    3316:	0f 90       	pop	r0
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	08 95       	ret

0000331e <I2c_enuMasterTransmitStopConditionBlocking>:


I2c_StatusErrorType I2c_enuMasterTransmitStopConditionBlocking(void){
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	1f 92       	push	r1
    3324:	cd b7       	in	r28, 0x3d	; 61
    3326:	de b7       	in	r29, 0x3e	; 62
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	89 83       	std	Y+1, r24	; 0x01

	I2c_DoJob();
    332c:	86 e5       	ldi	r24, 0x56	; 86
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	24 e8       	ldi	r18, 0x84	; 132
    3332:	fc 01       	movw	r30, r24
    3334:	20 83       	st	Z, r18
	I2c_StopCondition();
    3336:	86 e5       	ldi	r24, 0x56	; 86
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	24 e9       	ldi	r18, 0x94	; 148
    333c:	fc 01       	movw	r30, r24
    333e:	20 83       	st	Z, r18


	return Loc_enuI2cStatus;
    3340:	89 81       	ldd	r24, Y+1	; 0x01
}
    3342:	0f 90       	pop	r0
    3344:	df 91       	pop	r29
    3346:	cf 91       	pop	r28
    3348:	08 95       	ret

0000334a <I2c_enuMasterTransmitRepeatedStartConditionBlocking>:
I2c_StatusErrorType I2c_enuMasterTransmitRepeatedStartConditionBlocking(void){
    334a:	cf 93       	push	r28
    334c:	df 93       	push	r29
    334e:	1f 92       	push	r1
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	89 83       	std	Y+1, r24	; 0x01

	I2c_StartCondition();
    3358:	86 e5       	ldi	r24, 0x56	; 86
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	24 ea       	ldi	r18, 0xA4	; 164
    335e:	fc 01       	movw	r30, r24
    3360:	20 83       	st	Z, r18
	while(I2c_IsTheJobDone() == ZERO_VALUE);
    3362:	00 00       	nop
    3364:	86 e5       	ldi	r24, 0x56	; 86
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	fc 01       	movw	r30, r24
    336a:	80 81       	ld	r24, Z
    336c:	88 1f       	adc	r24, r24
    336e:	88 27       	eor	r24, r24
    3370:	88 1f       	adc	r24, r24
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	81 70       	andi	r24, 0x01	; 1
    3378:	99 27       	eor	r25, r25
    337a:	89 2b       	or	r24, r25
    337c:	99 f3       	breq	.-26     	; 0x3364 <I2c_enuMasterTransmitRepeatedStartConditionBlocking+0x1a>


	return Loc_enuI2cStatus;
    337e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3380:	0f 90       	pop	r0
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	08 95       	ret

00003388 <I2c_enuMasterTransmitDataWritingBlocking>:

/* send data */
I2c_StatusErrorType I2c_enuMasterTransmitDataWritingBlocking(u8 Copy_u8Data, u8* Address_ReceivedAck){
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	00 d0       	rcall	.+0      	; 0x338e <I2c_enuMasterTransmitDataWritingBlocking+0x6>
    338e:	00 d0       	rcall	.+0      	; 0x3390 <I2c_enuMasterTransmitDataWritingBlocking+0x8>
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	8a 83       	std	Y+2, r24	; 0x02
    3396:	7c 83       	std	Y+4, r23	; 0x04
    3398:	6b 83       	std	Y+3, r22	; 0x03
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceivedAck){
    339e:	8b 81       	ldd	r24, Y+3	; 0x03
    33a0:	9c 81       	ldd	r25, Y+4	; 0x04
    33a2:	89 2b       	or	r24, r25
    33a4:	19 f4       	brne	.+6      	; 0x33ac <I2c_enuMasterTransmitDataWritingBlocking+0x24>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    33a6:	84 e0       	ldi	r24, 0x04	; 4
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	18 c0       	rjmp	.+48     	; 0x33dc <I2c_enuMasterTransmitDataWritingBlocking+0x54>
	}
	else{

		I2c_SetDataRegister(Copy_u8Data);
    33ac:	83 e2       	ldi	r24, 0x23	; 35
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	2a 81       	ldd	r18, Y+2	; 0x02
    33b2:	fc 01       	movw	r30, r24
    33b4:	20 83       	st	Z, r18
		I2c_DoJob();
    33b6:	86 e5       	ldi	r24, 0x56	; 86
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	24 e8       	ldi	r18, 0x84	; 132
    33bc:	fc 01       	movw	r30, r24
    33be:	20 83       	st	Z, r18
		while(I2c_IsTheJobDone() == ZERO_VALUE);
    33c0:	00 00       	nop
    33c2:	86 e5       	ldi	r24, 0x56	; 86
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	fc 01       	movw	r30, r24
    33c8:	80 81       	ld	r24, Z
    33ca:	88 1f       	adc	r24, r24
    33cc:	88 27       	eor	r24, r24
    33ce:	88 1f       	adc	r24, r24
    33d0:	88 2f       	mov	r24, r24
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	81 70       	andi	r24, 0x01	; 1
    33d6:	99 27       	eor	r25, r25
    33d8:	89 2b       	or	r24, r25
    33da:	99 f3       	breq	.-26     	; 0x33c2 <I2c_enuMasterTransmitDataWritingBlocking+0x3a>
	}

	return Loc_enuI2cStatus;
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	08 95       	ret

000033ec <I2c_enuMasterTransmitAddressReadingBlocking>:


/* send data/address */
I2c_StatusErrorType I2c_enuMasterTransmitAddressReadingBlocking(u8 Copy_u8SlaveAddress, u8* Address_ReceivedAck){
    33ec:	cf 93       	push	r28
    33ee:	df 93       	push	r29
    33f0:	00 d0       	rcall	.+0      	; 0x33f2 <I2c_enuMasterTransmitAddressReadingBlocking+0x6>
    33f2:	00 d0       	rcall	.+0      	; 0x33f4 <I2c_enuMasterTransmitAddressReadingBlocking+0x8>
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	8a 83       	std	Y+2, r24	; 0x02
    33fa:	7c 83       	std	Y+4, r23	; 0x04
    33fc:	6b 83       	std	Y+3, r22	; 0x03
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceivedAck){
    3402:	8b 81       	ldd	r24, Y+3	; 0x03
    3404:	9c 81       	ldd	r25, Y+4	; 0x04
    3406:	89 2b       	or	r24, r25
    3408:	19 f4       	brne	.+6      	; 0x3410 <I2c_enuMasterTransmitAddressReadingBlocking+0x24>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    340a:	84 e0       	ldi	r24, 0x04	; 4
    340c:	89 83       	std	Y+1, r24	; 0x01
    340e:	1d c0       	rjmp	.+58     	; 0x344a <I2c_enuMasterTransmitAddressReadingBlocking+0x5e>
	}
	else{
		I2c_SetDataRegister(((Copy_u8SlaveAddress<<ONE_VALUE)| ONE_VALUE));
    3410:	83 e2       	ldi	r24, 0x23	; 35
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	2a 81       	ldd	r18, Y+2	; 0x02
    3416:	22 2f       	mov	r18, r18
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	22 0f       	add	r18, r18
    341c:	33 1f       	adc	r19, r19
    341e:	21 60       	ori	r18, 0x01	; 1
    3420:	fc 01       	movw	r30, r24
    3422:	20 83       	st	Z, r18
		I2c_DoJob();
    3424:	86 e5       	ldi	r24, 0x56	; 86
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	24 e8       	ldi	r18, 0x84	; 132
    342a:	fc 01       	movw	r30, r24
    342c:	20 83       	st	Z, r18
		while(I2c_IsTheJobDone() == ZERO_VALUE);
    342e:	00 00       	nop
    3430:	86 e5       	ldi	r24, 0x56	; 86
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	fc 01       	movw	r30, r24
    3436:	80 81       	ld	r24, Z
    3438:	88 1f       	adc	r24, r24
    343a:	88 27       	eor	r24, r24
    343c:	88 1f       	adc	r24, r24
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	81 70       	andi	r24, 0x01	; 1
    3444:	99 27       	eor	r25, r25
    3446:	89 2b       	or	r24, r25
    3448:	99 f3       	breq	.-26     	; 0x3430 <I2c_enuMasterTransmitAddressReadingBlocking+0x44>
	}

	return Loc_enuI2cStatus;
    344a:	89 81       	ldd	r24, Y+1	; 0x01
}
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	08 95       	ret

0000345a <I2c_enuMasterTransmitAddressWritingBlocking>:

I2c_StatusErrorType I2c_enuMasterTransmitAddressWritingBlocking(u8 Copy_u8SlaveAddress, u8* Address_ReceivedAck){
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	00 d0       	rcall	.+0      	; 0x3460 <I2c_enuMasterTransmitAddressWritingBlocking+0x6>
    3460:	00 d0       	rcall	.+0      	; 0x3462 <I2c_enuMasterTransmitAddressWritingBlocking+0x8>
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	8a 83       	std	Y+2, r24	; 0x02
    3468:	7c 83       	std	Y+4, r23	; 0x04
    346a:	6b 83       	std	Y+3, r22	; 0x03
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceivedAck){
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	9c 81       	ldd	r25, Y+4	; 0x04
    3474:	89 2b       	or	r24, r25
    3476:	19 f4       	brne	.+6      	; 0x347e <I2c_enuMasterTransmitAddressWritingBlocking+0x24>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    3478:	84 e0       	ldi	r24, 0x04	; 4
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	19 c0       	rjmp	.+50     	; 0x34b0 <I2c_enuMasterTransmitAddressWritingBlocking+0x56>
	}
	else{
		I2c_SetDataRegister(Copy_u8SlaveAddress<<1);
    347e:	83 e2       	ldi	r24, 0x23	; 35
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	2a 81       	ldd	r18, Y+2	; 0x02
    3484:	22 0f       	add	r18, r18
    3486:	fc 01       	movw	r30, r24
    3488:	20 83       	st	Z, r18
		I2c_DoJob();
    348a:	86 e5       	ldi	r24, 0x56	; 86
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	24 e8       	ldi	r18, 0x84	; 132
    3490:	fc 01       	movw	r30, r24
    3492:	20 83       	st	Z, r18
		while(I2c_IsTheJobDone() == ZERO_VALUE);
    3494:	00 00       	nop
    3496:	86 e5       	ldi	r24, 0x56	; 86
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	fc 01       	movw	r30, r24
    349c:	80 81       	ld	r24, Z
    349e:	88 1f       	adc	r24, r24
    34a0:	88 27       	eor	r24, r24
    34a2:	88 1f       	adc	r24, r24
    34a4:	88 2f       	mov	r24, r24
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	81 70       	andi	r24, 0x01	; 1
    34aa:	99 27       	eor	r25, r25
    34ac:	89 2b       	or	r24, r25
    34ae:	99 f3       	breq	.-26     	; 0x3496 <I2c_enuMasterTransmitAddressWritingBlocking+0x3c>
	}
	return Loc_enuI2cStatus;
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	08 95       	ret

000034c0 <I2c_enuMasterReceiveDataBlocking>:


/* receive data from buffer
 you've send sla +R before
 */
I2c_StatusErrorType I2c_enuMasterReceiveDataBlocking(u8* Address_ResultData, u8 Copy_u8SendAck){
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <I2c_enuMasterReceiveDataBlocking+0x6>
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <I2c_enuMasterReceiveDataBlocking+0x8>
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	9b 83       	std	Y+3, r25	; 0x03
    34ce:	8a 83       	std	Y+2, r24	; 0x02
    34d0:	6c 83       	std	Y+4, r22	; 0x04
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ResultData){
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	9b 81       	ldd	r25, Y+3	; 0x03
    34da:	89 2b       	or	r24, r25
    34dc:	19 f4       	brne	.+6      	; 0x34e4 <I2c_enuMasterReceiveDataBlocking+0x24>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    34de:	84 e0       	ldi	r24, 0x04	; 4
    34e0:	89 83       	std	Y+1, r24	; 0x01
    34e2:	32 c0       	rjmp	.+100    	; 0x3548 <I2c_enuMasterReceiveDataBlocking+0x88>
	}
	else{


		I2c_DoJob();
    34e4:	86 e5       	ldi	r24, 0x56	; 86
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	24 e8       	ldi	r18, 0x84	; 132
    34ea:	fc 01       	movw	r30, r24
    34ec:	20 83       	st	Z, r18

		while(I2c_IsTheJobDone() == ZERO_VALUE);
    34ee:	00 00       	nop
    34f0:	86 e5       	ldi	r24, 0x56	; 86
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	fc 01       	movw	r30, r24
    34f6:	80 81       	ld	r24, Z
    34f8:	88 1f       	adc	r24, r24
    34fa:	88 27       	eor	r24, r24
    34fc:	88 1f       	adc	r24, r24
    34fe:	88 2f       	mov	r24, r24
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	81 70       	andi	r24, 0x01	; 1
    3504:	99 27       	eor	r25, r25
    3506:	89 2b       	or	r24, r25
    3508:	99 f3       	breq	.-26     	; 0x34f0 <I2c_enuMasterReceiveDataBlocking+0x30>

		*Address_ResultData = I2c_GetDataRegister();
    350a:	83 e2       	ldi	r24, 0x23	; 35
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	fc 01       	movw	r30, r24
    3510:	20 81       	ld	r18, Z
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	9b 81       	ldd	r25, Y+3	; 0x03
    3516:	fc 01       	movw	r30, r24
    3518:	20 83       	st	Z, r18
		I2c_SetAck(Copy_u8SendAck);
    351a:	86 e5       	ldi	r24, 0x56	; 86
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	26 e5       	ldi	r18, 0x56	; 86
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	f9 01       	movw	r30, r18
    3524:	20 81       	ld	r18, Z
    3526:	42 2f       	mov	r20, r18
    3528:	4f 7b       	andi	r20, 0xBF	; 191
    352a:	2c 81       	ldd	r18, Y+4	; 0x04
    352c:	22 2f       	mov	r18, r18
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	00 24       	eor	r0, r0
    3532:	36 95       	lsr	r19
    3534:	27 95       	ror	r18
    3536:	07 94       	ror	r0
    3538:	36 95       	lsr	r19
    353a:	27 95       	ror	r18
    353c:	07 94       	ror	r0
    353e:	32 2f       	mov	r19, r18
    3540:	20 2d       	mov	r18, r0
    3542:	24 2b       	or	r18, r20
    3544:	fc 01       	movw	r30, r24
    3546:	20 83       	st	Z, r18



	}

	return Loc_enuI2cStatus;
    3548:	89 81       	ldd	r24, Y+1	; 0x01
}
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	08 95       	ret

00003558 <I2c_enuSlaveTransmitDataBlocking>:



I2c_StatusErrorType I2c_enuSlaveTransmitDataBlocking(u8 Copy_u8Data, u8* Address_ReceivedAck){
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	00 d0       	rcall	.+0      	; 0x355e <I2c_enuSlaveTransmitDataBlocking+0x6>
    355e:	00 d0       	rcall	.+0      	; 0x3560 <I2c_enuSlaveTransmitDataBlocking+0x8>
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	8a 83       	std	Y+2, r24	; 0x02
    3566:	7c 83       	std	Y+4, r23	; 0x04
    3568:	6b 83       	std	Y+3, r22	; 0x03
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceivedAck){
    356e:	8b 81       	ldd	r24, Y+3	; 0x03
    3570:	9c 81       	ldd	r25, Y+4	; 0x04
    3572:	89 2b       	or	r24, r25
    3574:	19 f4       	brne	.+6      	; 0x357c <I2c_enuSlaveTransmitDataBlocking+0x24>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    3576:	84 e0       	ldi	r24, 0x04	; 4
    3578:	89 83       	std	Y+1, r24	; 0x01
    357a:	18 c0       	rjmp	.+48     	; 0x35ac <I2c_enuSlaveTransmitDataBlocking+0x54>
	}
	else{
		I2c_SetDataRegister(Copy_u8Data);
    357c:	83 e2       	ldi	r24, 0x23	; 35
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	2a 81       	ldd	r18, Y+2	; 0x02
    3582:	fc 01       	movw	r30, r24
    3584:	20 83       	st	Z, r18
		I2c_DoJob();
    3586:	86 e5       	ldi	r24, 0x56	; 86
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	24 e8       	ldi	r18, 0x84	; 132
    358c:	fc 01       	movw	r30, r24
    358e:	20 83       	st	Z, r18
		while(I2c_IsTheJobDone() == ZERO_VALUE);
    3590:	00 00       	nop
    3592:	86 e5       	ldi	r24, 0x56	; 86
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	fc 01       	movw	r30, r24
    3598:	80 81       	ld	r24, Z
    359a:	88 1f       	adc	r24, r24
    359c:	88 27       	eor	r24, r24
    359e:	88 1f       	adc	r24, r24
    35a0:	88 2f       	mov	r24, r24
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	81 70       	andi	r24, 0x01	; 1
    35a6:	99 27       	eor	r25, r25
    35a8:	89 2b       	or	r24, r25
    35aa:	99 f3       	breq	.-26     	; 0x3592 <I2c_enuSlaveTransmitDataBlocking+0x3a>
	}

	return Loc_enuI2cStatus;
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    35ae:	0f 90       	pop	r0
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	0f 90       	pop	r0
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	08 95       	ret

000035bc <I2c_enuSlaveReceiveDataBlocking>:

I2c_StatusErrorType I2c_enuSlaveReceiveDataBlocking(u8* Address_ResultData, u8 Copy_u8SendAck){
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	00 d0       	rcall	.+0      	; 0x35c2 <I2c_enuSlaveReceiveDataBlocking+0x6>
    35c2:	00 d0       	rcall	.+0      	; 0x35c4 <I2c_enuSlaveReceiveDataBlocking+0x8>
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
    35c8:	9b 83       	std	Y+3, r25	; 0x03
    35ca:	8a 83       	std	Y+2, r24	; 0x02
    35cc:	6c 83       	std	Y+4, r22	; 0x04
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ResultData){
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	9b 81       	ldd	r25, Y+3	; 0x03
    35d6:	89 2b       	or	r24, r25
    35d8:	19 f4       	brne	.+6      	; 0x35e0 <I2c_enuSlaveReceiveDataBlocking+0x24>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    35da:	84 e0       	ldi	r24, 0x04	; 4
    35dc:	89 83       	std	Y+1, r24	; 0x01
    35de:	1b c0       	rjmp	.+54     	; 0x3616 <I2c_enuSlaveReceiveDataBlocking+0x5a>
	}
	else{
		I2c_DoJob();
    35e0:	86 e5       	ldi	r24, 0x56	; 86
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	24 e8       	ldi	r18, 0x84	; 132
    35e6:	fc 01       	movw	r30, r24
    35e8:	20 83       	st	Z, r18
		while(I2c_IsTheJobDone() == ZERO_VALUE);
    35ea:	00 00       	nop
    35ec:	86 e5       	ldi	r24, 0x56	; 86
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	fc 01       	movw	r30, r24
    35f2:	80 81       	ld	r24, Z
    35f4:	88 1f       	adc	r24, r24
    35f6:	88 27       	eor	r24, r24
    35f8:	88 1f       	adc	r24, r24
    35fa:	88 2f       	mov	r24, r24
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	81 70       	andi	r24, 0x01	; 1
    3600:	99 27       	eor	r25, r25
    3602:	89 2b       	or	r24, r25
    3604:	99 f3       	breq	.-26     	; 0x35ec <I2c_enuSlaveReceiveDataBlocking+0x30>
		*Address_ResultData = I2c_GetDataRegister();
    3606:	83 e2       	ldi	r24, 0x23	; 35
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	fc 01       	movw	r30, r24
    360c:	20 81       	ld	r18, Z
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	9b 81       	ldd	r25, Y+3	; 0x03
    3612:	fc 01       	movw	r30, r24
    3614:	20 83       	st	Z, r18

	}

	return Loc_enuI2cStatus;
    3616:	89 81       	ldd	r24, Y+1	; 0x01
}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	08 95       	ret

00003626 <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	1f 92       	push	r1
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    3630:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
    3632:	8f e5       	ldi	r24, 0x5F	; 95
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	2f e5       	ldi	r18, 0x5F	; 95
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	f9 01       	movw	r30, r18
    363c:	20 81       	ld	r18, Z
    363e:	20 68       	ori	r18, 0x80	; 128
    3640:	fc 01       	movw	r30, r24
    3642:	20 83       	st	Z, r18

	return Loc_enuGieState;
    3644:	89 81       	ldd	r24, Y+1	; 0x01

}
    3646:	0f 90       	pop	r0
    3648:	df 91       	pop	r29
    364a:	cf 91       	pop	r28
    364c:	08 95       	ret

0000364e <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
    364e:	cf 93       	push	r28
    3650:	df 93       	push	r29
    3652:	1f 92       	push	r1
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    3658:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
    365a:	8f e5       	ldi	r24, 0x5F	; 95
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	2f e5       	ldi	r18, 0x5F	; 95
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	f9 01       	movw	r30, r18
    3664:	20 81       	ld	r18, Z
    3666:	2f 77       	andi	r18, 0x7F	; 127
    3668:	fc 01       	movw	r30, r24
    366a:	20 83       	st	Z, r18

		return Loc_enuGieState;
    366c:	89 81       	ldd	r24, Y+1	; 0x01
}
    366e:	0f 90       	pop	r0
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	08 95       	ret

00003676 <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	00 d0       	rcall	.+0      	; 0x367c <Gie_enuSetGloablInterrupt+0x6>
    367c:	cd b7       	in	r28, 0x3d	; 61
    367e:	de b7       	in	r29, 0x3e	; 62
    3680:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    3682:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
    3684:	8f e5       	ldi	r24, 0x5F	; 95
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	2f e5       	ldi	r18, 0x5F	; 95
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	f9 01       	movw	r30, r18
    368e:	20 81       	ld	r18, Z
    3690:	42 2f       	mov	r20, r18
    3692:	4f 77       	andi	r20, 0x7F	; 127
    3694:	2a 81       	ldd	r18, Y+2	; 0x02
    3696:	22 2f       	mov	r18, r18
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	36 95       	lsr	r19
    369c:	32 2f       	mov	r19, r18
    369e:	22 27       	eor	r18, r18
    36a0:	37 95       	ror	r19
    36a2:	27 95       	ror	r18
    36a4:	24 2b       	or	r18, r20
    36a6:	fc 01       	movw	r30, r24
    36a8:	20 83       	st	Z, r18

			return Loc_enuGieState;
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	08 95       	ret

000036b6 <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <Gie_enuGetGloablInterrupt+0x6>
    36bc:	00 d0       	rcall	.+0      	; 0x36be <Gie_enuGetGloablInterrupt+0x8>
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
    36c2:	8a 83       	std	Y+2, r24	; 0x02
    36c4:	7c 83       	std	Y+4, r23	; 0x04
    36c6:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    36c8:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
    36ca:	8b 81       	ldd	r24, Y+3	; 0x03
    36cc:	9c 81       	ldd	r25, Y+4	; 0x04
    36ce:	89 2b       	or	r24, r25
    36d0:	19 f4       	brne	.+6      	; 0x36d8 <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
    36d2:	82 e0       	ldi	r24, 0x02	; 2
    36d4:	89 83       	std	Y+1, r24	; 0x01
    36d6:	0c c0       	rjmp	.+24     	; 0x36f0 <Gie_enuGetGloablInterrupt+0x3a>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
    36d8:	8f e5       	ldi	r24, 0x5F	; 95
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	fc 01       	movw	r30, r24
    36de:	80 81       	ld	r24, Z
    36e0:	28 2f       	mov	r18, r24
    36e2:	22 1f       	adc	r18, r18
    36e4:	22 27       	eor	r18, r18
    36e6:	22 1f       	adc	r18, r18
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	9c 81       	ldd	r25, Y+4	; 0x04
    36ec:	fc 01       	movw	r30, r24
    36ee:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	df 91       	pop	r29
    36fc:	cf 91       	pop	r28
    36fe:	08 95       	ret

00003700 <Exti_enuEnable>:


/********************************** Software Interfaces Declarations *******************/


Exti_StatusErrorType Exti_enuEnable(Exti_IntIndexType Copy_enuIntIndex,  Exti_Intx_SelectConfigType Copy_enuConfiguration){
    3700:	cf 93       	push	r28
    3702:	df 93       	push	r29
    3704:	00 d0       	rcall	.+0      	; 0x3706 <Exti_enuEnable+0x6>
    3706:	1f 92       	push	r1
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	8a 83       	std	Y+2, r24	; 0x02
    370e:	6b 83       	std	Y+3, r22	; 0x03

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	83 30       	cpi	r24, 0x03	; 3
    3718:	18 f0       	brcs	.+6      	; 0x3720 <Exti_enuEnable+0x20>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    371a:	83 e0       	ldi	r24, 0x03	; 3
    371c:	89 83       	std	Y+1, r24	; 0x01
    371e:	8f c0       	rjmp	.+286    	; 0x383e <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){
    3720:	8a 81       	ldd	r24, Y+2	; 0x02
    3722:	88 2f       	mov	r24, r24
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	81 30       	cpi	r24, 0x01	; 1
    3728:	91 05       	cpc	r25, r1
    372a:	89 f1       	breq	.+98     	; 0x378e <Exti_enuEnable+0x8e>
    372c:	82 30       	cpi	r24, 0x02	; 2
    372e:	91 05       	cpc	r25, r1
    3730:	09 f4       	brne	.+2      	; 0x3734 <Exti_enuEnable+0x34>
    3732:	62 c0       	rjmp	.+196    	; 0x37f8 <Exti_enuEnable+0xf8>
    3734:	89 2b       	or	r24, r25
    3736:	09 f0       	breq	.+2      	; 0x373a <Exti_enuEnable+0x3a>
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
			Int2_EnableInterrupt();
			break;

		default:
			break;
    3738:	82 c0       	rjmp	.+260    	; 0x383e <Exti_enuEnable+0x13e>
	}
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :
			WRITE_BIT(MCUCR,0,(Copy_enuConfiguration>>0)& 0x01);
    373a:	85 e5       	ldi	r24, 0x55	; 85
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	25 e5       	ldi	r18, 0x55	; 85
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	f9 01       	movw	r30, r18
    3744:	20 81       	ld	r18, Z
    3746:	32 2f       	mov	r19, r18
    3748:	3e 7f       	andi	r19, 0xFE	; 254
    374a:	2b 81       	ldd	r18, Y+3	; 0x03
    374c:	21 70       	andi	r18, 0x01	; 1
    374e:	23 2b       	or	r18, r19
    3750:	fc 01       	movw	r30, r24
    3752:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,1,(Copy_enuConfiguration>>1)& 0x01);
    3754:	85 e5       	ldi	r24, 0x55	; 85
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	25 e5       	ldi	r18, 0x55	; 85
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	f9 01       	movw	r30, r18
    375e:	20 81       	ld	r18, Z
    3760:	42 2f       	mov	r20, r18
    3762:	4d 7f       	andi	r20, 0xFD	; 253
    3764:	2b 81       	ldd	r18, Y+3	; 0x03
    3766:	26 95       	lsr	r18
    3768:	22 2f       	mov	r18, r18
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	21 70       	andi	r18, 0x01	; 1
    376e:	33 27       	eor	r19, r19
    3770:	22 0f       	add	r18, r18
    3772:	33 1f       	adc	r19, r19
    3774:	24 2b       	or	r18, r20
    3776:	fc 01       	movw	r30, r24
    3778:	20 83       	st	Z, r18

			Int0_EnableInterrupt();
    377a:	8b e5       	ldi	r24, 0x5B	; 91
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	2b e5       	ldi	r18, 0x5B	; 91
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	f9 01       	movw	r30, r18
    3784:	20 81       	ld	r18, Z
    3786:	20 64       	ori	r18, 0x40	; 64
    3788:	fc 01       	movw	r30, r24
    378a:	20 83       	st	Z, r18

			break;
    378c:	58 c0       	rjmp	.+176    	; 0x383e <Exti_enuEnable+0x13e>

		case EXTI_INT1_INDEX :
			WRITE_BIT(MCUCR,2,(Copy_enuConfiguration>>0)& 0x01);
    378e:	85 e5       	ldi	r24, 0x55	; 85
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	25 e5       	ldi	r18, 0x55	; 85
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	f9 01       	movw	r30, r18
    3798:	20 81       	ld	r18, Z
    379a:	42 2f       	mov	r20, r18
    379c:	4b 7f       	andi	r20, 0xFB	; 251
    379e:	2b 81       	ldd	r18, Y+3	; 0x03
    37a0:	22 2f       	mov	r18, r18
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	21 70       	andi	r18, 0x01	; 1
    37a6:	33 27       	eor	r19, r19
    37a8:	22 0f       	add	r18, r18
    37aa:	33 1f       	adc	r19, r19
    37ac:	22 0f       	add	r18, r18
    37ae:	33 1f       	adc	r19, r19
    37b0:	24 2b       	or	r18, r20
    37b2:	fc 01       	movw	r30, r24
    37b4:	20 83       	st	Z, r18
			WRITE_BIT(MCUCR,3,(Copy_enuConfiguration>>1)& 0x01);
    37b6:	85 e5       	ldi	r24, 0x55	; 85
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	25 e5       	ldi	r18, 0x55	; 85
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	f9 01       	movw	r30, r18
    37c0:	20 81       	ld	r18, Z
    37c2:	42 2f       	mov	r20, r18
    37c4:	47 7f       	andi	r20, 0xF7	; 247
    37c6:	2b 81       	ldd	r18, Y+3	; 0x03
    37c8:	26 95       	lsr	r18
    37ca:	22 2f       	mov	r18, r18
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	21 70       	andi	r18, 0x01	; 1
    37d0:	33 27       	eor	r19, r19
    37d2:	22 0f       	add	r18, r18
    37d4:	33 1f       	adc	r19, r19
    37d6:	22 0f       	add	r18, r18
    37d8:	33 1f       	adc	r19, r19
    37da:	22 0f       	add	r18, r18
    37dc:	33 1f       	adc	r19, r19
    37de:	24 2b       	or	r18, r20
    37e0:	fc 01       	movw	r30, r24
    37e2:	20 83       	st	Z, r18
			Int1_EnableInterrupt();
    37e4:	8b e5       	ldi	r24, 0x5B	; 91
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	2b e5       	ldi	r18, 0x5B	; 91
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	f9 01       	movw	r30, r18
    37ee:	20 81       	ld	r18, Z
    37f0:	20 68       	ori	r18, 0x80	; 128
    37f2:	fc 01       	movw	r30, r24
    37f4:	20 83       	st	Z, r18
			break;
    37f6:	23 c0       	rjmp	.+70     	; 0x383e <Exti_enuEnable+0x13e>

		case EXTI_INT2_INDEX :
			WRITE_BIT(MCUCSR,6,(Copy_enuConfiguration>>0)& 0x01);
    37f8:	84 e5       	ldi	r24, 0x54	; 84
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	24 e5       	ldi	r18, 0x54	; 84
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	f9 01       	movw	r30, r18
    3802:	20 81       	ld	r18, Z
    3804:	42 2f       	mov	r20, r18
    3806:	4f 7b       	andi	r20, 0xBF	; 191
    3808:	2b 81       	ldd	r18, Y+3	; 0x03
    380a:	22 2f       	mov	r18, r18
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	21 70       	andi	r18, 0x01	; 1
    3810:	33 27       	eor	r19, r19
    3812:	00 24       	eor	r0, r0
    3814:	36 95       	lsr	r19
    3816:	27 95       	ror	r18
    3818:	07 94       	ror	r0
    381a:	36 95       	lsr	r19
    381c:	27 95       	ror	r18
    381e:	07 94       	ror	r0
    3820:	32 2f       	mov	r19, r18
    3822:	20 2d       	mov	r18, r0
    3824:	24 2b       	or	r18, r20
    3826:	fc 01       	movw	r30, r24
    3828:	20 83       	st	Z, r18
			Int2_EnableInterrupt();
    382a:	8b e5       	ldi	r24, 0x5B	; 91
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	2b e5       	ldi	r18, 0x5B	; 91
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	f9 01       	movw	r30, r18
    3834:	20 81       	ld	r18, Z
    3836:	20 62       	ori	r18, 0x20	; 32
    3838:	fc 01       	movw	r30, r24
    383a:	20 83       	st	Z, r18
			break;
    383c:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    383e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	08 95       	ret

0000384c <Exti_enuDisable>:
Exti_StatusErrorType	Exti_enuDisable(Exti_IntIndexType Copy_enuIntIndex){
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
    3850:	00 d0       	rcall	.+0      	; 0x3852 <Exti_enuDisable+0x6>
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	8a 83       	std	Y+2, r24	; 0x02

	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    385c:	8a 81       	ldd	r24, Y+2	; 0x02
    385e:	83 30       	cpi	r24, 0x03	; 3
    3860:	18 f0       	brcs	.+6      	; 0x3868 <Exti_enuDisable+0x1c>
		Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    3862:	83 e0       	ldi	r24, 0x03	; 3
    3864:	89 83       	std	Y+1, r24	; 0x01
    3866:	2a c0       	rjmp	.+84     	; 0x38bc <Exti_enuDisable+0x70>
	}
	else{
		switch(Copy_enuIntIndex){
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	88 2f       	mov	r24, r24
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	81 30       	cpi	r24, 0x01	; 1
    3870:	91 05       	cpc	r25, r1
    3872:	81 f0       	breq	.+32     	; 0x3894 <Exti_enuDisable+0x48>
    3874:	82 30       	cpi	r24, 0x02	; 2
    3876:	91 05       	cpc	r25, r1
    3878:	b9 f0       	breq	.+46     	; 0x38a8 <Exti_enuDisable+0x5c>
    387a:	89 2b       	or	r24, r25
    387c:	09 f0       	breq	.+2      	; 0x3880 <Exti_enuDisable+0x34>
			Int2_DisableInterrupt();
			break;

		default:
				// impossible
			break;
    387e:	1e c0       	rjmp	.+60     	; 0x38bc <Exti_enuDisable+0x70>
	else{
		switch(Copy_enuIntIndex){

		case EXTI_INT0_INDEX :

			Int0_DisableInterrupt();
    3880:	8b e5       	ldi	r24, 0x5B	; 91
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	2b e5       	ldi	r18, 0x5B	; 91
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	f9 01       	movw	r30, r18
    388a:	20 81       	ld	r18, Z
    388c:	2f 7b       	andi	r18, 0xBF	; 191
    388e:	fc 01       	movw	r30, r24
    3890:	20 83       	st	Z, r18
			break;
    3892:	14 c0       	rjmp	.+40     	; 0x38bc <Exti_enuDisable+0x70>

		case EXTI_INT1_INDEX :

			Int1_DisableInterrupt();
    3894:	8b e5       	ldi	r24, 0x5B	; 91
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	2b e5       	ldi	r18, 0x5B	; 91
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	f9 01       	movw	r30, r18
    389e:	20 81       	ld	r18, Z
    38a0:	2f 77       	andi	r18, 0x7F	; 127
    38a2:	fc 01       	movw	r30, r24
    38a4:	20 83       	st	Z, r18
			break;
    38a6:	0a c0       	rjmp	.+20     	; 0x38bc <Exti_enuDisable+0x70>

		case EXTI_INT2_INDEX :
			Int2_DisableInterrupt();
    38a8:	8b e5       	ldi	r24, 0x5B	; 91
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	2b e5       	ldi	r18, 0x5B	; 91
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	f9 01       	movw	r30, r18
    38b2:	20 81       	ld	r18, Z
    38b4:	2f 7d       	andi	r18, 0xDF	; 223
    38b6:	fc 01       	movw	r30, r24
    38b8:	20 83       	st	Z, r18
			break;
    38ba:	00 00       	nop

		}

	}

	return Loc_enuExtiStatus;
    38bc:	89 81       	ldd	r24, Y+1	; 0x01

}
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	08 95       	ret

000038c8 <Exti_enuSetCallbackFunction>:

Exti_StatusErrorType	Exti_enuSetCallbackFunction(Exti_IntIndexType Copy_enuIntIndex, void (*Address_Interrupt)(void)  ){
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	00 d0       	rcall	.+0      	; 0x38ce <Exti_enuSetCallbackFunction+0x6>
    38ce:	00 d0       	rcall	.+0      	; 0x38d0 <Exti_enuSetCallbackFunction+0x8>
    38d0:	cd b7       	in	r28, 0x3d	; 61
    38d2:	de b7       	in	r29, 0x3e	; 62
    38d4:	8a 83       	std	Y+2, r24	; 0x02
    38d6:	7c 83       	std	Y+4, r23	; 0x04
    38d8:	6b 83       	std	Y+3, r22	; 0x03
	Exti_StatusErrorType Loc_enuExtiStatus = EXTI_STATUS_OK;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_enuIntIndex>EXTI_MAX_INDEX_NUMBER_OF_PINS){
    38de:	8a 81       	ldd	r24, Y+2	; 0x02
    38e0:	83 30       	cpi	r24, 0x03	; 3
    38e2:	18 f0       	brcs	.+6      	; 0x38ea <Exti_enuSetCallbackFunction+0x22>
			Loc_enuExtiStatus = EXTI_STATUS_WRONG_INDEX;
    38e4:	83 e0       	ldi	r24, 0x03	; 3
    38e6:	89 83       	std	Y+1, r24	; 0x01
    38e8:	13 c0       	rjmp	.+38     	; 0x3910 <Exti_enuSetCallbackFunction+0x48>

		}
		else if(Address_Interrupt == NULL){
    38ea:	8b 81       	ldd	r24, Y+3	; 0x03
    38ec:	9c 81       	ldd	r25, Y+4	; 0x04
    38ee:	89 2b       	or	r24, r25
    38f0:	19 f4       	brne	.+6      	; 0x38f8 <Exti_enuSetCallbackFunction+0x30>
			Loc_enuExtiStatus = EXTI_STATUS_NULL_POINTER_ADDRESS;
    38f2:	82 e0       	ldi	r24, 0x02	; 2
    38f4:	89 83       	std	Y+1, r24	; 0x01
    38f6:	0c c0       	rjmp	.+24     	; 0x3910 <Exti_enuSetCallbackFunction+0x48>
		}
		else{
			Exti_InterruptHandler[Copy_enuIntIndex] = Address_Interrupt;
    38f8:	8a 81       	ldd	r24, Y+2	; 0x02
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	88 0f       	add	r24, r24
    3900:	99 1f       	adc	r25, r25
    3902:	8f 50       	subi	r24, 0x0F	; 15
    3904:	9f 4f       	sbci	r25, 0xFF	; 255
    3906:	2b 81       	ldd	r18, Y+3	; 0x03
    3908:	3c 81       	ldd	r19, Y+4	; 0x04
    390a:	fc 01       	movw	r30, r24
    390c:	31 83       	std	Z+1, r19	; 0x01
    390e:	20 83       	st	Z, r18

		}

		return Loc_enuExtiStatus;
    3910:	89 81       	ldd	r24, Y+1	; 0x01

}
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	df 91       	pop	r29
    391c:	cf 91       	pop	r28
    391e:	08 95       	ret

00003920 <__vector_1>:


// ISR function For INT0
void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    3920:	1f 92       	push	r1
    3922:	0f 92       	push	r0
    3924:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3928:	0f 92       	push	r0
    392a:	11 24       	eor	r1, r1
    392c:	2f 93       	push	r18
    392e:	3f 93       	push	r19
    3930:	4f 93       	push	r20
    3932:	5f 93       	push	r21
    3934:	6f 93       	push	r22
    3936:	7f 93       	push	r23
    3938:	8f 93       	push	r24
    393a:	9f 93       	push	r25
    393c:	af 93       	push	r26
    393e:	bf 93       	push	r27
    3940:	ef 93       	push	r30
    3942:	ff 93       	push	r31
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62

		if(Exti_InterruptHandler[EXTI_INT0_INDEX] != NULL)
    394c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <Exti_InterruptHandler>
    3950:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <Exti_InterruptHandler+0x1>
    3954:	89 2b       	or	r24, r25
    3956:	31 f0       	breq	.+12     	; 0x3964 <__vector_1+0x44>
			Exti_InterruptHandler[EXTI_INT0_INDEX]();
    3958:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <Exti_InterruptHandler>
    395c:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <Exti_InterruptHandler+0x1>
    3960:	fc 01       	movw	r30, r24
    3962:	09 95       	icall

}
    3964:	00 00       	nop
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	ff 91       	pop	r31
    396c:	ef 91       	pop	r30
    396e:	bf 91       	pop	r27
    3970:	af 91       	pop	r26
    3972:	9f 91       	pop	r25
    3974:	8f 91       	pop	r24
    3976:	7f 91       	pop	r23
    3978:	6f 91       	pop	r22
    397a:	5f 91       	pop	r21
    397c:	4f 91       	pop	r20
    397e:	3f 91       	pop	r19
    3980:	2f 91       	pop	r18
    3982:	0f 90       	pop	r0
    3984:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3988:	0f 90       	pop	r0
    398a:	1f 90       	pop	r1
    398c:	18 95       	reti

0000398e <__vector_2>:

// ISR function For INT1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    398e:	1f 92       	push	r1
    3990:	0f 92       	push	r0
    3992:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3996:	0f 92       	push	r0
    3998:	11 24       	eor	r1, r1
    399a:	2f 93       	push	r18
    399c:	3f 93       	push	r19
    399e:	4f 93       	push	r20
    39a0:	5f 93       	push	r21
    39a2:	6f 93       	push	r22
    39a4:	7f 93       	push	r23
    39a6:	8f 93       	push	r24
    39a8:	9f 93       	push	r25
    39aa:	af 93       	push	r26
    39ac:	bf 93       	push	r27
    39ae:	ef 93       	push	r30
    39b0:	ff 93       	push	r31
    39b2:	cf 93       	push	r28
    39b4:	df 93       	push	r29
    39b6:	cd b7       	in	r28, 0x3d	; 61
    39b8:	de b7       	in	r29, 0x3e	; 62

	if(Exti_InterruptHandler[EXTI_INT1_INDEX] != NULL)
    39ba:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <Exti_InterruptHandler+0x2>
    39be:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <Exti_InterruptHandler+0x3>
    39c2:	89 2b       	or	r24, r25
    39c4:	31 f0       	breq	.+12     	; 0x39d2 <__vector_2+0x44>
		Exti_InterruptHandler[EXTI_INT1_INDEX]();
    39c6:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <Exti_InterruptHandler+0x2>
    39ca:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <Exti_InterruptHandler+0x3>
    39ce:	fc 01       	movw	r30, r24
    39d0:	09 95       	icall

}
    39d2:	00 00       	nop
    39d4:	df 91       	pop	r29
    39d6:	cf 91       	pop	r28
    39d8:	ff 91       	pop	r31
    39da:	ef 91       	pop	r30
    39dc:	bf 91       	pop	r27
    39de:	af 91       	pop	r26
    39e0:	9f 91       	pop	r25
    39e2:	8f 91       	pop	r24
    39e4:	7f 91       	pop	r23
    39e6:	6f 91       	pop	r22
    39e8:	5f 91       	pop	r21
    39ea:	4f 91       	pop	r20
    39ec:	3f 91       	pop	r19
    39ee:	2f 91       	pop	r18
    39f0:	0f 90       	pop	r0
    39f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    39f6:	0f 90       	pop	r0
    39f8:	1f 90       	pop	r1
    39fa:	18 95       	reti

000039fc <__vector_3>:


// ISR function For INT2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    39fc:	1f 92       	push	r1
    39fe:	0f 92       	push	r0
    3a00:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3a04:	0f 92       	push	r0
    3a06:	11 24       	eor	r1, r1
    3a08:	2f 93       	push	r18
    3a0a:	3f 93       	push	r19
    3a0c:	4f 93       	push	r20
    3a0e:	5f 93       	push	r21
    3a10:	6f 93       	push	r22
    3a12:	7f 93       	push	r23
    3a14:	8f 93       	push	r24
    3a16:	9f 93       	push	r25
    3a18:	af 93       	push	r26
    3a1a:	bf 93       	push	r27
    3a1c:	ef 93       	push	r30
    3a1e:	ff 93       	push	r31
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
	if(Exti_InterruptHandler[EXTI_INT2_INDEX] != NULL)
    3a28:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <Exti_InterruptHandler+0x4>
    3a2c:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <Exti_InterruptHandler+0x5>
    3a30:	89 2b       	or	r24, r25
    3a32:	31 f0       	breq	.+12     	; 0x3a40 <__vector_3+0x44>
			Exti_InterruptHandler[EXTI_INT2_INDEX]();
    3a34:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <Exti_InterruptHandler+0x4>
    3a38:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <Exti_InterruptHandler+0x5>
    3a3c:	fc 01       	movw	r30, r24
    3a3e:	09 95       	icall

}
    3a40:	00 00       	nop
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	ff 91       	pop	r31
    3a48:	ef 91       	pop	r30
    3a4a:	bf 91       	pop	r27
    3a4c:	af 91       	pop	r26
    3a4e:	9f 91       	pop	r25
    3a50:	8f 91       	pop	r24
    3a52:	7f 91       	pop	r23
    3a54:	6f 91       	pop	r22
    3a56:	5f 91       	pop	r21
    3a58:	4f 91       	pop	r20
    3a5a:	3f 91       	pop	r19
    3a5c:	2f 91       	pop	r18
    3a5e:	0f 90       	pop	r0
    3a60:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    3a64:	0f 90       	pop	r0
    3a66:	1f 90       	pop	r1
    3a68:	18 95       	reti

00003a6a <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
    3a6a:	cf 93       	push	r28
    3a6c:	df 93       	push	r29
    3a6e:	00 d0       	rcall	.+0      	; 0x3a70 <Dio_enuWriteChannel+0x6>
    3a70:	00 d0       	rcall	.+0      	; 0x3a72 <Dio_enuWriteChannel+0x8>
    3a72:	1f 92       	push	r1
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	8c 83       	std	Y+4, r24	; 0x04
    3a7a:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    3a7c:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
    3a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a80:	87 70       	andi	r24, 0x07	; 7
    3a82:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
    3a84:	8c 81       	ldd	r24, Y+4	; 0x04
    3a86:	86 95       	lsr	r24
    3a88:	86 95       	lsr	r24
    3a8a:	86 95       	lsr	r24
    3a8c:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    3a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a90:	80 32       	cpi	r24, 0x20	; 32
    3a92:	18 f0       	brcs	.+6      	; 0x3a9a <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    3a94:	82 e0       	ldi	r24, 0x02	; 2
    3a96:	89 83       	std	Y+1, r24	; 0x01
    3a98:	4e c0       	rjmp	.+156    	; 0x3b36 <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    3a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a9c:	88 2f       	mov	r24, r24
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	88 0f       	add	r24, r24
    3aa2:	99 1f       	adc	r25, r25
    3aa4:	80 59       	subi	r24, 0x90	; 144
    3aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	80 81       	ld	r24, Z
    3aac:	91 81       	ldd	r25, Z+1	; 0x01
    3aae:	fc 01       	movw	r30, r24
    3ab0:	80 81       	ld	r24, Z
    3ab2:	88 2f       	mov	r24, r24
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ab8:	22 2f       	mov	r18, r18
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	02 c0       	rjmp	.+4      	; 0x3ac2 <Dio_enuWriteChannel+0x58>
    3abe:	95 95       	asr	r25
    3ac0:	87 95       	ror	r24
    3ac2:	2a 95       	dec	r18
    3ac4:	e2 f7       	brpl	.-8      	; 0x3abe <Dio_enuWriteChannel+0x54>
    3ac6:	81 70       	andi	r24, 0x01	; 1
    3ac8:	99 27       	eor	r25, r25
    3aca:	89 2b       	or	r24, r25
    3acc:	19 f4       	brne	.+6      	; 0x3ad4 <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    3ad2:	31 c0       	rjmp	.+98     	; 0x3b36 <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
    3ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad6:	88 2f       	mov	r24, r24
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	88 0f       	add	r24, r24
    3adc:	99 1f       	adc	r25, r25
    3ade:	88 58       	subi	r24, 0x88	; 136
    3ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	2b 81       	ldd	r18, Y+3	; 0x03
    3aea:	22 2f       	mov	r18, r18
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	22 0f       	add	r18, r18
    3af0:	33 1f       	adc	r19, r19
    3af2:	28 58       	subi	r18, 0x88	; 136
    3af4:	3f 4f       	sbci	r19, 0xFF	; 255
    3af6:	f9 01       	movw	r30, r18
    3af8:	20 81       	ld	r18, Z
    3afa:	31 81       	ldd	r19, Z+1	; 0x01
    3afc:	f9 01       	movw	r30, r18
    3afe:	20 81       	ld	r18, Z
    3b00:	62 2f       	mov	r22, r18
    3b02:	2a 81       	ldd	r18, Y+2	; 0x02
    3b04:	42 2f       	mov	r20, r18
    3b06:	50 e0       	ldi	r21, 0x00	; 0
    3b08:	21 e0       	ldi	r18, 0x01	; 1
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	02 c0       	rjmp	.+4      	; 0x3b12 <Dio_enuWriteChannel+0xa8>
    3b0e:	22 0f       	add	r18, r18
    3b10:	33 1f       	adc	r19, r19
    3b12:	4a 95       	dec	r20
    3b14:	e2 f7       	brpl	.-8      	; 0x3b0e <Dio_enuWriteChannel+0xa4>
    3b16:	20 95       	com	r18
    3b18:	62 23       	and	r22, r18
    3b1a:	2d 81       	ldd	r18, Y+5	; 0x05
    3b1c:	22 2f       	mov	r18, r18
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	4a 81       	ldd	r20, Y+2	; 0x02
    3b22:	44 2f       	mov	r20, r20
    3b24:	50 e0       	ldi	r21, 0x00	; 0
    3b26:	02 c0       	rjmp	.+4      	; 0x3b2c <Dio_enuWriteChannel+0xc2>
    3b28:	22 0f       	add	r18, r18
    3b2a:	33 1f       	adc	r19, r19
    3b2c:	4a 95       	dec	r20
    3b2e:	e2 f7       	brpl	.-8      	; 0x3b28 <Dio_enuWriteChannel+0xbe>
    3b30:	26 2b       	or	r18, r22
    3b32:	fc 01       	movw	r30, r24
    3b34:	20 83       	st	Z, r18

}

	return Loc_enuState;
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	df 91       	pop	r29
    3b44:	cf 91       	pop	r28
    3b46:	08 95       	ret

00003b48 <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
    3b48:	cf 93       	push	r28
    3b4a:	df 93       	push	r29
    3b4c:	00 d0       	rcall	.+0      	; 0x3b4e <Dio_enuReadChannel+0x6>
    3b4e:	00 d0       	rcall	.+0      	; 0x3b50 <Dio_enuReadChannel+0x8>
    3b50:	00 d0       	rcall	.+0      	; 0x3b52 <Dio_enuReadChannel+0xa>
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	8c 83       	std	Y+4, r24	; 0x04
    3b58:	7e 83       	std	Y+6, r23	; 0x06
    3b5a:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    3b5c:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    3b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b60:	87 70       	andi	r24, 0x07	; 7
    3b62:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    3b64:	8c 81       	ldd	r24, Y+4	; 0x04
    3b66:	86 95       	lsr	r24
    3b68:	86 95       	lsr	r24
    3b6a:	86 95       	lsr	r24
    3b6c:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    3b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b70:	80 32       	cpi	r24, 0x20	; 32
    3b72:	18 f0       	brcs	.+6      	; 0x3b7a <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    3b74:	82 e0       	ldi	r24, 0x02	; 2
    3b76:	89 83       	std	Y+1, r24	; 0x01
    3b78:	40 c0       	rjmp	.+128    	; 0x3bfa <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
    3b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7c:	88 2f       	mov	r24, r24
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	88 0f       	add	r24, r24
    3b82:	99 1f       	adc	r25, r25
    3b84:	80 59       	subi	r24, 0x90	; 144
    3b86:	9f 4f       	sbci	r25, 0xFF	; 255
    3b88:	fc 01       	movw	r30, r24
    3b8a:	80 81       	ld	r24, Z
    3b8c:	91 81       	ldd	r25, Z+1	; 0x01
    3b8e:	fc 01       	movw	r30, r24
    3b90:	80 81       	ld	r24, Z
    3b92:	88 2f       	mov	r24, r24
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	2a 81       	ldd	r18, Y+2	; 0x02
    3b98:	22 2f       	mov	r18, r18
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	02 c0       	rjmp	.+4      	; 0x3ba2 <Dio_enuReadChannel+0x5a>
    3b9e:	95 95       	asr	r25
    3ba0:	87 95       	ror	r24
    3ba2:	2a 95       	dec	r18
    3ba4:	e2 f7       	brpl	.-8      	; 0x3b9e <Dio_enuReadChannel+0x56>
    3ba6:	81 70       	andi	r24, 0x01	; 1
    3ba8:	99 27       	eor	r25, r25
    3baa:	89 2b       	or	r24, r25
    3bac:	19 f0       	breq	.+6      	; 0x3bb4 <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	89 83       	std	Y+1, r24	; 0x01
    3bb2:	23 c0       	rjmp	.+70     	; 0x3bfa <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
    3bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb8:	89 2b       	or	r24, r25
    3bba:	19 f4       	brne	.+6      	; 0x3bc2 <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    3bbc:	84 e0       	ldi	r24, 0x04	; 4
    3bbe:	89 83       	std	Y+1, r24	; 0x01
    3bc0:	1c c0       	rjmp	.+56     	; 0x3bfa <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
    3bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc4:	88 2f       	mov	r24, r24
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	88 0f       	add	r24, r24
    3bca:	99 1f       	adc	r25, r25
    3bcc:	80 58       	subi	r24, 0x80	; 128
    3bce:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	80 81       	ld	r24, Z
    3bda:	88 2f       	mov	r24, r24
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	2a 81       	ldd	r18, Y+2	; 0x02
    3be0:	22 2f       	mov	r18, r18
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	02 c0       	rjmp	.+4      	; 0x3bea <Dio_enuReadChannel+0xa2>
    3be6:	95 95       	asr	r25
    3be8:	87 95       	ror	r24
    3bea:	2a 95       	dec	r18
    3bec:	e2 f7       	brpl	.-8      	; 0x3be6 <Dio_enuReadChannel+0x9e>
    3bee:	28 2f       	mov	r18, r24
    3bf0:	21 70       	andi	r18, 0x01	; 1
    3bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	20 83       	st	Z, r18


	}

		return Loc_enuState;
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01

}
    3bfc:	26 96       	adiw	r28, 0x06	; 6
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
    3c08:	df 91       	pop	r29
    3c0a:	cf 91       	pop	r28
    3c0c:	08 95       	ret

00003c0e <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
    3c0e:	cf 93       	push	r28
    3c10:	df 93       	push	r29
    3c12:	00 d0       	rcall	.+0      	; 0x3c14 <Dio_enuWritePort+0x6>
    3c14:	1f 92       	push	r1
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	8a 83       	std	Y+2, r24	; 0x02
    3c1c:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    3c1e:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    3c20:	8a 81       	ldd	r24, Y+2	; 0x02
    3c22:	84 30       	cpi	r24, 0x04	; 4
    3c24:	18 f0       	brcs	.+6      	; 0x3c2c <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    3c26:	83 e0       	ldi	r24, 0x03	; 3
    3c28:	89 83       	std	Y+1, r24	; 0x01
    3c2a:	1e c0       	rjmp	.+60     	; 0x3c68 <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	88 2f       	mov	r24, r24
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	88 0f       	add	r24, r24
    3c34:	99 1f       	adc	r25, r25
    3c36:	80 59       	subi	r24, 0x90	; 144
    3c38:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	80 81       	ld	r24, Z
    3c3e:	91 81       	ldd	r25, Z+1	; 0x01
    3c40:	fc 01       	movw	r30, r24
    3c42:	80 81       	ld	r24, Z
    3c44:	8f 3f       	cpi	r24, 0xFF	; 255
    3c46:	19 f0       	breq	.+6      	; 0x3c4e <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	89 83       	std	Y+1, r24	; 0x01
    3c4c:	0d c0       	rjmp	.+26     	; 0x3c68 <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
    3c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c50:	88 2f       	mov	r24, r24
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	88 58       	subi	r24, 0x88	; 136
    3c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	80 81       	ld	r24, Z
    3c60:	91 81       	ldd	r25, Z+1	; 0x01
    3c62:	2b 81       	ldd	r18, Y+3	; 0x03
    3c64:	fc 01       	movw	r30, r24
    3c66:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    3c68:	89 81       	ldd	r24, Y+1	; 0x01



}
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	df 91       	pop	r29
    3c72:	cf 91       	pop	r28
    3c74:	08 95       	ret

00003c76 <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    3c7a:	00 d0       	rcall	.+0      	; 0x3c7c <Dio_enuReadPort+0x6>
    3c7c:	00 d0       	rcall	.+0      	; 0x3c7e <Dio_enuReadPort+0x8>
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	8a 83       	std	Y+2, r24	; 0x02
    3c84:	7c 83       	std	Y+4, r23	; 0x04
    3c86:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    3c88:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	84 30       	cpi	r24, 0x04	; 4
    3c8e:	18 f0       	brcs	.+6      	; 0x3c96 <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    3c90:	83 e0       	ldi	r24, 0x03	; 3
    3c92:	89 83       	std	Y+1, r24	; 0x01
    3c94:	28 c0       	rjmp	.+80     	; 0x3ce6 <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
    3c96:	8a 81       	ldd	r24, Y+2	; 0x02
    3c98:	88 2f       	mov	r24, r24
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	88 0f       	add	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	80 59       	subi	r24, 0x90	; 144
    3ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca4:	fc 01       	movw	r30, r24
    3ca6:	80 81       	ld	r24, Z
    3ca8:	91 81       	ldd	r25, Z+1	; 0x01
    3caa:	fc 01       	movw	r30, r24
    3cac:	80 81       	ld	r24, Z
    3cae:	88 23       	and	r24, r24
    3cb0:	19 f0       	breq	.+6      	; 0x3cb8 <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	89 83       	std	Y+1, r24	; 0x01
    3cb6:	17 c0       	rjmp	.+46     	; 0x3ce6 <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
    3cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cba:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbc:	89 2b       	or	r24, r25
    3cbe:	19 f4       	brne	.+6      	; 0x3cc6 <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    3cc0:	84 e0       	ldi	r24, 0x04	; 4
    3cc2:	89 83       	std	Y+1, r24	; 0x01
    3cc4:	10 c0       	rjmp	.+32     	; 0x3ce6 <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
    3cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc8:	88 2f       	mov	r24, r24
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	88 0f       	add	r24, r24
    3cce:	99 1f       	adc	r25, r25
    3cd0:	80 58       	subi	r24, 0x80	; 128
    3cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	80 81       	ld	r24, Z
    3cd8:	91 81       	ldd	r25, Z+1	; 0x01
    3cda:	fc 01       	movw	r30, r24
    3cdc:	20 81       	ld	r18, Z
    3cde:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce2:	fc 01       	movw	r30, r24
    3ce4:	20 83       	st	Z, r18

		}

			return Loc_enuState;
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01

}
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	08 95       	ret

00003cf6 <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
    3cf6:	cf 93       	push	r28
    3cf8:	df 93       	push	r29
    3cfa:	00 d0       	rcall	.+0      	; 0x3cfc <Dio_enuFlipChannel+0x6>
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <Dio_enuFlipChannel+0x8>
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
    3d02:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    3d04:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    3d06:	8c 81       	ldd	r24, Y+4	; 0x04
    3d08:	87 70       	andi	r24, 0x07	; 7
    3d0a:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    3d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d0e:	86 95       	lsr	r24
    3d10:	86 95       	lsr	r24
    3d12:	86 95       	lsr	r24
    3d14:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    3d16:	8c 81       	ldd	r24, Y+4	; 0x04
    3d18:	80 32       	cpi	r24, 0x20	; 32
    3d1a:	18 f0       	brcs	.+6      	; 0x3d22 <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    3d1c:	82 e0       	ldi	r24, 0x02	; 2
    3d1e:	89 83       	std	Y+1, r24	; 0x01
    3d20:	41 c0       	rjmp	.+130    	; 0x3da4 <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    3d22:	8b 81       	ldd	r24, Y+3	; 0x03
    3d24:	88 2f       	mov	r24, r24
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	88 0f       	add	r24, r24
    3d2a:	99 1f       	adc	r25, r25
    3d2c:	80 59       	subi	r24, 0x90	; 144
    3d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d30:	fc 01       	movw	r30, r24
    3d32:	80 81       	ld	r24, Z
    3d34:	91 81       	ldd	r25, Z+1	; 0x01
    3d36:	fc 01       	movw	r30, r24
    3d38:	80 81       	ld	r24, Z
    3d3a:	88 2f       	mov	r24, r24
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	2a 81       	ldd	r18, Y+2	; 0x02
    3d40:	22 2f       	mov	r18, r18
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	02 c0       	rjmp	.+4      	; 0x3d4a <Dio_enuFlipChannel+0x54>
    3d46:	95 95       	asr	r25
    3d48:	87 95       	ror	r24
    3d4a:	2a 95       	dec	r18
    3d4c:	e2 f7       	brpl	.-8      	; 0x3d46 <Dio_enuFlipChannel+0x50>
    3d4e:	81 70       	andi	r24, 0x01	; 1
    3d50:	99 27       	eor	r25, r25
    3d52:	89 2b       	or	r24, r25
    3d54:	19 f4       	brne	.+6      	; 0x3d5c <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	89 83       	std	Y+1, r24	; 0x01
    3d5a:	24 c0       	rjmp	.+72     	; 0x3da4 <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
    3d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5e:	88 2f       	mov	r24, r24
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	88 58       	subi	r24, 0x88	; 136
    3d68:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	80 81       	ld	r24, Z
    3d6e:	91 81       	ldd	r25, Z+1	; 0x01
    3d70:	2b 81       	ldd	r18, Y+3	; 0x03
    3d72:	22 2f       	mov	r18, r18
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	22 0f       	add	r18, r18
    3d78:	33 1f       	adc	r19, r19
    3d7a:	28 58       	subi	r18, 0x88	; 136
    3d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d7e:	f9 01       	movw	r30, r18
    3d80:	20 81       	ld	r18, Z
    3d82:	31 81       	ldd	r19, Z+1	; 0x01
    3d84:	f9 01       	movw	r30, r18
    3d86:	20 81       	ld	r18, Z
    3d88:	62 2f       	mov	r22, r18
    3d8a:	2a 81       	ldd	r18, Y+2	; 0x02
    3d8c:	42 2f       	mov	r20, r18
    3d8e:	50 e0       	ldi	r21, 0x00	; 0
    3d90:	21 e0       	ldi	r18, 0x01	; 1
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	02 c0       	rjmp	.+4      	; 0x3d9a <Dio_enuFlipChannel+0xa4>
    3d96:	22 0f       	add	r18, r18
    3d98:	33 1f       	adc	r19, r19
    3d9a:	4a 95       	dec	r20
    3d9c:	e2 f7       	brpl	.-8      	; 0x3d96 <Dio_enuFlipChannel+0xa0>
    3d9e:	26 27       	eor	r18, r22
    3da0:	fc 01       	movw	r30, r24
    3da2:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	08 95       	ret

00003db4 <Adc_enuInit>:
/********************************** Data Type Declarations ****************************/

/********************************** Software Interfaces Declarations *******************/


Adc_StatusErrorType Adc_enuInit(const Adc_PinConfigType* Address_Adc){
    3db4:	cf 93       	push	r28
    3db6:	df 93       	push	r29
    3db8:	00 d0       	rcall	.+0      	; 0x3dba <Adc_enuInit+0x6>
    3dba:	1f 92       	push	r1
    3dbc:	cd b7       	in	r28, 0x3d	; 61
    3dbe:	de b7       	in	r29, 0x3e	; 62
    3dc0:	9b 83       	std	Y+3, r25	; 0x03
    3dc2:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	9b 81       	ldd	r25, Y+3	; 0x03
    3dcc:	89 2b       	or	r24, r25
    3dce:	19 f4       	brne	.+6      	; 0x3dd6 <Adc_enuInit+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    3dd0:	82 e0       	ldi	r24, 0x02	; 2
    3dd2:	89 83       	std	Y+1, r24	; 0x01
    3dd4:	65 c0       	rjmp	.+202    	; 0x3ea0 <Adc_enuInit+0xec>
	    }
	    else{
	    	 /* Disable Adc Peripheral */
	    	        Adc_Disable();
    3dd6:	86 e2       	ldi	r24, 0x26	; 38
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	26 e2       	ldi	r18, 0x26	; 38
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	f9 01       	movw	r30, r18
    3de0:	20 81       	ld	r18, Z
    3de2:	2f 77       	andi	r18, 0x7F	; 127
    3de4:	fc 01       	movw	r30, r24
    3de6:	20 83       	st	Z, r18



	    	        /* Choose Conversion Clock  */
	    	        Adc_SelectConversionClock(Address_Adc->conversion_frequancy);
    3de8:	86 e2       	ldi	r24, 0x26	; 38
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	26 e2       	ldi	r18, 0x26	; 38
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	f9 01       	movw	r30, r18
    3df2:	20 81       	ld	r18, Z
    3df4:	42 2f       	mov	r20, r18
    3df6:	40 77       	andi	r20, 0x70	; 112
    3df8:	2a 81       	ldd	r18, Y+2	; 0x02
    3dfa:	3b 81       	ldd	r19, Y+3	; 0x03
    3dfc:	f9 01       	movw	r30, r18
    3dfe:	23 81       	ldd	r18, Z+3	; 0x03
    3e00:	27 70       	andi	r18, 0x07	; 7
    3e02:	24 2b       	or	r18, r20
    3e04:	fc 01       	movw	r30, r24
    3e06:	20 83       	st	Z, r18

	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    3e08:	87 e2       	ldi	r24, 0x27	; 39
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	27 e2       	ldi	r18, 0x27	; 39
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	f9 01       	movw	r30, r18
    3e12:	20 81       	ld	r18, Z
    3e14:	42 2f       	mov	r20, r18
    3e16:	48 7f       	andi	r20, 0xF8	; 248
    3e18:	2a 81       	ldd	r18, Y+2	; 0x02
    3e1a:	3b 81       	ldd	r19, Y+3	; 0x03
    3e1c:	f9 01       	movw	r30, r18
    3e1e:	20 81       	ld	r18, Z
    3e20:	27 70       	andi	r18, 0x07	; 7
    3e22:	24 2b       	or	r18, r20
    3e24:	fc 01       	movw	r30, r24
    3e26:	20 83       	st	Z, r18


	    	        /*Configure Result Format */
	    	        Adc_SelectResultFormat(Address_Adc->result_format);
    3e28:	87 e2       	ldi	r24, 0x27	; 39
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	27 e2       	ldi	r18, 0x27	; 39
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	f9 01       	movw	r30, r18
    3e32:	20 81       	ld	r18, Z
    3e34:	42 2f       	mov	r20, r18
    3e36:	4f 7d       	andi	r20, 0xDF	; 223
    3e38:	2a 81       	ldd	r18, Y+2	; 0x02
    3e3a:	3b 81       	ldd	r19, Y+3	; 0x03
    3e3c:	f9 01       	movw	r30, r18
    3e3e:	22 81       	ldd	r18, Z+2	; 0x02
    3e40:	22 2f       	mov	r18, r18
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	22 0f       	add	r18, r18
    3e46:	33 1f       	adc	r19, r19
    3e48:	22 95       	swap	r18
    3e4a:	32 95       	swap	r19
    3e4c:	30 7f       	andi	r19, 0xF0	; 240
    3e4e:	32 27       	eor	r19, r18
    3e50:	20 7f       	andi	r18, 0xF0	; 240
    3e52:	32 27       	eor	r19, r18
    3e54:	24 2b       	or	r18, r20
    3e56:	fc 01       	movw	r30, r24
    3e58:	20 83       	st	Z, r18

	    	        /* Configure Voltage Reference*/
	    	        Adc_SelectRefVoltageSource(Address_Adc->vref_source);
    3e5a:	87 e2       	ldi	r24, 0x27	; 39
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	27 e2       	ldi	r18, 0x27	; 39
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	f9 01       	movw	r30, r18
    3e64:	20 81       	ld	r18, Z
    3e66:	42 2f       	mov	r20, r18
    3e68:	4f 73       	andi	r20, 0x3F	; 63
    3e6a:	2a 81       	ldd	r18, Y+2	; 0x02
    3e6c:	3b 81       	ldd	r19, Y+3	; 0x03
    3e6e:	f9 01       	movw	r30, r18
    3e70:	21 81       	ldd	r18, Z+1	; 0x01
    3e72:	22 2f       	mov	r18, r18
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	00 24       	eor	r0, r0
    3e78:	36 95       	lsr	r19
    3e7a:	27 95       	ror	r18
    3e7c:	07 94       	ror	r0
    3e7e:	36 95       	lsr	r19
    3e80:	27 95       	ror	r18
    3e82:	07 94       	ror	r0
    3e84:	32 2f       	mov	r19, r18
    3e86:	20 2d       	mov	r18, r0
    3e88:	24 2b       	or	r18, r20
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	20 83       	st	Z, r18

	    	        /* Enable Adc Peripheral */
	    	        Adc_Enable();
    3e8e:	86 e2       	ldi	r24, 0x26	; 38
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	26 e2       	ldi	r18, 0x26	; 38
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	f9 01       	movw	r30, r18
    3e98:	20 81       	ld	r18, Z
    3e9a:	20 68       	ori	r18, 0x80	; 128
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	20 83       	st	Z, r18

	    }

	    return Loc_enuAdcStatus;
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	0f 90       	pop	r0
    3ea8:	df 91       	pop	r29
    3eaa:	cf 91       	pop	r28
    3eac:	08 95       	ret

00003eae <Adc_enuDeInit>:

Adc_StatusErrorType Adc_enuDeInit(void){
    3eae:	cf 93       	push	r28
    3eb0:	df 93       	push	r29
    3eb2:	1f 92       	push	r1
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	89 83       	std	Y+1, r24	; 0x01

	Adc_Disable();
    3ebc:	86 e2       	ldi	r24, 0x26	; 38
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	26 e2       	ldi	r18, 0x26	; 38
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	f9 01       	movw	r30, r18
    3ec6:	20 81       	ld	r18, Z
    3ec8:	2f 77       	andi	r18, 0x7F	; 127
    3eca:	fc 01       	movw	r30, r24
    3ecc:	20 83       	st	Z, r18
	    return Loc_enuAdcStatus;
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ed0:	0f 90       	pop	r0
    3ed2:	df 91       	pop	r29
    3ed4:	cf 91       	pop	r28
    3ed6:	08 95       	ret

00003ed8 <Adc_enuStartConversionSync>:


Adc_StatusErrorType Adc_enuStartConversionSync(const Adc_PinConfigType* Address_Adc, u16* Address_ResultDigitalVoltage){
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	a6 97       	sbiw	r28, 0x26	; 38
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	9c a3       	std	Y+36, r25	; 0x24
    3eee:	8b a3       	std	Y+35, r24	; 0x23
    3ef0:	7e a3       	std	Y+38, r23	; 0x26
    3ef2:	6d a3       	std	Y+37, r22	; 0x25

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8AdcInterruptStatus = ZERO_VALUE;
    3ef8:	1a 82       	std	Y+2, r1	; 0x02
	    if(NULL == Address_Adc || Address_ResultDigitalVoltage == NULL){
    3efa:	8b a1       	ldd	r24, Y+35	; 0x23
    3efc:	9c a1       	ldd	r25, Y+36	; 0x24
    3efe:	89 2b       	or	r24, r25
    3f00:	21 f0       	breq	.+8      	; 0x3f0a <Adc_enuStartConversionSync+0x32>
    3f02:	8d a1       	ldd	r24, Y+37	; 0x25
    3f04:	9e a1       	ldd	r25, Y+38	; 0x26
    3f06:	89 2b       	or	r24, r25
    3f08:	19 f4       	brne	.+6      	; 0x3f10 <Adc_enuStartConversionSync+0x38>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    3f0a:	82 e0       	ldi	r24, 0x02	; 2
    3f0c:	89 83       	std	Y+1, r24	; 0x01
    3f0e:	54 c1       	rjmp	.+680    	; 0x41b8 <Adc_enuStartConversionSync+0x2e0>
	    }
	    else{

	            /* Read Status of The interrupt */
	    	    Loc_u8AdcInterruptStatus = Adc_GetInterruptEnableStatus();
    3f10:	86 e2       	ldi	r24, 0x26	; 38
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	fc 01       	movw	r30, r24
    3f16:	80 81       	ld	r24, Z
    3f18:	86 95       	lsr	r24
    3f1a:	86 95       	lsr	r24
    3f1c:	86 95       	lsr	r24
    3f1e:	81 70       	andi	r24, 0x01	; 1
    3f20:	8a 83       	std	Y+2, r24	; 0x02

	            /* Choose Selected Channel */
	            Adc_SelectChannel(Address_Adc->channel_number);
    3f22:	87 e2       	ldi	r24, 0x27	; 39
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	27 e2       	ldi	r18, 0x27	; 39
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	f9 01       	movw	r30, r18
    3f2c:	20 81       	ld	r18, Z
    3f2e:	42 2f       	mov	r20, r18
    3f30:	48 7f       	andi	r20, 0xF8	; 248
    3f32:	2b a1       	ldd	r18, Y+35	; 0x23
    3f34:	3c a1       	ldd	r19, Y+36	; 0x24
    3f36:	f9 01       	movw	r30, r18
    3f38:	20 81       	ld	r18, Z
    3f3a:	27 70       	andi	r18, 0x07	; 7
    3f3c:	24 2b       	or	r18, r20
    3f3e:	fc 01       	movw	r30, r24
    3f40:	20 83       	st	Z, r18


	            /* Disable Interrupt not to jump after completing*/
	            Adc_SetInterruptEnable(ZERO_VALUE);
    3f42:	86 e2       	ldi	r24, 0x26	; 38
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	26 e2       	ldi	r18, 0x26	; 38
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	f9 01       	movw	r30, r18
    3f4c:	20 81       	ld	r18, Z
    3f4e:	27 7f       	andi	r18, 0xF7	; 247
    3f50:	fc 01       	movw	r30, r24
    3f52:	20 83       	st	Z, r18


	            /* Start Conversion  */
	            Adc_StartConversion();
    3f54:	86 e2       	ldi	r24, 0x26	; 38
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	26 e2       	ldi	r18, 0x26	; 38
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	f9 01       	movw	r30, r18
    3f5e:	20 81       	ld	r18, Z
    3f60:	20 64       	ori	r18, 0x40	; 64
    3f62:	fc 01       	movw	r30, r24
    3f64:	20 83       	st	Z, r18



	            /* wait =polling for conversion */
	            while( ZERO_VALUE == Adc_IsConversionCompleted() );
    3f66:	00 00       	nop
    3f68:	86 e2       	ldi	r24, 0x26	; 38
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	80 81       	ld	r24, Z
    3f70:	82 95       	swap	r24
    3f72:	86 95       	lsr	r24
    3f74:	86 95       	lsr	r24
    3f76:	83 70       	andi	r24, 0x03	; 3
    3f78:	88 2f       	mov	r24, r24
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	81 70       	andi	r24, 0x01	; 1
    3f7e:	99 27       	eor	r25, r25
    3f80:	89 2b       	or	r24, r25
    3f82:	91 f7       	brne	.-28     	; 0x3f68 <Adc_enuStartConversionSync+0x90>
    3f84:	80 e0       	ldi	r24, 0x00	; 0
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	a0 e2       	ldi	r26, 0x20	; 32
    3f8a:	b1 e4       	ldi	r27, 0x41	; 65
    3f8c:	8b 83       	std	Y+3, r24	; 0x03
    3f8e:	9c 83       	std	Y+4, r25	; 0x04
    3f90:	ad 83       	std	Y+5, r26	; 0x05
    3f92:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    3f94:	2b ea       	ldi	r18, 0xAB	; 171
    3f96:	3a ea       	ldi	r19, 0xAA	; 170
    3f98:	4a ea       	ldi	r20, 0xAA	; 170
    3f9a:	50 e4       	ldi	r21, 0x40	; 64
    3f9c:	6b 81       	ldd	r22, Y+3	; 0x03
    3f9e:	7c 81       	ldd	r23, Y+4	; 0x04
    3fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa4:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	8f 83       	std	Y+7, r24	; 0x07
    3fae:	98 87       	std	Y+8, r25	; 0x08
    3fb0:	a9 87       	std	Y+9, r26	; 0x09
    3fb2:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	40 e8       	ldi	r20, 0x80	; 128
    3fba:	50 e4       	ldi	r21, 0x40	; 64
    3fbc:	6b 81       	ldd	r22, Y+3	; 0x03
    3fbe:	7c 81       	ldd	r23, Y+4	; 0x04
    3fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc4:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	8b 87       	std	Y+11, r24	; 0x0b
    3fce:	9c 87       	std	Y+12, r25	; 0x0c
    3fd0:	ad 87       	std	Y+13, r26	; 0x0d
    3fd2:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	40 e8       	ldi	r20, 0x80	; 128
    3fda:	5f e3       	ldi	r21, 0x3F	; 63
    3fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fde:	78 85       	ldd	r23, Y+8	; 0x08
    3fe0:	89 85       	ldd	r24, Y+9	; 0x09
    3fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe4:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    3fe8:	88 23       	and	r24, r24
    3fea:	1c f4       	brge	.+6      	; 0x3ff2 <Adc_enuStartConversionSync+0x11a>
		__ticks = 1;
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	8f 87       	std	Y+15, r24	; 0x0f
    3ff0:	b2 c0       	rjmp	.+356    	; 0x4156 <Adc_enuStartConversionSync+0x27e>
	else if (__tmp2 > 65535)
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	3f ef       	ldi	r19, 0xFF	; 255
    3ff6:	4f e7       	ldi	r20, 0x7F	; 127
    3ff8:	57 e4       	ldi	r21, 0x47	; 71
    3ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4000:	9e 85       	ldd	r25, Y+14	; 0x0e
    4002:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    4006:	18 16       	cp	r1, r24
    4008:	0c f0       	brlt	.+2      	; 0x400c <Adc_enuStartConversionSync+0x134>
    400a:	7b c0       	rjmp	.+246    	; 0x4102 <Adc_enuStartConversionSync+0x22a>
	{
		_delay_ms(__us / 1000.0);
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	4a e7       	ldi	r20, 0x7A	; 122
    4012:	54 e4       	ldi	r21, 0x44	; 68
    4014:	6b 81       	ldd	r22, Y+3	; 0x03
    4016:	7c 81       	ldd	r23, Y+4	; 0x04
    4018:	8d 81       	ldd	r24, Y+5	; 0x05
    401a:	9e 81       	ldd	r25, Y+6	; 0x06
    401c:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	88 8b       	std	Y+16, r24	; 0x10
    4026:	99 8b       	std	Y+17, r25	; 0x11
    4028:	aa 8b       	std	Y+18, r26	; 0x12
    402a:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	4a e7       	ldi	r20, 0x7A	; 122
    4032:	55 e4       	ldi	r21, 0x45	; 69
    4034:	68 89       	ldd	r22, Y+16	; 0x10
    4036:	79 89       	ldd	r23, Y+17	; 0x11
    4038:	8a 89       	ldd	r24, Y+18	; 0x12
    403a:	9b 89       	ldd	r25, Y+19	; 0x13
    403c:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	8c 8b       	std	Y+20, r24	; 0x14
    4046:	9d 8b       	std	Y+21, r25	; 0x15
    4048:	ae 8b       	std	Y+22, r26	; 0x16
    404a:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	40 e8       	ldi	r20, 0x80	; 128
    4052:	5f e3       	ldi	r21, 0x3F	; 63
    4054:	6c 89       	ldd	r22, Y+20	; 0x14
    4056:	7d 89       	ldd	r23, Y+21	; 0x15
    4058:	8e 89       	ldd	r24, Y+22	; 0x16
    405a:	9f 89       	ldd	r25, Y+23	; 0x17
    405c:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    4060:	88 23       	and	r24, r24
    4062:	2c f4       	brge	.+10     	; 0x406e <Adc_enuStartConversionSync+0x196>
		__ticks = 1;
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	99 8f       	std	Y+25, r25	; 0x19
    406a:	88 8f       	std	Y+24, r24	; 0x18
    406c:	3f c0       	rjmp	.+126    	; 0x40ec <Adc_enuStartConversionSync+0x214>
	else if (__tmp > 65535)
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	3f ef       	ldi	r19, 0xFF	; 255
    4072:	4f e7       	ldi	r20, 0x7F	; 127
    4074:	57 e4       	ldi	r21, 0x47	; 71
    4076:	6c 89       	ldd	r22, Y+20	; 0x14
    4078:	7d 89       	ldd	r23, Y+21	; 0x15
    407a:	8e 89       	ldd	r24, Y+22	; 0x16
    407c:	9f 89       	ldd	r25, Y+23	; 0x17
    407e:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    4082:	18 16       	cp	r1, r24
    4084:	4c f5       	brge	.+82     	; 0x40d8 <Adc_enuStartConversionSync+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e2       	ldi	r20, 0x20	; 32
    408c:	51 e4       	ldi	r21, 0x41	; 65
    408e:	68 89       	ldd	r22, Y+16	; 0x10
    4090:	79 89       	ldd	r23, Y+17	; 0x11
    4092:	8a 89       	ldd	r24, Y+18	; 0x12
    4094:	9b 89       	ldd	r25, Y+19	; 0x13
    4096:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    409a:	dc 01       	movw	r26, r24
    409c:	cb 01       	movw	r24, r22
    409e:	bc 01       	movw	r22, r24
    40a0:	cd 01       	movw	r24, r26
    40a2:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	99 8f       	std	Y+25, r25	; 0x19
    40ac:	88 8f       	std	Y+24, r24	; 0x18
    40ae:	0f c0       	rjmp	.+30     	; 0x40ce <Adc_enuStartConversionSync+0x1f6>
    40b0:	80 e9       	ldi	r24, 0x90	; 144
    40b2:	91 e0       	ldi	r25, 0x01	; 1
    40b4:	9b 8f       	std	Y+27, r25	; 0x1b
    40b6:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    40ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    40bc:	01 97       	sbiw	r24, 0x01	; 1
    40be:	f1 f7       	brne	.-4      	; 0x40bc <Adc_enuStartConversionSync+0x1e4>
    40c0:	9b 8f       	std	Y+27, r25	; 0x1b
    40c2:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c4:	88 8d       	ldd	r24, Y+24	; 0x18
    40c6:	99 8d       	ldd	r25, Y+25	; 0x19
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	99 8f       	std	Y+25, r25	; 0x19
    40cc:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ce:	88 8d       	ldd	r24, Y+24	; 0x18
    40d0:	99 8d       	ldd	r25, Y+25	; 0x19
    40d2:	89 2b       	or	r24, r25
    40d4:	69 f7       	brne	.-38     	; 0x40b0 <Adc_enuStartConversionSync+0x1d8>
    40d6:	3f c0       	rjmp	.+126    	; 0x4156 <Adc_enuStartConversionSync+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d8:	6c 89       	ldd	r22, Y+20	; 0x14
    40da:	7d 89       	ldd	r23, Y+21	; 0x15
    40dc:	8e 89       	ldd	r24, Y+22	; 0x16
    40de:	9f 89       	ldd	r25, Y+23	; 0x17
    40e0:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    40e4:	dc 01       	movw	r26, r24
    40e6:	cb 01       	movw	r24, r22
    40e8:	99 8f       	std	Y+25, r25	; 0x19
    40ea:	88 8f       	std	Y+24, r24	; 0x18
    40ec:	88 8d       	ldd	r24, Y+24	; 0x18
    40ee:	99 8d       	ldd	r25, Y+25	; 0x19
    40f0:	9d 8f       	std	Y+29, r25	; 0x1d
    40f2:	8c 8f       	std	Y+28, r24	; 0x1c
    40f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    40f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	f1 f7       	brne	.-4      	; 0x40f8 <Adc_enuStartConversionSync+0x220>
    40fc:	9d 8f       	std	Y+29, r25	; 0x1d
    40fe:	8c 8f       	std	Y+28, r24	; 0x1c
    4100:	2a c0       	rjmp	.+84     	; 0x4156 <Adc_enuStartConversionSync+0x27e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	4f e7       	ldi	r20, 0x7F	; 127
    4108:	53 e4       	ldi	r21, 0x43	; 67
    410a:	6f 81       	ldd	r22, Y+7	; 0x07
    410c:	78 85       	ldd	r23, Y+8	; 0x08
    410e:	89 85       	ldd	r24, Y+9	; 0x09
    4110:	9a 85       	ldd	r25, Y+10	; 0x0a
    4112:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    4116:	18 16       	cp	r1, r24
    4118:	ac f4       	brge	.+42     	; 0x4144 <Adc_enuStartConversionSync+0x26c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    411a:	6b 85       	ldd	r22, Y+11	; 0x0b
    411c:	7c 85       	ldd	r23, Y+12	; 0x0c
    411e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4120:	9e 85       	ldd	r25, Y+14	; 0x0e
    4122:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	9f 8f       	std	Y+31, r25	; 0x1f
    412c:	8e 8f       	std	Y+30, r24	; 0x1e
    412e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4130:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4132:	99 a3       	std	Y+33, r25	; 0x21
    4134:	88 a3       	std	Y+32, r24	; 0x20
    4136:	88 a1       	ldd	r24, Y+32	; 0x20
    4138:	99 a1       	ldd	r25, Y+33	; 0x21
    413a:	01 97       	sbiw	r24, 0x01	; 1
    413c:	f1 f7       	brne	.-4      	; 0x413a <Adc_enuStartConversionSync+0x262>
    413e:	99 a3       	std	Y+33, r25	; 0x21
    4140:	88 a3       	std	Y+32, r24	; 0x20
    4142:	0f c0       	rjmp	.+30     	; 0x4162 <Adc_enuStartConversionSync+0x28a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4144:	6f 81       	ldd	r22, Y+7	; 0x07
    4146:	78 85       	ldd	r23, Y+8	; 0x08
    4148:	89 85       	ldd	r24, Y+9	; 0x09
    414a:	9a 85       	ldd	r25, Y+10	; 0x0a
    414c:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	8f 87       	std	Y+15, r24	; 0x0f
    4156:	8f 85       	ldd	r24, Y+15	; 0x0f
    4158:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    415a:	8a a1       	ldd	r24, Y+34	; 0x22
    415c:	8a 95       	dec	r24
    415e:	f1 f7       	brne	.-4      	; 0x415c <Adc_enuStartConversionSync+0x284>
    4160:	8a a3       	std	Y+34, r24	; 0x22
	            _delay_us(10);

	            Loc_enuAdcStatus &= Adc_GetResult(Address_Adc->result_format ,Address_ResultDigitalVoltage);
    4162:	8b a1       	ldd	r24, Y+35	; 0x23
    4164:	9c a1       	ldd	r25, Y+36	; 0x24
    4166:	fc 01       	movw	r30, r24
    4168:	22 81       	ldd	r18, Z+2	; 0x02
    416a:	8d a1       	ldd	r24, Y+37	; 0x25
    416c:	9e a1       	ldd	r25, Y+38	; 0x26
    416e:	bc 01       	movw	r22, r24
    4170:	82 2f       	mov	r24, r18
    4172:	0e 94 95 21 	call	0x432a	; 0x432a <Adc_GetResult>
    4176:	98 2f       	mov	r25, r24
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	89 23       	and	r24, r25
    417c:	89 83       	std	Y+1, r24	; 0x01

	            /* Return Status Of The Adc Interrupt*/
	            Adc_ClearInterruptFlag();
    417e:	86 e2       	ldi	r24, 0x26	; 38
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	26 e2       	ldi	r18, 0x26	; 38
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	f9 01       	movw	r30, r18
    4188:	20 81       	ld	r18, Z
    418a:	20 61       	ori	r18, 0x10	; 16
    418c:	fc 01       	movw	r30, r24
    418e:	20 83       	st	Z, r18
	            Adc_SetInterruptEnable(Loc_u8AdcInterruptStatus);
    4190:	86 e2       	ldi	r24, 0x26	; 38
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	26 e2       	ldi	r18, 0x26	; 38
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	f9 01       	movw	r30, r18
    419a:	20 81       	ld	r18, Z
    419c:	42 2f       	mov	r20, r18
    419e:	47 7f       	andi	r20, 0xF7	; 247
    41a0:	2a 81       	ldd	r18, Y+2	; 0x02
    41a2:	22 2f       	mov	r18, r18
    41a4:	30 e0       	ldi	r19, 0x00	; 0
    41a6:	22 0f       	add	r18, r18
    41a8:	33 1f       	adc	r19, r19
    41aa:	22 0f       	add	r18, r18
    41ac:	33 1f       	adc	r19, r19
    41ae:	22 0f       	add	r18, r18
    41b0:	33 1f       	adc	r19, r19
    41b2:	24 2b       	or	r18, r20
    41b4:	fc 01       	movw	r30, r24
    41b6:	20 83       	st	Z, r18
	        }

	    return Loc_enuAdcStatus;
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    41ba:	a6 96       	adiw	r28, 0x26	; 38
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	f8 94       	cli
    41c0:	de bf       	out	0x3e, r29	; 62
    41c2:	0f be       	out	0x3f, r0	; 63
    41c4:	cd bf       	out	0x3d, r28	; 61
    41c6:	df 91       	pop	r29
    41c8:	cf 91       	pop	r28
    41ca:	08 95       	ret

000041cc <Adc_ConvertResultToVoltage>:



Adc_StatusErrorType Adc_ConvertResultToVoltage( u16 Copy_u16DigitalValue, f32* Address_ResultAnalogVoltage){
    41cc:	cf 93       	push	r28
    41ce:	df 93       	push	r29
    41d0:	00 d0       	rcall	.+0      	; 0x41d2 <Adc_ConvertResultToVoltage+0x6>
    41d2:	00 d0       	rcall	.+0      	; 0x41d4 <Adc_ConvertResultToVoltage+0x8>
    41d4:	1f 92       	push	r1
    41d6:	cd b7       	in	r28, 0x3d	; 61
    41d8:	de b7       	in	r29, 0x3e	; 62
    41da:	9b 83       	std	Y+3, r25	; 0x03
    41dc:	8a 83       	std	Y+2, r24	; 0x02
    41de:	7d 83       	std	Y+5, r23	; 0x05
    41e0:	6c 83       	std	Y+4, r22	; 0x04

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_ResultAnalogVoltage){
    41e6:	8c 81       	ldd	r24, Y+4	; 0x04
    41e8:	9d 81       	ldd	r25, Y+5	; 0x05
    41ea:	89 2b       	or	r24, r25
    41ec:	19 f4       	brne	.+6      	; 0x41f4 <Adc_ConvertResultToVoltage+0x28>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	89 83       	std	Y+1, r24	; 0x01
    41f2:	1c c0       	rjmp	.+56     	; 0x422c <Adc_ConvertResultToVoltage+0x60>
	    }
	    else{
	           /* Vanalog = Vdigital * step    */
	           /* Step Size = (Vmax-Vmin)/2^n      */
	           *Address_ResultAnalogVoltage = Copy_u16DigitalValue*0.004883F;
    41f4:	8a 81       	ldd	r24, Y+2	; 0x02
    41f6:	9b 81       	ldd	r25, Y+3	; 0x03
    41f8:	cc 01       	movw	r24, r24
    41fa:	a0 e0       	ldi	r26, 0x00	; 0
    41fc:	b0 e0       	ldi	r27, 0x00	; 0
    41fe:	bc 01       	movw	r22, r24
    4200:	cd 01       	movw	r24, r26
    4202:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	23 e9       	ldi	r18, 0x93	; 147
    420c:	31 e0       	ldi	r19, 0x01	; 1
    420e:	40 ea       	ldi	r20, 0xA0	; 160
    4210:	5b e3       	ldi	r21, 0x3B	; 59
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	2c 81       	ldd	r18, Y+4	; 0x04
    4220:	3d 81       	ldd	r19, Y+5	; 0x05
    4222:	f9 01       	movw	r30, r18
    4224:	80 83       	st	Z, r24
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	a2 83       	std	Z+2, r26	; 0x02
    422a:	b3 83       	std	Z+3, r27	; 0x03
	       }

	    return Loc_enuAdcStatus;
    422c:	89 81       	ldd	r24, Y+1	; 0x01
}
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	df 91       	pop	r29
    423a:	cf 91       	pop	r28
    423c:	08 95       	ret

0000423e <Adc_StartConversionAsync>:


Adc_StatusErrorType Adc_StartConversionAsync(const Adc_PinConfigType* Address_Adc){
    423e:	cf 93       	push	r28
    4240:	df 93       	push	r29
    4242:	00 d0       	rcall	.+0      	; 0x4244 <Adc_StartConversionAsync+0x6>
    4244:	1f 92       	push	r1
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
    424a:	9b 83       	std	Y+3, r25	; 0x03
    424c:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    424e:	81 e0       	ldi	r24, 0x01	; 1
    4250:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	9b 81       	ldd	r25, Y+3	; 0x03
    4256:	89 2b       	or	r24, r25
    4258:	19 f4       	brne	.+6      	; 0x4260 <Adc_StartConversionAsync+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    425a:	82 e0       	ldi	r24, 0x02	; 2
    425c:	89 83       	std	Y+1, r24	; 0x01
    425e:	34 c0       	rjmp	.+104    	; 0x42c8 <Adc_StartConversionAsync+0x8a>
	    }
	    else{
	    	 /* You can't start A new Conversion Unless The old One Is Done*/
	    	        while( ZERO_VALUE == Adc_IsConversionCompleted() );
    4260:	00 00       	nop
    4262:	86 e2       	ldi	r24, 0x26	; 38
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	fc 01       	movw	r30, r24
    4268:	80 81       	ld	r24, Z
    426a:	82 95       	swap	r24
    426c:	86 95       	lsr	r24
    426e:	86 95       	lsr	r24
    4270:	83 70       	andi	r24, 0x03	; 3
    4272:	88 2f       	mov	r24, r24
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	81 70       	andi	r24, 0x01	; 1
    4278:	99 27       	eor	r25, r25
    427a:	89 2b       	or	r24, r25
    427c:	91 f7       	brne	.-28     	; 0x4262 <Adc_StartConversionAsync+0x24>

	    	        Global_AdcInterruptIndex = (u8)Address_Adc->channel_number;
    427e:	8a 81       	ldd	r24, Y+2	; 0x02
    4280:	9b 81       	ldd	r25, Y+3	; 0x03
    4282:	fc 01       	movw	r30, r24
    4284:	80 81       	ld	r24, Z
    4286:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Global_AdcInterruptIndex>
	    	        current_format = Address_Adc->result_format;
    428a:	8a 81       	ldd	r24, Y+2	; 0x02
    428c:	9b 81       	ldd	r25, Y+3	; 0x03
    428e:	fc 01       	movw	r30, r24
    4290:	82 81       	ldd	r24, Z+2	; 0x02
    4292:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <current_format>
	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    4296:	87 e2       	ldi	r24, 0x27	; 39
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	27 e2       	ldi	r18, 0x27	; 39
    429c:	30 e0       	ldi	r19, 0x00	; 0
    429e:	f9 01       	movw	r30, r18
    42a0:	20 81       	ld	r18, Z
    42a2:	42 2f       	mov	r20, r18
    42a4:	48 7f       	andi	r20, 0xF8	; 248
    42a6:	2a 81       	ldd	r18, Y+2	; 0x02
    42a8:	3b 81       	ldd	r19, Y+3	; 0x03
    42aa:	f9 01       	movw	r30, r18
    42ac:	20 81       	ld	r18, Z
    42ae:	27 70       	andi	r18, 0x07	; 7
    42b0:	24 2b       	or	r18, r20
    42b2:	fc 01       	movw	r30, r24
    42b4:	20 83       	st	Z, r18


	    	        /* Start Conversion  */
	    	        Adc_StartConversion();
    42b6:	86 e2       	ldi	r24, 0x26	; 38
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	26 e2       	ldi	r18, 0x26	; 38
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	f9 01       	movw	r30, r18
    42c0:	20 81       	ld	r18, Z
    42c2:	20 64       	ori	r18, 0x40	; 64
    42c4:	fc 01       	movw	r30, r24
    42c6:	20 83       	st	Z, r18
	    }

	    return Loc_enuAdcStatus;
    42c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    42ca:	0f 90       	pop	r0
    42cc:	0f 90       	pop	r0
    42ce:	0f 90       	pop	r0
    42d0:	df 91       	pop	r29
    42d2:	cf 91       	pop	r28
    42d4:	08 95       	ret

000042d6 <Adc_enuEnableInterrupt>:


Adc_StatusErrorType Adc_enuEnableInterrupt(void){
    42d6:	cf 93       	push	r28
    42d8:	df 93       	push	r29
    42da:	1f 92       	push	r1
    42dc:	cd b7       	in	r28, 0x3d	; 61
    42de:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	89 83       	std	Y+1, r24	; 0x01
	Adc_EnableInterrupt();
    42e4:	86 e2       	ldi	r24, 0x26	; 38
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	26 e2       	ldi	r18, 0x26	; 38
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	f9 01       	movw	r30, r18
    42ee:	20 81       	ld	r18, Z
    42f0:	28 60       	ori	r18, 0x08	; 8
    42f2:	fc 01       	movw	r30, r24
    42f4:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    42f8:	0f 90       	pop	r0
    42fa:	df 91       	pop	r29
    42fc:	cf 91       	pop	r28
    42fe:	08 95       	ret

00004300 <Adc_enuDisableInterrupt>:


Adc_StatusErrorType Adc_enuDisableInterrupt(void){
    4300:	cf 93       	push	r28
    4302:	df 93       	push	r29
    4304:	1f 92       	push	r1
    4306:	cd b7       	in	r28, 0x3d	; 61
    4308:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	89 83       	std	Y+1, r24	; 0x01
	Adc_DisableInterrupt();
    430e:	86 e2       	ldi	r24, 0x26	; 38
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	26 e2       	ldi	r18, 0x26	; 38
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	f9 01       	movw	r30, r18
    4318:	20 81       	ld	r18, Z
    431a:	27 7f       	andi	r18, 0xF7	; 247
    431c:	fc 01       	movw	r30, r24
    431e:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    4320:	89 81       	ldd	r24, Y+1	; 0x01
}
    4322:	0f 90       	pop	r0
    4324:	df 91       	pop	r29
    4326:	cf 91       	pop	r28
    4328:	08 95       	ret

0000432a <Adc_GetResult>:




////////////////////////////////////////////////Helpers Functions ///////////////////////////
static Adc_StatusErrorType Adc_GetResult(const Adc_ResultFormartType Copy_enuResultFormat, u16* Address_Result){
    432a:	cf 93       	push	r28
    432c:	df 93       	push	r29
    432e:	00 d0       	rcall	.+0      	; 0x4330 <Adc_GetResult+0x6>
    4330:	00 d0       	rcall	.+0      	; 0x4332 <Adc_GetResult+0x8>
    4332:	cd b7       	in	r28, 0x3d	; 61
    4334:	de b7       	in	r29, 0x3e	; 62
    4336:	8a 83       	std	Y+2, r24	; 0x02
    4338:	7c 83       	std	Y+4, r23	; 0x04
    433a:	6b 83       	std	Y+3, r22	; 0x03

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Result){
    4340:	8b 81       	ldd	r24, Y+3	; 0x03
    4342:	9c 81       	ldd	r25, Y+4	; 0x04
    4344:	89 2b       	or	r24, r25
    4346:	19 f4       	brne	.+6      	; 0x434e <Adc_GetResult+0x24>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    4348:	82 e0       	ldi	r24, 0x02	; 2
    434a:	89 83       	std	Y+1, r24	; 0x01
    434c:	30 c0       	rjmp	.+96     	; 0x43ae <Adc_GetResult+0x84>
	    }

	    	else{
	    	        switch(Copy_enuResultFormat){
    434e:	8a 81       	ldd	r24, Y+2	; 0x02
    4350:	88 2f       	mov	r24, r24
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	89 2b       	or	r24, r25
    4356:	b9 f4       	brne	.+46     	; 0x4386 <Adc_GetResult+0x5c>

	    	        case ADC_RIGHT_JUSTIFIED:



	    	                *Address_Result = (ADCL) | (ADCH <<8) ;
    4358:	84 e2       	ldi	r24, 0x24	; 36
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	fc 01       	movw	r30, r24
    435e:	80 81       	ld	r24, Z
    4360:	28 2f       	mov	r18, r24
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	85 e2       	ldi	r24, 0x25	; 37
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	fc 01       	movw	r30, r24
    436a:	80 81       	ld	r24, Z
    436c:	88 2f       	mov	r24, r24
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	98 2f       	mov	r25, r24
    4372:	88 27       	eor	r24, r24
    4374:	82 2b       	or	r24, r18
    4376:	93 2b       	or	r25, r19
    4378:	9c 01       	movw	r18, r24
    437a:	8b 81       	ldd	r24, Y+3	; 0x03
    437c:	9c 81       	ldd	r25, Y+4	; 0x04
    437e:	fc 01       	movw	r30, r24
    4380:	31 83       	std	Z+1, r19	; 0x01
    4382:	20 83       	st	Z, r18
	    	                break;
    4384:	14 c0       	rjmp	.+40     	; 0x43ae <Adc_GetResult+0x84>

	    	            default:
	    	            	*Address_Result = (ADCHL>>6) & 0x3FF;
    4386:	84 e2       	ldi	r24, 0x24	; 36
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	fc 01       	movw	r30, r24
    438c:	80 81       	ld	r24, Z
    438e:	91 81       	ldd	r25, Z+1	; 0x01
    4390:	9c 01       	movw	r18, r24
    4392:	00 24       	eor	r0, r0
    4394:	22 0f       	add	r18, r18
    4396:	33 1f       	adc	r19, r19
    4398:	00 1c       	adc	r0, r0
    439a:	22 0f       	add	r18, r18
    439c:	33 1f       	adc	r19, r19
    439e:	00 1c       	adc	r0, r0
    43a0:	23 2f       	mov	r18, r19
    43a2:	30 2d       	mov	r19, r0
    43a4:	8b 81       	ldd	r24, Y+3	; 0x03
    43a6:	9c 81       	ldd	r25, Y+4	; 0x04
    43a8:	fc 01       	movw	r30, r24
    43aa:	31 83       	std	Z+1, r19	; 0x01
    43ac:	20 83       	st	Z, r18

	    	        }
	    	    }


	    return Loc_enuAdcStatus;
    43ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    43b0:	0f 90       	pop	r0
    43b2:	0f 90       	pop	r0
    43b4:	0f 90       	pop	r0
    43b6:	0f 90       	pop	r0
    43b8:	df 91       	pop	r29
    43ba:	cf 91       	pop	r28
    43bc:	08 95       	ret

000043be <Adc_SetCallbackFunction>:

Adc_StatusErrorType Adc_SetCallbackFunction(const Adc_PinConfigType* Address_Adc, void (*callback)(u16)){
    43be:	cf 93       	push	r28
    43c0:	df 93       	push	r29
    43c2:	00 d0       	rcall	.+0      	; 0x43c4 <Adc_SetCallbackFunction+0x6>
    43c4:	00 d0       	rcall	.+0      	; 0x43c6 <Adc_SetCallbackFunction+0x8>
    43c6:	1f 92       	push	r1
    43c8:	cd b7       	in	r28, 0x3d	; 61
    43ca:	de b7       	in	r29, 0x3e	; 62
    43cc:	9b 83       	std	Y+3, r25	; 0x03
    43ce:	8a 83       	std	Y+2, r24	; 0x02
    43d0:	7d 83       	std	Y+5, r23	; 0x05
    43d2:	6c 83       	std	Y+4, r22	; 0x04
	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	89 83       	std	Y+1, r24	; 0x01
		    if(NULL == Address_Adc){
    43d8:	8a 81       	ldd	r24, Y+2	; 0x02
    43da:	9b 81       	ldd	r25, Y+3	; 0x03
    43dc:	89 2b       	or	r24, r25
    43de:	19 f4       	brne	.+6      	; 0x43e6 <Adc_SetCallbackFunction+0x28>
		    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    43e0:	82 e0       	ldi	r24, 0x02	; 2
    43e2:	89 83       	std	Y+1, r24	; 0x01
    43e4:	0f c0       	rjmp	.+30     	; 0x4404 <Adc_SetCallbackFunction+0x46>
		    }
		    else{
		    	Adc_InterruptHandlerArr[Address_Adc->channel_number] = callback;
    43e6:	8a 81       	ldd	r24, Y+2	; 0x02
    43e8:	9b 81       	ldd	r25, Y+3	; 0x03
    43ea:	fc 01       	movw	r30, r24
    43ec:	80 81       	ld	r24, Z
    43ee:	88 2f       	mov	r24, r24
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	88 0f       	add	r24, r24
    43f4:	99 1f       	adc	r25, r25
    43f6:	89 50       	subi	r24, 0x09	; 9
    43f8:	9f 4f       	sbci	r25, 0xFF	; 255
    43fa:	2c 81       	ldd	r18, Y+4	; 0x04
    43fc:	3d 81       	ldd	r19, Y+5	; 0x05
    43fe:	fc 01       	movw	r30, r24
    4400:	31 83       	std	Z+1, r19	; 0x01
    4402:	20 83       	st	Z, r18
		    }
		    return Loc_enuAdcStatus;
    4404:	89 81       	ldd	r24, Y+1	; 0x01
}
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	df 91       	pop	r29
    4412:	cf 91       	pop	r28
    4414:	08 95       	ret

00004416 <__vector_16>:

// ISR function For ADC
void __vector_16(void) __attribute__((signal));

void __vector_16(void){
    4416:	1f 92       	push	r1
    4418:	0f 92       	push	r0
    441a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    441e:	0f 92       	push	r0
    4420:	11 24       	eor	r1, r1
    4422:	2f 93       	push	r18
    4424:	3f 93       	push	r19
    4426:	4f 93       	push	r20
    4428:	5f 93       	push	r21
    442a:	6f 93       	push	r22
    442c:	7f 93       	push	r23
    442e:	8f 93       	push	r24
    4430:	9f 93       	push	r25
    4432:	af 93       	push	r26
    4434:	bf 93       	push	r27
    4436:	ef 93       	push	r30
    4438:	ff 93       	push	r31
    443a:	cf 93       	push	r28
    443c:	df 93       	push	r29
    443e:	00 d0       	rcall	.+0      	; 0x4440 <__vector_16+0x2a>
    4440:	1f 92       	push	r1
    4442:	cd b7       	in	r28, 0x3d	; 61
    4444:	de b7       	in	r29, 0x3e	; 62

	    u16 Loc_u16Result;
	    Adc_StatusErrorType Loc_enuAdcStatus  = ADC_STATUS_OK;
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	89 83       	std	Y+1, r24	; 0x01

	    Loc_enuAdcStatus = Adc_GetResult(current_format,&Loc_u16Result);
    444a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <current_format>
    444e:	ce 01       	movw	r24, r28
    4450:	02 96       	adiw	r24, 0x02	; 2
    4452:	bc 01       	movw	r22, r24
    4454:	82 2f       	mov	r24, r18
    4456:	0e 94 95 21 	call	0x432a	; 0x432a <Adc_GetResult>
    445a:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL != Adc_InterruptHandlerArr[Global_AdcInterruptIndex]){
    445c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Global_AdcInterruptIndex>
    4460:	88 2f       	mov	r24, r24
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	88 0f       	add	r24, r24
    4466:	99 1f       	adc	r25, r25
    4468:	89 50       	subi	r24, 0x09	; 9
    446a:	9f 4f       	sbci	r25, 0xFF	; 255
    446c:	fc 01       	movw	r30, r24
    446e:	80 81       	ld	r24, Z
    4470:	91 81       	ldd	r25, Z+1	; 0x01
    4472:	89 2b       	or	r24, r25
    4474:	79 f0       	breq	.+30     	; 0x4494 <__vector_16+0x7e>
	        Adc_InterruptHandlerArr[Global_AdcInterruptIndex](Loc_u16Result);
    4476:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Global_AdcInterruptIndex>
    447a:	88 2f       	mov	r24, r24
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	88 0f       	add	r24, r24
    4480:	99 1f       	adc	r25, r25
    4482:	89 50       	subi	r24, 0x09	; 9
    4484:	9f 4f       	sbci	r25, 0xFF	; 255
    4486:	fc 01       	movw	r30, r24
    4488:	20 81       	ld	r18, Z
    448a:	31 81       	ldd	r19, Z+1	; 0x01
    448c:	8a 81       	ldd	r24, Y+2	; 0x02
    448e:	9b 81       	ldd	r25, Y+3	; 0x03
    4490:	f9 01       	movw	r30, r18
    4492:	09 95       	icall
	    }
	    else {/* do nothing , error in declaration */ }

}
    4494:	00 00       	nop
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	0f 90       	pop	r0
    449c:	df 91       	pop	r29
    449e:	cf 91       	pop	r28
    44a0:	ff 91       	pop	r31
    44a2:	ef 91       	pop	r30
    44a4:	bf 91       	pop	r27
    44a6:	af 91       	pop	r26
    44a8:	9f 91       	pop	r25
    44aa:	8f 91       	pop	r24
    44ac:	7f 91       	pop	r23
    44ae:	6f 91       	pop	r22
    44b0:	5f 91       	pop	r21
    44b2:	4f 91       	pop	r20
    44b4:	3f 91       	pop	r19
    44b6:	2f 91       	pop	r18
    44b8:	0f 90       	pop	r0
    44ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    44be:	0f 90       	pop	r0
    44c0:	1f 90       	pop	r1
    44c2:	18 95       	reti

000044c4 <Tc74_ReadByte>:




/********************************** Software Interfaces Declarations *******************/
Tc74_StatusErrorType Tc74_ReadByte(u8 Copy_u8SlaveAddress,u8* Address_Result){
    44c4:	cf 93       	push	r28
    44c6:	df 93       	push	r29
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
    44cc:	63 97       	sbiw	r28, 0x13	; 19
    44ce:	0f b6       	in	r0, 0x3f	; 63
    44d0:	f8 94       	cli
    44d2:	de bf       	out	0x3e, r29	; 62
    44d4:	0f be       	out	0x3f, r0	; 63
    44d6:	cd bf       	out	0x3d, r28	; 61
    44d8:	89 8b       	std	Y+17, r24	; 0x11
    44da:	7b 8b       	std	Y+19, r23	; 0x13
    44dc:	6a 8b       	std	Y+18, r22	; 0x12
	Tc74_StatusErrorType Loc_enuTc74Status = TC74_STATUS_OK;
    44de:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Temp;
	if(NULL == Address_Result){
    44e0:	8a 89       	ldd	r24, Y+18	; 0x12
    44e2:	9b 89       	ldd	r25, Y+19	; 0x13
    44e4:	89 2b       	or	r24, r25
    44e6:	19 f4       	brne	.+6      	; 0x44ee <Tc74_ReadByte+0x2a>
		Loc_enuTc74Status = TC74_STATUS_NULL_POINTER_ADDRESS;
    44e8:	82 e0       	ldi	r24, 0x02	; 2
    44ea:	89 83       	std	Y+1, r24	; 0x01
    44ec:	8f c0       	rjmp	.+286    	; 0x460c <Tc74_ReadByte+0x148>
	}
	else{
		I2c_enuMasterTransmitStartConditionBlocking();
    44ee:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    44f2:	ce 01       	movw	r24, r28
    44f4:	40 96       	adiw	r24, 0x10	; 16
    44f6:	bc 01       	movw	r22, r24
    44f8:	89 89       	ldd	r24, Y+17	; 0x11
    44fa:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(TC74_REG_READ_ADDRESS, &Loc_u8Temp);
    44fe:	ce 01       	movw	r24, r28
    4500:	40 96       	adiw	r24, 0x10	; 16
    4502:	bc 01       	movw	r22, r24
    4504:	80 e0       	ldi	r24, 0x00	; 0
    4506:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    450a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    450e:	ce 01       	movw	r24, r28
    4510:	40 96       	adiw	r24, 0x10	; 16
    4512:	bc 01       	movw	r22, r24
    4514:	89 89       	ldd	r24, Y+17	; 0x11
    4516:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(Address_Result,I2c_NACK_VALUE);
    451a:	8a 89       	ldd	r24, Y+18	; 0x12
    451c:	9b 89       	ldd	r25, Y+19	; 0x13
    451e:	60 e0       	ldi	r22, 0x00	; 0
    4520:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    4524:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	a0 e8       	ldi	r26, 0x80	; 128
    452e:	bf e3       	ldi	r27, 0x3F	; 63
    4530:	8a 83       	std	Y+2, r24	; 0x02
    4532:	9b 83       	std	Y+3, r25	; 0x03
    4534:	ac 83       	std	Y+4, r26	; 0x04
    4536:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	4a e7       	ldi	r20, 0x7A	; 122
    453e:	55 e4       	ldi	r21, 0x45	; 69
    4540:	6a 81       	ldd	r22, Y+2	; 0x02
    4542:	7b 81       	ldd	r23, Y+3	; 0x03
    4544:	8c 81       	ldd	r24, Y+4	; 0x04
    4546:	9d 81       	ldd	r25, Y+5	; 0x05
    4548:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    454c:	dc 01       	movw	r26, r24
    454e:	cb 01       	movw	r24, r22
    4550:	8e 83       	std	Y+6, r24	; 0x06
    4552:	9f 83       	std	Y+7, r25	; 0x07
    4554:	a8 87       	std	Y+8, r26	; 0x08
    4556:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	40 e8       	ldi	r20, 0x80	; 128
    455e:	5f e3       	ldi	r21, 0x3F	; 63
    4560:	6e 81       	ldd	r22, Y+6	; 0x06
    4562:	7f 81       	ldd	r23, Y+7	; 0x07
    4564:	88 85       	ldd	r24, Y+8	; 0x08
    4566:	99 85       	ldd	r25, Y+9	; 0x09
    4568:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    456c:	88 23       	and	r24, r24
    456e:	2c f4       	brge	.+10     	; 0x457a <Tc74_ReadByte+0xb6>
		__ticks = 1;
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	9b 87       	std	Y+11, r25	; 0x0b
    4576:	8a 87       	std	Y+10, r24	; 0x0a
    4578:	3f c0       	rjmp	.+126    	; 0x45f8 <Tc74_ReadByte+0x134>
	else if (__tmp > 65535)
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	3f ef       	ldi	r19, 0xFF	; 255
    457e:	4f e7       	ldi	r20, 0x7F	; 127
    4580:	57 e4       	ldi	r21, 0x47	; 71
    4582:	6e 81       	ldd	r22, Y+6	; 0x06
    4584:	7f 81       	ldd	r23, Y+7	; 0x07
    4586:	88 85       	ldd	r24, Y+8	; 0x08
    4588:	99 85       	ldd	r25, Y+9	; 0x09
    458a:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    458e:	18 16       	cp	r1, r24
    4590:	4c f5       	brge	.+82     	; 0x45e4 <Tc74_ReadByte+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	40 e2       	ldi	r20, 0x20	; 32
    4598:	51 e4       	ldi	r21, 0x41	; 65
    459a:	6a 81       	ldd	r22, Y+2	; 0x02
    459c:	7b 81       	ldd	r23, Y+3	; 0x03
    459e:	8c 81       	ldd	r24, Y+4	; 0x04
    45a0:	9d 81       	ldd	r25, Y+5	; 0x05
    45a2:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    45a6:	dc 01       	movw	r26, r24
    45a8:	cb 01       	movw	r24, r22
    45aa:	bc 01       	movw	r22, r24
    45ac:	cd 01       	movw	r24, r26
    45ae:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    45b2:	dc 01       	movw	r26, r24
    45b4:	cb 01       	movw	r24, r22
    45b6:	9b 87       	std	Y+11, r25	; 0x0b
    45b8:	8a 87       	std	Y+10, r24	; 0x0a
    45ba:	0f c0       	rjmp	.+30     	; 0x45da <Tc74_ReadByte+0x116>
    45bc:	80 e9       	ldi	r24, 0x90	; 144
    45be:	91 e0       	ldi	r25, 0x01	; 1
    45c0:	9d 87       	std	Y+13, r25	; 0x0d
    45c2:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    45c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    45c8:	01 97       	sbiw	r24, 0x01	; 1
    45ca:	f1 f7       	brne	.-4      	; 0x45c8 <Tc74_ReadByte+0x104>
    45cc:	9d 87       	std	Y+13, r25	; 0x0d
    45ce:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    45d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    45d4:	01 97       	sbiw	r24, 0x01	; 1
    45d6:	9b 87       	std	Y+11, r25	; 0x0b
    45d8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45da:	8a 85       	ldd	r24, Y+10	; 0x0a
    45dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    45de:	89 2b       	or	r24, r25
    45e0:	69 f7       	brne	.-38     	; 0x45bc <Tc74_ReadByte+0xf8>
    45e2:	14 c0       	rjmp	.+40     	; 0x460c <Tc74_ReadByte+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e4:	6e 81       	ldd	r22, Y+6	; 0x06
    45e6:	7f 81       	ldd	r23, Y+7	; 0x07
    45e8:	88 85       	ldd	r24, Y+8	; 0x08
    45ea:	99 85       	ldd	r25, Y+9	; 0x09
    45ec:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    45f0:	dc 01       	movw	r26, r24
    45f2:	cb 01       	movw	r24, r22
    45f4:	9b 87       	std	Y+11, r25	; 0x0b
    45f6:	8a 87       	std	Y+10, r24	; 0x0a
    45f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    45fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    45fc:	9f 87       	std	Y+15, r25	; 0x0f
    45fe:	8e 87       	std	Y+14, r24	; 0x0e
    4600:	8e 85       	ldd	r24, Y+14	; 0x0e
    4602:	9f 85       	ldd	r25, Y+15	; 0x0f
    4604:	01 97       	sbiw	r24, 0x01	; 1
    4606:	f1 f7       	brne	.-4      	; 0x4604 <Tc74_ReadByte+0x140>
    4608:	9f 87       	std	Y+15, r25	; 0x0f
    460a:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(1);
	}

	return Loc_enuTc74Status;
    460c:	89 81       	ldd	r24, Y+1	; 0x01
}
    460e:	63 96       	adiw	r28, 0x13	; 19
    4610:	0f b6       	in	r0, 0x3f	; 63
    4612:	f8 94       	cli
    4614:	de bf       	out	0x3e, r29	; 62
    4616:	0f be       	out	0x3f, r0	; 63
    4618:	cd bf       	out	0x3d, r28	; 61
    461a:	df 91       	pop	r29
    461c:	cf 91       	pop	r28
    461e:	08 95       	ret

00004620 <Seven_Segment_WriteBCDConnection>:



/********************************** Software Interfaces Declarations *******************/

Seven_Segment_StatusErrorType  Seven_Segment_WriteBCDConnection(const Seven_Segment_BCDType* Address_Segment, u8 Copy_u8Value){
    4620:	cf 93       	push	r28
    4622:	df 93       	push	r29
    4624:	cd b7       	in	r28, 0x3d	; 61
    4626:	de b7       	in	r29, 0x3e	; 62
    4628:	27 97       	sbiw	r28, 0x07	; 7
    462a:	0f b6       	in	r0, 0x3f	; 63
    462c:	f8 94       	cli
    462e:	de bf       	out	0x3e, r29	; 62
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	cd bf       	out	0x3d, r28	; 61
    4634:	9e 83       	std	Y+6, r25	; 0x06
    4636:	8d 83       	std	Y+5, r24	; 0x05
    4638:	6f 83       	std	Y+7, r22	; 0x07

	Seven_Segment_StatusErrorType Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_OK;
    463a:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    463c:	1b 82       	std	Y+3, r1	; 0x03
	    u8 Loc_u8FinalBit = DIO_LOW;
    463e:	1c 82       	std	Y+4, r1	; 0x04
	    u8 Loc_u8Counter=ZERO_VALUE;
    4640:	1a 82       	std	Y+2, r1	; 0x02

	    if (NULL == Address_Segment  ){
    4642:	8d 81       	ldd	r24, Y+5	; 0x05
    4644:	9e 81       	ldd	r25, Y+6	; 0x06
    4646:	89 2b       	or	r24, r25
    4648:	19 f4       	brne	.+6      	; 0x4650 <Seven_Segment_WriteBCDConnection+0x30>

	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
    464a:	82 e0       	ldi	r24, 0x02	; 2
    464c:	89 83       	std	Y+1, r24	; 0x01
    464e:	22 c0       	rjmp	.+68     	; 0x4694 <Seven_Segment_WriteBCDConnection+0x74>
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    4650:	1a 82       	std	Y+2, r1	; 0x02
    4652:	1d c0       	rjmp	.+58     	; 0x468e <Seven_Segment_WriteBCDConnection+0x6e>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
    4654:	8f 81       	ldd	r24, Y+7	; 0x07
    4656:	88 2f       	mov	r24, r24
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	2a 81       	ldd	r18, Y+2	; 0x02
    465c:	22 2f       	mov	r18, r18
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <Seven_Segment_WriteBCDConnection+0x46>
    4662:	95 95       	asr	r25
    4664:	87 95       	ror	r24
    4666:	2a 95       	dec	r18
    4668:	e2 f7       	brpl	.-8      	; 0x4662 <Seven_Segment_WriteBCDConnection+0x42>
    466a:	81 70       	andi	r24, 0x01	; 1
    466c:	8c 83       	std	Y+4, r24	; 0x04
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
    466e:	8a 81       	ldd	r24, Y+2	; 0x02
    4670:	88 2f       	mov	r24, r24
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	2d 81       	ldd	r18, Y+5	; 0x05
    4676:	3e 81       	ldd	r19, Y+6	; 0x06
    4678:	82 0f       	add	r24, r18
    467a:	93 1f       	adc	r25, r19
    467c:	fc 01       	movw	r30, r24
    467e:	80 81       	ld	r24, Z
    4680:	6c 81       	ldd	r22, Y+4	; 0x04
    4682:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    4686:	8b 83       	std	Y+3, r24	; 0x03
	    	Loc_enuSegmentState = SEVEN_SEGMENT_STATUS_NULL_POINTER_ADDRESS;
	    }

	    else{

	        for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<4;Loc_u8Counter++){
    4688:	8a 81       	ldd	r24, Y+2	; 0x02
    468a:	8f 5f       	subi	r24, 0xFF	; 255
    468c:	8a 83       	std	Y+2, r24	; 0x02
    468e:	8a 81       	ldd	r24, Y+2	; 0x02
    4690:	84 30       	cpi	r24, 0x04	; 4
    4692:	00 f3       	brcs	.-64     	; 0x4654 <Seven_Segment_WriteBCDConnection+0x34>
	        	Loc_u8FinalBit = (Copy_u8Value>>Loc_u8Counter)& (ONE_VALUE);
	        	Loc_enuDioState= Dio_enuWriteChannel(Address_Segment->seven_segment_pins[Loc_u8Counter], Loc_u8FinalBit );
	        }
	    }

	    return Loc_enuSegmentState;
    4694:	89 81       	ldd	r24, Y+1	; 0x01

}
    4696:	27 96       	adiw	r28, 0x07	; 7
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	f8 94       	cli
    469c:	de bf       	out	0x3e, r29	; 62
    469e:	0f be       	out	0x3f, r0	; 63
    46a0:	cd bf       	out	0x3d, r28	; 61
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	08 95       	ret

000046a8 <Servo_enuInitTimer1>:
extern Timer1_ConfigType Timer1;


/********************************** Software Interfaces Declarations *******************/

Servo_StatusErrorType Servo_enuInitTimer1(void){
    46a8:	cf 93       	push	r28
    46aa:	df 93       	push	r29
    46ac:	1f 92       	push	r1
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62

	Servo_StatusErrorType Loc_enuServoStatusError = SERVO_STATUS_OK;
    46b2:	19 82       	std	Y+1, r1	; 0x01
	Timer1_enuInit(&Timer1);
    46b4:	80 e9       	ldi	r24, 0x90	; 144
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Timer1_enuInit>
	Timer1_enuSetValueIcu(311);
    46bc:	87 e3       	ldi	r24, 0x37	; 55
    46be:	91 e0       	ldi	r25, 0x01	; 1
    46c0:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <Timer1_enuSetValueIcu>
	Timer1_enuSetValueCompareChannelB(ZERO_VALUE);
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <Timer1_enuSetValueCompareChannelB>


	return Loc_enuServoStatusError;
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    46ce:	0f 90       	pop	r0
    46d0:	df 91       	pop	r29
    46d2:	cf 91       	pop	r28
    46d4:	08 95       	ret

000046d6 <Servo_enuSetAngle>:
Servo_StatusErrorType Servo_enuSetAngle(u8 Copy_u8Angle){
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	00 d0       	rcall	.+0      	; 0x46dc <Servo_enuSetAngle+0x6>
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	8a 83       	std	Y+2, r24	; 0x02

	Servo_StatusErrorType Loc_enuServoStatusError = SERVO_STATUS_OK;
    46e2:	19 82       	std	Y+1, r1	; 0x01
	Copy_u8Angle = (Copy_u8Angle>180)? 180 : Copy_u8Angle;
    46e4:	8a 81       	ldd	r24, Y+2	; 0x02
    46e6:	85 3b       	cpi	r24, 0xB5	; 181
    46e8:	08 f0       	brcs	.+2      	; 0x46ec <Servo_enuSetAngle+0x16>
    46ea:	84 eb       	ldi	r24, 0xB4	; 180
    46ec:	8a 83       	std	Y+2, r24	; 0x02
	 * time = (1ms/180)*a + b
	 * time = ticks* 1024/16M = (1ms/180)*a + b
	 * ticks = (25/288)*angle + (125/8)
	 *
	 */
	Timer1_enuSetValueCompareChannelB((u16)(Copy_u8Angle*25/288.0+(125/8.0)));
    46ee:	8a 81       	ldd	r24, Y+2	; 0x02
    46f0:	28 2f       	mov	r18, r24
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	49 e1       	ldi	r20, 0x19	; 25
    46f6:	42 9f       	mul	r20, r18
    46f8:	c0 01       	movw	r24, r0
    46fa:	43 9f       	mul	r20, r19
    46fc:	90 0d       	add	r25, r0
    46fe:	11 24       	eor	r1, r1
    4700:	09 2e       	mov	r0, r25
    4702:	00 0c       	add	r0, r0
    4704:	aa 0b       	sbc	r26, r26
    4706:	bb 0b       	sbc	r27, r27
    4708:	bc 01       	movw	r22, r24
    470a:	cd 01       	movw	r24, r26
    470c:	0e 94 17 38 	call	0x702e	; 0x702e <__floatsisf>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	40 e9       	ldi	r20, 0x90	; 144
    471a:	53 e4       	ldi	r21, 0x43	; 67
    471c:	bc 01       	movw	r22, r24
    471e:	cd 01       	movw	r24, r26
    4720:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	4a e7       	ldi	r20, 0x7A	; 122
    472e:	51 e4       	ldi	r21, 0x41	; 65
    4730:	bc 01       	movw	r22, r24
    4732:	cd 01       	movw	r24, r26
    4734:	0e 94 fc 36 	call	0x6df8	; 0x6df8 <__addsf3>
    4738:	dc 01       	movw	r26, r24
    473a:	cb 01       	movw	r24, r22
    473c:	bc 01       	movw	r22, r24
    473e:	cd 01       	movw	r24, r26
    4740:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <Timer1_enuSetValueCompareChannelB>


	return Loc_enuServoStatusError;
    474c:	89 81       	ldd	r24, Y+1	; 0x01
}
    474e:	0f 90       	pop	r0
    4750:	0f 90       	pop	r0
    4752:	df 91       	pop	r29
    4754:	cf 91       	pop	r28
    4756:	08 95       	ret

00004758 <Rtc_enuGetSecond>:



/********************************** Software Interfaces Declarations *******************/

Rtc_StatusErrorType Rtc_enuGetSecond(u8* Address_Result){
    4758:	cf 93       	push	r28
    475a:	df 93       	push	r29
    475c:	cd b7       	in	r28, 0x3d	; 61
    475e:	de b7       	in	r29, 0x3e	; 62
    4760:	63 97       	sbiw	r28, 0x13	; 19
    4762:	0f b6       	in	r0, 0x3f	; 63
    4764:	f8 94       	cli
    4766:	de bf       	out	0x3e, r29	; 62
    4768:	0f be       	out	0x3f, r0	; 63
    476a:	cd bf       	out	0x3d, r28	; 61
    476c:	9b 8b       	std	Y+19, r25	; 0x13
    476e:	8a 8b       	std	Y+18, r24	; 0x12

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    4770:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    4772:	8a 89       	ldd	r24, Y+18	; 0x12
    4774:	9b 89       	ldd	r25, Y+19	; 0x13
    4776:	89 2b       	or	r24, r25
    4778:	19 f4       	brne	.+6      	; 0x4780 <Rtc_enuGetSecond+0x28>
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	89 83       	std	Y+1, r24	; 0x01
    477e:	96 c0       	rjmp	.+300    	; 0x48ac <Rtc_enuGetSecond+0x154>
	}
	else{

		I2c_enuMasterTransmitStartConditionBlocking();
    4780:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4784:	ce 01       	movw	r24, r28
    4786:	40 96       	adiw	r24, 0x10	; 16
    4788:	bc 01       	movw	r22, r24
    478a:	88 e6       	ldi	r24, 0x68	; 104
    478c:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_SECOND_REG_ADDRESS, &Loc_u8Temp);
    4790:	ce 01       	movw	r24, r28
    4792:	40 96       	adiw	r24, 0x10	; 16
    4794:	bc 01       	movw	r22, r24
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    479c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    47a0:	ce 01       	movw	r24, r28
    47a2:	40 96       	adiw	r24, 0x10	; 16
    47a4:	bc 01       	movw	r22, r24
    47a6:	88 e6       	ldi	r24, 0x68	; 104
    47a8:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    47ac:	ce 01       	movw	r24, r28
    47ae:	41 96       	adiw	r24, 0x11	; 17
    47b0:	60 e0       	ldi	r22, 0x00	; 0
    47b2:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    47b6:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    47ba:	29 89       	ldd	r18, Y+17	; 0x11
    47bc:	8a 89       	ldd	r24, Y+18	; 0x12
    47be:	9b 89       	ldd	r25, Y+19	; 0x13
    47c0:	bc 01       	movw	r22, r24
    47c2:	82 2f       	mov	r24, r18
    47c4:	0e 94 11 05 	call	0xa22	; 0xa22 <Convert_BCDToInt>
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	a0 e8       	ldi	r26, 0x80	; 128
    47ce:	bf e3       	ldi	r27, 0x3F	; 63
    47d0:	8a 83       	std	Y+2, r24	; 0x02
    47d2:	9b 83       	std	Y+3, r25	; 0x03
    47d4:	ac 83       	std	Y+4, r26	; 0x04
    47d6:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	4a e7       	ldi	r20, 0x7A	; 122
    47de:	55 e4       	ldi	r21, 0x45	; 69
    47e0:	6a 81       	ldd	r22, Y+2	; 0x02
    47e2:	7b 81       	ldd	r23, Y+3	; 0x03
    47e4:	8c 81       	ldd	r24, Y+4	; 0x04
    47e6:	9d 81       	ldd	r25, Y+5	; 0x05
    47e8:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    47ec:	dc 01       	movw	r26, r24
    47ee:	cb 01       	movw	r24, r22
    47f0:	8e 83       	std	Y+6, r24	; 0x06
    47f2:	9f 83       	std	Y+7, r25	; 0x07
    47f4:	a8 87       	std	Y+8, r26	; 0x08
    47f6:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	40 e8       	ldi	r20, 0x80	; 128
    47fe:	5f e3       	ldi	r21, 0x3F	; 63
    4800:	6e 81       	ldd	r22, Y+6	; 0x06
    4802:	7f 81       	ldd	r23, Y+7	; 0x07
    4804:	88 85       	ldd	r24, Y+8	; 0x08
    4806:	99 85       	ldd	r25, Y+9	; 0x09
    4808:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    480c:	88 23       	and	r24, r24
    480e:	2c f4       	brge	.+10     	; 0x481a <Rtc_enuGetSecond+0xc2>
		__ticks = 1;
    4810:	81 e0       	ldi	r24, 0x01	; 1
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	9b 87       	std	Y+11, r25	; 0x0b
    4816:	8a 87       	std	Y+10, r24	; 0x0a
    4818:	3f c0       	rjmp	.+126    	; 0x4898 <Rtc_enuGetSecond+0x140>
	else if (__tmp > 65535)
    481a:	20 e0       	ldi	r18, 0x00	; 0
    481c:	3f ef       	ldi	r19, 0xFF	; 255
    481e:	4f e7       	ldi	r20, 0x7F	; 127
    4820:	57 e4       	ldi	r21, 0x47	; 71
    4822:	6e 81       	ldd	r22, Y+6	; 0x06
    4824:	7f 81       	ldd	r23, Y+7	; 0x07
    4826:	88 85       	ldd	r24, Y+8	; 0x08
    4828:	99 85       	ldd	r25, Y+9	; 0x09
    482a:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    482e:	18 16       	cp	r1, r24
    4830:	4c f5       	brge	.+82     	; 0x4884 <Rtc_enuGetSecond+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	30 e0       	ldi	r19, 0x00	; 0
    4836:	40 e2       	ldi	r20, 0x20	; 32
    4838:	51 e4       	ldi	r21, 0x41	; 65
    483a:	6a 81       	ldd	r22, Y+2	; 0x02
    483c:	7b 81       	ldd	r23, Y+3	; 0x03
    483e:	8c 81       	ldd	r24, Y+4	; 0x04
    4840:	9d 81       	ldd	r25, Y+5	; 0x05
    4842:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	bc 01       	movw	r22, r24
    484c:	cd 01       	movw	r24, r26
    484e:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	9b 87       	std	Y+11, r25	; 0x0b
    4858:	8a 87       	std	Y+10, r24	; 0x0a
    485a:	0f c0       	rjmp	.+30     	; 0x487a <Rtc_enuGetSecond+0x122>
    485c:	80 e9       	ldi	r24, 0x90	; 144
    485e:	91 e0       	ldi	r25, 0x01	; 1
    4860:	9d 87       	std	Y+13, r25	; 0x0d
    4862:	8c 87       	std	Y+12, r24	; 0x0c
    4864:	8c 85       	ldd	r24, Y+12	; 0x0c
    4866:	9d 85       	ldd	r25, Y+13	; 0x0d
    4868:	01 97       	sbiw	r24, 0x01	; 1
    486a:	f1 f7       	brne	.-4      	; 0x4868 <Rtc_enuGetSecond+0x110>
    486c:	9d 87       	std	Y+13, r25	; 0x0d
    486e:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4870:	8a 85       	ldd	r24, Y+10	; 0x0a
    4872:	9b 85       	ldd	r25, Y+11	; 0x0b
    4874:	01 97       	sbiw	r24, 0x01	; 1
    4876:	9b 87       	std	Y+11, r25	; 0x0b
    4878:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    487a:	8a 85       	ldd	r24, Y+10	; 0x0a
    487c:	9b 85       	ldd	r25, Y+11	; 0x0b
    487e:	89 2b       	or	r24, r25
    4880:	69 f7       	brne	.-38     	; 0x485c <Rtc_enuGetSecond+0x104>
    4882:	14 c0       	rjmp	.+40     	; 0x48ac <Rtc_enuGetSecond+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4884:	6e 81       	ldd	r22, Y+6	; 0x06
    4886:	7f 81       	ldd	r23, Y+7	; 0x07
    4888:	88 85       	ldd	r24, Y+8	; 0x08
    488a:	99 85       	ldd	r25, Y+9	; 0x09
    488c:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	9b 87       	std	Y+11, r25	; 0x0b
    4896:	8a 87       	std	Y+10, r24	; 0x0a
    4898:	8a 85       	ldd	r24, Y+10	; 0x0a
    489a:	9b 85       	ldd	r25, Y+11	; 0x0b
    489c:	9f 87       	std	Y+15, r25	; 0x0f
    489e:	8e 87       	std	Y+14, r24	; 0x0e
    48a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    48a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    48a4:	01 97       	sbiw	r24, 0x01	; 1
    48a6:	f1 f7       	brne	.-4      	; 0x48a4 <Rtc_enuGetSecond+0x14c>
    48a8:	9f 87       	std	Y+15, r25	; 0x0f
    48aa:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
    48ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    48ae:	63 96       	adiw	r28, 0x13	; 19
    48b0:	0f b6       	in	r0, 0x3f	; 63
    48b2:	f8 94       	cli
    48b4:	de bf       	out	0x3e, r29	; 62
    48b6:	0f be       	out	0x3f, r0	; 63
    48b8:	cd bf       	out	0x3d, r28	; 61
    48ba:	df 91       	pop	r29
    48bc:	cf 91       	pop	r28
    48be:	08 95       	ret

000048c0 <Rtc_enuGetMinute>:

Rtc_StatusErrorType Rtc_enuGetMinute(u8* Address_Result){
    48c0:	cf 93       	push	r28
    48c2:	df 93       	push	r29
    48c4:	cd b7       	in	r28, 0x3d	; 61
    48c6:	de b7       	in	r29, 0x3e	; 62
    48c8:	63 97       	sbiw	r28, 0x13	; 19
    48ca:	0f b6       	in	r0, 0x3f	; 63
    48cc:	f8 94       	cli
    48ce:	de bf       	out	0x3e, r29	; 62
    48d0:	0f be       	out	0x3f, r0	; 63
    48d2:	cd bf       	out	0x3d, r28	; 61
    48d4:	9b 8b       	std	Y+19, r25	; 0x13
    48d6:	8a 8b       	std	Y+18, r24	; 0x12

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    48d8:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    48da:	8a 89       	ldd	r24, Y+18	; 0x12
    48dc:	9b 89       	ldd	r25, Y+19	; 0x13
    48de:	89 2b       	or	r24, r25
    48e0:	19 f4       	brne	.+6      	; 0x48e8 <Rtc_enuGetMinute+0x28>
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    48e2:	81 e0       	ldi	r24, 0x01	; 1
    48e4:	89 83       	std	Y+1, r24	; 0x01
    48e6:	96 c0       	rjmp	.+300    	; 0x4a14 <Rtc_enuGetMinute+0x154>
	}
	else{

		I2c_enuMasterTransmitStartConditionBlocking();
    48e8:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    48ec:	ce 01       	movw	r24, r28
    48ee:	40 96       	adiw	r24, 0x10	; 16
    48f0:	bc 01       	movw	r22, r24
    48f2:	88 e6       	ldi	r24, 0x68	; 104
    48f4:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_MINUTE_REG_ADDRESS, &Loc_u8Temp);
    48f8:	ce 01       	movw	r24, r28
    48fa:	40 96       	adiw	r24, 0x10	; 16
    48fc:	bc 01       	movw	r22, r24
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    4904:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4908:	ce 01       	movw	r24, r28
    490a:	40 96       	adiw	r24, 0x10	; 16
    490c:	bc 01       	movw	r22, r24
    490e:	88 e6       	ldi	r24, 0x68	; 104
    4910:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    4914:	ce 01       	movw	r24, r28
    4916:	41 96       	adiw	r24, 0x11	; 17
    4918:	60 e0       	ldi	r22, 0x00	; 0
    491a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    491e:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    4922:	29 89       	ldd	r18, Y+17	; 0x11
    4924:	8a 89       	ldd	r24, Y+18	; 0x12
    4926:	9b 89       	ldd	r25, Y+19	; 0x13
    4928:	bc 01       	movw	r22, r24
    492a:	82 2f       	mov	r24, r18
    492c:	0e 94 11 05 	call	0xa22	; 0xa22 <Convert_BCDToInt>
    4930:	80 e0       	ldi	r24, 0x00	; 0
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	a0 e8       	ldi	r26, 0x80	; 128
    4936:	bf e3       	ldi	r27, 0x3F	; 63
    4938:	8a 83       	std	Y+2, r24	; 0x02
    493a:	9b 83       	std	Y+3, r25	; 0x03
    493c:	ac 83       	std	Y+4, r26	; 0x04
    493e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	4a e7       	ldi	r20, 0x7A	; 122
    4946:	55 e4       	ldi	r21, 0x45	; 69
    4948:	6a 81       	ldd	r22, Y+2	; 0x02
    494a:	7b 81       	ldd	r23, Y+3	; 0x03
    494c:	8c 81       	ldd	r24, Y+4	; 0x04
    494e:	9d 81       	ldd	r25, Y+5	; 0x05
    4950:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	8e 83       	std	Y+6, r24	; 0x06
    495a:	9f 83       	std	Y+7, r25	; 0x07
    495c:	a8 87       	std	Y+8, r26	; 0x08
    495e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	40 e8       	ldi	r20, 0x80	; 128
    4966:	5f e3       	ldi	r21, 0x3F	; 63
    4968:	6e 81       	ldd	r22, Y+6	; 0x06
    496a:	7f 81       	ldd	r23, Y+7	; 0x07
    496c:	88 85       	ldd	r24, Y+8	; 0x08
    496e:	99 85       	ldd	r25, Y+9	; 0x09
    4970:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    4974:	88 23       	and	r24, r24
    4976:	2c f4       	brge	.+10     	; 0x4982 <Rtc_enuGetMinute+0xc2>
		__ticks = 1;
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	9b 87       	std	Y+11, r25	; 0x0b
    497e:	8a 87       	std	Y+10, r24	; 0x0a
    4980:	3f c0       	rjmp	.+126    	; 0x4a00 <Rtc_enuGetMinute+0x140>
	else if (__tmp > 65535)
    4982:	20 e0       	ldi	r18, 0x00	; 0
    4984:	3f ef       	ldi	r19, 0xFF	; 255
    4986:	4f e7       	ldi	r20, 0x7F	; 127
    4988:	57 e4       	ldi	r21, 0x47	; 71
    498a:	6e 81       	ldd	r22, Y+6	; 0x06
    498c:	7f 81       	ldd	r23, Y+7	; 0x07
    498e:	88 85       	ldd	r24, Y+8	; 0x08
    4990:	99 85       	ldd	r25, Y+9	; 0x09
    4992:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    4996:	18 16       	cp	r1, r24
    4998:	4c f5       	brge	.+82     	; 0x49ec <Rtc_enuGetMinute+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    499a:	20 e0       	ldi	r18, 0x00	; 0
    499c:	30 e0       	ldi	r19, 0x00	; 0
    499e:	40 e2       	ldi	r20, 0x20	; 32
    49a0:	51 e4       	ldi	r21, 0x41	; 65
    49a2:	6a 81       	ldd	r22, Y+2	; 0x02
    49a4:	7b 81       	ldd	r23, Y+3	; 0x03
    49a6:	8c 81       	ldd	r24, Y+4	; 0x04
    49a8:	9d 81       	ldd	r25, Y+5	; 0x05
    49aa:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	bc 01       	movw	r22, r24
    49b4:	cd 01       	movw	r24, r26
    49b6:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    49ba:	dc 01       	movw	r26, r24
    49bc:	cb 01       	movw	r24, r22
    49be:	9b 87       	std	Y+11, r25	; 0x0b
    49c0:	8a 87       	std	Y+10, r24	; 0x0a
    49c2:	0f c0       	rjmp	.+30     	; 0x49e2 <Rtc_enuGetMinute+0x122>
    49c4:	80 e9       	ldi	r24, 0x90	; 144
    49c6:	91 e0       	ldi	r25, 0x01	; 1
    49c8:	9d 87       	std	Y+13, r25	; 0x0d
    49ca:	8c 87       	std	Y+12, r24	; 0x0c
    49cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    49ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	f1 f7       	brne	.-4      	; 0x49d0 <Rtc_enuGetMinute+0x110>
    49d4:	9d 87       	std	Y+13, r25	; 0x0d
    49d6:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    49da:	9b 85       	ldd	r25, Y+11	; 0x0b
    49dc:	01 97       	sbiw	r24, 0x01	; 1
    49de:	9b 87       	std	Y+11, r25	; 0x0b
    49e0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    49e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    49e6:	89 2b       	or	r24, r25
    49e8:	69 f7       	brne	.-38     	; 0x49c4 <Rtc_enuGetMinute+0x104>
    49ea:	14 c0       	rjmp	.+40     	; 0x4a14 <Rtc_enuGetMinute+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ec:	6e 81       	ldd	r22, Y+6	; 0x06
    49ee:	7f 81       	ldd	r23, Y+7	; 0x07
    49f0:	88 85       	ldd	r24, Y+8	; 0x08
    49f2:	99 85       	ldd	r25, Y+9	; 0x09
    49f4:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	9b 87       	std	Y+11, r25	; 0x0b
    49fe:	8a 87       	std	Y+10, r24	; 0x0a
    4a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a02:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a04:	9f 87       	std	Y+15, r25	; 0x0f
    4a06:	8e 87       	std	Y+14, r24	; 0x0e
    4a08:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a0c:	01 97       	sbiw	r24, 0x01	; 1
    4a0e:	f1 f7       	brne	.-4      	; 0x4a0c <Rtc_enuGetMinute+0x14c>
    4a10:	9f 87       	std	Y+15, r25	; 0x0f
    4a12:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
    4a14:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a16:	63 96       	adiw	r28, 0x13	; 19
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	f8 94       	cli
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	0f be       	out	0x3f, r0	; 63
    4a20:	cd bf       	out	0x3d, r28	; 61
    4a22:	df 91       	pop	r29
    4a24:	cf 91       	pop	r28
    4a26:	08 95       	ret

00004a28 <Rtc_enuGetHour>:
Rtc_StatusErrorType Rtc_enuGetHour(u8* Address_Result){
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62
    4a30:	63 97       	sbiw	r28, 0x13	; 19
    4a32:	0f b6       	in	r0, 0x3f	; 63
    4a34:	f8 94       	cli
    4a36:	de bf       	out	0x3e, r29	; 62
    4a38:	0f be       	out	0x3f, r0	; 63
    4a3a:	cd bf       	out	0x3d, r28	; 61
    4a3c:	9b 8b       	std	Y+19, r25	; 0x13
    4a3e:	8a 8b       	std	Y+18, r24	; 0x12

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    4a40:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    4a42:	8a 89       	ldd	r24, Y+18	; 0x12
    4a44:	9b 89       	ldd	r25, Y+19	; 0x13
    4a46:	89 2b       	or	r24, r25
    4a48:	19 f4       	brne	.+6      	; 0x4a50 <Rtc_enuGetHour+0x28>
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	89 83       	std	Y+1, r24	; 0x01
    4a4e:	96 c0       	rjmp	.+300    	; 0x4b7c <Rtc_enuGetHour+0x154>
	}
	else{
		I2c_enuMasterTransmitStartConditionBlocking();
    4a50:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4a54:	ce 01       	movw	r24, r28
    4a56:	40 96       	adiw	r24, 0x10	; 16
    4a58:	bc 01       	movw	r22, r24
    4a5a:	88 e6       	ldi	r24, 0x68	; 104
    4a5c:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_HOUR_REG_ADDRESS, &Loc_u8Temp);
    4a60:	ce 01       	movw	r24, r28
    4a62:	40 96       	adiw	r24, 0x10	; 16
    4a64:	bc 01       	movw	r22, r24
    4a66:	82 e0       	ldi	r24, 0x02	; 2
    4a68:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    4a6c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4a70:	ce 01       	movw	r24, r28
    4a72:	40 96       	adiw	r24, 0x10	; 16
    4a74:	bc 01       	movw	r22, r24
    4a76:	88 e6       	ldi	r24, 0x68	; 104
    4a78:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    4a7c:	ce 01       	movw	r24, r28
    4a7e:	41 96       	adiw	r24, 0x11	; 17
    4a80:	60 e0       	ldi	r22, 0x00	; 0
    4a82:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    4a86:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    4a8a:	29 89       	ldd	r18, Y+17	; 0x11
    4a8c:	8a 89       	ldd	r24, Y+18	; 0x12
    4a8e:	9b 89       	ldd	r25, Y+19	; 0x13
    4a90:	bc 01       	movw	r22, r24
    4a92:	82 2f       	mov	r24, r18
    4a94:	0e 94 11 05 	call	0xa22	; 0xa22 <Convert_BCDToInt>
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	a0 e8       	ldi	r26, 0x80	; 128
    4a9e:	bf e3       	ldi	r27, 0x3F	; 63
    4aa0:	8a 83       	std	Y+2, r24	; 0x02
    4aa2:	9b 83       	std	Y+3, r25	; 0x03
    4aa4:	ac 83       	std	Y+4, r26	; 0x04
    4aa6:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	4a e7       	ldi	r20, 0x7A	; 122
    4aae:	55 e4       	ldi	r21, 0x45	; 69
    4ab0:	6a 81       	ldd	r22, Y+2	; 0x02
    4ab2:	7b 81       	ldd	r23, Y+3	; 0x03
    4ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ab8:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	8e 83       	std	Y+6, r24	; 0x06
    4ac2:	9f 83       	std	Y+7, r25	; 0x07
    4ac4:	a8 87       	std	Y+8, r26	; 0x08
    4ac6:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    4ac8:	20 e0       	ldi	r18, 0x00	; 0
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	40 e8       	ldi	r20, 0x80	; 128
    4ace:	5f e3       	ldi	r21, 0x3F	; 63
    4ad0:	6e 81       	ldd	r22, Y+6	; 0x06
    4ad2:	7f 81       	ldd	r23, Y+7	; 0x07
    4ad4:	88 85       	ldd	r24, Y+8	; 0x08
    4ad6:	99 85       	ldd	r25, Y+9	; 0x09
    4ad8:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    4adc:	88 23       	and	r24, r24
    4ade:	2c f4       	brge	.+10     	; 0x4aea <Rtc_enuGetHour+0xc2>
		__ticks = 1;
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	9b 87       	std	Y+11, r25	; 0x0b
    4ae6:	8a 87       	std	Y+10, r24	; 0x0a
    4ae8:	3f c0       	rjmp	.+126    	; 0x4b68 <Rtc_enuGetHour+0x140>
	else if (__tmp > 65535)
    4aea:	20 e0       	ldi	r18, 0x00	; 0
    4aec:	3f ef       	ldi	r19, 0xFF	; 255
    4aee:	4f e7       	ldi	r20, 0x7F	; 127
    4af0:	57 e4       	ldi	r21, 0x47	; 71
    4af2:	6e 81       	ldd	r22, Y+6	; 0x06
    4af4:	7f 81       	ldd	r23, Y+7	; 0x07
    4af6:	88 85       	ldd	r24, Y+8	; 0x08
    4af8:	99 85       	ldd	r25, Y+9	; 0x09
    4afa:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    4afe:	18 16       	cp	r1, r24
    4b00:	4c f5       	brge	.+82     	; 0x4b54 <Rtc_enuGetHour+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b02:	20 e0       	ldi	r18, 0x00	; 0
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	40 e2       	ldi	r20, 0x20	; 32
    4b08:	51 e4       	ldi	r21, 0x41	; 65
    4b0a:	6a 81       	ldd	r22, Y+2	; 0x02
    4b0c:	7b 81       	ldd	r23, Y+3	; 0x03
    4b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b10:	9d 81       	ldd	r25, Y+5	; 0x05
    4b12:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	bc 01       	movw	r22, r24
    4b1c:	cd 01       	movw	r24, r26
    4b1e:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4b22:	dc 01       	movw	r26, r24
    4b24:	cb 01       	movw	r24, r22
    4b26:	9b 87       	std	Y+11, r25	; 0x0b
    4b28:	8a 87       	std	Y+10, r24	; 0x0a
    4b2a:	0f c0       	rjmp	.+30     	; 0x4b4a <Rtc_enuGetHour+0x122>
    4b2c:	80 e9       	ldi	r24, 0x90	; 144
    4b2e:	91 e0       	ldi	r25, 0x01	; 1
    4b30:	9d 87       	std	Y+13, r25	; 0x0d
    4b32:	8c 87       	std	Y+12, r24	; 0x0c
    4b34:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b36:	9d 85       	ldd	r25, Y+13	; 0x0d
    4b38:	01 97       	sbiw	r24, 0x01	; 1
    4b3a:	f1 f7       	brne	.-4      	; 0x4b38 <Rtc_enuGetHour+0x110>
    4b3c:	9d 87       	std	Y+13, r25	; 0x0d
    4b3e:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b40:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b42:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	9b 87       	std	Y+11, r25	; 0x0b
    4b48:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b4e:	89 2b       	or	r24, r25
    4b50:	69 f7       	brne	.-38     	; 0x4b2c <Rtc_enuGetHour+0x104>
    4b52:	14 c0       	rjmp	.+40     	; 0x4b7c <Rtc_enuGetHour+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b54:	6e 81       	ldd	r22, Y+6	; 0x06
    4b56:	7f 81       	ldd	r23, Y+7	; 0x07
    4b58:	88 85       	ldd	r24, Y+8	; 0x08
    4b5a:	99 85       	ldd	r25, Y+9	; 0x09
    4b5c:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4b60:	dc 01       	movw	r26, r24
    4b62:	cb 01       	movw	r24, r22
    4b64:	9b 87       	std	Y+11, r25	; 0x0b
    4b66:	8a 87       	std	Y+10, r24	; 0x0a
    4b68:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b6c:	9f 87       	std	Y+15, r25	; 0x0f
    4b6e:	8e 87       	std	Y+14, r24	; 0x0e
    4b70:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b72:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	f1 f7       	brne	.-4      	; 0x4b74 <Rtc_enuGetHour+0x14c>
    4b78:	9f 87       	std	Y+15, r25	; 0x0f
    4b7a:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b7e:	63 96       	adiw	r28, 0x13	; 19
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	de bf       	out	0x3e, r29	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	df 91       	pop	r29
    4b8c:	cf 91       	pop	r28
    4b8e:	08 95       	ret

00004b90 <Rtc_enuGetDay>:


Rtc_StatusErrorType Rtc_enuGetDay(u8* Address_Result){
    4b90:	cf 93       	push	r28
    4b92:	df 93       	push	r29
    4b94:	cd b7       	in	r28, 0x3d	; 61
    4b96:	de b7       	in	r29, 0x3e	; 62
    4b98:	63 97       	sbiw	r28, 0x13	; 19
    4b9a:	0f b6       	in	r0, 0x3f	; 63
    4b9c:	f8 94       	cli
    4b9e:	de bf       	out	0x3e, r29	; 62
    4ba0:	0f be       	out	0x3f, r0	; 63
    4ba2:	cd bf       	out	0x3d, r28	; 61
    4ba4:	9b 8b       	std	Y+19, r25	; 0x13
    4ba6:	8a 8b       	std	Y+18, r24	; 0x12

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    4ba8:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;

	if(NULL == Address_Result){
    4baa:	8a 89       	ldd	r24, Y+18	; 0x12
    4bac:	9b 89       	ldd	r25, Y+19	; 0x13
    4bae:	89 2b       	or	r24, r25
    4bb0:	19 f4       	brne	.+6      	; 0x4bb8 <Rtc_enuGetDay+0x28>
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	89 83       	std	Y+1, r24	; 0x01
    4bb6:	96 c0       	rjmp	.+300    	; 0x4ce4 <Rtc_enuGetDay+0x154>
	}
	else{
		I2c_enuMasterTransmitStartConditionBlocking();
    4bb8:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4bbc:	ce 01       	movw	r24, r28
    4bbe:	40 96       	adiw	r24, 0x10	; 16
    4bc0:	bc 01       	movw	r22, r24
    4bc2:	88 e6       	ldi	r24, 0x68	; 104
    4bc4:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_DAY_REG_ADDRESS, &Loc_u8Temp);
    4bc8:	ce 01       	movw	r24, r28
    4bca:	40 96       	adiw	r24, 0x10	; 16
    4bcc:	bc 01       	movw	r22, r24
    4bce:	84 e0       	ldi	r24, 0x04	; 4
    4bd0:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    4bd4:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4bd8:	ce 01       	movw	r24, r28
    4bda:	40 96       	adiw	r24, 0x10	; 16
    4bdc:	bc 01       	movw	r22, r24
    4bde:	88 e6       	ldi	r24, 0x68	; 104
    4be0:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    4be4:	ce 01       	movw	r24, r28
    4be6:	41 96       	adiw	r24, 0x11	; 17
    4be8:	60 e0       	ldi	r22, 0x00	; 0
    4bea:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    4bee:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    4bf2:	29 89       	ldd	r18, Y+17	; 0x11
    4bf4:	8a 89       	ldd	r24, Y+18	; 0x12
    4bf6:	9b 89       	ldd	r25, Y+19	; 0x13
    4bf8:	bc 01       	movw	r22, r24
    4bfa:	82 2f       	mov	r24, r18
    4bfc:	0e 94 11 05 	call	0xa22	; 0xa22 <Convert_BCDToInt>
    4c00:	80 e0       	ldi	r24, 0x00	; 0
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	a0 e8       	ldi	r26, 0x80	; 128
    4c06:	bf e3       	ldi	r27, 0x3F	; 63
    4c08:	8a 83       	std	Y+2, r24	; 0x02
    4c0a:	9b 83       	std	Y+3, r25	; 0x03
    4c0c:	ac 83       	std	Y+4, r26	; 0x04
    4c0e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	4a e7       	ldi	r20, 0x7A	; 122
    4c16:	55 e4       	ldi	r21, 0x45	; 69
    4c18:	6a 81       	ldd	r22, Y+2	; 0x02
    4c1a:	7b 81       	ldd	r23, Y+3	; 0x03
    4c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    4c20:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4c24:	dc 01       	movw	r26, r24
    4c26:	cb 01       	movw	r24, r22
    4c28:	8e 83       	std	Y+6, r24	; 0x06
    4c2a:	9f 83       	std	Y+7, r25	; 0x07
    4c2c:	a8 87       	std	Y+8, r26	; 0x08
    4c2e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	40 e8       	ldi	r20, 0x80	; 128
    4c36:	5f e3       	ldi	r21, 0x3F	; 63
    4c38:	6e 81       	ldd	r22, Y+6	; 0x06
    4c3a:	7f 81       	ldd	r23, Y+7	; 0x07
    4c3c:	88 85       	ldd	r24, Y+8	; 0x08
    4c3e:	99 85       	ldd	r25, Y+9	; 0x09
    4c40:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    4c44:	88 23       	and	r24, r24
    4c46:	2c f4       	brge	.+10     	; 0x4c52 <Rtc_enuGetDay+0xc2>
		__ticks = 1;
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	9b 87       	std	Y+11, r25	; 0x0b
    4c4e:	8a 87       	std	Y+10, r24	; 0x0a
    4c50:	3f c0       	rjmp	.+126    	; 0x4cd0 <Rtc_enuGetDay+0x140>
	else if (__tmp > 65535)
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	3f ef       	ldi	r19, 0xFF	; 255
    4c56:	4f e7       	ldi	r20, 0x7F	; 127
    4c58:	57 e4       	ldi	r21, 0x47	; 71
    4c5a:	6e 81       	ldd	r22, Y+6	; 0x06
    4c5c:	7f 81       	ldd	r23, Y+7	; 0x07
    4c5e:	88 85       	ldd	r24, Y+8	; 0x08
    4c60:	99 85       	ldd	r25, Y+9	; 0x09
    4c62:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    4c66:	18 16       	cp	r1, r24
    4c68:	4c f5       	brge	.+82     	; 0x4cbc <Rtc_enuGetDay+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c6a:	20 e0       	ldi	r18, 0x00	; 0
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	40 e2       	ldi	r20, 0x20	; 32
    4c70:	51 e4       	ldi	r21, 0x41	; 65
    4c72:	6a 81       	ldd	r22, Y+2	; 0x02
    4c74:	7b 81       	ldd	r23, Y+3	; 0x03
    4c76:	8c 81       	ldd	r24, Y+4	; 0x04
    4c78:	9d 81       	ldd	r25, Y+5	; 0x05
    4c7a:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4c7e:	dc 01       	movw	r26, r24
    4c80:	cb 01       	movw	r24, r22
    4c82:	bc 01       	movw	r22, r24
    4c84:	cd 01       	movw	r24, r26
    4c86:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	9b 87       	std	Y+11, r25	; 0x0b
    4c90:	8a 87       	std	Y+10, r24	; 0x0a
    4c92:	0f c0       	rjmp	.+30     	; 0x4cb2 <Rtc_enuGetDay+0x122>
    4c94:	80 e9       	ldi	r24, 0x90	; 144
    4c96:	91 e0       	ldi	r25, 0x01	; 1
    4c98:	9d 87       	std	Y+13, r25	; 0x0d
    4c9a:	8c 87       	std	Y+12, r24	; 0x0c
    4c9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c9e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ca0:	01 97       	sbiw	r24, 0x01	; 1
    4ca2:	f1 f7       	brne	.-4      	; 0x4ca0 <Rtc_enuGetDay+0x110>
    4ca4:	9d 87       	std	Y+13, r25	; 0x0d
    4ca6:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ca8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4caa:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cac:	01 97       	sbiw	r24, 0x01	; 1
    4cae:	9b 87       	std	Y+11, r25	; 0x0b
    4cb0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cb6:	89 2b       	or	r24, r25
    4cb8:	69 f7       	brne	.-38     	; 0x4c94 <Rtc_enuGetDay+0x104>
    4cba:	14 c0       	rjmp	.+40     	; 0x4ce4 <Rtc_enuGetDay+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cbc:	6e 81       	ldd	r22, Y+6	; 0x06
    4cbe:	7f 81       	ldd	r23, Y+7	; 0x07
    4cc0:	88 85       	ldd	r24, Y+8	; 0x08
    4cc2:	99 85       	ldd	r25, Y+9	; 0x09
    4cc4:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	9b 87       	std	Y+11, r25	; 0x0b
    4cce:	8a 87       	std	Y+10, r24	; 0x0a
    4cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cd4:	9f 87       	std	Y+15, r25	; 0x0f
    4cd6:	8e 87       	std	Y+14, r24	; 0x0e
    4cd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cda:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cdc:	01 97       	sbiw	r24, 0x01	; 1
    4cde:	f1 f7       	brne	.-4      	; 0x4cdc <Rtc_enuGetDay+0x14c>
    4ce0:	9f 87       	std	Y+15, r25	; 0x0f
    4ce2:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
    4ce4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ce6:	63 96       	adiw	r28, 0x13	; 19
    4ce8:	0f b6       	in	r0, 0x3f	; 63
    4cea:	f8 94       	cli
    4cec:	de bf       	out	0x3e, r29	; 62
    4cee:	0f be       	out	0x3f, r0	; 63
    4cf0:	cd bf       	out	0x3d, r28	; 61
    4cf2:	df 91       	pop	r29
    4cf4:	cf 91       	pop	r28
    4cf6:	08 95       	ret

00004cf8 <Rtc_enuGetMonth>:
Rtc_StatusErrorType Rtc_enuGetMonth( u8* Address_Result){
    4cf8:	cf 93       	push	r28
    4cfa:	df 93       	push	r29
    4cfc:	cd b7       	in	r28, 0x3d	; 61
    4cfe:	de b7       	in	r29, 0x3e	; 62
    4d00:	63 97       	sbiw	r28, 0x13	; 19
    4d02:	0f b6       	in	r0, 0x3f	; 63
    4d04:	f8 94       	cli
    4d06:	de bf       	out	0x3e, r29	; 62
    4d08:	0f be       	out	0x3f, r0	; 63
    4d0a:	cd bf       	out	0x3d, r28	; 61
    4d0c:	9b 8b       	std	Y+19, r25	; 0x13
    4d0e:	8a 8b       	std	Y+18, r24	; 0x12

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    4d10:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    4d12:	8a 89       	ldd	r24, Y+18	; 0x12
    4d14:	9b 89       	ldd	r25, Y+19	; 0x13
    4d16:	89 2b       	or	r24, r25
    4d18:	19 f4       	brne	.+6      	; 0x4d20 <Rtc_enuGetMonth+0x28>
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	89 83       	std	Y+1, r24	; 0x01
    4d1e:	96 c0       	rjmp	.+300    	; 0x4e4c <Rtc_enuGetMonth+0x154>
	}
	else{
		I2c_enuMasterTransmitStartConditionBlocking();
    4d20:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4d24:	ce 01       	movw	r24, r28
    4d26:	40 96       	adiw	r24, 0x10	; 16
    4d28:	bc 01       	movw	r22, r24
    4d2a:	88 e6       	ldi	r24, 0x68	; 104
    4d2c:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_MONTH_REG_ADDRESS, &Loc_u8Temp);
    4d30:	ce 01       	movw	r24, r28
    4d32:	40 96       	adiw	r24, 0x10	; 16
    4d34:	bc 01       	movw	r22, r24
    4d36:	85 e0       	ldi	r24, 0x05	; 5
    4d38:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    4d3c:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4d40:	ce 01       	movw	r24, r28
    4d42:	40 96       	adiw	r24, 0x10	; 16
    4d44:	bc 01       	movw	r22, r24
    4d46:	88 e6       	ldi	r24, 0x68	; 104
    4d48:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    4d4c:	ce 01       	movw	r24, r28
    4d4e:	41 96       	adiw	r24, 0x11	; 17
    4d50:	60 e0       	ldi	r22, 0x00	; 0
    4d52:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    4d56:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    4d5a:	29 89       	ldd	r18, Y+17	; 0x11
    4d5c:	8a 89       	ldd	r24, Y+18	; 0x12
    4d5e:	9b 89       	ldd	r25, Y+19	; 0x13
    4d60:	bc 01       	movw	r22, r24
    4d62:	82 2f       	mov	r24, r18
    4d64:	0e 94 11 05 	call	0xa22	; 0xa22 <Convert_BCDToInt>
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	a0 e8       	ldi	r26, 0x80	; 128
    4d6e:	bf e3       	ldi	r27, 0x3F	; 63
    4d70:	8a 83       	std	Y+2, r24	; 0x02
    4d72:	9b 83       	std	Y+3, r25	; 0x03
    4d74:	ac 83       	std	Y+4, r26	; 0x04
    4d76:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	4a e7       	ldi	r20, 0x7A	; 122
    4d7e:	55 e4       	ldi	r21, 0x45	; 69
    4d80:	6a 81       	ldd	r22, Y+2	; 0x02
    4d82:	7b 81       	ldd	r23, Y+3	; 0x03
    4d84:	8c 81       	ldd	r24, Y+4	; 0x04
    4d86:	9d 81       	ldd	r25, Y+5	; 0x05
    4d88:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4d8c:	dc 01       	movw	r26, r24
    4d8e:	cb 01       	movw	r24, r22
    4d90:	8e 83       	std	Y+6, r24	; 0x06
    4d92:	9f 83       	std	Y+7, r25	; 0x07
    4d94:	a8 87       	std	Y+8, r26	; 0x08
    4d96:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    4d98:	20 e0       	ldi	r18, 0x00	; 0
    4d9a:	30 e0       	ldi	r19, 0x00	; 0
    4d9c:	40 e8       	ldi	r20, 0x80	; 128
    4d9e:	5f e3       	ldi	r21, 0x3F	; 63
    4da0:	6e 81       	ldd	r22, Y+6	; 0x06
    4da2:	7f 81       	ldd	r23, Y+7	; 0x07
    4da4:	88 85       	ldd	r24, Y+8	; 0x08
    4da6:	99 85       	ldd	r25, Y+9	; 0x09
    4da8:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    4dac:	88 23       	and	r24, r24
    4dae:	2c f4       	brge	.+10     	; 0x4dba <Rtc_enuGetMonth+0xc2>
		__ticks = 1;
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	9b 87       	std	Y+11, r25	; 0x0b
    4db6:	8a 87       	std	Y+10, r24	; 0x0a
    4db8:	3f c0       	rjmp	.+126    	; 0x4e38 <Rtc_enuGetMonth+0x140>
	else if (__tmp > 65535)
    4dba:	20 e0       	ldi	r18, 0x00	; 0
    4dbc:	3f ef       	ldi	r19, 0xFF	; 255
    4dbe:	4f e7       	ldi	r20, 0x7F	; 127
    4dc0:	57 e4       	ldi	r21, 0x47	; 71
    4dc2:	6e 81       	ldd	r22, Y+6	; 0x06
    4dc4:	7f 81       	ldd	r23, Y+7	; 0x07
    4dc6:	88 85       	ldd	r24, Y+8	; 0x08
    4dc8:	99 85       	ldd	r25, Y+9	; 0x09
    4dca:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    4dce:	18 16       	cp	r1, r24
    4dd0:	4c f5       	brge	.+82     	; 0x4e24 <Rtc_enuGetMonth+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd2:	20 e0       	ldi	r18, 0x00	; 0
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	40 e2       	ldi	r20, 0x20	; 32
    4dd8:	51 e4       	ldi	r21, 0x41	; 65
    4dda:	6a 81       	ldd	r22, Y+2	; 0x02
    4ddc:	7b 81       	ldd	r23, Y+3	; 0x03
    4dde:	8c 81       	ldd	r24, Y+4	; 0x04
    4de0:	9d 81       	ldd	r25, Y+5	; 0x05
    4de2:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4de6:	dc 01       	movw	r26, r24
    4de8:	cb 01       	movw	r24, r22
    4dea:	bc 01       	movw	r22, r24
    4dec:	cd 01       	movw	r24, r26
    4dee:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4df2:	dc 01       	movw	r26, r24
    4df4:	cb 01       	movw	r24, r22
    4df6:	9b 87       	std	Y+11, r25	; 0x0b
    4df8:	8a 87       	std	Y+10, r24	; 0x0a
    4dfa:	0f c0       	rjmp	.+30     	; 0x4e1a <Rtc_enuGetMonth+0x122>
    4dfc:	80 e9       	ldi	r24, 0x90	; 144
    4dfe:	91 e0       	ldi	r25, 0x01	; 1
    4e00:	9d 87       	std	Y+13, r25	; 0x0d
    4e02:	8c 87       	std	Y+12, r24	; 0x0c
    4e04:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e06:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e08:	01 97       	sbiw	r24, 0x01	; 1
    4e0a:	f1 f7       	brne	.-4      	; 0x4e08 <Rtc_enuGetMonth+0x110>
    4e0c:	9d 87       	std	Y+13, r25	; 0x0d
    4e0e:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e10:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e12:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e14:	01 97       	sbiw	r24, 0x01	; 1
    4e16:	9b 87       	std	Y+11, r25	; 0x0b
    4e18:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e1e:	89 2b       	or	r24, r25
    4e20:	69 f7       	brne	.-38     	; 0x4dfc <Rtc_enuGetMonth+0x104>
    4e22:	14 c0       	rjmp	.+40     	; 0x4e4c <Rtc_enuGetMonth+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e24:	6e 81       	ldd	r22, Y+6	; 0x06
    4e26:	7f 81       	ldd	r23, Y+7	; 0x07
    4e28:	88 85       	ldd	r24, Y+8	; 0x08
    4e2a:	99 85       	ldd	r25, Y+9	; 0x09
    4e2c:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4e30:	dc 01       	movw	r26, r24
    4e32:	cb 01       	movw	r24, r22
    4e34:	9b 87       	std	Y+11, r25	; 0x0b
    4e36:	8a 87       	std	Y+10, r24	; 0x0a
    4e38:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e3c:	9f 87       	std	Y+15, r25	; 0x0f
    4e3e:	8e 87       	std	Y+14, r24	; 0x0e
    4e40:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e42:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e44:	01 97       	sbiw	r24, 0x01	; 1
    4e46:	f1 f7       	brne	.-4      	; 0x4e44 <Rtc_enuGetMonth+0x14c>
    4e48:	9f 87       	std	Y+15, r25	; 0x0f
    4e4a:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e4e:	63 96       	adiw	r28, 0x13	; 19
    4e50:	0f b6       	in	r0, 0x3f	; 63
    4e52:	f8 94       	cli
    4e54:	de bf       	out	0x3e, r29	; 62
    4e56:	0f be       	out	0x3f, r0	; 63
    4e58:	cd bf       	out	0x3d, r28	; 61
    4e5a:	df 91       	pop	r29
    4e5c:	cf 91       	pop	r28
    4e5e:	08 95       	ret

00004e60 <Rtc_enuGetYear>:
Rtc_StatusErrorType Rtc_enuGetYear(u8* Address_Result){
    4e60:	cf 93       	push	r28
    4e62:	df 93       	push	r29
    4e64:	cd b7       	in	r28, 0x3d	; 61
    4e66:	de b7       	in	r29, 0x3e	; 62
    4e68:	63 97       	sbiw	r28, 0x13	; 19
    4e6a:	0f b6       	in	r0, 0x3f	; 63
    4e6c:	f8 94       	cli
    4e6e:	de bf       	out	0x3e, r29	; 62
    4e70:	0f be       	out	0x3f, r0	; 63
    4e72:	cd bf       	out	0x3d, r28	; 61
    4e74:	9b 8b       	std	Y+19, r25	; 0x13
    4e76:	8a 8b       	std	Y+18, r24	; 0x12

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    4e78:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    4e7a:	8a 89       	ldd	r24, Y+18	; 0x12
    4e7c:	9b 89       	ldd	r25, Y+19	; 0x13
    4e7e:	89 2b       	or	r24, r25
    4e80:	19 f4       	brne	.+6      	; 0x4e88 <Rtc_enuGetYear+0x28>
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    4e82:	81 e0       	ldi	r24, 0x01	; 1
    4e84:	89 83       	std	Y+1, r24	; 0x01
    4e86:	96 c0       	rjmp	.+300    	; 0x4fb4 <Rtc_enuGetYear+0x154>
	}
	else{
		I2c_enuMasterTransmitStartConditionBlocking();
    4e88:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	40 96       	adiw	r24, 0x10	; 16
    4e90:	bc 01       	movw	r22, r24
    4e92:	88 e6       	ldi	r24, 0x68	; 104
    4e94:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_YEAR_REG_ADDRESS, &Loc_u8Temp);
    4e98:	ce 01       	movw	r24, r28
    4e9a:	40 96       	adiw	r24, 0x10	; 16
    4e9c:	bc 01       	movw	r22, r24
    4e9e:	86 e0       	ldi	r24, 0x06	; 6
    4ea0:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    4ea4:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    4ea8:	ce 01       	movw	r24, r28
    4eaa:	40 96       	adiw	r24, 0x10	; 16
    4eac:	bc 01       	movw	r22, r24
    4eae:	88 e6       	ldi	r24, 0x68	; 104
    4eb0:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    4eb4:	ce 01       	movw	r24, r28
    4eb6:	41 96       	adiw	r24, 0x11	; 17
    4eb8:	60 e0       	ldi	r22, 0x00	; 0
    4eba:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    4ebe:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    4ec2:	29 89       	ldd	r18, Y+17	; 0x11
    4ec4:	8a 89       	ldd	r24, Y+18	; 0x12
    4ec6:	9b 89       	ldd	r25, Y+19	; 0x13
    4ec8:	bc 01       	movw	r22, r24
    4eca:	82 2f       	mov	r24, r18
    4ecc:	0e 94 11 05 	call	0xa22	; 0xa22 <Convert_BCDToInt>
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	a0 e8       	ldi	r26, 0x80	; 128
    4ed6:	bf e3       	ldi	r27, 0x3F	; 63
    4ed8:	8a 83       	std	Y+2, r24	; 0x02
    4eda:	9b 83       	std	Y+3, r25	; 0x03
    4edc:	ac 83       	std	Y+4, r26	; 0x04
    4ede:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0
    4ee4:	4a e7       	ldi	r20, 0x7A	; 122
    4ee6:	55 e4       	ldi	r21, 0x45	; 69
    4ee8:	6a 81       	ldd	r22, Y+2	; 0x02
    4eea:	7b 81       	ldd	r23, Y+3	; 0x03
    4eec:	8c 81       	ldd	r24, Y+4	; 0x04
    4eee:	9d 81       	ldd	r25, Y+5	; 0x05
    4ef0:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4ef4:	dc 01       	movw	r26, r24
    4ef6:	cb 01       	movw	r24, r22
    4ef8:	8e 83       	std	Y+6, r24	; 0x06
    4efa:	9f 83       	std	Y+7, r25	; 0x07
    4efc:	a8 87       	std	Y+8, r26	; 0x08
    4efe:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	40 e8       	ldi	r20, 0x80	; 128
    4f06:	5f e3       	ldi	r21, 0x3F	; 63
    4f08:	6e 81       	ldd	r22, Y+6	; 0x06
    4f0a:	7f 81       	ldd	r23, Y+7	; 0x07
    4f0c:	88 85       	ldd	r24, Y+8	; 0x08
    4f0e:	99 85       	ldd	r25, Y+9	; 0x09
    4f10:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    4f14:	88 23       	and	r24, r24
    4f16:	2c f4       	brge	.+10     	; 0x4f22 <Rtc_enuGetYear+0xc2>
		__ticks = 1;
    4f18:	81 e0       	ldi	r24, 0x01	; 1
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	9b 87       	std	Y+11, r25	; 0x0b
    4f1e:	8a 87       	std	Y+10, r24	; 0x0a
    4f20:	3f c0       	rjmp	.+126    	; 0x4fa0 <Rtc_enuGetYear+0x140>
	else if (__tmp > 65535)
    4f22:	20 e0       	ldi	r18, 0x00	; 0
    4f24:	3f ef       	ldi	r19, 0xFF	; 255
    4f26:	4f e7       	ldi	r20, 0x7F	; 127
    4f28:	57 e4       	ldi	r21, 0x47	; 71
    4f2a:	6e 81       	ldd	r22, Y+6	; 0x06
    4f2c:	7f 81       	ldd	r23, Y+7	; 0x07
    4f2e:	88 85       	ldd	r24, Y+8	; 0x08
    4f30:	99 85       	ldd	r25, Y+9	; 0x09
    4f32:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    4f36:	18 16       	cp	r1, r24
    4f38:	4c f5       	brge	.+82     	; 0x4f8c <Rtc_enuGetYear+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f3a:	20 e0       	ldi	r18, 0x00	; 0
    4f3c:	30 e0       	ldi	r19, 0x00	; 0
    4f3e:	40 e2       	ldi	r20, 0x20	; 32
    4f40:	51 e4       	ldi	r21, 0x41	; 65
    4f42:	6a 81       	ldd	r22, Y+2	; 0x02
    4f44:	7b 81       	ldd	r23, Y+3	; 0x03
    4f46:	8c 81       	ldd	r24, Y+4	; 0x04
    4f48:	9d 81       	ldd	r25, Y+5	; 0x05
    4f4a:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    4f4e:	dc 01       	movw	r26, r24
    4f50:	cb 01       	movw	r24, r22
    4f52:	bc 01       	movw	r22, r24
    4f54:	cd 01       	movw	r24, r26
    4f56:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4f5a:	dc 01       	movw	r26, r24
    4f5c:	cb 01       	movw	r24, r22
    4f5e:	9b 87       	std	Y+11, r25	; 0x0b
    4f60:	8a 87       	std	Y+10, r24	; 0x0a
    4f62:	0f c0       	rjmp	.+30     	; 0x4f82 <Rtc_enuGetYear+0x122>
    4f64:	80 e9       	ldi	r24, 0x90	; 144
    4f66:	91 e0       	ldi	r25, 0x01	; 1
    4f68:	9d 87       	std	Y+13, r25	; 0x0d
    4f6a:	8c 87       	std	Y+12, r24	; 0x0c
    4f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f70:	01 97       	sbiw	r24, 0x01	; 1
    4f72:	f1 f7       	brne	.-4      	; 0x4f70 <Rtc_enuGetYear+0x110>
    4f74:	9d 87       	std	Y+13, r25	; 0x0d
    4f76:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f78:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f7c:	01 97       	sbiw	r24, 0x01	; 1
    4f7e:	9b 87       	std	Y+11, r25	; 0x0b
    4f80:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f82:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f84:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f86:	89 2b       	or	r24, r25
    4f88:	69 f7       	brne	.-38     	; 0x4f64 <Rtc_enuGetYear+0x104>
    4f8a:	14 c0       	rjmp	.+40     	; 0x4fb4 <Rtc_enuGetYear+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f8c:	6e 81       	ldd	r22, Y+6	; 0x06
    4f8e:	7f 81       	ldd	r23, Y+7	; 0x07
    4f90:	88 85       	ldd	r24, Y+8	; 0x08
    4f92:	99 85       	ldd	r25, Y+9	; 0x09
    4f94:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    4f98:	dc 01       	movw	r26, r24
    4f9a:	cb 01       	movw	r24, r22
    4f9c:	9b 87       	std	Y+11, r25	; 0x0b
    4f9e:	8a 87       	std	Y+10, r24	; 0x0a
    4fa0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fa2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4fa4:	9f 87       	std	Y+15, r25	; 0x0f
    4fa6:	8e 87       	std	Y+14, r24	; 0x0e
    4fa8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4faa:	9f 85       	ldd	r25, Y+15	; 0x0f
    4fac:	01 97       	sbiw	r24, 0x01	; 1
    4fae:	f1 f7       	brne	.-4      	; 0x4fac <Rtc_enuGetYear+0x14c>
    4fb0:	9f 87       	std	Y+15, r25	; 0x0f
    4fb2:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
    4fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fb6:	63 96       	adiw	r28, 0x13	; 19
    4fb8:	0f b6       	in	r0, 0x3f	; 63
    4fba:	f8 94       	cli
    4fbc:	de bf       	out	0x3e, r29	; 62
    4fbe:	0f be       	out	0x3f, r0	; 63
    4fc0:	cd bf       	out	0x3d, r28	; 61
    4fc2:	df 91       	pop	r29
    4fc4:	cf 91       	pop	r28
    4fc6:	08 95       	ret

00004fc8 <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	ef 97       	sbiw	r28, 0x3f	; 63
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	f8 94       	cli
    4fd6:	de bf       	out	0x3e, r29	; 62
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	cd bf       	out	0x3d, r28	; 61
    4fdc:	9f af       	std	Y+63, r25	; 0x3f
    4fde:	8e af       	std	Y+62, r24	; 0x3e

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    4fe0:	19 82       	std	Y+1, r1	; 0x01
	if( NULL == Address_lcd){
    4fe2:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fe4:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fe6:	89 2b       	or	r24, r25
    4fe8:	19 f4       	brne	.+6      	; 0x4ff0 <Lcd_4bit_enuInit+0x28>
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    4fea:	82 e0       	ldi	r24, 0x02	; 2
    4fec:	89 83       	std	Y+1, r24	; 0x01
    4fee:	0f c2       	rjmp	.+1054   	; 0x540e <Lcd_4bit_enuInit+0x446>

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    4ff0:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ff2:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ff4:	68 e3       	ldi	r22, 0x38	; 56
    4ff6:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    4ffa:	89 83       	std	Y+1, r24	; 0x01
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	a0 ea       	ldi	r26, 0xA0	; 160
    5002:	b0 e4       	ldi	r27, 0x40	; 64
    5004:	8a 83       	std	Y+2, r24	; 0x02
    5006:	9b 83       	std	Y+3, r25	; 0x03
    5008:	ac 83       	std	Y+4, r26	; 0x04
    500a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    500c:	20 e0       	ldi	r18, 0x00	; 0
    500e:	30 e0       	ldi	r19, 0x00	; 0
    5010:	4a e7       	ldi	r20, 0x7A	; 122
    5012:	55 e4       	ldi	r21, 0x45	; 69
    5014:	6a 81       	ldd	r22, Y+2	; 0x02
    5016:	7b 81       	ldd	r23, Y+3	; 0x03
    5018:	8c 81       	ldd	r24, Y+4	; 0x04
    501a:	9d 81       	ldd	r25, Y+5	; 0x05
    501c:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    5020:	dc 01       	movw	r26, r24
    5022:	cb 01       	movw	r24, r22
    5024:	8c ab       	std	Y+52, r24	; 0x34
    5026:	9d ab       	std	Y+53, r25	; 0x35
    5028:	ae ab       	std	Y+54, r26	; 0x36
    502a:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    502c:	20 e0       	ldi	r18, 0x00	; 0
    502e:	30 e0       	ldi	r19, 0x00	; 0
    5030:	40 e8       	ldi	r20, 0x80	; 128
    5032:	5f e3       	ldi	r21, 0x3F	; 63
    5034:	6c a9       	ldd	r22, Y+52	; 0x34
    5036:	7d a9       	ldd	r23, Y+53	; 0x35
    5038:	8e a9       	ldd	r24, Y+54	; 0x36
    503a:	9f a9       	ldd	r25, Y+55	; 0x37
    503c:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    5040:	88 23       	and	r24, r24
    5042:	2c f4       	brge	.+10     	; 0x504e <Lcd_4bit_enuInit+0x86>
		__ticks = 1;
    5044:	81 e0       	ldi	r24, 0x01	; 1
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	99 af       	std	Y+57, r25	; 0x39
    504a:	88 af       	std	Y+56, r24	; 0x38
    504c:	3f c0       	rjmp	.+126    	; 0x50cc <Lcd_4bit_enuInit+0x104>
	else if (__tmp > 65535)
    504e:	20 e0       	ldi	r18, 0x00	; 0
    5050:	3f ef       	ldi	r19, 0xFF	; 255
    5052:	4f e7       	ldi	r20, 0x7F	; 127
    5054:	57 e4       	ldi	r21, 0x47	; 71
    5056:	6c a9       	ldd	r22, Y+52	; 0x34
    5058:	7d a9       	ldd	r23, Y+53	; 0x35
    505a:	8e a9       	ldd	r24, Y+54	; 0x36
    505c:	9f a9       	ldd	r25, Y+55	; 0x37
    505e:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    5062:	18 16       	cp	r1, r24
    5064:	4c f5       	brge	.+82     	; 0x50b8 <Lcd_4bit_enuInit+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5066:	20 e0       	ldi	r18, 0x00	; 0
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	40 e2       	ldi	r20, 0x20	; 32
    506c:	51 e4       	ldi	r21, 0x41	; 65
    506e:	6a 81       	ldd	r22, Y+2	; 0x02
    5070:	7b 81       	ldd	r23, Y+3	; 0x03
    5072:	8c 81       	ldd	r24, Y+4	; 0x04
    5074:	9d 81       	ldd	r25, Y+5	; 0x05
    5076:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    507a:	dc 01       	movw	r26, r24
    507c:	cb 01       	movw	r24, r22
    507e:	bc 01       	movw	r22, r24
    5080:	cd 01       	movw	r24, r26
    5082:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    5086:	dc 01       	movw	r26, r24
    5088:	cb 01       	movw	r24, r22
    508a:	99 af       	std	Y+57, r25	; 0x39
    508c:	88 af       	std	Y+56, r24	; 0x38
    508e:	0f c0       	rjmp	.+30     	; 0x50ae <Lcd_4bit_enuInit+0xe6>
    5090:	80 e9       	ldi	r24, 0x90	; 144
    5092:	91 e0       	ldi	r25, 0x01	; 1
    5094:	9b af       	std	Y+59, r25	; 0x3b
    5096:	8a af       	std	Y+58, r24	; 0x3a
    5098:	8a ad       	ldd	r24, Y+58	; 0x3a
    509a:	9b ad       	ldd	r25, Y+59	; 0x3b
    509c:	01 97       	sbiw	r24, 0x01	; 1
    509e:	f1 f7       	brne	.-4      	; 0x509c <Lcd_4bit_enuInit+0xd4>
    50a0:	9b af       	std	Y+59, r25	; 0x3b
    50a2:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50a4:	88 ad       	ldd	r24, Y+56	; 0x38
    50a6:	99 ad       	ldd	r25, Y+57	; 0x39
    50a8:	01 97       	sbiw	r24, 0x01	; 1
    50aa:	99 af       	std	Y+57, r25	; 0x39
    50ac:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ae:	88 ad       	ldd	r24, Y+56	; 0x38
    50b0:	99 ad       	ldd	r25, Y+57	; 0x39
    50b2:	89 2b       	or	r24, r25
    50b4:	69 f7       	brne	.-38     	; 0x5090 <Lcd_4bit_enuInit+0xc8>
    50b6:	14 c0       	rjmp	.+40     	; 0x50e0 <Lcd_4bit_enuInit+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50b8:	6c a9       	ldd	r22, Y+52	; 0x34
    50ba:	7d a9       	ldd	r23, Y+53	; 0x35
    50bc:	8e a9       	ldd	r24, Y+54	; 0x36
    50be:	9f a9       	ldd	r25, Y+55	; 0x37
    50c0:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    50c4:	dc 01       	movw	r26, r24
    50c6:	cb 01       	movw	r24, r22
    50c8:	99 af       	std	Y+57, r25	; 0x39
    50ca:	88 af       	std	Y+56, r24	; 0x38
    50cc:	88 ad       	ldd	r24, Y+56	; 0x38
    50ce:	99 ad       	ldd	r25, Y+57	; 0x39
    50d0:	9d af       	std	Y+61, r25	; 0x3d
    50d2:	8c af       	std	Y+60, r24	; 0x3c
    50d4:	8c ad       	ldd	r24, Y+60	; 0x3c
    50d6:	9d ad       	ldd	r25, Y+61	; 0x3d
    50d8:	01 97       	sbiw	r24, 0x01	; 1
    50da:	f1 f7       	brne	.-4      	; 0x50d8 <Lcd_4bit_enuInit+0x110>
    50dc:	9d af       	std	Y+61, r25	; 0x3d
    50de:	8c af       	std	Y+60, r24	; 0x3c
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    50e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    50e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    50e4:	68 e3       	ldi	r22, 0x38	; 56
    50e6:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    50ea:	89 83       	std	Y+1, r24	; 0x01
    50ec:	80 e0       	ldi	r24, 0x00	; 0
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	a6 e1       	ldi	r26, 0x16	; 22
    50f2:	b3 e4       	ldi	r27, 0x43	; 67
    50f4:	8e 83       	std	Y+6, r24	; 0x06
    50f6:	9f 83       	std	Y+7, r25	; 0x07
    50f8:	a8 87       	std	Y+8, r26	; 0x08
    50fa:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    50fc:	2b ea       	ldi	r18, 0xAB	; 171
    50fe:	3a ea       	ldi	r19, 0xAA	; 170
    5100:	4a ea       	ldi	r20, 0xAA	; 170
    5102:	50 e4       	ldi	r21, 0x40	; 64
    5104:	6e 81       	ldd	r22, Y+6	; 0x06
    5106:	7f 81       	ldd	r23, Y+7	; 0x07
    5108:	88 85       	ldd	r24, Y+8	; 0x08
    510a:	99 85       	ldd	r25, Y+9	; 0x09
    510c:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    5110:	dc 01       	movw	r26, r24
    5112:	cb 01       	movw	r24, r22
    5114:	88 8f       	std	Y+24, r24	; 0x18
    5116:	99 8f       	std	Y+25, r25	; 0x19
    5118:	aa 8f       	std	Y+26, r26	; 0x1a
    511a:	bb 8f       	std	Y+27, r27	; 0x1b
	__tmp2 = ((F_CPU) / 4e6) * __us;
    511c:	20 e0       	ldi	r18, 0x00	; 0
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	40 e8       	ldi	r20, 0x80	; 128
    5122:	50 e4       	ldi	r21, 0x40	; 64
    5124:	6e 81       	ldd	r22, Y+6	; 0x06
    5126:	7f 81       	ldd	r23, Y+7	; 0x07
    5128:	88 85       	ldd	r24, Y+8	; 0x08
    512a:	99 85       	ldd	r25, Y+9	; 0x09
    512c:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    5130:	dc 01       	movw	r26, r24
    5132:	cb 01       	movw	r24, r22
    5134:	8c 8f       	std	Y+28, r24	; 0x1c
    5136:	9d 8f       	std	Y+29, r25	; 0x1d
    5138:	ae 8f       	std	Y+30, r26	; 0x1e
    513a:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
    513c:	20 e0       	ldi	r18, 0x00	; 0
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	40 e8       	ldi	r20, 0x80	; 128
    5142:	5f e3       	ldi	r21, 0x3F	; 63
    5144:	68 8d       	ldd	r22, Y+24	; 0x18
    5146:	79 8d       	ldd	r23, Y+25	; 0x19
    5148:	8a 8d       	ldd	r24, Y+26	; 0x1a
    514a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    514c:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    5150:	88 23       	and	r24, r24
    5152:	1c f4       	brge	.+6      	; 0x515a <Lcd_4bit_enuInit+0x192>
		__ticks = 1;
    5154:	81 e0       	ldi	r24, 0x01	; 1
    5156:	88 a3       	std	Y+32, r24	; 0x20
    5158:	b2 c0       	rjmp	.+356    	; 0x52be <Lcd_4bit_enuInit+0x2f6>
	else if (__tmp2 > 65535)
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	3f ef       	ldi	r19, 0xFF	; 255
    515e:	4f e7       	ldi	r20, 0x7F	; 127
    5160:	57 e4       	ldi	r21, 0x47	; 71
    5162:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5164:	7d 8d       	ldd	r23, Y+29	; 0x1d
    5166:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5168:	9f 8d       	ldd	r25, Y+31	; 0x1f
    516a:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    516e:	18 16       	cp	r1, r24
    5170:	0c f0       	brlt	.+2      	; 0x5174 <Lcd_4bit_enuInit+0x1ac>
    5172:	7b c0       	rjmp	.+246    	; 0x526a <Lcd_4bit_enuInit+0x2a2>
	{
		_delay_ms(__us / 1000.0);
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	4a e7       	ldi	r20, 0x7A	; 122
    517a:	54 e4       	ldi	r21, 0x44	; 68
    517c:	6e 81       	ldd	r22, Y+6	; 0x06
    517e:	7f 81       	ldd	r23, Y+7	; 0x07
    5180:	88 85       	ldd	r24, Y+8	; 0x08
    5182:	99 85       	ldd	r25, Y+9	; 0x09
    5184:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
    5188:	dc 01       	movw	r26, r24
    518a:	cb 01       	movw	r24, r22
    518c:	89 a3       	std	Y+33, r24	; 0x21
    518e:	9a a3       	std	Y+34, r25	; 0x22
    5190:	ab a3       	std	Y+35, r26	; 0x23
    5192:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	4a e7       	ldi	r20, 0x7A	; 122
    519a:	55 e4       	ldi	r21, 0x45	; 69
    519c:	69 a1       	ldd	r22, Y+33	; 0x21
    519e:	7a a1       	ldd	r23, Y+34	; 0x22
    51a0:	8b a1       	ldd	r24, Y+35	; 0x23
    51a2:	9c a1       	ldd	r25, Y+36	; 0x24
    51a4:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	8d a3       	std	Y+37, r24	; 0x25
    51ae:	9e a3       	std	Y+38, r25	; 0x26
    51b0:	af a3       	std	Y+39, r26	; 0x27
    51b2:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    51b4:	20 e0       	ldi	r18, 0x00	; 0
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	40 e8       	ldi	r20, 0x80	; 128
    51ba:	5f e3       	ldi	r21, 0x3F	; 63
    51bc:	6d a1       	ldd	r22, Y+37	; 0x25
    51be:	7e a1       	ldd	r23, Y+38	; 0x26
    51c0:	8f a1       	ldd	r24, Y+39	; 0x27
    51c2:	98 a5       	ldd	r25, Y+40	; 0x28
    51c4:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    51c8:	88 23       	and	r24, r24
    51ca:	2c f4       	brge	.+10     	; 0x51d6 <Lcd_4bit_enuInit+0x20e>
		__ticks = 1;
    51cc:	81 e0       	ldi	r24, 0x01	; 1
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	9a a7       	std	Y+42, r25	; 0x2a
    51d2:	89 a7       	std	Y+41, r24	; 0x29
    51d4:	3f c0       	rjmp	.+126    	; 0x5254 <Lcd_4bit_enuInit+0x28c>
	else if (__tmp > 65535)
    51d6:	20 e0       	ldi	r18, 0x00	; 0
    51d8:	3f ef       	ldi	r19, 0xFF	; 255
    51da:	4f e7       	ldi	r20, 0x7F	; 127
    51dc:	57 e4       	ldi	r21, 0x47	; 71
    51de:	6d a1       	ldd	r22, Y+37	; 0x25
    51e0:	7e a1       	ldd	r23, Y+38	; 0x26
    51e2:	8f a1       	ldd	r24, Y+39	; 0x27
    51e4:	98 a5       	ldd	r25, Y+40	; 0x28
    51e6:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    51ea:	18 16       	cp	r1, r24
    51ec:	4c f5       	brge	.+82     	; 0x5240 <Lcd_4bit_enuInit+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ee:	20 e0       	ldi	r18, 0x00	; 0
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	40 e2       	ldi	r20, 0x20	; 32
    51f4:	51 e4       	ldi	r21, 0x41	; 65
    51f6:	69 a1       	ldd	r22, Y+33	; 0x21
    51f8:	7a a1       	ldd	r23, Y+34	; 0x22
    51fa:	8b a1       	ldd	r24, Y+35	; 0x23
    51fc:	9c a1       	ldd	r25, Y+36	; 0x24
    51fe:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    5202:	dc 01       	movw	r26, r24
    5204:	cb 01       	movw	r24, r22
    5206:	bc 01       	movw	r22, r24
    5208:	cd 01       	movw	r24, r26
    520a:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    520e:	dc 01       	movw	r26, r24
    5210:	cb 01       	movw	r24, r22
    5212:	9a a7       	std	Y+42, r25	; 0x2a
    5214:	89 a7       	std	Y+41, r24	; 0x29
    5216:	0f c0       	rjmp	.+30     	; 0x5236 <Lcd_4bit_enuInit+0x26e>
    5218:	80 e9       	ldi	r24, 0x90	; 144
    521a:	91 e0       	ldi	r25, 0x01	; 1
    521c:	9c a7       	std	Y+44, r25	; 0x2c
    521e:	8b a7       	std	Y+43, r24	; 0x2b
    5220:	8b a5       	ldd	r24, Y+43	; 0x2b
    5222:	9c a5       	ldd	r25, Y+44	; 0x2c
    5224:	01 97       	sbiw	r24, 0x01	; 1
    5226:	f1 f7       	brne	.-4      	; 0x5224 <Lcd_4bit_enuInit+0x25c>
    5228:	9c a7       	std	Y+44, r25	; 0x2c
    522a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    522c:	89 a5       	ldd	r24, Y+41	; 0x29
    522e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5230:	01 97       	sbiw	r24, 0x01	; 1
    5232:	9a a7       	std	Y+42, r25	; 0x2a
    5234:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5236:	89 a5       	ldd	r24, Y+41	; 0x29
    5238:	9a a5       	ldd	r25, Y+42	; 0x2a
    523a:	89 2b       	or	r24, r25
    523c:	69 f7       	brne	.-38     	; 0x5218 <Lcd_4bit_enuInit+0x250>
    523e:	3f c0       	rjmp	.+126    	; 0x52be <Lcd_4bit_enuInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5240:	6d a1       	ldd	r22, Y+37	; 0x25
    5242:	7e a1       	ldd	r23, Y+38	; 0x26
    5244:	8f a1       	ldd	r24, Y+39	; 0x27
    5246:	98 a5       	ldd	r25, Y+40	; 0x28
    5248:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    524c:	dc 01       	movw	r26, r24
    524e:	cb 01       	movw	r24, r22
    5250:	9a a7       	std	Y+42, r25	; 0x2a
    5252:	89 a7       	std	Y+41, r24	; 0x29
    5254:	89 a5       	ldd	r24, Y+41	; 0x29
    5256:	9a a5       	ldd	r25, Y+42	; 0x2a
    5258:	9e a7       	std	Y+46, r25	; 0x2e
    525a:	8d a7       	std	Y+45, r24	; 0x2d
    525c:	8d a5       	ldd	r24, Y+45	; 0x2d
    525e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5260:	01 97       	sbiw	r24, 0x01	; 1
    5262:	f1 f7       	brne	.-4      	; 0x5260 <Lcd_4bit_enuInit+0x298>
    5264:	9e a7       	std	Y+46, r25	; 0x2e
    5266:	8d a7       	std	Y+45, r24	; 0x2d
    5268:	2a c0       	rjmp	.+84     	; 0x52be <Lcd_4bit_enuInit+0x2f6>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    526a:	20 e0       	ldi	r18, 0x00	; 0
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	4f e7       	ldi	r20, 0x7F	; 127
    5270:	53 e4       	ldi	r21, 0x43	; 67
    5272:	68 8d       	ldd	r22, Y+24	; 0x18
    5274:	79 8d       	ldd	r23, Y+25	; 0x19
    5276:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5278:	9b 8d       	ldd	r25, Y+27	; 0x1b
    527a:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    527e:	18 16       	cp	r1, r24
    5280:	ac f4       	brge	.+42     	; 0x52ac <Lcd_4bit_enuInit+0x2e4>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    5282:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5284:	7d 8d       	ldd	r23, Y+29	; 0x1d
    5286:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5288:	9f 8d       	ldd	r25, Y+31	; 0x1f
    528a:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    528e:	dc 01       	movw	r26, r24
    5290:	cb 01       	movw	r24, r22
    5292:	98 ab       	std	Y+48, r25	; 0x30
    5294:	8f a7       	std	Y+47, r24	; 0x2f
    5296:	8f a5       	ldd	r24, Y+47	; 0x2f
    5298:	98 a9       	ldd	r25, Y+48	; 0x30
    529a:	9a ab       	std	Y+50, r25	; 0x32
    529c:	89 ab       	std	Y+49, r24	; 0x31
    529e:	89 a9       	ldd	r24, Y+49	; 0x31
    52a0:	9a a9       	ldd	r25, Y+50	; 0x32
    52a2:	01 97       	sbiw	r24, 0x01	; 1
    52a4:	f1 f7       	brne	.-4      	; 0x52a2 <Lcd_4bit_enuInit+0x2da>
    52a6:	9a ab       	std	Y+50, r25	; 0x32
    52a8:	89 ab       	std	Y+49, r24	; 0x31
    52aa:	0f c0       	rjmp	.+30     	; 0x52ca <Lcd_4bit_enuInit+0x302>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    52ac:	68 8d       	ldd	r22, Y+24	; 0x18
    52ae:	79 8d       	ldd	r23, Y+25	; 0x19
    52b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    52b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    52b4:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    52b8:	dc 01       	movw	r26, r24
    52ba:	cb 01       	movw	r24, r22
    52bc:	88 a3       	std	Y+32, r24	; 0x20
    52be:	88 a1       	ldd	r24, Y+32	; 0x20
    52c0:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    52c2:	8b a9       	ldd	r24, Y+51	; 0x33
    52c4:	8a 95       	dec	r24
    52c6:	f1 f7       	brne	.-4      	; 0x52c4 <Lcd_4bit_enuInit+0x2fc>
    52c8:	8b ab       	std	Y+51, r24	; 0x33
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    52ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    52cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    52ce:	68 e3       	ldi	r22, 0x38	; 56
    52d0:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    52d4:	89 83       	std	Y+1, r24	; 0x01

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    52d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    52d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    52da:	61 e0       	ldi	r22, 0x01	; 1
    52dc:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    52e0:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    52e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    52e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    52e6:	62 e0       	ldi	r22, 0x02	; 2
    52e8:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    52ec:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    52ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    52f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    52f2:	66 e0       	ldi	r22, 0x06	; 6
    52f4:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    52f8:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    52fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    52fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    52fe:	6c e0       	ldi	r22, 0x0C	; 12
    5300:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    5304:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    5306:	8e ad       	ldd	r24, Y+62	; 0x3e
    5308:	9f ad       	ldd	r25, Y+63	; 0x3f
    530a:	68 e2       	ldi	r22, 0x28	; 40
    530c:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    5310:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    5312:	8e ad       	ldd	r24, Y+62	; 0x3e
    5314:	9f ad       	ldd	r25, Y+63	; 0x3f
    5316:	60 e8       	ldi	r22, 0x80	; 128
    5318:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    531c:	89 83       	std	Y+1, r24	; 0x01
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    531e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5320:	9f ad       	ldd	r25, Y+63	; 0x3f
    5322:	61 e0       	ldi	r22, 0x01	; 1
    5324:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    5328:	89 83       	std	Y+1, r24	; 0x01
    532a:	80 e0       	ldi	r24, 0x00	; 0
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	a0 ea       	ldi	r26, 0xA0	; 160
    5330:	b0 e4       	ldi	r27, 0x40	; 64
    5332:	8a 87       	std	Y+10, r24	; 0x0a
    5334:	9b 87       	std	Y+11, r25	; 0x0b
    5336:	ac 87       	std	Y+12, r26	; 0x0c
    5338:	bd 87       	std	Y+13, r27	; 0x0d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	4a e7       	ldi	r20, 0x7A	; 122
    5340:	55 e4       	ldi	r21, 0x45	; 69
    5342:	6a 85       	ldd	r22, Y+10	; 0x0a
    5344:	7b 85       	ldd	r23, Y+11	; 0x0b
    5346:	8c 85       	ldd	r24, Y+12	; 0x0c
    5348:	9d 85       	ldd	r25, Y+13	; 0x0d
    534a:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    534e:	dc 01       	movw	r26, r24
    5350:	cb 01       	movw	r24, r22
    5352:	8e 87       	std	Y+14, r24	; 0x0e
    5354:	9f 87       	std	Y+15, r25	; 0x0f
    5356:	a8 8b       	std	Y+16, r26	; 0x10
    5358:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    535a:	20 e0       	ldi	r18, 0x00	; 0
    535c:	30 e0       	ldi	r19, 0x00	; 0
    535e:	40 e8       	ldi	r20, 0x80	; 128
    5360:	5f e3       	ldi	r21, 0x3F	; 63
    5362:	6e 85       	ldd	r22, Y+14	; 0x0e
    5364:	7f 85       	ldd	r23, Y+15	; 0x0f
    5366:	88 89       	ldd	r24, Y+16	; 0x10
    5368:	99 89       	ldd	r25, Y+17	; 0x11
    536a:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    536e:	88 23       	and	r24, r24
    5370:	2c f4       	brge	.+10     	; 0x537c <Lcd_4bit_enuInit+0x3b4>
		__ticks = 1;
    5372:	81 e0       	ldi	r24, 0x01	; 1
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	9b 8b       	std	Y+19, r25	; 0x13
    5378:	8a 8b       	std	Y+18, r24	; 0x12
    537a:	3f c0       	rjmp	.+126    	; 0x53fa <Lcd_4bit_enuInit+0x432>
	else if (__tmp > 65535)
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	3f ef       	ldi	r19, 0xFF	; 255
    5380:	4f e7       	ldi	r20, 0x7F	; 127
    5382:	57 e4       	ldi	r21, 0x47	; 71
    5384:	6e 85       	ldd	r22, Y+14	; 0x0e
    5386:	7f 85       	ldd	r23, Y+15	; 0x0f
    5388:	88 89       	ldd	r24, Y+16	; 0x10
    538a:	99 89       	ldd	r25, Y+17	; 0x11
    538c:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    5390:	18 16       	cp	r1, r24
    5392:	4c f5       	brge	.+82     	; 0x53e6 <Lcd_4bit_enuInit+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5394:	20 e0       	ldi	r18, 0x00	; 0
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	40 e2       	ldi	r20, 0x20	; 32
    539a:	51 e4       	ldi	r21, 0x41	; 65
    539c:	6a 85       	ldd	r22, Y+10	; 0x0a
    539e:	7b 85       	ldd	r23, Y+11	; 0x0b
    53a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    53a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    53a4:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    53a8:	dc 01       	movw	r26, r24
    53aa:	cb 01       	movw	r24, r22
    53ac:	bc 01       	movw	r22, r24
    53ae:	cd 01       	movw	r24, r26
    53b0:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	9b 8b       	std	Y+19, r25	; 0x13
    53ba:	8a 8b       	std	Y+18, r24	; 0x12
    53bc:	0f c0       	rjmp	.+30     	; 0x53dc <Lcd_4bit_enuInit+0x414>
    53be:	80 e9       	ldi	r24, 0x90	; 144
    53c0:	91 e0       	ldi	r25, 0x01	; 1
    53c2:	9d 8b       	std	Y+21, r25	; 0x15
    53c4:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    53c6:	8c 89       	ldd	r24, Y+20	; 0x14
    53c8:	9d 89       	ldd	r25, Y+21	; 0x15
    53ca:	01 97       	sbiw	r24, 0x01	; 1
    53cc:	f1 f7       	brne	.-4      	; 0x53ca <Lcd_4bit_enuInit+0x402>
    53ce:	9d 8b       	std	Y+21, r25	; 0x15
    53d0:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53d2:	8a 89       	ldd	r24, Y+18	; 0x12
    53d4:	9b 89       	ldd	r25, Y+19	; 0x13
    53d6:	01 97       	sbiw	r24, 0x01	; 1
    53d8:	9b 8b       	std	Y+19, r25	; 0x13
    53da:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53dc:	8a 89       	ldd	r24, Y+18	; 0x12
    53de:	9b 89       	ldd	r25, Y+19	; 0x13
    53e0:	89 2b       	or	r24, r25
    53e2:	69 f7       	brne	.-38     	; 0x53be <Lcd_4bit_enuInit+0x3f6>
    53e4:	14 c0       	rjmp	.+40     	; 0x540e <Lcd_4bit_enuInit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53e6:	6e 85       	ldd	r22, Y+14	; 0x0e
    53e8:	7f 85       	ldd	r23, Y+15	; 0x0f
    53ea:	88 89       	ldd	r24, Y+16	; 0x10
    53ec:	99 89       	ldd	r25, Y+17	; 0x11
    53ee:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    53f2:	dc 01       	movw	r26, r24
    53f4:	cb 01       	movw	r24, r22
    53f6:	9b 8b       	std	Y+19, r25	; 0x13
    53f8:	8a 8b       	std	Y+18, r24	; 0x12
    53fa:	8a 89       	ldd	r24, Y+18	; 0x12
    53fc:	9b 89       	ldd	r25, Y+19	; 0x13
    53fe:	9f 8b       	std	Y+23, r25	; 0x17
    5400:	8e 8b       	std	Y+22, r24	; 0x16
    5402:	8e 89       	ldd	r24, Y+22	; 0x16
    5404:	9f 89       	ldd	r25, Y+23	; 0x17
    5406:	01 97       	sbiw	r24, 0x01	; 1
    5408:	f1 f7       	brne	.-4      	; 0x5406 <Lcd_4bit_enuInit+0x43e>
    540a:	9f 8b       	std	Y+23, r25	; 0x17
    540c:	8e 8b       	std	Y+22, r24	; 0x16
	}




	return Loc_enuStatus;
    540e:	89 81       	ldd	r24, Y+1	; 0x01

}
    5410:	ef 96       	adiw	r28, 0x3f	; 63
    5412:	0f b6       	in	r0, 0x3f	; 63
    5414:	f8 94       	cli
    5416:	de bf       	out	0x3e, r29	; 62
    5418:	0f be       	out	0x3f, r0	; 63
    541a:	cd bf       	out	0x3d, r28	; 61
    541c:	df 91       	pop	r29
    541e:	cf 91       	pop	r28
    5420:	08 95       	ret

00005422 <Lcd_4bit_enuSendCommand>:


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    5422:	cf 93       	push	r28
    5424:	df 93       	push	r29
    5426:	00 d0       	rcall	.+0      	; 0x5428 <Lcd_4bit_enuSendCommand+0x6>
    5428:	00 d0       	rcall	.+0      	; 0x542a <Lcd_4bit_enuSendCommand+0x8>
    542a:	1f 92       	push	r1
    542c:	cd b7       	in	r28, 0x3d	; 61
    542e:	de b7       	in	r29, 0x3e	; 62
    5430:	9c 83       	std	Y+4, r25	; 0x04
    5432:	8b 83       	std	Y+3, r24	; 0x03
    5434:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    5436:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
    5438:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    543a:	8b 81       	ldd	r24, Y+3	; 0x03
    543c:	9c 81       	ldd	r25, Y+4	; 0x04
    543e:	89 2b       	or	r24, r25
    5440:	19 f4       	brne	.+6      	; 0x5448 <Lcd_4bit_enuSendCommand+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    5442:	82 e0       	ldi	r24, 0x02	; 2
    5444:	89 83       	std	Y+1, r24	; 0x01
    5446:	22 c0       	rjmp	.+68     	; 0x548c <Lcd_4bit_enuSendCommand+0x6a>

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    5448:	8b 81       	ldd	r24, Y+3	; 0x03
    544a:	9c 81       	ldd	r25, Y+4	; 0x04
    544c:	fc 01       	movw	r30, r24
    544e:	84 81       	ldd	r24, Z+4	; 0x04
    5450:	60 e0       	ldi	r22, 0x00	; 0
    5452:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5456:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    5458:	8d 81       	ldd	r24, Y+5	; 0x05
    545a:	28 2f       	mov	r18, r24
    545c:	22 95       	swap	r18
    545e:	2f 70       	andi	r18, 0x0F	; 15
    5460:	8b 81       	ldd	r24, Y+3	; 0x03
    5462:	9c 81       	ldd	r25, Y+4	; 0x04
    5464:	62 2f       	mov	r22, r18
    5466:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <Lcd_4bit_enuSet4BitsOnPins>
    546a:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    546c:	8b 81       	ldd	r24, Y+3	; 0x03
    546e:	9c 81       	ldd	r25, Y+4	; 0x04
    5470:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <Lcd_4bit_enuSendEnableSignal>
    5474:	89 83       	std	Y+1, r24	; 0x01

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    5476:	8b 81       	ldd	r24, Y+3	; 0x03
    5478:	9c 81       	ldd	r25, Y+4	; 0x04
    547a:	6d 81       	ldd	r22, Y+5	; 0x05
    547c:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <Lcd_4bit_enuSet4BitsOnPins>
    5480:	89 83       	std	Y+1, r24	; 0x01
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    5482:	8b 81       	ldd	r24, Y+3	; 0x03
    5484:	9c 81       	ldd	r25, Y+4	; 0x04
    5486:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <Lcd_4bit_enuSendEnableSignal>
    548a:	89 83       	std	Y+1, r24	; 0x01


		// 1111 0000


		return Loc_enuStatus;
    548c:	89 81       	ldd	r24, Y+1	; 0x01

}
    548e:	0f 90       	pop	r0
    5490:	0f 90       	pop	r0
    5492:	0f 90       	pop	r0
    5494:	0f 90       	pop	r0
    5496:	0f 90       	pop	r0
    5498:	df 91       	pop	r29
    549a:	cf 91       	pop	r28
    549c:	08 95       	ret

0000549e <Lcd_4bit_enuDisplayCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    549e:	cf 93       	push	r28
    54a0:	df 93       	push	r29
    54a2:	00 d0       	rcall	.+0      	; 0x54a4 <Lcd_4bit_enuDisplayCharacter+0x6>
    54a4:	00 d0       	rcall	.+0      	; 0x54a6 <Lcd_4bit_enuDisplayCharacter+0x8>
    54a6:	cd b7       	in	r28, 0x3d	; 61
    54a8:	de b7       	in	r29, 0x3e	; 62
    54aa:	9b 83       	std	Y+3, r25	; 0x03
    54ac:	8a 83       	std	Y+2, r24	; 0x02
    54ae:	6c 83       	std	Y+4, r22	; 0x04

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    54b0:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    54b2:	8a 81       	ldd	r24, Y+2	; 0x02
    54b4:	9b 81       	ldd	r25, Y+3	; 0x03
    54b6:	89 2b       	or	r24, r25
    54b8:	19 f4       	brne	.+6      	; 0x54c0 <Lcd_4bit_enuDisplayCharacter+0x22>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    54ba:	82 e0       	ldi	r24, 0x02	; 2
    54bc:	89 83       	std	Y+1, r24	; 0x01
    54be:	22 c0       	rjmp	.+68     	; 0x5504 <Lcd_4bit_enuDisplayCharacter+0x66>

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    54c0:	8a 81       	ldd	r24, Y+2	; 0x02
    54c2:	9b 81       	ldd	r25, Y+3	; 0x03
    54c4:	fc 01       	movw	r30, r24
    54c6:	84 81       	ldd	r24, Z+4	; 0x04
    54c8:	61 e0       	ldi	r22, 0x01	; 1
    54ca:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    54ce:	89 83       	std	Y+1, r24	; 0x01
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    54d0:	8c 81       	ldd	r24, Y+4	; 0x04
    54d2:	28 2f       	mov	r18, r24
    54d4:	22 95       	swap	r18
    54d6:	2f 70       	andi	r18, 0x0F	; 15
    54d8:	8a 81       	ldd	r24, Y+2	; 0x02
    54da:	9b 81       	ldd	r25, Y+3	; 0x03
    54dc:	62 2f       	mov	r22, r18
    54de:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <Lcd_4bit_enuSet4BitsOnPins>
    54e2:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    54e4:	8a 81       	ldd	r24, Y+2	; 0x02
    54e6:	9b 81       	ldd	r25, Y+3	; 0x03
    54e8:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <Lcd_4bit_enuSendEnableSignal>
    54ec:	89 83       	std	Y+1, r24	; 0x01

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    54ee:	8a 81       	ldd	r24, Y+2	; 0x02
    54f0:	9b 81       	ldd	r25, Y+3	; 0x03
    54f2:	6c 81       	ldd	r22, Y+4	; 0x04
    54f4:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <Lcd_4bit_enuSet4BitsOnPins>
    54f8:	89 83       	std	Y+1, r24	; 0x01
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    54fa:	8a 81       	ldd	r24, Y+2	; 0x02
    54fc:	9b 81       	ldd	r25, Y+3	; 0x03
    54fe:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <Lcd_4bit_enuSendEnableSignal>
    5502:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    5504:	89 81       	ldd	r24, Y+1	; 0x01

}
    5506:	0f 90       	pop	r0
    5508:	0f 90       	pop	r0
    550a:	0f 90       	pop	r0
    550c:	0f 90       	pop	r0
    550e:	df 91       	pop	r29
    5510:	cf 91       	pop	r28
    5512:	08 95       	ret

00005514 <Lcd_4bit_enuDisplayCharacterWithPosition>:


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    5514:	cf 93       	push	r28
    5516:	df 93       	push	r29
    5518:	00 d0       	rcall	.+0      	; 0x551a <Lcd_4bit_enuDisplayCharacterWithPosition+0x6>
    551a:	00 d0       	rcall	.+0      	; 0x551c <Lcd_4bit_enuDisplayCharacterWithPosition+0x8>
    551c:	00 d0       	rcall	.+0      	; 0x551e <Lcd_4bit_enuDisplayCharacterWithPosition+0xa>
    551e:	cd b7       	in	r28, 0x3d	; 61
    5520:	de b7       	in	r29, 0x3e	; 62
    5522:	9b 83       	std	Y+3, r25	; 0x03
    5524:	8a 83       	std	Y+2, r24	; 0x02
    5526:	6c 83       	std	Y+4, r22	; 0x04
    5528:	4d 83       	std	Y+5, r20	; 0x05
    552a:	2e 83       	std	Y+6, r18	; 0x06
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    552c:	19 82       	std	Y+1, r1	; 0x01
			if( NULL == Address_Lcd){
    552e:	8a 81       	ldd	r24, Y+2	; 0x02
    5530:	9b 81       	ldd	r25, Y+3	; 0x03
    5532:	89 2b       	or	r24, r25
    5534:	19 f4       	brne	.+6      	; 0x553c <Lcd_4bit_enuDisplayCharacterWithPosition+0x28>
				Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    5536:	82 e0       	ldi	r24, 0x02	; 2
    5538:	89 83       	std	Y+1, r24	; 0x01
    553a:	29 c0       	rjmp	.+82     	; 0x558e <Lcd_4bit_enuDisplayCharacterWithPosition+0x7a>

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    553c:	8a 81       	ldd	r24, Y+2	; 0x02
    553e:	9b 81       	ldd	r25, Y+3	; 0x03
    5540:	4e 81       	ldd	r20, Y+6	; 0x06
    5542:	6d 81       	ldd	r22, Y+5	; 0x05
    5544:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <Lcd_4bit_enuGoToXY>
    5548:	89 83       	std	Y+1, r24	; 0x01
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    554a:	8a 81       	ldd	r24, Y+2	; 0x02
    554c:	9b 81       	ldd	r25, Y+3	; 0x03
    554e:	fc 01       	movw	r30, r24
    5550:	84 81       	ldd	r24, Z+4	; 0x04
    5552:	61 e0       	ldi	r22, 0x01	; 1
    5554:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5558:	89 83       	std	Y+1, r24	; 0x01
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    555a:	8c 81       	ldd	r24, Y+4	; 0x04
    555c:	28 2f       	mov	r18, r24
    555e:	22 95       	swap	r18
    5560:	2f 70       	andi	r18, 0x0F	; 15
    5562:	8a 81       	ldd	r24, Y+2	; 0x02
    5564:	9b 81       	ldd	r25, Y+3	; 0x03
    5566:	62 2f       	mov	r22, r18
    5568:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <Lcd_4bit_enuSet4BitsOnPins>
    556c:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    556e:	8a 81       	ldd	r24, Y+2	; 0x02
    5570:	9b 81       	ldd	r25, Y+3	; 0x03
    5572:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <Lcd_4bit_enuSendEnableSignal>
    5576:	89 83       	std	Y+1, r24	; 0x01

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    5578:	8a 81       	ldd	r24, Y+2	; 0x02
    557a:	9b 81       	ldd	r25, Y+3	; 0x03
    557c:	6c 81       	ldd	r22, Y+4	; 0x04
    557e:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <Lcd_4bit_enuSet4BitsOnPins>
    5582:	89 83       	std	Y+1, r24	; 0x01
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    5584:	8a 81       	ldd	r24, Y+2	; 0x02
    5586:	9b 81       	ldd	r25, Y+3	; 0x03
    5588:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <Lcd_4bit_enuSendEnableSignal>
    558c:	89 83       	std	Y+1, r24	; 0x01
			}




			return Loc_enuStatus;
    558e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5590:	26 96       	adiw	r28, 0x06	; 6
    5592:	0f b6       	in	r0, 0x3f	; 63
    5594:	f8 94       	cli
    5596:	de bf       	out	0x3e, r29	; 62
    5598:	0f be       	out	0x3f, r0	; 63
    559a:	cd bf       	out	0x3d, r28	; 61
    559c:	df 91       	pop	r29
    559e:	cf 91       	pop	r28
    55a0:	08 95       	ret

000055a2 <Lcd_4bit_enuDisplayStringWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayStringWithPosition(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String, u8 Copy_u8Row, u8 Copy_u8Col){
    55a2:	cf 93       	push	r28
    55a4:	df 93       	push	r29
    55a6:	cd b7       	in	r28, 0x3d	; 61
    55a8:	de b7       	in	r29, 0x3e	; 62
    55aa:	28 97       	sbiw	r28, 0x08	; 8
    55ac:	0f b6       	in	r0, 0x3f	; 63
    55ae:	f8 94       	cli
    55b0:	de bf       	out	0x3e, r29	; 62
    55b2:	0f be       	out	0x3f, r0	; 63
    55b4:	cd bf       	out	0x3d, r28	; 61
    55b6:	9c 83       	std	Y+4, r25	; 0x04
    55b8:	8b 83       	std	Y+3, r24	; 0x03
    55ba:	7e 83       	std	Y+6, r23	; 0x06
    55bc:	6d 83       	std	Y+5, r22	; 0x05
    55be:	4f 83       	std	Y+7, r20	; 0x07
    55c0:	28 87       	std	Y+8, r18	; 0x08

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    55c2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    55c4:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    55c6:	8b 81       	ldd	r24, Y+3	; 0x03
    55c8:	9c 81       	ldd	r25, Y+4	; 0x04
    55ca:	89 2b       	or	r24, r25
    55cc:	21 f0       	breq	.+8      	; 0x55d6 <Lcd_4bit_enuDisplayStringWithPosition+0x34>
    55ce:	8d 81       	ldd	r24, Y+5	; 0x05
    55d0:	9e 81       	ldd	r25, Y+6	; 0x06
    55d2:	89 2b       	or	r24, r25
    55d4:	19 f4       	brne	.+6      	; 0x55dc <Lcd_4bit_enuDisplayStringWithPosition+0x3a>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    55d6:	82 e0       	ldi	r24, 0x02	; 2
    55d8:	89 83       	std	Y+1, r24	; 0x01
    55da:	25 c0       	rjmp	.+74     	; 0x5626 <Lcd_4bit_enuDisplayStringWithPosition+0x84>

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    55dc:	8b 81       	ldd	r24, Y+3	; 0x03
    55de:	9c 81       	ldd	r25, Y+4	; 0x04
    55e0:	48 85       	ldd	r20, Y+8	; 0x08
    55e2:	6f 81       	ldd	r22, Y+7	; 0x07
    55e4:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <Lcd_4bit_enuGoToXY>
    55e8:	89 83       	std	Y+1, r24	; 0x01
			while(Address_pu8String[Loc_u8Counter] !=0){
    55ea:	12 c0       	rjmp	.+36     	; 0x5610 <Lcd_4bit_enuDisplayStringWithPosition+0x6e>
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    55ec:	8a 81       	ldd	r24, Y+2	; 0x02
    55ee:	88 2f       	mov	r24, r24
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	2d 81       	ldd	r18, Y+5	; 0x05
    55f4:	3e 81       	ldd	r19, Y+6	; 0x06
    55f6:	82 0f       	add	r24, r18
    55f8:	93 1f       	adc	r25, r19
    55fa:	fc 01       	movw	r30, r24
    55fc:	20 81       	ld	r18, Z
    55fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5600:	9c 81       	ldd	r25, Y+4	; 0x04
    5602:	62 2f       	mov	r22, r18
    5604:	0e 94 4f 2a 	call	0x549e	; 0x549e <Lcd_4bit_enuDisplayCharacter>
    5608:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    560a:	8a 81       	ldd	r24, Y+2	; 0x02
    560c:	8f 5f       	subi	r24, 0xFF	; 255
    560e:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
			while(Address_pu8String[Loc_u8Counter] !=0){
    5610:	8a 81       	ldd	r24, Y+2	; 0x02
    5612:	88 2f       	mov	r24, r24
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	2d 81       	ldd	r18, Y+5	; 0x05
    5618:	3e 81       	ldd	r19, Y+6	; 0x06
    561a:	82 0f       	add	r24, r18
    561c:	93 1f       	adc	r25, r19
    561e:	fc 01       	movw	r30, r24
    5620:	80 81       	ld	r24, Z
    5622:	88 23       	and	r24, r24
    5624:	19 f7       	brne	.-58     	; 0x55ec <Lcd_4bit_enuDisplayStringWithPosition+0x4a>
		}




		return Loc_enuStatus;
    5626:	89 81       	ldd	r24, Y+1	; 0x01

}
    5628:	28 96       	adiw	r28, 0x08	; 8
    562a:	0f b6       	in	r0, 0x3f	; 63
    562c:	f8 94       	cli
    562e:	de bf       	out	0x3e, r29	; 62
    5630:	0f be       	out	0x3f, r0	; 63
    5632:	cd bf       	out	0x3d, r28	; 61
    5634:	df 91       	pop	r29
    5636:	cf 91       	pop	r28
    5638:	08 95       	ret

0000563a <Lcd_4bit_enuCreateCustomCharacter>:

Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	cd b7       	in	r28, 0x3d	; 61
    5640:	de b7       	in	r29, 0x3e	; 62
    5642:	27 97       	sbiw	r28, 0x07	; 7
    5644:	0f b6       	in	r0, 0x3f	; 63
    5646:	f8 94       	cli
    5648:	de bf       	out	0x3e, r29	; 62
    564a:	0f be       	out	0x3f, r0	; 63
    564c:	cd bf       	out	0x3d, r28	; 61
    564e:	9c 83       	std	Y+4, r25	; 0x04
    5650:	8b 83       	std	Y+3, r24	; 0x03
    5652:	7e 83       	std	Y+6, r23	; 0x06
    5654:	6d 83       	std	Y+5, r22	; 0x05
    5656:	4f 83       	std	Y+7, r20	; 0x07

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    5658:	19 82       	std	Y+1, r1	; 0x01
	u8	Loc_u8Counter =ZERO_VALUE;
    565a:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    565c:	8b 81       	ldd	r24, Y+3	; 0x03
    565e:	9c 81       	ldd	r25, Y+4	; 0x04
    5660:	89 2b       	or	r24, r25
    5662:	21 f0       	breq	.+8      	; 0x566c <Lcd_4bit_enuCreateCustomCharacter+0x32>
    5664:	8d 81       	ldd	r24, Y+5	; 0x05
    5666:	9e 81       	ldd	r25, Y+6	; 0x06
    5668:	89 2b       	or	r24, r25
    566a:	19 f4       	brne	.+6      	; 0x5672 <Lcd_4bit_enuCreateCustomCharacter+0x38>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    566c:	82 e0       	ldi	r24, 0x02	; 2
    566e:	89 83       	std	Y+1, r24	; 0x01
    5670:	30 c0       	rjmp	.+96     	; 0x56d2 <Lcd_4bit_enuCreateCustomCharacter+0x98>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    5672:	8f 81       	ldd	r24, Y+7	; 0x07
    5674:	88 30       	cpi	r24, 0x08	; 8
    5676:	18 f0       	brcs	.+6      	; 0x567e <Lcd_4bit_enuCreateCustomCharacter+0x44>
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    5678:	83 e0       	ldi	r24, 0x03	; 3
    567a:	89 83       	std	Y+1, r24	; 0x01
    567c:	2a c0       	rjmp	.+84     	; 0x56d2 <Lcd_4bit_enuCreateCustomCharacter+0x98>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    567e:	8f 81       	ldd	r24, Y+7	; 0x07
    5680:	88 2f       	mov	r24, r24
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	08 96       	adiw	r24, 0x08	; 8
    5686:	28 2f       	mov	r18, r24
    5688:	22 0f       	add	r18, r18
    568a:	22 0f       	add	r18, r18
    568c:	22 0f       	add	r18, r18
    568e:	8b 81       	ldd	r24, Y+3	; 0x03
    5690:	9c 81       	ldd	r25, Y+4	; 0x04
    5692:	62 2f       	mov	r22, r18
    5694:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    5698:	89 83       	std	Y+1, r24	; 0x01

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    569a:	1a 82       	std	Y+2, r1	; 0x02
    569c:	11 c0       	rjmp	.+34     	; 0x56c0 <Lcd_4bit_enuCreateCustomCharacter+0x86>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    569e:	8a 81       	ldd	r24, Y+2	; 0x02
    56a0:	88 2f       	mov	r24, r24
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	2d 81       	ldd	r18, Y+5	; 0x05
    56a6:	3e 81       	ldd	r19, Y+6	; 0x06
    56a8:	82 0f       	add	r24, r18
    56aa:	93 1f       	adc	r25, r19
    56ac:	fc 01       	movw	r30, r24
    56ae:	20 81       	ld	r18, Z
    56b0:	8b 81       	ldd	r24, Y+3	; 0x03
    56b2:	9c 81       	ldd	r25, Y+4	; 0x04
    56b4:	62 2f       	mov	r22, r18
    56b6:	0e 94 4f 2a 	call	0x549e	; 0x549e <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    56ba:	8a 81       	ldd	r24, Y+2	; 0x02
    56bc:	8f 5f       	subi	r24, 0xFF	; 255
    56be:	8a 83       	std	Y+2, r24	; 0x02
    56c0:	8a 81       	ldd	r24, Y+2	; 0x02
    56c2:	88 30       	cpi	r24, 0x08	; 8
    56c4:	60 f3       	brcs	.-40     	; 0x569e <Lcd_4bit_enuCreateCustomCharacter+0x64>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    56c6:	8b 81       	ldd	r24, Y+3	; 0x03
    56c8:	9c 81       	ldd	r25, Y+4	; 0x04
    56ca:	60 e8       	ldi	r22, 0x80	; 128
    56cc:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    56d0:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    56d2:	89 81       	ldd	r24, Y+1	; 0x01

}
    56d4:	27 96       	adiw	r28, 0x07	; 7
    56d6:	0f b6       	in	r0, 0x3f	; 63
    56d8:	f8 94       	cli
    56da:	de bf       	out	0x3e, r29	; 62
    56dc:	0f be       	out	0x3f, r0	; 63
    56de:	cd bf       	out	0x3d, r28	; 61
    56e0:	df 91       	pop	r29
    56e2:	cf 91       	pop	r28
    56e4:	08 95       	ret

000056e6 <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){
    56e6:	cf 93       	push	r28
    56e8:	df 93       	push	r29
    56ea:	00 d0       	rcall	.+0      	; 0x56ec <Lcd_4bit_enuGoToXY+0x6>
    56ec:	00 d0       	rcall	.+0      	; 0x56ee <Lcd_4bit_enuGoToXY+0x8>
    56ee:	1f 92       	push	r1
    56f0:	cd b7       	in	r28, 0x3d	; 61
    56f2:	de b7       	in	r29, 0x3e	; 62
    56f4:	9b 83       	std	Y+3, r25	; 0x03
    56f6:	8a 83       	std	Y+2, r24	; 0x02
    56f8:	6c 83       	std	Y+4, r22	; 0x04
    56fa:	4d 83       	std	Y+5, r20	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    56fc:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    56fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5700:	9b 81       	ldd	r25, Y+3	; 0x03
    5702:	89 2b       	or	r24, r25
    5704:	19 f4       	brne	.+6      	; 0x570c <Lcd_4bit_enuGoToXY+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    5706:	82 e0       	ldi	r24, 0x02	; 2
    5708:	89 83       	std	Y+1, r24	; 0x01
    570a:	56 c0       	rjmp	.+172    	; 0x57b8 <Lcd_4bit_enuGoToXY+0xd2>

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    570c:	8c 81       	ldd	r24, Y+4	; 0x04
    570e:	85 30       	cpi	r24, 0x05	; 5
    5710:	18 f0       	brcs	.+6      	; 0x5718 <Lcd_4bit_enuGoToXY+0x32>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    5712:	85 e0       	ldi	r24, 0x05	; 5
    5714:	89 83       	std	Y+1, r24	; 0x01
    5716:	50 c0       	rjmp	.+160    	; 0x57b8 <Lcd_4bit_enuGoToXY+0xd2>
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    5718:	8d 81       	ldd	r24, Y+5	; 0x05
    571a:	85 31       	cpi	r24, 0x15	; 21
    571c:	18 f0       	brcs	.+6      	; 0x5724 <Lcd_4bit_enuGoToXY+0x3e>
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    571e:	84 e0       	ldi	r24, 0x04	; 4
    5720:	89 83       	std	Y+1, r24	; 0x01
    5722:	4a c0       	rjmp	.+148    	; 0x57b8 <Lcd_4bit_enuGoToXY+0xd2>
		}
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;
    5724:	8d 81       	ldd	r24, Y+5	; 0x05
    5726:	81 50       	subi	r24, 0x01	; 1
    5728:	8d 83       	std	Y+5, r24	; 0x05

			        switch(Copy_u8Row){
    572a:	8c 81       	ldd	r24, Y+4	; 0x04
    572c:	88 2f       	mov	r24, r24
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	82 30       	cpi	r24, 0x02	; 2
    5732:	91 05       	cpc	r25, r1
    5734:	c9 f0       	breq	.+50     	; 0x5768 <Lcd_4bit_enuGoToXY+0x82>
    5736:	83 30       	cpi	r24, 0x03	; 3
    5738:	91 05       	cpc	r25, r1
    573a:	1c f4       	brge	.+6      	; 0x5742 <Lcd_4bit_enuGoToXY+0x5c>
    573c:	01 97       	sbiw	r24, 0x01	; 1
    573e:	39 f0       	breq	.+14     	; 0x574e <Lcd_4bit_enuGoToXY+0x68>
    5740:	3a c0       	rjmp	.+116    	; 0x57b6 <Lcd_4bit_enuGoToXY+0xd0>
    5742:	83 30       	cpi	r24, 0x03	; 3
    5744:	91 05       	cpc	r25, r1
    5746:	e9 f0       	breq	.+58     	; 0x5782 <Lcd_4bit_enuGoToXY+0x9c>
    5748:	04 97       	sbiw	r24, 0x04	; 4
    574a:	41 f1       	breq	.+80     	; 0x579c <Lcd_4bit_enuGoToXY+0xb6>
    574c:	34 c0       	rjmp	.+104    	; 0x57b6 <Lcd_4bit_enuGoToXY+0xd0>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    574e:	8d 81       	ldd	r24, Y+5	; 0x05
    5750:	20 e8       	ldi	r18, 0x80	; 128
    5752:	28 0f       	add	r18, r24
    5754:	8a 81       	ldd	r24, Y+2	; 0x02
    5756:	9b 81       	ldd	r25, Y+3	; 0x03
    5758:	62 2f       	mov	r22, r18
    575a:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    575e:	98 2f       	mov	r25, r24
    5760:	89 81       	ldd	r24, Y+1	; 0x01
    5762:	89 23       	and	r24, r25
    5764:	89 83       	std	Y+1, r24	; 0x01
			                break;
    5766:	28 c0       	rjmp	.+80     	; 0x57b8 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    5768:	8d 81       	ldd	r24, Y+5	; 0x05
    576a:	20 ec       	ldi	r18, 0xC0	; 192
    576c:	28 0f       	add	r18, r24
    576e:	8a 81       	ldd	r24, Y+2	; 0x02
    5770:	9b 81       	ldd	r25, Y+3	; 0x03
    5772:	62 2f       	mov	r22, r18
    5774:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    5778:	98 2f       	mov	r25, r24
    577a:	89 81       	ldd	r24, Y+1	; 0x01
    577c:	89 23       	and	r24, r25
    577e:	89 83       	std	Y+1, r24	; 0x01
			                break;
    5780:	1b c0       	rjmp	.+54     	; 0x57b8 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    5782:	8d 81       	ldd	r24, Y+5	; 0x05
    5784:	24 e9       	ldi	r18, 0x94	; 148
    5786:	28 0f       	add	r18, r24
    5788:	8a 81       	ldd	r24, Y+2	; 0x02
    578a:	9b 81       	ldd	r25, Y+3	; 0x03
    578c:	62 2f       	mov	r22, r18
    578e:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    5792:	98 2f       	mov	r25, r24
    5794:	89 81       	ldd	r24, Y+1	; 0x01
    5796:	89 23       	and	r24, r25
    5798:	89 83       	std	Y+1, r24	; 0x01
			                break;
    579a:	0e c0       	rjmp	.+28     	; 0x57b8 <Lcd_4bit_enuGoToXY+0xd2>

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    579c:	8d 81       	ldd	r24, Y+5	; 0x05
    579e:	24 ed       	ldi	r18, 0xD4	; 212
    57a0:	28 0f       	add	r18, r24
    57a2:	8a 81       	ldd	r24, Y+2	; 0x02
    57a4:	9b 81       	ldd	r25, Y+3	; 0x03
    57a6:	62 2f       	mov	r22, r18
    57a8:	0e 94 11 2a 	call	0x5422	; 0x5422 <Lcd_4bit_enuSendCommand>
    57ac:	98 2f       	mov	r25, r24
    57ae:	89 81       	ldd	r24, Y+1	; 0x01
    57b0:	89 23       	and	r24, r25
    57b2:	89 83       	std	Y+1, r24	; 0x01
			                break;
    57b4:	01 c0       	rjmp	.+2      	; 0x57b8 <Lcd_4bit_enuGoToXY+0xd2>

			            default :
			                Loc_enuStatus = LCD_STATUS_OK;
    57b6:	19 82       	std	Y+1, r1	; 0x01
		}




		return Loc_enuStatus;
    57b8:	89 81       	ldd	r24, Y+1	; 0x01

}
    57ba:	0f 90       	pop	r0
    57bc:	0f 90       	pop	r0
    57be:	0f 90       	pop	r0
    57c0:	0f 90       	pop	r0
    57c2:	0f 90       	pop	r0
    57c4:	df 91       	pop	r29
    57c6:	cf 91       	pop	r28
    57c8:	08 95       	ret

000057ca <Lcd_4bit_enuDisplayString>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    57ca:	cf 93       	push	r28
    57cc:	df 93       	push	r29
    57ce:	00 d0       	rcall	.+0      	; 0x57d0 <Lcd_4bit_enuDisplayString+0x6>
    57d0:	00 d0       	rcall	.+0      	; 0x57d2 <Lcd_4bit_enuDisplayString+0x8>
    57d2:	00 d0       	rcall	.+0      	; 0x57d4 <Lcd_4bit_enuDisplayString+0xa>
    57d4:	cd b7       	in	r28, 0x3d	; 61
    57d6:	de b7       	in	r29, 0x3e	; 62
    57d8:	9c 83       	std	Y+4, r25	; 0x04
    57da:	8b 83       	std	Y+3, r24	; 0x03
    57dc:	7e 83       	std	Y+6, r23	; 0x06
    57de:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    57e0:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    57e2:	1a 82       	std	Y+2, r1	; 0x02
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    57e4:	8b 81       	ldd	r24, Y+3	; 0x03
    57e6:	9c 81       	ldd	r25, Y+4	; 0x04
    57e8:	89 2b       	or	r24, r25
    57ea:	21 f0       	breq	.+8      	; 0x57f4 <Lcd_4bit_enuDisplayString+0x2a>
    57ec:	8d 81       	ldd	r24, Y+5	; 0x05
    57ee:	9e 81       	ldd	r25, Y+6	; 0x06
    57f0:	89 2b       	or	r24, r25
    57f2:	a9 f4       	brne	.+42     	; 0x581e <Lcd_4bit_enuDisplayString+0x54>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    57f4:	82 e0       	ldi	r24, 0x02	; 2
    57f6:	89 83       	std	Y+1, r24	; 0x01
    57f8:	1d c0       	rjmp	.+58     	; 0x5834 <Lcd_4bit_enuDisplayString+0x6a>

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    57fa:	8a 81       	ldd	r24, Y+2	; 0x02
    57fc:	88 2f       	mov	r24, r24
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	2d 81       	ldd	r18, Y+5	; 0x05
    5802:	3e 81       	ldd	r19, Y+6	; 0x06
    5804:	82 0f       	add	r24, r18
    5806:	93 1f       	adc	r25, r19
    5808:	fc 01       	movw	r30, r24
    580a:	20 81       	ld	r18, Z
    580c:	8b 81       	ldd	r24, Y+3	; 0x03
    580e:	9c 81       	ldd	r25, Y+4	; 0x04
    5810:	62 2f       	mov	r22, r18
    5812:	0e 94 4f 2a 	call	0x549e	; 0x549e <Lcd_4bit_enuDisplayCharacter>
    5816:	89 83       	std	Y+1, r24	; 0x01
			            Loc_u8Counter++;
    5818:	8a 81       	ldd	r24, Y+2	; 0x02
    581a:	8f 5f       	subi	r24, 0xFF	; 255
    581c:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    581e:	8a 81       	ldd	r24, Y+2	; 0x02
    5820:	88 2f       	mov	r24, r24
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	2d 81       	ldd	r18, Y+5	; 0x05
    5826:	3e 81       	ldd	r19, Y+6	; 0x06
    5828:	82 0f       	add	r24, r18
    582a:	93 1f       	adc	r25, r19
    582c:	fc 01       	movw	r30, r24
    582e:	80 81       	ld	r24, Z
    5830:	88 23       	and	r24, r24
    5832:	19 f7       	brne	.-58     	; 0x57fa <Lcd_4bit_enuDisplayString+0x30>
		}




		return Loc_enuStatus;
    5834:	89 81       	ldd	r24, Y+1	; 0x01

}
    5836:	26 96       	adiw	r28, 0x06	; 6
    5838:	0f b6       	in	r0, 0x3f	; 63
    583a:	f8 94       	cli
    583c:	de bf       	out	0x3e, r29	; 62
    583e:	0f be       	out	0x3f, r0	; 63
    5840:	cd bf       	out	0x3d, r28	; 61
    5842:	df 91       	pop	r29
    5844:	cf 91       	pop	r28
    5846:	08 95       	ret

00005848 <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number){
    5848:	cf 93       	push	r28
    584a:	df 93       	push	r29
    584c:	cd b7       	in	r28, 0x3d	; 61
    584e:	de b7       	in	r29, 0x3e	; 62
    5850:	cc 56       	subi	r28, 0x6C	; 108
    5852:	d1 09       	sbc	r29, r1
    5854:	0f b6       	in	r0, 0x3f	; 63
    5856:	f8 94       	cli
    5858:	de bf       	out	0x3e, r29	; 62
    585a:	0f be       	out	0x3f, r0	; 63
    585c:	cd bf       	out	0x3d, r28	; 61
    585e:	9e 01       	movw	r18, r28
    5860:	29 59       	subi	r18, 0x99	; 153
    5862:	3f 4f       	sbci	r19, 0xFF	; 255
    5864:	f9 01       	movw	r30, r18
    5866:	91 83       	std	Z+1, r25	; 0x01
    5868:	80 83       	st	Z, r24
    586a:	ce 01       	movw	r24, r28
    586c:	87 59       	subi	r24, 0x97	; 151
    586e:	9f 4f       	sbci	r25, 0xFF	; 255
    5870:	fc 01       	movw	r30, r24
    5872:	40 83       	st	Z, r20
    5874:	51 83       	std	Z+1, r21	; 0x01
    5876:	62 83       	std	Z+2, r22	; 0x02
    5878:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    587a:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    587c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    587e:	ce 01       	movw	r24, r28
    5880:	89 59       	subi	r24, 0x99	; 153
    5882:	9f 4f       	sbci	r25, 0xFF	; 255
    5884:	fc 01       	movw	r30, r24
    5886:	80 81       	ld	r24, Z
    5888:	91 81       	ldd	r25, Z+1	; 0x01
    588a:	89 2b       	or	r24, r25
    588c:	19 f4       	brne	.+6      	; 0x5894 <Lcd_4bit_enuDisplayNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    588e:	82 e0       	ldi	r24, 0x02	; 2
    5890:	89 83       	std	Y+1, r24	; 0x01
    5892:	1e c0       	rjmp	.+60     	; 0x58d0 <Lcd_4bit_enuDisplayNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    5894:	9e 01       	movw	r18, r28
    5896:	2d 5f       	subi	r18, 0xFD	; 253
    5898:	3f 4f       	sbci	r19, 0xFF	; 255
    589a:	ce 01       	movw	r24, r28
    589c:	87 59       	subi	r24, 0x97	; 151
    589e:	9f 4f       	sbci	r25, 0xFF	; 255
    58a0:	fc 01       	movw	r30, r24
    58a2:	80 81       	ld	r24, Z
    58a4:	91 81       	ldd	r25, Z+1	; 0x01
    58a6:	a2 81       	ldd	r26, Z+2	; 0x02
    58a8:	b3 81       	ldd	r27, Z+3	; 0x03
    58aa:	a9 01       	movw	r20, r18
    58ac:	bc 01       	movw	r22, r24
    58ae:	cd 01       	movw	r24, r26
    58b0:	0e 94 69 00 	call	0xd2	; 0xd2 <Convert_IntToString>
    58b4:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    58b6:	9e 01       	movw	r18, r28
    58b8:	2d 5f       	subi	r18, 0xFD	; 253
    58ba:	3f 4f       	sbci	r19, 0xFF	; 255
    58bc:	ce 01       	movw	r24, r28
    58be:	89 59       	subi	r24, 0x99	; 153
    58c0:	9f 4f       	sbci	r25, 0xFF	; 255
    58c2:	fc 01       	movw	r30, r24
    58c4:	80 81       	ld	r24, Z
    58c6:	91 81       	ldd	r25, Z+1	; 0x01
    58c8:	b9 01       	movw	r22, r18
    58ca:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <Lcd_4bit_enuDisplayString>
    58ce:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    58d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    58d2:	c4 59       	subi	r28, 0x94	; 148
    58d4:	df 4f       	sbci	r29, 0xFF	; 255
    58d6:	0f b6       	in	r0, 0x3f	; 63
    58d8:	f8 94       	cli
    58da:	de bf       	out	0x3e, r29	; 62
    58dc:	0f be       	out	0x3f, r0	; 63
    58de:	cd bf       	out	0x3d, r28	; 61
    58e0:	df 91       	pop	r29
    58e2:	cf 91       	pop	r28
    58e4:	08 95       	ret

000058e6 <Lcd_4bit_enuDisplayNumberWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumberWithPosition(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number, u8 Copy_u8Row, u8 Copy_u8Col){
    58e6:	0f 93       	push	r16
    58e8:	cf 93       	push	r28
    58ea:	df 93       	push	r29
    58ec:	cd b7       	in	r28, 0x3d	; 61
    58ee:	de b7       	in	r29, 0x3e	; 62
    58f0:	ce 56       	subi	r28, 0x6E	; 110
    58f2:	d1 09       	sbc	r29, r1
    58f4:	0f b6       	in	r0, 0x3f	; 63
    58f6:	f8 94       	cli
    58f8:	de bf       	out	0x3e, r29	; 62
    58fa:	0f be       	out	0x3f, r0	; 63
    58fc:	cd bf       	out	0x3d, r28	; 61
    58fe:	fe 01       	movw	r30, r28
    5900:	e9 59       	subi	r30, 0x99	; 153
    5902:	ff 4f       	sbci	r31, 0xFF	; 255
    5904:	91 83       	std	Z+1, r25	; 0x01
    5906:	80 83       	st	Z, r24
    5908:	ce 01       	movw	r24, r28
    590a:	87 59       	subi	r24, 0x97	; 151
    590c:	9f 4f       	sbci	r25, 0xFF	; 255
    590e:	dc 01       	movw	r26, r24
    5910:	4d 93       	st	X+, r20
    5912:	5d 93       	st	X+, r21
    5914:	6d 93       	st	X+, r22
    5916:	7c 93       	st	X, r23
    5918:	13 97       	sbiw	r26, 0x03	; 3
    591a:	ce 01       	movw	r24, r28
    591c:	83 59       	subi	r24, 0x93	; 147
    591e:	9f 4f       	sbci	r25, 0xFF	; 255
    5920:	fc 01       	movw	r30, r24
    5922:	20 83       	st	Z, r18
    5924:	ce 01       	movw	r24, r28
    5926:	82 59       	subi	r24, 0x92	; 146
    5928:	9f 4f       	sbci	r25, 0xFF	; 255
    592a:	dc 01       	movw	r26, r24
    592c:	0c 93       	st	X, r16

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    592e:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    5930:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    5932:	ce 01       	movw	r24, r28
    5934:	89 59       	subi	r24, 0x99	; 153
    5936:	9f 4f       	sbci	r25, 0xFF	; 255
    5938:	fc 01       	movw	r30, r24
    593a:	80 81       	ld	r24, Z
    593c:	91 81       	ldd	r25, Z+1	; 0x01
    593e:	89 2b       	or	r24, r25
    5940:	19 f4       	brne	.+6      	; 0x5948 <Lcd_4bit_enuDisplayNumberWithPosition+0x62>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    5942:	82 e0       	ldi	r24, 0x02	; 2
    5944:	89 83       	std	Y+1, r24	; 0x01
    5946:	31 c0       	rjmp	.+98     	; 0x59aa <Lcd_4bit_enuDisplayNumberWithPosition+0xc4>

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    5948:	9e 01       	movw	r18, r28
    594a:	2d 5f       	subi	r18, 0xFD	; 253
    594c:	3f 4f       	sbci	r19, 0xFF	; 255
    594e:	ce 01       	movw	r24, r28
    5950:	87 59       	subi	r24, 0x97	; 151
    5952:	9f 4f       	sbci	r25, 0xFF	; 255
    5954:	fc 01       	movw	r30, r24
    5956:	80 81       	ld	r24, Z
    5958:	91 81       	ldd	r25, Z+1	; 0x01
    595a:	a2 81       	ldd	r26, Z+2	; 0x02
    595c:	b3 81       	ldd	r27, Z+3	; 0x03
    595e:	a9 01       	movw	r20, r18
    5960:	bc 01       	movw	r22, r24
    5962:	cd 01       	movw	r24, r26
    5964:	0e 94 69 00 	call	0xd2	; 0xd2 <Convert_IntToString>
    5968:	8a 83       	std	Y+2, r24	; 0x02
			Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    596a:	9e 01       	movw	r18, r28
    596c:	22 59       	subi	r18, 0x92	; 146
    596e:	3f 4f       	sbci	r19, 0xFF	; 255
    5970:	ce 01       	movw	r24, r28
    5972:	83 59       	subi	r24, 0x93	; 147
    5974:	9f 4f       	sbci	r25, 0xFF	; 255
    5976:	ae 01       	movw	r20, r28
    5978:	49 59       	subi	r20, 0x99	; 153
    597a:	5f 4f       	sbci	r21, 0xFF	; 255
    597c:	da 01       	movw	r26, r20
    597e:	ed 91       	ld	r30, X+
    5980:	fc 91       	ld	r31, X
    5982:	d9 01       	movw	r26, r18
    5984:	4c 91       	ld	r20, X
    5986:	dc 01       	movw	r26, r24
    5988:	6c 91       	ld	r22, X
    598a:	cf 01       	movw	r24, r30
    598c:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <Lcd_4bit_enuGoToXY>
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    5990:	9e 01       	movw	r18, r28
    5992:	2d 5f       	subi	r18, 0xFD	; 253
    5994:	3f 4f       	sbci	r19, 0xFF	; 255
    5996:	ce 01       	movw	r24, r28
    5998:	89 59       	subi	r24, 0x99	; 153
    599a:	9f 4f       	sbci	r25, 0xFF	; 255
    599c:	fc 01       	movw	r30, r24
    599e:	80 81       	ld	r24, Z
    59a0:	91 81       	ldd	r25, Z+1	; 0x01
    59a2:	b9 01       	movw	r22, r18
    59a4:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <Lcd_4bit_enuDisplayString>
    59a8:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    59aa:	89 81       	ldd	r24, Y+1	; 0x01

}
    59ac:	c2 59       	subi	r28, 0x92	; 146
    59ae:	df 4f       	sbci	r29, 0xFF	; 255
    59b0:	0f b6       	in	r0, 0x3f	; 63
    59b2:	f8 94       	cli
    59b4:	de bf       	out	0x3e, r29	; 62
    59b6:	0f be       	out	0x3f, r0	; 63
    59b8:	cd bf       	out	0x3d, r28	; 61
    59ba:	df 91       	pop	r29
    59bc:	cf 91       	pop	r28
    59be:	0f 91       	pop	r16
    59c0:	08 95       	ret

000059c2 <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f64 Copy_f64Number){
    59c2:	cf 93       	push	r28
    59c4:	df 93       	push	r29
    59c6:	cd b7       	in	r28, 0x3d	; 61
    59c8:	de b7       	in	r29, 0x3e	; 62
    59ca:	cc 56       	subi	r28, 0x6C	; 108
    59cc:	d1 09       	sbc	r29, r1
    59ce:	0f b6       	in	r0, 0x3f	; 63
    59d0:	f8 94       	cli
    59d2:	de bf       	out	0x3e, r29	; 62
    59d4:	0f be       	out	0x3f, r0	; 63
    59d6:	cd bf       	out	0x3d, r28	; 61
    59d8:	9e 01       	movw	r18, r28
    59da:	29 59       	subi	r18, 0x99	; 153
    59dc:	3f 4f       	sbci	r19, 0xFF	; 255
    59de:	f9 01       	movw	r30, r18
    59e0:	91 83       	std	Z+1, r25	; 0x01
    59e2:	80 83       	st	Z, r24
    59e4:	ce 01       	movw	r24, r28
    59e6:	87 59       	subi	r24, 0x97	; 151
    59e8:	9f 4f       	sbci	r25, 0xFF	; 255
    59ea:	fc 01       	movw	r30, r24
    59ec:	40 83       	st	Z, r20
    59ee:	51 83       	std	Z+1, r21	; 0x01
    59f0:	62 83       	std	Z+2, r22	; 0x02
    59f2:	73 83       	std	Z+3, r23	; 0x03

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    59f4:	19 82       	std	Y+1, r1	; 0x01
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
    59f6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    59f8:	ce 01       	movw	r24, r28
    59fa:	89 59       	subi	r24, 0x99	; 153
    59fc:	9f 4f       	sbci	r25, 0xFF	; 255
    59fe:	fc 01       	movw	r30, r24
    5a00:	80 81       	ld	r24, Z
    5a02:	91 81       	ldd	r25, Z+1	; 0x01
    5a04:	89 2b       	or	r24, r25
    5a06:	19 f4       	brne	.+6      	; 0x5a0e <Lcd_4bit_enuDisplayFloatNumber+0x4c>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    5a08:	82 e0       	ldi	r24, 0x02	; 2
    5a0a:	89 83       	std	Y+1, r24	; 0x01
    5a0c:	1e c0       	rjmp	.+60     	; 0x5a4a <Lcd_4bit_enuDisplayFloatNumber+0x88>

		}
		else{

			Loc_enuStdStatus= Convert_FloatToString(Copy_f64Number, Loc_u8ConvertedNumberInArray);
    5a0e:	9e 01       	movw	r18, r28
    5a10:	2d 5f       	subi	r18, 0xFD	; 253
    5a12:	3f 4f       	sbci	r19, 0xFF	; 255
    5a14:	ce 01       	movw	r24, r28
    5a16:	87 59       	subi	r24, 0x97	; 151
    5a18:	9f 4f       	sbci	r25, 0xFF	; 255
    5a1a:	fc 01       	movw	r30, r24
    5a1c:	80 81       	ld	r24, Z
    5a1e:	91 81       	ldd	r25, Z+1	; 0x01
    5a20:	a2 81       	ldd	r26, Z+2	; 0x02
    5a22:	b3 81       	ldd	r27, Z+3	; 0x03
    5a24:	a9 01       	movw	r20, r18
    5a26:	bc 01       	movw	r22, r24
    5a28:	cd 01       	movw	r24, r26
    5a2a:	0e 94 a8 00 	call	0x150	; 0x150 <Convert_FloatToString>
    5a2e:	8a 83       	std	Y+2, r24	; 0x02
//			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
				Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd, Loc_u8ConvertedNumberInArray);
    5a30:	9e 01       	movw	r18, r28
    5a32:	2d 5f       	subi	r18, 0xFD	; 253
    5a34:	3f 4f       	sbci	r19, 0xFF	; 255
    5a36:	ce 01       	movw	r24, r28
    5a38:	89 59       	subi	r24, 0x99	; 153
    5a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a3c:	fc 01       	movw	r30, r24
    5a3e:	80 81       	ld	r24, Z
    5a40:	91 81       	ldd	r25, Z+1	; 0x01
    5a42:	b9 01       	movw	r22, r18
    5a44:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <Lcd_4bit_enuDisplayString>
    5a48:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    5a4a:	89 81       	ldd	r24, Y+1	; 0x01

}
    5a4c:	c4 59       	subi	r28, 0x94	; 148
    5a4e:	df 4f       	sbci	r29, 0xFF	; 255
    5a50:	0f b6       	in	r0, 0x3f	; 63
    5a52:	f8 94       	cli
    5a54:	de bf       	out	0x3e, r29	; 62
    5a56:	0f be       	out	0x3f, r0	; 63
    5a58:	cd bf       	out	0x3d, r28	; 61
    5a5a:	df 91       	pop	r29
    5a5c:	cf 91       	pop	r28
    5a5e:	08 95       	ret

00005a60 <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    5a60:	cf 93       	push	r28
    5a62:	df 93       	push	r29
    5a64:	00 d0       	rcall	.+0      	; 0x5a66 <Lcd_4bit_enuSet4BitsOnPins+0x6>
    5a66:	00 d0       	rcall	.+0      	; 0x5a68 <Lcd_4bit_enuSet4BitsOnPins+0x8>
    5a68:	1f 92       	push	r1
    5a6a:	cd b7       	in	r28, 0x3d	; 61
    5a6c:	de b7       	in	r29, 0x3e	; 62
    5a6e:	9c 83       	std	Y+4, r25	; 0x04
    5a70:	8b 83       	std	Y+3, r24	; 0x03
    5a72:	6d 83       	std	Y+5, r22	; 0x05

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    5a74:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ZERO_VALUE;
    5a76:	1a 82       	std	Y+2, r1	; 0x02
		if( NULL == Address_Lcd){
    5a78:	8b 81       	ldd	r24, Y+3	; 0x03
    5a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a7c:	89 2b       	or	r24, r25
    5a7e:	19 f4       	brne	.+6      	; 0x5a86 <Lcd_4bit_enuSet4BitsOnPins+0x26>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    5a80:	82 e0       	ldi	r24, 0x02	; 2
    5a82:	89 83       	std	Y+1, r24	; 0x01
    5a84:	22 c0       	rjmp	.+68     	; 0x5aca <Lcd_4bit_enuSet4BitsOnPins+0x6a>

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    5a86:	1a 82       	std	Y+2, r1	; 0x02
    5a88:	1d c0       	rjmp	.+58     	; 0x5ac4 <Lcd_4bit_enuSet4BitsOnPins+0x64>

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    5a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a8c:	88 2f       	mov	r24, r24
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	2a 81       	ldd	r18, Y+2	; 0x02
    5a92:	22 2f       	mov	r18, r18
    5a94:	30 e0       	ldi	r19, 0x00	; 0
    5a96:	02 c0       	rjmp	.+4      	; 0x5a9c <Lcd_4bit_enuSet4BitsOnPins+0x3c>
    5a98:	95 95       	asr	r25
    5a9a:	87 95       	ror	r24
    5a9c:	2a 95       	dec	r18
    5a9e:	e2 f7       	brpl	.-8      	; 0x5a98 <Lcd_4bit_enuSet4BitsOnPins+0x38>
    5aa0:	48 2f       	mov	r20, r24
    5aa2:	41 70       	andi	r20, 0x01	; 1
    5aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    5aa6:	88 2f       	mov	r24, r24
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	2b 81       	ldd	r18, Y+3	; 0x03
    5aac:	3c 81       	ldd	r19, Y+4	; 0x04
    5aae:	82 0f       	add	r24, r18
    5ab0:	93 1f       	adc	r25, r19
    5ab2:	fc 01       	movw	r30, r24
    5ab4:	80 81       	ld	r24, Z
    5ab6:	64 2f       	mov	r22, r20
    5ab8:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5abc:	89 83       	std	Y+1, r24	; 0x01
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    5abe:	8a 81       	ldd	r24, Y+2	; 0x02
    5ac0:	8f 5f       	subi	r24, 0xFF	; 255
    5ac2:	8a 83       	std	Y+2, r24	; 0x02
    5ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ac6:	84 30       	cpi	r24, 0x04	; 4
    5ac8:	00 f3       	brcs	.-64     	; 0x5a8a <Lcd_4bit_enuSet4BitsOnPins+0x2a>
		}




		return Loc_enuStatus;
    5aca:	89 81       	ldd	r24, Y+1	; 0x01

}
    5acc:	0f 90       	pop	r0
    5ace:	0f 90       	pop	r0
    5ad0:	0f 90       	pop	r0
    5ad2:	0f 90       	pop	r0
    5ad4:	0f 90       	pop	r0
    5ad6:	df 91       	pop	r29
    5ad8:	cf 91       	pop	r28
    5ada:	08 95       	ret

00005adc <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    5adc:	cf 93       	push	r28
    5ade:	df 93       	push	r29
    5ae0:	cd b7       	in	r28, 0x3d	; 61
    5ae2:	de b7       	in	r29, 0x3e	; 62
    5ae4:	a3 97       	sbiw	r28, 0x23	; 35
    5ae6:	0f b6       	in	r0, 0x3f	; 63
    5ae8:	f8 94       	cli
    5aea:	de bf       	out	0x3e, r29	; 62
    5aec:	0f be       	out	0x3f, r0	; 63
    5aee:	cd bf       	out	0x3d, r28	; 61
    5af0:	9b a3       	std	Y+35, r25	; 0x23
    5af2:	8a a3       	std	Y+34, r24	; 0x22

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
    5af4:	19 82       	std	Y+1, r1	; 0x01
		if( NULL == Address_Lcd){
    5af6:	8a a1       	ldd	r24, Y+34	; 0x22
    5af8:	9b a1       	ldd	r25, Y+35	; 0x23
    5afa:	89 2b       	or	r24, r25
    5afc:	19 f4       	brne	.+6      	; 0x5b04 <Lcd_4bit_enuSendEnableSignal+0x28>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    5afe:	82 e0       	ldi	r24, 0x02	; 2
    5b00:	89 83       	std	Y+1, r24	; 0x01
    5b02:	ff c0       	rjmp	.+510    	; 0x5d02 <Lcd_4bit_enuSendEnableSignal+0x226>

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    5b04:	8a a1       	ldd	r24, Y+34	; 0x22
    5b06:	9b a1       	ldd	r25, Y+35	; 0x23
    5b08:	fc 01       	movw	r30, r24
    5b0a:	85 81       	ldd	r24, Z+5	; 0x05
    5b0c:	61 e0       	ldi	r22, 0x01	; 1
    5b0e:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5b12:	89 83       	std	Y+1, r24	; 0x01
    5b14:	80 e0       	ldi	r24, 0x00	; 0
    5b16:	90 e0       	ldi	r25, 0x00	; 0
    5b18:	a0 ea       	ldi	r26, 0xA0	; 160
    5b1a:	b0 e4       	ldi	r27, 0x40	; 64
    5b1c:	8a 83       	std	Y+2, r24	; 0x02
    5b1e:	9b 83       	std	Y+3, r25	; 0x03
    5b20:	ac 83       	std	Y+4, r26	; 0x04
    5b22:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    5b24:	2b ea       	ldi	r18, 0xAB	; 171
    5b26:	3a ea       	ldi	r19, 0xAA	; 170
    5b28:	4a ea       	ldi	r20, 0xAA	; 170
    5b2a:	50 e4       	ldi	r21, 0x40	; 64
    5b2c:	6a 81       	ldd	r22, Y+2	; 0x02
    5b2e:	7b 81       	ldd	r23, Y+3	; 0x03
    5b30:	8c 81       	ldd	r24, Y+4	; 0x04
    5b32:	9d 81       	ldd	r25, Y+5	; 0x05
    5b34:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    5b38:	dc 01       	movw	r26, r24
    5b3a:	cb 01       	movw	r24, r22
    5b3c:	8e 83       	std	Y+6, r24	; 0x06
    5b3e:	9f 83       	std	Y+7, r25	; 0x07
    5b40:	a8 87       	std	Y+8, r26	; 0x08
    5b42:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
    5b44:	20 e0       	ldi	r18, 0x00	; 0
    5b46:	30 e0       	ldi	r19, 0x00	; 0
    5b48:	40 e8       	ldi	r20, 0x80	; 128
    5b4a:	50 e4       	ldi	r21, 0x40	; 64
    5b4c:	6a 81       	ldd	r22, Y+2	; 0x02
    5b4e:	7b 81       	ldd	r23, Y+3	; 0x03
    5b50:	8c 81       	ldd	r24, Y+4	; 0x04
    5b52:	9d 81       	ldd	r25, Y+5	; 0x05
    5b54:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    5b58:	dc 01       	movw	r26, r24
    5b5a:	cb 01       	movw	r24, r22
    5b5c:	8a 87       	std	Y+10, r24	; 0x0a
    5b5e:	9b 87       	std	Y+11, r25	; 0x0b
    5b60:	ac 87       	std	Y+12, r26	; 0x0c
    5b62:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    5b64:	20 e0       	ldi	r18, 0x00	; 0
    5b66:	30 e0       	ldi	r19, 0x00	; 0
    5b68:	40 e8       	ldi	r20, 0x80	; 128
    5b6a:	5f e3       	ldi	r21, 0x3F	; 63
    5b6c:	6e 81       	ldd	r22, Y+6	; 0x06
    5b6e:	7f 81       	ldd	r23, Y+7	; 0x07
    5b70:	88 85       	ldd	r24, Y+8	; 0x08
    5b72:	99 85       	ldd	r25, Y+9	; 0x09
    5b74:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    5b78:	88 23       	and	r24, r24
    5b7a:	1c f4       	brge	.+6      	; 0x5b82 <Lcd_4bit_enuSendEnableSignal+0xa6>
		__ticks = 1;
    5b7c:	81 e0       	ldi	r24, 0x01	; 1
    5b7e:	8e 87       	std	Y+14, r24	; 0x0e
    5b80:	b2 c0       	rjmp	.+356    	; 0x5ce6 <Lcd_4bit_enuSendEnableSignal+0x20a>
	else if (__tmp2 > 65535)
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	3f ef       	ldi	r19, 0xFF	; 255
    5b86:	4f e7       	ldi	r20, 0x7F	; 127
    5b88:	57 e4       	ldi	r21, 0x47	; 71
    5b8a:	6a 85       	ldd	r22, Y+10	; 0x0a
    5b8c:	7b 85       	ldd	r23, Y+11	; 0x0b
    5b8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5b90:	9d 85       	ldd	r25, Y+13	; 0x0d
    5b92:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    5b96:	18 16       	cp	r1, r24
    5b98:	0c f0       	brlt	.+2      	; 0x5b9c <Lcd_4bit_enuSendEnableSignal+0xc0>
    5b9a:	7b c0       	rjmp	.+246    	; 0x5c92 <Lcd_4bit_enuSendEnableSignal+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    5b9c:	20 e0       	ldi	r18, 0x00	; 0
    5b9e:	30 e0       	ldi	r19, 0x00	; 0
    5ba0:	4a e7       	ldi	r20, 0x7A	; 122
    5ba2:	54 e4       	ldi	r21, 0x44	; 68
    5ba4:	6a 81       	ldd	r22, Y+2	; 0x02
    5ba6:	7b 81       	ldd	r23, Y+3	; 0x03
    5ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    5baa:	9d 81       	ldd	r25, Y+5	; 0x05
    5bac:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	cb 01       	movw	r24, r22
    5bb4:	8f 87       	std	Y+15, r24	; 0x0f
    5bb6:	98 8b       	std	Y+16, r25	; 0x10
    5bb8:	a9 8b       	std	Y+17, r26	; 0x11
    5bba:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	4a e7       	ldi	r20, 0x7A	; 122
    5bc2:	55 e4       	ldi	r21, 0x45	; 69
    5bc4:	6f 85       	ldd	r22, Y+15	; 0x0f
    5bc6:	78 89       	ldd	r23, Y+16	; 0x10
    5bc8:	89 89       	ldd	r24, Y+17	; 0x11
    5bca:	9a 89       	ldd	r25, Y+18	; 0x12
    5bcc:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    5bd0:	dc 01       	movw	r26, r24
    5bd2:	cb 01       	movw	r24, r22
    5bd4:	8b 8b       	std	Y+19, r24	; 0x13
    5bd6:	9c 8b       	std	Y+20, r25	; 0x14
    5bd8:	ad 8b       	std	Y+21, r26	; 0x15
    5bda:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5bdc:	20 e0       	ldi	r18, 0x00	; 0
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	40 e8       	ldi	r20, 0x80	; 128
    5be2:	5f e3       	ldi	r21, 0x3F	; 63
    5be4:	6b 89       	ldd	r22, Y+19	; 0x13
    5be6:	7c 89       	ldd	r23, Y+20	; 0x14
    5be8:	8d 89       	ldd	r24, Y+21	; 0x15
    5bea:	9e 89       	ldd	r25, Y+22	; 0x16
    5bec:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    5bf0:	88 23       	and	r24, r24
    5bf2:	2c f4       	brge	.+10     	; 0x5bfe <Lcd_4bit_enuSendEnableSignal+0x122>
		__ticks = 1;
    5bf4:	81 e0       	ldi	r24, 0x01	; 1
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	98 8f       	std	Y+24, r25	; 0x18
    5bfa:	8f 8b       	std	Y+23, r24	; 0x17
    5bfc:	3f c0       	rjmp	.+126    	; 0x5c7c <Lcd_4bit_enuSendEnableSignal+0x1a0>
	else if (__tmp > 65535)
    5bfe:	20 e0       	ldi	r18, 0x00	; 0
    5c00:	3f ef       	ldi	r19, 0xFF	; 255
    5c02:	4f e7       	ldi	r20, 0x7F	; 127
    5c04:	57 e4       	ldi	r21, 0x47	; 71
    5c06:	6b 89       	ldd	r22, Y+19	; 0x13
    5c08:	7c 89       	ldd	r23, Y+20	; 0x14
    5c0a:	8d 89       	ldd	r24, Y+21	; 0x15
    5c0c:	9e 89       	ldd	r25, Y+22	; 0x16
    5c0e:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    5c12:	18 16       	cp	r1, r24
    5c14:	4c f5       	brge	.+82     	; 0x5c68 <Lcd_4bit_enuSendEnableSignal+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c16:	20 e0       	ldi	r18, 0x00	; 0
    5c18:	30 e0       	ldi	r19, 0x00	; 0
    5c1a:	40 e2       	ldi	r20, 0x20	; 32
    5c1c:	51 e4       	ldi	r21, 0x41	; 65
    5c1e:	6f 85       	ldd	r22, Y+15	; 0x0f
    5c20:	78 89       	ldd	r23, Y+16	; 0x10
    5c22:	89 89       	ldd	r24, Y+17	; 0x11
    5c24:	9a 89       	ldd	r25, Y+18	; 0x12
    5c26:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    5c2a:	dc 01       	movw	r26, r24
    5c2c:	cb 01       	movw	r24, r22
    5c2e:	bc 01       	movw	r22, r24
    5c30:	cd 01       	movw	r24, r26
    5c32:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    5c36:	dc 01       	movw	r26, r24
    5c38:	cb 01       	movw	r24, r22
    5c3a:	98 8f       	std	Y+24, r25	; 0x18
    5c3c:	8f 8b       	std	Y+23, r24	; 0x17
    5c3e:	0f c0       	rjmp	.+30     	; 0x5c5e <Lcd_4bit_enuSendEnableSignal+0x182>
    5c40:	80 e9       	ldi	r24, 0x90	; 144
    5c42:	91 e0       	ldi	r25, 0x01	; 1
    5c44:	9a 8f       	std	Y+26, r25	; 0x1a
    5c46:	89 8f       	std	Y+25, r24	; 0x19
    5c48:	89 8d       	ldd	r24, Y+25	; 0x19
    5c4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5c4c:	01 97       	sbiw	r24, 0x01	; 1
    5c4e:	f1 f7       	brne	.-4      	; 0x5c4c <Lcd_4bit_enuSendEnableSignal+0x170>
    5c50:	9a 8f       	std	Y+26, r25	; 0x1a
    5c52:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c54:	8f 89       	ldd	r24, Y+23	; 0x17
    5c56:	98 8d       	ldd	r25, Y+24	; 0x18
    5c58:	01 97       	sbiw	r24, 0x01	; 1
    5c5a:	98 8f       	std	Y+24, r25	; 0x18
    5c5c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    5c60:	98 8d       	ldd	r25, Y+24	; 0x18
    5c62:	89 2b       	or	r24, r25
    5c64:	69 f7       	brne	.-38     	; 0x5c40 <Lcd_4bit_enuSendEnableSignal+0x164>
    5c66:	3f c0       	rjmp	.+126    	; 0x5ce6 <Lcd_4bit_enuSendEnableSignal+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c68:	6b 89       	ldd	r22, Y+19	; 0x13
    5c6a:	7c 89       	ldd	r23, Y+20	; 0x14
    5c6c:	8d 89       	ldd	r24, Y+21	; 0x15
    5c6e:	9e 89       	ldd	r25, Y+22	; 0x16
    5c70:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    5c74:	dc 01       	movw	r26, r24
    5c76:	cb 01       	movw	r24, r22
    5c78:	98 8f       	std	Y+24, r25	; 0x18
    5c7a:	8f 8b       	std	Y+23, r24	; 0x17
    5c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    5c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    5c80:	9c 8f       	std	Y+28, r25	; 0x1c
    5c82:	8b 8f       	std	Y+27, r24	; 0x1b
    5c84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c88:	01 97       	sbiw	r24, 0x01	; 1
    5c8a:	f1 f7       	brne	.-4      	; 0x5c88 <Lcd_4bit_enuSendEnableSignal+0x1ac>
    5c8c:	9c 8f       	std	Y+28, r25	; 0x1c
    5c8e:	8b 8f       	std	Y+27, r24	; 0x1b
    5c90:	2a c0       	rjmp	.+84     	; 0x5ce6 <Lcd_4bit_enuSendEnableSignal+0x20a>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    5c92:	20 e0       	ldi	r18, 0x00	; 0
    5c94:	30 e0       	ldi	r19, 0x00	; 0
    5c96:	4f e7       	ldi	r20, 0x7F	; 127
    5c98:	53 e4       	ldi	r21, 0x43	; 67
    5c9a:	6e 81       	ldd	r22, Y+6	; 0x06
    5c9c:	7f 81       	ldd	r23, Y+7	; 0x07
    5c9e:	88 85       	ldd	r24, Y+8	; 0x08
    5ca0:	99 85       	ldd	r25, Y+9	; 0x09
    5ca2:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    5ca6:	18 16       	cp	r1, r24
    5ca8:	ac f4       	brge	.+42     	; 0x5cd4 <Lcd_4bit_enuSendEnableSignal+0x1f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    5caa:	6a 85       	ldd	r22, Y+10	; 0x0a
    5cac:	7b 85       	ldd	r23, Y+11	; 0x0b
    5cae:	8c 85       	ldd	r24, Y+12	; 0x0c
    5cb0:	9d 85       	ldd	r25, Y+13	; 0x0d
    5cb2:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    5cb6:	dc 01       	movw	r26, r24
    5cb8:	cb 01       	movw	r24, r22
    5cba:	9e 8f       	std	Y+30, r25	; 0x1e
    5cbc:	8d 8f       	std	Y+29, r24	; 0x1d
    5cbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5cc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5cc2:	98 a3       	std	Y+32, r25	; 0x20
    5cc4:	8f 8f       	std	Y+31, r24	; 0x1f
    5cc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5cc8:	98 a1       	ldd	r25, Y+32	; 0x20
    5cca:	01 97       	sbiw	r24, 0x01	; 1
    5ccc:	f1 f7       	brne	.-4      	; 0x5cca <Lcd_4bit_enuSendEnableSignal+0x1ee>
    5cce:	98 a3       	std	Y+32, r25	; 0x20
    5cd0:	8f 8f       	std	Y+31, r24	; 0x1f
    5cd2:	0f c0       	rjmp	.+30     	; 0x5cf2 <Lcd_4bit_enuSendEnableSignal+0x216>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5cd4:	6e 81       	ldd	r22, Y+6	; 0x06
    5cd6:	7f 81       	ldd	r23, Y+7	; 0x07
    5cd8:	88 85       	ldd	r24, Y+8	; 0x08
    5cda:	99 85       	ldd	r25, Y+9	; 0x09
    5cdc:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    5ce0:	dc 01       	movw	r26, r24
    5ce2:	cb 01       	movw	r24, r22
    5ce4:	8e 87       	std	Y+14, r24	; 0x0e
    5ce6:	8e 85       	ldd	r24, Y+14	; 0x0e
    5ce8:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5cea:	89 a1       	ldd	r24, Y+33	; 0x21
    5cec:	8a 95       	dec	r24
    5cee:	f1 f7       	brne	.-4      	; 0x5cec <Lcd_4bit_enuSendEnableSignal+0x210>
    5cf0:	89 a3       	std	Y+33, r24	; 0x21
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    5cf2:	8a a1       	ldd	r24, Y+34	; 0x22
    5cf4:	9b a1       	ldd	r25, Y+35	; 0x23
    5cf6:	fc 01       	movw	r30, r24
    5cf8:	85 81       	ldd	r24, Z+5	; 0x05
    5cfa:	60 e0       	ldi	r22, 0x00	; 0
    5cfc:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5d00:	89 83       	std	Y+1, r24	; 0x01
		}




		return Loc_enuStatus;
    5d02:	89 81       	ldd	r24, Y+1	; 0x01

}
    5d04:	a3 96       	adiw	r28, 0x23	; 35
    5d06:	0f b6       	in	r0, 0x3f	; 63
    5d08:	f8 94       	cli
    5d0a:	de bf       	out	0x3e, r29	; 62
    5d0c:	0f be       	out	0x3f, r0	; 63
    5d0e:	cd bf       	out	0x3d, r28	; 61
    5d10:	df 91       	pop	r29
    5d12:	cf 91       	pop	r28
    5d14:	08 95       	ret

00005d16 <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    5d16:	cf 93       	push	r28
    5d18:	df 93       	push	r29
    5d1a:	cd b7       	in	r28, 0x3d	; 61
    5d1c:	de b7       	in	r29, 0x3e	; 62
    5d1e:	29 97       	sbiw	r28, 0x09	; 9
    5d20:	0f b6       	in	r0, 0x3f	; 63
    5d22:	f8 94       	cli
    5d24:	de bf       	out	0x3e, r29	; 62
    5d26:	0f be       	out	0x3f, r0	; 63
    5d28:	cd bf       	out	0x3d, r28	; 61
    5d2a:	9f 83       	std	Y+7, r25	; 0x07
    5d2c:	8e 83       	std	Y+6, r24	; 0x06
    5d2e:	79 87       	std	Y+9, r23	; 0x09
    5d30:	68 87       	std	Y+8, r22	; 0x08

	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    5d32:	83 e0       	ldi	r24, 0x03	; 3
    5d34:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
    5d36:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8RowsCounter = ZERO_VALUE;
    5d38:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8ColsCounter = ZERO_VALUE;
    5d3a:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    5d3c:	8e 81       	ldd	r24, Y+6	; 0x06
    5d3e:	9f 81       	ldd	r25, Y+7	; 0x07
    5d40:	fc 01       	movw	r30, r24
    5d42:	81 85       	ldd	r24, Z+9	; 0x09
    5d44:	8d 83       	std	Y+5, r24	; 0x05
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    5d46:	8e 81       	ldd	r24, Y+6	; 0x06
    5d48:	9f 81       	ldd	r25, Y+7	; 0x07
    5d4a:	89 2b       	or	r24, r25
    5d4c:	21 f0       	breq	.+8      	; 0x5d56 <Keypad_enuRead+0x40>
    5d4e:	88 85       	ldd	r24, Y+8	; 0x08
    5d50:	99 85       	ldd	r25, Y+9	; 0x09
    5d52:	89 2b       	or	r24, r25
    5d54:	19 f4       	brne	.+6      	; 0x5d5c <Keypad_enuRead+0x46>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    5d56:	82 e0       	ldi	r24, 0x02	; 2
    5d58:	89 83       	std	Y+1, r24	; 0x01
    5d5a:	df c0       	rjmp	.+446    	; 0x5f1a <Keypad_enuRead+0x204>
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);
    5d5c:	8e 81       	ldd	r24, Y+6	; 0x06
    5d5e:	9f 81       	ldd	r25, Y+7	; 0x07
    5d60:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <Keypad_DisableControlPins>
    5d64:	89 83       	std	Y+1, r24	; 0x01

	    	  switch(Address_Keypad->keypad_control_pins){
    5d66:	8e 81       	ldd	r24, Y+6	; 0x06
    5d68:	9f 81       	ldd	r25, Y+7	; 0x07
    5d6a:	fc 01       	movw	r30, r24
    5d6c:	80 85       	ldd	r24, Z+8	; 0x08
    5d6e:	88 2f       	mov	r24, r24
    5d70:	90 e0       	ldi	r25, 0x00	; 0
    5d72:	00 97       	sbiw	r24, 0x00	; 0
    5d74:	21 f0       	breq	.+8      	; 0x5d7e <Keypad_enuRead+0x68>
    5d76:	01 97       	sbiw	r24, 0x01	; 1
    5d78:	09 f4       	brne	.+2      	; 0x5d7c <Keypad_enuRead+0x66>
    5d7a:	67 c0       	rjmp	.+206    	; 0x5e4a <Keypad_enuRead+0x134>
    5d7c:	cc c0       	rjmp	.+408    	; 0x5f16 <Keypad_enuRead+0x200>
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    5d7e:	1a 82       	std	Y+2, r1	; 0x02
    5d80:	5f c0       	rjmp	.+190    	; 0x5e40 <Keypad_enuRead+0x12a>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    5d82:	8e 81       	ldd	r24, Y+6	; 0x06
    5d84:	9f 81       	ldd	r25, Y+7	; 0x07
    5d86:	fc 01       	movw	r30, r24
    5d88:	91 85       	ldd	r25, Z+9	; 0x09
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	99 23       	and	r25, r25
    5d8e:	09 f0       	breq	.+2      	; 0x5d92 <Keypad_enuRead+0x7c>
    5d90:	80 e0       	ldi	r24, 0x00	; 0
    5d92:	48 2f       	mov	r20, r24
    5d94:	8a 81       	ldd	r24, Y+2	; 0x02
    5d96:	88 2f       	mov	r24, r24
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	2e 81       	ldd	r18, Y+6	; 0x06
    5d9c:	3f 81       	ldd	r19, Y+7	; 0x07
    5d9e:	82 0f       	add	r24, r18
    5da0:	93 1f       	adc	r25, r19
    5da2:	fc 01       	movw	r30, r24
    5da4:	80 81       	ld	r24, Z
    5da6:	64 2f       	mov	r22, r20
    5da8:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5dac:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    5dae:	1b 82       	std	Y+3, r1	; 0x03
    5db0:	30 c0       	rjmp	.+96     	; 0x5e12 <Keypad_enuRead+0xfc>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    5db2:	8b 81       	ldd	r24, Y+3	; 0x03
    5db4:	88 2f       	mov	r24, r24
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	2e 81       	ldd	r18, Y+6	; 0x06
    5dba:	3f 81       	ldd	r19, Y+7	; 0x07
    5dbc:	82 0f       	add	r24, r18
    5dbe:	93 1f       	adc	r25, r19
    5dc0:	04 96       	adiw	r24, 0x04	; 4
    5dc2:	fc 01       	movw	r30, r24
    5dc4:	20 81       	ld	r18, Z
    5dc6:	ce 01       	movw	r24, r28
    5dc8:	05 96       	adiw	r24, 0x05	; 5
    5dca:	bc 01       	movw	r22, r24
    5dcc:	82 2f       	mov	r24, r18
    5dce:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <Dio_enuReadChannel>
    5dd2:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    5dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    5dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    5dd8:	fc 01       	movw	r30, r24
    5dda:	91 85       	ldd	r25, Z+9	; 0x09
    5ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    5dde:	98 17       	cp	r25, r24
    5de0:	a9 f0       	breq	.+42     	; 0x5e0c <Keypad_enuRead+0xf6>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    5de2:	8a 81       	ldd	r24, Y+2	; 0x02
    5de4:	28 2f       	mov	r18, r24
    5de6:	30 e0       	ldi	r19, 0x00	; 0
    5de8:	8b 81       	ldd	r24, Y+3	; 0x03
    5dea:	88 2f       	mov	r24, r24
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	22 0f       	add	r18, r18
    5df0:	33 1f       	adc	r19, r19
    5df2:	22 0f       	add	r18, r18
    5df4:	33 1f       	adc	r19, r19
    5df6:	82 0f       	add	r24, r18
    5df8:	93 1f       	adc	r25, r19
    5dfa:	81 54       	subi	r24, 0x41	; 65
    5dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfe:	fc 01       	movw	r30, r24
    5e00:	20 81       	ld	r18, Z
    5e02:	88 85       	ldd	r24, Y+8	; 0x08
    5e04:	99 85       	ldd	r25, Y+9	; 0x09
    5e06:	fc 01       	movw	r30, r24
    5e08:	20 83       	st	Z, r18
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    5e0a:	19 82       	std	Y+1, r1	; 0x01
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    5e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    5e0e:	8f 5f       	subi	r24, 0xFF	; 255
    5e10:	8b 83       	std	Y+3, r24	; 0x03
    5e12:	8b 81       	ldd	r24, Y+3	; 0x03
    5e14:	84 30       	cpi	r24, 0x04	; 4
    5e16:	68 f2       	brcs	.-102    	; 0x5db2 <Keypad_enuRead+0x9c>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    5e18:	8e 81       	ldd	r24, Y+6	; 0x06
    5e1a:	9f 81       	ldd	r25, Y+7	; 0x07
    5e1c:	fc 01       	movw	r30, r24
    5e1e:	41 85       	ldd	r20, Z+9	; 0x09
    5e20:	8a 81       	ldd	r24, Y+2	; 0x02
    5e22:	88 2f       	mov	r24, r24
    5e24:	90 e0       	ldi	r25, 0x00	; 0
    5e26:	2e 81       	ldd	r18, Y+6	; 0x06
    5e28:	3f 81       	ldd	r19, Y+7	; 0x07
    5e2a:	82 0f       	add	r24, r18
    5e2c:	93 1f       	adc	r25, r19
    5e2e:	fc 01       	movw	r30, r24
    5e30:	80 81       	ld	r24, Z
    5e32:	64 2f       	mov	r22, r20
    5e34:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5e38:	8c 83       	std	Y+4, r24	; 0x04

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    5e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e3c:	8f 5f       	subi	r24, 0xFF	; 255
    5e3e:	8a 83       	std	Y+2, r24	; 0x02
    5e40:	8a 81       	ldd	r24, Y+2	; 0x02
    5e42:	84 30       	cpi	r24, 0x04	; 4
    5e44:	08 f4       	brcc	.+2      	; 0x5e48 <Keypad_enuRead+0x132>
    5e46:	9d cf       	rjmp	.-198    	; 0x5d82 <Keypad_enuRead+0x6c>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    5e48:	68 c0       	rjmp	.+208    	; 0x5f1a <Keypad_enuRead+0x204>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    5e4a:	1b 82       	std	Y+3, r1	; 0x03
    5e4c:	5f c0       	rjmp	.+190    	; 0x5f0c <Keypad_enuRead+0x1f6>
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    5e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    5e50:	9f 81       	ldd	r25, Y+7	; 0x07
    5e52:	fc 01       	movw	r30, r24
    5e54:	91 85       	ldd	r25, Z+9	; 0x09
    5e56:	81 e0       	ldi	r24, 0x01	; 1
    5e58:	99 23       	and	r25, r25
    5e5a:	09 f0       	breq	.+2      	; 0x5e5e <Keypad_enuRead+0x148>
    5e5c:	80 e0       	ldi	r24, 0x00	; 0
    5e5e:	48 2f       	mov	r20, r24
    5e60:	8b 81       	ldd	r24, Y+3	; 0x03
    5e62:	88 2f       	mov	r24, r24
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	2e 81       	ldd	r18, Y+6	; 0x06
    5e68:	3f 81       	ldd	r19, Y+7	; 0x07
    5e6a:	82 0f       	add	r24, r18
    5e6c:	93 1f       	adc	r25, r19
    5e6e:	04 96       	adiw	r24, 0x04	; 4
    5e70:	fc 01       	movw	r30, r24
    5e72:	80 81       	ld	r24, Z
    5e74:	64 2f       	mov	r22, r20
    5e76:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5e7a:	8c 83       	std	Y+4, r24	; 0x04

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    5e7c:	1a 82       	std	Y+2, r1	; 0x02
    5e7e:	2e c0       	rjmp	.+92     	; 0x5edc <Keypad_enuRead+0x1c6>
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    5e80:	8a 81       	ldd	r24, Y+2	; 0x02
    5e82:	88 2f       	mov	r24, r24
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	2e 81       	ldd	r18, Y+6	; 0x06
    5e88:	3f 81       	ldd	r19, Y+7	; 0x07
    5e8a:	82 0f       	add	r24, r18
    5e8c:	93 1f       	adc	r25, r19
    5e8e:	fc 01       	movw	r30, r24
    5e90:	20 81       	ld	r18, Z
    5e92:	ce 01       	movw	r24, r28
    5e94:	05 96       	adiw	r24, 0x05	; 5
    5e96:	bc 01       	movw	r22, r24
    5e98:	82 2f       	mov	r24, r18
    5e9a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <Dio_enuReadChannel>
    5e9e:	8c 83       	std	Y+4, r24	; 0x04

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    5ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    5ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    5ea4:	fc 01       	movw	r30, r24
    5ea6:	91 85       	ldd	r25, Z+9	; 0x09
    5ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    5eaa:	98 17       	cp	r25, r24
    5eac:	a1 f0       	breq	.+40     	; 0x5ed6 <Keypad_enuRead+0x1c0>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    5eae:	8a 81       	ldd	r24, Y+2	; 0x02
    5eb0:	28 2f       	mov	r18, r24
    5eb2:	30 e0       	ldi	r19, 0x00	; 0
    5eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    5eb6:	88 2f       	mov	r24, r24
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	22 0f       	add	r18, r18
    5ebc:	33 1f       	adc	r19, r19
    5ebe:	22 0f       	add	r18, r18
    5ec0:	33 1f       	adc	r19, r19
    5ec2:	82 0f       	add	r24, r18
    5ec4:	93 1f       	adc	r25, r19
    5ec6:	81 54       	subi	r24, 0x41	; 65
    5ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    5eca:	fc 01       	movw	r30, r24
    5ecc:	20 81       	ld	r18, Z
    5ece:	88 85       	ldd	r24, Y+8	; 0x08
    5ed0:	99 85       	ldd	r25, Y+9	; 0x09
    5ed2:	fc 01       	movw	r30, r24
    5ed4:	20 83       	st	Z, r18
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    5ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ed8:	8f 5f       	subi	r24, 0xFF	; 255
    5eda:	8a 83       	std	Y+2, r24	; 0x02
    5edc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ede:	84 30       	cpi	r24, 0x04	; 4
    5ee0:	78 f2       	brcs	.-98     	; 0x5e80 <Keypad_enuRead+0x16a>
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    5ee2:	8e 81       	ldd	r24, Y+6	; 0x06
    5ee4:	9f 81       	ldd	r25, Y+7	; 0x07
    5ee6:	fc 01       	movw	r30, r24
    5ee8:	41 85       	ldd	r20, Z+9	; 0x09
    5eea:	8b 81       	ldd	r24, Y+3	; 0x03
    5eec:	88 2f       	mov	r24, r24
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	2e 81       	ldd	r18, Y+6	; 0x06
    5ef2:	3f 81       	ldd	r19, Y+7	; 0x07
    5ef4:	82 0f       	add	r24, r18
    5ef6:	93 1f       	adc	r25, r19
    5ef8:	04 96       	adiw	r24, 0x04	; 4
    5efa:	fc 01       	movw	r30, r24
    5efc:	80 81       	ld	r24, Z
    5efe:	64 2f       	mov	r22, r20
    5f00:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5f04:	8c 83       	std	Y+4, r24	; 0x04
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    5f06:	8b 81       	ldd	r24, Y+3	; 0x03
    5f08:	8f 5f       	subi	r24, 0xFF	; 255
    5f0a:	8b 83       	std	Y+3, r24	; 0x03
    5f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    5f0e:	84 30       	cpi	r24, 0x04	; 4
    5f10:	08 f4       	brcc	.+2      	; 0x5f14 <Keypad_enuRead+0x1fe>
    5f12:	9d cf       	rjmp	.-198    	; 0x5e4e <Keypad_enuRead+0x138>


	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
	    	                 }

	    	                 break;
    5f14:	02 c0       	rjmp	.+4      	; 0x5f1a <Keypad_enuRead+0x204>

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    5f16:	81 e0       	ldi	r24, 0x01	; 1
    5f18:	89 83       	std	Y+1, r24	; 0x01
	    	         }


	     }
	return Loc_KeypadStatusError;
    5f1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    5f1c:	29 96       	adiw	r28, 0x09	; 9
    5f1e:	0f b6       	in	r0, 0x3f	; 63
    5f20:	f8 94       	cli
    5f22:	de bf       	out	0x3e, r29	; 62
    5f24:	0f be       	out	0x3f, r0	; 63
    5f26:	cd bf       	out	0x3d, r28	; 61
    5f28:	df 91       	pop	r29
    5f2a:	cf 91       	pop	r28
    5f2c:	08 95       	ret

00005f2e <Keypad_DisableControlPins>:


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){
    5f2e:	cf 93       	push	r28
    5f30:	df 93       	push	r29
    5f32:	00 d0       	rcall	.+0      	; 0x5f34 <Keypad_DisableControlPins+0x6>
    5f34:	00 d0       	rcall	.+0      	; 0x5f36 <Keypad_DisableControlPins+0x8>
    5f36:	1f 92       	push	r1
    5f38:	cd b7       	in	r28, 0x3d	; 61
    5f3a:	de b7       	in	r29, 0x3e	; 62
    5f3c:	9d 83       	std	Y+5, r25	; 0x05
    5f3e:	8c 83       	std	Y+4, r24	; 0x04

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    5f40:	83 e0       	ldi	r24, 0x03	; 3
    5f42:	89 83       	std	Y+1, r24	; 0x01
	Dio_ErrorStatusType Loc_DioStatusError = DIO_STATUS_OK;
    5f44:	1b 82       	std	Y+3, r1	; 0x03
    	u8 Loc_u8Counter = ZERO_VALUE;
    5f46:	1a 82       	std	Y+2, r1	; 0x02
	if (NULL == Address_Keypad   ){
    5f48:	8c 81       	ldd	r24, Y+4	; 0x04
    5f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    5f4c:	89 2b       	or	r24, r25
    5f4e:	19 f4       	brne	.+6      	; 0x5f56 <Keypad_DisableControlPins+0x28>

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    5f50:	82 e0       	ldi	r24, 0x02	; 2
    5f52:	89 83       	std	Y+1, r24	; 0x01
    5f54:	42 c0       	rjmp	.+132    	; 0x5fda <Keypad_DisableControlPins+0xac>
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    5f56:	8c 81       	ldd	r24, Y+4	; 0x04
    5f58:	9d 81       	ldd	r25, Y+5	; 0x05
    5f5a:	fc 01       	movw	r30, r24
    5f5c:	80 85       	ldd	r24, Z+8	; 0x08
    5f5e:	88 2f       	mov	r24, r24
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	00 97       	sbiw	r24, 0x00	; 0
    5f64:	19 f0       	breq	.+6      	; 0x5f6c <Keypad_DisableControlPins+0x3e>
    5f66:	01 97       	sbiw	r24, 0x01	; 1
    5f68:	d9 f0       	breq	.+54     	; 0x5fa0 <Keypad_DisableControlPins+0x72>
    5f6a:	35 c0       	rjmp	.+106    	; 0x5fd6 <Keypad_DisableControlPins+0xa8>
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    5f6c:	1a 82       	std	Y+2, r1	; 0x02
    5f6e:	14 c0       	rjmp	.+40     	; 0x5f98 <Keypad_DisableControlPins+0x6a>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    5f70:	8c 81       	ldd	r24, Y+4	; 0x04
    5f72:	9d 81       	ldd	r25, Y+5	; 0x05
    5f74:	fc 01       	movw	r30, r24
    5f76:	41 85       	ldd	r20, Z+9	; 0x09
    5f78:	8a 81       	ldd	r24, Y+2	; 0x02
    5f7a:	88 2f       	mov	r24, r24
    5f7c:	90 e0       	ldi	r25, 0x00	; 0
    5f7e:	2c 81       	ldd	r18, Y+4	; 0x04
    5f80:	3d 81       	ldd	r19, Y+5	; 0x05
    5f82:	82 0f       	add	r24, r18
    5f84:	93 1f       	adc	r25, r19
    5f86:	fc 01       	movw	r30, r24
    5f88:	80 81       	ld	r24, Z
    5f8a:	64 2f       	mov	r22, r20
    5f8c:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5f90:	8b 83       	std	Y+3, r24	; 0x03
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    5f92:	8a 81       	ldd	r24, Y+2	; 0x02
    5f94:	8f 5f       	subi	r24, 0xFF	; 255
    5f96:	8a 83       	std	Y+2, r24	; 0x02
    5f98:	8a 81       	ldd	r24, Y+2	; 0x02
    5f9a:	84 30       	cpi	r24, 0x04	; 4
    5f9c:	48 f3       	brcs	.-46     	; 0x5f70 <Keypad_DisableControlPins+0x42>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }

	                break;
    5f9e:	1d c0       	rjmp	.+58     	; 0x5fda <Keypad_DisableControlPins+0xac>

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    5fa0:	1a 82       	std	Y+2, r1	; 0x02
    5fa2:	15 c0       	rjmp	.+42     	; 0x5fce <Keypad_DisableControlPins+0xa0>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    5fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    5fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    5fa8:	fc 01       	movw	r30, r24
    5faa:	41 85       	ldd	r20, Z+9	; 0x09
    5fac:	8a 81       	ldd	r24, Y+2	; 0x02
    5fae:	88 2f       	mov	r24, r24
    5fb0:	90 e0       	ldi	r25, 0x00	; 0
    5fb2:	2c 81       	ldd	r18, Y+4	; 0x04
    5fb4:	3d 81       	ldd	r19, Y+5	; 0x05
    5fb6:	82 0f       	add	r24, r18
    5fb8:	93 1f       	adc	r25, r19
    5fba:	04 96       	adiw	r24, 0x04	; 4
    5fbc:	fc 01       	movw	r30, r24
    5fbe:	80 81       	ld	r24, Z
    5fc0:	64 2f       	mov	r22, r20
    5fc2:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    5fc6:	8b 83       	std	Y+3, r24	; 0x03

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    5fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    5fca:	8f 5f       	subi	r24, 0xFF	; 255
    5fcc:	8a 83       	std	Y+2, r24	; 0x02
    5fce:	8a 81       	ldd	r24, Y+2	; 0x02
    5fd0:	84 30       	cpi	r24, 0x04	; 4
    5fd2:	40 f3       	brcs	.-48     	; 0x5fa4 <Keypad_DisableControlPins+0x76>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;
    5fd4:	02 c0       	rjmp	.+4      	; 0x5fda <Keypad_DisableControlPins+0xac>

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    5fd6:	81 e0       	ldi	r24, 0x01	; 1
    5fd8:	89 83       	std	Y+1, r24	; 0x01
	        }

	    }
	return Loc_KeypadStatusError;
    5fda:	89 81       	ldd	r24, Y+1	; 0x01
}
    5fdc:	0f 90       	pop	r0
    5fde:	0f 90       	pop	r0
    5fe0:	0f 90       	pop	r0
    5fe2:	0f 90       	pop	r0
    5fe4:	0f 90       	pop	r0
    5fe6:	df 91       	pop	r29
    5fe8:	cf 91       	pop	r28
    5fea:	08 95       	ret

00005fec <Icusw_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Icusw_StatusErrorType Icusw_enuInit(Icusw_ConfigType* Address_Icusw ){
    5fec:	cf 93       	push	r28
    5fee:	df 93       	push	r29
    5ff0:	00 d0       	rcall	.+0      	; 0x5ff2 <Icusw_enuInit+0x6>
    5ff2:	00 d0       	rcall	.+0      	; 0x5ff4 <Icusw_enuInit+0x8>
    5ff4:	cd b7       	in	r28, 0x3d	; 61
    5ff6:	de b7       	in	r29, 0x3e	; 62
    5ff8:	9c 83       	std	Y+4, r25	; 0x04
    5ffa:	8b 83       	std	Y+3, r24	; 0x03
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    5ffc:	19 82       	std	Y+1, r1	; 0x01
	Exti_StatusErrorType Loc_enuExtiswStatus = EXTI_STATUS_OK;
    5ffe:	81 e0       	ldi	r24, 0x01	; 1
    6000:	8a 83       	std	Y+2, r24	; 0x02

	if(NULL == Address_Icusw){
    6002:	8b 81       	ldd	r24, Y+3	; 0x03
    6004:	9c 81       	ldd	r25, Y+4	; 0x04
    6006:	89 2b       	or	r24, r25
    6008:	19 f4       	brne	.+6      	; 0x6010 <Icusw_enuInit+0x24>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    600a:	82 e0       	ldi	r24, 0x02	; 2
    600c:	89 83       	std	Y+1, r24	; 0x01
    600e:	68 c0       	rjmp	.+208    	; 0x60e0 <Icusw_enuInit+0xf4>
	}
	else{

		switch(Address_Icusw->exti_Intx_Index){
    6010:	8b 81       	ldd	r24, Y+3	; 0x03
    6012:	9c 81       	ldd	r25, Y+4	; 0x04
    6014:	fc 01       	movw	r30, r24
    6016:	80 81       	ld	r24, Z
    6018:	88 2f       	mov	r24, r24
    601a:	90 e0       	ldi	r25, 0x00	; 0
    601c:	81 30       	cpi	r24, 0x01	; 1
    601e:	91 05       	cpc	r25, r1
    6020:	89 f0       	breq	.+34     	; 0x6044 <Icusw_enuInit+0x58>
    6022:	82 30       	cpi	r24, 0x02	; 2
    6024:	91 05       	cpc	r25, r1
    6026:	d1 f0       	breq	.+52     	; 0x605c <Icusw_enuInit+0x70>
    6028:	89 2b       	or	r24, r25
    602a:	21 f5       	brne	.+72     	; 0x6074 <Icusw_enuInit+0x88>
		case EXTI_INT0_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
    602c:	63 e0       	ldi	r22, 0x03	; 3
    602e:	80 e0       	ldi	r24, 0x00	; 0
    6030:	0e 94 80 1b 	call	0x3700	; 0x3700 <Exti_enuEnable>
    6034:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT0_INDEX, Icusw_voidINT0Isr);
    6036:	68 e3       	ldi	r22, 0x38	; 56
    6038:	71 e3       	ldi	r23, 0x31	; 49
    603a:	80 e0       	ldi	r24, 0x00	; 0
    603c:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <Exti_enuSetCallbackFunction>
    6040:	8a 83       	std	Y+2, r24	; 0x02

			break;
    6042:	1a c0       	rjmp	.+52     	; 0x6078 <Icusw_enuInit+0x8c>
		case EXTI_INT1_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT1_INDEX,EXTI_INT1_SELECT_RISING_EDGE);
    6044:	63 e0       	ldi	r22, 0x03	; 3
    6046:	81 e0       	ldi	r24, 0x01	; 1
    6048:	0e 94 80 1b 	call	0x3700	; 0x3700 <Exti_enuEnable>
    604c:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT1_INDEX, Icusw_voidINT1Isr);
    604e:	66 eb       	ldi	r22, 0xB6	; 182
    6050:	72 e3       	ldi	r23, 0x32	; 50
    6052:	81 e0       	ldi	r24, 0x01	; 1
    6054:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <Exti_enuSetCallbackFunction>
    6058:	8a 83       	std	Y+2, r24	; 0x02

			break;
    605a:	0e c0       	rjmp	.+28     	; 0x6078 <Icusw_enuInit+0x8c>
		case EXTI_INT2_INDEX :
			Loc_enuExtiswStatus = Exti_enuEnable(EXTI_INT2_INDEX,EXTI_INT2_SELECT_RISING_EDGE);
    605c:	61 e0       	ldi	r22, 0x01	; 1
    605e:	82 e0       	ldi	r24, 0x02	; 2
    6060:	0e 94 80 1b 	call	0x3700	; 0x3700 <Exti_enuEnable>
    6064:	8a 83       	std	Y+2, r24	; 0x02
			Loc_enuExtiswStatus = Exti_enuSetCallbackFunction(EXTI_INT2_INDEX, Icusw_voidINT2Isr);
    6066:	6e eb       	ldi	r22, 0xBE	; 190
    6068:	72 e3       	ldi	r23, 0x32	; 50
    606a:	82 e0       	ldi	r24, 0x02	; 2
    606c:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <Exti_enuSetCallbackFunction>
    6070:	8a 83       	std	Y+2, r24	; 0x02


			break;
    6072:	02 c0       	rjmp	.+4      	; 0x6078 <Icusw_enuInit+0x8c>
		default:

			Loc_enuExtiswStatus = EXTI_STATUS_FAIL;
    6074:	1a 82       	std	Y+2, r1	; 0x02
			break;
    6076:	00 00       	nop

		}

		switch(Address_Icusw->timer_index){
    6078:	8b 81       	ldd	r24, Y+3	; 0x03
    607a:	9c 81       	ldd	r25, Y+4	; 0x04
    607c:	fc 01       	movw	r30, r24
    607e:	81 81       	ldd	r24, Z+1	; 0x01
    6080:	88 2f       	mov	r24, r24
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	81 30       	cpi	r24, 0x01	; 1
    6086:	91 05       	cpc	r25, r1
    6088:	41 f1       	breq	.+80     	; 0x60da <Icusw_enuInit+0xee>
    608a:	82 30       	cpi	r24, 0x02	; 2
    608c:	91 05       	cpc	r25, r1
    608e:	39 f1       	breq	.+78     	; 0x60de <Icusw_enuInit+0xf2>
    6090:	89 2b       	or	r24, r25
    6092:	01 f5       	brne	.+64     	; 0x60d4 <Icusw_enuInit+0xe8>

		case ICUSW_TIMER_INDEX_TIMER0 :

			Timer0_enuInit(&Global_StaticTimer0);
    6094:	87 ea       	ldi	r24, 0xA7	; 167
    6096:	90 e0       	ldi	r25, 0x00	; 0
    6098:	0e 94 37 10 	call	0x206e	; 0x206e <Timer0_enuInit>
			Timer0_enuSetCallbackFunction(&Global_StaticTimer0,Timer_voidTimerOverflowIsr);
    609c:	6d e1       	ldi	r22, 0x1D	; 29
    609e:	71 e3       	ldi	r23, 0x31	; 49
    60a0:	87 ea       	ldi	r24, 0xA7	; 167
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <Timer0_enuSetCallbackFunction>
			Timer0_enuEnableInterrupt(&Global_StaticTimer0);
    60a8:	87 ea       	ldi	r24, 0xA7	; 167
    60aa:	90 e0       	ldi	r25, 0x00	; 0
    60ac:	0e 94 07 11 	call	0x220e	; 0x220e <Timer0_enuEnableInterrupt>
			Global_StaticINTxWhichTimer[Address_Icusw->exti_Intx_Index]=ICUSW_TIMER_INDEX_TIMER0;
    60b0:	8b 81       	ldd	r24, Y+3	; 0x03
    60b2:	9c 81       	ldd	r25, Y+4	; 0x04
    60b4:	fc 01       	movw	r30, r24
    60b6:	80 81       	ld	r24, Z
    60b8:	88 2f       	mov	r24, r24
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	88 0f       	add	r24, r24
    60be:	99 1f       	adc	r25, r25
    60c0:	88 0f       	add	r24, r24
    60c2:	99 1f       	adc	r25, r25
    60c4:	87 5e       	subi	r24, 0xE7	; 231
    60c6:	9e 4f       	sbci	r25, 0xFE	; 254
    60c8:	fc 01       	movw	r30, r24
    60ca:	10 82       	st	Z, r1
    60cc:	11 82       	std	Z+1, r1	; 0x01
    60ce:	12 82       	std	Z+2, r1	; 0x02
    60d0:	13 82       	std	Z+3, r1	; 0x03

			break;
    60d2:	06 c0       	rjmp	.+12     	; 0x60e0 <Icusw_enuInit+0xf4>

			break;

		default:

			Loc_enuIcuswStatus = ICUSW_STATUS_FAIL;
    60d4:	81 e0       	ldi	r24, 0x01	; 1
    60d6:	89 83       	std	Y+1, r24	; 0x01
			break;
    60d8:	03 c0       	rjmp	.+6      	; 0x60e0 <Icusw_enuInit+0xf4>
			Global_StaticINTxWhichTimer[Address_Icusw->exti_Intx_Index]=ICUSW_TIMER_INDEX_TIMER0;

			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    60da:	00 00       	nop
    60dc:	01 c0       	rjmp	.+2      	; 0x60e0 <Icusw_enuInit+0xf4>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    60de:	00 00       	nop
			break;
		}


	}
	Gie_enuEnableGlobalInterrupt();
    60e0:	0e 94 13 1b 	call	0x3626	; 0x3626 <Gie_enuEnableGlobalInterrupt>

	return Loc_enuIcuswStatus;
    60e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    60e6:	0f 90       	pop	r0
    60e8:	0f 90       	pop	r0
    60ea:	0f 90       	pop	r0
    60ec:	0f 90       	pop	r0
    60ee:	df 91       	pop	r29
    60f0:	cf 91       	pop	r28
    60f2:	08 95       	ret

000060f4 <Icusw_enuDeint>:

Icusw_StatusErrorType Icusw_enuDeint(Icusw_ConfigType* Address_Icusw ){
    60f4:	cf 93       	push	r28
    60f6:	df 93       	push	r29
    60f8:	00 d0       	rcall	.+0      	; 0x60fa <Icusw_enuDeint+0x6>
    60fa:	1f 92       	push	r1
    60fc:	cd b7       	in	r28, 0x3d	; 61
    60fe:	de b7       	in	r29, 0x3e	; 62
    6100:	9b 83       	std	Y+3, r25	; 0x03
    6102:	8a 83       	std	Y+2, r24	; 0x02
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    6104:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw){
    6106:	8a 81       	ldd	r24, Y+2	; 0x02
    6108:	9b 81       	ldd	r25, Y+3	; 0x03
    610a:	89 2b       	or	r24, r25
    610c:	11 f4       	brne	.+4      	; 0x6112 <Icusw_enuDeint+0x1e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    610e:	82 e0       	ldi	r24, 0x02	; 2
    6110:	89 83       	std	Y+1, r24	; 0x01
	}
	else{

	}

	return Loc_enuIcuswStatus;
    6112:	89 81       	ldd	r24, Y+1	; 0x01
}
    6114:	0f 90       	pop	r0
    6116:	0f 90       	pop	r0
    6118:	0f 90       	pop	r0
    611a:	df 91       	pop	r29
    611c:	cf 91       	pop	r28
    611e:	08 95       	ret

00006120 <Icusw_enuGetOnTimeMilliSeconds>:
Icusw_StatusErrorType Icusw_enuGetOnTimeMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_OnTime){
    6120:	cf 93       	push	r28
    6122:	df 93       	push	r29
    6124:	00 d0       	rcall	.+0      	; 0x6126 <Icusw_enuGetOnTimeMilliSeconds+0x6>
    6126:	00 d0       	rcall	.+0      	; 0x6128 <Icusw_enuGetOnTimeMilliSeconds+0x8>
    6128:	1f 92       	push	r1
    612a:	cd b7       	in	r28, 0x3d	; 61
    612c:	de b7       	in	r29, 0x3e	; 62
    612e:	9b 83       	std	Y+3, r25	; 0x03
    6130:	8a 83       	std	Y+2, r24	; 0x02
    6132:	7d 83       	std	Y+5, r23	; 0x05
    6134:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    6136:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw ||NULL == Address_OnTime ){
    6138:	8a 81       	ldd	r24, Y+2	; 0x02
    613a:	9b 81       	ldd	r25, Y+3	; 0x03
    613c:	89 2b       	or	r24, r25
    613e:	21 f0       	breq	.+8      	; 0x6148 <Icusw_enuGetOnTimeMilliSeconds+0x28>
    6140:	8c 81       	ldd	r24, Y+4	; 0x04
    6142:	9d 81       	ldd	r25, Y+5	; 0x05
    6144:	89 2b       	or	r24, r25
    6146:	19 f4       	brne	.+6      	; 0x614e <Icusw_enuGetOnTimeMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    6148:	82 e0       	ldi	r24, 0x02	; 2
    614a:	89 83       	std	Y+1, r24	; 0x01
    614c:	0f c0       	rjmp	.+30     	; 0x616c <Icusw_enuGetOnTimeMilliSeconds+0x4c>
	}
	else{

		*Address_OnTime = Global_StaticU32OnTime;
    614e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Global_StaticU32OnTime>
    6152:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Global_StaticU32OnTime+0x1>
    6156:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <Global_StaticU32OnTime+0x2>
    615a:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <Global_StaticU32OnTime+0x3>
    615e:	2c 81       	ldd	r18, Y+4	; 0x04
    6160:	3d 81       	ldd	r19, Y+5	; 0x05
    6162:	f9 01       	movw	r30, r18
    6164:	80 83       	st	Z, r24
    6166:	91 83       	std	Z+1, r25	; 0x01
    6168:	a2 83       	std	Z+2, r26	; 0x02
    616a:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    616c:	89 81       	ldd	r24, Y+1	; 0x01
}
    616e:	0f 90       	pop	r0
    6170:	0f 90       	pop	r0
    6172:	0f 90       	pop	r0
    6174:	0f 90       	pop	r0
    6176:	0f 90       	pop	r0
    6178:	df 91       	pop	r29
    617a:	cf 91       	pop	r28
    617c:	08 95       	ret

0000617e <Icusw_enuGetTotalTimeMilliSeconds>:

Icusw_StatusErrorType Icusw_enuGetTotalTimeMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_TotalTime){
    617e:	cf 93       	push	r28
    6180:	df 93       	push	r29
    6182:	00 d0       	rcall	.+0      	; 0x6184 <Icusw_enuGetTotalTimeMilliSeconds+0x6>
    6184:	00 d0       	rcall	.+0      	; 0x6186 <Icusw_enuGetTotalTimeMilliSeconds+0x8>
    6186:	1f 92       	push	r1
    6188:	cd b7       	in	r28, 0x3d	; 61
    618a:	de b7       	in	r29, 0x3e	; 62
    618c:	9b 83       	std	Y+3, r25	; 0x03
    618e:	8a 83       	std	Y+2, r24	; 0x02
    6190:	7d 83       	std	Y+5, r23	; 0x05
    6192:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    6194:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw||NULL == Address_TotalTime ){
    6196:	8a 81       	ldd	r24, Y+2	; 0x02
    6198:	9b 81       	ldd	r25, Y+3	; 0x03
    619a:	89 2b       	or	r24, r25
    619c:	21 f0       	breq	.+8      	; 0x61a6 <Icusw_enuGetTotalTimeMilliSeconds+0x28>
    619e:	8c 81       	ldd	r24, Y+4	; 0x04
    61a0:	9d 81       	ldd	r25, Y+5	; 0x05
    61a2:	89 2b       	or	r24, r25
    61a4:	19 f4       	brne	.+6      	; 0x61ac <Icusw_enuGetTotalTimeMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    61a6:	82 e0       	ldi	r24, 0x02	; 2
    61a8:	89 83       	std	Y+1, r24	; 0x01
    61aa:	0f c0       	rjmp	.+30     	; 0x61ca <Icusw_enuGetTotalTimeMilliSeconds+0x4c>
	}
	else{
		*Address_TotalTime = Global_StaticU32TotalTime;
    61ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Global_StaticU32TotalTime>
    61b0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Global_StaticU32TotalTime+0x1>
    61b4:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <Global_StaticU32TotalTime+0x2>
    61b8:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <Global_StaticU32TotalTime+0x3>
    61bc:	2c 81       	ldd	r18, Y+4	; 0x04
    61be:	3d 81       	ldd	r19, Y+5	; 0x05
    61c0:	f9 01       	movw	r30, r18
    61c2:	80 83       	st	Z, r24
    61c4:	91 83       	std	Z+1, r25	; 0x01
    61c6:	a2 83       	std	Z+2, r26	; 0x02
    61c8:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    61ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    61cc:	0f 90       	pop	r0
    61ce:	0f 90       	pop	r0
    61d0:	0f 90       	pop	r0
    61d2:	0f 90       	pop	r0
    61d4:	0f 90       	pop	r0
    61d6:	df 91       	pop	r29
    61d8:	cf 91       	pop	r28
    61da:	08 95       	ret

000061dc <Icusw_enuGetDutyCycleMilliSeconds>:

Icusw_StatusErrorType Icusw_enuGetDutyCycleMilliSeconds(Icusw_ConfigType* Address_Icusw, u32* Address_DutyTime){
    61dc:	cf 93       	push	r28
    61de:	df 93       	push	r29
    61e0:	00 d0       	rcall	.+0      	; 0x61e2 <Icusw_enuGetDutyCycleMilliSeconds+0x6>
    61e2:	00 d0       	rcall	.+0      	; 0x61e4 <Icusw_enuGetDutyCycleMilliSeconds+0x8>
    61e4:	1f 92       	push	r1
    61e6:	cd b7       	in	r28, 0x3d	; 61
    61e8:	de b7       	in	r29, 0x3e	; 62
    61ea:	9b 83       	std	Y+3, r25	; 0x03
    61ec:	8a 83       	std	Y+2, r24	; 0x02
    61ee:	7d 83       	std	Y+5, r23	; 0x05
    61f0:	6c 83       	std	Y+4, r22	; 0x04
	Icusw_StatusErrorType Loc_enuIcuswStatus = ICUSW_STATUS_OK;
    61f2:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_Icusw ||NULL ==Address_DutyTime){
    61f4:	8a 81       	ldd	r24, Y+2	; 0x02
    61f6:	9b 81       	ldd	r25, Y+3	; 0x03
    61f8:	89 2b       	or	r24, r25
    61fa:	21 f0       	breq	.+8      	; 0x6204 <Icusw_enuGetDutyCycleMilliSeconds+0x28>
    61fc:	8c 81       	ldd	r24, Y+4	; 0x04
    61fe:	9d 81       	ldd	r25, Y+5	; 0x05
    6200:	89 2b       	or	r24, r25
    6202:	19 f4       	brne	.+6      	; 0x620a <Icusw_enuGetDutyCycleMilliSeconds+0x2e>
		Loc_enuIcuswStatus = ICUSW_STATUS_NULL_POINTER_ADDRESS;
    6204:	82 e0       	ldi	r24, 0x02	; 2
    6206:	89 83       	std	Y+1, r24	; 0x01
    6208:	0f c0       	rjmp	.+30     	; 0x6228 <Icusw_enuGetDutyCycleMilliSeconds+0x4c>
	}
	else{
		*Address_DutyTime = Global_StaticU32DutyTime;
    620a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Global_StaticU32DutyTime>
    620e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <Global_StaticU32DutyTime+0x1>
    6212:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <Global_StaticU32DutyTime+0x2>
    6216:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <Global_StaticU32DutyTime+0x3>
    621a:	2c 81       	ldd	r18, Y+4	; 0x04
    621c:	3d 81       	ldd	r19, Y+5	; 0x05
    621e:	f9 01       	movw	r30, r18
    6220:	80 83       	st	Z, r24
    6222:	91 83       	std	Z+1, r25	; 0x01
    6224:	a2 83       	std	Z+2, r26	; 0x02
    6226:	b3 83       	std	Z+3, r27	; 0x03
	}

	return Loc_enuIcuswStatus;
    6228:	89 81       	ldd	r24, Y+1	; 0x01
}
    622a:	0f 90       	pop	r0
    622c:	0f 90       	pop	r0
    622e:	0f 90       	pop	r0
    6230:	0f 90       	pop	r0
    6232:	0f 90       	pop	r0
    6234:	df 91       	pop	r29
    6236:	cf 91       	pop	r28
    6238:	08 95       	ret

0000623a <Timer_voidTimerOverflowIsr>:


/************************************Static implementation ************************/

void Timer_voidTimerOverflowIsr(void){
    623a:	cf 93       	push	r28
    623c:	df 93       	push	r29
    623e:	cd b7       	in	r28, 0x3d	; 61
    6240:	de b7       	in	r29, 0x3e	; 62
	Global_StaticU32OverflowCounter++;
    6242:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Global_StaticU32OverflowCounter>
    6246:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Global_StaticU32OverflowCounter+0x1>
    624a:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <Global_StaticU32OverflowCounter+0x2>
    624e:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <Global_StaticU32OverflowCounter+0x3>
    6252:	01 96       	adiw	r24, 0x01	; 1
    6254:	a1 1d       	adc	r26, r1
    6256:	b1 1d       	adc	r27, r1
    6258:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Global_StaticU32OverflowCounter>
    625c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Global_StaticU32OverflowCounter+0x1>
    6260:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <Global_StaticU32OverflowCounter+0x2>
    6264:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <Global_StaticU32OverflowCounter+0x3>

}
    6268:	00 00       	nop
    626a:	df 91       	pop	r29
    626c:	cf 91       	pop	r28
    626e:	08 95       	ret

00006270 <Icusw_voidINT0Isr>:



void Icusw_voidINT0Isr(void){
    6270:	cf 92       	push	r12
    6272:	df 92       	push	r13
    6274:	ef 92       	push	r14
    6276:	ff 92       	push	r15
    6278:	cf 93       	push	r28
    627a:	df 93       	push	r29
    627c:	cd b7       	in	r28, 0x3d	; 61
    627e:	de b7       	in	r29, 0x3e	; 62

	static u16 Loc_u32OnTicks = ZERO_VALUE;
	static u16 Loc_u32TotalTicks = ZERO_VALUE;

	// first edge = Rising
	if(Loc_u8Counter == ZERO_VALUE){
    6280:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Loc_u8Counter.1797>
    6284:	88 23       	and	r24, r24
    6286:	89 f5       	brne	.+98     	; 0x62ea <Icusw_voidINT0Isr+0x7a>
		Loc_u8Counter++;
    6288:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Loc_u8Counter.1797>
    628c:	8f 5f       	subi	r24, 0xFF	; 255
    628e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Loc_u8Counter.1797>
		Global_StaticU32OverflowCounter = ZERO_VALUE;
    6292:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Global_StaticU32OverflowCounter>
    6296:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Global_StaticU32OverflowCounter+0x1>
    629a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Global_StaticU32OverflowCounter+0x2>
    629e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Global_StaticU32OverflowCounter+0x3>
		 Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);
    62a2:	62 e0       	ldi	r22, 0x02	; 2
    62a4:	80 e0       	ldi	r24, 0x00	; 0
    62a6:	0e 94 80 1b 	call	0x3700	; 0x3700 <Exti_enuEnable>

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    62aa:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Global_StaticINTxWhichTimer>
    62ae:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Global_StaticINTxWhichTimer+0x1>
    62b2:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <Global_StaticINTxWhichTimer+0x2>
    62b6:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <Global_StaticINTxWhichTimer+0x3>
    62ba:	81 30       	cpi	r24, 0x01	; 1
    62bc:	91 05       	cpc	r25, r1
    62be:	a1 05       	cpc	r26, r1
    62c0:	b1 05       	cpc	r27, r1
    62c2:	09 f4       	brne	.+2      	; 0x62c6 <Icusw_voidINT0Isr+0x56>
    62c4:	44 c1       	rjmp	.+648    	; 0x654e <Icusw_voidINT0Isr+0x2de>
    62c6:	81 30       	cpi	r24, 0x01	; 1
    62c8:	91 05       	cpc	r25, r1
    62ca:	a1 05       	cpc	r26, r1
    62cc:	b1 05       	cpc	r27, r1
    62ce:	30 f0       	brcs	.+12     	; 0x62dc <Icusw_voidINT0Isr+0x6c>
    62d0:	02 97       	sbiw	r24, 0x02	; 2
    62d2:	a1 05       	cpc	r26, r1
    62d4:	b1 05       	cpc	r27, r1
    62d6:	09 f4       	brne	.+2      	; 0x62da <Icusw_voidINT0Isr+0x6a>
    62d8:	3c c1       	rjmp	.+632    	; 0x6552 <Icusw_voidINT0Isr+0x2e2>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    62da:	40 c1       	rjmp	.+640    	; 0x655c <Icusw_voidINT0Isr+0x2ec>
		 Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16FirstTicks);
    62dc:	66 e2       	ldi	r22, 0x26	; 38
    62de:	71 e0       	ldi	r23, 0x01	; 1
    62e0:	87 ea       	ldi	r24, 0xA7	; 167
    62e2:	90 e0       	ldi	r25, 0x00	; 0
    62e4:	0e 94 94 11 	call	0x2328	; 0x2328 <Timer0_enuGetTimeElapsed>

			break;
    62e8:	39 c1       	rjmp	.+626    	; 0x655c <Icusw_voidINT0Isr+0x2ec>
		}


	}

	else if(Loc_u8Counter == ONE_VALUE){
    62ea:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Loc_u8Counter.1797>
    62ee:	81 30       	cpi	r24, 0x01	; 1
    62f0:	09 f0       	breq	.+2      	; 0x62f4 <Icusw_voidINT0Isr+0x84>
    62f2:	49 c0       	rjmp	.+146    	; 0x6386 <Icusw_voidINT0Isr+0x116>

		Loc_u8Counter++;
    62f4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Loc_u8Counter.1797>
    62f8:	8f 5f       	subi	r24, 0xFF	; 255
    62fa:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Loc_u8Counter.1797>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
    62fe:	63 e0       	ldi	r22, 0x03	; 3
    6300:	80 e0       	ldi	r24, 0x00	; 0
    6302:	0e 94 80 1b 	call	0x3700	; 0x3700 <Exti_enuEnable>
		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    6306:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Global_StaticINTxWhichTimer>
    630a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Global_StaticINTxWhichTimer+0x1>
    630e:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <Global_StaticINTxWhichTimer+0x2>
    6312:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <Global_StaticINTxWhichTimer+0x3>
    6316:	81 30       	cpi	r24, 0x01	; 1
    6318:	91 05       	cpc	r25, r1
    631a:	a1 05       	cpc	r26, r1
    631c:	b1 05       	cpc	r27, r1
    631e:	09 f4       	brne	.+2      	; 0x6322 <Icusw_voidINT0Isr+0xb2>
    6320:	1a c1       	rjmp	.+564    	; 0x6556 <Icusw_voidINT0Isr+0x2e6>
    6322:	81 30       	cpi	r24, 0x01	; 1
    6324:	91 05       	cpc	r25, r1
    6326:	a1 05       	cpc	r26, r1
    6328:	b1 05       	cpc	r27, r1
    632a:	30 f0       	brcs	.+12     	; 0x6338 <Icusw_voidINT0Isr+0xc8>
    632c:	02 97       	sbiw	r24, 0x02	; 2
    632e:	a1 05       	cpc	r26, r1
    6330:	b1 05       	cpc	r27, r1
    6332:	09 f4       	brne	.+2      	; 0x6336 <Icusw_voidINT0Isr+0xc6>
    6334:	12 c1       	rjmp	.+548    	; 0x655a <Icusw_voidINT0Isr+0x2ea>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    6336:	12 c1       	rjmp	.+548    	; 0x655c <Icusw_voidINT0Isr+0x2ec>
		Loc_u8Counter++;
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_RISING_EDGE);
		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16SecondTicks);
    6338:	68 e2       	ldi	r22, 0x28	; 40
    633a:	71 e0       	ldi	r23, 0x01	; 1
    633c:	87 ea       	ldi	r24, 0xA7	; 167
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	0e 94 94 11 	call	0x2328	; 0x2328 <Timer0_enuGetTimeElapsed>
			Loc_u32OnTicks = Loc_u16SecondTicks + (Global_StaticU32OverflowCounter*255)-Loc_u16FirstTicks;
    6344:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Global_StaticU32OverflowCounter>
    6348:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Global_StaticU32OverflowCounter+0x1>
    634c:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <Global_StaticU32OverflowCounter+0x2>
    6350:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <Global_StaticU32OverflowCounter+0x3>
    6354:	4f ef       	ldi	r20, 0xFF	; 255
    6356:	48 9f       	mul	r20, r24
    6358:	90 01       	movw	r18, r0
    635a:	49 9f       	mul	r20, r25
    635c:	30 0d       	add	r19, r0
    635e:	11 24       	eor	r1, r1
    6360:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Loc_u16SecondTicks.1799>
    6364:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <Loc_u16SecondTicks.1799+0x1>
    6368:	28 0f       	add	r18, r24
    636a:	39 1f       	adc	r19, r25
    636c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Loc_u16FirstTicks.1798>
    6370:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <Loc_u16FirstTicks.1798+0x1>
    6374:	a9 01       	movw	r20, r18
    6376:	48 1b       	sub	r20, r24
    6378:	59 0b       	sbc	r21, r25
    637a:	ca 01       	movw	r24, r20
    637c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <Loc_u32OnTicks.1801+0x1>
    6380:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <Loc_u32OnTicks.1801>



			break;
    6384:	eb c0       	rjmp	.+470    	; 0x655c <Icusw_voidINT0Isr+0x2ec>
		default:
			break;
		}
	}

	else if(Loc_u8Counter == TWO_VALUE){
    6386:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Loc_u8Counter.1797>
    638a:	82 30       	cpi	r24, 0x02	; 2
    638c:	09 f0       	breq	.+2      	; 0x6390 <Icusw_voidINT0Isr+0x120>
    638e:	e6 c0       	rjmp	.+460    	; 0x655c <Icusw_voidINT0Isr+0x2ec>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);
    6390:	62 e0       	ldi	r22, 0x02	; 2
    6392:	80 e0       	ldi	r24, 0x00	; 0
    6394:	0e 94 80 1b 	call	0x3700	; 0x3700 <Exti_enuEnable>

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){
    6398:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Global_StaticINTxWhichTimer>
    639c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Global_StaticINTxWhichTimer+0x1>
    63a0:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <Global_StaticINTxWhichTimer+0x2>
    63a4:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <Global_StaticINTxWhichTimer+0x3>
    63a8:	81 30       	cpi	r24, 0x01	; 1
    63aa:	91 05       	cpc	r25, r1
    63ac:	a1 05       	cpc	r26, r1
    63ae:	b1 05       	cpc	r27, r1
    63b0:	89 f1       	breq	.+98     	; 0x6414 <Icusw_voidINT0Isr+0x1a4>
    63b2:	81 30       	cpi	r24, 0x01	; 1
    63b4:	91 05       	cpc	r25, r1
    63b6:	a1 05       	cpc	r26, r1
    63b8:	b1 05       	cpc	r27, r1
    63ba:	28 f0       	brcs	.+10     	; 0x63c6 <Icusw_voidINT0Isr+0x156>
    63bc:	02 97       	sbiw	r24, 0x02	; 2
    63be:	a1 05       	cpc	r26, r1
    63c0:	b1 05       	cpc	r27, r1
    63c2:	51 f1       	breq	.+84     	; 0x6418 <Icusw_voidINT0Isr+0x1a8>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;

		default:
			break;
    63c4:	2a c0       	rjmp	.+84     	; 0x641a <Icusw_voidINT0Isr+0x1aa>
		Exti_enuEnable(EXTI_INT0_INDEX,EXTI_INT0_SELECT_FAILING_EDGE);

		switch(Global_StaticINTxWhichTimer[EXTI_INT0_INDEX]){

		case ICUSW_TIMER_INDEX_TIMER0 :
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16ThirdTicks);
    63c6:	6c e2       	ldi	r22, 0x2C	; 44
    63c8:	71 e0       	ldi	r23, 0x01	; 1
    63ca:	87 ea       	ldi	r24, 0xA7	; 167
    63cc:	90 e0       	ldi	r25, 0x00	; 0
    63ce:	0e 94 94 11 	call	0x2328	; 0x2328 <Timer0_enuGetTimeElapsed>
			Loc_u32TotalTicks = Loc_u16ThirdTicks + (Global_StaticU32OverflowCounter*255)-Loc_u16FirstTicks;
    63d2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Global_StaticU32OverflowCounter>
    63d6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Global_StaticU32OverflowCounter+0x1>
    63da:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <Global_StaticU32OverflowCounter+0x2>
    63de:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <Global_StaticU32OverflowCounter+0x3>
    63e2:	4f ef       	ldi	r20, 0xFF	; 255
    63e4:	48 9f       	mul	r20, r24
    63e6:	90 01       	movw	r18, r0
    63e8:	49 9f       	mul	r20, r25
    63ea:	30 0d       	add	r19, r0
    63ec:	11 24       	eor	r1, r1
    63ee:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Loc_u16ThirdTicks.1800>
    63f2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Loc_u16ThirdTicks.1800+0x1>
    63f6:	28 0f       	add	r18, r24
    63f8:	39 1f       	adc	r19, r25
    63fa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Loc_u16FirstTicks.1798>
    63fe:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <Loc_u16FirstTicks.1798+0x1>
    6402:	a9 01       	movw	r20, r18
    6404:	48 1b       	sub	r20, r24
    6406:	59 0b       	sbc	r21, r25
    6408:	ca 01       	movw	r24, r20
    640a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <Loc_u32TotalTicks.1802+0x1>
    640e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Loc_u32TotalTicks.1802>


			break;
    6412:	03 c0       	rjmp	.+6      	; 0x641a <Icusw_voidINT0Isr+0x1aa>
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    6414:	00 00       	nop
    6416:	01 c0       	rjmp	.+2      	; 0x641a <Icusw_voidINT0Isr+0x1aa>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    6418:	00 00       	nop

		default:
			break;
		}

		Global_StaticU32TotalTime = Loc_u32TotalTicks*ICUSW_16M_PRESCALER_DIV_1024_TIMER0;
    641a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Loc_u32TotalTicks.1802>
    641e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Loc_u32TotalTicks.1802+0x1>
    6422:	cc 01       	movw	r24, r24
    6424:	a0 e0       	ldi	r26, 0x00	; 0
    6426:	b0 e0       	ldi	r27, 0x00	; 0
    6428:	bc 01       	movw	r22, r24
    642a:	cd 01       	movw	r24, r26
    642c:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
    6430:	dc 01       	movw	r26, r24
    6432:	cb 01       	movw	r24, r22
    6434:	2f e6       	ldi	r18, 0x6F	; 111
    6436:	32 e1       	ldi	r19, 0x12	; 18
    6438:	43 e8       	ldi	r20, 0x83	; 131
    643a:	5d e3       	ldi	r21, 0x3D	; 61
    643c:	bc 01       	movw	r22, r24
    643e:	cd 01       	movw	r24, r26
    6440:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    6444:	dc 01       	movw	r26, r24
    6446:	cb 01       	movw	r24, r22
    6448:	bc 01       	movw	r22, r24
    644a:	cd 01       	movw	r24, r26
    644c:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6450:	dc 01       	movw	r26, r24
    6452:	cb 01       	movw	r24, r22
    6454:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <Global_StaticU32TotalTime>
    6458:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <Global_StaticU32TotalTime+0x1>
    645c:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <Global_StaticU32TotalTime+0x2>
    6460:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <Global_StaticU32TotalTime+0x3>
		Global_StaticU32OnTime = Loc_u32OnTicks*ICUSW_16M_PRESCALER_DIV_1024_TIMER0 ;
    6464:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Loc_u32OnTicks.1801>
    6468:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <Loc_u32OnTicks.1801+0x1>
    646c:	cc 01       	movw	r24, r24
    646e:	a0 e0       	ldi	r26, 0x00	; 0
    6470:	b0 e0       	ldi	r27, 0x00	; 0
    6472:	bc 01       	movw	r22, r24
    6474:	cd 01       	movw	r24, r26
    6476:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
    647a:	dc 01       	movw	r26, r24
    647c:	cb 01       	movw	r24, r22
    647e:	2f e6       	ldi	r18, 0x6F	; 111
    6480:	32 e1       	ldi	r19, 0x12	; 18
    6482:	43 e8       	ldi	r20, 0x83	; 131
    6484:	5d e3       	ldi	r21, 0x3D	; 61
    6486:	bc 01       	movw	r22, r24
    6488:	cd 01       	movw	r24, r26
    648a:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    648e:	dc 01       	movw	r26, r24
    6490:	cb 01       	movw	r24, r22
    6492:	bc 01       	movw	r22, r24
    6494:	cd 01       	movw	r24, r26
    6496:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    649a:	dc 01       	movw	r26, r24
    649c:	cb 01       	movw	r24, r22
    649e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Global_StaticU32OnTime>
    64a2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <Global_StaticU32OnTime+0x1>
    64a6:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <Global_StaticU32OnTime+0x2>
    64aa:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <Global_StaticU32OnTime+0x3>
		Global_StaticU32DutyTime = ((f32)Global_StaticU32OnTime /Global_StaticU32TotalTime)*100;
    64ae:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Global_StaticU32OnTime>
    64b2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <Global_StaticU32OnTime+0x1>
    64b6:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <Global_StaticU32OnTime+0x2>
    64ba:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <Global_StaticU32OnTime+0x3>
    64be:	bc 01       	movw	r22, r24
    64c0:	cd 01       	movw	r24, r26
    64c2:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
    64c6:	6b 01       	movw	r12, r22
    64c8:	7c 01       	movw	r14, r24
    64ca:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Global_StaticU32TotalTime>
    64ce:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <Global_StaticU32TotalTime+0x1>
    64d2:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <Global_StaticU32TotalTime+0x2>
    64d6:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <Global_StaticU32TotalTime+0x3>
    64da:	bc 01       	movw	r22, r24
    64dc:	cd 01       	movw	r24, r26
    64de:	0e 94 15 38 	call	0x702a	; 0x702a <__floatunsisf>
    64e2:	dc 01       	movw	r26, r24
    64e4:	cb 01       	movw	r24, r22
    64e6:	9c 01       	movw	r18, r24
    64e8:	ad 01       	movw	r20, r26
    64ea:	c7 01       	movw	r24, r14
    64ec:	b6 01       	movw	r22, r12
    64ee:	0e 94 6d 37 	call	0x6eda	; 0x6eda <__divsf3>
    64f2:	dc 01       	movw	r26, r24
    64f4:	cb 01       	movw	r24, r22
    64f6:	20 e0       	ldi	r18, 0x00	; 0
    64f8:	30 e0       	ldi	r19, 0x00	; 0
    64fa:	48 ec       	ldi	r20, 0xC8	; 200
    64fc:	52 e4       	ldi	r21, 0x42	; 66
    64fe:	bc 01       	movw	r22, r24
    6500:	cd 01       	movw	r24, r26
    6502:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    6506:	dc 01       	movw	r26, r24
    6508:	cb 01       	movw	r24, r22
    650a:	bc 01       	movw	r22, r24
    650c:	cd 01       	movw	r24, r26
    650e:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6512:	dc 01       	movw	r26, r24
    6514:	cb 01       	movw	r24, r22
    6516:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Global_StaticU32DutyTime>
    651a:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <Global_StaticU32DutyTime+0x1>
    651e:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <Global_StaticU32DutyTime+0x2>
    6522:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <Global_StaticU32DutyTime+0x3>

		Global_StaticU32OverflowCounter = ZERO_VALUE;
    6526:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Global_StaticU32OverflowCounter>
    652a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Global_StaticU32OverflowCounter+0x1>
    652e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Global_StaticU32OverflowCounter+0x2>
    6532:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Global_StaticU32OverflowCounter+0x3>
		Loc_u8Counter = ONE_VALUE;
    6536:	81 e0       	ldi	r24, 0x01	; 1
    6538:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Loc_u8Counter.1797>
		Loc_u16FirstTicks =Loc_u16ThirdTicks;
    653c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Loc_u16ThirdTicks.1800>
    6540:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <Loc_u16ThirdTicks.1800+0x1>
    6544:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <Loc_u16FirstTicks.1798+0x1>
    6548:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Loc_u16FirstTicks.1798>



	}

}
    654c:	07 c0       	rjmp	.+14     	; 0x655c <Icusw_voidINT0Isr+0x2ec>
			Timer0_enuGetTimeElapsed(&Global_StaticTimer0, &Loc_u16FirstTicks);

			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    654e:	00 00       	nop
    6550:	05 c0       	rjmp	.+10     	; 0x655c <Icusw_voidINT0Isr+0x2ec>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    6552:	00 00       	nop
    6554:	03 c0       	rjmp	.+6      	; 0x655c <Icusw_voidINT0Isr+0x2ec>


			break;
		case ICUSW_TIMER_INDEX_TIMER1:

			break;
    6556:	00 00       	nop
    6558:	01 c0       	rjmp	.+2      	; 0x655c <Icusw_voidINT0Isr+0x2ec>
		case ICUSW_TIMER_INDEX_TIMER2:

			break;
    655a:	00 00       	nop



	}

}
    655c:	00 00       	nop
    655e:	df 91       	pop	r29
    6560:	cf 91       	pop	r28
    6562:	ff 90       	pop	r15
    6564:	ef 90       	pop	r14
    6566:	df 90       	pop	r13
    6568:	cf 90       	pop	r12
    656a:	08 95       	ret

0000656c <Icusw_voidINT1Isr>:


void Icusw_voidINT1Isr(void){
    656c:	cf 93       	push	r28
    656e:	df 93       	push	r29
    6570:	cd b7       	in	r28, 0x3d	; 61
    6572:	de b7       	in	r29, 0x3e	; 62

}
    6574:	00 00       	nop
    6576:	df 91       	pop	r29
    6578:	cf 91       	pop	r28
    657a:	08 95       	ret

0000657c <Icusw_voidINT2Isr>:
void Icusw_voidINT2Isr(void){
    657c:	cf 93       	push	r28
    657e:	df 93       	push	r29
    6580:	cd b7       	in	r28, 0x3d	; 61
    6582:	de b7       	in	r29, 0x3e	; 62

}
    6584:	00 00       	nop
    6586:	df 91       	pop	r29
    6588:	cf 91       	pop	r28
    658a:	08 95       	ret

0000658c <ExternalEeprom_WriteByte>:



/********************************** Software Interfaces Declarations *******************/

ExternalEeprom_StatusErrorType ExternalEeprom_WriteByte(u8 Copy_u8SlaveAddress,u8 Copy_u8PositionAddressInsideEerpom,u8 Copy_u8Data){
    658c:	cf 93       	push	r28
    658e:	df 93       	push	r29
    6590:	00 d0       	rcall	.+0      	; 0x6592 <ExternalEeprom_WriteByte+0x6>
    6592:	00 d0       	rcall	.+0      	; 0x6594 <ExternalEeprom_WriteByte+0x8>
    6594:	1f 92       	push	r1
    6596:	cd b7       	in	r28, 0x3d	; 61
    6598:	de b7       	in	r29, 0x3e	; 62
    659a:	8b 83       	std	Y+3, r24	; 0x03
    659c:	6c 83       	std	Y+4, r22	; 0x04
    659e:	4d 83       	std	Y+5, r20	; 0x05
	ExternalEeprom_StatusErrorType Loc_enuExternlEepromStatus = EXTERNAL_EEPROM_STATUS_OK;
    65a0:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Temp;
	I2c_enuMasterTransmitStartConditionBlocking();
    65a2:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
	I2c_enuMasterTransmitAddressWritingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    65a6:	ce 01       	movw	r24, r28
    65a8:	02 96       	adiw	r24, 0x02	; 2
    65aa:	bc 01       	movw	r22, r24
    65ac:	8b 81       	ldd	r24, Y+3	; 0x03
    65ae:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
	I2c_enuMasterTransmitDataWritingBlocking(Copy_u8PositionAddressInsideEerpom, &Loc_u8Temp);
    65b2:	ce 01       	movw	r24, r28
    65b4:	02 96       	adiw	r24, 0x02	; 2
    65b6:	bc 01       	movw	r22, r24
    65b8:	8c 81       	ldd	r24, Y+4	; 0x04
    65ba:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
	I2c_enuMasterTransmitDataWritingBlocking(Copy_u8Data, &Loc_u8Temp);
    65be:	ce 01       	movw	r24, r28
    65c0:	02 96       	adiw	r24, 0x02	; 2
    65c2:	bc 01       	movw	r22, r24
    65c4:	8d 81       	ldd	r24, Y+5	; 0x05
    65c6:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
	I2c_enuMasterTransmitStopConditionBlocking();
    65ca:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>


	return Loc_enuExternlEepromStatus;
    65ce:	89 81       	ldd	r24, Y+1	; 0x01

}
    65d0:	0f 90       	pop	r0
    65d2:	0f 90       	pop	r0
    65d4:	0f 90       	pop	r0
    65d6:	0f 90       	pop	r0
    65d8:	0f 90       	pop	r0
    65da:	df 91       	pop	r29
    65dc:	cf 91       	pop	r28
    65de:	08 95       	ret

000065e0 <ExternalEeprom_ReadByte>:
ExternalEeprom_StatusErrorType ExternalEeprom_ReadByte(u8 Copy_u8SlaveAddress,u8 Copy_u8PositionAddressInsideEerpom,u8* Address_Result){
    65e0:	cf 93       	push	r28
    65e2:	df 93       	push	r29
    65e4:	cd b7       	in	r28, 0x3d	; 61
    65e6:	de b7       	in	r29, 0x3e	; 62
    65e8:	64 97       	sbiw	r28, 0x14	; 20
    65ea:	0f b6       	in	r0, 0x3f	; 63
    65ec:	f8 94       	cli
    65ee:	de bf       	out	0x3e, r29	; 62
    65f0:	0f be       	out	0x3f, r0	; 63
    65f2:	cd bf       	out	0x3d, r28	; 61
    65f4:	89 8b       	std	Y+17, r24	; 0x11
    65f6:	6a 8b       	std	Y+18, r22	; 0x12
    65f8:	5c 8b       	std	Y+20, r21	; 0x14
    65fa:	4b 8b       	std	Y+19, r20	; 0x13
	ExternalEeprom_StatusErrorType Loc_enuExternlEepromStatus = EXTERNAL_EEPROM_STATUS_OK;
    65fc:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Temp;
		I2c_enuMasterTransmitStartConditionBlocking();
    65fe:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    6602:	ce 01       	movw	r24, r28
    6604:	40 96       	adiw	r24, 0x10	; 16
    6606:	bc 01       	movw	r22, r24
    6608:	89 89       	ldd	r24, Y+17	; 0x11
    660a:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(Copy_u8PositionAddressInsideEerpom, &Loc_u8Temp);
    660e:	ce 01       	movw	r24, r28
    6610:	40 96       	adiw	r24, 0x10	; 16
    6612:	bc 01       	movw	r22, r24
    6614:	8a 89       	ldd	r24, Y+18	; 0x12
    6616:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    661a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    661e:	ce 01       	movw	r24, r28
    6620:	40 96       	adiw	r24, 0x10	; 16
    6622:	bc 01       	movw	r22, r24
    6624:	89 89       	ldd	r24, Y+17	; 0x11
    6626:	0e 94 f6 19 	call	0x33ec	; 0x33ec <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(Address_Result,I2c_NACK_VALUE);
    662a:	8b 89       	ldd	r24, Y+19	; 0x13
    662c:	9c 89       	ldd	r25, Y+20	; 0x14
    662e:	60 e0       	ldi	r22, 0x00	; 0
    6630:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    6634:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>
    6638:	80 e0       	ldi	r24, 0x00	; 0
    663a:	90 e0       	ldi	r25, 0x00	; 0
    663c:	a0 e8       	ldi	r26, 0x80	; 128
    663e:	bf e3       	ldi	r27, 0x3F	; 63
    6640:	8a 83       	std	Y+2, r24	; 0x02
    6642:	9b 83       	std	Y+3, r25	; 0x03
    6644:	ac 83       	std	Y+4, r26	; 0x04
    6646:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6648:	20 e0       	ldi	r18, 0x00	; 0
    664a:	30 e0       	ldi	r19, 0x00	; 0
    664c:	4a e7       	ldi	r20, 0x7A	; 122
    664e:	55 e4       	ldi	r21, 0x45	; 69
    6650:	6a 81       	ldd	r22, Y+2	; 0x02
    6652:	7b 81       	ldd	r23, Y+3	; 0x03
    6654:	8c 81       	ldd	r24, Y+4	; 0x04
    6656:	9d 81       	ldd	r25, Y+5	; 0x05
    6658:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    665c:	dc 01       	movw	r26, r24
    665e:	cb 01       	movw	r24, r22
    6660:	8e 83       	std	Y+6, r24	; 0x06
    6662:	9f 83       	std	Y+7, r25	; 0x07
    6664:	a8 87       	std	Y+8, r26	; 0x08
    6666:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    6668:	20 e0       	ldi	r18, 0x00	; 0
    666a:	30 e0       	ldi	r19, 0x00	; 0
    666c:	40 e8       	ldi	r20, 0x80	; 128
    666e:	5f e3       	ldi	r21, 0x3F	; 63
    6670:	6e 81       	ldd	r22, Y+6	; 0x06
    6672:	7f 81       	ldd	r23, Y+7	; 0x07
    6674:	88 85       	ldd	r24, Y+8	; 0x08
    6676:	99 85       	ldd	r25, Y+9	; 0x09
    6678:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    667c:	88 23       	and	r24, r24
    667e:	2c f4       	brge	.+10     	; 0x668a <ExternalEeprom_ReadByte+0xaa>
		__ticks = 1;
    6680:	81 e0       	ldi	r24, 0x01	; 1
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	9b 87       	std	Y+11, r25	; 0x0b
    6686:	8a 87       	std	Y+10, r24	; 0x0a
    6688:	3f c0       	rjmp	.+126    	; 0x6708 <ExternalEeprom_ReadByte+0x128>
	else if (__tmp > 65535)
    668a:	20 e0       	ldi	r18, 0x00	; 0
    668c:	3f ef       	ldi	r19, 0xFF	; 255
    668e:	4f e7       	ldi	r20, 0x7F	; 127
    6690:	57 e4       	ldi	r21, 0x47	; 71
    6692:	6e 81       	ldd	r22, Y+6	; 0x06
    6694:	7f 81       	ldd	r23, Y+7	; 0x07
    6696:	88 85       	ldd	r24, Y+8	; 0x08
    6698:	99 85       	ldd	r25, Y+9	; 0x09
    669a:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    669e:	18 16       	cp	r1, r24
    66a0:	4c f5       	brge	.+82     	; 0x66f4 <ExternalEeprom_ReadByte+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    66a2:	20 e0       	ldi	r18, 0x00	; 0
    66a4:	30 e0       	ldi	r19, 0x00	; 0
    66a6:	40 e2       	ldi	r20, 0x20	; 32
    66a8:	51 e4       	ldi	r21, 0x41	; 65
    66aa:	6a 81       	ldd	r22, Y+2	; 0x02
    66ac:	7b 81       	ldd	r23, Y+3	; 0x03
    66ae:	8c 81       	ldd	r24, Y+4	; 0x04
    66b0:	9d 81       	ldd	r25, Y+5	; 0x05
    66b2:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    66b6:	dc 01       	movw	r26, r24
    66b8:	cb 01       	movw	r24, r22
    66ba:	bc 01       	movw	r22, r24
    66bc:	cd 01       	movw	r24, r26
    66be:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    66c2:	dc 01       	movw	r26, r24
    66c4:	cb 01       	movw	r24, r22
    66c6:	9b 87       	std	Y+11, r25	; 0x0b
    66c8:	8a 87       	std	Y+10, r24	; 0x0a
    66ca:	0f c0       	rjmp	.+30     	; 0x66ea <ExternalEeprom_ReadByte+0x10a>
    66cc:	80 e9       	ldi	r24, 0x90	; 144
    66ce:	91 e0       	ldi	r25, 0x01	; 1
    66d0:	9d 87       	std	Y+13, r25	; 0x0d
    66d2:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    66d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    66d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    66d8:	01 97       	sbiw	r24, 0x01	; 1
    66da:	f1 f7       	brne	.-4      	; 0x66d8 <ExternalEeprom_ReadByte+0xf8>
    66dc:	9d 87       	std	Y+13, r25	; 0x0d
    66de:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    66e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    66e4:	01 97       	sbiw	r24, 0x01	; 1
    66e6:	9b 87       	std	Y+11, r25	; 0x0b
    66e8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    66ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    66ee:	89 2b       	or	r24, r25
    66f0:	69 f7       	brne	.-38     	; 0x66cc <ExternalEeprom_ReadByte+0xec>
    66f2:	14 c0       	rjmp	.+40     	; 0x671c <ExternalEeprom_ReadByte+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66f4:	6e 81       	ldd	r22, Y+6	; 0x06
    66f6:	7f 81       	ldd	r23, Y+7	; 0x07
    66f8:	88 85       	ldd	r24, Y+8	; 0x08
    66fa:	99 85       	ldd	r25, Y+9	; 0x09
    66fc:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6700:	dc 01       	movw	r26, r24
    6702:	cb 01       	movw	r24, r22
    6704:	9b 87       	std	Y+11, r25	; 0x0b
    6706:	8a 87       	std	Y+10, r24	; 0x0a
    6708:	8a 85       	ldd	r24, Y+10	; 0x0a
    670a:	9b 85       	ldd	r25, Y+11	; 0x0b
    670c:	9f 87       	std	Y+15, r25	; 0x0f
    670e:	8e 87       	std	Y+14, r24	; 0x0e
    6710:	8e 85       	ldd	r24, Y+14	; 0x0e
    6712:	9f 85       	ldd	r25, Y+15	; 0x0f
    6714:	01 97       	sbiw	r24, 0x01	; 1
    6716:	f1 f7       	brne	.-4      	; 0x6714 <ExternalEeprom_ReadByte+0x134>
    6718:	9f 87       	std	Y+15, r25	; 0x0f
    671a:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(1);
	return Loc_enuExternlEepromStatus;
    671c:	89 81       	ldd	r24, Y+1	; 0x01

}
    671e:	64 96       	adiw	r28, 0x14	; 20
    6720:	0f b6       	in	r0, 0x3f	; 63
    6722:	f8 94       	cli
    6724:	de bf       	out	0x3e, r29	; 62
    6726:	0f be       	out	0x3f, r0	; 63
    6728:	cd bf       	out	0x3d, r28	; 61
    672a:	df 91       	pop	r29
    672c:	cf 91       	pop	r28
    672e:	08 95       	ret

00006730 <ExternalEeprom_WriteU8Array>:
//
//	return Loc_enuExternlEepromStatus;
//
//}

ExternalEeprom_StatusErrorType ExternalEeprom_WriteU8Array(u8 Copy_u8SlaveAddress,u8 Copy_u8StartPositionAddressInsideEerpom,u8 Array[], u8 Copy_u8NumbersOfByte){
    6730:	cf 93       	push	r28
    6732:	df 93       	push	r29
    6734:	cd b7       	in	r28, 0x3d	; 61
    6736:	de b7       	in	r29, 0x3e	; 62
    6738:	66 97       	sbiw	r28, 0x16	; 22
    673a:	0f b6       	in	r0, 0x3f	; 63
    673c:	f8 94       	cli
    673e:	de bf       	out	0x3e, r29	; 62
    6740:	0f be       	out	0x3f, r0	; 63
    6742:	cd bf       	out	0x3d, r28	; 61
    6744:	8a 8b       	std	Y+18, r24	; 0x12
    6746:	6b 8b       	std	Y+19, r22	; 0x13
    6748:	5d 8b       	std	Y+21, r21	; 0x15
    674a:	4c 8b       	std	Y+20, r20	; 0x14
    674c:	2e 8b       	std	Y+22, r18	; 0x16
	ExternalEeprom_StatusErrorType Loc_enuExternlEepromStatus = EXTERNAL_EEPROM_STATUS_OK;
    674e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8Temp;
	u8 Loc_u8Counter = ZERO_VALUE;
    6750:	19 82       	std	Y+1, r1	; 0x01
	I2c_enuMasterTransmitStartConditionBlocking();
    6752:	0e 94 70 19 	call	0x32e0	; 0x32e0 <I2c_enuMasterTransmitStartConditionBlocking>
	I2c_enuMasterTransmitAddressWritingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    6756:	ce 01       	movw	r24, r28
    6758:	41 96       	adiw	r24, 0x11	; 17
    675a:	bc 01       	movw	r22, r24
    675c:	8a 89       	ldd	r24, Y+18	; 0x12
    675e:	0e 94 2d 1a 	call	0x345a	; 0x345a <I2c_enuMasterTransmitAddressWritingBlocking>
	I2c_enuMasterTransmitDataWritingBlocking(Copy_u8StartPositionAddressInsideEerpom, &Loc_u8Temp);
    6762:	ce 01       	movw	r24, r28
    6764:	41 96       	adiw	r24, 0x11	; 17
    6766:	bc 01       	movw	r22, r24
    6768:	8b 89       	ldd	r24, Y+19	; 0x13
    676a:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>

	for(Loc_u8Counter = ZERO_VALUE; Loc_u8Counter<Copy_u8NumbersOfByte;Loc_u8Counter++){
    676e:	19 82       	std	Y+1, r1	; 0x01
    6770:	12 c0       	rjmp	.+36     	; 0x6796 <ExternalEeprom_WriteU8Array+0x66>
		I2c_enuMasterTransmitDataWritingBlocking(Array[Loc_u8Counter], &Loc_u8Temp);
    6772:	89 81       	ldd	r24, Y+1	; 0x01
    6774:	88 2f       	mov	r24, r24
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	2c 89       	ldd	r18, Y+20	; 0x14
    677a:	3d 89       	ldd	r19, Y+21	; 0x15
    677c:	82 0f       	add	r24, r18
    677e:	93 1f       	adc	r25, r19
    6780:	fc 01       	movw	r30, r24
    6782:	20 81       	ld	r18, Z
    6784:	ce 01       	movw	r24, r28
    6786:	41 96       	adiw	r24, 0x11	; 17
    6788:	bc 01       	movw	r22, r24
    678a:	82 2f       	mov	r24, r18
    678c:	0e 94 c4 19 	call	0x3388	; 0x3388 <I2c_enuMasterTransmitDataWritingBlocking>
	u8 Loc_u8Counter = ZERO_VALUE;
	I2c_enuMasterTransmitStartConditionBlocking();
	I2c_enuMasterTransmitAddressWritingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
	I2c_enuMasterTransmitDataWritingBlocking(Copy_u8StartPositionAddressInsideEerpom, &Loc_u8Temp);

	for(Loc_u8Counter = ZERO_VALUE; Loc_u8Counter<Copy_u8NumbersOfByte;Loc_u8Counter++){
    6790:	89 81       	ldd	r24, Y+1	; 0x01
    6792:	8f 5f       	subi	r24, 0xFF	; 255
    6794:	89 83       	std	Y+1, r24	; 0x01
    6796:	99 81       	ldd	r25, Y+1	; 0x01
    6798:	8e 89       	ldd	r24, Y+22	; 0x16
    679a:	98 17       	cp	r25, r24
    679c:	50 f3       	brcs	.-44     	; 0x6772 <ExternalEeprom_WriteU8Array+0x42>
		I2c_enuMasterTransmitDataWritingBlocking(Array[Loc_u8Counter], &Loc_u8Temp);
	}

	I2c_enuMasterTransmitStopConditionBlocking();
    679e:	0e 94 8f 19 	call	0x331e	; 0x331e <I2c_enuMasterTransmitStopConditionBlocking>
    67a2:	80 e0       	ldi	r24, 0x00	; 0
    67a4:	90 e0       	ldi	r25, 0x00	; 0
    67a6:	a0 e8       	ldi	r26, 0x80	; 128
    67a8:	bf e3       	ldi	r27, 0x3F	; 63
    67aa:	8b 83       	std	Y+3, r24	; 0x03
    67ac:	9c 83       	std	Y+4, r25	; 0x04
    67ae:	ad 83       	std	Y+5, r26	; 0x05
    67b0:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    67b2:	20 e0       	ldi	r18, 0x00	; 0
    67b4:	30 e0       	ldi	r19, 0x00	; 0
    67b6:	4a e7       	ldi	r20, 0x7A	; 122
    67b8:	55 e4       	ldi	r21, 0x45	; 69
    67ba:	6b 81       	ldd	r22, Y+3	; 0x03
    67bc:	7c 81       	ldd	r23, Y+4	; 0x04
    67be:	8d 81       	ldd	r24, Y+5	; 0x05
    67c0:	9e 81       	ldd	r25, Y+6	; 0x06
    67c2:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    67c6:	dc 01       	movw	r26, r24
    67c8:	cb 01       	movw	r24, r22
    67ca:	8f 83       	std	Y+7, r24	; 0x07
    67cc:	98 87       	std	Y+8, r25	; 0x08
    67ce:	a9 87       	std	Y+9, r26	; 0x09
    67d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    67d2:	20 e0       	ldi	r18, 0x00	; 0
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	40 e8       	ldi	r20, 0x80	; 128
    67d8:	5f e3       	ldi	r21, 0x3F	; 63
    67da:	6f 81       	ldd	r22, Y+7	; 0x07
    67dc:	78 85       	ldd	r23, Y+8	; 0x08
    67de:	89 85       	ldd	r24, Y+9	; 0x09
    67e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    67e2:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    67e6:	88 23       	and	r24, r24
    67e8:	2c f4       	brge	.+10     	; 0x67f4 <ExternalEeprom_WriteU8Array+0xc4>
		__ticks = 1;
    67ea:	81 e0       	ldi	r24, 0x01	; 1
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	9c 87       	std	Y+12, r25	; 0x0c
    67f0:	8b 87       	std	Y+11, r24	; 0x0b
    67f2:	3f c0       	rjmp	.+126    	; 0x6872 <ExternalEeprom_WriteU8Array+0x142>
	else if (__tmp > 65535)
    67f4:	20 e0       	ldi	r18, 0x00	; 0
    67f6:	3f ef       	ldi	r19, 0xFF	; 255
    67f8:	4f e7       	ldi	r20, 0x7F	; 127
    67fa:	57 e4       	ldi	r21, 0x47	; 71
    67fc:	6f 81       	ldd	r22, Y+7	; 0x07
    67fe:	78 85       	ldd	r23, Y+8	; 0x08
    6800:	89 85       	ldd	r24, Y+9	; 0x09
    6802:	9a 85       	ldd	r25, Y+10	; 0x0a
    6804:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    6808:	18 16       	cp	r1, r24
    680a:	4c f5       	brge	.+82     	; 0x685e <ExternalEeprom_WriteU8Array+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    680c:	20 e0       	ldi	r18, 0x00	; 0
    680e:	30 e0       	ldi	r19, 0x00	; 0
    6810:	40 e2       	ldi	r20, 0x20	; 32
    6812:	51 e4       	ldi	r21, 0x41	; 65
    6814:	6b 81       	ldd	r22, Y+3	; 0x03
    6816:	7c 81       	ldd	r23, Y+4	; 0x04
    6818:	8d 81       	ldd	r24, Y+5	; 0x05
    681a:	9e 81       	ldd	r25, Y+6	; 0x06
    681c:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    6820:	dc 01       	movw	r26, r24
    6822:	cb 01       	movw	r24, r22
    6824:	bc 01       	movw	r22, r24
    6826:	cd 01       	movw	r24, r26
    6828:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    682c:	dc 01       	movw	r26, r24
    682e:	cb 01       	movw	r24, r22
    6830:	9c 87       	std	Y+12, r25	; 0x0c
    6832:	8b 87       	std	Y+11, r24	; 0x0b
    6834:	0f c0       	rjmp	.+30     	; 0x6854 <ExternalEeprom_WriteU8Array+0x124>
    6836:	80 e9       	ldi	r24, 0x90	; 144
    6838:	91 e0       	ldi	r25, 0x01	; 1
    683a:	9e 87       	std	Y+14, r25	; 0x0e
    683c:	8d 87       	std	Y+13, r24	; 0x0d
    683e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6840:	9e 85       	ldd	r25, Y+14	; 0x0e
    6842:	01 97       	sbiw	r24, 0x01	; 1
    6844:	f1 f7       	brne	.-4      	; 0x6842 <ExternalEeprom_WriteU8Array+0x112>
    6846:	9e 87       	std	Y+14, r25	; 0x0e
    6848:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    684a:	8b 85       	ldd	r24, Y+11	; 0x0b
    684c:	9c 85       	ldd	r25, Y+12	; 0x0c
    684e:	01 97       	sbiw	r24, 0x01	; 1
    6850:	9c 87       	std	Y+12, r25	; 0x0c
    6852:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6854:	8b 85       	ldd	r24, Y+11	; 0x0b
    6856:	9c 85       	ldd	r25, Y+12	; 0x0c
    6858:	89 2b       	or	r24, r25
    685a:	69 f7       	brne	.-38     	; 0x6836 <ExternalEeprom_WriteU8Array+0x106>
    685c:	14 c0       	rjmp	.+40     	; 0x6886 <ExternalEeprom_WriteU8Array+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    685e:	6f 81       	ldd	r22, Y+7	; 0x07
    6860:	78 85       	ldd	r23, Y+8	; 0x08
    6862:	89 85       	ldd	r24, Y+9	; 0x09
    6864:	9a 85       	ldd	r25, Y+10	; 0x0a
    6866:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    686a:	dc 01       	movw	r26, r24
    686c:	cb 01       	movw	r24, r22
    686e:	9c 87       	std	Y+12, r25	; 0x0c
    6870:	8b 87       	std	Y+11, r24	; 0x0b
    6872:	8b 85       	ldd	r24, Y+11	; 0x0b
    6874:	9c 85       	ldd	r25, Y+12	; 0x0c
    6876:	98 8b       	std	Y+16, r25	; 0x10
    6878:	8f 87       	std	Y+15, r24	; 0x0f
    687a:	8f 85       	ldd	r24, Y+15	; 0x0f
    687c:	98 89       	ldd	r25, Y+16	; 0x10
    687e:	01 97       	sbiw	r24, 0x01	; 1
    6880:	f1 f7       	brne	.-4      	; 0x687e <ExternalEeprom_WriteU8Array+0x14e>
    6882:	98 8b       	std	Y+16, r25	; 0x10
    6884:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	return Loc_enuExternlEepromStatus;
    6886:	8a 81       	ldd	r24, Y+2	; 0x02

}
    6888:	66 96       	adiw	r28, 0x16	; 22
    688a:	0f b6       	in	r0, 0x3f	; 63
    688c:	f8 94       	cli
    688e:	de bf       	out	0x3e, r29	; 62
    6890:	0f be       	out	0x3f, r0	; 63
    6892:	cd bf       	out	0x3d, r28	; 61
    6894:	df 91       	pop	r29
    6896:	cf 91       	pop	r28
    6898:	08 95       	ret

0000689a <Dc_Motor_MoveForward>:




/********************************** Software Interfaces Declarations *******************/
Dc_Motor_StatusErrorType Dc_Motor_MoveForward(const Dc_Motor_ConfigPinsType* Address_DcMotor){
    689a:	cf 93       	push	r28
    689c:	df 93       	push	r29
    689e:	00 d0       	rcall	.+0      	; 0x68a0 <Dc_Motor_MoveForward+0x6>
    68a0:	1f 92       	push	r1
    68a2:	cd b7       	in	r28, 0x3d	; 61
    68a4:	de b7       	in	r29, 0x3e	; 62
    68a6:	9b 83       	std	Y+3, r25	; 0x03
    68a8:	8a 83       	std	Y+2, r24	; 0x02
	Dc_Motor_StatusErrorType Loc_enuDcMotorStatusError = DC_MOTOR_STATUS_OK;
    68aa:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Address_DcMotor){
    68ac:	8a 81       	ldd	r24, Y+2	; 0x02
    68ae:	9b 81       	ldd	r25, Y+3	; 0x03
    68b0:	89 2b       	or	r24, r25
    68b2:	19 f4       	brne	.+6      	; 0x68ba <Dc_Motor_MoveForward+0x20>
		Loc_enuDcMotorStatusError = DC_MOTOR_STATUS_NULL_POINTER_ADDRESS;
    68b4:	82 e0       	ldi	r24, 0x02	; 2
    68b6:	89 83       	std	Y+1, r24	; 0x01
    68b8:	10 c0       	rjmp	.+32     	; 0x68da <Dc_Motor_MoveForward+0x40>
	}
	else{

		Loc_enuDcMotorStatusError = Dio_enuWriteChannel(Address_DcMotor->dc_motor_direction_pin1,DIO_HIGH);
    68ba:	8a 81       	ldd	r24, Y+2	; 0x02
    68bc:	9b 81       	ldd	r25, Y+3	; 0x03
    68be:	fc 01       	movw	r30, r24
    68c0:	80 81       	ld	r24, Z
    68c2:	61 e0       	ldi	r22, 0x01	; 1
    68c4:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    68c8:	89 83       	std	Y+1, r24	; 0x01
		Loc_enuDcMotorStatusError = Dio_enuWriteChannel(Address_DcMotor->dc_motor_direction_pin2,DIO_LOW);
    68ca:	8a 81       	ldd	r24, Y+2	; 0x02
    68cc:	9b 81       	ldd	r25, Y+3	; 0x03
    68ce:	fc 01       	movw	r30, r24
    68d0:	81 81       	ldd	r24, Z+1	; 0x01
    68d2:	60 e0       	ldi	r22, 0x00	; 0
    68d4:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    68d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuDcMotorStatusError;
    68da:	89 81       	ldd	r24, Y+1	; 0x01
}
    68dc:	0f 90       	pop	r0
    68de:	0f 90       	pop	r0
    68e0:	0f 90       	pop	r0
    68e2:	df 91       	pop	r29
    68e4:	cf 91       	pop	r28
    68e6:	08 95       	ret

000068e8 <Dc_Motor_MoveBackward>:

Dc_Motor_StatusErrorType Dc_Motor_MoveBackward(const Dc_Motor_ConfigPinsType* Address_DcMotor){
    68e8:	cf 93       	push	r28
    68ea:	df 93       	push	r29
    68ec:	00 d0       	rcall	.+0      	; 0x68ee <Dc_Motor_MoveBackward+0x6>
    68ee:	1f 92       	push	r1
    68f0:	cd b7       	in	r28, 0x3d	; 61
    68f2:	de b7       	in	r29, 0x3e	; 62
    68f4:	9b 83       	std	Y+3, r25	; 0x03
    68f6:	8a 83       	std	Y+2, r24	; 0x02
	Dc_Motor_StatusErrorType Loc_enuDcMotorStatusError = DC_MOTOR_STATUS_OK;
    68f8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Address_DcMotor){
    68fa:	8a 81       	ldd	r24, Y+2	; 0x02
    68fc:	9b 81       	ldd	r25, Y+3	; 0x03
    68fe:	89 2b       	or	r24, r25
    6900:	19 f4       	brne	.+6      	; 0x6908 <Dc_Motor_MoveBackward+0x20>
		Loc_enuDcMotorStatusError = DC_MOTOR_STATUS_NULL_POINTER_ADDRESS;
    6902:	82 e0       	ldi	r24, 0x02	; 2
    6904:	89 83       	std	Y+1, r24	; 0x01
    6906:	10 c0       	rjmp	.+32     	; 0x6928 <Dc_Motor_MoveBackward+0x40>
	}
	else{

		Loc_enuDcMotorStatusError = Dio_enuWriteChannel(Address_DcMotor->dc_motor_direction_pin1,DIO_LOW);
    6908:	8a 81       	ldd	r24, Y+2	; 0x02
    690a:	9b 81       	ldd	r25, Y+3	; 0x03
    690c:	fc 01       	movw	r30, r24
    690e:	80 81       	ld	r24, Z
    6910:	60 e0       	ldi	r22, 0x00	; 0
    6912:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    6916:	89 83       	std	Y+1, r24	; 0x01
		Loc_enuDcMotorStatusError = Dio_enuWriteChannel(Address_DcMotor->dc_motor_direction_pin2,DIO_HIGH);
    6918:	8a 81       	ldd	r24, Y+2	; 0x02
    691a:	9b 81       	ldd	r25, Y+3	; 0x03
    691c:	fc 01       	movw	r30, r24
    691e:	81 81       	ldd	r24, Z+1	; 0x01
    6920:	61 e0       	ldi	r22, 0x01	; 1
    6922:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    6926:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuDcMotorStatusError;
    6928:	89 81       	ldd	r24, Y+1	; 0x01
}
    692a:	0f 90       	pop	r0
    692c:	0f 90       	pop	r0
    692e:	0f 90       	pop	r0
    6930:	df 91       	pop	r29
    6932:	cf 91       	pop	r28
    6934:	08 95       	ret

00006936 <Dc_Motor_Stop>:
Dc_Motor_StatusErrorType Dc_Motor_Stop(const Dc_Motor_ConfigPinsType* Address_DcMotor){
    6936:	cf 93       	push	r28
    6938:	df 93       	push	r29
    693a:	00 d0       	rcall	.+0      	; 0x693c <Dc_Motor_Stop+0x6>
    693c:	1f 92       	push	r1
    693e:	cd b7       	in	r28, 0x3d	; 61
    6940:	de b7       	in	r29, 0x3e	; 62
    6942:	9b 83       	std	Y+3, r25	; 0x03
    6944:	8a 83       	std	Y+2, r24	; 0x02
	Dc_Motor_StatusErrorType Loc_enuDcMotorStatusError = DC_MOTOR_STATUS_OK;
    6946:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Address_DcMotor){
    6948:	8a 81       	ldd	r24, Y+2	; 0x02
    694a:	9b 81       	ldd	r25, Y+3	; 0x03
    694c:	89 2b       	or	r24, r25
    694e:	19 f4       	brne	.+6      	; 0x6956 <Dc_Motor_Stop+0x20>
		Loc_enuDcMotorStatusError = DC_MOTOR_STATUS_NULL_POINTER_ADDRESS;
    6950:	82 e0       	ldi	r24, 0x02	; 2
    6952:	89 83       	std	Y+1, r24	; 0x01
    6954:	10 c0       	rjmp	.+32     	; 0x6976 <Dc_Motor_Stop+0x40>
	}
	else{

		Loc_enuDcMotorStatusError = Dio_enuWriteChannel(Address_DcMotor->dc_motor_direction_pin1,DIO_LOW);
    6956:	8a 81       	ldd	r24, Y+2	; 0x02
    6958:	9b 81       	ldd	r25, Y+3	; 0x03
    695a:	fc 01       	movw	r30, r24
    695c:	80 81       	ld	r24, Z
    695e:	60 e0       	ldi	r22, 0x00	; 0
    6960:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    6964:	89 83       	std	Y+1, r24	; 0x01
		Loc_enuDcMotorStatusError = Dio_enuWriteChannel(Address_DcMotor->dc_motor_direction_pin2,DIO_LOW);
    6966:	8a 81       	ldd	r24, Y+2	; 0x02
    6968:	9b 81       	ldd	r25, Y+3	; 0x03
    696a:	fc 01       	movw	r30, r24
    696c:	81 81       	ldd	r24, Z+1	; 0x01
    696e:	60 e0       	ldi	r22, 0x00	; 0
    6970:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <Dio_enuWriteChannel>
    6974:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_enuDcMotorStatusError;
    6976:	89 81       	ldd	r24, Y+1	; 0x01
}
    6978:	0f 90       	pop	r0
    697a:	0f 90       	pop	r0
    697c:	0f 90       	pop	r0
    697e:	df 91       	pop	r29
    6980:	cf 91       	pop	r28
    6982:	08 95       	ret

00006984 <Button_enuRead>:



/********************************** Software Interfaces Declarations *******************/

Button_StatusErrorType Button_enuRead(const Button_ConfigType *Address_Button,Button_PressStatusType* Address_State ){
    6984:	cf 93       	push	r28
    6986:	df 93       	push	r29
    6988:	00 d0       	rcall	.+0      	; 0x698a <Button_enuRead+0x6>
    698a:	00 d0       	rcall	.+0      	; 0x698c <Button_enuRead+0x8>
    698c:	00 d0       	rcall	.+0      	; 0x698e <Button_enuRead+0xa>
    698e:	cd b7       	in	r28, 0x3d	; 61
    6990:	de b7       	in	r29, 0x3e	; 62
    6992:	9c 83       	std	Y+4, r25	; 0x04
    6994:	8b 83       	std	Y+3, r24	; 0x03
    6996:	7e 83       	std	Y+6, r23	; 0x06
    6998:	6d 83       	std	Y+5, r22	; 0x05

	Button_StatusErrorType Loc_enuStatus = BUTTON_STATUS_OK;
    699a:	19 82       	std	Y+1, r1	; 0x01
	Dio_ErrorStatusType Loc_enuDioState = DIO_STATUS_OK;
    699c:	1a 82       	std	Y+2, r1	; 0x02
	if( NULL == Address_Button || NULL == Address_State ){
    699e:	8b 81       	ldd	r24, Y+3	; 0x03
    69a0:	9c 81       	ldd	r25, Y+4	; 0x04
    69a2:	89 2b       	or	r24, r25
    69a4:	21 f0       	breq	.+8      	; 0x69ae <Button_enuRead+0x2a>
    69a6:	8d 81       	ldd	r24, Y+5	; 0x05
    69a8:	9e 81       	ldd	r25, Y+6	; 0x06
    69aa:	89 2b       	or	r24, r25
    69ac:	19 f4       	brne	.+6      	; 0x69b4 <Button_enuRead+0x30>
		Loc_enuStatus = BUTTON_STATUS_NULL_POINTER_ADDRESS;
    69ae:	82 e0       	ldi	r24, 0x02	; 2
    69b0:	89 83       	std	Y+1, r24	; 0x01
    69b2:	31 c0       	rjmp	.+98     	; 0x6a16 <Button_enuRead+0x92>

	}
	else{
	        switch(Address_Button->button_connection){
    69b4:	8b 81       	ldd	r24, Y+3	; 0x03
    69b6:	9c 81       	ldd	r25, Y+4	; 0x04
    69b8:	fc 01       	movw	r30, r24
    69ba:	81 81       	ldd	r24, Z+1	; 0x01
    69bc:	88 2f       	mov	r24, r24
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	00 97       	sbiw	r24, 0x00	; 0
    69c2:	71 f0       	breq	.+28     	; 0x69e0 <Button_enuRead+0x5c>
    69c4:	01 97       	sbiw	r24, 0x01	; 1
    69c6:	29 f5       	brne	.+74     	; 0x6a12 <Button_enuRead+0x8e>

	            case BUTTON_CONNECTION_PULL_DOWN:
	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    69c8:	8b 81       	ldd	r24, Y+3	; 0x03
    69ca:	9c 81       	ldd	r25, Y+4	; 0x04
    69cc:	fc 01       	movw	r30, r24
    69ce:	20 81       	ld	r18, Z
    69d0:	8d 81       	ldd	r24, Y+5	; 0x05
    69d2:	9e 81       	ldd	r25, Y+6	; 0x06
    69d4:	bc 01       	movw	r22, r24
    69d6:	82 2f       	mov	r24, r18
    69d8:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <Dio_enuReadChannel>
    69dc:	8a 83       	std	Y+2, r24	; 0x02
	                break;
    69de:	1b c0       	rjmp	.+54     	; 0x6a16 <Button_enuRead+0x92>
	            case BUTTON_CONNECTION_PULL_UP:

	            	Loc_enuDioState = Dio_enuReadChannel( (Address_Button->button_pin), (pu8) Address_State);
    69e0:	8b 81       	ldd	r24, Y+3	; 0x03
    69e2:	9c 81       	ldd	r25, Y+4	; 0x04
    69e4:	fc 01       	movw	r30, r24
    69e6:	20 81       	ld	r18, Z
    69e8:	8d 81       	ldd	r24, Y+5	; 0x05
    69ea:	9e 81       	ldd	r25, Y+6	; 0x06
    69ec:	bc 01       	movw	r22, r24
    69ee:	82 2f       	mov	r24, r18
    69f0:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <Dio_enuReadChannel>
    69f4:	8a 83       	std	Y+2, r24	; 0x02
	                *Address_State = !(*Address_State);
    69f6:	8d 81       	ldd	r24, Y+5	; 0x05
    69f8:	9e 81       	ldd	r25, Y+6	; 0x06
    69fa:	fc 01       	movw	r30, r24
    69fc:	90 81       	ld	r25, Z
    69fe:	81 e0       	ldi	r24, 0x01	; 1
    6a00:	99 23       	and	r25, r25
    6a02:	09 f0       	breq	.+2      	; 0x6a06 <Button_enuRead+0x82>
    6a04:	80 e0       	ldi	r24, 0x00	; 0
    6a06:	28 2f       	mov	r18, r24
    6a08:	8d 81       	ldd	r24, Y+5	; 0x05
    6a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    6a0c:	fc 01       	movw	r30, r24
    6a0e:	20 83       	st	Z, r18
	                break;
    6a10:	02 c0       	rjmp	.+4      	; 0x6a16 <Button_enuRead+0x92>

	            default:
	                Loc_enuStatus = BUTTON_STATUS_FAIL;
    6a12:	81 e0       	ldi	r24, 0x01	; 1
    6a14:	89 83       	std	Y+1, r24	; 0x01
	    }




	return Loc_enuStatus;
    6a16:	89 81       	ldd	r24, Y+1	; 0x01

}
    6a18:	26 96       	adiw	r28, 0x06	; 6
    6a1a:	0f b6       	in	r0, 0x3f	; 63
    6a1c:	f8 94       	cli
    6a1e:	de bf       	out	0x3e, r29	; 62
    6a20:	0f be       	out	0x3f, r0	; 63
    6a22:	cd bf       	out	0x3d, r28	; 61
    6a24:	df 91       	pop	r29
    6a26:	cf 91       	pop	r28
    6a28:	08 95       	ret

00006a2a <main>:

extern Lcd_4bitType Lcd;
//////////////////////////////////////////////////////////////////////////////////////


int main(void){
    6a2a:	cf 93       	push	r28
    6a2c:	df 93       	push	r29
    6a2e:	cd b7       	in	r28, 0x3d	; 61
    6a30:	de b7       	in	r29, 0x3e	; 62
    6a32:	aa 97       	sbiw	r28, 0x2a	; 42
    6a34:	0f b6       	in	r0, 0x3f	; 63
    6a36:	f8 94       	cli
    6a38:	de bf       	out	0x3e, r29	; 62
    6a3a:	0f be       	out	0x3f, r0	; 63
    6a3c:	cd bf       	out	0x3d, r28	; 61

	Port_voidInit();
    6a3e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <Port_voidInit>
	Lcd_4bit_enuInit(&Lcd);
    6a42:	86 e9       	ldi	r24, 0x96	; 150
    6a44:	90 e0       	ldi	r25, 0x00	; 0
    6a46:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <Lcd_4bit_enuInit>
	Servo_enuInitTimer1();
    6a4a:	0e 94 54 23 	call	0x46a8	; 0x46a8 <Servo_enuInitTimer1>


	while(1){

		Servo_enuSetAngle(0);
    6a4e:	80 e0       	ldi	r24, 0x00	; 0
    6a50:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <Servo_enuSetAngle>
    6a54:	80 e0       	ldi	r24, 0x00	; 0
    6a56:	90 e0       	ldi	r25, 0x00	; 0
    6a58:	aa e7       	ldi	r26, 0x7A	; 122
    6a5a:	b4 e4       	ldi	r27, 0x44	; 68
    6a5c:	89 83       	std	Y+1, r24	; 0x01
    6a5e:	9a 83       	std	Y+2, r25	; 0x02
    6a60:	ab 83       	std	Y+3, r26	; 0x03
    6a62:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6a64:	20 e0       	ldi	r18, 0x00	; 0
    6a66:	30 e0       	ldi	r19, 0x00	; 0
    6a68:	4a e7       	ldi	r20, 0x7A	; 122
    6a6a:	55 e4       	ldi	r21, 0x45	; 69
    6a6c:	69 81       	ldd	r22, Y+1	; 0x01
    6a6e:	7a 81       	ldd	r23, Y+2	; 0x02
    6a70:	8b 81       	ldd	r24, Y+3	; 0x03
    6a72:	9c 81       	ldd	r25, Y+4	; 0x04
    6a74:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    6a78:	dc 01       	movw	r26, r24
    6a7a:	cb 01       	movw	r24, r22
    6a7c:	89 a3       	std	Y+33, r24	; 0x21
    6a7e:	9a a3       	std	Y+34, r25	; 0x22
    6a80:	ab a3       	std	Y+35, r26	; 0x23
    6a82:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    6a84:	20 e0       	ldi	r18, 0x00	; 0
    6a86:	30 e0       	ldi	r19, 0x00	; 0
    6a88:	40 e8       	ldi	r20, 0x80	; 128
    6a8a:	5f e3       	ldi	r21, 0x3F	; 63
    6a8c:	69 a1       	ldd	r22, Y+33	; 0x21
    6a8e:	7a a1       	ldd	r23, Y+34	; 0x22
    6a90:	8b a1       	ldd	r24, Y+35	; 0x23
    6a92:	9c a1       	ldd	r25, Y+36	; 0x24
    6a94:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    6a98:	88 23       	and	r24, r24
    6a9a:	2c f4       	brge	.+10     	; 0x6aa6 <main+0x7c>
		__ticks = 1;
    6a9c:	81 e0       	ldi	r24, 0x01	; 1
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	9e a3       	std	Y+38, r25	; 0x26
    6aa2:	8d a3       	std	Y+37, r24	; 0x25
    6aa4:	3f c0       	rjmp	.+126    	; 0x6b24 <main+0xfa>
	else if (__tmp > 65535)
    6aa6:	20 e0       	ldi	r18, 0x00	; 0
    6aa8:	3f ef       	ldi	r19, 0xFF	; 255
    6aaa:	4f e7       	ldi	r20, 0x7F	; 127
    6aac:	57 e4       	ldi	r21, 0x47	; 71
    6aae:	69 a1       	ldd	r22, Y+33	; 0x21
    6ab0:	7a a1       	ldd	r23, Y+34	; 0x22
    6ab2:	8b a1       	ldd	r24, Y+35	; 0x23
    6ab4:	9c a1       	ldd	r25, Y+36	; 0x24
    6ab6:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    6aba:	18 16       	cp	r1, r24
    6abc:	4c f5       	brge	.+82     	; 0x6b10 <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6abe:	20 e0       	ldi	r18, 0x00	; 0
    6ac0:	30 e0       	ldi	r19, 0x00	; 0
    6ac2:	40 e2       	ldi	r20, 0x20	; 32
    6ac4:	51 e4       	ldi	r21, 0x41	; 65
    6ac6:	69 81       	ldd	r22, Y+1	; 0x01
    6ac8:	7a 81       	ldd	r23, Y+2	; 0x02
    6aca:	8b 81       	ldd	r24, Y+3	; 0x03
    6acc:	9c 81       	ldd	r25, Y+4	; 0x04
    6ace:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    6ad2:	dc 01       	movw	r26, r24
    6ad4:	cb 01       	movw	r24, r22
    6ad6:	bc 01       	movw	r22, r24
    6ad8:	cd 01       	movw	r24, r26
    6ada:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6ade:	dc 01       	movw	r26, r24
    6ae0:	cb 01       	movw	r24, r22
    6ae2:	9e a3       	std	Y+38, r25	; 0x26
    6ae4:	8d a3       	std	Y+37, r24	; 0x25
    6ae6:	0f c0       	rjmp	.+30     	; 0x6b06 <main+0xdc>
    6ae8:	80 e9       	ldi	r24, 0x90	; 144
    6aea:	91 e0       	ldi	r25, 0x01	; 1
    6aec:	98 a7       	std	Y+40, r25	; 0x28
    6aee:	8f a3       	std	Y+39, r24	; 0x27
    6af0:	8f a1       	ldd	r24, Y+39	; 0x27
    6af2:	98 a5       	ldd	r25, Y+40	; 0x28
    6af4:	01 97       	sbiw	r24, 0x01	; 1
    6af6:	f1 f7       	brne	.-4      	; 0x6af4 <main+0xca>
    6af8:	98 a7       	std	Y+40, r25	; 0x28
    6afa:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6afc:	8d a1       	ldd	r24, Y+37	; 0x25
    6afe:	9e a1       	ldd	r25, Y+38	; 0x26
    6b00:	01 97       	sbiw	r24, 0x01	; 1
    6b02:	9e a3       	std	Y+38, r25	; 0x26
    6b04:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b06:	8d a1       	ldd	r24, Y+37	; 0x25
    6b08:	9e a1       	ldd	r25, Y+38	; 0x26
    6b0a:	89 2b       	or	r24, r25
    6b0c:	69 f7       	brne	.-38     	; 0x6ae8 <main+0xbe>
    6b0e:	14 c0       	rjmp	.+40     	; 0x6b38 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b10:	69 a1       	ldd	r22, Y+33	; 0x21
    6b12:	7a a1       	ldd	r23, Y+34	; 0x22
    6b14:	8b a1       	ldd	r24, Y+35	; 0x23
    6b16:	9c a1       	ldd	r25, Y+36	; 0x24
    6b18:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6b1c:	dc 01       	movw	r26, r24
    6b1e:	cb 01       	movw	r24, r22
    6b20:	9e a3       	std	Y+38, r25	; 0x26
    6b22:	8d a3       	std	Y+37, r24	; 0x25
    6b24:	8d a1       	ldd	r24, Y+37	; 0x25
    6b26:	9e a1       	ldd	r25, Y+38	; 0x26
    6b28:	9a a7       	std	Y+42, r25	; 0x2a
    6b2a:	89 a7       	std	Y+41, r24	; 0x29
    6b2c:	89 a5       	ldd	r24, Y+41	; 0x29
    6b2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6b30:	01 97       	sbiw	r24, 0x01	; 1
    6b32:	f1 f7       	brne	.-4      	; 0x6b30 <main+0x106>
    6b34:	9a a7       	std	Y+42, r25	; 0x2a
    6b36:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(1000);

		Servo_enuSetAngle(90);
    6b38:	8a e5       	ldi	r24, 0x5A	; 90
    6b3a:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <Servo_enuSetAngle>
    6b3e:	80 e0       	ldi	r24, 0x00	; 0
    6b40:	90 e0       	ldi	r25, 0x00	; 0
    6b42:	aa e7       	ldi	r26, 0x7A	; 122
    6b44:	b4 e4       	ldi	r27, 0x44	; 68
    6b46:	8d 83       	std	Y+5, r24	; 0x05
    6b48:	9e 83       	std	Y+6, r25	; 0x06
    6b4a:	af 83       	std	Y+7, r26	; 0x07
    6b4c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6b4e:	20 e0       	ldi	r18, 0x00	; 0
    6b50:	30 e0       	ldi	r19, 0x00	; 0
    6b52:	4a e7       	ldi	r20, 0x7A	; 122
    6b54:	55 e4       	ldi	r21, 0x45	; 69
    6b56:	6d 81       	ldd	r22, Y+5	; 0x05
    6b58:	7e 81       	ldd	r23, Y+6	; 0x06
    6b5a:	8f 81       	ldd	r24, Y+7	; 0x07
    6b5c:	98 85       	ldd	r25, Y+8	; 0x08
    6b5e:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    6b62:	dc 01       	movw	r26, r24
    6b64:	cb 01       	movw	r24, r22
    6b66:	8f 8b       	std	Y+23, r24	; 0x17
    6b68:	98 8f       	std	Y+24, r25	; 0x18
    6b6a:	a9 8f       	std	Y+25, r26	; 0x19
    6b6c:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    6b6e:	20 e0       	ldi	r18, 0x00	; 0
    6b70:	30 e0       	ldi	r19, 0x00	; 0
    6b72:	40 e8       	ldi	r20, 0x80	; 128
    6b74:	5f e3       	ldi	r21, 0x3F	; 63
    6b76:	6f 89       	ldd	r22, Y+23	; 0x17
    6b78:	78 8d       	ldd	r23, Y+24	; 0x18
    6b7a:	89 8d       	ldd	r24, Y+25	; 0x19
    6b7c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6b7e:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    6b82:	88 23       	and	r24, r24
    6b84:	2c f4       	brge	.+10     	; 0x6b90 <main+0x166>
		__ticks = 1;
    6b86:	81 e0       	ldi	r24, 0x01	; 1
    6b88:	90 e0       	ldi	r25, 0x00	; 0
    6b8a:	9c 8f       	std	Y+28, r25	; 0x1c
    6b8c:	8b 8f       	std	Y+27, r24	; 0x1b
    6b8e:	3f c0       	rjmp	.+126    	; 0x6c0e <main+0x1e4>
	else if (__tmp > 65535)
    6b90:	20 e0       	ldi	r18, 0x00	; 0
    6b92:	3f ef       	ldi	r19, 0xFF	; 255
    6b94:	4f e7       	ldi	r20, 0x7F	; 127
    6b96:	57 e4       	ldi	r21, 0x47	; 71
    6b98:	6f 89       	ldd	r22, Y+23	; 0x17
    6b9a:	78 8d       	ldd	r23, Y+24	; 0x18
    6b9c:	89 8d       	ldd	r24, Y+25	; 0x19
    6b9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6ba0:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    6ba4:	18 16       	cp	r1, r24
    6ba6:	4c f5       	brge	.+82     	; 0x6bfa <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ba8:	20 e0       	ldi	r18, 0x00	; 0
    6baa:	30 e0       	ldi	r19, 0x00	; 0
    6bac:	40 e2       	ldi	r20, 0x20	; 32
    6bae:	51 e4       	ldi	r21, 0x41	; 65
    6bb0:	6d 81       	ldd	r22, Y+5	; 0x05
    6bb2:	7e 81       	ldd	r23, Y+6	; 0x06
    6bb4:	8f 81       	ldd	r24, Y+7	; 0x07
    6bb6:	98 85       	ldd	r25, Y+8	; 0x08
    6bb8:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    6bbc:	dc 01       	movw	r26, r24
    6bbe:	cb 01       	movw	r24, r22
    6bc0:	bc 01       	movw	r22, r24
    6bc2:	cd 01       	movw	r24, r26
    6bc4:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6bc8:	dc 01       	movw	r26, r24
    6bca:	cb 01       	movw	r24, r22
    6bcc:	9c 8f       	std	Y+28, r25	; 0x1c
    6bce:	8b 8f       	std	Y+27, r24	; 0x1b
    6bd0:	0f c0       	rjmp	.+30     	; 0x6bf0 <main+0x1c6>
    6bd2:	80 e9       	ldi	r24, 0x90	; 144
    6bd4:	91 e0       	ldi	r25, 0x01	; 1
    6bd6:	9e 8f       	std	Y+30, r25	; 0x1e
    6bd8:	8d 8f       	std	Y+29, r24	; 0x1d
    6bda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6bdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6bde:	01 97       	sbiw	r24, 0x01	; 1
    6be0:	f1 f7       	brne	.-4      	; 0x6bde <main+0x1b4>
    6be2:	9e 8f       	std	Y+30, r25	; 0x1e
    6be4:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6bea:	01 97       	sbiw	r24, 0x01	; 1
    6bec:	9c 8f       	std	Y+28, r25	; 0x1c
    6bee:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6bf4:	89 2b       	or	r24, r25
    6bf6:	69 f7       	brne	.-38     	; 0x6bd2 <main+0x1a8>
    6bf8:	14 c0       	rjmp	.+40     	; 0x6c22 <main+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bfa:	6f 89       	ldd	r22, Y+23	; 0x17
    6bfc:	78 8d       	ldd	r23, Y+24	; 0x18
    6bfe:	89 8d       	ldd	r24, Y+25	; 0x19
    6c00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6c02:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6c06:	dc 01       	movw	r26, r24
    6c08:	cb 01       	movw	r24, r22
    6c0a:	9c 8f       	std	Y+28, r25	; 0x1c
    6c0c:	8b 8f       	std	Y+27, r24	; 0x1b
    6c0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6c10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6c12:	98 a3       	std	Y+32, r25	; 0x20
    6c14:	8f 8f       	std	Y+31, r24	; 0x1f
    6c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6c18:	98 a1       	ldd	r25, Y+32	; 0x20
    6c1a:	01 97       	sbiw	r24, 0x01	; 1
    6c1c:	f1 f7       	brne	.-4      	; 0x6c1a <main+0x1f0>
    6c1e:	98 a3       	std	Y+32, r25	; 0x20
    6c20:	8f 8f       	std	Y+31, r24	; 0x1f
		_delay_ms(1000);

		Servo_enuSetAngle(180);
    6c22:	84 eb       	ldi	r24, 0xB4	; 180
    6c24:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <Servo_enuSetAngle>
    6c28:	80 e0       	ldi	r24, 0x00	; 0
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	aa e7       	ldi	r26, 0x7A	; 122
    6c2e:	b4 e4       	ldi	r27, 0x44	; 68
    6c30:	89 87       	std	Y+9, r24	; 0x09
    6c32:	9a 87       	std	Y+10, r25	; 0x0a
    6c34:	ab 87       	std	Y+11, r26	; 0x0b
    6c36:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6c38:	20 e0       	ldi	r18, 0x00	; 0
    6c3a:	30 e0       	ldi	r19, 0x00	; 0
    6c3c:	4a e7       	ldi	r20, 0x7A	; 122
    6c3e:	55 e4       	ldi	r21, 0x45	; 69
    6c40:	69 85       	ldd	r22, Y+9	; 0x09
    6c42:	7a 85       	ldd	r23, Y+10	; 0x0a
    6c44:	8b 85       	ldd	r24, Y+11	; 0x0b
    6c46:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c48:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    6c4c:	dc 01       	movw	r26, r24
    6c4e:	cb 01       	movw	r24, r22
    6c50:	8d 87       	std	Y+13, r24	; 0x0d
    6c52:	9e 87       	std	Y+14, r25	; 0x0e
    6c54:	af 87       	std	Y+15, r26	; 0x0f
    6c56:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    6c58:	20 e0       	ldi	r18, 0x00	; 0
    6c5a:	30 e0       	ldi	r19, 0x00	; 0
    6c5c:	40 e8       	ldi	r20, 0x80	; 128
    6c5e:	5f e3       	ldi	r21, 0x3F	; 63
    6c60:	6d 85       	ldd	r22, Y+13	; 0x0d
    6c62:	7e 85       	ldd	r23, Y+14	; 0x0e
    6c64:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c66:	98 89       	ldd	r25, Y+16	; 0x10
    6c68:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <__cmpsf2>
    6c6c:	88 23       	and	r24, r24
    6c6e:	2c f4       	brge	.+10     	; 0x6c7a <main+0x250>
		__ticks = 1;
    6c70:	81 e0       	ldi	r24, 0x01	; 1
    6c72:	90 e0       	ldi	r25, 0x00	; 0
    6c74:	9a 8b       	std	Y+18, r25	; 0x12
    6c76:	89 8b       	std	Y+17, r24	; 0x11
    6c78:	3f c0       	rjmp	.+126    	; 0x6cf8 <main+0x2ce>
	else if (__tmp > 65535)
    6c7a:	20 e0       	ldi	r18, 0x00	; 0
    6c7c:	3f ef       	ldi	r19, 0xFF	; 255
    6c7e:	4f e7       	ldi	r20, 0x7F	; 127
    6c80:	57 e4       	ldi	r21, 0x47	; 71
    6c82:	6d 85       	ldd	r22, Y+13	; 0x0d
    6c84:	7e 85       	ldd	r23, Y+14	; 0x0e
    6c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    6c88:	98 89       	ldd	r25, Y+16	; 0x10
    6c8a:	0e 94 c7 38 	call	0x718e	; 0x718e <__gesf2>
    6c8e:	18 16       	cp	r1, r24
    6c90:	4c f5       	brge	.+82     	; 0x6ce4 <main+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c92:	20 e0       	ldi	r18, 0x00	; 0
    6c94:	30 e0       	ldi	r19, 0x00	; 0
    6c96:	40 e2       	ldi	r20, 0x20	; 32
    6c98:	51 e4       	ldi	r21, 0x41	; 65
    6c9a:	69 85       	ldd	r22, Y+9	; 0x09
    6c9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    6c9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6ca0:	9c 85       	ldd	r25, Y+12	; 0x0c
    6ca2:	0e 94 cc 38 	call	0x7198	; 0x7198 <__mulsf3>
    6ca6:	dc 01       	movw	r26, r24
    6ca8:	cb 01       	movw	r24, r22
    6caa:	bc 01       	movw	r22, r24
    6cac:	cd 01       	movw	r24, r26
    6cae:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6cb2:	dc 01       	movw	r26, r24
    6cb4:	cb 01       	movw	r24, r22
    6cb6:	9a 8b       	std	Y+18, r25	; 0x12
    6cb8:	89 8b       	std	Y+17, r24	; 0x11
    6cba:	0f c0       	rjmp	.+30     	; 0x6cda <main+0x2b0>
    6cbc:	80 e9       	ldi	r24, 0x90	; 144
    6cbe:	91 e0       	ldi	r25, 0x01	; 1
    6cc0:	9c 8b       	std	Y+20, r25	; 0x14
    6cc2:	8b 8b       	std	Y+19, r24	; 0x13
    6cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    6cc6:	9c 89       	ldd	r25, Y+20	; 0x14
    6cc8:	01 97       	sbiw	r24, 0x01	; 1
    6cca:	f1 f7       	brne	.-4      	; 0x6cc8 <main+0x29e>
    6ccc:	9c 8b       	std	Y+20, r25	; 0x14
    6cce:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6cd0:	89 89       	ldd	r24, Y+17	; 0x11
    6cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    6cd4:	01 97       	sbiw	r24, 0x01	; 1
    6cd6:	9a 8b       	std	Y+18, r25	; 0x12
    6cd8:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6cda:	89 89       	ldd	r24, Y+17	; 0x11
    6cdc:	9a 89       	ldd	r25, Y+18	; 0x12
    6cde:	89 2b       	or	r24, r25
    6ce0:	69 f7       	brne	.-38     	; 0x6cbc <main+0x292>
    6ce2:	14 c0       	rjmp	.+40     	; 0x6d0c <main+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ce4:	6d 85       	ldd	r22, Y+13	; 0x0d
    6ce6:	7e 85       	ldd	r23, Y+14	; 0x0e
    6ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    6cea:	98 89       	ldd	r25, Y+16	; 0x10
    6cec:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6cf0:	dc 01       	movw	r26, r24
    6cf2:	cb 01       	movw	r24, r22
    6cf4:	9a 8b       	std	Y+18, r25	; 0x12
    6cf6:	89 8b       	std	Y+17, r24	; 0x11
    6cf8:	89 89       	ldd	r24, Y+17	; 0x11
    6cfa:	9a 89       	ldd	r25, Y+18	; 0x12
    6cfc:	9e 8b       	std	Y+22, r25	; 0x16
    6cfe:	8d 8b       	std	Y+21, r24	; 0x15
    6d00:	8d 89       	ldd	r24, Y+21	; 0x15
    6d02:	9e 89       	ldd	r25, Y+22	; 0x16
    6d04:	01 97       	sbiw	r24, 0x01	; 1
    6d06:	f1 f7       	brne	.-4      	; 0x6d04 <main+0x2da>
    6d08:	9e 8b       	std	Y+22, r25	; 0x16
    6d0a:	8d 8b       	std	Y+21, r24	; 0x15
		_delay_ms(1000);


	}
    6d0c:	a0 ce       	rjmp	.-704    	; 0x6a4e <main+0x24>

00006d0e <__mulsi3>:
    6d0e:	db 01       	movw	r26, r22
    6d10:	8f 93       	push	r24
    6d12:	9f 93       	push	r25
    6d14:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <__muluhisi3>
    6d18:	bf 91       	pop	r27
    6d1a:	af 91       	pop	r26
    6d1c:	a2 9f       	mul	r26, r18
    6d1e:	80 0d       	add	r24, r0
    6d20:	91 1d       	adc	r25, r1
    6d22:	a3 9f       	mul	r26, r19
    6d24:	90 0d       	add	r25, r0
    6d26:	b2 9f       	mul	r27, r18
    6d28:	90 0d       	add	r25, r0
    6d2a:	11 24       	eor	r1, r1
    6d2c:	08 95       	ret

00006d2e <__udivmodsi4>:
    6d2e:	a1 e2       	ldi	r26, 0x21	; 33
    6d30:	1a 2e       	mov	r1, r26
    6d32:	aa 1b       	sub	r26, r26
    6d34:	bb 1b       	sub	r27, r27
    6d36:	fd 01       	movw	r30, r26
    6d38:	0d c0       	rjmp	.+26     	; 0x6d54 <__udivmodsi4_ep>

00006d3a <__udivmodsi4_loop>:
    6d3a:	aa 1f       	adc	r26, r26
    6d3c:	bb 1f       	adc	r27, r27
    6d3e:	ee 1f       	adc	r30, r30
    6d40:	ff 1f       	adc	r31, r31
    6d42:	a2 17       	cp	r26, r18
    6d44:	b3 07       	cpc	r27, r19
    6d46:	e4 07       	cpc	r30, r20
    6d48:	f5 07       	cpc	r31, r21
    6d4a:	20 f0       	brcs	.+8      	; 0x6d54 <__udivmodsi4_ep>
    6d4c:	a2 1b       	sub	r26, r18
    6d4e:	b3 0b       	sbc	r27, r19
    6d50:	e4 0b       	sbc	r30, r20
    6d52:	f5 0b       	sbc	r31, r21

00006d54 <__udivmodsi4_ep>:
    6d54:	66 1f       	adc	r22, r22
    6d56:	77 1f       	adc	r23, r23
    6d58:	88 1f       	adc	r24, r24
    6d5a:	99 1f       	adc	r25, r25
    6d5c:	1a 94       	dec	r1
    6d5e:	69 f7       	brne	.-38     	; 0x6d3a <__udivmodsi4_loop>
    6d60:	60 95       	com	r22
    6d62:	70 95       	com	r23
    6d64:	80 95       	com	r24
    6d66:	90 95       	com	r25
    6d68:	9b 01       	movw	r18, r22
    6d6a:	ac 01       	movw	r20, r24
    6d6c:	bd 01       	movw	r22, r26
    6d6e:	cf 01       	movw	r24, r30
    6d70:	08 95       	ret

00006d72 <__tablejump2__>:
    6d72:	ee 0f       	add	r30, r30
    6d74:	ff 1f       	adc	r31, r31
    6d76:	05 90       	lpm	r0, Z+
    6d78:	f4 91       	lpm	r31, Z
    6d7a:	e0 2d       	mov	r30, r0
    6d7c:	09 94       	ijmp

00006d7e <__muluhisi3>:
    6d7e:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <__umulhisi3>
    6d82:	a5 9f       	mul	r26, r21
    6d84:	90 0d       	add	r25, r0
    6d86:	b4 9f       	mul	r27, r20
    6d88:	90 0d       	add	r25, r0
    6d8a:	a4 9f       	mul	r26, r20
    6d8c:	80 0d       	add	r24, r0
    6d8e:	91 1d       	adc	r25, r1
    6d90:	11 24       	eor	r1, r1
    6d92:	08 95       	ret

00006d94 <__ashldi3>:
    6d94:	0f 93       	push	r16
    6d96:	08 30       	cpi	r16, 0x08	; 8
    6d98:	90 f0       	brcs	.+36     	; 0x6dbe <__ashldi3+0x2a>
    6d9a:	98 2f       	mov	r25, r24
    6d9c:	87 2f       	mov	r24, r23
    6d9e:	76 2f       	mov	r23, r22
    6da0:	65 2f       	mov	r22, r21
    6da2:	54 2f       	mov	r21, r20
    6da4:	43 2f       	mov	r20, r19
    6da6:	32 2f       	mov	r19, r18
    6da8:	22 27       	eor	r18, r18
    6daa:	08 50       	subi	r16, 0x08	; 8
    6dac:	f4 cf       	rjmp	.-24     	; 0x6d96 <__ashldi3+0x2>
    6dae:	22 0f       	add	r18, r18
    6db0:	33 1f       	adc	r19, r19
    6db2:	44 1f       	adc	r20, r20
    6db4:	55 1f       	adc	r21, r21
    6db6:	66 1f       	adc	r22, r22
    6db8:	77 1f       	adc	r23, r23
    6dba:	88 1f       	adc	r24, r24
    6dbc:	99 1f       	adc	r25, r25
    6dbe:	0a 95       	dec	r16
    6dc0:	b2 f7       	brpl	.-20     	; 0x6dae <__ashldi3+0x1a>
    6dc2:	0f 91       	pop	r16
    6dc4:	08 95       	ret

00006dc6 <__adddi3>:
    6dc6:	2a 0d       	add	r18, r10
    6dc8:	3b 1d       	adc	r19, r11
    6dca:	4c 1d       	adc	r20, r12
    6dcc:	5d 1d       	adc	r21, r13
    6dce:	6e 1d       	adc	r22, r14
    6dd0:	7f 1d       	adc	r23, r15
    6dd2:	80 1f       	adc	r24, r16
    6dd4:	91 1f       	adc	r25, r17
    6dd6:	08 95       	ret

00006dd8 <__umulhisi3>:
    6dd8:	a2 9f       	mul	r26, r18
    6dda:	b0 01       	movw	r22, r0
    6ddc:	b3 9f       	mul	r27, r19
    6dde:	c0 01       	movw	r24, r0
    6de0:	a3 9f       	mul	r26, r19
    6de2:	70 0d       	add	r23, r0
    6de4:	81 1d       	adc	r24, r1
    6de6:	11 24       	eor	r1, r1
    6de8:	91 1d       	adc	r25, r1
    6dea:	b2 9f       	mul	r27, r18
    6dec:	70 0d       	add	r23, r0
    6dee:	81 1d       	adc	r24, r1
    6df0:	11 24       	eor	r1, r1
    6df2:	91 1d       	adc	r25, r1
    6df4:	08 95       	ret

00006df6 <__subsf3>:
    6df6:	50 58       	subi	r21, 0x80	; 128

00006df8 <__addsf3>:
    6df8:	bb 27       	eor	r27, r27
    6dfa:	aa 27       	eor	r26, r26
    6dfc:	0e 94 13 37 	call	0x6e26	; 0x6e26 <__addsf3x>
    6e00:	0c 94 8d 38 	jmp	0x711a	; 0x711a <__fp_round>
    6e04:	0e 94 7f 38 	call	0x70fe	; 0x70fe <__fp_pscA>
    6e08:	38 f0       	brcs	.+14     	; 0x6e18 <__addsf3+0x20>
    6e0a:	0e 94 86 38 	call	0x710c	; 0x710c <__fp_pscB>
    6e0e:	20 f0       	brcs	.+8      	; 0x6e18 <__addsf3+0x20>
    6e10:	39 f4       	brne	.+14     	; 0x6e20 <__addsf3+0x28>
    6e12:	9f 3f       	cpi	r25, 0xFF	; 255
    6e14:	19 f4       	brne	.+6      	; 0x6e1c <__addsf3+0x24>
    6e16:	26 f4       	brtc	.+8      	; 0x6e20 <__addsf3+0x28>
    6e18:	0c 94 7c 38 	jmp	0x70f8	; 0x70f8 <__fp_nan>
    6e1c:	0e f4       	brtc	.+2      	; 0x6e20 <__addsf3+0x28>
    6e1e:	e0 95       	com	r30
    6e20:	e7 fb       	bst	r30, 7
    6e22:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>

00006e26 <__addsf3x>:
    6e26:	e9 2f       	mov	r30, r25
    6e28:	0e 94 9e 38 	call	0x713c	; 0x713c <__fp_split3>
    6e2c:	58 f3       	brcs	.-42     	; 0x6e04 <__addsf3+0xc>
    6e2e:	ba 17       	cp	r27, r26
    6e30:	62 07       	cpc	r22, r18
    6e32:	73 07       	cpc	r23, r19
    6e34:	84 07       	cpc	r24, r20
    6e36:	95 07       	cpc	r25, r21
    6e38:	20 f0       	brcs	.+8      	; 0x6e42 <__addsf3x+0x1c>
    6e3a:	79 f4       	brne	.+30     	; 0x6e5a <__addsf3x+0x34>
    6e3c:	a6 f5       	brtc	.+104    	; 0x6ea6 <__addsf3x+0x80>
    6e3e:	0c 94 c0 38 	jmp	0x7180	; 0x7180 <__fp_zero>
    6e42:	0e f4       	brtc	.+2      	; 0x6e46 <__addsf3x+0x20>
    6e44:	e0 95       	com	r30
    6e46:	0b 2e       	mov	r0, r27
    6e48:	ba 2f       	mov	r27, r26
    6e4a:	a0 2d       	mov	r26, r0
    6e4c:	0b 01       	movw	r0, r22
    6e4e:	b9 01       	movw	r22, r18
    6e50:	90 01       	movw	r18, r0
    6e52:	0c 01       	movw	r0, r24
    6e54:	ca 01       	movw	r24, r20
    6e56:	a0 01       	movw	r20, r0
    6e58:	11 24       	eor	r1, r1
    6e5a:	ff 27       	eor	r31, r31
    6e5c:	59 1b       	sub	r21, r25
    6e5e:	99 f0       	breq	.+38     	; 0x6e86 <__addsf3x+0x60>
    6e60:	59 3f       	cpi	r21, 0xF9	; 249
    6e62:	50 f4       	brcc	.+20     	; 0x6e78 <__addsf3x+0x52>
    6e64:	50 3e       	cpi	r21, 0xE0	; 224
    6e66:	68 f1       	brcs	.+90     	; 0x6ec2 <__addsf3x+0x9c>
    6e68:	1a 16       	cp	r1, r26
    6e6a:	f0 40       	sbci	r31, 0x00	; 0
    6e6c:	a2 2f       	mov	r26, r18
    6e6e:	23 2f       	mov	r18, r19
    6e70:	34 2f       	mov	r19, r20
    6e72:	44 27       	eor	r20, r20
    6e74:	58 5f       	subi	r21, 0xF8	; 248
    6e76:	f3 cf       	rjmp	.-26     	; 0x6e5e <__addsf3x+0x38>
    6e78:	46 95       	lsr	r20
    6e7a:	37 95       	ror	r19
    6e7c:	27 95       	ror	r18
    6e7e:	a7 95       	ror	r26
    6e80:	f0 40       	sbci	r31, 0x00	; 0
    6e82:	53 95       	inc	r21
    6e84:	c9 f7       	brne	.-14     	; 0x6e78 <__addsf3x+0x52>
    6e86:	7e f4       	brtc	.+30     	; 0x6ea6 <__addsf3x+0x80>
    6e88:	1f 16       	cp	r1, r31
    6e8a:	ba 0b       	sbc	r27, r26
    6e8c:	62 0b       	sbc	r22, r18
    6e8e:	73 0b       	sbc	r23, r19
    6e90:	84 0b       	sbc	r24, r20
    6e92:	ba f0       	brmi	.+46     	; 0x6ec2 <__addsf3x+0x9c>
    6e94:	91 50       	subi	r25, 0x01	; 1
    6e96:	a1 f0       	breq	.+40     	; 0x6ec0 <__addsf3x+0x9a>
    6e98:	ff 0f       	add	r31, r31
    6e9a:	bb 1f       	adc	r27, r27
    6e9c:	66 1f       	adc	r22, r22
    6e9e:	77 1f       	adc	r23, r23
    6ea0:	88 1f       	adc	r24, r24
    6ea2:	c2 f7       	brpl	.-16     	; 0x6e94 <__addsf3x+0x6e>
    6ea4:	0e c0       	rjmp	.+28     	; 0x6ec2 <__addsf3x+0x9c>
    6ea6:	ba 0f       	add	r27, r26
    6ea8:	62 1f       	adc	r22, r18
    6eaa:	73 1f       	adc	r23, r19
    6eac:	84 1f       	adc	r24, r20
    6eae:	48 f4       	brcc	.+18     	; 0x6ec2 <__addsf3x+0x9c>
    6eb0:	87 95       	ror	r24
    6eb2:	77 95       	ror	r23
    6eb4:	67 95       	ror	r22
    6eb6:	b7 95       	ror	r27
    6eb8:	f7 95       	ror	r31
    6eba:	9e 3f       	cpi	r25, 0xFE	; 254
    6ebc:	08 f0       	brcs	.+2      	; 0x6ec0 <__addsf3x+0x9a>
    6ebe:	b0 cf       	rjmp	.-160    	; 0x6e20 <__addsf3+0x28>
    6ec0:	93 95       	inc	r25
    6ec2:	88 0f       	add	r24, r24
    6ec4:	08 f0       	brcs	.+2      	; 0x6ec8 <__addsf3x+0xa2>
    6ec6:	99 27       	eor	r25, r25
    6ec8:	ee 0f       	add	r30, r30
    6eca:	97 95       	ror	r25
    6ecc:	87 95       	ror	r24
    6ece:	08 95       	ret

00006ed0 <__cmpsf2>:
    6ed0:	0e 94 52 38 	call	0x70a4	; 0x70a4 <__fp_cmp>
    6ed4:	08 f4       	brcc	.+2      	; 0x6ed8 <__cmpsf2+0x8>
    6ed6:	81 e0       	ldi	r24, 0x01	; 1
    6ed8:	08 95       	ret

00006eda <__divsf3>:
    6eda:	0e 94 81 37 	call	0x6f02	; 0x6f02 <__divsf3x>
    6ede:	0c 94 8d 38 	jmp	0x711a	; 0x711a <__fp_round>
    6ee2:	0e 94 86 38 	call	0x710c	; 0x710c <__fp_pscB>
    6ee6:	58 f0       	brcs	.+22     	; 0x6efe <__divsf3+0x24>
    6ee8:	0e 94 7f 38 	call	0x70fe	; 0x70fe <__fp_pscA>
    6eec:	40 f0       	brcs	.+16     	; 0x6efe <__divsf3+0x24>
    6eee:	29 f4       	brne	.+10     	; 0x6efa <__divsf3+0x20>
    6ef0:	5f 3f       	cpi	r21, 0xFF	; 255
    6ef2:	29 f0       	breq	.+10     	; 0x6efe <__divsf3+0x24>
    6ef4:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>
    6ef8:	51 11       	cpse	r21, r1
    6efa:	0c 94 c1 38 	jmp	0x7182	; 0x7182 <__fp_szero>
    6efe:	0c 94 7c 38 	jmp	0x70f8	; 0x70f8 <__fp_nan>

00006f02 <__divsf3x>:
    6f02:	0e 94 9e 38 	call	0x713c	; 0x713c <__fp_split3>
    6f06:	68 f3       	brcs	.-38     	; 0x6ee2 <__divsf3+0x8>

00006f08 <__divsf3_pse>:
    6f08:	99 23       	and	r25, r25
    6f0a:	b1 f3       	breq	.-20     	; 0x6ef8 <__divsf3+0x1e>
    6f0c:	55 23       	and	r21, r21
    6f0e:	91 f3       	breq	.-28     	; 0x6ef4 <__divsf3+0x1a>
    6f10:	95 1b       	sub	r25, r21
    6f12:	55 0b       	sbc	r21, r21
    6f14:	bb 27       	eor	r27, r27
    6f16:	aa 27       	eor	r26, r26
    6f18:	62 17       	cp	r22, r18
    6f1a:	73 07       	cpc	r23, r19
    6f1c:	84 07       	cpc	r24, r20
    6f1e:	38 f0       	brcs	.+14     	; 0x6f2e <__divsf3_pse+0x26>
    6f20:	9f 5f       	subi	r25, 0xFF	; 255
    6f22:	5f 4f       	sbci	r21, 0xFF	; 255
    6f24:	22 0f       	add	r18, r18
    6f26:	33 1f       	adc	r19, r19
    6f28:	44 1f       	adc	r20, r20
    6f2a:	aa 1f       	adc	r26, r26
    6f2c:	a9 f3       	breq	.-22     	; 0x6f18 <__divsf3_pse+0x10>
    6f2e:	35 d0       	rcall	.+106    	; 0x6f9a <__divsf3_pse+0x92>
    6f30:	0e 2e       	mov	r0, r30
    6f32:	3a f0       	brmi	.+14     	; 0x6f42 <__divsf3_pse+0x3a>
    6f34:	e0 e8       	ldi	r30, 0x80	; 128
    6f36:	32 d0       	rcall	.+100    	; 0x6f9c <__divsf3_pse+0x94>
    6f38:	91 50       	subi	r25, 0x01	; 1
    6f3a:	50 40       	sbci	r21, 0x00	; 0
    6f3c:	e6 95       	lsr	r30
    6f3e:	00 1c       	adc	r0, r0
    6f40:	ca f7       	brpl	.-14     	; 0x6f34 <__divsf3_pse+0x2c>
    6f42:	2b d0       	rcall	.+86     	; 0x6f9a <__divsf3_pse+0x92>
    6f44:	fe 2f       	mov	r31, r30
    6f46:	29 d0       	rcall	.+82     	; 0x6f9a <__divsf3_pse+0x92>
    6f48:	66 0f       	add	r22, r22
    6f4a:	77 1f       	adc	r23, r23
    6f4c:	88 1f       	adc	r24, r24
    6f4e:	bb 1f       	adc	r27, r27
    6f50:	26 17       	cp	r18, r22
    6f52:	37 07       	cpc	r19, r23
    6f54:	48 07       	cpc	r20, r24
    6f56:	ab 07       	cpc	r26, r27
    6f58:	b0 e8       	ldi	r27, 0x80	; 128
    6f5a:	09 f0       	breq	.+2      	; 0x6f5e <__divsf3_pse+0x56>
    6f5c:	bb 0b       	sbc	r27, r27
    6f5e:	80 2d       	mov	r24, r0
    6f60:	bf 01       	movw	r22, r30
    6f62:	ff 27       	eor	r31, r31
    6f64:	93 58       	subi	r25, 0x83	; 131
    6f66:	5f 4f       	sbci	r21, 0xFF	; 255
    6f68:	3a f0       	brmi	.+14     	; 0x6f78 <__divsf3_pse+0x70>
    6f6a:	9e 3f       	cpi	r25, 0xFE	; 254
    6f6c:	51 05       	cpc	r21, r1
    6f6e:	78 f0       	brcs	.+30     	; 0x6f8e <__divsf3_pse+0x86>
    6f70:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>
    6f74:	0c 94 c1 38 	jmp	0x7182	; 0x7182 <__fp_szero>
    6f78:	5f 3f       	cpi	r21, 0xFF	; 255
    6f7a:	e4 f3       	brlt	.-8      	; 0x6f74 <__divsf3_pse+0x6c>
    6f7c:	98 3e       	cpi	r25, 0xE8	; 232
    6f7e:	d4 f3       	brlt	.-12     	; 0x6f74 <__divsf3_pse+0x6c>
    6f80:	86 95       	lsr	r24
    6f82:	77 95       	ror	r23
    6f84:	67 95       	ror	r22
    6f86:	b7 95       	ror	r27
    6f88:	f7 95       	ror	r31
    6f8a:	9f 5f       	subi	r25, 0xFF	; 255
    6f8c:	c9 f7       	brne	.-14     	; 0x6f80 <__divsf3_pse+0x78>
    6f8e:	88 0f       	add	r24, r24
    6f90:	91 1d       	adc	r25, r1
    6f92:	96 95       	lsr	r25
    6f94:	87 95       	ror	r24
    6f96:	97 f9       	bld	r25, 7
    6f98:	08 95       	ret
    6f9a:	e1 e0       	ldi	r30, 0x01	; 1
    6f9c:	66 0f       	add	r22, r22
    6f9e:	77 1f       	adc	r23, r23
    6fa0:	88 1f       	adc	r24, r24
    6fa2:	bb 1f       	adc	r27, r27
    6fa4:	62 17       	cp	r22, r18
    6fa6:	73 07       	cpc	r23, r19
    6fa8:	84 07       	cpc	r24, r20
    6faa:	ba 07       	cpc	r27, r26
    6fac:	20 f0       	brcs	.+8      	; 0x6fb6 <__divsf3_pse+0xae>
    6fae:	62 1b       	sub	r22, r18
    6fb0:	73 0b       	sbc	r23, r19
    6fb2:	84 0b       	sbc	r24, r20
    6fb4:	ba 0b       	sbc	r27, r26
    6fb6:	ee 1f       	adc	r30, r30
    6fb8:	88 f7       	brcc	.-30     	; 0x6f9c <__divsf3_pse+0x94>
    6fba:	e0 95       	com	r30
    6fbc:	08 95       	ret

00006fbe <__fixsfsi>:
    6fbe:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <__fixunssfsi>
    6fc2:	68 94       	set
    6fc4:	b1 11       	cpse	r27, r1
    6fc6:	0c 94 c1 38 	jmp	0x7182	; 0x7182 <__fp_szero>
    6fca:	08 95       	ret

00006fcc <__fixunssfsi>:
    6fcc:	0e 94 a6 38 	call	0x714c	; 0x714c <__fp_splitA>
    6fd0:	88 f0       	brcs	.+34     	; 0x6ff4 <__fixunssfsi+0x28>
    6fd2:	9f 57       	subi	r25, 0x7F	; 127
    6fd4:	98 f0       	brcs	.+38     	; 0x6ffc <__fixunssfsi+0x30>
    6fd6:	b9 2f       	mov	r27, r25
    6fd8:	99 27       	eor	r25, r25
    6fda:	b7 51       	subi	r27, 0x17	; 23
    6fdc:	b0 f0       	brcs	.+44     	; 0x700a <__fixunssfsi+0x3e>
    6fde:	e1 f0       	breq	.+56     	; 0x7018 <__fixunssfsi+0x4c>
    6fe0:	66 0f       	add	r22, r22
    6fe2:	77 1f       	adc	r23, r23
    6fe4:	88 1f       	adc	r24, r24
    6fe6:	99 1f       	adc	r25, r25
    6fe8:	1a f0       	brmi	.+6      	; 0x6ff0 <__fixunssfsi+0x24>
    6fea:	ba 95       	dec	r27
    6fec:	c9 f7       	brne	.-14     	; 0x6fe0 <__fixunssfsi+0x14>
    6fee:	14 c0       	rjmp	.+40     	; 0x7018 <__fixunssfsi+0x4c>
    6ff0:	b1 30       	cpi	r27, 0x01	; 1
    6ff2:	91 f0       	breq	.+36     	; 0x7018 <__fixunssfsi+0x4c>
    6ff4:	0e 94 c0 38 	call	0x7180	; 0x7180 <__fp_zero>
    6ff8:	b1 e0       	ldi	r27, 0x01	; 1
    6ffa:	08 95       	ret
    6ffc:	0c 94 c0 38 	jmp	0x7180	; 0x7180 <__fp_zero>
    7000:	67 2f       	mov	r22, r23
    7002:	78 2f       	mov	r23, r24
    7004:	88 27       	eor	r24, r24
    7006:	b8 5f       	subi	r27, 0xF8	; 248
    7008:	39 f0       	breq	.+14     	; 0x7018 <__fixunssfsi+0x4c>
    700a:	b9 3f       	cpi	r27, 0xF9	; 249
    700c:	cc f3       	brlt	.-14     	; 0x7000 <__fixunssfsi+0x34>
    700e:	86 95       	lsr	r24
    7010:	77 95       	ror	r23
    7012:	67 95       	ror	r22
    7014:	b3 95       	inc	r27
    7016:	d9 f7       	brne	.-10     	; 0x700e <__fixunssfsi+0x42>
    7018:	3e f4       	brtc	.+14     	; 0x7028 <__fixunssfsi+0x5c>
    701a:	90 95       	com	r25
    701c:	80 95       	com	r24
    701e:	70 95       	com	r23
    7020:	61 95       	neg	r22
    7022:	7f 4f       	sbci	r23, 0xFF	; 255
    7024:	8f 4f       	sbci	r24, 0xFF	; 255
    7026:	9f 4f       	sbci	r25, 0xFF	; 255
    7028:	08 95       	ret

0000702a <__floatunsisf>:
    702a:	e8 94       	clt
    702c:	09 c0       	rjmp	.+18     	; 0x7040 <__floatsisf+0x12>

0000702e <__floatsisf>:
    702e:	97 fb       	bst	r25, 7
    7030:	3e f4       	brtc	.+14     	; 0x7040 <__floatsisf+0x12>
    7032:	90 95       	com	r25
    7034:	80 95       	com	r24
    7036:	70 95       	com	r23
    7038:	61 95       	neg	r22
    703a:	7f 4f       	sbci	r23, 0xFF	; 255
    703c:	8f 4f       	sbci	r24, 0xFF	; 255
    703e:	9f 4f       	sbci	r25, 0xFF	; 255
    7040:	99 23       	and	r25, r25
    7042:	a9 f0       	breq	.+42     	; 0x706e <__floatsisf+0x40>
    7044:	f9 2f       	mov	r31, r25
    7046:	96 e9       	ldi	r25, 0x96	; 150
    7048:	bb 27       	eor	r27, r27
    704a:	93 95       	inc	r25
    704c:	f6 95       	lsr	r31
    704e:	87 95       	ror	r24
    7050:	77 95       	ror	r23
    7052:	67 95       	ror	r22
    7054:	b7 95       	ror	r27
    7056:	f1 11       	cpse	r31, r1
    7058:	f8 cf       	rjmp	.-16     	; 0x704a <__floatsisf+0x1c>
    705a:	fa f4       	brpl	.+62     	; 0x709a <__floatsisf+0x6c>
    705c:	bb 0f       	add	r27, r27
    705e:	11 f4       	brne	.+4      	; 0x7064 <__floatsisf+0x36>
    7060:	60 ff       	sbrs	r22, 0
    7062:	1b c0       	rjmp	.+54     	; 0x709a <__floatsisf+0x6c>
    7064:	6f 5f       	subi	r22, 0xFF	; 255
    7066:	7f 4f       	sbci	r23, 0xFF	; 255
    7068:	8f 4f       	sbci	r24, 0xFF	; 255
    706a:	9f 4f       	sbci	r25, 0xFF	; 255
    706c:	16 c0       	rjmp	.+44     	; 0x709a <__floatsisf+0x6c>
    706e:	88 23       	and	r24, r24
    7070:	11 f0       	breq	.+4      	; 0x7076 <__floatsisf+0x48>
    7072:	96 e9       	ldi	r25, 0x96	; 150
    7074:	11 c0       	rjmp	.+34     	; 0x7098 <__floatsisf+0x6a>
    7076:	77 23       	and	r23, r23
    7078:	21 f0       	breq	.+8      	; 0x7082 <__floatsisf+0x54>
    707a:	9e e8       	ldi	r25, 0x8E	; 142
    707c:	87 2f       	mov	r24, r23
    707e:	76 2f       	mov	r23, r22
    7080:	05 c0       	rjmp	.+10     	; 0x708c <__floatsisf+0x5e>
    7082:	66 23       	and	r22, r22
    7084:	71 f0       	breq	.+28     	; 0x70a2 <__floatsisf+0x74>
    7086:	96 e8       	ldi	r25, 0x86	; 134
    7088:	86 2f       	mov	r24, r22
    708a:	70 e0       	ldi	r23, 0x00	; 0
    708c:	60 e0       	ldi	r22, 0x00	; 0
    708e:	2a f0       	brmi	.+10     	; 0x709a <__floatsisf+0x6c>
    7090:	9a 95       	dec	r25
    7092:	66 0f       	add	r22, r22
    7094:	77 1f       	adc	r23, r23
    7096:	88 1f       	adc	r24, r24
    7098:	da f7       	brpl	.-10     	; 0x7090 <__floatsisf+0x62>
    709a:	88 0f       	add	r24, r24
    709c:	96 95       	lsr	r25
    709e:	87 95       	ror	r24
    70a0:	97 f9       	bld	r25, 7
    70a2:	08 95       	ret

000070a4 <__fp_cmp>:
    70a4:	99 0f       	add	r25, r25
    70a6:	00 08       	sbc	r0, r0
    70a8:	55 0f       	add	r21, r21
    70aa:	aa 0b       	sbc	r26, r26
    70ac:	e0 e8       	ldi	r30, 0x80	; 128
    70ae:	fe ef       	ldi	r31, 0xFE	; 254
    70b0:	16 16       	cp	r1, r22
    70b2:	17 06       	cpc	r1, r23
    70b4:	e8 07       	cpc	r30, r24
    70b6:	f9 07       	cpc	r31, r25
    70b8:	c0 f0       	brcs	.+48     	; 0x70ea <__fp_cmp+0x46>
    70ba:	12 16       	cp	r1, r18
    70bc:	13 06       	cpc	r1, r19
    70be:	e4 07       	cpc	r30, r20
    70c0:	f5 07       	cpc	r31, r21
    70c2:	98 f0       	brcs	.+38     	; 0x70ea <__fp_cmp+0x46>
    70c4:	62 1b       	sub	r22, r18
    70c6:	73 0b       	sbc	r23, r19
    70c8:	84 0b       	sbc	r24, r20
    70ca:	95 0b       	sbc	r25, r21
    70cc:	39 f4       	brne	.+14     	; 0x70dc <__fp_cmp+0x38>
    70ce:	0a 26       	eor	r0, r26
    70d0:	61 f0       	breq	.+24     	; 0x70ea <__fp_cmp+0x46>
    70d2:	23 2b       	or	r18, r19
    70d4:	24 2b       	or	r18, r20
    70d6:	25 2b       	or	r18, r21
    70d8:	21 f4       	brne	.+8      	; 0x70e2 <__fp_cmp+0x3e>
    70da:	08 95       	ret
    70dc:	0a 26       	eor	r0, r26
    70de:	09 f4       	brne	.+2      	; 0x70e2 <__fp_cmp+0x3e>
    70e0:	a1 40       	sbci	r26, 0x01	; 1
    70e2:	a6 95       	lsr	r26
    70e4:	8f ef       	ldi	r24, 0xFF	; 255
    70e6:	81 1d       	adc	r24, r1
    70e8:	81 1d       	adc	r24, r1
    70ea:	08 95       	ret

000070ec <__fp_inf>:
    70ec:	97 f9       	bld	r25, 7
    70ee:	9f 67       	ori	r25, 0x7F	; 127
    70f0:	80 e8       	ldi	r24, 0x80	; 128
    70f2:	70 e0       	ldi	r23, 0x00	; 0
    70f4:	60 e0       	ldi	r22, 0x00	; 0
    70f6:	08 95       	ret

000070f8 <__fp_nan>:
    70f8:	9f ef       	ldi	r25, 0xFF	; 255
    70fa:	80 ec       	ldi	r24, 0xC0	; 192
    70fc:	08 95       	ret

000070fe <__fp_pscA>:
    70fe:	00 24       	eor	r0, r0
    7100:	0a 94       	dec	r0
    7102:	16 16       	cp	r1, r22
    7104:	17 06       	cpc	r1, r23
    7106:	18 06       	cpc	r1, r24
    7108:	09 06       	cpc	r0, r25
    710a:	08 95       	ret

0000710c <__fp_pscB>:
    710c:	00 24       	eor	r0, r0
    710e:	0a 94       	dec	r0
    7110:	12 16       	cp	r1, r18
    7112:	13 06       	cpc	r1, r19
    7114:	14 06       	cpc	r1, r20
    7116:	05 06       	cpc	r0, r21
    7118:	08 95       	ret

0000711a <__fp_round>:
    711a:	09 2e       	mov	r0, r25
    711c:	03 94       	inc	r0
    711e:	00 0c       	add	r0, r0
    7120:	11 f4       	brne	.+4      	; 0x7126 <__fp_round+0xc>
    7122:	88 23       	and	r24, r24
    7124:	52 f0       	brmi	.+20     	; 0x713a <__fp_round+0x20>
    7126:	bb 0f       	add	r27, r27
    7128:	40 f4       	brcc	.+16     	; 0x713a <__fp_round+0x20>
    712a:	bf 2b       	or	r27, r31
    712c:	11 f4       	brne	.+4      	; 0x7132 <__fp_round+0x18>
    712e:	60 ff       	sbrs	r22, 0
    7130:	04 c0       	rjmp	.+8      	; 0x713a <__fp_round+0x20>
    7132:	6f 5f       	subi	r22, 0xFF	; 255
    7134:	7f 4f       	sbci	r23, 0xFF	; 255
    7136:	8f 4f       	sbci	r24, 0xFF	; 255
    7138:	9f 4f       	sbci	r25, 0xFF	; 255
    713a:	08 95       	ret

0000713c <__fp_split3>:
    713c:	57 fd       	sbrc	r21, 7
    713e:	90 58       	subi	r25, 0x80	; 128
    7140:	44 0f       	add	r20, r20
    7142:	55 1f       	adc	r21, r21
    7144:	59 f0       	breq	.+22     	; 0x715c <__fp_splitA+0x10>
    7146:	5f 3f       	cpi	r21, 0xFF	; 255
    7148:	71 f0       	breq	.+28     	; 0x7166 <__fp_splitA+0x1a>
    714a:	47 95       	ror	r20

0000714c <__fp_splitA>:
    714c:	88 0f       	add	r24, r24
    714e:	97 fb       	bst	r25, 7
    7150:	99 1f       	adc	r25, r25
    7152:	61 f0       	breq	.+24     	; 0x716c <__fp_splitA+0x20>
    7154:	9f 3f       	cpi	r25, 0xFF	; 255
    7156:	79 f0       	breq	.+30     	; 0x7176 <__fp_splitA+0x2a>
    7158:	87 95       	ror	r24
    715a:	08 95       	ret
    715c:	12 16       	cp	r1, r18
    715e:	13 06       	cpc	r1, r19
    7160:	14 06       	cpc	r1, r20
    7162:	55 1f       	adc	r21, r21
    7164:	f2 cf       	rjmp	.-28     	; 0x714a <__fp_split3+0xe>
    7166:	46 95       	lsr	r20
    7168:	f1 df       	rcall	.-30     	; 0x714c <__fp_splitA>
    716a:	08 c0       	rjmp	.+16     	; 0x717c <__fp_splitA+0x30>
    716c:	16 16       	cp	r1, r22
    716e:	17 06       	cpc	r1, r23
    7170:	18 06       	cpc	r1, r24
    7172:	99 1f       	adc	r25, r25
    7174:	f1 cf       	rjmp	.-30     	; 0x7158 <__fp_splitA+0xc>
    7176:	86 95       	lsr	r24
    7178:	71 05       	cpc	r23, r1
    717a:	61 05       	cpc	r22, r1
    717c:	08 94       	sec
    717e:	08 95       	ret

00007180 <__fp_zero>:
    7180:	e8 94       	clt

00007182 <__fp_szero>:
    7182:	bb 27       	eor	r27, r27
    7184:	66 27       	eor	r22, r22
    7186:	77 27       	eor	r23, r23
    7188:	cb 01       	movw	r24, r22
    718a:	97 f9       	bld	r25, 7
    718c:	08 95       	ret

0000718e <__gesf2>:
    718e:	0e 94 52 38 	call	0x70a4	; 0x70a4 <__fp_cmp>
    7192:	08 f4       	brcc	.+2      	; 0x7196 <__gesf2+0x8>
    7194:	8f ef       	ldi	r24, 0xFF	; 255
    7196:	08 95       	ret

00007198 <__mulsf3>:
    7198:	0e 94 df 38 	call	0x71be	; 0x71be <__mulsf3x>
    719c:	0c 94 8d 38 	jmp	0x711a	; 0x711a <__fp_round>
    71a0:	0e 94 7f 38 	call	0x70fe	; 0x70fe <__fp_pscA>
    71a4:	38 f0       	brcs	.+14     	; 0x71b4 <__mulsf3+0x1c>
    71a6:	0e 94 86 38 	call	0x710c	; 0x710c <__fp_pscB>
    71aa:	20 f0       	brcs	.+8      	; 0x71b4 <__mulsf3+0x1c>
    71ac:	95 23       	and	r25, r21
    71ae:	11 f0       	breq	.+4      	; 0x71b4 <__mulsf3+0x1c>
    71b0:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>
    71b4:	0c 94 7c 38 	jmp	0x70f8	; 0x70f8 <__fp_nan>
    71b8:	11 24       	eor	r1, r1
    71ba:	0c 94 c1 38 	jmp	0x7182	; 0x7182 <__fp_szero>

000071be <__mulsf3x>:
    71be:	0e 94 9e 38 	call	0x713c	; 0x713c <__fp_split3>
    71c2:	70 f3       	brcs	.-36     	; 0x71a0 <__mulsf3+0x8>

000071c4 <__mulsf3_pse>:
    71c4:	95 9f       	mul	r25, r21
    71c6:	c1 f3       	breq	.-16     	; 0x71b8 <__mulsf3+0x20>
    71c8:	95 0f       	add	r25, r21
    71ca:	50 e0       	ldi	r21, 0x00	; 0
    71cc:	55 1f       	adc	r21, r21
    71ce:	62 9f       	mul	r22, r18
    71d0:	f0 01       	movw	r30, r0
    71d2:	72 9f       	mul	r23, r18
    71d4:	bb 27       	eor	r27, r27
    71d6:	f0 0d       	add	r31, r0
    71d8:	b1 1d       	adc	r27, r1
    71da:	63 9f       	mul	r22, r19
    71dc:	aa 27       	eor	r26, r26
    71de:	f0 0d       	add	r31, r0
    71e0:	b1 1d       	adc	r27, r1
    71e2:	aa 1f       	adc	r26, r26
    71e4:	64 9f       	mul	r22, r20
    71e6:	66 27       	eor	r22, r22
    71e8:	b0 0d       	add	r27, r0
    71ea:	a1 1d       	adc	r26, r1
    71ec:	66 1f       	adc	r22, r22
    71ee:	82 9f       	mul	r24, r18
    71f0:	22 27       	eor	r18, r18
    71f2:	b0 0d       	add	r27, r0
    71f4:	a1 1d       	adc	r26, r1
    71f6:	62 1f       	adc	r22, r18
    71f8:	73 9f       	mul	r23, r19
    71fa:	b0 0d       	add	r27, r0
    71fc:	a1 1d       	adc	r26, r1
    71fe:	62 1f       	adc	r22, r18
    7200:	83 9f       	mul	r24, r19
    7202:	a0 0d       	add	r26, r0
    7204:	61 1d       	adc	r22, r1
    7206:	22 1f       	adc	r18, r18
    7208:	74 9f       	mul	r23, r20
    720a:	33 27       	eor	r19, r19
    720c:	a0 0d       	add	r26, r0
    720e:	61 1d       	adc	r22, r1
    7210:	23 1f       	adc	r18, r19
    7212:	84 9f       	mul	r24, r20
    7214:	60 0d       	add	r22, r0
    7216:	21 1d       	adc	r18, r1
    7218:	82 2f       	mov	r24, r18
    721a:	76 2f       	mov	r23, r22
    721c:	6a 2f       	mov	r22, r26
    721e:	11 24       	eor	r1, r1
    7220:	9f 57       	subi	r25, 0x7F	; 127
    7222:	50 40       	sbci	r21, 0x00	; 0
    7224:	9a f0       	brmi	.+38     	; 0x724c <__mulsf3_pse+0x88>
    7226:	f1 f0       	breq	.+60     	; 0x7264 <__mulsf3_pse+0xa0>
    7228:	88 23       	and	r24, r24
    722a:	4a f0       	brmi	.+18     	; 0x723e <__mulsf3_pse+0x7a>
    722c:	ee 0f       	add	r30, r30
    722e:	ff 1f       	adc	r31, r31
    7230:	bb 1f       	adc	r27, r27
    7232:	66 1f       	adc	r22, r22
    7234:	77 1f       	adc	r23, r23
    7236:	88 1f       	adc	r24, r24
    7238:	91 50       	subi	r25, 0x01	; 1
    723a:	50 40       	sbci	r21, 0x00	; 0
    723c:	a9 f7       	brne	.-22     	; 0x7228 <__mulsf3_pse+0x64>
    723e:	9e 3f       	cpi	r25, 0xFE	; 254
    7240:	51 05       	cpc	r21, r1
    7242:	80 f0       	brcs	.+32     	; 0x7264 <__mulsf3_pse+0xa0>
    7244:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__fp_inf>
    7248:	0c 94 c1 38 	jmp	0x7182	; 0x7182 <__fp_szero>
    724c:	5f 3f       	cpi	r21, 0xFF	; 255
    724e:	e4 f3       	brlt	.-8      	; 0x7248 <__mulsf3_pse+0x84>
    7250:	98 3e       	cpi	r25, 0xE8	; 232
    7252:	d4 f3       	brlt	.-12     	; 0x7248 <__mulsf3_pse+0x84>
    7254:	86 95       	lsr	r24
    7256:	77 95       	ror	r23
    7258:	67 95       	ror	r22
    725a:	b7 95       	ror	r27
    725c:	f7 95       	ror	r31
    725e:	e7 95       	ror	r30
    7260:	9f 5f       	subi	r25, 0xFF	; 255
    7262:	c1 f7       	brne	.-16     	; 0x7254 <__mulsf3_pse+0x90>
    7264:	fe 2b       	or	r31, r30
    7266:	88 0f       	add	r24, r24
    7268:	91 1d       	adc	r25, r1
    726a:	96 95       	lsr	r25
    726c:	87 95       	ror	r24
    726e:	97 f9       	bld	r25, 7
    7270:	08 95       	ret

00007272 <sprintf>:
    7272:	ae e0       	ldi	r26, 0x0E	; 14
    7274:	b0 e0       	ldi	r27, 0x00	; 0
    7276:	ef e3       	ldi	r30, 0x3F	; 63
    7278:	f9 e3       	ldi	r31, 0x39	; 57
    727a:	0c 94 fa 3b 	jmp	0x77f4	; 0x77f4 <__prologue_saves__+0x1c>
    727e:	0d 89       	ldd	r16, Y+21	; 0x15
    7280:	1e 89       	ldd	r17, Y+22	; 0x16
    7282:	86 e0       	ldi	r24, 0x06	; 6
    7284:	8c 83       	std	Y+4, r24	; 0x04
    7286:	1a 83       	std	Y+2, r17	; 0x02
    7288:	09 83       	std	Y+1, r16	; 0x01
    728a:	8f ef       	ldi	r24, 0xFF	; 255
    728c:	9f e7       	ldi	r25, 0x7F	; 127
    728e:	9e 83       	std	Y+6, r25	; 0x06
    7290:	8d 83       	std	Y+5, r24	; 0x05
    7292:	ae 01       	movw	r20, r28
    7294:	47 5e       	subi	r20, 0xE7	; 231
    7296:	5f 4f       	sbci	r21, 0xFF	; 255
    7298:	6f 89       	ldd	r22, Y+23	; 0x17
    729a:	78 8d       	ldd	r23, Y+24	; 0x18
    729c:	ce 01       	movw	r24, r28
    729e:	01 96       	adiw	r24, 0x01	; 1
    72a0:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <vfprintf>
    72a4:	ef 81       	ldd	r30, Y+7	; 0x07
    72a6:	f8 85       	ldd	r31, Y+8	; 0x08
    72a8:	e0 0f       	add	r30, r16
    72aa:	f1 1f       	adc	r31, r17
    72ac:	10 82       	st	Z, r1
    72ae:	2e 96       	adiw	r28, 0x0e	; 14
    72b0:	e4 e0       	ldi	r30, 0x04	; 4
    72b2:	0c 94 16 3c 	jmp	0x782c	; 0x782c <__epilogue_restores__+0x1c>

000072b6 <vfprintf>:
    72b6:	ab e0       	ldi	r26, 0x0B	; 11
    72b8:	b0 e0       	ldi	r27, 0x00	; 0
    72ba:	e1 e6       	ldi	r30, 0x61	; 97
    72bc:	f9 e3       	ldi	r31, 0x39	; 57
    72be:	0c 94 ec 3b 	jmp	0x77d8	; 0x77d8 <__prologue_saves__>
    72c2:	6c 01       	movw	r12, r24
    72c4:	7b 01       	movw	r14, r22
    72c6:	8a 01       	movw	r16, r20
    72c8:	fc 01       	movw	r30, r24
    72ca:	17 82       	std	Z+7, r1	; 0x07
    72cc:	16 82       	std	Z+6, r1	; 0x06
    72ce:	83 81       	ldd	r24, Z+3	; 0x03
    72d0:	81 ff       	sbrs	r24, 1
    72d2:	cc c1       	rjmp	.+920    	; 0x766c <vfprintf+0x3b6>
    72d4:	ce 01       	movw	r24, r28
    72d6:	01 96       	adiw	r24, 0x01	; 1
    72d8:	3c 01       	movw	r6, r24
    72da:	f6 01       	movw	r30, r12
    72dc:	93 81       	ldd	r25, Z+3	; 0x03
    72de:	f7 01       	movw	r30, r14
    72e0:	93 fd       	sbrc	r25, 3
    72e2:	85 91       	lpm	r24, Z+
    72e4:	93 ff       	sbrs	r25, 3
    72e6:	81 91       	ld	r24, Z+
    72e8:	7f 01       	movw	r14, r30
    72ea:	88 23       	and	r24, r24
    72ec:	09 f4       	brne	.+2      	; 0x72f0 <vfprintf+0x3a>
    72ee:	ba c1       	rjmp	.+884    	; 0x7664 <vfprintf+0x3ae>
    72f0:	85 32       	cpi	r24, 0x25	; 37
    72f2:	39 f4       	brne	.+14     	; 0x7302 <vfprintf+0x4c>
    72f4:	93 fd       	sbrc	r25, 3
    72f6:	85 91       	lpm	r24, Z+
    72f8:	93 ff       	sbrs	r25, 3
    72fa:	81 91       	ld	r24, Z+
    72fc:	7f 01       	movw	r14, r30
    72fe:	85 32       	cpi	r24, 0x25	; 37
    7300:	29 f4       	brne	.+10     	; 0x730c <vfprintf+0x56>
    7302:	b6 01       	movw	r22, r12
    7304:	90 e0       	ldi	r25, 0x00	; 0
    7306:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <fputc>
    730a:	e7 cf       	rjmp	.-50     	; 0x72da <vfprintf+0x24>
    730c:	91 2c       	mov	r9, r1
    730e:	21 2c       	mov	r2, r1
    7310:	31 2c       	mov	r3, r1
    7312:	ff e1       	ldi	r31, 0x1F	; 31
    7314:	f3 15       	cp	r31, r3
    7316:	d8 f0       	brcs	.+54     	; 0x734e <vfprintf+0x98>
    7318:	8b 32       	cpi	r24, 0x2B	; 43
    731a:	79 f0       	breq	.+30     	; 0x733a <vfprintf+0x84>
    731c:	38 f4       	brcc	.+14     	; 0x732c <vfprintf+0x76>
    731e:	80 32       	cpi	r24, 0x20	; 32
    7320:	79 f0       	breq	.+30     	; 0x7340 <vfprintf+0x8a>
    7322:	83 32       	cpi	r24, 0x23	; 35
    7324:	a1 f4       	brne	.+40     	; 0x734e <vfprintf+0x98>
    7326:	23 2d       	mov	r18, r3
    7328:	20 61       	ori	r18, 0x10	; 16
    732a:	1d c0       	rjmp	.+58     	; 0x7366 <vfprintf+0xb0>
    732c:	8d 32       	cpi	r24, 0x2D	; 45
    732e:	61 f0       	breq	.+24     	; 0x7348 <vfprintf+0x92>
    7330:	80 33       	cpi	r24, 0x30	; 48
    7332:	69 f4       	brne	.+26     	; 0x734e <vfprintf+0x98>
    7334:	23 2d       	mov	r18, r3
    7336:	21 60       	ori	r18, 0x01	; 1
    7338:	16 c0       	rjmp	.+44     	; 0x7366 <vfprintf+0xb0>
    733a:	83 2d       	mov	r24, r3
    733c:	82 60       	ori	r24, 0x02	; 2
    733e:	38 2e       	mov	r3, r24
    7340:	e3 2d       	mov	r30, r3
    7342:	e4 60       	ori	r30, 0x04	; 4
    7344:	3e 2e       	mov	r3, r30
    7346:	2a c0       	rjmp	.+84     	; 0x739c <vfprintf+0xe6>
    7348:	f3 2d       	mov	r31, r3
    734a:	f8 60       	ori	r31, 0x08	; 8
    734c:	1d c0       	rjmp	.+58     	; 0x7388 <vfprintf+0xd2>
    734e:	37 fc       	sbrc	r3, 7
    7350:	2d c0       	rjmp	.+90     	; 0x73ac <vfprintf+0xf6>
    7352:	20 ed       	ldi	r18, 0xD0	; 208
    7354:	28 0f       	add	r18, r24
    7356:	2a 30       	cpi	r18, 0x0A	; 10
    7358:	40 f0       	brcs	.+16     	; 0x736a <vfprintf+0xb4>
    735a:	8e 32       	cpi	r24, 0x2E	; 46
    735c:	b9 f4       	brne	.+46     	; 0x738c <vfprintf+0xd6>
    735e:	36 fc       	sbrc	r3, 6
    7360:	81 c1       	rjmp	.+770    	; 0x7664 <vfprintf+0x3ae>
    7362:	23 2d       	mov	r18, r3
    7364:	20 64       	ori	r18, 0x40	; 64
    7366:	32 2e       	mov	r3, r18
    7368:	19 c0       	rjmp	.+50     	; 0x739c <vfprintf+0xe6>
    736a:	36 fe       	sbrs	r3, 6
    736c:	06 c0       	rjmp	.+12     	; 0x737a <vfprintf+0xc4>
    736e:	8a e0       	ldi	r24, 0x0A	; 10
    7370:	98 9e       	mul	r9, r24
    7372:	20 0d       	add	r18, r0
    7374:	11 24       	eor	r1, r1
    7376:	92 2e       	mov	r9, r18
    7378:	11 c0       	rjmp	.+34     	; 0x739c <vfprintf+0xe6>
    737a:	ea e0       	ldi	r30, 0x0A	; 10
    737c:	2e 9e       	mul	r2, r30
    737e:	20 0d       	add	r18, r0
    7380:	11 24       	eor	r1, r1
    7382:	22 2e       	mov	r2, r18
    7384:	f3 2d       	mov	r31, r3
    7386:	f0 62       	ori	r31, 0x20	; 32
    7388:	3f 2e       	mov	r3, r31
    738a:	08 c0       	rjmp	.+16     	; 0x739c <vfprintf+0xe6>
    738c:	8c 36       	cpi	r24, 0x6C	; 108
    738e:	21 f4       	brne	.+8      	; 0x7398 <vfprintf+0xe2>
    7390:	83 2d       	mov	r24, r3
    7392:	80 68       	ori	r24, 0x80	; 128
    7394:	38 2e       	mov	r3, r24
    7396:	02 c0       	rjmp	.+4      	; 0x739c <vfprintf+0xe6>
    7398:	88 36       	cpi	r24, 0x68	; 104
    739a:	41 f4       	brne	.+16     	; 0x73ac <vfprintf+0xf6>
    739c:	f7 01       	movw	r30, r14
    739e:	93 fd       	sbrc	r25, 3
    73a0:	85 91       	lpm	r24, Z+
    73a2:	93 ff       	sbrs	r25, 3
    73a4:	81 91       	ld	r24, Z+
    73a6:	7f 01       	movw	r14, r30
    73a8:	81 11       	cpse	r24, r1
    73aa:	b3 cf       	rjmp	.-154    	; 0x7312 <vfprintf+0x5c>
    73ac:	98 2f       	mov	r25, r24
    73ae:	9f 7d       	andi	r25, 0xDF	; 223
    73b0:	95 54       	subi	r25, 0x45	; 69
    73b2:	93 30       	cpi	r25, 0x03	; 3
    73b4:	28 f4       	brcc	.+10     	; 0x73c0 <vfprintf+0x10a>
    73b6:	0c 5f       	subi	r16, 0xFC	; 252
    73b8:	1f 4f       	sbci	r17, 0xFF	; 255
    73ba:	9f e3       	ldi	r25, 0x3F	; 63
    73bc:	99 83       	std	Y+1, r25	; 0x01
    73be:	0d c0       	rjmp	.+26     	; 0x73da <vfprintf+0x124>
    73c0:	83 36       	cpi	r24, 0x63	; 99
    73c2:	31 f0       	breq	.+12     	; 0x73d0 <vfprintf+0x11a>
    73c4:	83 37       	cpi	r24, 0x73	; 115
    73c6:	71 f0       	breq	.+28     	; 0x73e4 <vfprintf+0x12e>
    73c8:	83 35       	cpi	r24, 0x53	; 83
    73ca:	09 f0       	breq	.+2      	; 0x73ce <vfprintf+0x118>
    73cc:	59 c0       	rjmp	.+178    	; 0x7480 <vfprintf+0x1ca>
    73ce:	21 c0       	rjmp	.+66     	; 0x7412 <vfprintf+0x15c>
    73d0:	f8 01       	movw	r30, r16
    73d2:	80 81       	ld	r24, Z
    73d4:	89 83       	std	Y+1, r24	; 0x01
    73d6:	0e 5f       	subi	r16, 0xFE	; 254
    73d8:	1f 4f       	sbci	r17, 0xFF	; 255
    73da:	88 24       	eor	r8, r8
    73dc:	83 94       	inc	r8
    73de:	91 2c       	mov	r9, r1
    73e0:	53 01       	movw	r10, r6
    73e2:	13 c0       	rjmp	.+38     	; 0x740a <vfprintf+0x154>
    73e4:	28 01       	movw	r4, r16
    73e6:	f2 e0       	ldi	r31, 0x02	; 2
    73e8:	4f 0e       	add	r4, r31
    73ea:	51 1c       	adc	r5, r1
    73ec:	f8 01       	movw	r30, r16
    73ee:	a0 80       	ld	r10, Z
    73f0:	b1 80       	ldd	r11, Z+1	; 0x01
    73f2:	36 fe       	sbrs	r3, 6
    73f4:	03 c0       	rjmp	.+6      	; 0x73fc <vfprintf+0x146>
    73f6:	69 2d       	mov	r22, r9
    73f8:	70 e0       	ldi	r23, 0x00	; 0
    73fa:	02 c0       	rjmp	.+4      	; 0x7400 <vfprintf+0x14a>
    73fc:	6f ef       	ldi	r22, 0xFF	; 255
    73fe:	7f ef       	ldi	r23, 0xFF	; 255
    7400:	c5 01       	movw	r24, r10
    7402:	0e 94 47 3b 	call	0x768e	; 0x768e <strnlen>
    7406:	4c 01       	movw	r8, r24
    7408:	82 01       	movw	r16, r4
    740a:	f3 2d       	mov	r31, r3
    740c:	ff 77       	andi	r31, 0x7F	; 127
    740e:	3f 2e       	mov	r3, r31
    7410:	16 c0       	rjmp	.+44     	; 0x743e <vfprintf+0x188>
    7412:	28 01       	movw	r4, r16
    7414:	22 e0       	ldi	r18, 0x02	; 2
    7416:	42 0e       	add	r4, r18
    7418:	51 1c       	adc	r5, r1
    741a:	f8 01       	movw	r30, r16
    741c:	a0 80       	ld	r10, Z
    741e:	b1 80       	ldd	r11, Z+1	; 0x01
    7420:	36 fe       	sbrs	r3, 6
    7422:	03 c0       	rjmp	.+6      	; 0x742a <vfprintf+0x174>
    7424:	69 2d       	mov	r22, r9
    7426:	70 e0       	ldi	r23, 0x00	; 0
    7428:	02 c0       	rjmp	.+4      	; 0x742e <vfprintf+0x178>
    742a:	6f ef       	ldi	r22, 0xFF	; 255
    742c:	7f ef       	ldi	r23, 0xFF	; 255
    742e:	c5 01       	movw	r24, r10
    7430:	0e 94 3c 3b 	call	0x7678	; 0x7678 <strnlen_P>
    7434:	4c 01       	movw	r8, r24
    7436:	f3 2d       	mov	r31, r3
    7438:	f0 68       	ori	r31, 0x80	; 128
    743a:	3f 2e       	mov	r3, r31
    743c:	82 01       	movw	r16, r4
    743e:	33 fc       	sbrc	r3, 3
    7440:	1b c0       	rjmp	.+54     	; 0x7478 <vfprintf+0x1c2>
    7442:	82 2d       	mov	r24, r2
    7444:	90 e0       	ldi	r25, 0x00	; 0
    7446:	88 16       	cp	r8, r24
    7448:	99 06       	cpc	r9, r25
    744a:	b0 f4       	brcc	.+44     	; 0x7478 <vfprintf+0x1c2>
    744c:	b6 01       	movw	r22, r12
    744e:	80 e2       	ldi	r24, 0x20	; 32
    7450:	90 e0       	ldi	r25, 0x00	; 0
    7452:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <fputc>
    7456:	2a 94       	dec	r2
    7458:	f4 cf       	rjmp	.-24     	; 0x7442 <vfprintf+0x18c>
    745a:	f5 01       	movw	r30, r10
    745c:	37 fc       	sbrc	r3, 7
    745e:	85 91       	lpm	r24, Z+
    7460:	37 fe       	sbrs	r3, 7
    7462:	81 91       	ld	r24, Z+
    7464:	5f 01       	movw	r10, r30
    7466:	b6 01       	movw	r22, r12
    7468:	90 e0       	ldi	r25, 0x00	; 0
    746a:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <fputc>
    746e:	21 10       	cpse	r2, r1
    7470:	2a 94       	dec	r2
    7472:	21 e0       	ldi	r18, 0x01	; 1
    7474:	82 1a       	sub	r8, r18
    7476:	91 08       	sbc	r9, r1
    7478:	81 14       	cp	r8, r1
    747a:	91 04       	cpc	r9, r1
    747c:	71 f7       	brne	.-36     	; 0x745a <vfprintf+0x1a4>
    747e:	e8 c0       	rjmp	.+464    	; 0x7650 <vfprintf+0x39a>
    7480:	84 36       	cpi	r24, 0x64	; 100
    7482:	11 f0       	breq	.+4      	; 0x7488 <vfprintf+0x1d2>
    7484:	89 36       	cpi	r24, 0x69	; 105
    7486:	41 f5       	brne	.+80     	; 0x74d8 <vfprintf+0x222>
    7488:	f8 01       	movw	r30, r16
    748a:	37 fe       	sbrs	r3, 7
    748c:	07 c0       	rjmp	.+14     	; 0x749c <vfprintf+0x1e6>
    748e:	60 81       	ld	r22, Z
    7490:	71 81       	ldd	r23, Z+1	; 0x01
    7492:	82 81       	ldd	r24, Z+2	; 0x02
    7494:	93 81       	ldd	r25, Z+3	; 0x03
    7496:	0c 5f       	subi	r16, 0xFC	; 252
    7498:	1f 4f       	sbci	r17, 0xFF	; 255
    749a:	08 c0       	rjmp	.+16     	; 0x74ac <vfprintf+0x1f6>
    749c:	60 81       	ld	r22, Z
    749e:	71 81       	ldd	r23, Z+1	; 0x01
    74a0:	07 2e       	mov	r0, r23
    74a2:	00 0c       	add	r0, r0
    74a4:	88 0b       	sbc	r24, r24
    74a6:	99 0b       	sbc	r25, r25
    74a8:	0e 5f       	subi	r16, 0xFE	; 254
    74aa:	1f 4f       	sbci	r17, 0xFF	; 255
    74ac:	f3 2d       	mov	r31, r3
    74ae:	ff 76       	andi	r31, 0x6F	; 111
    74b0:	3f 2e       	mov	r3, r31
    74b2:	97 ff       	sbrs	r25, 7
    74b4:	09 c0       	rjmp	.+18     	; 0x74c8 <vfprintf+0x212>
    74b6:	90 95       	com	r25
    74b8:	80 95       	com	r24
    74ba:	70 95       	com	r23
    74bc:	61 95       	neg	r22
    74be:	7f 4f       	sbci	r23, 0xFF	; 255
    74c0:	8f 4f       	sbci	r24, 0xFF	; 255
    74c2:	9f 4f       	sbci	r25, 0xFF	; 255
    74c4:	f0 68       	ori	r31, 0x80	; 128
    74c6:	3f 2e       	mov	r3, r31
    74c8:	2a e0       	ldi	r18, 0x0A	; 10
    74ca:	30 e0       	ldi	r19, 0x00	; 0
    74cc:	a3 01       	movw	r20, r6
    74ce:	0e 94 8e 3b 	call	0x771c	; 0x771c <__ultoa_invert>
    74d2:	88 2e       	mov	r8, r24
    74d4:	86 18       	sub	r8, r6
    74d6:	45 c0       	rjmp	.+138    	; 0x7562 <vfprintf+0x2ac>
    74d8:	85 37       	cpi	r24, 0x75	; 117
    74da:	31 f4       	brne	.+12     	; 0x74e8 <vfprintf+0x232>
    74dc:	23 2d       	mov	r18, r3
    74de:	2f 7e       	andi	r18, 0xEF	; 239
    74e0:	b2 2e       	mov	r11, r18
    74e2:	2a e0       	ldi	r18, 0x0A	; 10
    74e4:	30 e0       	ldi	r19, 0x00	; 0
    74e6:	25 c0       	rjmp	.+74     	; 0x7532 <vfprintf+0x27c>
    74e8:	93 2d       	mov	r25, r3
    74ea:	99 7f       	andi	r25, 0xF9	; 249
    74ec:	b9 2e       	mov	r11, r25
    74ee:	8f 36       	cpi	r24, 0x6F	; 111
    74f0:	c1 f0       	breq	.+48     	; 0x7522 <vfprintf+0x26c>
    74f2:	18 f4       	brcc	.+6      	; 0x74fa <vfprintf+0x244>
    74f4:	88 35       	cpi	r24, 0x58	; 88
    74f6:	79 f0       	breq	.+30     	; 0x7516 <vfprintf+0x260>
    74f8:	b5 c0       	rjmp	.+362    	; 0x7664 <vfprintf+0x3ae>
    74fa:	80 37       	cpi	r24, 0x70	; 112
    74fc:	19 f0       	breq	.+6      	; 0x7504 <vfprintf+0x24e>
    74fe:	88 37       	cpi	r24, 0x78	; 120
    7500:	21 f0       	breq	.+8      	; 0x750a <vfprintf+0x254>
    7502:	b0 c0       	rjmp	.+352    	; 0x7664 <vfprintf+0x3ae>
    7504:	e9 2f       	mov	r30, r25
    7506:	e0 61       	ori	r30, 0x10	; 16
    7508:	be 2e       	mov	r11, r30
    750a:	b4 fe       	sbrs	r11, 4
    750c:	0d c0       	rjmp	.+26     	; 0x7528 <vfprintf+0x272>
    750e:	fb 2d       	mov	r31, r11
    7510:	f4 60       	ori	r31, 0x04	; 4
    7512:	bf 2e       	mov	r11, r31
    7514:	09 c0       	rjmp	.+18     	; 0x7528 <vfprintf+0x272>
    7516:	34 fe       	sbrs	r3, 4
    7518:	0a c0       	rjmp	.+20     	; 0x752e <vfprintf+0x278>
    751a:	29 2f       	mov	r18, r25
    751c:	26 60       	ori	r18, 0x06	; 6
    751e:	b2 2e       	mov	r11, r18
    7520:	06 c0       	rjmp	.+12     	; 0x752e <vfprintf+0x278>
    7522:	28 e0       	ldi	r18, 0x08	; 8
    7524:	30 e0       	ldi	r19, 0x00	; 0
    7526:	05 c0       	rjmp	.+10     	; 0x7532 <vfprintf+0x27c>
    7528:	20 e1       	ldi	r18, 0x10	; 16
    752a:	30 e0       	ldi	r19, 0x00	; 0
    752c:	02 c0       	rjmp	.+4      	; 0x7532 <vfprintf+0x27c>
    752e:	20 e1       	ldi	r18, 0x10	; 16
    7530:	32 e0       	ldi	r19, 0x02	; 2
    7532:	f8 01       	movw	r30, r16
    7534:	b7 fe       	sbrs	r11, 7
    7536:	07 c0       	rjmp	.+14     	; 0x7546 <vfprintf+0x290>
    7538:	60 81       	ld	r22, Z
    753a:	71 81       	ldd	r23, Z+1	; 0x01
    753c:	82 81       	ldd	r24, Z+2	; 0x02
    753e:	93 81       	ldd	r25, Z+3	; 0x03
    7540:	0c 5f       	subi	r16, 0xFC	; 252
    7542:	1f 4f       	sbci	r17, 0xFF	; 255
    7544:	06 c0       	rjmp	.+12     	; 0x7552 <vfprintf+0x29c>
    7546:	60 81       	ld	r22, Z
    7548:	71 81       	ldd	r23, Z+1	; 0x01
    754a:	80 e0       	ldi	r24, 0x00	; 0
    754c:	90 e0       	ldi	r25, 0x00	; 0
    754e:	0e 5f       	subi	r16, 0xFE	; 254
    7550:	1f 4f       	sbci	r17, 0xFF	; 255
    7552:	a3 01       	movw	r20, r6
    7554:	0e 94 8e 3b 	call	0x771c	; 0x771c <__ultoa_invert>
    7558:	88 2e       	mov	r8, r24
    755a:	86 18       	sub	r8, r6
    755c:	fb 2d       	mov	r31, r11
    755e:	ff 77       	andi	r31, 0x7F	; 127
    7560:	3f 2e       	mov	r3, r31
    7562:	36 fe       	sbrs	r3, 6
    7564:	0d c0       	rjmp	.+26     	; 0x7580 <vfprintf+0x2ca>
    7566:	23 2d       	mov	r18, r3
    7568:	2e 7f       	andi	r18, 0xFE	; 254
    756a:	a2 2e       	mov	r10, r18
    756c:	89 14       	cp	r8, r9
    756e:	58 f4       	brcc	.+22     	; 0x7586 <vfprintf+0x2d0>
    7570:	34 fe       	sbrs	r3, 4
    7572:	0b c0       	rjmp	.+22     	; 0x758a <vfprintf+0x2d4>
    7574:	32 fc       	sbrc	r3, 2
    7576:	09 c0       	rjmp	.+18     	; 0x758a <vfprintf+0x2d4>
    7578:	83 2d       	mov	r24, r3
    757a:	8e 7e       	andi	r24, 0xEE	; 238
    757c:	a8 2e       	mov	r10, r24
    757e:	05 c0       	rjmp	.+10     	; 0x758a <vfprintf+0x2d4>
    7580:	b8 2c       	mov	r11, r8
    7582:	a3 2c       	mov	r10, r3
    7584:	03 c0       	rjmp	.+6      	; 0x758c <vfprintf+0x2d6>
    7586:	b8 2c       	mov	r11, r8
    7588:	01 c0       	rjmp	.+2      	; 0x758c <vfprintf+0x2d6>
    758a:	b9 2c       	mov	r11, r9
    758c:	a4 fe       	sbrs	r10, 4
    758e:	0f c0       	rjmp	.+30     	; 0x75ae <vfprintf+0x2f8>
    7590:	fe 01       	movw	r30, r28
    7592:	e8 0d       	add	r30, r8
    7594:	f1 1d       	adc	r31, r1
    7596:	80 81       	ld	r24, Z
    7598:	80 33       	cpi	r24, 0x30	; 48
    759a:	21 f4       	brne	.+8      	; 0x75a4 <vfprintf+0x2ee>
    759c:	9a 2d       	mov	r25, r10
    759e:	99 7e       	andi	r25, 0xE9	; 233
    75a0:	a9 2e       	mov	r10, r25
    75a2:	09 c0       	rjmp	.+18     	; 0x75b6 <vfprintf+0x300>
    75a4:	a2 fe       	sbrs	r10, 2
    75a6:	06 c0       	rjmp	.+12     	; 0x75b4 <vfprintf+0x2fe>
    75a8:	b3 94       	inc	r11
    75aa:	b3 94       	inc	r11
    75ac:	04 c0       	rjmp	.+8      	; 0x75b6 <vfprintf+0x300>
    75ae:	8a 2d       	mov	r24, r10
    75b0:	86 78       	andi	r24, 0x86	; 134
    75b2:	09 f0       	breq	.+2      	; 0x75b6 <vfprintf+0x300>
    75b4:	b3 94       	inc	r11
    75b6:	a3 fc       	sbrc	r10, 3
    75b8:	11 c0       	rjmp	.+34     	; 0x75dc <vfprintf+0x326>
    75ba:	a0 fe       	sbrs	r10, 0
    75bc:	06 c0       	rjmp	.+12     	; 0x75ca <vfprintf+0x314>
    75be:	b2 14       	cp	r11, r2
    75c0:	88 f4       	brcc	.+34     	; 0x75e4 <vfprintf+0x32e>
    75c2:	28 0c       	add	r2, r8
    75c4:	92 2c       	mov	r9, r2
    75c6:	9b 18       	sub	r9, r11
    75c8:	0e c0       	rjmp	.+28     	; 0x75e6 <vfprintf+0x330>
    75ca:	b2 14       	cp	r11, r2
    75cc:	60 f4       	brcc	.+24     	; 0x75e6 <vfprintf+0x330>
    75ce:	b6 01       	movw	r22, r12
    75d0:	80 e2       	ldi	r24, 0x20	; 32
    75d2:	90 e0       	ldi	r25, 0x00	; 0
    75d4:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <fputc>
    75d8:	b3 94       	inc	r11
    75da:	f7 cf       	rjmp	.-18     	; 0x75ca <vfprintf+0x314>
    75dc:	b2 14       	cp	r11, r2
    75de:	18 f4       	brcc	.+6      	; 0x75e6 <vfprintf+0x330>
    75e0:	2b 18       	sub	r2, r11
    75e2:	02 c0       	rjmp	.+4      	; 0x75e8 <vfprintf+0x332>
    75e4:	98 2c       	mov	r9, r8
    75e6:	21 2c       	mov	r2, r1
    75e8:	a4 fe       	sbrs	r10, 4
    75ea:	10 c0       	rjmp	.+32     	; 0x760c <vfprintf+0x356>
    75ec:	b6 01       	movw	r22, r12
    75ee:	80 e3       	ldi	r24, 0x30	; 48
    75f0:	90 e0       	ldi	r25, 0x00	; 0
    75f2:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <fputc>
    75f6:	a2 fe       	sbrs	r10, 2
    75f8:	17 c0       	rjmp	.+46     	; 0x7628 <vfprintf+0x372>
    75fa:	a1 fc       	sbrc	r10, 1
    75fc:	03 c0       	rjmp	.+6      	; 0x7604 <vfprintf+0x34e>
    75fe:	88 e7       	ldi	r24, 0x78	; 120
    7600:	90 e0       	ldi	r25, 0x00	; 0
    7602:	02 c0       	rjmp	.+4      	; 0x7608 <vfprintf+0x352>
    7604:	88 e5       	ldi	r24, 0x58	; 88
    7606:	90 e0       	ldi	r25, 0x00	; 0
    7608:	b6 01       	movw	r22, r12
    760a:	0c c0       	rjmp	.+24     	; 0x7624 <vfprintf+0x36e>
    760c:	8a 2d       	mov	r24, r10
    760e:	86 78       	andi	r24, 0x86	; 134
    7610:	59 f0       	breq	.+22     	; 0x7628 <vfprintf+0x372>
    7612:	a1 fe       	sbrs	r10, 1
    7614:	02 c0       	rjmp	.+4      	; 0x761a <vfprintf+0x364>
    7616:	8b e2       	ldi	r24, 0x2B	; 43
    7618:	01 c0       	rjmp	.+2      	; 0x761c <vfprintf+0x366>
    761a:	80 e2       	ldi	r24, 0x20	; 32
    761c:	a7 fc       	sbrc	r10, 7
    761e:	8d e2       	ldi	r24, 0x2D	; 45
    7620:	b6 01       	movw	r22, r12
    7622:	90 e0       	ldi	r25, 0x00	; 0
    7624:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <fputc>
    7628:	89 14       	cp	r8, r9
    762a:	38 f4       	brcc	.+14     	; 0x763a <vfprintf+0x384>
    762c:	b6 01       	movw	r22, r12
    762e:	80 e3       	ldi	r24, 0x30	; 48
    7630:	90 e0       	ldi	r25, 0x00	; 0
    7632:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <fputc>
    7636:	9a 94       	dec	r9
    7638:	f7 cf       	rjmp	.-18     	; 0x7628 <vfprintf+0x372>
    763a:	8a 94       	dec	r8
    763c:	f3 01       	movw	r30, r6
    763e:	e8 0d       	add	r30, r8
    7640:	f1 1d       	adc	r31, r1
    7642:	80 81       	ld	r24, Z
    7644:	b6 01       	movw	r22, r12
    7646:	90 e0       	ldi	r25, 0x00	; 0
    7648:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <fputc>
    764c:	81 10       	cpse	r8, r1
    764e:	f5 cf       	rjmp	.-22     	; 0x763a <vfprintf+0x384>
    7650:	22 20       	and	r2, r2
    7652:	09 f4       	brne	.+2      	; 0x7656 <vfprintf+0x3a0>
    7654:	42 ce       	rjmp	.-892    	; 0x72da <vfprintf+0x24>
    7656:	b6 01       	movw	r22, r12
    7658:	80 e2       	ldi	r24, 0x20	; 32
    765a:	90 e0       	ldi	r25, 0x00	; 0
    765c:	0e 94 52 3b 	call	0x76a4	; 0x76a4 <fputc>
    7660:	2a 94       	dec	r2
    7662:	f6 cf       	rjmp	.-20     	; 0x7650 <vfprintf+0x39a>
    7664:	f6 01       	movw	r30, r12
    7666:	86 81       	ldd	r24, Z+6	; 0x06
    7668:	97 81       	ldd	r25, Z+7	; 0x07
    766a:	02 c0       	rjmp	.+4      	; 0x7670 <vfprintf+0x3ba>
    766c:	8f ef       	ldi	r24, 0xFF	; 255
    766e:	9f ef       	ldi	r25, 0xFF	; 255
    7670:	2b 96       	adiw	r28, 0x0b	; 11
    7672:	e2 e1       	ldi	r30, 0x12	; 18
    7674:	0c 94 08 3c 	jmp	0x7810	; 0x7810 <__epilogue_restores__>

00007678 <strnlen_P>:
    7678:	fc 01       	movw	r30, r24
    767a:	05 90       	lpm	r0, Z+
    767c:	61 50       	subi	r22, 0x01	; 1
    767e:	70 40       	sbci	r23, 0x00	; 0
    7680:	01 10       	cpse	r0, r1
    7682:	d8 f7       	brcc	.-10     	; 0x767a <strnlen_P+0x2>
    7684:	80 95       	com	r24
    7686:	90 95       	com	r25
    7688:	8e 0f       	add	r24, r30
    768a:	9f 1f       	adc	r25, r31
    768c:	08 95       	ret

0000768e <strnlen>:
    768e:	fc 01       	movw	r30, r24
    7690:	61 50       	subi	r22, 0x01	; 1
    7692:	70 40       	sbci	r23, 0x00	; 0
    7694:	01 90       	ld	r0, Z+
    7696:	01 10       	cpse	r0, r1
    7698:	d8 f7       	brcc	.-10     	; 0x7690 <strnlen+0x2>
    769a:	80 95       	com	r24
    769c:	90 95       	com	r25
    769e:	8e 0f       	add	r24, r30
    76a0:	9f 1f       	adc	r25, r31
    76a2:	08 95       	ret

000076a4 <fputc>:
    76a4:	0f 93       	push	r16
    76a6:	1f 93       	push	r17
    76a8:	cf 93       	push	r28
    76aa:	df 93       	push	r29
    76ac:	fb 01       	movw	r30, r22
    76ae:	23 81       	ldd	r18, Z+3	; 0x03
    76b0:	21 fd       	sbrc	r18, 1
    76b2:	03 c0       	rjmp	.+6      	; 0x76ba <fputc+0x16>
    76b4:	8f ef       	ldi	r24, 0xFF	; 255
    76b6:	9f ef       	ldi	r25, 0xFF	; 255
    76b8:	2c c0       	rjmp	.+88     	; 0x7712 <fputc+0x6e>
    76ba:	22 ff       	sbrs	r18, 2
    76bc:	16 c0       	rjmp	.+44     	; 0x76ea <fputc+0x46>
    76be:	46 81       	ldd	r20, Z+6	; 0x06
    76c0:	57 81       	ldd	r21, Z+7	; 0x07
    76c2:	24 81       	ldd	r18, Z+4	; 0x04
    76c4:	35 81       	ldd	r19, Z+5	; 0x05
    76c6:	42 17       	cp	r20, r18
    76c8:	53 07       	cpc	r21, r19
    76ca:	44 f4       	brge	.+16     	; 0x76dc <fputc+0x38>
    76cc:	a0 81       	ld	r26, Z
    76ce:	b1 81       	ldd	r27, Z+1	; 0x01
    76d0:	9d 01       	movw	r18, r26
    76d2:	2f 5f       	subi	r18, 0xFF	; 255
    76d4:	3f 4f       	sbci	r19, 0xFF	; 255
    76d6:	31 83       	std	Z+1, r19	; 0x01
    76d8:	20 83       	st	Z, r18
    76da:	8c 93       	st	X, r24
    76dc:	26 81       	ldd	r18, Z+6	; 0x06
    76de:	37 81       	ldd	r19, Z+7	; 0x07
    76e0:	2f 5f       	subi	r18, 0xFF	; 255
    76e2:	3f 4f       	sbci	r19, 0xFF	; 255
    76e4:	37 83       	std	Z+7, r19	; 0x07
    76e6:	26 83       	std	Z+6, r18	; 0x06
    76e8:	14 c0       	rjmp	.+40     	; 0x7712 <fputc+0x6e>
    76ea:	8b 01       	movw	r16, r22
    76ec:	ec 01       	movw	r28, r24
    76ee:	fb 01       	movw	r30, r22
    76f0:	00 84       	ldd	r0, Z+8	; 0x08
    76f2:	f1 85       	ldd	r31, Z+9	; 0x09
    76f4:	e0 2d       	mov	r30, r0
    76f6:	09 95       	icall
    76f8:	89 2b       	or	r24, r25
    76fa:	e1 f6       	brne	.-72     	; 0x76b4 <fputc+0x10>
    76fc:	d8 01       	movw	r26, r16
    76fe:	16 96       	adiw	r26, 0x06	; 6
    7700:	8d 91       	ld	r24, X+
    7702:	9c 91       	ld	r25, X
    7704:	17 97       	sbiw	r26, 0x07	; 7
    7706:	01 96       	adiw	r24, 0x01	; 1
    7708:	17 96       	adiw	r26, 0x07	; 7
    770a:	9c 93       	st	X, r25
    770c:	8e 93       	st	-X, r24
    770e:	16 97       	sbiw	r26, 0x06	; 6
    7710:	ce 01       	movw	r24, r28
    7712:	df 91       	pop	r29
    7714:	cf 91       	pop	r28
    7716:	1f 91       	pop	r17
    7718:	0f 91       	pop	r16
    771a:	08 95       	ret

0000771c <__ultoa_invert>:
    771c:	fa 01       	movw	r30, r20
    771e:	aa 27       	eor	r26, r26
    7720:	28 30       	cpi	r18, 0x08	; 8
    7722:	51 f1       	breq	.+84     	; 0x7778 <__ultoa_invert+0x5c>
    7724:	20 31       	cpi	r18, 0x10	; 16
    7726:	81 f1       	breq	.+96     	; 0x7788 <__ultoa_invert+0x6c>
    7728:	e8 94       	clt
    772a:	6f 93       	push	r22
    772c:	6e 7f       	andi	r22, 0xFE	; 254
    772e:	6e 5f       	subi	r22, 0xFE	; 254
    7730:	7f 4f       	sbci	r23, 0xFF	; 255
    7732:	8f 4f       	sbci	r24, 0xFF	; 255
    7734:	9f 4f       	sbci	r25, 0xFF	; 255
    7736:	af 4f       	sbci	r26, 0xFF	; 255
    7738:	b1 e0       	ldi	r27, 0x01	; 1
    773a:	3e d0       	rcall	.+124    	; 0x77b8 <__ultoa_invert+0x9c>
    773c:	b4 e0       	ldi	r27, 0x04	; 4
    773e:	3c d0       	rcall	.+120    	; 0x77b8 <__ultoa_invert+0x9c>
    7740:	67 0f       	add	r22, r23
    7742:	78 1f       	adc	r23, r24
    7744:	89 1f       	adc	r24, r25
    7746:	9a 1f       	adc	r25, r26
    7748:	a1 1d       	adc	r26, r1
    774a:	68 0f       	add	r22, r24
    774c:	79 1f       	adc	r23, r25
    774e:	8a 1f       	adc	r24, r26
    7750:	91 1d       	adc	r25, r1
    7752:	a1 1d       	adc	r26, r1
    7754:	6a 0f       	add	r22, r26
    7756:	71 1d       	adc	r23, r1
    7758:	81 1d       	adc	r24, r1
    775a:	91 1d       	adc	r25, r1
    775c:	a1 1d       	adc	r26, r1
    775e:	20 d0       	rcall	.+64     	; 0x77a0 <__ultoa_invert+0x84>
    7760:	09 f4       	brne	.+2      	; 0x7764 <__ultoa_invert+0x48>
    7762:	68 94       	set
    7764:	3f 91       	pop	r19
    7766:	2a e0       	ldi	r18, 0x0A	; 10
    7768:	26 9f       	mul	r18, r22
    776a:	11 24       	eor	r1, r1
    776c:	30 19       	sub	r19, r0
    776e:	30 5d       	subi	r19, 0xD0	; 208
    7770:	31 93       	st	Z+, r19
    7772:	de f6       	brtc	.-74     	; 0x772a <__ultoa_invert+0xe>
    7774:	cf 01       	movw	r24, r30
    7776:	08 95       	ret
    7778:	46 2f       	mov	r20, r22
    777a:	47 70       	andi	r20, 0x07	; 7
    777c:	40 5d       	subi	r20, 0xD0	; 208
    777e:	41 93       	st	Z+, r20
    7780:	b3 e0       	ldi	r27, 0x03	; 3
    7782:	0f d0       	rcall	.+30     	; 0x77a2 <__ultoa_invert+0x86>
    7784:	c9 f7       	brne	.-14     	; 0x7778 <__ultoa_invert+0x5c>
    7786:	f6 cf       	rjmp	.-20     	; 0x7774 <__ultoa_invert+0x58>
    7788:	46 2f       	mov	r20, r22
    778a:	4f 70       	andi	r20, 0x0F	; 15
    778c:	40 5d       	subi	r20, 0xD0	; 208
    778e:	4a 33       	cpi	r20, 0x3A	; 58
    7790:	18 f0       	brcs	.+6      	; 0x7798 <__ultoa_invert+0x7c>
    7792:	49 5d       	subi	r20, 0xD9	; 217
    7794:	31 fd       	sbrc	r19, 1
    7796:	40 52       	subi	r20, 0x20	; 32
    7798:	41 93       	st	Z+, r20
    779a:	02 d0       	rcall	.+4      	; 0x77a0 <__ultoa_invert+0x84>
    779c:	a9 f7       	brne	.-22     	; 0x7788 <__ultoa_invert+0x6c>
    779e:	ea cf       	rjmp	.-44     	; 0x7774 <__ultoa_invert+0x58>
    77a0:	b4 e0       	ldi	r27, 0x04	; 4
    77a2:	a6 95       	lsr	r26
    77a4:	97 95       	ror	r25
    77a6:	87 95       	ror	r24
    77a8:	77 95       	ror	r23
    77aa:	67 95       	ror	r22
    77ac:	ba 95       	dec	r27
    77ae:	c9 f7       	brne	.-14     	; 0x77a2 <__ultoa_invert+0x86>
    77b0:	00 97       	sbiw	r24, 0x00	; 0
    77b2:	61 05       	cpc	r22, r1
    77b4:	71 05       	cpc	r23, r1
    77b6:	08 95       	ret
    77b8:	9b 01       	movw	r18, r22
    77ba:	ac 01       	movw	r20, r24
    77bc:	0a 2e       	mov	r0, r26
    77be:	06 94       	lsr	r0
    77c0:	57 95       	ror	r21
    77c2:	47 95       	ror	r20
    77c4:	37 95       	ror	r19
    77c6:	27 95       	ror	r18
    77c8:	ba 95       	dec	r27
    77ca:	c9 f7       	brne	.-14     	; 0x77be <__ultoa_invert+0xa2>
    77cc:	62 0f       	add	r22, r18
    77ce:	73 1f       	adc	r23, r19
    77d0:	84 1f       	adc	r24, r20
    77d2:	95 1f       	adc	r25, r21
    77d4:	a0 1d       	adc	r26, r0
    77d6:	08 95       	ret

000077d8 <__prologue_saves__>:
    77d8:	2f 92       	push	r2
    77da:	3f 92       	push	r3
    77dc:	4f 92       	push	r4
    77de:	5f 92       	push	r5
    77e0:	6f 92       	push	r6
    77e2:	7f 92       	push	r7
    77e4:	8f 92       	push	r8
    77e6:	9f 92       	push	r9
    77e8:	af 92       	push	r10
    77ea:	bf 92       	push	r11
    77ec:	cf 92       	push	r12
    77ee:	df 92       	push	r13
    77f0:	ef 92       	push	r14
    77f2:	ff 92       	push	r15
    77f4:	0f 93       	push	r16
    77f6:	1f 93       	push	r17
    77f8:	cf 93       	push	r28
    77fa:	df 93       	push	r29
    77fc:	cd b7       	in	r28, 0x3d	; 61
    77fe:	de b7       	in	r29, 0x3e	; 62
    7800:	ca 1b       	sub	r28, r26
    7802:	db 0b       	sbc	r29, r27
    7804:	0f b6       	in	r0, 0x3f	; 63
    7806:	f8 94       	cli
    7808:	de bf       	out	0x3e, r29	; 62
    780a:	0f be       	out	0x3f, r0	; 63
    780c:	cd bf       	out	0x3d, r28	; 61
    780e:	09 94       	ijmp

00007810 <__epilogue_restores__>:
    7810:	2a 88       	ldd	r2, Y+18	; 0x12
    7812:	39 88       	ldd	r3, Y+17	; 0x11
    7814:	48 88       	ldd	r4, Y+16	; 0x10
    7816:	5f 84       	ldd	r5, Y+15	; 0x0f
    7818:	6e 84       	ldd	r6, Y+14	; 0x0e
    781a:	7d 84       	ldd	r7, Y+13	; 0x0d
    781c:	8c 84       	ldd	r8, Y+12	; 0x0c
    781e:	9b 84       	ldd	r9, Y+11	; 0x0b
    7820:	aa 84       	ldd	r10, Y+10	; 0x0a
    7822:	b9 84       	ldd	r11, Y+9	; 0x09
    7824:	c8 84       	ldd	r12, Y+8	; 0x08
    7826:	df 80       	ldd	r13, Y+7	; 0x07
    7828:	ee 80       	ldd	r14, Y+6	; 0x06
    782a:	fd 80       	ldd	r15, Y+5	; 0x05
    782c:	0c 81       	ldd	r16, Y+4	; 0x04
    782e:	1b 81       	ldd	r17, Y+3	; 0x03
    7830:	aa 81       	ldd	r26, Y+2	; 0x02
    7832:	b9 81       	ldd	r27, Y+1	; 0x01
    7834:	ce 0f       	add	r28, r30
    7836:	d1 1d       	adc	r29, r1
    7838:	0f b6       	in	r0, 0x3f	; 63
    783a:	f8 94       	cli
    783c:	de bf       	out	0x3e, r29	; 62
    783e:	0f be       	out	0x3f, r0	; 63
    7840:	cd bf       	out	0x3d, r28	; 61
    7842:	ed 01       	movw	r28, r26
    7844:	08 95       	ret

00007846 <_exit>:
    7846:	f8 94       	cli

00007848 <__stop_program>:
    7848:	ff cf       	rjmp	.-2      	; 0x7848 <__stop_program>
