
SMART_HOME_U1_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004600  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000065e  00800060  00004600  00004694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008006be  008006be  00004cf2  2**0
                  ALLOC
  3 .stab         0000d9ec  00000000  00000000  00004cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008bf1  00000000  00000000  000126e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0001b2d1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0001b2e4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0001b320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0001b806  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0001bca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0001bcc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_6>
      1c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_7>
      20:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_8>
      24:	0c 94 ca 04 	jmp	0x994	; 0x994 <__vector_9>
      28:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__vector_10>
      2c:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_11>
      30:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_12>
      34:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_13>
      38:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__vector_14>
      3c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_15>
      40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	66 06       	cpc	r6, r22
      56:	94 06       	cpc	r9, r20
      58:	66 06       	cpc	r6, r22
      5a:	94 06       	cpc	r9, r20
      5c:	94 06       	cpc	r9, r20
      5e:	94 06       	cpc	r9, r20
      60:	66 06       	cpc	r6, r22
      62:	94 06       	cpc	r9, r20
      64:	94 06       	cpc	r9, r20
      66:	7d 06       	cpc	r7, r29
      68:	66 06       	cpc	r6, r22
      6a:	7d 06       	cpc	r7, r29
      6c:	94 06       	cpc	r9, r20
      6e:	68 06       	cpc	r6, r24
      70:	66 06       	cpc	r6, r22
      72:	68 06       	cpc	r6, r24
      74:	10 13       	cpse	r17, r16
      76:	8e 12       	cpse	r8, r30
      78:	fb 12       	cpse	r15, r27
      7a:	8e 12       	cpse	r8, r30
      7c:	8e 12       	cpse	r8, r30
      7e:	8e 12       	cpse	r8, r30
      80:	20 12       	cpse	r2, r16
      82:	4d 12       	cpse	r4, r29
      84:	90 12       	cpse	r9, r16
      86:	bf 12       	cpse	r11, r31
      88:	f0 12       	cpse	r15, r16
      8a:	f5 12       	cpse	r15, r21
      8c:	f8 12       	cpse	r15, r24
      8e:	1e 12       	cpse	r1, r30
      90:	4a 17       	cp	r20, r26
      92:	5c 17       	cp	r21, r28
      94:	3d 17       	cp	r19, r29
      96:	5c 17       	cp	r21, r28
      98:	5c 17       	cp	r21, r28
      9a:	5c 17       	cp	r21, r28
      9c:	5d 16       	cp	r5, r29
      9e:	8a 16       	cp	r8, r26
      a0:	cc 16       	cp	r12, r28
      a2:	fb 16       	cp	r15, r27
      a4:	2c 17       	cp	r18, r28
      a6:	31 17       	cp	r19, r17
      a8:	5b 16       	cp	r5, r27
      aa:	66 1a       	sub	r6, r22
      ac:	89 1a       	sub	r8, r25
      ae:	a7 1a       	sub	r10, r23
      b0:	c5 1a       	sub	r12, r21
      b2:	ed 1a       	sub	r14, r29
      b4:	f0 1a       	sub	r15, r16
      b6:	1b 1b       	sub	r17, r27
      b8:	6e 1b       	sub	r22, r30
      ba:	91 1b       	sub	r25, r17
      bc:	af 1b       	sub	r26, r31
      be:	cd 1b       	sub	r28, r29
      c0:	f5 1b       	sub	r31, r21
      c2:	f8 1b       	sub	r31, r24
      c4:	fb 1b       	sub	r31, r27
      c6:	1d 1c       	adc	r1, r13

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf e5       	ldi	r28, 0x5F	; 95
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	16 e0       	ldi	r17, 0x06	; 6
      d6:	a0 e6       	ldi	r26, 0x60	; 96
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e0 e0       	ldi	r30, 0x00	; 0
      dc:	f6 e4       	ldi	r31, 0x46	; 70
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ae 3b       	cpi	r26, 0xBE	; 190
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	26 e0       	ldi	r18, 0x06	; 6
      ec:	ae eb       	ldi	r26, 0xBE	; 190
      ee:	b6 e0       	ldi	r27, 0x06	; 6
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a6 3e       	cpi	r26, 0xE6	; 230
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 ad 1c 	call	0x395a	; 0x395a <main>
      fe:	0c 94 fe 22 	jmp	0x45fc	; 0x45fc <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <Convert_IntToString>:
     106:	41 15       	cp	r20, r1
     108:	51 05       	cpc	r21, r1
     10a:	b1 f0       	breq	.+44     	; 0x138 <Convert_IntToString+0x32>
     10c:	9f 93       	push	r25
     10e:	8f 93       	push	r24
     110:	7f 93       	push	r23
     112:	6f 93       	push	r22
     114:	80 e1       	ldi	r24, 0x10	; 16
     116:	93 e0       	ldi	r25, 0x03	; 3
     118:	9f 93       	push	r25
     11a:	8f 93       	push	r24
     11c:	5f 93       	push	r21
     11e:	4f 93       	push	r20
     120:	0e 94 14 20 	call	0x4028	; 0x4028 <sprintf>
     124:	8d b7       	in	r24, 0x3d	; 61
     126:	9e b7       	in	r25, 0x3e	; 62
     128:	08 96       	adiw	r24, 0x08	; 8
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	f8 94       	cli
     12e:	9e bf       	out	0x3e, r25	; 62
     130:	0f be       	out	0x3f, r0	; 63
     132:	8d bf       	out	0x3d, r24	; 61
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	08 95       	ret
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	08 95       	ret

0000013c <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f64 Copy_f64Number, pu8 Address_str){
     13c:	8f 92       	push	r8
     13e:	9f 92       	push	r9
     140:	af 92       	push	r10
     142:	bf 92       	push	r11
     144:	cf 92       	push	r12
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <Convert_FloatToString+0x1a>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	6b 01       	movw	r12, r22
     15c:	7c 01       	movw	r14, r24
     15e:	8a 01       	movw	r16, r20

	//-5.99

	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
	u8 Loc_u8TempSign[2]="";
     160:	1a 82       	std	Y+2, r1	; 0x02
     162:	19 82       	std	Y+1, r1	; 0x01
	s32  Loc_s64IntPart;
	f32 Loc_f32FractionPart;
	s32  Loc_s64FractionPartAsInteger;


		if(NULL == Address_str){
     164:	45 2b       	or	r20, r21
     166:	09 f4       	brne	.+2      	; 0x16a <Convert_FloatToString+0x2e>
     168:	40 c0       	rjmp	.+128    	; 0x1ea <Convert_FloatToString+0xae>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
		}

		else{

			if(Copy_f64Number<0){
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	a9 01       	movw	r20, r18
     170:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__cmpsf2>
     174:	87 ff       	sbrs	r24, 7
     176:	06 c0       	rjmp	.+12     	; 0x184 <Convert_FloatToString+0x48>
				Copy_f64Number = -Copy_f64Number ;
     178:	f7 fa       	bst	r15, 7
     17a:	f0 94       	com	r15
     17c:	f7 f8       	bld	r15, 7
     17e:	f0 94       	com	r15
				Loc_u8TempSign[0] ='-';
     180:	8d e2       	ldi	r24, 0x2D	; 45
     182:	89 83       	std	Y+1, r24	; 0x01
			}


			Loc_s64IntPart = Copy_f64Number;                  // Get the integer (5).
     184:	c7 01       	movw	r24, r14
     186:	b6 01       	movw	r22, r12
     188:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__fixsfsi>
     18c:	b6 2e       	mov	r11, r22
     18e:	a7 2e       	mov	r10, r23
     190:	98 2e       	mov	r9, r24
     192:	89 2e       	mov	r8, r25
			Loc_f32FractionPart = Copy_f64Number - Loc_s64IntPart;      // Get fraction (.99).
			 Loc_s64FractionPartAsInteger = (Loc_f32FractionPart * 10000);  // Turn into integer (9900).

			// Print as parts, note that you need 0-padding for fractional bit.

			sprintf (Address_str, "%s%ld.%04d", Loc_u8TempSign, Loc_s64IntPart, Loc_s64FractionPartAsInteger);
     194:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__floatsisf>
     198:	9b 01       	movw	r18, r22
     19a:	ac 01       	movw	r20, r24
     19c:	c7 01       	movw	r24, r14
     19e:	b6 01       	movw	r22, r12
     1a0:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <__subsf3>
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e4       	ldi	r19, 0x40	; 64
     1a8:	4c e1       	ldi	r20, 0x1C	; 28
     1aa:	56 e4       	ldi	r21, 0x46	; 70
     1ac:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__mulsf3>
     1b0:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <__fixsfsi>
     1b4:	9f 93       	push	r25
     1b6:	8f 93       	push	r24
     1b8:	7f 93       	push	r23
     1ba:	6f 93       	push	r22
     1bc:	8f 92       	push	r8
     1be:	9f 92       	push	r9
     1c0:	af 92       	push	r10
     1c2:	bf 92       	push	r11
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	9f 93       	push	r25
     1ca:	8f 93       	push	r24
     1cc:	84 e1       	ldi	r24, 0x14	; 20
     1ce:	93 e0       	ldi	r25, 0x03	; 3
     1d0:	9f 93       	push	r25
     1d2:	8f 93       	push	r24
     1d4:	1f 93       	push	r17
     1d6:	0f 93       	push	r16
     1d8:	0e 94 14 20 	call	0x4028	; 0x4028 <sprintf>
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
}
Std_StatusType Convert_FloatToString (f64 Copy_f64Number, pu8 Address_str){

	//-5.99

	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <Convert_FloatToString+0xb0>
	f32 Loc_f32FractionPart;
	s32  Loc_s64FractionPartAsInteger;


		if(NULL == Address_str){
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     1ea:	81 e0       	ldi	r24, 0x01	; 1
		}

		return Loc_enuStatus;


}
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	bf 90       	pop	r11
     202:	af 90       	pop	r10
     204:	9f 90       	pop	r9
     206:	8f 90       	pop	r8
     208:	08 95       	ret

0000020a <Convert_StringTou8>:



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){
     20a:	6f 92       	push	r6
     20c:	7f 92       	push	r7
     20e:	8f 92       	push	r8
     210:	9f 92       	push	r9
     212:	af 92       	push	r10
     214:	bf 92       	push	r11
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
			u8 Loc_u8Counter = 0;
			u64 Loc_u64Result = 0;
			if(NULL == Address_str || NULL == Address_Number ){
     226:	61 15       	cp	r22, r1
     228:	71 05       	cpc	r23, r1
     22a:	b1 f1       	breq	.+108    	; 0x298 <Convert_StringTou8+0x8e>
     22c:	00 97       	sbiw	r24, 0x00	; 0
     22e:	a1 f1       	breq	.+104    	; 0x298 <Convert_StringTou8+0x8e>
     230:	4b 01       	movw	r8, r22
     232:	ec 01       	movw	r28, r24
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	71 2c       	mov	r7, r1
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     246:	f4 01       	movw	r30, r8
     248:	e7 0d       	add	r30, r7
     24a:	f1 1d       	adc	r31, r1
     24c:	60 80       	ld	r6, Z
     24e:	66 20       	and	r6, r6
     250:	01 f1       	breq	.+64     	; 0x292 <Convert_StringTou8+0x88>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     252:	ea e0       	ldi	r30, 0x0A	; 10
     254:	ae 2e       	mov	r10, r30
     256:	b1 2c       	mov	r11, r1
     258:	c1 2c       	mov	r12, r1
     25a:	d1 2c       	mov	r13, r1
     25c:	e1 2c       	mov	r14, r1
     25e:	f1 2c       	mov	r15, r1
     260:	00 e0       	ldi	r16, 0x00	; 0
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__muldi3>
     268:	59 01       	movw	r10, r18
     26a:	6a 01       	movw	r12, r20
     26c:	7b 01       	movw	r14, r22
     26e:	8c 01       	movw	r16, r24
     270:	46 2d       	mov	r20, r6
     272:	50 e0       	ldi	r21, 0x00	; 0
     274:	40 53       	subi	r20, 0x30	; 48
     276:	51 09       	sbc	r21, r1
     278:	95 2f       	mov	r25, r21
     27a:	99 0f       	add	r25, r25
     27c:	99 0b       	sbc	r25, r25
     27e:	9a 01       	movw	r18, r20
     280:	49 2f       	mov	r20, r25
     282:	59 2f       	mov	r21, r25
     284:	69 2f       	mov	r22, r25
     286:	79 2f       	mov	r23, r25
     288:	89 2f       	mov	r24, r25
     28a:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__adddi3>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     28e:	73 94       	inc	r7
     290:	da cf       	rjmp	.-76     	; 0x246 <Convert_StringTou8+0x3c>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     292:	28 83       	st	Y, r18



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	01 c0       	rjmp	.+2      	; 0x29a <Convert_StringTou8+0x90>
			u8 Loc_u8Counter = 0;
			u64 Loc_u64Result = 0;
			if(NULL == Address_str || NULL == Address_Number ){
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     298:	81 e0       	ldi	r24, 0x01	; 1
				*Address_Number = Loc_u64Result;
			}

			return Loc_enuStatus;

}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	ef 90       	pop	r14
     2a6:	df 90       	pop	r13
     2a8:	cf 90       	pop	r12
     2aa:	bf 90       	pop	r11
     2ac:	af 90       	pop	r10
     2ae:	9f 90       	pop	r9
     2b0:	8f 90       	pop	r8
     2b2:	7f 90       	pop	r7
     2b4:	6f 90       	pop	r6
     2b6:	08 95       	ret

000002b8 <Convert_StringTou16>:


Std_StatusType Convert_StringTou16 (u16* Address_Number, pu8 Address_str){
     2b8:	6f 92       	push	r6
     2ba:	7f 92       	push	r7
     2bc:	8f 92       	push	r8
     2be:	9f 92       	push	r9
     2c0:	af 92       	push	r10
     2c2:	bf 92       	push	r11
     2c4:	cf 92       	push	r12
     2c6:	df 92       	push	r13
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
			u8 Loc_u8Counter = 0;
			u64 Loc_u64Result = 0;
			if(NULL == Address_str || NULL == Address_Number ){
     2d4:	61 15       	cp	r22, r1
     2d6:	71 05       	cpc	r23, r1
     2d8:	c1 f1       	breq	.+112    	; 0x34a <Convert_StringTou16+0x92>
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	b1 f1       	breq	.+108    	; 0x34a <Convert_StringTou16+0x92>
     2de:	eb 01       	movw	r28, r22
     2e0:	4c 01       	movw	r8, r24
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	71 2c       	mov	r7, r1
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     2f4:	fe 01       	movw	r30, r28
     2f6:	e7 0d       	add	r30, r7
     2f8:	f1 1d       	adc	r31, r1
     2fa:	60 80       	ld	r6, Z
     2fc:	66 20       	and	r6, r6
     2fe:	01 f1       	breq	.+64     	; 0x340 <Convert_StringTou16+0x88>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     300:	ea e0       	ldi	r30, 0x0A	; 10
     302:	ae 2e       	mov	r10, r30
     304:	b1 2c       	mov	r11, r1
     306:	c1 2c       	mov	r12, r1
     308:	d1 2c       	mov	r13, r1
     30a:	e1 2c       	mov	r14, r1
     30c:	f1 2c       	mov	r15, r1
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__muldi3>
     316:	59 01       	movw	r10, r18
     318:	6a 01       	movw	r12, r20
     31a:	7b 01       	movw	r14, r22
     31c:	8c 01       	movw	r16, r24
     31e:	46 2d       	mov	r20, r6
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	40 53       	subi	r20, 0x30	; 48
     324:	51 09       	sbc	r21, r1
     326:	95 2f       	mov	r25, r21
     328:	99 0f       	add	r25, r25
     32a:	99 0b       	sbc	r25, r25
     32c:	9a 01       	movw	r18, r20
     32e:	49 2f       	mov	r20, r25
     330:	59 2f       	mov	r21, r25
     332:	69 2f       	mov	r22, r25
     334:	79 2f       	mov	r23, r25
     336:	89 2f       	mov	r24, r25
     338:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__adddi3>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     33c:	73 94       	inc	r7
     33e:	da cf       	rjmp	.-76     	; 0x2f4 <Convert_StringTou16+0x3c>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     340:	f4 01       	movw	r30, r8
     342:	20 83       	st	Z, r18
     344:	31 83       	std	Z+1, r19	; 0x01
}


Std_StatusType Convert_StringTou16 (u16* Address_Number, pu8 Address_str){

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	01 c0       	rjmp	.+2      	; 0x34c <Convert_StringTou16+0x94>
			u8 Loc_u8Counter = 0;
			u64 Loc_u64Result = 0;
			if(NULL == Address_str || NULL == Address_Number ){
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     34a:	81 e0       	ldi	r24, 0x01	; 1
				*Address_Number = Loc_u64Result;
			}

			return Loc_enuStatus;

}
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	af 90       	pop	r10
     360:	9f 90       	pop	r9
     362:	8f 90       	pop	r8
     364:	7f 90       	pop	r7
     366:	6f 90       	pop	r6
     368:	08 95       	ret

0000036a <Convert_StringTou32>:


Std_StatusType Convert_StringTou32 (u32* Address_Number, pu8 Address_str){
     36a:	6f 92       	push	r6
     36c:	7f 92       	push	r7
     36e:	8f 92       	push	r8
     370:	9f 92       	push	r9
     372:	af 92       	push	r10
     374:	bf 92       	push	r11
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
			u8 Loc_u8Counter = 0;
			u64 Loc_u64Result = 0;
			if(NULL == Address_str || NULL == Address_Number ){
     386:	61 15       	cp	r22, r1
     388:	71 05       	cpc	r23, r1
     38a:	d1 f1       	breq	.+116    	; 0x400 <__LOCK_REGION_LENGTH__>
     38c:	00 97       	sbiw	r24, 0x00	; 0
     38e:	c1 f1       	breq	.+112    	; 0x400 <__LOCK_REGION_LENGTH__>
     390:	eb 01       	movw	r28, r22
     392:	4c 01       	movw	r8, r24
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	71 2c       	mov	r7, r1
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     3a6:	fe 01       	movw	r30, r28
     3a8:	e7 0d       	add	r30, r7
     3aa:	f1 1d       	adc	r31, r1
     3ac:	60 80       	ld	r6, Z
     3ae:	66 20       	and	r6, r6
     3b0:	01 f1       	breq	.+64     	; 0x3f2 <Convert_StringTou32+0x88>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     3b2:	ea e0       	ldi	r30, 0x0A	; 10
     3b4:	ae 2e       	mov	r10, r30
     3b6:	b1 2c       	mov	r11, r1
     3b8:	c1 2c       	mov	r12, r1
     3ba:	d1 2c       	mov	r13, r1
     3bc:	e1 2c       	mov	r14, r1
     3be:	f1 2c       	mov	r15, r1
     3c0:	00 e0       	ldi	r16, 0x00	; 0
     3c2:	10 e0       	ldi	r17, 0x00	; 0
     3c4:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__muldi3>
     3c8:	59 01       	movw	r10, r18
     3ca:	6a 01       	movw	r12, r20
     3cc:	7b 01       	movw	r14, r22
     3ce:	8c 01       	movw	r16, r24
     3d0:	46 2d       	mov	r20, r6
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	40 53       	subi	r20, 0x30	; 48
     3d6:	51 09       	sbc	r21, r1
     3d8:	95 2f       	mov	r25, r21
     3da:	99 0f       	add	r25, r25
     3dc:	99 0b       	sbc	r25, r25
     3de:	9a 01       	movw	r18, r20
     3e0:	49 2f       	mov	r20, r25
     3e2:	59 2f       	mov	r21, r25
     3e4:	69 2f       	mov	r22, r25
     3e6:	79 2f       	mov	r23, r25
     3e8:	89 2f       	mov	r24, r25
     3ea:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__adddi3>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     3ee:	73 94       	inc	r7
     3f0:	da cf       	rjmp	.-76     	; 0x3a6 <Convert_StringTou32+0x3c>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     3f2:	f4 01       	movw	r30, r8
     3f4:	20 83       	st	Z, r18
     3f6:	31 83       	std	Z+1, r19	; 0x01
     3f8:	42 83       	std	Z+2, r20	; 0x02
     3fa:	53 83       	std	Z+3, r21	; 0x03
}


Std_StatusType Convert_StringTou32 (u32* Address_Number, pu8 Address_str){

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			u8 Loc_u8Counter = 0;
			u64 Loc_u64Result = 0;
			if(NULL == Address_str || NULL == Address_Number ){
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     400:	81 e0       	ldi	r24, 0x01	; 1
				*Address_Number = Loc_u64Result;
			}

			return Loc_enuStatus;

}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	bf 90       	pop	r11
     414:	af 90       	pop	r10
     416:	9f 90       	pop	r9
     418:	8f 90       	pop	r8
     41a:	7f 90       	pop	r7
     41c:	6f 90       	pop	r6
     41e:	08 95       	ret

00000420 <Convert_StringTou64>:


Std_StatusType Convert_StringTou64 (u64* Address_Number, pu8 Address_str){
     420:	6f 92       	push	r6
     422:	7f 92       	push	r7
     424:	8f 92       	push	r8
     426:	9f 92       	push	r9
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
			u8 Loc_u8Counter = 0;
			u64 Loc_u64Result = 0;
			if(NULL == Address_str || NULL == Address_Number ){
     43c:	61 15       	cp	r22, r1
     43e:	71 05       	cpc	r23, r1
     440:	e9 f1       	breq	.+122    	; 0x4bc <Convert_StringTou64+0x9c>
     442:	00 97       	sbiw	r24, 0x00	; 0
     444:	d9 f1       	breq	.+118    	; 0x4bc <Convert_StringTou64+0x9c>
     446:	4b 01       	movw	r8, r22
     448:	ec 01       	movw	r28, r24
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	71 2c       	mov	r7, r1
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     45c:	f4 01       	movw	r30, r8
     45e:	e7 0d       	add	r30, r7
     460:	f1 1d       	adc	r31, r1
     462:	60 80       	ld	r6, Z
     464:	66 20       	and	r6, r6
     466:	01 f1       	breq	.+64     	; 0x4a8 <Convert_StringTou64+0x88>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     468:	ea e0       	ldi	r30, 0x0A	; 10
     46a:	ae 2e       	mov	r10, r30
     46c:	b1 2c       	mov	r11, r1
     46e:	c1 2c       	mov	r12, r1
     470:	d1 2c       	mov	r13, r1
     472:	e1 2c       	mov	r14, r1
     474:	f1 2c       	mov	r15, r1
     476:	00 e0       	ldi	r16, 0x00	; 0
     478:	10 e0       	ldi	r17, 0x00	; 0
     47a:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__muldi3>
     47e:	59 01       	movw	r10, r18
     480:	6a 01       	movw	r12, r20
     482:	7b 01       	movw	r14, r22
     484:	8c 01       	movw	r16, r24
     486:	46 2d       	mov	r20, r6
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	40 53       	subi	r20, 0x30	; 48
     48c:	51 09       	sbc	r21, r1
     48e:	95 2f       	mov	r25, r21
     490:	99 0f       	add	r25, r25
     492:	99 0b       	sbc	r25, r25
     494:	9a 01       	movw	r18, r20
     496:	49 2f       	mov	r20, r25
     498:	59 2f       	mov	r21, r25
     49a:	69 2f       	mov	r22, r25
     49c:	79 2f       	mov	r23, r25
     49e:	89 2f       	mov	r24, r25
     4a0:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__adddi3>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     4a4:	73 94       	inc	r7
     4a6:	da cf       	rjmp	.-76     	; 0x45c <Convert_StringTou64+0x3c>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     4a8:	28 83       	st	Y, r18
     4aa:	39 83       	std	Y+1, r19	; 0x01
     4ac:	4a 83       	std	Y+2, r20	; 0x02
     4ae:	5b 83       	std	Y+3, r21	; 0x03
     4b0:	6c 83       	std	Y+4, r22	; 0x04
     4b2:	7d 83       	std	Y+5, r23	; 0x05
     4b4:	8e 83       	std	Y+6, r24	; 0x06
     4b6:	9f 83       	std	Y+7, r25	; 0x07
}


Std_StatusType Convert_StringTou64 (u64* Address_Number, pu8 Address_str){

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <Convert_StringTou64+0x9e>
			u8 Loc_u8Counter = 0;
			u64 Loc_u64Result = 0;
			if(NULL == Address_str || NULL == Address_Number ){
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
				*Address_Number = Loc_u64Result;
			}

			return Loc_enuStatus;

}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	df 90       	pop	r13
     4cc:	cf 90       	pop	r12
     4ce:	bf 90       	pop	r11
     4d0:	af 90       	pop	r10
     4d2:	9f 90       	pop	r9
     4d4:	8f 90       	pop	r8
     4d6:	7f 90       	pop	r7
     4d8:	6f 90       	pop	r6
     4da:	08 95       	ret

000004dc <Convert_BCDToInt>:


Std_StatusType Convert_BCDToInt(u8 Copy_u8BCDdata, u8* Address_Asnwer){
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
	u8 Loc_u8Counter = ONE_VALUE;
	if(NULL == Address_Asnwer){
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	61 f0       	breq	.+24     	; 0x4fa <Convert_BCDToInt+0x1e>
	}
	else{
		*Address_Asnwer = ZERO_VALUE;

			*Address_Asnwer = GET_HIGHEST_NIBBLE(Copy_u8BCDdata);
			(*Address_Asnwer) =(*Address_Asnwer)*10 + GET_LOWEST_NIBBLE(Copy_u8BCDdata);
     4e2:	98 2f       	mov	r25, r24
     4e4:	92 95       	swap	r25
     4e6:	9f 70       	andi	r25, 0x0F	; 15
     4e8:	8f 70       	andi	r24, 0x0F	; 15
     4ea:	2a e0       	ldi	r18, 0x0A	; 10
     4ec:	92 9f       	mul	r25, r18
     4ee:	80 0d       	add	r24, r0
     4f0:	11 24       	eor	r1, r1
     4f2:	fb 01       	movw	r30, r22
     4f4:	80 83       	st	Z, r24

}


Std_StatusType Convert_BCDToInt(u8 Copy_u8BCDdata, u8* Address_Asnwer){
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	08 95       	ret
	u8 Loc_u8Counter = ONE_VALUE;
	if(NULL == Address_Asnwer){
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     4fa:	81 e0       	ldi	r24, 0x01	; 1

	}

	return Loc_enuStatus;

}
     4fc:	08 95       	ret

000004fe <Convert_VoltToTempLm35>:

Std_StatusType Convert_VoltToTempLm35(f32 Copy_f32Volt, u16* Address_Result){
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
	if(NULL == Address_Result){
     502:	41 15       	cp	r20, r1
     504:	51 05       	cpc	r21, r1
     506:	69 f0       	breq	.+26     	; 0x522 <Convert_VoltToTempLm35+0x24>
     508:	ea 01       	movw	r28, r20
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		*Address_Result = Copy_f32Volt*100;
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	48 ec       	ldi	r20, 0xC8	; 200
     510:	52 e4       	ldi	r21, 0x42	; 66
     512:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__mulsf3>
     516:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fixunssfsi>
     51a:	79 83       	std	Y+1, r23	; 0x01
     51c:	68 83       	st	Y, r22
	return Loc_enuStatus;

}

Std_StatusType Convert_VoltToTempLm35(f32 Copy_f32Volt, u16* Address_Result){
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	01 c0       	rjmp	.+2      	; 0x524 <Convert_VoltToTempLm35+0x26>
	if(NULL == Address_Result){
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     522:	81 e0       	ldi	r24, 0x01	; 1
		*Address_Result = Copy_f32Volt*100;

	}

	return Loc_enuStatus;
}
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <Usart_enuInit>:




/********************************** Software Interfaces Declarations *******************/
Usart_StatusErrorType Usart_enuInit(const Usart_ConfigType* Address_Usart){
     52a:	fc 01       	movw	r30, r24

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
	u16 Loc_u16BuadRateEquation ;

	if(Address_Usart == NULL){
     52c:	89 2b       	or	r24, r25
     52e:	09 f4       	brne	.+2      	; 0x532 <Usart_enuInit+0x8>
     530:	4b c0       	rjmp	.+150    	; 0x5c8 <Usart_enuInit+0x9e>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
	}
	else{

		/* Enable Tx, RX */
		SET_BIT(UCSRB ,UCSRB_RX_EN_BIT );
     532:	54 9a       	sbi	0x0a, 4	; 10
		SET_BIT(UCSRB ,UCSRB_TX_EN_BIT );
     534:	53 9a       	sbi	0x0a, 3	; 10


		/* Select Data Size */
		Usart_SelectCharacterSize(Address_Usart->character_size);
     536:	80 b5       	in	r24, 0x20	; 32
     538:	80 68       	ori	r24, 0x80	; 128
     53a:	80 bd       	out	0x20, r24	; 32
     53c:	90 b5       	in	r25, 0x20	; 32
     53e:	80 81       	ld	r24, Z
     540:	88 0f       	add	r24, r24
     542:	86 70       	andi	r24, 0x06	; 6
     544:	99 7f       	andi	r25, 0xF9	; 249
     546:	89 2b       	or	r24, r25
     548:	80 bd       	out	0x20, r24	; 32
     54a:	8a b1       	in	r24, 0x0a	; 10
     54c:	90 81       	ld	r25, Z
     54e:	94 70       	andi	r25, 0x04	; 4
     550:	8b 7f       	andi	r24, 0xFB	; 251
     552:	89 2b       	or	r24, r25
     554:	8a b9       	out	0x0a, r24	; 10

		/* Select Parity Bit */
		Usart_SelectParityBitConfg(Address_Usart->parity_bits);
     556:	20 b5       	in	r18, 0x20	; 32
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	30 e1       	ldi	r19, 0x10	; 16
     55c:	93 9f       	mul	r25, r19
     55e:	c0 01       	movw	r24, r0
     560:	11 24       	eor	r1, r1
     562:	92 2f       	mov	r25, r18
     564:	9f 7c       	andi	r25, 0xCF	; 207
     566:	89 2b       	or	r24, r25
     568:	80 bd       	out	0x20, r24	; 32

		/* Select STOP Bit */
		Usart_SelectStopBitConfig(Address_Usart->stop_bits);
     56a:	20 b5       	in	r18, 0x20	; 32
     56c:	92 81       	ldd	r25, Z+2	; 0x02
     56e:	38 e0       	ldi	r19, 0x08	; 8
     570:	93 9f       	mul	r25, r19
     572:	c0 01       	movw	r24, r0
     574:	11 24       	eor	r1, r1
     576:	92 2f       	mov	r25, r18
     578:	97 7f       	andi	r25, 0xF7	; 247
     57a:	89 2b       	or	r24, r25
     57c:	80 bd       	out	0x20, r24	; 32

		/* Select Sync Mode */
		Usart_SelectStopBitConfig(Address_Usart->stop_bits);
     57e:	20 b5       	in	r18, 0x20	; 32
     580:	92 81       	ldd	r25, Z+2	; 0x02
     582:	38 e0       	ldi	r19, 0x08	; 8
     584:	93 9f       	mul	r25, r19
     586:	c0 01       	movw	r24, r0
     588:	11 24       	eor	r1, r1
     58a:	92 2f       	mov	r25, r18
     58c:	97 7f       	andi	r25, 0xF7	; 247
     58e:	89 2b       	or	r24, r25
     590:	80 bd       	out	0x20, r24	; 32


//		Usart_SelectUbbrhReg();
		switch(Address_Usart->sync_mode){
     592:	81 81       	ldd	r24, Z+1	; 0x01
     594:	81 11       	cpse	r24, r1
     596:	1a c0       	rjmp	.+52     	; 0x5cc <Usart_enuInit+0xa2>

			case USAR_SELECT_ASYNCHRONOUS_MODE:
				Loc_u16BuadRateEquation = (USART_F_CPU/16.0/Address_Usart->baude_rate)-1;
				ASSIGN_REG(UBRRL,(u8)Loc_u16BuadRateEquation);
     598:	64 81       	ldd	r22, Z+4	; 0x04
     59a:	75 81       	ldd	r23, Z+5	; 0x05
     59c:	86 81       	ldd	r24, Z+6	; 0x06
     59e:	97 81       	ldd	r25, Z+7	; 0x07
     5a0:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__floatunsisf>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	74 e2       	ldi	r23, 0x24	; 36
     5ac:	84 e7       	ldi	r24, 0x74	; 116
     5ae:	99 e4       	ldi	r25, 0x49	; 73
     5b0:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__divsf3>
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e8       	ldi	r20, 0x80	; 128
     5ba:	5f e3       	ldi	r21, 0x3F	; 63
     5bc:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <__subsf3>
     5c0:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fixunssfsi>
     5c4:	69 b9       	out	0x09, r22	; 9
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <Usart_enuInit+0xa2>

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
	u16 Loc_u16BuadRateEquation ;

	if(Address_Usart == NULL){
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	08 95       	ret


/********************************** Software Interfaces Declarations *******************/
Usart_StatusErrorType Usart_enuInit(const Usart_ConfigType* Address_Usart){

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     5cc:	81 e0       	ldi	r24, 0x01	; 1

		}

	}
		return Loc_enuUsartStatus;
}
     5ce:	08 95       	ret

000005d0 <Usart_enuTransmitCharBlocking>:

Usart_StatusErrorType Usart_enuTransmitCharBlocking(const Usart_ConfigType* Address_Usart, u16 Copy_u16Data){

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;

	if(Address_Usart == NULL){
     5d0:	89 2b       	or	r24, r25
     5d2:	29 f0       	breq	.+10     	; 0x5de <Usart_enuTransmitCharBlocking+0xe>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
	}
	else{

		while(Usart_IsRegisterDataEmpty() == ZERO_VALUE);
     5d4:	5d 9b       	sbis	0x0b, 5	; 11
     5d6:	fe cf       	rjmp	.-4      	; 0x5d4 <Usart_enuTransmitCharBlocking+0x4>

			UDR = (u8)Copy_u16Data;
     5d8:	6c b9       	out	0x0c, r22	; 12
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	08 95       	ret
Usart_StatusErrorType Usart_enuTransmitCharBlocking(const Usart_ConfigType* Address_Usart, u16 Copy_u16Data){

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;

	if(Address_Usart == NULL){
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     5de:	82 e0       	ldi	r24, 0x02	; 2
		while(Usart_IsRegisterDataEmpty() == ZERO_VALUE);

			UDR = (u8)Copy_u16Data;
	}
		return Loc_enuUsartStatus;
}
     5e0:	08 95       	ret

000005e2 <Usart_enuReceiveBlocking>:

Usart_StatusErrorType Usart_enuReceiveBlocking(const Usart_ConfigType* Address_Usart, u16* Address_Data){

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;

	if(Address_Usart == NULL || Address_Data == NULL){
     5e2:	89 2b       	or	r24, r25
     5e4:	61 f0       	breq	.+24     	; 0x5fe <Usart_enuReceiveBlocking+0x1c>
     5e6:	61 15       	cp	r22, r1
     5e8:	71 05       	cpc	r23, r1
     5ea:	49 f0       	breq	.+18     	; 0x5fe <Usart_enuReceiveBlocking+0x1c>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
	}
	else{

		while(Usart_IsRecevingDone() == ZERO_VALUE);
     5ec:	5f 9b       	sbis	0x0b, 7	; 11
     5ee:	fe cf       	rjmp	.-4      	; 0x5ec <Usart_enuReceiveBlocking+0xa>

		*Address_Data = UDR ;
     5f0:	8c b1       	in	r24, 0x0c	; 12
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	fb 01       	movw	r30, r22
     5f6:	91 83       	std	Z+1, r25	; 0x01
     5f8:	80 83       	st	Z, r24
		return Loc_enuUsartStatus;
}

Usart_StatusErrorType Usart_enuReceiveBlocking(const Usart_ConfigType* Address_Usart, u16* Address_Data){

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	08 95       	ret

	if(Address_Usart == NULL || Address_Data == NULL){
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
		while(Usart_IsRecevingDone() == ZERO_VALUE);

		*Address_Data = UDR ;
	}
		return Loc_enuUsartStatus;
}
     600:	08 95       	ret

00000602 <Usart_enuTransmitStringBlocking>:


Usart_StatusErrorType Usart_enuTransmitStringBlocking(const Usart_ConfigType* Address_Usart, u8* Address_Data){
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
	u8 Loc_u8Counter = ZERO_VALUE;

	if(Address_Usart == NULL || Address_Data == NULL){
     60c:	00 97       	sbiw	r24, 0x00	; 0
     60e:	a1 f0       	breq	.+40     	; 0x638 <Usart_enuTransmitStringBlocking+0x36>
     610:	61 15       	cp	r22, r1
     612:	71 05       	cpc	r23, r1
     614:	89 f0       	breq	.+34     	; 0x638 <Usart_enuTransmitStringBlocking+0x36>
     616:	eb 01       	movw	r28, r22
     618:	7c 01       	movw	r14, r24
     61a:	10 e0       	ldi	r17, 0x00	; 0
     61c:	81 e0       	ldi	r24, 0x01	; 1
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		while(Address_Data[Loc_u8Counter] ){
     61e:	fe 01       	movw	r30, r28
     620:	e1 0f       	add	r30, r17
     622:	f1 1d       	adc	r31, r1
     624:	90 81       	ld	r25, Z
     626:	99 23       	and	r25, r25
     628:	41 f0       	breq	.+16     	; 0x63a <Usart_enuTransmitStringBlocking+0x38>
			Loc_enuUsartStatus = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_u8Counter++]);
     62a:	1f 5f       	subi	r17, 0xFF	; 255
     62c:	69 2f       	mov	r22, r25
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	c7 01       	movw	r24, r14
     632:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
     636:	f3 cf       	rjmp	.-26     	; 0x61e <Usart_enuTransmitStringBlocking+0x1c>

	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
	u8 Loc_u8Counter = ZERO_VALUE;

	if(Address_Usart == NULL || Address_Data == NULL){
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     638:	82 e0       	ldi	r24, 0x02	; 2
		while(Address_Data[Loc_u8Counter] ){
			Loc_enuUsartStatus = Usart_enuTransmitCharBlocking(Address_Usart,Address_Data[Loc_u8Counter++]);
		}
	}
		return Loc_enuUsartStatus;
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	08 95       	ret

00000646 <Usart_enuEnableRxInterrupt>:


Usart_StatusErrorType Usart_enuEnableRxInterrupt(void){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;

	Usart_EnableRxInterrupt();
     646:	57 9a       	sbi	0x0a, 7	; 10

	return Loc_enuUsartStatus;
}
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	08 95       	ret

0000064c <Usart_enuDisableRxInterrupt>:
Usart_StatusErrorType Usart_enuDisableRxInterrupt(void){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
	Usart_DisableRxInterrupt();
     64c:	57 98       	cbi	0x0a, 7	; 10

	return Loc_enuUsartStatus;
}
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	08 95       	ret

00000652 <Usart_enuSetCallbackRxFunction>:

Usart_StatusErrorType Usart_enuSetCallbackRxFunction(void (*callback)(u16 Copy_u16Result)){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
	if(NULL == callback){
     652:	00 97       	sbiw	r24, 0x00	; 0
     654:	31 f0       	breq	.+12     	; 0x662 <Usart_enuSetCallbackRxFunction+0x10>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
		}
		else{

			Usart_RxInterruptHandler = callback;
     656:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <Usart_RxInterruptHandler+0x1>
     65a:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <Usart_RxInterruptHandler>

	return Loc_enuUsartStatus;
}

Usart_StatusErrorType Usart_enuSetCallbackRxFunction(void (*callback)(u16 Copy_u16Result)){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	08 95       	ret
	if(NULL == callback){
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     662:	82 e0       	ldi	r24, 0x02	; 2
		else{

			Usart_RxInterruptHandler = callback;
		}
	return Loc_enuUsartStatus;
}
     664:	08 95       	ret

00000666 <Usart_enuEnableTxInterrupt>:


Usart_StatusErrorType Usart_enuEnableTxInterrupt(void){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
	Usart_EnableTxInterrupt();
     666:	56 9a       	sbi	0x0a, 6	; 10
	return Loc_enuUsartStatus;
}
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	08 95       	ret

0000066c <Usart_enuDisableTxInterrupt>:
Usart_StatusErrorType Usart_enuDisableTxInterrupt(void){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;

	Usart_DisableTxInterrupt();
     66c:	56 98       	cbi	0x0a, 6	; 10

	return Loc_enuUsartStatus;
}
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	08 95       	ret

00000672 <Usart_enuSetCallbackTxFunction>:
Usart_StatusErrorType Usart_enuSetCallbackTxFunction(void (*callback)(void)){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
	if(NULL == callback){
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	31 f0       	breq	.+12     	; 0x682 <Usart_enuSetCallbackTxFunction+0x10>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
		}
		else{

			Usart_TxInterruptHandler = callback;
     676:	90 93 c1 06 	sts	0x06C1, r25	; 0x8006c1 <Usart_TxInterruptHandler+0x1>
     67a:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <Usart_TxInterruptHandler>
	Usart_DisableTxInterrupt();

	return Loc_enuUsartStatus;
}
Usart_StatusErrorType Usart_enuSetCallbackTxFunction(void (*callback)(void)){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	08 95       	ret
	if(NULL == callback){
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     682:	82 e0       	ldi	r24, 0x02	; 2
		else{

			Usart_TxInterruptHandler = callback;
		}
	return Loc_enuUsartStatus;
}
     684:	08 95       	ret

00000686 <Usart_enuEnableDataRegEmptyInterrupt>:


Usart_StatusErrorType Usart_enuEnableDataRegEmptyInterrupt(void){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;

	Usart_EnableDataRegEmpyInterrupt();
     686:	55 9a       	sbi	0x0a, 5	; 10
	return Loc_enuUsartStatus;
}
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	08 95       	ret

0000068c <Usart_enuDisableDataRegEmptyInterrupt>:
Usart_StatusErrorType Usart_enuDisableDataRegEmptyInterrupt(void){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;

	Usart_DisableDataRegEmpyInterrupt();
     68c:	55 98       	cbi	0x0a, 5	; 10
	return Loc_enuUsartStatus;
}
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	08 95       	ret

00000692 <Usart_enuSetCallbackDataRegEmptyFunction>:



Usart_StatusErrorType Usart_enuSetCallbackDataRegEmptyFunction(void (*callback)(void)){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
	if(NULL == callback){
     692:	00 97       	sbiw	r24, 0x00	; 0
     694:	31 f0       	breq	.+12     	; 0x6a2 <Usart_enuSetCallbackDataRegEmptyFunction+0x10>
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
		}
		else{

			Usart_DataRegEmptyInterruptHandler = callback;
     696:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <__data_end+0x1>
     69a:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <__data_end>
}



Usart_StatusErrorType Usart_enuSetCallbackDataRegEmptyFunction(void (*callback)(void)){
	Usart_StatusErrorType Loc_enuUsartStatus = USART_STATUS_OK;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	08 95       	ret
	if(NULL == callback){
		Loc_enuUsartStatus = USART_STATUS_NULL_POINTER_ADDRESS;
     6a2:	82 e0       	ldi	r24, 0x02	; 2
		else{

			Usart_DataRegEmptyInterruptHandler = callback;
		}
	return Loc_enuUsartStatus;
}
     6a4:	08 95       	ret

000006a6 <__vector_15>:


// ISR function For Tx Complete
void __vector_15(void) __attribute__((signal));

void __vector_15(void){
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	2f 93       	push	r18
     6b2:	3f 93       	push	r19
     6b4:	4f 93       	push	r20
     6b6:	5f 93       	push	r21
     6b8:	6f 93       	push	r22
     6ba:	7f 93       	push	r23
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
     6c0:	af 93       	push	r26
     6c2:	bf 93       	push	r27
     6c4:	ef 93       	push	r30
     6c6:	ff 93       	push	r31

    if(NULL !=Usart_TxInterruptHandler ){
     6c8:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <Usart_TxInterruptHandler>
     6cc:	f0 91 c1 06 	lds	r31, 0x06C1	; 0x8006c1 <Usart_TxInterruptHandler+0x1>
     6d0:	30 97       	sbiw	r30, 0x00	; 0
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__vector_15+0x30>

    	Usart_TxInterruptHandler();
     6d4:	09 95       	icall

    }
    else {/*  error in declaration */   }

}
     6d6:	ff 91       	pop	r31
     6d8:	ef 91       	pop	r30
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <__vector_13>:


// ISR function For Rx Complete
void __vector_13(void) __attribute__((signal));

void __vector_13(void){
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	2f 93       	push	r18
     704:	3f 93       	push	r19
     706:	4f 93       	push	r20
     708:	5f 93       	push	r21
     70a:	6f 93       	push	r22
     70c:	7f 93       	push	r23
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	af 93       	push	r26
     714:	bf 93       	push	r27
     716:	ef 93       	push	r30
     718:	ff 93       	push	r31

	u16 Loc_u16Result = UDR;
     71a:	8c b1       	in	r24, 0x0c	; 12
     71c:	90 e0       	ldi	r25, 0x00	; 0
    if(NULL !=Usart_RxInterruptHandler ){
     71e:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <Usart_RxInterruptHandler>
     722:	f0 91 c3 06 	lds	r31, 0x06C3	; 0x8006c3 <Usart_RxInterruptHandler+0x1>
     726:	30 97       	sbiw	r30, 0x00	; 0
     728:	09 f0       	breq	.+2      	; 0x72c <__vector_13+0x34>

    	Usart_RxInterruptHandler(Loc_u16Result);
     72a:	09 95       	icall

    }
    else {/*  error in declaration */   }

}
     72c:	ff 91       	pop	r31
     72e:	ef 91       	pop	r30
     730:	bf 91       	pop	r27
     732:	af 91       	pop	r26
     734:	9f 91       	pop	r25
     736:	8f 91       	pop	r24
     738:	7f 91       	pop	r23
     73a:	6f 91       	pop	r22
     73c:	5f 91       	pop	r21
     73e:	4f 91       	pop	r20
     740:	3f 91       	pop	r19
     742:	2f 91       	pop	r18
     744:	0f 90       	pop	r0
     746:	0f be       	out	0x3f, r0	; 63
     748:	0f 90       	pop	r0
     74a:	1f 90       	pop	r1
     74c:	18 95       	reti

0000074e <__vector_14>:


// ISR function For Data Empty Register
void __vector_14(void) __attribute__((signal));

void __vector_14(void){
     74e:	1f 92       	push	r1
     750:	0f 92       	push	r0
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	0f 92       	push	r0
     756:	11 24       	eor	r1, r1
     758:	2f 93       	push	r18
     75a:	3f 93       	push	r19
     75c:	4f 93       	push	r20
     75e:	5f 93       	push	r21
     760:	6f 93       	push	r22
     762:	7f 93       	push	r23
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	af 93       	push	r26
     76a:	bf 93       	push	r27
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31

    if(NULL !=Usart_DataRegEmptyInterruptHandler ){
     770:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <__data_end>
     774:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <__data_end+0x1>
     778:	30 97       	sbiw	r30, 0x00	; 0
     77a:	09 f0       	breq	.+2      	; 0x77e <__vector_14+0x30>

    	Usart_DataRegEmptyInterruptHandler();
     77c:	09 95       	icall

    }
    else {/*  error in declaration */   }

}
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	bf 91       	pop	r27
     784:	af 91       	pop	r26
     786:	9f 91       	pop	r25
     788:	8f 91       	pop	r24
     78a:	7f 91       	pop	r23
     78c:	6f 91       	pop	r22
     78e:	5f 91       	pop	r21
     790:	4f 91       	pop	r20
     792:	3f 91       	pop	r19
     794:	2f 91       	pop	r18
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti

000007a0 <Timer1_DeInit>:
}

Timer1_StatusErrorType Timer1_DeInit(const Timer1_ConfigType* Address_Timer1){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

			    if(NULL == Address_Timer1){
     7a0:	89 2b       	or	r24, r25
     7a2:	29 f0       	breq	.+10     	; 0x7ae <Timer1_DeInit+0xe>
			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
			    }
			    else{

			    	/* Disable Timer1 Peripheral */
			    	        Timer1_Disable();
     7a4:	8e b5       	in	r24, 0x2e	; 46
     7a6:	88 7f       	andi	r24, 0xF8	; 248
     7a8:	8e bd       	out	0x2e, r24	; 46

			    return Loc_enuTimer1Status;
}

Timer1_StatusErrorType Timer1_DeInit(const Timer1_ConfigType* Address_Timer1){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	08 95       	ret

			    if(NULL == Address_Timer1){

			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     7ae:	82 e0       	ldi	r24, 0x02	; 2
			    	/* Disable Timer1 Peripheral */
			    	        Timer1_Disable();
			    }

			    return Loc_enuTimer1Status;
}
     7b0:	08 95       	ret

000007b2 <Timer1_enuEnableInterruptOverflow>:

Timer1_StatusErrorType Timer1_enuEnableInterruptOverflow(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	Timer1_EnableOverviewInterrupt();
     7b2:	89 b7       	in	r24, 0x39	; 57
     7b4:	84 60       	ori	r24, 0x04	; 4
     7b6:	89 bf       	out	0x39, r24	; 57

	return Loc_enuTimer1Status;
}
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	08 95       	ret

000007bc <Timer1_enuDisableInterruptOverflow>:

Timer1_StatusErrorType Timer1_enuDisableInterruptOverflow(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

	Timer1_DisableOverviewInterrupt();
     7bc:	89 b7       	in	r24, 0x39	; 57
     7be:	8b 7f       	andi	r24, 0xFB	; 251
     7c0:	89 bf       	out	0x39, r24	; 57
	return Loc_enuTimer1Status;
}
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	08 95       	ret

000007c6 <Timer1_enuEnableInterruptCompareChannelA>:

Timer1_StatusErrorType Timer1_enuEnableInterruptCompareChannelA(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	Timer1_EnableChannelA_ComparePwmInterrupt();
     7c6:	89 b7       	in	r24, 0x39	; 57
     7c8:	88 60       	ori	r24, 0x08	; 8
     7ca:	89 bf       	out	0x39, r24	; 57

	return Loc_enuTimer1Status;
}
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	08 95       	ret

000007d0 <Timer1_enuDisableInterruptCompareChannelA>:
Timer1_StatusErrorType Timer1_enuDisableInterruptCompareChannelA(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	Timer1_DisbleChannelA_ComparePwmInterrupt();
     7d0:	89 b7       	in	r24, 0x39	; 57
     7d2:	87 7f       	andi	r24, 0xF7	; 247
     7d4:	89 bf       	out	0x39, r24	; 57

	return Loc_enuTimer1Status;
}
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	08 95       	ret

000007da <Timer1_enuEnableInterruptCompareChannelB>:

Timer1_StatusErrorType Timer1_enuEnableInterruptCompareChannelB(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

	Timer1_EnableChannelB_ComparePwmInterrupt();
     7da:	89 b7       	in	r24, 0x39	; 57
     7dc:	80 61       	ori	r24, 0x10	; 16
     7de:	89 bf       	out	0x39, r24	; 57

	return Loc_enuTimer1Status;
}
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 95       	ret

000007e4 <Timer1_enuDisableInterruptCompareChannelB>:
Timer1_StatusErrorType Timer1_enuDisableInterruptCompareChannelB(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	Timer1_DisbleChannelB_ComparePwmInterrupt();
     7e4:	89 b7       	in	r24, 0x39	; 57
     7e6:	8f 7e       	andi	r24, 0xEF	; 239
     7e8:	89 bf       	out	0x39, r24	; 57

	return Loc_enuTimer1Status;
}
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	08 95       	ret

000007ee <Timer1_enuEnableInterruptIcu>:


Timer1_StatusErrorType Timer1_enuEnableInterruptIcu(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	Timer1_EnableIcuInterrupt();
     7ee:	89 b7       	in	r24, 0x39	; 57
     7f0:	80 62       	ori	r24, 0x20	; 32
     7f2:	89 bf       	out	0x39, r24	; 57

	return Loc_enuTimer1Status;
}
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	08 95       	ret

000007f8 <Timer1_enuDisableInterruptIcu>:
Timer1_StatusErrorType Timer1_enuDisableInterruptIcu(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	Timer1_DisableIcuInterrupt();
     7f8:	89 b7       	in	r24, 0x39	; 57
     7fa:	8f 7d       	andi	r24, 0xDF	; 223
     7fc:	89 bf       	out	0x39, r24	; 57

	return Loc_enuTimer1Status;
}
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	08 95       	ret

00000802 <Timer1_enuSetCallbackFunctionOverflow>:

Timer1_StatusErrorType Timer1_enuSetCallbackFunctionOverflow(void (*callback)(void)){

		Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

		if(NULL == callback){
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	31 f0       	breq	.+12     	; 0x812 <Timer1_enuSetCallbackFunctionOverflow+0x10>

			Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
		}
		else{
			Timer1_OverflowInterruptHandler = callback;
     806:	90 93 cd 06 	sts	0x06CD, r25	; 0x8006cd <Timer1_OverflowInterruptHandler+0x1>
     80a:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <Timer1_OverflowInterruptHandler>



Timer1_StatusErrorType Timer1_enuSetCallbackFunctionOverflow(void (*callback)(void)){

		Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	08 95       	ret

		if(NULL == callback){

			Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     812:	82 e0       	ldi	r24, 0x02	; 2
		else{
			Timer1_OverflowInterruptHandler = callback;
		}

		return Loc_enuTimer1Status;
}
     814:	08 95       	ret

00000816 <Timer1_enuSetCallbackFunctionCompareChannelA>:
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelA(void (*callback)(void)){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

			if(NULL == callback){
     816:	00 97       	sbiw	r24, 0x00	; 0
     818:	31 f0       	breq	.+12     	; 0x826 <Timer1_enuSetCallbackFunctionCompareChannelA+0x10>

				Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
			}
			else{
				Timer1_CompareChannelAInterruptHandler = callback;
     81a:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <Timer1_CompareChannelAInterruptHandler+0x1>
     81e:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <Timer1_CompareChannelAInterruptHandler>

		return Loc_enuTimer1Status;
}
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelA(void (*callback)(void)){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	08 95       	ret

			if(NULL == callback){

				Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     826:	82 e0       	ldi	r24, 0x02	; 2
			else{
				Timer1_CompareChannelAInterruptHandler = callback;
			}

			return Loc_enuTimer1Status;
}
     828:	08 95       	ret

0000082a <Timer1_enuSetCallbackFunctionCompareChannelB>:
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelB(void (*callback)(void)){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

				if(NULL == callback){
     82a:	00 97       	sbiw	r24, 0x00	; 0
     82c:	31 f0       	breq	.+12     	; 0x83a <Timer1_enuSetCallbackFunctionCompareChannelB+0x10>

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
				}
				else{
					Timer1_CompareChannelBInterruptHandler = callback;
     82e:	90 93 c9 06 	sts	0x06C9, r25	; 0x8006c9 <Timer1_CompareChannelBInterruptHandler+0x1>
     832:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <Timer1_CompareChannelBInterruptHandler>

			return Loc_enuTimer1Status;
}
Timer1_StatusErrorType Timer1_enuSetCallbackFunctionCompareChannelB(void (*callback)(void)){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret

				if(NULL == callback){

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     83a:	82 e0       	ldi	r24, 0x02	; 2
				else{
					Timer1_CompareChannelBInterruptHandler = callback;
				}

				return Loc_enuTimer1Status;
}
     83c:	08 95       	ret

0000083e <Timer1_enuSetCallbackFunctionIcu>:

Timer1_StatusErrorType Timer1_enuSetCallbackFunctionIcu(void (*callback)(void)){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

				if(NULL == callback){
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	31 f0       	breq	.+12     	; 0x84e <Timer1_enuSetCallbackFunctionIcu+0x10>

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
				}
				else{
					Timer1_IcuInterruptHandler = callback;
     842:	90 93 c7 06 	sts	0x06C7, r25	; 0x8006c7 <Timer1_IcuInterruptHandler+0x1>
     846:	80 93 c6 06 	sts	0x06C6, r24	; 0x8006c6 <Timer1_IcuInterruptHandler>

				return Loc_enuTimer1Status;
}

Timer1_StatusErrorType Timer1_enuSetCallbackFunctionIcu(void (*callback)(void)){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	08 95       	ret

				if(NULL == callback){

					Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     84e:	82 e0       	ldi	r24, 0x02	; 2
				else{
					Timer1_IcuInterruptHandler = callback;
				}

				return Loc_enuTimer1Status;
}
     850:	08 95       	ret

00000852 <Timer1_enuSetValueNormalCounter>:


Timer1_StatusErrorType Timer1_enuSetValueNormalCounter(u16 Copy_u16Value){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	ASSIGN_REG(TCNT1H,(Copy_u16Value>>8));
     852:	9d bd       	out	0x2d, r25	; 45
	ASSIGN_REG(TCNT1L,(Copy_u16Value &0x0F));
     854:	8f 70       	andi	r24, 0x0F	; 15
     856:	8c bd       	out	0x2c, r24	; 44

		return Loc_enuTimer1Status;
}
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	08 95       	ret

0000085c <Timer1_enuInit>:



/********************************** Software Interfaces Declarations *******************/

Timer1_StatusErrorType Timer1_enuInit(const Timer1_ConfigType* Address_Timer1){
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

			    if(NULL == Address_Timer1){
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	89 f1       	breq	.+98     	; 0x8c6 <__stack+0x67>
     864:	ec 01       	movw	r28, r24
			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
			    }
			    else{

			    	/* Disable Timer1 Peripheral */
			    	        Timer1_Disable();
     866:	8e b5       	in	r24, 0x2e	; 46
     868:	88 7f       	andi	r24, 0xF8	; 248
     86a:	8e bd       	out	0x2e, r24	; 46

			    	        /* Select Mode timer */
			    	        Timer1_SelectMode((Address_Timer1->select_mode));
     86c:	8f b5       	in	r24, 0x2f	; 47
     86e:	8c 7f       	andi	r24, 0xFC	; 252
     870:	99 81       	ldd	r25, Y+1	; 0x01
     872:	89 2b       	or	r24, r25
     874:	8f bd       	out	0x2f, r24	; 47
     876:	8e b5       	in	r24, 0x2e	; 46
     878:	99 81       	ldd	r25, Y+1	; 0x01
     87a:	99 0f       	add	r25, r25
     87c:	87 7e       	andi	r24, 0xE7	; 231
     87e:	89 2b       	or	r24, r25
     880:	8e bd       	out	0x2e, r24	; 46

			    	        /* Select Mode timer ChannelA*/
			    	        Timer1_SelectOutputModeChannelA(Address_Timer1->select_output_mode_channelA);
     882:	2f b5       	in	r18, 0x2f	; 47
     884:	9a 81       	ldd	r25, Y+2	; 0x02
     886:	30 e4       	ldi	r19, 0x40	; 64
     888:	93 9f       	mul	r25, r19
     88a:	c0 01       	movw	r24, r0
     88c:	11 24       	eor	r1, r1
     88e:	92 2f       	mov	r25, r18
     890:	9f 73       	andi	r25, 0x3F	; 63
     892:	89 2b       	or	r24, r25
     894:	8f bd       	out	0x2f, r24	; 47

			    	        /* Select Mode timer Channel B*/
			    	        Timer1_SelectOutputModeChannelB((Address_Timer1->select_output_mode_channelB));
     896:	2f b5       	in	r18, 0x2f	; 47
     898:	9b 81       	ldd	r25, Y+3	; 0x03
     89a:	30 e1       	ldi	r19, 0x10	; 16
     89c:	93 9f       	mul	r25, r19
     89e:	c0 01       	movw	r24, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	92 2f       	mov	r25, r18
     8a4:	9f 7c       	andi	r25, 0xCF	; 207
     8a6:	89 2b       	or	r24, r25
     8a8:	8f bd       	out	0x2f, r24	; 47

			    	        Timer1_StaticU16InitValue = Address_Timer1->init_counter_value;
     8aa:	8c 81       	ldd	r24, Y+4	; 0x04
     8ac:	9d 81       	ldd	r25, Y+5	; 0x05
     8ae:	90 93 c5 06 	sts	0x06C5, r25	; 0x8006c5 <Timer1_StaticU16InitValue+0x1>
     8b2:	80 93 c4 06 	sts	0x06C4, r24	; 0x8006c4 <Timer1_StaticU16InitValue>

			    	        /* Update Init Value*/
			    	        Loc_enuTimer1Status= Timer1_enuSetValueNormalCounter(Address_Timer1->init_counter_value);
     8b6:	0e 94 29 04 	call	0x852	; 0x852 <Timer1_enuSetValueNormalCounter>

			    	        /* Enable Timer1 Peripheral */
			    	        Timer1_Enable(Address_Timer1->prescaler_value);
     8ba:	9e b5       	in	r25, 0x2e	; 46
     8bc:	98 7f       	andi	r25, 0xF8	; 248
     8be:	28 81       	ld	r18, Y
     8c0:	92 2b       	or	r25, r18
     8c2:	9e bd       	out	0x2e, r25	; 46
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <__stack+0x69>
Timer1_StatusErrorType Timer1_enuInit(const Timer1_ConfigType* Address_Timer1){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

			    if(NULL == Address_Timer1){

			    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     8c6:	82 e0       	ldi	r24, 0x02	; 2
			    	        Timer1_Enable(Address_Timer1->prescaler_value);

			    }

			    return Loc_enuTimer1Status;
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <Timer1_enuSetValueCompareChannelA>:
		return Loc_enuTimer1Status;
}
Timer1_StatusErrorType Timer1_enuSetValueCompareChannelA(u16 Copy_u16Value){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	ASSIGN_REG(OCR1AH,(Copy_u16Value>>8));
     8ce:	9b bd       	out	0x2b, r25	; 43
	ASSIGN_REG(OCR1AL,(Copy_u16Value &0x0F));
     8d0:	8f 70       	andi	r24, 0x0F	; 15
     8d2:	8a bd       	out	0x2a, r24	; 42

	return Loc_enuTimer1Status;
}
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	08 95       	ret

000008d8 <Timer1_enuSetValueCompareChannelB>:
Timer1_StatusErrorType Timer1_enuSetValueCompareChannelB(u16 Copy_u16Value){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

	ASSIGN_REG(OCR1B, Copy_u16Value);
     8d8:	99 bd       	out	0x29, r25	; 41
     8da:	88 bd       	out	0x28, r24	; 40
	return Loc_enuTimer1Status;
}
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	08 95       	ret

000008e0 <Timer1_enuSetValueIcu>:
Timer1_StatusErrorType Timer1_enuSetValueIcu(u16 Copy_u16Value){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

	ASSIGN_REG(ICR1, Copy_u16Value);
     8e0:	97 bd       	out	0x27, r25	; 39
     8e2:	86 bd       	out	0x26, r24	; 38
	return Loc_enuTimer1Status;
}
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 95       	ret

000008e8 <Timer1_enuGetTimeElapsedNormalCounter>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedNormalCounter(u16* Address_Value){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

	if(NULL == Address_Value){
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	59 f0       	breq	.+22     	; 0x902 <Timer1_enuGetTimeElapsedNormalCounter+0x1a>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		*Address_Value=TCNT1L;
     8ec:	2c b5       	in	r18, 0x2c	; 44
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	31 83       	std	Z+1, r19	; 0x01
     8f4:	20 83       	st	Z, r18
		*Address_Value|=(TCNT1H<<EIGHT_VALUE);
     8f6:	4d b5       	in	r20, 0x2d	; 45
     8f8:	34 2b       	or	r19, r20
     8fa:	31 83       	std	Z+1, r19	; 0x01
     8fc:	20 83       	st	Z, r18
	return Loc_enuTimer1Status;
}

Timer1_StatusErrorType Timer1_enuGetTimeElapsedNormalCounter(u16* Address_Value){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 95       	ret

	if(NULL == Address_Value){

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     902:	82 e0       	ldi	r24, 0x02	; 2
		*Address_Value=TCNT1L;
		*Address_Value|=(TCNT1H<<EIGHT_VALUE);
	}

	return Loc_enuTimer1Status;
}
     904:	08 95       	ret

00000906 <Timer1_enuGetTimeElapsedCompareChannelA>:
Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelA(u16* Address_Value){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

	if(NULL == Address_Value){
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	59 f0       	breq	.+22     	; 0x920 <Timer1_enuGetTimeElapsedCompareChannelA+0x1a>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		*Address_Value=OCR1AL;
     90a:	2a b5       	in	r18, 0x2a	; 42
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	fc 01       	movw	r30, r24
     910:	31 83       	std	Z+1, r19	; 0x01
     912:	20 83       	st	Z, r18
		*Address_Value|=(OCR1AH<<EIGHT_VALUE);
     914:	4b b5       	in	r20, 0x2b	; 43
     916:	34 2b       	or	r19, r20
     918:	31 83       	std	Z+1, r19	; 0x01
     91a:	20 83       	st	Z, r18
	}

	return Loc_enuTimer1Status;
}
Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelA(u16* Address_Value){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	08 95       	ret

	if(NULL == Address_Value){

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     920:	82 e0       	ldi	r24, 0x02	; 2
		*Address_Value|=(OCR1AH<<EIGHT_VALUE);
	}

	return Loc_enuTimer1Status;

}
     922:	08 95       	ret

00000924 <Timer1_enuGetTimeElapsedCompareChannelB>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelB(u16* Address_Value){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

				    if(NULL == Address_Value){
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	59 f0       	breq	.+22     	; 0x93e <Timer1_enuGetTimeElapsedCompareChannelB+0x1a>

				    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
				    }
				    else{
						*Address_Value=OCR1BL;
     928:	28 b5       	in	r18, 0x28	; 40
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	fc 01       	movw	r30, r24
     92e:	31 83       	std	Z+1, r19	; 0x01
     930:	20 83       	st	Z, r18
						*Address_Value|=(OCR1BH<<EIGHT_VALUE);
     932:	49 b5       	in	r20, 0x29	; 41
     934:	34 2b       	or	r19, r20
     936:	31 83       	std	Z+1, r19	; 0x01
     938:	20 83       	st	Z, r18
	return Loc_enuTimer1Status;

}

Timer1_StatusErrorType Timer1_enuGetTimeElapsedCompareChannelB(u16* Address_Value){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	08 95       	ret

				    if(NULL == Address_Value){

				    	Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     93e:	82 e0       	ldi	r24, 0x02	; 2
						*Address_Value|=(OCR1BH<<EIGHT_VALUE);
				    }

				    return Loc_enuTimer1Status;

}
     940:	08 95       	ret

00000942 <Timer1_enuGetTimeElapsedIcu>:

Timer1_StatusErrorType Timer1_enuGetTimeElapsedIcu(u16* Address_Value){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;

	if(NULL == Address_Value){
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	59 f0       	breq	.+22     	; 0x95c <Timer1_enuGetTimeElapsedIcu+0x1a>

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		*Address_Value=ICR1L;
     946:	26 b5       	in	r18, 0x26	; 38
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	fc 01       	movw	r30, r24
     94c:	31 83       	std	Z+1, r19	; 0x01
     94e:	20 83       	st	Z, r18
		*Address_Value|=(ICR1H<<EIGHT_VALUE);
     950:	47 b5       	in	r20, 0x27	; 39
     952:	34 2b       	or	r19, r20
     954:	31 83       	std	Z+1, r19	; 0x01
     956:	20 83       	st	Z, r18
				    return Loc_enuTimer1Status;

}

Timer1_StatusErrorType Timer1_enuGetTimeElapsedIcu(u16* Address_Value){
	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	08 95       	ret

	if(NULL == Address_Value){

		Loc_enuTimer1Status = TIMER1_STATUS_NULL_POINTER_ADDRESS;
     95c:	82 e0       	ldi	r24, 0x02	; 2
		*Address_Value|=(ICR1H<<EIGHT_VALUE);
	}

	return Loc_enuTimer1Status;

}
     95e:	08 95       	ret

00000960 <Timer1_enuCtcForcePinImmediatlyChannelA>:


Timer1_StatusErrorType Timer1_enuCtcForcePinImmediatlyChannelA(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	SET_BIT(TCCR1A,TCCR1A_FOC1A_BIT);
     960:	8f b5       	in	r24, 0x2f	; 47
     962:	88 60       	ori	r24, 0x08	; 8
     964:	8f bd       	out	0x2f, r24	; 47

	return Loc_enuTimer1Status;
}
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret

0000096a <Timer1_enuCtcForcePinImmediatlyChannelB>:
Timer1_StatusErrorType Timer1_enuCtcForcePinImmediatlyChannelB(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	SET_BIT(TCCR1A,TCCR1A_FOC1B_BIT);
     96a:	8f b5       	in	r24, 0x2f	; 47
     96c:	84 60       	ori	r24, 0x04	; 4
     96e:	8f bd       	out	0x2f, r24	; 47

	return Loc_enuTimer1Status;
}
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	08 95       	ret

00000974 <Timer1_enuSetRisingEdgeIcu>:

Timer1_StatusErrorType Timer1_enuSetRisingEdgeIcu(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	SET_BIT(TCCR1B,TCCR1B_ICES1_BIT);
     974:	8e b5       	in	r24, 0x2e	; 46
     976:	80 64       	ori	r24, 0x40	; 64
     978:	8e bd       	out	0x2e, r24	; 46

	return Loc_enuTimer1Status;
}
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	08 95       	ret

0000097e <Timer1_enuSetFailingEdgeIcu>:
Timer1_StatusErrorType Timer1_enuSetFailingEdgeIcu(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	CLEAR_BIT(TCCR1B,TCCR1B_ICES1_BIT);
     97e:	8e b5       	in	r24, 0x2e	; 46
     980:	8f 7b       	andi	r24, 0xBF	; 191
     982:	8e bd       	out	0x2e, r24	; 46

	return Loc_enuTimer1Status;
}
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 95       	ret

00000988 <Timer1_enuToggleEdgeIcu>:
Timer1_StatusErrorType Timer1_enuToggleEdgeIcu(void){

	Timer1_StatusErrorType Loc_enuTimer1Status = TIMER1_STATUS_OK;
	TOGGLE_BIT(TCCR1B,TCCR1B_ICES1_BIT);
     988:	9e b5       	in	r25, 0x2e	; 46
     98a:	80 e4       	ldi	r24, 0x40	; 64
     98c:	89 27       	eor	r24, r25
     98e:	8e bd       	out	0x2e, r24	; 46

	return Loc_enuTimer1Status;
}
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret

00000994 <__vector_9>:
///////////////////////////////////////////////////////////////////////////////////////////

// ISR function For TIMER1 OverFlow
void __vector_9(void) __attribute__((signal));

void __vector_9(void){
     994:	1f 92       	push	r1
     996:	0f 92       	push	r0
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	2f 93       	push	r18
     9a0:	3f 93       	push	r19
     9a2:	4f 93       	push	r20
     9a4:	5f 93       	push	r21
     9a6:	6f 93       	push	r22
     9a8:	7f 93       	push	r23
     9aa:	8f 93       	push	r24
     9ac:	9f 93       	push	r25
     9ae:	af 93       	push	r26
     9b0:	bf 93       	push	r27
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_OverflowInterruptHandler ){
     9ba:	c0 91 cc 06 	lds	r28, 0x06CC	; 0x8006cc <Timer1_OverflowInterruptHandler>
     9be:	d0 91 cd 06 	lds	r29, 0x06CD	; 0x8006cd <Timer1_OverflowInterruptHandler+0x1>
     9c2:	20 97       	sbiw	r28, 0x00	; 0
     9c4:	41 f0       	breq	.+16     	; 0x9d6 <__vector_9+0x42>

    	Timer1_enuSetValueNormalCounter(Timer1_StaticU16InitValue);
     9c6:	80 91 c4 06 	lds	r24, 0x06C4	; 0x8006c4 <Timer1_StaticU16InitValue>
     9ca:	90 91 c5 06 	lds	r25, 0x06C5	; 0x8006c5 <Timer1_StaticU16InitValue+0x1>
     9ce:	0e 94 29 04 	call	0x852	; 0x852 <Timer1_enuSetValueNormalCounter>
    	Timer1_OverflowInterruptHandler();
     9d2:	fe 01       	movw	r30, r28
     9d4:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
     9d6:	ff 91       	pop	r31
     9d8:	ef 91       	pop	r30
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	7f 91       	pop	r23
     9e8:	6f 91       	pop	r22
     9ea:	5f 91       	pop	r21
     9ec:	4f 91       	pop	r20
     9ee:	3f 91       	pop	r19
     9f0:	2f 91       	pop	r18
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <__vector_6>:


// ISR function For TIMER1 ICU
void __vector_6(void) __attribute__((signal));

void __vector_6(void){
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_IcuInterruptHandler ){
     a1e:	e0 91 c6 06 	lds	r30, 0x06C6	; 0x8006c6 <Timer1_IcuInterruptHandler>
     a22:	f0 91 c7 06 	lds	r31, 0x06C7	; 0x8006c7 <Timer1_IcuInterruptHandler+0x1>
     a26:	30 97       	sbiw	r30, 0x00	; 0
     a28:	09 f0       	breq	.+2      	; 0xa2c <__vector_6+0x30>

    	Timer1_IcuInterruptHandler();
     a2a:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	0f 90       	pop	r0
     a4a:	1f 90       	pop	r1
     a4c:	18 95       	reti

00000a4e <__vector_8>:


// ISR function For TIMER1 Compare Channel B
void __vector_8(void) __attribute__((signal));

void __vector_8(void){
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	11 24       	eor	r1, r1
     a58:	2f 93       	push	r18
     a5a:	3f 93       	push	r19
     a5c:	4f 93       	push	r20
     a5e:	5f 93       	push	r21
     a60:	6f 93       	push	r22
     a62:	7f 93       	push	r23
     a64:	8f 93       	push	r24
     a66:	9f 93       	push	r25
     a68:	af 93       	push	r26
     a6a:	bf 93       	push	r27
     a6c:	ef 93       	push	r30
     a6e:	ff 93       	push	r31

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_CompareChannelBInterruptHandler ){
     a70:	e0 91 c8 06 	lds	r30, 0x06C8	; 0x8006c8 <Timer1_CompareChannelBInterruptHandler>
     a74:	f0 91 c9 06 	lds	r31, 0x06C9	; 0x8006c9 <Timer1_CompareChannelBInterruptHandler+0x1>
     a78:	30 97       	sbiw	r30, 0x00	; 0
     a7a:	09 f0       	breq	.+2      	; 0xa7e <__vector_8+0x30>

    	Timer1_CompareChannelBInterruptHandler();
     a7c:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
     a7e:	ff 91       	pop	r31
     a80:	ef 91       	pop	r30
     a82:	bf 91       	pop	r27
     a84:	af 91       	pop	r26
     a86:	9f 91       	pop	r25
     a88:	8f 91       	pop	r24
     a8a:	7f 91       	pop	r23
     a8c:	6f 91       	pop	r22
     a8e:	5f 91       	pop	r21
     a90:	4f 91       	pop	r20
     a92:	3f 91       	pop	r19
     a94:	2f 91       	pop	r18
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <__vector_7>:


// ISR function For TIMER1 Compare Channel A
void __vector_7(void) __attribute__((signal));

void __vector_7(void){
     aa0:	1f 92       	push	r1
     aa2:	0f 92       	push	r0
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	0f 92       	push	r0
     aa8:	11 24       	eor	r1, r1
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	ef 93       	push	r30
     ac0:	ff 93       	push	r31

//	Timer1_DisableOverviewInterrupt();



    if(NULL !=Timer1_CompareChannelAInterruptHandler ){
     ac2:	e0 91 ca 06 	lds	r30, 0x06CA	; 0x8006ca <Timer1_CompareChannelAInterruptHandler>
     ac6:	f0 91 cb 06 	lds	r31, 0x06CB	; 0x8006cb <Timer1_CompareChannelAInterruptHandler+0x1>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	09 f0       	breq	.+2      	; 0xad0 <__vector_7+0x30>

    	Timer1_CompareChannelAInterruptHandler();
     ace:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer1_EnableOverviewInterrupt();
}
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	bf 91       	pop	r27
     ad6:	af 91       	pop	r26
     ad8:	9f 91       	pop	r25
     ada:	8f 91       	pop	r24
     adc:	7f 91       	pop	r23
     ade:	6f 91       	pop	r22
     ae0:	5f 91       	pop	r21
     ae2:	4f 91       	pop	r20
     ae4:	3f 91       	pop	r19
     ae6:	2f 91       	pop	r18
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <Timer0_enuDeInit>:
}

Timer0_StatusErrorType Timer0_enuDeInit(const Timer0_ConfigType* Address_Timer0){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){
     af2:	89 2b       	or	r24, r25
     af4:	29 f0       	breq	.+10     	; 0xb00 <Timer0_enuDeInit+0xe>
		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	Timer0_Disable();
     af6:	83 b7       	in	r24, 0x33	; 51
     af8:	88 7f       	andi	r24, 0xF8	; 248
     afa:	83 bf       	out	0x33, r24	; 51

		    return Loc_enuTimer0Status;
}

Timer0_StatusErrorType Timer0_enuDeInit(const Timer0_ConfigType* Address_Timer0){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	08 95       	ret

		    if(NULL == Address_Timer0){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     b00:	82 e0       	ldi	r24, 0x02	; 2
		    	Timer0_Disable();

		    }

		    return Loc_enuTimer0Status;
}
     b02:	08 95       	ret

00000b04 <Timer0_enuEnableInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableInterrupt(const Timer0_ConfigType* Address_Timer0){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){
     b04:	00 97       	sbiw	r24, 0x00	; 0
     b06:	61 f0       	breq	.+24     	; 0xb20 <Timer0_enuEnableInterrupt+0x1c>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     b08:	fc 01       	movw	r30, r24
     b0a:	81 81       	ldd	r24, Z+1	; 0x01
     b0c:	81 11       	cpse	r24, r1
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <Timer0_enuEnableInterrupt+0x12>

		    		Timer0_EnableOverviewInterrupt();
     b10:	89 b7       	in	r24, 0x39	; 57
     b12:	81 60       	ori	r24, 0x01	; 1
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <Timer0_enuEnableInterrupt+0x16>


		    	}
		    	else{
		    		Timer0_EnableComparePwmInterrupt();
     b16:	89 b7       	in	r24, 0x39	; 57
     b18:	82 60       	ori	r24, 0x02	; 2
     b1a:	89 bf       	out	0x39, r24	; 57

		    return Loc_enuTimer0Status;
}

Timer0_StatusErrorType Timer0_enuEnableInterrupt(const Timer0_ConfigType* Address_Timer0){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	08 95       	ret

		    if(NULL == Address_Timer0){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     b20:	82 e0       	ldi	r24, 0x02	; 2
		    	}

		    }

		    return Loc_enuTimer0Status;
}
     b22:	08 95       	ret

00000b24 <Timer0_enuDisableInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableInterrupt(const Timer0_ConfigType* Address_Timer0){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	61 f0       	breq	.+24     	; 0xb40 <Timer0_enuDisableInterrupt+0x1c>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     b28:	fc 01       	movw	r30, r24
     b2a:	81 81       	ldd	r24, Z+1	; 0x01
     b2c:	81 11       	cpse	r24, r1
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <Timer0_enuDisableInterrupt+0x12>

		    		Timer0_DisableOverviewInterrupt();
     b30:	89 b7       	in	r24, 0x39	; 57
     b32:	8e 7f       	andi	r24, 0xFE	; 254
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <Timer0_enuDisableInterrupt+0x16>


		    	}
		    	else{
		    		Timer0_DisbleComparePwmInterrupt();
     b36:	89 b7       	in	r24, 0x39	; 57
     b38:	8d 7f       	andi	r24, 0xFD	; 253
     b3a:	89 bf       	out	0x39, r24	; 57

		    return Loc_enuTimer0Status;
}

Timer0_StatusErrorType Timer0_enuDisableInterrupt(const Timer0_ConfigType* Address_Timer0){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	08 95       	ret

		    if(NULL == Address_Timer0){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     b40:	82 e0       	ldi	r24, 0x02	; 2
		    	}

		    }

		    return Loc_enuTimer0Status;
}
     b42:	08 95       	ret

00000b44 <Timer0_enuSetValue>:


Timer0_StatusErrorType Timer0_enuSetValue(const Timer0_ConfigType* Address_Timer0, u8 Copy_u8Value){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	49 f0       	breq	.+18     	; 0xb5a <Timer0_enuSetValue+0x16>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     b48:	fc 01       	movw	r30, r24
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	81 11       	cpse	r24, r1
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <Timer0_enuSetValue+0x10>



		    		ASSIGN_REG(TCNT0,Copy_u8Value);
     b50:	62 bf       	out	0x32, r22	; 50
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <Timer0_enuSetValue+0x12>

		    	}
		    	else{
		    		ASSIGN_REG(OCR0,Copy_u8Value);
     b54:	6c bf       	out	0x3c, r22	; 60
		    return Loc_enuTimer0Status;
}


Timer0_StatusErrorType Timer0_enuSetValue(const Timer0_ConfigType* Address_Timer0, u8 Copy_u8Value){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	08 95       	ret

		    if(NULL == Address_Timer0){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     b5a:	82 e0       	ldi	r24, 0x02	; 2


		    }

		    return Loc_enuTimer0Status;
}
     b5c:	08 95       	ret

00000b5e <Timer0_enuInit>:
static  u8 Timer0_InitValue;
/********************************** Software Interfaces Declarations *******************/



Timer0_StatusErrorType Timer0_enuInit(const Timer0_ConfigType* Address_Timer0){
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){
     b62:	00 97       	sbiw	r24, 0x00	; 0
     b64:	09 f4       	brne	.+2      	; 0xb68 <Timer0_enuInit+0xa>
     b66:	47 c0       	rjmp	.+142    	; 0xbf6 <Timer0_enuInit+0x98>
     b68:	ec 01       	movw	r28, r24
		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	        Timer0_Disable();
     b6a:	83 b7       	in	r24, 0x33	; 51
     b6c:	88 7f       	andi	r24, 0xF8	; 248
     b6e:	83 bf       	out	0x33, r24	; 51

		    	        /* Select Mode timer */
		    	        Timer0_SelectMode((Address_Timer0->select_mode));
     b70:	83 b7       	in	r24, 0x33	; 51
     b72:	99 81       	ldd	r25, Y+1	; 0x01
     b74:	e9 2f       	mov	r30, r25
     b76:	e1 70       	andi	r30, 0x01	; 1
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	96 e0       	ldi	r25, 0x06	; 6
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	9a 95       	dec	r25
     b82:	e1 f7       	brne	.-8      	; 0xb7c <Timer0_enuInit+0x1e>
     b84:	8f 7b       	andi	r24, 0xBF	; 191
     b86:	e8 2b       	or	r30, r24
     b88:	e3 bf       	out	0x33, r30	; 51
     b8a:	83 b7       	in	r24, 0x33	; 51
     b8c:	99 81       	ldd	r25, Y+1	; 0x01
     b8e:	91 fb       	bst	r25, 1
     b90:	66 27       	eor	r22, r22
     b92:	60 f9       	bld	r22, 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	23 e0       	ldi	r18, 0x03	; 3
     b98:	66 0f       	add	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	2a 95       	dec	r18
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <Timer0_enuInit+0x3a>
     ba0:	87 7f       	andi	r24, 0xF7	; 247
     ba2:	68 2b       	or	r22, r24
     ba4:	63 bf       	out	0x33, r22	; 51
     ba6:	83 b7       	in	r24, 0x33	; 51
     ba8:	99 81       	ldd	r25, Y+1	; 0x01
     baa:	92 fb       	bst	r25, 2
     bac:	44 27       	eor	r20, r20
     bae:	40 f9       	bld	r20, 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	34 e0       	ldi	r19, 0x04	; 4
     bb4:	44 0f       	add	r20, r20
     bb6:	55 1f       	adc	r21, r21
     bb8:	3a 95       	dec	r19
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <Timer0_enuInit+0x56>
     bbc:	8f 7e       	andi	r24, 0xEF	; 239
     bbe:	48 2b       	or	r20, r24
     bc0:	43 bf       	out	0x33, r20	; 51
     bc2:	83 b7       	in	r24, 0x33	; 51
     bc4:	99 81       	ldd	r25, Y+1	; 0x01
     bc6:	93 fb       	bst	r25, 3
     bc8:	22 27       	eor	r18, r18
     bca:	20 f9       	bld	r18, 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	45 e0       	ldi	r20, 0x05	; 5
     bd0:	22 0f       	add	r18, r18
     bd2:	33 1f       	adc	r19, r19
     bd4:	4a 95       	dec	r20
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <Timer0_enuInit+0x72>
     bd8:	8f 7d       	andi	r24, 0xDF	; 223
     bda:	28 2b       	or	r18, r24
     bdc:	23 bf       	out	0x33, r18	; 51

		    	        Timer0_InitValue = Address_Timer0->init_value;
     bde:	6a 81       	ldd	r22, Y+2	; 0x02
     be0:	60 93 ce 06 	sts	0x06CE, r22	; 0x8006ce <Timer0_InitValue>
		    	        /* Update Init Value*/
		    	       Loc_enuTimer0Status= Timer0_enuSetValue(Address_Timer0, Address_Timer0->init_value);
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 a2 05 	call	0xb44	; 0xb44 <Timer0_enuSetValue>

		    	        /* Enable Timer0 Peripheral */
		    	        Timer0_Enable(Address_Timer0->prescaler_value);
     bea:	93 b7       	in	r25, 0x33	; 51
     bec:	98 7f       	andi	r25, 0xF8	; 248
     bee:	28 81       	ld	r18, Y
     bf0:	92 2b       	or	r25, r18
     bf2:	93 bf       	out	0x33, r25	; 51
     bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <Timer0_enuInit+0x9a>
Timer0_StatusErrorType Timer0_enuInit(const Timer0_ConfigType* Address_Timer0){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     bf6:	82 e0       	ldi	r24, 0x02	; 2
		    	        Timer0_Enable(Address_Timer0->prescaler_value);

		    }

		    return Loc_enuTimer0Status;
}
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <Timer0_enuGetTimeElapsed>:
		    return Loc_enuTimer0Status;
}
Timer0_StatusErrorType Timer0_enuGetTimeElapsed(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){
     bfe:	89 2b       	or	r24, r25
     c00:	39 f0       	breq	.+14     	; 0xc10 <Timer0_enuGetTimeElapsed+0x12>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }
		    else{

		    	*Address_Value = TCNT0;
     c02:	82 b7       	in	r24, 0x32	; 50
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	fb 01       	movw	r30, r22
     c08:	91 83       	std	Z+1, r25	; 0x01
     c0a:	80 83       	st	Z, r24
		    }

		    return Loc_enuTimer0Status;
}
Timer0_StatusErrorType Timer0_enuGetTimeElapsed(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	08 95       	ret

		    if(NULL == Address_Timer0){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c10:	82 e0       	ldi	r24, 0x02	; 2

		    	*Address_Value = TCNT0;
		    }

		    return Loc_enuTimer0Status;
}
     c12:	08 95       	ret

00000c14 <Timer0_enuGetRemaining>:
Timer0_StatusErrorType Timer0_enuGetRemaining(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){
     c14:	89 2b       	or	r24, r25
     c16:	11 f4       	brne	.+4      	; 0xc1c <Timer0_enuGetRemaining+0x8>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	08 95       	ret
		    }

		    return Loc_enuTimer0Status;
}
Timer0_StatusErrorType Timer0_enuGetRemaining(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c1c:	81 e0       	ldi	r24, 0x01	; 1


		    }

		    return Loc_enuTimer0Status;
}
     c1e:	08 95       	ret

00000c20 <Timer0_enuSetCallbackFunction>:


Timer0_StatusErrorType Timer0_enuSetCallbackFunction(const Timer0_ConfigType* Address_Timer0,void (*callback)(void)){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	79 f0       	breq	.+30     	; 0xc42 <Timer0_enuSetCallbackFunction+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     c24:	fc 01       	movw	r30, r24
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	81 11       	cpse	r24, r1
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <Timer0_enuSetCallbackFunction+0x16>

		    		Timer0_OverflowInterruptHandler = callback;
     c2c:	70 93 d2 06 	sts	0x06D2, r23	; 0x8006d2 <Timer0_OverflowInterruptHandler+0x1>
     c30:	60 93 d1 06 	sts	0x06D1, r22	; 0x8006d1 <Timer0_OverflowInterruptHandler>
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <Timer0_enuSetCallbackFunction+0x1e>


		    	}
		    	else{
		    		Timer0_CompareInterruptHandler = callback;
     c36:	70 93 d0 06 	sts	0x06D0, r23	; 0x8006d0 <Timer0_CompareInterruptHandler+0x1>
     c3a:	60 93 cf 06 	sts	0x06CF, r22	; 0x8006cf <Timer0_CompareInterruptHandler>
		    return Loc_enuTimer0Status;
}


Timer0_StatusErrorType Timer0_enuSetCallbackFunction(const Timer0_ConfigType* Address_Timer0,void (*callback)(void)){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	08 95       	ret

		    if(NULL == Address_Timer0){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c42:	82 e0       	ldi	r24, 0x02	; 2


		    }

		    return Loc_enuTimer0Status;
}
     c44:	08 95       	ret

00000c46 <Timer0_enuEnableOverflowInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableOverflowInterrupt(void){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

			Timer0_EnableOverviewInterrupt();
     c46:	89 b7       	in	r24, 0x39	; 57
     c48:	81 60       	ori	r24, 0x01	; 1
     c4a:	89 bf       	out	0x39, r24	; 57

		    return Loc_enuTimer0Status;
}
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	08 95       	ret

00000c50 <Timer0_enuEnableCaptureInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableCaptureInterrupt(void){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

			Timer0_EnableComparePwmInterrupt();
     c50:	89 b7       	in	r24, 0x39	; 57
     c52:	82 60       	ori	r24, 0x02	; 2
     c54:	89 bf       	out	0x39, r24	; 57

		    return Loc_enuTimer0Status;
}
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	08 95       	ret

00000c5a <Timer0_enuSetCallbackOverflowInterrupt>:


Timer0_StatusErrorType Timer0_enuSetCallbackOverflowInterrupt(void (*callback)(void)){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == callback){
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	31 f0       	breq	.+12     	; 0xc6a <Timer0_enuSetCallbackOverflowInterrupt+0x10>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }

		    else{
		    		Timer0_OverflowInterruptHandler = callback;
     c5e:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <Timer0_OverflowInterruptHandler+0x1>
     c62:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <Timer0_OverflowInterruptHandler>
		    return Loc_enuTimer0Status;
}


Timer0_StatusErrorType Timer0_enuSetCallbackOverflowInterrupt(void (*callback)(void)){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	08 95       	ret

		    if(NULL == callback){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c6a:	82 e0       	ldi	r24, 0x02	; 2


		    }

		    return Loc_enuTimer0Status;
}
     c6c:	08 95       	ret

00000c6e <Timer0_enuSetCallbackCompareInterrupt>:
Timer0_StatusErrorType Timer0_enuSetCallbackCompareInterrupt(void (*callback)(void)){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == callback){
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	31 f0       	breq	.+12     	; 0xc7e <Timer0_enuSetCallbackCompareInterrupt+0x10>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }

		    else{
		    		Timer0_CompareInterruptHandler = callback;
     c72:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <Timer0_CompareInterruptHandler+0x1>
     c76:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <Timer0_CompareInterruptHandler>
		    }

		    return Loc_enuTimer0Status;
}
Timer0_StatusErrorType Timer0_enuSetCallbackCompareInterrupt(void (*callback)(void)){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	08 95       	ret

		    if(NULL == callback){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c7e:	82 e0       	ldi	r24, 0x02	; 2


		    }

		    return Loc_enuTimer0Status;
}
     c80:	08 95       	ret

00000c82 <Timer0_enuDisableOverflowInterrupt>:


Timer0_StatusErrorType Timer0_enuDisableOverflowInterrupt(void){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

			Timer0_DisableOverviewInterrupt();
     c82:	89 b7       	in	r24, 0x39	; 57
     c84:	8e 7f       	andi	r24, 0xFE	; 254
     c86:	89 bf       	out	0x39, r24	; 57

		    return Loc_enuTimer0Status;
}
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	08 95       	ret

00000c8c <Timer0_enuDisableCaptureInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableCaptureInterrupt(void){

		Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

	  	Timer0_DisbleComparePwmInterrupt();
     c8c:	89 b7       	in	r24, 0x39	; 57
     c8e:	8d 7f       	andi	r24, 0xFD	; 253
     c90:	89 bf       	out	0x39, r24	; 57

			    return Loc_enuTimer0Status;

}
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	08 95       	ret

00000c96 <Timer0_enuCtcForcePinImmediatly>:


Timer0_StatusErrorType Timer0_enuCtcForcePinImmediatly(const Timer0_ConfigType* Address_Timer0){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

		    if(NULL == Address_Timer0){
     c96:	89 2b       	or	r24, r25
     c98:	29 f0       	breq	.+10     	; 0xca4 <Timer0_enuCtcForcePinImmediatly+0xe>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }
		    else{

		    	SET_BIT(TCCR0,FOC0_BIT);
     c9a:	83 b7       	in	r24, 0x33	; 51
     c9c:	80 68       	ori	r24, 0x80	; 128
     c9e:	83 bf       	out	0x33, r24	; 51
}



Timer0_StatusErrorType Timer0_enuCtcForcePinImmediatly(const Timer0_ConfigType* Address_Timer0){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	08 95       	ret

		    if(NULL == Address_Timer0){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     ca4:	82 e0       	ldi	r24, 0x02	; 2


		    }

		    return Loc_enuTimer0Status;
}
     ca6:	08 95       	ret

00000ca8 <Timer0_enuSetDutyCyclePwm>:
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;

//	u8 Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * 255);
	u8 Loc_u8DutyCycle;

		    if(NULL == Address_Timer0){
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	e1 f1       	breq	.+120    	; 0xd24 <Timer0_enuSetDutyCyclePwm+0x7c>
		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
		    }

		    else {

		    	Copy_u8DutyCylePrecentage = (Copy_u8DutyCylePrecentage >= 100) ? 100 :Copy_u8DutyCylePrecentage;
     cac:	65 36       	cpi	r22, 0x65	; 101
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <Timer0_enuSetDutyCyclePwm+0xa>
     cb0:	64 e6       	ldi	r22, 0x64	; 100

		    	switch(Address_Timer0->select_mode){
     cb2:	dc 01       	movw	r26, r24
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	ec 91       	ld	r30, X
     cb8:	8e 2f       	mov	r24, r30
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	80 31       	cpi	r24, 0x10	; 16
     cbe:	91 05       	cpc	r25, r1
     cc0:	98 f5       	brcc	.+102    	; 0xd28 <Timer0_enuSetDutyCyclePwm+0x80>
     cc2:	fc 01       	movw	r30, r24
     cc4:	e6 5d       	subi	r30, 0xD6	; 214
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__tablejump2__>
		    	case  TIMER0_SELECT_MODE_NORMAL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_NORMAEL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_TOGGLE :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_CLEAR  :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_SET :
		    		Loc_enuTimer0Status = TIMER0_STATUS_FAIL;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret
		    		/* i don't know what is the usage of this */
		    		break;

		    	case TIMER0_SELECT_MODE_PWM_FAST_INVERTED_OC0_SET_ON_MATCH_CLEAR_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_SET_ON_MATCH_UPCOUNTING_CLEAR_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = TIMER0_FULL_VALUE_IN_REGISTER- (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__floatunsisf>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	48 ec       	ldi	r20, 0xC8	; 200
     ce0:	52 e4       	ldi	r21, 0x42	; 66
     ce2:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__divsf3>
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4f e7       	ldi	r20, 0x7F	; 127
     cec:	53 e4       	ldi	r21, 0x43	; 67
     cee:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__mulsf3>
     cf2:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fixunssfsi>
     cf6:	60 95       	com	r22
     cf8:	13 c0       	rjmp	.+38     	; 0xd20 <Timer0_enuSetDutyCyclePwm+0x78>

		    		break;

		    	case TIMER0_SELECT_MODE_PWM_FAST_NOT_INVERTED_OC0_CLEAR_ON_MATCH_SET_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_CLEAR_ON_MATCH_UPCOUNTING_SET_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__floatunsisf>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	48 ec       	ldi	r20, 0xC8	; 200
     d0a:	52 e4       	ldi	r21, 0x42	; 66
     d0c:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__divsf3>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	4f e7       	ldi	r20, 0x7F	; 127
     d16:	53 e4       	ldi	r21, 0x43	; 67
     d18:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__mulsf3>
     d1c:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fixunssfsi>
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
     d20:	6c bf       	out	0x3c, r22	; 60
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <Timer0_enuSetDutyCyclePwm+0x80>
//	u8 Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * 255);
	u8 Loc_u8DutyCycle;

		    if(NULL == Address_Timer0){

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	08 95       	ret
		    return Loc_enuTimer0Status;
}


Timer0_StatusErrorType Timer0_enuSetDutyCyclePwm(const Timer0_ConfigType* Address_Timer0,u8 Copy_u8DutyCylePrecentage){
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     d28:	81 e0       	ldi	r24, 0x01	; 1
		    }


		    }
		    return Loc_enuTimer0Status;
}
     d2a:	08 95       	ret

00000d2c <__vector_10>:


// ISR function For TIMER0 Compare Match
void __vector_10(void) __attribute__((signal));

void __vector_10(void){
     d2c:	1f 92       	push	r1
     d2e:	0f 92       	push	r0
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	0f 92       	push	r0
     d34:	11 24       	eor	r1, r1
     d36:	2f 93       	push	r18
     d38:	3f 93       	push	r19
     d3a:	4f 93       	push	r20
     d3c:	5f 93       	push	r21
     d3e:	6f 93       	push	r22
     d40:	7f 93       	push	r23
     d42:	8f 93       	push	r24
     d44:	9f 93       	push	r25
     d46:	af 93       	push	r26
     d48:	bf 93       	push	r27
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31

	    if(NULL !=Timer0_CompareInterruptHandler ){
     d4e:	e0 91 cf 06 	lds	r30, 0x06CF	; 0x8006cf <Timer0_CompareInterruptHandler>
     d52:	f0 91 d0 06 	lds	r31, 0x06D0	; 0x8006d0 <Timer0_CompareInterruptHandler+0x1>
     d56:	30 97       	sbiw	r30, 0x00	; 0
     d58:	09 f0       	breq	.+2      	; 0xd5c <__vector_10+0x30>
	    	Timer0_CompareInterruptHandler();
     d5a:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	bf 91       	pop	r27
     d62:	af 91       	pop	r26
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	7f 91       	pop	r23
     d6a:	6f 91       	pop	r22
     d6c:	5f 91       	pop	r21
     d6e:	4f 91       	pop	r20
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <__vector_11>:


// ISR function For TIMER0 OverFlow
void __vector_11(void) __attribute__((signal));

void __vector_11(void){
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31

//	Timer0_DisableOverviewInterrupt();



    if(NULL !=Timer0_OverflowInterruptHandler ){
     da0:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <Timer0_OverflowInterruptHandler>
     da4:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <Timer0_OverflowInterruptHandler+0x1>
     da8:	89 2b       	or	r24, r25
     daa:	41 f0       	breq	.+16     	; 0xdbc <__vector_11+0x3e>

    	TCNT0 = Timer0_InitValue;
     dac:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <Timer0_InitValue>
     db0:	82 bf       	out	0x32, r24	; 50
    	Timer0_OverflowInterruptHandler();
     db2:	e0 91 d1 06 	lds	r30, 0x06D1	; 0x8006d1 <Timer0_OverflowInterruptHandler>
     db6:	f0 91 d2 06 	lds	r31, 0x06D2	; 0x8006d2 <Timer0_OverflowInterruptHandler+0x1>
     dba:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <Spi_enuInit>:
/********************************** Data Type Declarations ****************************/


/********************************** Software Interfaces Declarations *******************/

Spi_StatusErrorType Spi_enuInit(const Spi_ConfigType* Address_Spi){
     dde:	fc 01       	movw	r30, r24
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
	if(NULL == Address_Spi){
     de0:	89 2b       	or	r24, r25
     de2:	c9 f1       	breq	.+114    	; 0xe56 <Spi_enuInit+0x78>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
	}
	else{

		/* Disable During Configuration */
		Spi_Disable();
     de4:	6e 98       	cbi	0x0d, 6	; 13

		/* Select MasterSlaveType */
		Spi_SelectMasterSlave(Address_Spi->select_master_or_slave);
     de6:	2d b1       	in	r18, 0x0d	; 13
     de8:	90 81       	ld	r25, Z
     dea:	30 e1       	ldi	r19, 0x10	; 16
     dec:	93 9f       	mul	r25, r19
     dee:	c0 01       	movw	r24, r0
     df0:	11 24       	eor	r1, r1
     df2:	92 2f       	mov	r25, r18
     df4:	9f 7e       	andi	r25, 0xEF	; 239
     df6:	89 2b       	or	r24, r25
     df8:	8d b9       	out	0x0d, r24	; 13

		/* Select data ording */
		Spi_SelectDataOrding(Address_Spi->select_data_ording);
     dfa:	2d b1       	in	r18, 0x0d	; 13
     dfc:	91 81       	ldd	r25, Z+1	; 0x01
     dfe:	30 e2       	ldi	r19, 0x20	; 32
     e00:	93 9f       	mul	r25, r19
     e02:	c0 01       	movw	r24, r0
     e04:	11 24       	eor	r1, r1
     e06:	92 2f       	mov	r25, r18
     e08:	9f 7d       	andi	r25, 0xDF	; 223
     e0a:	89 2b       	or	r24, r25
     e0c:	8d b9       	out	0x0d, r24	; 13

		/* Select Polarity */
		Spi_SelectPolarity(Address_Spi->select_polarity);
     e0e:	2d b1       	in	r18, 0x0d	; 13
     e10:	92 81       	ldd	r25, Z+2	; 0x02
     e12:	38 e0       	ldi	r19, 0x08	; 8
     e14:	93 9f       	mul	r25, r19
     e16:	c0 01       	movw	r24, r0
     e18:	11 24       	eor	r1, r1
     e1a:	92 2f       	mov	r25, r18
     e1c:	97 7f       	andi	r25, 0xF7	; 247
     e1e:	89 2b       	or	r24, r25
     e20:	8d b9       	out	0x0d, r24	; 13

		/* Select Phase */
		Spi_SelectPhase(Address_Spi->select_phase);
     e22:	2d b1       	in	r18, 0x0d	; 13
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	34 e0       	ldi	r19, 0x04	; 4
     e28:	93 9f       	mul	r25, r19
     e2a:	c0 01       	movw	r24, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	92 2f       	mov	r25, r18
     e30:	9b 7f       	andi	r25, 0xFB	; 251
     e32:	89 2b       	or	r24, r25
     e34:	8d b9       	out	0x0d, r24	; 13

		/* Select Clock Speed */
		Spi_SelectClkSpeed(Address_Spi->select_clk_speed);
     e36:	8d b1       	in	r24, 0x0d	; 13
     e38:	94 81       	ldd	r25, Z+4	; 0x04
     e3a:	93 70       	andi	r25, 0x03	; 3
     e3c:	8c 7f       	andi	r24, 0xFC	; 252
     e3e:	89 2b       	or	r24, r25
     e40:	8d b9       	out	0x0d, r24	; 13
     e42:	8e b1       	in	r24, 0x0e	; 14
     e44:	94 81       	ldd	r25, Z+4	; 0x04
     e46:	96 95       	lsr	r25
     e48:	96 95       	lsr	r25
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	89 2b       	or	r24, r25
     e4e:	8e b9       	out	0x0e, r24	; 14

		/* Enable During Configuration */
		Spi_Enable();
     e50:	6e 9a       	sbi	0x0d, 6	; 13


/********************************** Software Interfaces Declarations *******************/

Spi_StatusErrorType Spi_enuInit(const Spi_ConfigType* Address_Spi){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	08 95       	ret
	if(NULL == Address_Spi){
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
     e56:	82 e0       	ldi	r24, 0x02	; 2
		Spi_Enable();

	}

	return Loc_enuSpiStatus;
}
     e58:	08 95       	ret

00000e5a <Spi_enuDeInit>:

Spi_StatusErrorType Spi_enuDeInit(void){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;

	/* Disable  */
	Spi_Disable();
     e5a:	6e 98       	cbi	0x0d, 6	; 13

	return Loc_enuSpiStatus;
}
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	08 95       	ret

00000e60 <Spi_enuEnableInterrupt>:

Spi_StatusErrorType Spi_enuEnableInterrupt(void){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;

	Spi_EnableInterrupt();
     e60:	6f 9a       	sbi	0x0d, 7	; 13

	return Loc_enuSpiStatus;
}
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	08 95       	ret

00000e66 <Spi_enuDisableInterrupt>:

Spi_StatusErrorType Spi_enuDisableInterrupt(void){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;

	Spi_DisableInterrupt();
     e66:	6f 98       	cbi	0x0d, 7	; 13

	return Loc_enuSpiStatus;
}
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	08 95       	ret

00000e6c <Spi_enuSetCallbackFunction>:

Spi_StatusErrorType Spi_enuSetCallbackFunction(void (*callback)(u8 Copy_u8Result)){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
	if(NULL == callback){
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	31 f0       	breq	.+12     	; 0xe7c <Spi_enuSetCallbackFunction+0x10>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
	}
	else{

		Spi_InterruptHandler = callback;
     e70:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <Spi_InterruptHandler+0x1>
     e74:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <Spi_InterruptHandler>

	return Loc_enuSpiStatus;
}

Spi_StatusErrorType Spi_enuSetCallbackFunction(void (*callback)(u8 Copy_u8Result)){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	08 95       	ret
	if(NULL == callback){
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
     e7c:	82 e0       	ldi	r24, 0x02	; 2

		Spi_InterruptHandler = callback;
	}

	return Loc_enuSpiStatus;
}
     e7e:	08 95       	ret

00000e80 <Spi_enuChangeClk>:

Spi_StatusErrorType Spi_enuChangeClk(Spi_SelectClkSpeedType Copy_enuClkSpeed){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;

	/* Disable During Configuration */
		Spi_Disable();
     e80:	6e 98       	cbi	0x0d, 6	; 13

		/* Select Clock Speed */
		Spi_SelectClkSpeed(Copy_enuClkSpeed);
     e82:	9d b1       	in	r25, 0x0d	; 13
     e84:	9c 7f       	andi	r25, 0xFC	; 252
     e86:	28 2f       	mov	r18, r24
     e88:	23 70       	andi	r18, 0x03	; 3
     e8a:	92 2b       	or	r25, r18
     e8c:	9d b9       	out	0x0d, r25	; 13
     e8e:	9e b1       	in	r25, 0x0e	; 14
     e90:	9e 7f       	andi	r25, 0xFE	; 254
     e92:	86 95       	lsr	r24
     e94:	86 95       	lsr	r24
     e96:	89 2b       	or	r24, r25
     e98:	8e b9       	out	0x0e, r24	; 14

		/* Enable During Configuration */
		Spi_Enable();
     e9a:	6e 9a       	sbi	0x0d, 6	; 13


	return Loc_enuSpiStatus;
}
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	08 95       	ret

00000ea0 <Spi_enuIsWriteCollisionHappened>:

Spi_StatusErrorType Spi_enuIsWriteCollisionHappened(Spi_IsWriteCollisionHappenedType* Address_Result){
     ea0:	fc 01       	movw	r30, r24
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
	if(NULL == Address_Result){
     ea2:	89 2b       	or	r24, r25
     ea4:	39 f0       	breq	.+14     	; 0xeb4 <Spi_enuIsWriteCollisionHappened+0x14>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		*Address_Result = Spi_isWirteCollisionHappened();
     ea6:	9e b1       	in	r25, 0x0e	; 14
     ea8:	96 fb       	bst	r25, 6
     eaa:	99 27       	eor	r25, r25
     eac:	90 f9       	bld	r25, 0
     eae:	90 83       	st	Z, r25

	return Loc_enuSpiStatus;
}

Spi_StatusErrorType Spi_enuIsWriteCollisionHappened(Spi_IsWriteCollisionHappenedType* Address_Result){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	08 95       	ret
	if(NULL == Address_Result){
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
     eb4:	82 e0       	ldi	r24, 0x02	; 2
	else{
		*Address_Result = Spi_isWirteCollisionHappened();
	}

	return Loc_enuSpiStatus;
}
     eb6:	08 95       	ret

00000eb8 <Spi_enuReceiveBlocking>:


Spi_StatusErrorType Spi_enuReceiveBlocking(pu8 Address_ReceiveDataFromMaster, u8 Copy_u8SendDataToMaster){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
	if(NULL == Address_ReceiveDataFromMaster){
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	41 f0       	breq	.+16     	; 0xecc <Spi_enuReceiveBlocking+0x14>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
	}
	else{

		// data that will send to master
		Spi_SetDataRegister(Copy_u8SendDataToMaster); // might cause logical error here
     ebc:	6f b9       	out	0x0f, r22	; 15
		while(Spi_IsRecevingDone() == ZERO_VALUE);
     ebe:	77 9b       	sbis	0x0e, 7	; 14
     ec0:	fe cf       	rjmp	.-4      	; 0xebe <Spi_enuReceiveBlocking+0x6>
		*Address_ReceiveDataFromMaster = Spi_GetDataRegister();
     ec2:	2f b1       	in	r18, 0x0f	; 15
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18
	return Loc_enuSpiStatus;
}


Spi_StatusErrorType Spi_enuReceiveBlocking(pu8 Address_ReceiveDataFromMaster, u8 Copy_u8SendDataToMaster){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	08 95       	ret
	if(NULL == Address_ReceiveDataFromMaster){
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
     ecc:	82 e0       	ldi	r24, 0x02	; 2
		*Address_ReceiveDataFromMaster = Spi_GetDataRegister();

	}

	return Loc_enuSpiStatus;
}
     ece:	08 95       	ret

00000ed0 <Spi_enuTransmitBlocking>:


Spi_StatusErrorType Spi_enuTransmitBlocking(u8 Copy_u8SlaveSelectPin, u8 Copy_u8SendData, pu8 Address_ReceiveDataFromSlave){
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
	if(NULL == Address_ReceiveDataFromSlave){
     ed8:	41 15       	cp	r20, r1
     eda:	51 05       	cpc	r21, r1
     edc:	91 f0       	breq	.+36     	; 0xf02 <Spi_enuTransmitBlocking+0x32>
     ede:	8a 01       	movw	r16, r20
     ee0:	d6 2f       	mov	r29, r22
     ee2:	c8 2f       	mov	r28, r24
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_LOW);
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
		Spi_SetDataRegister(Copy_u8SendData);
     eea:	df b9       	out	0x0f, r29	; 15
		while(Spi_IsTransmittingDone() == ZERO_VALUE);
     eec:	77 9b       	sbis	0x0e, 7	; 14
     eee:	fe cf       	rjmp	.-4      	; 0xeec <Spi_enuTransmitBlocking+0x1c>
		*Address_ReceiveDataFromSlave = Spi_GetDataRegister();
     ef0:	8f b1       	in	r24, 0x0f	; 15
     ef2:	f8 01       	movw	r30, r16
     ef4:	80 83       	st	Z, r24
		Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_HIGH);
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	8c 2f       	mov	r24, r28
     efa:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
	return Loc_enuSpiStatus;
}


Spi_StatusErrorType Spi_enuTransmitBlocking(u8 Copy_u8SlaveSelectPin, u8 Copy_u8SendData, pu8 Address_ReceiveDataFromSlave){
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <Spi_enuTransmitBlocking+0x34>
	if(NULL == Address_ReceiveDataFromSlave){
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
     f02:	82 e0       	ldi	r24, 0x02	; 2
		Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_HIGH);

	}

	return Loc_enuSpiStatus;
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <Spi_enuTransmitNonBlockingMasterMode>:



Spi_StatusErrorType Spi_enuTransmitNonBlockingMasterMode(u8 Copy_u8SlaveSelectPin, u8 Copy_u8SendDataToSlave){
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	c8 2f       	mov	r28, r24
     f14:	d6 2f       	mov	r29, r22

	// interrupt happens when transmiting is done, so read in ISR
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;

	Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_LOW);
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
	Global_StaticU8SlavePin = Copy_u8SlaveSelectPin;
     f1c:	c0 93 d3 06 	sts	0x06D3, r28	; 0x8006d3 <Global_StaticU8SlavePin>
	Spi_SetDataRegister(Copy_u8SendDataToSlave);
     f20:	df b9       	out	0x0f, r29	; 15


		return Loc_enuSpiStatus;
}
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <Spi_enuRecevingNonBlockingSlaveModeForever>:
Spi_StatusErrorType Spi_enuRecevingNonBlockingSlaveModeForever( u8 Copy_u8SendDataToMaster){
	// interrupt happens when transmiting is done, so read in ISR


		Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
		Spi_SetDataRegister(Copy_u8SendDataToMaster);
     f2a:	8f b9       	out	0x0f, r24	; 15

		return Loc_enuSpiStatus;

}
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	08 95       	ret

00000f30 <__vector_12>:


// ISR function For SPI
void __vector_12(void) __attribute__((signal));

void __vector_12(void){
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31

u8 Loc_u8Result ;
/* don't forget in master mode, to make ss high after reading from slave */

    if(NULL !=Spi_InterruptHandler ){
     f52:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <Spi_InterruptHandler>
     f56:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <Spi_InterruptHandler+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	11 f0       	breq	.+4      	; 0xf62 <__vector_12+0x32>

    	Loc_u8Result = Spi_GetDataRegister();
     f5e:	8f b1       	in	r24, 0x0f	; 15
    	Spi_InterruptHandler(Loc_u8Result);
     f60:	09 95       	icall
    	}

    }
    else {/*  error in declaration */   }

}
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	bf 91       	pop	r27
     f68:	af 91       	pop	r26
     f6a:	9f 91       	pop	r25
     f6c:	8f 91       	pop	r24
     f6e:	7f 91       	pop	r23
     f70:	6f 91       	pop	r22
     f72:	5f 91       	pop	r21
     f74:	4f 91       	pop	r20
     f76:	3f 91       	pop	r19
     f78:	2f 91       	pop	r18
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <Port_voidInit>:
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	8a bb       	out	0x1a, r24	; 26
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     f88:	8f eb       	ldi	r24, 0xBF	; 191
     f8a:	87 bb       	out	0x17, r24	; 23
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     f8c:	83 ec       	ldi	r24, 0xC3	; 195
     f8e:	84 bb       	out	0x14, r24	; 20

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     f90:	8e e3       	ldi	r24, 0x3E	; 62
     f92:	81 bb       	out	0x11, r24	; 17

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
     f94:	1b ba       	out	0x1b, r1	; 27
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
     f96:	80 e1       	ldi	r24, 0x10	; 16
     f98:	88 bb       	out	0x18, r24	; 24
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
     f9a:	8c ef       	ldi	r24, 0xFC	; 252
     f9c:	85 bb       	out	0x15, r24	; 21

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
     f9e:	8d e8       	ldi	r24, 0x8D	; 141
     fa0:	82 bb       	out	0x12, r24	; 18
     fa2:	08 95       	ret

00000fa4 <Port_enuSetPinDirection>:

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
	u8 Loc_PortNumber = Copy_u8PinNumber /8;

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     fa4:	80 32       	cpi	r24, 0x20	; 32
     fa6:	00 f5       	brcc	.+64     	; 0xfe8 <Port_enuSetPinDirection+0x44>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
     fa8:	62 30       	cpi	r22, 0x02	; 2
     faa:	00 f5       	brcc	.+64     	; 0xfec <Port_enuSetPinDirection+0x48>
}

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     fac:	38 2f       	mov	r19, r24
     fae:	37 70       	andi	r19, 0x07	; 7
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
     fb0:	86 95       	lsr	r24
     fb2:	86 95       	lsr	r24
     fb4:	86 95       	lsr	r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	fc 01       	movw	r30, r24
     fbe:	e9 5d       	subi	r30, 0xD9	; 217
     fc0:	fc 4f       	sbci	r31, 0xFC	; 252
     fc2:	01 90       	ld	r0, Z+
     fc4:	f0 81       	ld	r31, Z
     fc6:	e0 2d       	mov	r30, r0
     fc8:	20 81       	ld	r18, Z
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <Port_enuSetPinDirection+0x2e>
     fd0:	88 0f       	add	r24, r24
     fd2:	3a 95       	dec	r19
     fd4:	ea f7       	brpl	.-6      	; 0xfd0 <Port_enuSetPinDirection+0x2c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinDirection){
     fd6:	61 30       	cpi	r22, 0x01	; 1
     fd8:	11 f4       	brne	.+4      	; 0xfde <Port_enuSetPinDirection+0x3a>

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     fda:	82 2b       	or	r24, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <Port_enuSetPinDirection+0x3e>
					break;

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
     fde:	80 95       	com	r24
     fe0:	82 23       	and	r24, r18
     fe2:	80 83       	st	Z, r24

}

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
     fe4:	80 e0       	ldi	r24, 0x00	; 0
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
					break;

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
							break;
     fe6:	08 95       	ret
	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
	u8 Loc_PortNumber = Copy_u8PinNumber /8;

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	08 95       	ret
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
     fec:	81 e0       	ldi	r24, 0x01	; 1
	}



	return Loc_enuState;
}
     fee:	08 95       	ret

00000ff0 <Port_enuSetPinMode>:

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
	u8 Loc_PortNumber = Copy_u8PinNumber /8;

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
     ff0:	80 32       	cpi	r24, 0x20	; 32
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <Port_enuSetPinMode+0x6>
     ff4:	46 c0       	rjmp	.+140    	; 0x1082 <Port_enuSetPinMode+0x92>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
     ff6:	64 30       	cpi	r22, 0x04	; 4
     ff8:	08 f0       	brcs	.+2      	; 0xffc <Port_enuSetPinMode+0xc>
     ffa:	45 c0       	rjmp	.+138    	; 0x1086 <Port_enuSetPinMode+0x96>
	return Loc_enuState;
}
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
     ffc:	48 2f       	mov	r20, r24
     ffe:	47 70       	andi	r20, 0x07	; 7
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	86 95       	lsr	r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
							break;

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	fc 01       	movw	r30, r24
    100e:	e9 5d       	subi	r30, 0xD9	; 217
    1010:	fc 4f       	sbci	r31, 0xFC	; 252
    1012:	01 90       	ld	r0, Z+
    1014:	f0 81       	ld	r31, Z
    1016:	e0 2d       	mov	r30, r0
    1018:	50 81       	ld	r21, Z
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <Port_enuSetPinMode+0x32>
    1020:	22 0f       	add	r18, r18
    1022:	4a 95       	dec	r20
    1024:	ea f7       	brpl	.-6      	; 0x1020 <Port_enuSetPinMode+0x30>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
    1026:	62 30       	cpi	r22, 0x02	; 2
    1028:	81 f0       	breq	.+32     	; 0x104a <Port_enuSetPinMode+0x5a>
    102a:	63 30       	cpi	r22, 0x03	; 3
    102c:	d9 f0       	breq	.+54     	; 0x1064 <Port_enuSetPinMode+0x74>
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
					break;

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    102e:	35 2f       	mov	r19, r21
    1030:	32 2b       	or	r19, r18
    1032:	30 83       	st	Z, r19
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1034:	fc 01       	movw	r30, r24
    1036:	e1 5e       	subi	r30, 0xE1	; 225
    1038:	fc 4f       	sbci	r31, 0xFC	; 252
    103a:	01 90       	ld	r0, Z+
    103c:	f0 81       	ld	r31, Z
    103e:	e0 2d       	mov	r30, r0
    1040:	80 81       	ld	r24, Z
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
    1042:	61 30       	cpi	r22, 0x01	; 1
    1044:	d1 f4       	brne	.+52     	; 0x107a <Port_enuSetPinMode+0x8a>
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
					break;

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1046:	20 95       	com	r18
    1048:	0b c0       	rjmp	.+22     	; 0x1060 <Port_enuSetPinMode+0x70>
							break;

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    104a:	20 95       	com	r18
    104c:	35 2f       	mov	r19, r21
    104e:	32 23       	and	r19, r18
    1050:	30 83       	st	Z, r19
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1052:	fc 01       	movw	r30, r24
    1054:	e1 5e       	subi	r30, 0xE1	; 225
    1056:	fc 4f       	sbci	r31, 0xFC	; 252
    1058:	01 90       	ld	r0, Z+
    105a:	f0 81       	ld	r31, Z
    105c:	e0 2d       	mov	r30, r0
    105e:	80 81       	ld	r24, Z
    1060:	28 23       	and	r18, r24
    1062:	0c c0       	rjmp	.+24     	; 0x107c <Port_enuSetPinMode+0x8c>
								break;
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1064:	32 2f       	mov	r19, r18
    1066:	30 95       	com	r19
    1068:	35 23       	and	r19, r21
    106a:	30 83       	st	Z, r19
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    106c:	fc 01       	movw	r30, r24
    106e:	e1 5e       	subi	r30, 0xE1	; 225
    1070:	fc 4f       	sbci	r31, 0xFC	; 252
    1072:	01 90       	ld	r0, Z+
    1074:	f0 81       	ld	r31, Z
    1076:	e0 2d       	mov	r30, r0
    1078:	80 81       	ld	r24, Z
    107a:	28 2b       	or	r18, r24
    107c:	20 83       	st	Z, r18

	return Loc_enuState;
}
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    107e:	80 e0       	ldi	r24, 0x00	; 0
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
								break;
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
								break;
    1080:	08 95       	ret
	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
	u8 Loc_PortNumber = Copy_u8PinNumber /8;

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	08 95       	ret
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    1086:	81 e0       	ldi	r24, 0x01	; 1


	}

	return Loc_enuState;
}
    1088:	08 95       	ret

0000108a <I2c_enuInit>:



/********************************** Software Interfaces Declarations *******************/

I2c_StatusErrorType I2c_enuInit(const I2c_ConfigType* Address_I2c){
    108a:	8f 92       	push	r8
    108c:	9f 92       	push	r9
    108e:	af 92       	push	r10
    1090:	bf 92       	push	r11
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	ec 01       	movw	r28, r24
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
	if(NULL == Address_I2c){
    10a0:	89 2b       	or	r24, r25
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <I2c_enuInit+0x1c>
    10a4:	41 c0       	rjmp	.+130    	; 0x1128 <I2c_enuInit+0x9e>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
	}
	else{

		/* I2c Disable during Config */
		I2c_Disable();
    10a6:	86 b7       	in	r24, 0x36	; 54
    10a8:	8b 7f       	andi	r24, 0xFB	; 251
    10aa:	86 bf       	out	0x36, r24	; 54

		/* I2c Set Prescaler */
		I2c_SelectPrescaler(Address_I2c->select_prescale_value_twps);
    10ac:	8c 81       	ldd	r24, Y+4	; 0x04
    10ae:	81 b9       	out	0x01, r24	; 1

		/* I2c Set Clock COnfig */
		I2c_ConfigClock(Address_I2c->clock_freq,Address_I2c->select_prescale_value_twps);
    10b0:	88 80       	ld	r8, Y
    10b2:	99 80       	ldd	r9, Y+1	; 0x01
    10b4:	aa 80       	ldd	r10, Y+2	; 0x02
    10b6:	bb 80       	ldd	r11, Y+3	; 0x03
    10b8:	a0 ef       	ldi	r26, 0xF0	; 240
    10ba:	bf ef       	ldi	r27, 0xFF	; 255
    10bc:	a5 01       	movw	r20, r10
    10be:	94 01       	movw	r18, r8
    10c0:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <__mulohisi3>
    10c4:	6b 01       	movw	r12, r22
    10c6:	7c 01       	movw	r14, r24
    10c8:	24 e2       	ldi	r18, 0x24	; 36
    10ca:	d2 0e       	add	r13, r18
    10cc:	24 ef       	ldi	r18, 0xF4	; 244
    10ce:	e2 1e       	adc	r14, r18
    10d0:	f1 1c       	adc	r15, r1
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	a1 e0       	ldi	r26, 0x01	; 1
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <I2c_enuInit+0x5c>
    10e2:	aa 0f       	add	r26, r26
    10e4:	bb 1f       	adc	r27, r27
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <I2c_enuInit+0x58>
    10ea:	a5 01       	movw	r20, r10
    10ec:	94 01       	movw	r18, r8
    10ee:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__mulshisi3>
    10f2:	9b 01       	movw	r18, r22
    10f4:	ac 01       	movw	r20, r24
    10f6:	c7 01       	movw	r24, r14
    10f8:	b6 01       	movw	r22, r12
    10fa:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <__udivmodsi4>
    10fe:	20 b9       	out	0x00, r18	; 0

		if(Address_I2c->slave_address_or_minus_one_for_master_mode != I2C_MASTER_INDEX){
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	8f 3f       	cpi	r24, 0xFF	; 255
    1106:	2f ef       	ldi	r18, 0xFF	; 255
    1108:	92 07       	cpc	r25, r18
    110a:	31 f0       	breq	.+12     	; 0x1118 <I2c_enuInit+0x8e>
			I2c_SetAddress7Bit((Address_I2c->slave_address_or_minus_one_for_master_mode));
    110c:	22 b1       	in	r18, 0x02	; 2
    110e:	21 70       	andi	r18, 0x01	; 1
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	82 2b       	or	r24, r18
    1116:	82 b9       	out	0x02, r24	; 2
		}
		else { /* Do nothing */}

		/* I2c Enable */
		I2c_Enable();
    1118:	86 b7       	in	r24, 0x36	; 54
    111a:	84 60       	ori	r24, 0x04	; 4
    111c:	86 bf       	out	0x36, r24	; 54

		I2c_ClearFlag();
    111e:	86 b7       	in	r24, 0x36	; 54
    1120:	80 68       	ori	r24, 0x80	; 128
    1122:	86 bf       	out	0x36, r24	; 54


/********************************** Software Interfaces Declarations *******************/

I2c_StatusErrorType I2c_enuInit(const I2c_ConfigType* Address_I2c){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	01 c0       	rjmp	.+2      	; 0x112a <I2c_enuInit+0xa0>
	if(NULL == Address_I2c){
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    1128:	84 e0       	ldi	r24, 0x04	; 4

		I2c_ClearFlag();
	}

	return Loc_enuI2cStatus;
}
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	bf 90       	pop	r11
    1138:	af 90       	pop	r10
    113a:	9f 90       	pop	r9
    113c:	8f 90       	pop	r8
    113e:	08 95       	ret

00001140 <I2c_DeInit>:

I2c_StatusErrorType I2c_DeInit(const I2c_ConfigType* Address_I2c){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
	if(NULL == Address_I2c){
    1140:	89 2b       	or	r24, r25
    1142:	29 f0       	breq	.+10     	; 0x114e <I2c_DeInit+0xe>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		I2c_Disable();
    1144:	86 b7       	in	r24, 0x36	; 54
    1146:	8b 7f       	andi	r24, 0xFB	; 251
    1148:	86 bf       	out	0x36, r24	; 54

	return Loc_enuI2cStatus;
}

I2c_StatusErrorType I2c_DeInit(const I2c_ConfigType* Address_I2c){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	08 95       	ret
	if(NULL == Address_I2c){
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    114e:	84 e0       	ldi	r24, 0x04	; 4
	else{
		I2c_Disable();
	}

	return Loc_enuI2cStatus;
}
    1150:	08 95       	ret

00001152 <I2c_enuEnableInterrupt>:


I2c_StatusErrorType I2c_enuEnableInterrupt(void){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;

	I2c_EnableInterrupt();
    1152:	86 b7       	in	r24, 0x36	; 54
    1154:	81 60       	ori	r24, 0x01	; 1
    1156:	86 bf       	out	0x36, r24	; 54

	return Loc_enuI2cStatus;
}
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	08 95       	ret

0000115c <I2c_enuDisableInterrupt>:

I2c_StatusErrorType I2c_enuDisableInterrupt(void){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;

	I2c_DisableInterrupt();
    115c:	86 b7       	in	r24, 0x36	; 54
    115e:	8e 7f       	andi	r24, 0xFE	; 254
    1160:	86 bf       	out	0x36, r24	; 54

	return Loc_enuI2cStatus;
}
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	08 95       	ret

00001166 <I2c_enuSetCallbackFunction>:

I2c_StatusErrorType I2c_enuSetCallbackFunction(void (*callback)(u8 Copy_u8Status)){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
	if(NULL == callback){
    1166:	89 2b       	or	r24, r25
    1168:	11 f0       	breq	.+4      	; 0x116e <I2c_enuSetCallbackFunction+0x8>

	return Loc_enuI2cStatus;
}

I2c_StatusErrorType I2c_enuSetCallbackFunction(void (*callback)(u8 Copy_u8Status)){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	08 95       	ret
	if(NULL == callback){
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    116e:	84 e0       	ldi	r24, 0x04	; 4
	else{
		I2c_InterruptHandler = callback;
	}

	return Loc_enuI2cStatus;
}
    1170:	08 95       	ret

00001172 <I2c_enuIsWriteCollisionHappened>:


I2c_StatusErrorType I2c_enuIsWriteCollisionHappened(I2c_IsWriteCollisionHappenedType* Address_Result){
    1172:	fc 01       	movw	r30, r24
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
	if(NULL == Address_Result){
    1174:	89 2b       	or	r24, r25
    1176:	39 f0       	breq	.+14     	; 0x1186 <I2c_enuIsWriteCollisionHappened+0x14>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		*Address_Result = I2c_isWirteCollisionHappened();
    1178:	96 b7       	in	r25, 0x36	; 54
    117a:	93 fb       	bst	r25, 3
    117c:	99 27       	eor	r25, r25
    117e:	90 f9       	bld	r25, 0
    1180:	90 83       	st	Z, r25
	return Loc_enuI2cStatus;
}


I2c_StatusErrorType I2c_enuIsWriteCollisionHappened(I2c_IsWriteCollisionHappenedType* Address_Result){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	08 95       	ret
	if(NULL == Address_Result){
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    1186:	84 e0       	ldi	r24, 0x04	; 4
	else{
		*Address_Result = I2c_isWirteCollisionHappened();
	}

	return Loc_enuI2cStatus;
}
    1188:	08 95       	ret

0000118a <I2c_enuMasterTransmitStopConditionBlocking>:


I2c_StatusErrorType I2c_enuMasterTransmitStopConditionBlocking(void){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;

	I2c_DoJob();
    118a:	84 e8       	ldi	r24, 0x84	; 132
    118c:	86 bf       	out	0x36, r24	; 54
	I2c_StopCondition();
    118e:	84 e9       	ldi	r24, 0x94	; 148
    1190:	86 bf       	out	0x36, r24	; 54


	return Loc_enuI2cStatus;
}
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	08 95       	ret

00001196 <I2c_enuMasterTransmitRepeatedStartConditionBlocking>:
I2c_StatusErrorType I2c_enuMasterTransmitRepeatedStartConditionBlocking(void){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;

	I2c_StartCondition();
    1196:	84 ea       	ldi	r24, 0xA4	; 164
    1198:	86 bf       	out	0x36, r24	; 54
	while(I2c_IsTheJobDone() == ZERO_VALUE);
    119a:	06 b6       	in	r0, 0x36	; 54
    119c:	07 fe       	sbrs	r0, 7
    119e:	fd cf       	rjmp	.-6      	; 0x119a <I2c_enuMasterTransmitRepeatedStartConditionBlocking+0x4>


	return Loc_enuI2cStatus;
}
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	08 95       	ret

000011a4 <I2c_enuMasterTransmitStartConditionBlocking>:
    11a4:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <I2c_enuMasterTransmitRepeatedStartConditionBlocking>

000011a8 <I2c_enuMasterTransmitAddressReadingBlocking>:


/* send data/address */
I2c_StatusErrorType I2c_enuMasterTransmitAddressReadingBlocking(u8 Copy_u8SlaveAddress, u8* Address_ReceivedAck){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
	if(NULL == Address_ReceivedAck){
    11a8:	67 2b       	or	r22, r23
    11aa:	51 f0       	breq	.+20     	; 0x11c0 <I2c_enuMasterTransmitAddressReadingBlocking+0x18>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		I2c_SetDataRegister(((Copy_u8SlaveAddress<<ONE_VALUE)| ONE_VALUE));
    11ac:	88 0f       	add	r24, r24
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	83 b9       	out	0x03, r24	; 3
		I2c_DoJob();
    11b2:	84 e8       	ldi	r24, 0x84	; 132
    11b4:	86 bf       	out	0x36, r24	; 54
		while(I2c_IsTheJobDone() == ZERO_VALUE);
    11b6:	06 b6       	in	r0, 0x36	; 54
    11b8:	07 fe       	sbrs	r0, 7
    11ba:	fd cf       	rjmp	.-6      	; 0x11b6 <I2c_enuMasterTransmitAddressReadingBlocking+0xe>
}


/* send data/address */
I2c_StatusErrorType I2c_enuMasterTransmitAddressReadingBlocking(u8 Copy_u8SlaveAddress, u8* Address_ReceivedAck){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	08 95       	ret
	if(NULL == Address_ReceivedAck){
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    11c0:	84 e0       	ldi	r24, 0x04	; 4
		I2c_DoJob();
		while(I2c_IsTheJobDone() == ZERO_VALUE);
	}

	return Loc_enuI2cStatus;
}
    11c2:	08 95       	ret

000011c4 <I2c_enuMasterTransmitAddressWritingBlocking>:

I2c_StatusErrorType I2c_enuMasterTransmitAddressWritingBlocking(u8 Copy_u8SlaveAddress, u8* Address_ReceivedAck){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
	if(NULL == Address_ReceivedAck){
    11c4:	67 2b       	or	r22, r23
    11c6:	49 f0       	breq	.+18     	; 0x11da <I2c_enuMasterTransmitAddressWritingBlocking+0x16>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		I2c_SetDataRegister(Copy_u8SlaveAddress<<1);
    11c8:	88 0f       	add	r24, r24
    11ca:	83 b9       	out	0x03, r24	; 3
		I2c_DoJob();
    11cc:	84 e8       	ldi	r24, 0x84	; 132
    11ce:	86 bf       	out	0x36, r24	; 54
		while(I2c_IsTheJobDone() == ZERO_VALUE);
    11d0:	06 b6       	in	r0, 0x36	; 54
    11d2:	07 fe       	sbrs	r0, 7
    11d4:	fd cf       	rjmp	.-6      	; 0x11d0 <I2c_enuMasterTransmitAddressWritingBlocking+0xc>

	return Loc_enuI2cStatus;
}

I2c_StatusErrorType I2c_enuMasterTransmitAddressWritingBlocking(u8 Copy_u8SlaveAddress, u8* Address_ReceivedAck){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	08 95       	ret
	if(NULL == Address_ReceivedAck){
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    11da:	84 e0       	ldi	r24, 0x04	; 4
		I2c_SetDataRegister(Copy_u8SlaveAddress<<1);
		I2c_DoJob();
		while(I2c_IsTheJobDone() == ZERO_VALUE);
	}
	return Loc_enuI2cStatus;
}
    11dc:	08 95       	ret

000011de <I2c_enuMasterReceiveDataBlocking>:


/* receive data from buffer
 you've send sla +R before
 */
I2c_StatusErrorType I2c_enuMasterReceiveDataBlocking(u8* Address_ResultData, u8 Copy_u8SendAck){
    11de:	fc 01       	movw	r30, r24
    11e0:	96 2f       	mov	r25, r22
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
	if(NULL == Address_ResultData){
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	91 f0       	breq	.+36     	; 0x120a <I2c_enuMasterReceiveDataBlocking+0x2c>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
	}
	else{


		I2c_DoJob();
    11e6:	84 e8       	ldi	r24, 0x84	; 132
    11e8:	86 bf       	out	0x36, r24	; 54

		while(I2c_IsTheJobDone() == ZERO_VALUE);
    11ea:	06 b6       	in	r0, 0x36	; 54
    11ec:	07 fe       	sbrs	r0, 7
    11ee:	fd cf       	rjmp	.-6      	; 0x11ea <I2c_enuMasterReceiveDataBlocking+0xc>

		*Address_ResultData = I2c_GetDataRegister();
    11f0:	83 b1       	in	r24, 0x03	; 3
    11f2:	80 83       	st	Z, r24
		I2c_SetAck(Copy_u8SendAck);
    11f4:	66 b7       	in	r22, 0x36	; 54
    11f6:	86 2f       	mov	r24, r22
    11f8:	8f 7b       	andi	r24, 0xBF	; 191
    11fa:	20 e4       	ldi	r18, 0x40	; 64
    11fc:	92 9f       	mul	r25, r18
    11fe:	b0 01       	movw	r22, r0
    1200:	11 24       	eor	r1, r1
    1202:	68 2b       	or	r22, r24
    1204:	66 bf       	out	0x36, r22	; 54

/* receive data from buffer
 you've send sla +R before
 */
I2c_StatusErrorType I2c_enuMasterReceiveDataBlocking(u8* Address_ResultData, u8 Copy_u8SendAck){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	08 95       	ret
	if(NULL == Address_ResultData){
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    120a:	84 e0       	ldi	r24, 0x04	; 4


	}

	return Loc_enuI2cStatus;
}
    120c:	08 95       	ret

0000120e <I2c_enuSlaveTransmitDataBlocking>:



I2c_StatusErrorType I2c_enuSlaveTransmitDataBlocking(u8 Copy_u8Data, u8* Address_ReceivedAck){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
	if(NULL == Address_ReceivedAck){
    120e:	67 2b       	or	r22, r23
    1210:	41 f0       	breq	.+16     	; 0x1222 <I2c_enuSlaveTransmitDataBlocking+0x14>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		I2c_SetDataRegister(Copy_u8Data);
    1212:	83 b9       	out	0x03, r24	; 3
		I2c_DoJob();
    1214:	84 e8       	ldi	r24, 0x84	; 132
    1216:	86 bf       	out	0x36, r24	; 54
		while(I2c_IsTheJobDone() == ZERO_VALUE);
    1218:	06 b6       	in	r0, 0x36	; 54
    121a:	07 fe       	sbrs	r0, 7
    121c:	fd cf       	rjmp	.-6      	; 0x1218 <I2c_enuSlaveTransmitDataBlocking+0xa>
}



I2c_StatusErrorType I2c_enuSlaveTransmitDataBlocking(u8 Copy_u8Data, u8* Address_ReceivedAck){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	08 95       	ret
	if(NULL == Address_ReceivedAck){
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    1222:	84 e0       	ldi	r24, 0x04	; 4
		I2c_DoJob();
		while(I2c_IsTheJobDone() == ZERO_VALUE);
	}

	return Loc_enuI2cStatus;
}
    1224:	08 95       	ret

00001226 <I2c_enuMasterTransmitDataWritingBlocking>:
    1226:	0c 94 07 09 	jmp	0x120e	; 0x120e <I2c_enuSlaveTransmitDataBlocking>

0000122a <I2c_enuSlaveReceiveDataBlocking>:

I2c_StatusErrorType I2c_enuSlaveReceiveDataBlocking(u8* Address_ResultData, u8 Copy_u8SendAck){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
	if(NULL == Address_ResultData){
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	51 f0       	breq	.+20     	; 0x1242 <I2c_enuSlaveReceiveDataBlocking+0x18>
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
	}
	else{
		I2c_DoJob();
    122e:	24 e8       	ldi	r18, 0x84	; 132
    1230:	26 bf       	out	0x36, r18	; 54
		while(I2c_IsTheJobDone() == ZERO_VALUE);
    1232:	06 b6       	in	r0, 0x36	; 54
    1234:	07 fe       	sbrs	r0, 7
    1236:	fd cf       	rjmp	.-6      	; 0x1232 <I2c_enuSlaveReceiveDataBlocking+0x8>
		*Address_ResultData = I2c_GetDataRegister();
    1238:	23 b1       	in	r18, 0x03	; 3
    123a:	fc 01       	movw	r30, r24
    123c:	20 83       	st	Z, r18

	return Loc_enuI2cStatus;
}

I2c_StatusErrorType I2c_enuSlaveReceiveDataBlocking(u8* Address_ResultData, u8 Copy_u8SendAck){
	I2c_StatusErrorType Loc_enuI2cStatus = I2C_STATUS_OK;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	08 95       	ret
	if(NULL == Address_ResultData){
		Loc_enuI2cStatus = I2C_STATUS_NULL_POINTER_ADDRESS;
    1242:	84 e0       	ldi	r24, 0x04	; 4
		*Address_ResultData = I2c_GetDataRegister();

	}

	return Loc_enuI2cStatus;
}
    1244:	08 95       	ret

00001246 <Gie_enuEnableGlobalInterrupt>:


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;

	SET_BIT(SREG,GIE_BIT);
    1246:	8f b7       	in	r24, 0x3f	; 63
    1248:	80 68       	ori	r24, 0x80	; 128
    124a:	8f bf       	out	0x3f, r24	; 63

	return Loc_enuGieState;

}
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	08 95       	ret

00001250 <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;

		CLEAR_BIT(SREG,GIE_BIT);
    1250:	8f b7       	in	r24, 0x3f	; 63
    1252:	8f 77       	andi	r24, 0x7F	; 127
    1254:	8f bf       	out	0x3f, r24	; 63

		return Loc_enuGieState;
}
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	08 95       	ret

0000125a <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
    125a:	9f b7       	in	r25, 0x3f	; 63
    125c:	80 fb       	bst	r24, 0
    125e:	97 f9       	bld	r25, 7
    1260:	9f bf       	out	0x3f, r25	; 63

			return Loc_enuGieState;
}
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	08 95       	ret

00001266 <Gie_enuGetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;

	if(NULL == Address_GlobalStateResult){
    1266:	61 15       	cp	r22, r1
    1268:	71 05       	cpc	r23, r1
    126a:	41 f0       	breq	.+16     	; 0x127c <Gie_enuGetGloablInterrupt+0x16>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
    126c:	8f b7       	in	r24, 0x3f	; 63
    126e:	88 1f       	adc	r24, r24
    1270:	88 27       	eor	r24, r24
    1272:	88 1f       	adc	r24, r24
    1274:	fb 01       	movw	r30, r22
    1276:	80 83       	st	Z, r24
}


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	08 95       	ret

	if(NULL == Address_GlobalStateResult){
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
    127c:	82 e0       	ldi	r24, 0x02	; 2
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);

	}

			return Loc_enuGieState;
}
    127e:	08 95       	ret

00001280 <Dio_enuWriteChannel>:

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
	u8 Loc_PortNumber = Copy_u8ChannelId /8;

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    1280:	80 32       	cpi	r24, 0x20	; 32
    1282:	88 f5       	brcc	.+98     	; 0x12e6 <Dio_enuWriteChannel+0x66>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    1284:	28 2f       	mov	r18, r24
    1286:	26 95       	lsr	r18
    1288:	26 95       	lsr	r18
    128a:	26 95       	lsr	r18
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	22 0f       	add	r18, r18
    1290:	33 1f       	adc	r19, r19
    1292:	f9 01       	movw	r30, r18
    1294:	e1 5c       	subi	r30, 0xC1	; 193
    1296:	fc 4f       	sbci	r31, 0xFC	; 252
    1298:	01 90       	ld	r0, Z+
    129a:	f0 81       	ld	r31, Z
    129c:	e0 2d       	mov	r30, r0
    129e:	40 81       	ld	r20, Z
    12a0:	87 70       	andi	r24, 0x07	; 7
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	08 2e       	mov	r0, r24
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <Dio_enuWriteChannel+0x2c>
    12a8:	55 95       	asr	r21
    12aa:	47 95       	ror	r20
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <Dio_enuWriteChannel+0x28>
    12b0:	40 ff       	sbrs	r20, 0
    12b2:	1b c0       	rjmp	.+54     	; 0x12ea <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
    12b4:	f9 01       	movw	r30, r18
    12b6:	e9 5c       	subi	r30, 0xC9	; 201
    12b8:	fc 4f       	sbci	r31, 0xFC	; 252
    12ba:	01 90       	ld	r0, Z+
    12bc:	f0 81       	ld	r31, Z
    12be:	e0 2d       	mov	r30, r0
    12c0:	20 81       	ld	r18, Z
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	08 2e       	mov	r0, r24
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <Dio_enuWriteChannel+0x4c>
    12ca:	44 0f       	add	r20, r20
    12cc:	0a 94       	dec	r0
    12ce:	ea f7       	brpl	.-6      	; 0x12ca <Dio_enuWriteChannel+0x4a>
    12d0:	94 2f       	mov	r25, r20
    12d2:	90 95       	com	r25
    12d4:	92 23       	and	r25, r18
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <Dio_enuWriteChannel+0x5a>
    12d8:	66 0f       	add	r22, r22
    12da:	8a 95       	dec	r24
    12dc:	ea f7       	brpl	.-6      	; 0x12d8 <Dio_enuWriteChannel+0x58>
    12de:	69 2b       	or	r22, r25
    12e0:	60 83       	st	Z, r22

/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	08 95       	ret
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
	u8 Loc_PortNumber = Copy_u8ChannelId /8;

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	08 95       	ret
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );

}

	return Loc_enuState;
}
    12ec:	08 95       	ret

000012ee <Dio_enuReadChannel>:

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
		u8 Loc_PortNumber = Copy_u8ChannelId /8;

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    12ee:	80 32       	cpi	r24, 0x20	; 32
    12f0:	80 f5       	brcc	.+96     	; 0x1352 <Dio_enuReadChannel+0x64>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
    12f2:	28 2f       	mov	r18, r24
    12f4:	26 95       	lsr	r18
    12f6:	26 95       	lsr	r18
    12f8:	26 95       	lsr	r18
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	f9 01       	movw	r30, r18
    1302:	e1 5c       	subi	r30, 0xC1	; 193
    1304:	fc 4f       	sbci	r31, 0xFC	; 252
    1306:	01 90       	ld	r0, Z+
    1308:	f0 81       	ld	r31, Z
    130a:	e0 2d       	mov	r30, r0
    130c:	90 81       	ld	r25, Z
    130e:	48 2f       	mov	r20, r24
    1310:	47 70       	andi	r20, 0x07	; 7
    1312:	89 2f       	mov	r24, r25
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	04 2e       	mov	r0, r20
    1318:	02 c0       	rjmp	.+4      	; 0x131e <Dio_enuReadChannel+0x30>
    131a:	95 95       	asr	r25
    131c:	87 95       	ror	r24
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <Dio_enuReadChannel+0x2c>
    1322:	80 fd       	sbrc	r24, 0
    1324:	18 c0       	rjmp	.+48     	; 0x1356 <Dio_enuReadChannel+0x68>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
			}

		else if(Address_pu8ChannelLevel == NULL){
    1326:	61 15       	cp	r22, r1
    1328:	71 05       	cpc	r23, r1
    132a:	b9 f0       	breq	.+46     	; 0x135a <Dio_enuReadChannel+0x6c>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
    132c:	f9 01       	movw	r30, r18
    132e:	e1 5d       	subi	r30, 0xD1	; 209
    1330:	fc 4f       	sbci	r31, 0xFC	; 252
    1332:	01 90       	ld	r0, Z+
    1334:	f0 81       	ld	r31, Z
    1336:	e0 2d       	mov	r30, r0
    1338:	90 81       	ld	r25, Z
    133a:	89 2f       	mov	r24, r25
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <Dio_enuReadChannel+0x56>
    1340:	95 95       	asr	r25
    1342:	87 95       	ror	r24
    1344:	4a 95       	dec	r20
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <Dio_enuReadChannel+0x52>
    1348:	81 70       	andi	r24, 0x01	; 1
    134a:	fb 01       	movw	r30, r22
    134c:	80 83       	st	Z, r24

	return Loc_enuState;
}
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	08 95       	ret
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
		u8 Loc_PortNumber = Copy_u8ChannelId /8;

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	08 95       	ret
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	08 95       	ret
			}

		else if(Address_pu8ChannelLevel == NULL){
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    135a:	84 e0       	ldi	r24, 0x04	; 4

	}

		return Loc_enuState;

}
    135c:	08 95       	ret

0000135e <Dio_enuWritePort>:

Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    135e:	84 30       	cpi	r24, 0x04	; 4
    1360:	a8 f4       	brcc	.+42     	; 0x138c <Dio_enuWritePort+0x2e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	fc 01       	movw	r30, r24
    136a:	e1 5c       	subi	r30, 0xC1	; 193
    136c:	fc 4f       	sbci	r31, 0xFC	; 252
    136e:	01 90       	ld	r0, Z+
    1370:	f0 81       	ld	r31, Z
    1372:	e0 2d       	mov	r30, r0
    1374:	20 81       	ld	r18, Z
    1376:	2f 3f       	cpi	r18, 0xFF	; 255
    1378:	59 f4       	brne	.+22     	; 0x1390 <Dio_enuWritePort+0x32>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
    137a:	fc 01       	movw	r30, r24
    137c:	e9 5c       	subi	r30, 0xC9	; 201
    137e:	fc 4f       	sbci	r31, 0xFC	; 252
    1380:	01 90       	ld	r0, Z+
    1382:	f0 81       	ld	r31, Z
    1384:	e0 2d       	mov	r30, r0
    1386:	60 83       	st	Z, r22
}



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	08 95       	ret


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    138c:	83 e0       	ldi	r24, 0x03	; 3
    138e:	08 95       	ret
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1390:	81 e0       	ldi	r24, 0x01	; 1

		return Loc_enuState;



}
    1392:	08 95       	ret

00001394 <Dio_enuReadPort>:

Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	d0 f4       	brcc	.+52     	; 0x13cc <Dio_enuReadPort+0x38>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	fc 01       	movw	r30, r24
    13a0:	e1 5c       	subi	r30, 0xC1	; 193
    13a2:	fc 4f       	sbci	r31, 0xFC	; 252
    13a4:	01 90       	ld	r0, Z+
    13a6:	f0 81       	ld	r31, Z
    13a8:	e0 2d       	mov	r30, r0
    13aa:	20 81       	ld	r18, Z
    13ac:	21 11       	cpse	r18, r1
    13ae:	10 c0       	rjmp	.+32     	; 0x13d0 <Dio_enuReadPort+0x3c>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
				}

			else if(Address_pu8PortVAlue == NULL){
    13b0:	61 15       	cp	r22, r1
    13b2:	71 05       	cpc	r23, r1
    13b4:	79 f0       	breq	.+30     	; 0x13d4 <Dio_enuReadPort+0x40>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
    13b6:	fc 01       	movw	r30, r24
    13b8:	e1 5d       	subi	r30, 0xD1	; 209
    13ba:	fc 4f       	sbci	r31, 0xFC	; 252
    13bc:	01 90       	ld	r0, Z+
    13be:	f0 81       	ld	r31, Z
    13c0:	e0 2d       	mov	r30, r0
    13c2:	80 81       	ld	r24, Z
    13c4:	fb 01       	movw	r30, r22
    13c6:	80 83       	st	Z, r24

}


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	08 95       	ret


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	08 95       	ret
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	08 95       	ret
				}

			else if(Address_pu8PortVAlue == NULL){
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    13d4:	84 e0       	ldi	r24, 0x04	; 4

		}

			return Loc_enuState;

}
    13d6:	08 95       	ret

000013d8 <Dio_enuFlipChannel>:

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
		u8 Loc_PortNumber = Copy_u8ChannelId /8;

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    13d8:	80 32       	cpi	r24, 0x20	; 32
    13da:	60 f5       	brcc	.+88     	; 0x1434 <Dio_enuFlipChannel+0x5c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    13dc:	28 2f       	mov	r18, r24
    13de:	26 95       	lsr	r18
    13e0:	26 95       	lsr	r18
    13e2:	26 95       	lsr	r18
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	f9 01       	movw	r30, r18
    13ec:	e1 5c       	subi	r30, 0xC1	; 193
    13ee:	fc 4f       	sbci	r31, 0xFC	; 252
    13f0:	01 90       	ld	r0, Z+
    13f2:	f0 81       	ld	r31, Z
    13f4:	e0 2d       	mov	r30, r0
    13f6:	40 81       	ld	r20, Z
    13f8:	87 70       	andi	r24, 0x07	; 7
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	08 2e       	mov	r0, r24
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <Dio_enuFlipChannel+0x2c>
    1400:	55 95       	asr	r21
    1402:	47 95       	ror	r20
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <Dio_enuFlipChannel+0x28>
    1408:	40 ff       	sbrs	r20, 0
    140a:	16 c0       	rjmp	.+44     	; 0x1438 <Dio_enuFlipChannel+0x60>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
    140c:	f9 01       	movw	r30, r18
    140e:	e9 5c       	subi	r30, 0xC9	; 201
    1410:	fc 4f       	sbci	r31, 0xFC	; 252
    1412:	01 90       	ld	r0, Z+
    1414:	f0 81       	ld	r31, Z
    1416:	e0 2d       	mov	r30, r0
    1418:	40 81       	ld	r20, Z
    141a:	21 e0       	ldi	r18, 0x01	; 1
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	b9 01       	movw	r22, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <Dio_enuFlipChannel+0x4e>
    1422:	66 0f       	add	r22, r22
    1424:	77 1f       	adc	r23, r23
    1426:	8a 95       	dec	r24
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <Dio_enuFlipChannel+0x4a>
    142a:	cb 01       	movw	r24, r22
    142c:	84 27       	eor	r24, r20
    142e:	80 83       	st	Z, r24
			return Loc_enuState;

}
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
		u8 Loc_PortNumber = Copy_u8ChannelId /8;

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1434:	82 e0       	ldi	r24, 0x02	; 2
    1436:	08 95       	ret
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1438:	81 e0       	ldi	r24, 0x01	; 1
			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);

	}

		return Loc_enuState;
}
    143a:	08 95       	ret

0000143c <Servo_enuInitTimer1>:
/********************************** Software Interfaces Declarations *******************/

Servo_StatusErrorType Servo_enuInitTimer1(void){

	Servo_StatusErrorType Loc_enuServoStatusError = SERVO_STATUS_OK;
	Timer1_enuInit(&Timer1);
    143c:	87 e7       	ldi	r24, 0x77	; 119
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 2e 04 	call	0x85c	; 0x85c <Timer1_enuInit>
	Timer1_enuSetValueIcu(311);
    1444:	87 e3       	ldi	r24, 0x37	; 55
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 70 04 	call	0x8e0	; 0x8e0 <Timer1_enuSetValueIcu>
	Timer1_enuSetValueCompareChannelB(ZERO_VALUE);
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <Timer1_enuSetValueCompareChannelB>


	return Loc_enuServoStatusError;
}
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	08 95       	ret

00001458 <Servo_enuSetAngle>:
Servo_StatusErrorType Servo_enuSetAngle(u8 Copy_u8Angle){

	Servo_StatusErrorType Loc_enuServoStatusError = SERVO_STATUS_OK;
	Copy_u8Angle = (Copy_u8Angle>180)? 180 : Copy_u8Angle;
    1458:	85 3b       	cpi	r24, 0xB5	; 181
    145a:	08 f0       	brcs	.+2      	; 0x145e <Servo_enuSetAngle+0x6>
    145c:	84 eb       	ldi	r24, 0xB4	; 180
	 * time = (1ms/180)*a + b
	 * time = ticks* 1024/16M = (1ms/180)*a + b
	 * ticks = (25/288)*angle + (125/8)
	 *
	 */
	Timer1_enuSetValueCompareChannelB((u16)(Copy_u8Angle*25/288.0+(125/8.0)));
    145e:	99 e1       	ldi	r25, 0x19	; 25
    1460:	89 9f       	mul	r24, r25
    1462:	b0 01       	movw	r22, r0
    1464:	11 24       	eor	r1, r1
    1466:	07 2e       	mov	r0, r23
    1468:	00 0c       	add	r0, r0
    146a:	88 0b       	sbc	r24, r24
    146c:	99 0b       	sbc	r25, r25
    146e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__floatsisf>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e9       	ldi	r20, 0x90	; 144
    1478:	53 e4       	ldi	r21, 0x43	; 67
    147a:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <__divsf3>
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	4a e7       	ldi	r20, 0x7A	; 122
    1484:	51 e4       	ldi	r21, 0x41	; 65
    1486:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__addsf3>
    148a:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fixunssfsi>
    148e:	cb 01       	movw	r24, r22
    1490:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <Timer1_enuSetValueCompareChannelB>


	return Loc_enuServoStatusError;
}
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	08 95       	ret

00001498 <Rtc_enuGetSecond>:



/********************************** Software Interfaces Declarations *******************/

Rtc_StatusErrorType Rtc_enuGetSecond(u8* Address_Result){
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <Rtc_enuGetSecond+0xa>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	51 f1       	breq	.+84     	; 0x14fe <Rtc_enuGetSecond+0x66>
    14aa:	8c 01       	movw	r16, r24
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
	}
	else{

		I2c_enuMasterTransmitStartConditionBlocking();
    14ac:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    14b0:	be 01       	movw	r22, r28
    14b2:	6e 5f       	subi	r22, 0xFE	; 254
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	88 e6       	ldi	r24, 0x68	; 104
    14b8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_SECOND_REG_ADDRESS, &Loc_u8Temp);
    14bc:	be 01       	movw	r22, r28
    14be:	6e 5f       	subi	r22, 0xFE	; 254
    14c0:	7f 4f       	sbci	r23, 0xFF	; 255
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    14c8:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    14cc:	be 01       	movw	r22, r28
    14ce:	6e 5f       	subi	r22, 0xFE	; 254
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	88 e6       	ldi	r24, 0x68	; 104
    14d4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	ce 01       	movw	r24, r28
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	0e 94 ef 08 	call	0x11de	; 0x11de <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    14e2:	0e 94 c5 08 	call	0x118a	; 0x118a <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    14e6:	b8 01       	movw	r22, r16
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Convert_BCDToInt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14ee:	8f e9       	ldi	r24, 0x9F	; 159
    14f0:	9f e0       	ldi	r25, 0x0F	; 15
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <Rtc_enuGetSecond+0x5a>
    14f6:	00 c0       	rjmp	.+0      	; 0x14f8 <Rtc_enuGetSecond+0x60>
    14f8:	00 00       	nop

/********************************** Software Interfaces Declarations *******************/

Rtc_StatusErrorType Rtc_enuGetSecond(u8* Address_Result){

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <Rtc_enuGetSecond+0x68>
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
		I2c_enuMasterTransmitStopConditionBlocking();
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	08 95       	ret

0000150e <Rtc_enuGetMinute>:

Rtc_StatusErrorType Rtc_enuGetMinute(u8* Address_Result){
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	00 d0       	rcall	.+0      	; 0x1518 <Rtc_enuGetMinute+0xa>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	51 f1       	breq	.+84     	; 0x1574 <Rtc_enuGetMinute+0x66>
    1520:	8c 01       	movw	r16, r24
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
	}
	else{

		I2c_enuMasterTransmitStartConditionBlocking();
    1522:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    1526:	be 01       	movw	r22, r28
    1528:	6e 5f       	subi	r22, 0xFE	; 254
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	88 e6       	ldi	r24, 0x68	; 104
    152e:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_MINUTE_REG_ADDRESS, &Loc_u8Temp);
    1532:	be 01       	movw	r22, r28
    1534:	6e 5f       	subi	r22, 0xFE	; 254
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    153e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    1542:	be 01       	movw	r22, r28
    1544:	6e 5f       	subi	r22, 0xFE	; 254
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	88 e6       	ldi	r24, 0x68	; 104
    154a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	ce 01       	movw	r24, r28
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	0e 94 ef 08 	call	0x11de	; 0x11de <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    1558:	0e 94 c5 08 	call	0x118a	; 0x118a <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    155c:	b8 01       	movw	r22, r16
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Convert_BCDToInt>
    1564:	8f e9       	ldi	r24, 0x9F	; 159
    1566:	9f e0       	ldi	r25, 0x0F	; 15
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <Rtc_enuGetMinute+0x5a>
    156c:	00 c0       	rjmp	.+0      	; 0x156e <Rtc_enuGetMinute+0x60>
    156e:	00 00       	nop
	return Loc_enuRtcStatusError;
}

Rtc_StatusErrorType Rtc_enuGetMinute(u8* Address_Result){

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <Rtc_enuGetMinute+0x68>
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    1574:	81 e0       	ldi	r24, 0x01	; 1
		I2c_enuMasterTransmitStopConditionBlocking();
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <Rtc_enuGetHour>:
Rtc_StatusErrorType Rtc_enuGetHour(u8* Address_Result){
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	00 d0       	rcall	.+0      	; 0x158e <Rtc_enuGetHour+0xa>
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	51 f1       	breq	.+84     	; 0x15ea <Rtc_enuGetHour+0x66>
    1596:	8c 01       	movw	r16, r24
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
	}
	else{
		I2c_enuMasterTransmitStartConditionBlocking();
    1598:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    159c:	be 01       	movw	r22, r28
    159e:	6e 5f       	subi	r22, 0xFE	; 254
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	88 e6       	ldi	r24, 0x68	; 104
    15a4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_HOUR_REG_ADDRESS, &Loc_u8Temp);
    15a8:	be 01       	movw	r22, r28
    15aa:	6e 5f       	subi	r22, 0xFE	; 254
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    15b4:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    15b8:	be 01       	movw	r22, r28
    15ba:	6e 5f       	subi	r22, 0xFE	; 254
    15bc:	7f 4f       	sbci	r23, 0xFF	; 255
    15be:	88 e6       	ldi	r24, 0x68	; 104
    15c0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	0e 94 ef 08 	call	0x11de	; 0x11de <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    15ce:	0e 94 c5 08 	call	0x118a	; 0x118a <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    15d2:	b8 01       	movw	r22, r16
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Convert_BCDToInt>
    15da:	8f e9       	ldi	r24, 0x9F	; 159
    15dc:	9f e0       	ldi	r25, 0x0F	; 15
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <Rtc_enuGetHour+0x5a>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <Rtc_enuGetHour+0x60>
    15e4:	00 00       	nop
	}
	return Loc_enuRtcStatusError;
}
Rtc_StatusErrorType Rtc_enuGetHour(u8* Address_Result){

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <Rtc_enuGetHour+0x68>
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
		I2c_enuMasterTransmitStopConditionBlocking();
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	08 95       	ret

000015fa <Rtc_enuGetDay>:


Rtc_StatusErrorType Rtc_enuGetDay(u8* Address_Result){
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	00 d0       	rcall	.+0      	; 0x1604 <Rtc_enuGetDay+0xa>
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;

	if(NULL == Address_Result){
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	51 f1       	breq	.+84     	; 0x1660 <Rtc_enuGetDay+0x66>
    160c:	8c 01       	movw	r16, r24
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
	}
	else{
		I2c_enuMasterTransmitStartConditionBlocking();
    160e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    1612:	be 01       	movw	r22, r28
    1614:	6e 5f       	subi	r22, 0xFE	; 254
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	88 e6       	ldi	r24, 0x68	; 104
    161a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_DAY_REG_ADDRESS, &Loc_u8Temp);
    161e:	be 01       	movw	r22, r28
    1620:	6e 5f       	subi	r22, 0xFE	; 254
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	84 e0       	ldi	r24, 0x04	; 4
    1626:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    162a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    162e:	be 01       	movw	r22, r28
    1630:	6e 5f       	subi	r22, 0xFE	; 254
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	88 e6       	ldi	r24, 0x68	; 104
    1636:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	ce 01       	movw	r24, r28
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	0e 94 ef 08 	call	0x11de	; 0x11de <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    1644:	0e 94 c5 08 	call	0x118a	; 0x118a <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    1648:	b8 01       	movw	r22, r16
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Convert_BCDToInt>
    1650:	8f e9       	ldi	r24, 0x9F	; 159
    1652:	9f e0       	ldi	r25, 0x0F	; 15
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <Rtc_enuGetDay+0x5a>
    1658:	00 c0       	rjmp	.+0      	; 0x165a <Rtc_enuGetDay+0x60>
    165a:	00 00       	nop
}


Rtc_StatusErrorType Rtc_enuGetDay(u8* Address_Result){

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <Rtc_enuGetDay+0x68>
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;

	if(NULL == Address_Result){
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    1660:	81 e0       	ldi	r24, 0x01	; 1
		I2c_enuMasterTransmitStopConditionBlocking();
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <Rtc_enuGetMonth>:
Rtc_StatusErrorType Rtc_enuGetMonth( u8* Address_Result){
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	00 d0       	rcall	.+0      	; 0x167a <Rtc_enuGetMonth+0xa>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	51 f1       	breq	.+84     	; 0x16d6 <Rtc_enuGetMonth+0x66>
    1682:	8c 01       	movw	r16, r24
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
	}
	else{
		I2c_enuMasterTransmitStartConditionBlocking();
    1684:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    1688:	be 01       	movw	r22, r28
    168a:	6e 5f       	subi	r22, 0xFE	; 254
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	88 e6       	ldi	r24, 0x68	; 104
    1690:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_MONTH_REG_ADDRESS, &Loc_u8Temp);
    1694:	be 01       	movw	r22, r28
    1696:	6e 5f       	subi	r22, 0xFE	; 254
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
    169a:	85 e0       	ldi	r24, 0x05	; 5
    169c:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    16a0:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    16a4:	be 01       	movw	r22, r28
    16a6:	6e 5f       	subi	r22, 0xFE	; 254
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	88 e6       	ldi	r24, 0x68	; 104
    16ac:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	ce 01       	movw	r24, r28
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	0e 94 ef 08 	call	0x11de	; 0x11de <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    16ba:	0e 94 c5 08 	call	0x118a	; 0x118a <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    16be:	b8 01       	movw	r22, r16
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Convert_BCDToInt>
    16c6:	8f e9       	ldi	r24, 0x9F	; 159
    16c8:	9f e0       	ldi	r25, 0x0F	; 15
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <Rtc_enuGetMonth+0x5a>
    16ce:	00 c0       	rjmp	.+0      	; 0x16d0 <Rtc_enuGetMonth+0x60>
    16d0:	00 00       	nop
	}
	return Loc_enuRtcStatusError;
}
Rtc_StatusErrorType Rtc_enuGetMonth( u8* Address_Result){

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <Rtc_enuGetMonth+0x68>
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
		I2c_enuMasterTransmitStopConditionBlocking();
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	08 95       	ret

000016e6 <Rtc_enuGetYear>:
Rtc_StatusErrorType Rtc_enuGetYear(u8* Address_Result){
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <Rtc_enuGetYear+0xa>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	51 f1       	breq	.+84     	; 0x174c <Rtc_enuGetYear+0x66>
    16f8:	8c 01       	movw	r16, r24
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
	}
	else{
		I2c_enuMasterTransmitStartConditionBlocking();
    16fa:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    16fe:	be 01       	movw	r22, r28
    1700:	6e 5f       	subi	r22, 0xFE	; 254
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	88 e6       	ldi	r24, 0x68	; 104
    1706:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(RTC_YEAR_REG_ADDRESS, &Loc_u8Temp);
    170a:	be 01       	movw	r22, r28
    170c:	6e 5f       	subi	r22, 0xFE	; 254
    170e:	7f 4f       	sbci	r23, 0xFF	; 255
    1710:	86 e0       	ldi	r24, 0x06	; 6
    1712:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    1716:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(RTC_ADDRESS_7BIT, &Loc_u8Temp);
    171a:	be 01       	movw	r22, r28
    171c:	6e 5f       	subi	r22, 0xFE	; 254
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	88 e6       	ldi	r24, 0x68	; 104
    1722:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <I2c_enuMasterTransmitAddressReadingBlocking>
		I2c_enuMasterReceiveDataBlocking(&Loc_u8AnswerInBCD,I2c_NACK_VALUE);
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	ce 01       	movw	r24, r28
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	0e 94 ef 08 	call	0x11de	; 0x11de <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    1730:	0e 94 c5 08 	call	0x118a	; 0x118a <I2c_enuMasterTransmitStopConditionBlocking>
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
    1734:	b8 01       	movw	r22, r16
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Convert_BCDToInt>
    173c:	8f e9       	ldi	r24, 0x9F	; 159
    173e:	9f e0       	ldi	r25, 0x0F	; 15
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <Rtc_enuGetYear+0x5a>
    1744:	00 c0       	rjmp	.+0      	; 0x1746 <Rtc_enuGetYear+0x60>
    1746:	00 00       	nop
	}
	return Loc_enuRtcStatusError;
}
Rtc_StatusErrorType Rtc_enuGetYear(u8* Address_Result){

	Rtc_StatusErrorType Loc_enuRtcStatusError = RTC_STATUS_OK;
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	01 c0       	rjmp	.+2      	; 0x174e <Rtc_enuGetYear+0x68>
	u8 Loc_u8Temp;
	u8 Loc_u8AnswerInBCD;
	if(NULL == Address_Result){
		Loc_enuRtcStatusError = RTC_STATUS_FAIL;
    174c:	81 e0       	ldi	r24, 0x01	; 1
		I2c_enuMasterTransmitStopConditionBlocking();
		Convert_BCDToInt(Loc_u8AnswerInBCD, Address_Result);
		_delay_ms(1);
	}
	return Loc_enuRtcStatusError;
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	08 95       	ret

0000175c <Lcd_4bit_enuSet4BitsOnPins>:



//////////////////////////////////////*Implementation of Private Functions*////////////////////////////

static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	u8 Loc_u8Counter = ZERO_VALUE;
		if( NULL == Address_Lcd){
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	c1 f0       	breq	.+48     	; 0x179c <Lcd_4bit_enuSet4BitsOnPins+0x40>
    176c:	ec 01       	movw	r28, r24
    176e:	e1 2c       	mov	r14, r1
    1770:	f1 2c       	mov	r15, r1

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){

				 Loc_enuStatus =Dio_enuWriteChannel((Address_Lcd->lcd_data_pins[Loc_u8Counter]),(Copy_u8Data4Bits>>Loc_u8Counter)& ONE_VALUE);
    1772:	06 2f       	mov	r16, r22
    1774:	10 e0       	ldi	r17, 0x00	; 0
    1776:	b8 01       	movw	r22, r16
    1778:	0e 2c       	mov	r0, r14
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <Lcd_4bit_enuSet4BitsOnPins+0x24>
    177c:	75 95       	asr	r23
    177e:	67 95       	ror	r22
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <Lcd_4bit_enuSet4BitsOnPins+0x20>
    1784:	61 70       	andi	r22, 0x01	; 1
    1786:	89 91       	ld	r24, Y+
    1788:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
    178c:	9f ef       	ldi	r25, 0xFF	; 255
    178e:	e9 1a       	sub	r14, r25
    1790:	f9 0a       	sbc	r15, r25
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			 for(Loc_u8Counter =ZERO_VALUE; Loc_u8Counter<4;Loc_u8Counter++){
    1792:	94 e0       	ldi	r25, 0x04	; 4
    1794:	e9 16       	cp	r14, r25
    1796:	f1 04       	cpc	r15, r1
    1798:	71 f7       	brne	.-36     	; 0x1776 <Lcd_4bit_enuSet4BitsOnPins+0x1a>
    179a:	01 c0       	rjmp	.+2      	; 0x179e <Lcd_4bit_enuSet4BitsOnPins+0x42>
static Lcd_ErrorStatusType Lcd_4bit_enuSet4BitsOnPins(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data4Bits){

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	u8 Loc_u8Counter = ZERO_VALUE;
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    179c:	82 e0       	ldi	r24, 0x02	; 2



		return Loc_enuStatus;

}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	ff 90       	pop	r15
    17a8:	ef 90       	pop	r14
    17aa:	08 95       	ret

000017ac <Lcd_4bit_enuSendEnableSignal>:



static Lcd_ErrorStatusType Lcd_4bit_enuSendEnableSignal(const Lcd_4bitType* Address_Lcd){
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
		if( NULL == Address_Lcd){
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	79 f0       	breq	.+30     	; 0x17d2 <Lcd_4bit_enuSendEnableSignal+0x26>
    17b4:	ec 01       	movw	r28, r24
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17be:	8a e1       	ldi	r24, 0x1A	; 26
    17c0:	8a 95       	dec	r24
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <Lcd_4bit_enuSendEnableSignal+0x14>
    17c4:	00 c0       	rjmp	.+0      	; 0x17c6 <Lcd_4bit_enuSendEnableSignal+0x1a>
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05



		return Loc_enuStatus;

}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
		}
		else{

			   Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_HIGH);
			        _delay_us(5);
			  Loc_enuStatus = Dio_enuWriteChannel((Address_Lcd->lcd_enable_pin), DIO_LOW);
    17ce:	0c 94 40 09 	jmp	0x1280	; 0x1280 <Dio_enuWriteChannel>



		return Loc_enuStatus;

}
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <Lcd_4bit_enuSendCommand>:
	return Loc_enuStatus;

}


Lcd_ErrorStatusType Lcd_4bit_enuSendCommand(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Command){
    17da:	1f 93       	push	r17
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	Dio_ErrorStatusType Loc_enuDioStatus = DIO_STATUS_OK;
		if( NULL == Address_Lcd){
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	c9 f0       	breq	.+50     	; 0x1816 <Lcd_4bit_enuSendCommand+0x3c>
    17e4:	16 2f       	mov	r17, r22
    17e6:	ec 01       	movw	r28, r24
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else {

			Loc_enuDioStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin, DIO_LOW);
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
//			Loc_enuDioStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
    17f0:	61 2f       	mov	r22, r17
    17f2:	62 95       	swap	r22
    17f4:	6f 70       	andi	r22, 0x0F	; 15
    17f6:	ce 01       	movw	r24, r28
    17f8:	0e 94 ae 0b 	call	0x175c	; 0x175c <Lcd_4bit_enuSet4BitsOnPins>
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    17fc:	ce 01       	movw	r24, r28
    17fe:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <Lcd_4bit_enuSendEnableSignal>

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
    1802:	61 2f       	mov	r22, r17
    1804:	ce 01       	movw	r24, r28
    1806:	0e 94 ae 0b 	call	0x175c	; 0x175c <Lcd_4bit_enuSet4BitsOnPins>
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    180a:	ce 01       	movw	r24, r28
		// 1111 0000


		return Loc_enuStatus;

}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Command>>4) &0xF);  // higher nibble first
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);

			Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Command);  // lower nibble
			Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    1812:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <Lcd_4bit_enuSendEnableSignal>
		// 1111 0000


		return Loc_enuStatus;

}
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	08 95       	ret

00001820 <Lcd_4bit_enuInit>:


/********************************** Software Interfaces Declarations *******************/


Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	if( NULL == Address_lcd){
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	d9 f1       	breq	.+118    	; 0x189e <Lcd_4bit_enuInit+0x7e>
    1828:	ec 01       	movw	r28, r24
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

	}
	else{

			  Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    182a:	68 e3       	ldi	r22, 0x38	; 56
    182c:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1830:	8f e1       	ldi	r24, 0x1F	; 31
    1832:	9e e4       	ldi	r25, 0x4E	; 78
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <Lcd_4bit_enuInit+0x14>
    1838:	00 c0       	rjmp	.+0      	; 0x183a <Lcd_4bit_enuInit+0x1a>
    183a:	00 00       	nop
			        _delay_ms(5);
			   Loc_enuStatus=  Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    183c:	68 e3       	ldi	r22, 0x38	; 56
    183e:	ce 01       	movw	r24, r28
    1840:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1844:	e7 e5       	ldi	r30, 0x57	; 87
    1846:	f2 e0       	ldi	r31, 0x02	; 2
    1848:	31 97       	sbiw	r30, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <Lcd_4bit_enuInit+0x28>
    184c:	00 c0       	rjmp	.+0      	; 0x184e <Lcd_4bit_enuInit+0x2e>
    184e:	00 00       	nop
			       _delay_us(150);
			   Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_FUNCTION_SET_8_BIT_2_LINE_8_DOTS);
    1850:	68 e3       	ldi	r22, 0x38	; 56
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>

			       /* This is optional */
				   Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CLEAR_COMMAND);
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	ce 01       	movw	r24, r28
    185c:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_CURSOR_HOME);
    1860:	62 e0       	ldi	r22, 0x02	; 2
    1862:	ce 01       	movw	r24, r28
    1864:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_ENTRY_MODE_INC_SHIFT_OFF);
    1868:	66 e0       	ldi	r22, 0x06	; 6
    186a:	ce 01       	movw	r24, r28
    186c:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_DISPLAY_ON_UNDER_LINE_CURSOR_OFF_BLOCK_CURSOR_OFF);
    1870:	6c e0       	ldi	r22, 0x0C	; 12
    1872:	ce 01       	movw	r24, r28
    1874:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd, LCD_FUNCTION_SET_4_BIT_2_LINE_8_DOTS);
    1878:	68 e2       	ldi	r22, 0x28	; 40
    187a:	ce 01       	movw	r24, r28
    187c:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
			       Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_lcd,0x80);
    1880:	60 e8       	ldi	r22, 0x80	; 128
    1882:	ce 01       	movw	r24, r28
    1884:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
			       Loc_enuStatus= Lcd_4bit_enuSendCommand(Address_lcd,LCD_CLEAR_COMMAND);
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	ce 01       	movw	r24, r28
    188c:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1890:	ef e1       	ldi	r30, 0x1F	; 31
    1892:	fe e4       	ldi	r31, 0x4E	; 78
    1894:	31 97       	sbiw	r30, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <Lcd_4bit_enuInit+0x74>
    1898:	00 c0       	rjmp	.+0      	; 0x189a <Lcd_4bit_enuInit+0x7a>
    189a:	00 00       	nop
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <Lcd_4bit_enuInit+0x80>

Lcd_ErrorStatusType Lcd_4bit_enuInit(const Lcd_4bitType* Address_lcd){

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	if( NULL == Address_lcd){
		Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    189e:	82 e0       	ldi	r24, 0x02	; 2



	return Loc_enuStatus;

}
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <Lcd_4bit_enuDisplayCharacter>:

		return Loc_enuStatus;

}

Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacter(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data){
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
		if( NULL == Address_Lcd){
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	c9 f0       	breq	.+50     	; 0x18e2 <Lcd_4bit_enuDisplayCharacter+0x3c>
    18b0:	16 2f       	mov	r17, r22
    18b2:	ec 01       	movw	r28, r24

		}
		else{


				   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	8c 81       	ldd	r24, Y+4	; 0x04
    18b8:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    18bc:	61 2f       	mov	r22, r17
    18be:	62 95       	swap	r22
    18c0:	6f 70       	andi	r22, 0x0F	; 15
    18c2:	ce 01       	movw	r24, r28
    18c4:	0e 94 ae 0b 	call	0x175c	; 0x175c <Lcd_4bit_enuSet4BitsOnPins>
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    18c8:	ce 01       	movw	r24, r28
    18ca:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <Lcd_4bit_enuSendEnableSignal>

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    18ce:	61 2f       	mov	r22, r17
    18d0:	ce 01       	movw	r24, r28
    18d2:	0e 94 ae 0b 	call	0x175c	; 0x175c <Lcd_4bit_enuSet4BitsOnPins>
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    18d6:	ce 01       	movw	r24, r28



		return Loc_enuStatus;

}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	1f 91       	pop	r17

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);

			        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
			        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    18de:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <Lcd_4bit_enuSendEnableSignal>



		return Loc_enuStatus;

}
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	08 95       	ret

000018ec <Lcd_4bit_enuCreateCustomCharacter>:

		return Loc_enuStatus;

}

Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){
    18ec:	ef 92       	push	r14
    18ee:	ff 92       	push	r15
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	u8	Loc_u8Counter =ZERO_VALUE;
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	19 f1       	breq	.+70     	; 0x1942 <Lcd_4bit_enuCreateCustomCharacter+0x56>
    18fc:	61 15       	cp	r22, r1
    18fe:	71 05       	cpc	r23, r1
    1900:	01 f1       	breq	.+64     	; 0x1942 <Lcd_4bit_enuCreateCustomCharacter+0x56>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
    1902:	48 30       	cpi	r20, 0x08	; 8
    1904:	00 f5       	brcc	.+64     	; 0x1946 <Lcd_4bit_enuCreateCustomCharacter+0x5a>
    1906:	eb 01       	movw	r28, r22
    1908:	8c 01       	movw	r16, r24
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));
    190a:	64 2f       	mov	r22, r20
    190c:	66 0f       	add	r22, r22
    190e:	66 0f       	add	r22, r22
    1910:	66 0f       	add	r22, r22
    1912:	60 5c       	subi	r22, 0xC0	; 192
    1914:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    1918:	7e 01       	movw	r14, r28
    191a:	88 e0       	ldi	r24, 0x08	; 8
    191c:	e8 0e       	add	r14, r24
    191e:	f1 1c       	adc	r15, r1

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);
    1920:	69 91       	ld	r22, Y+
    1922:	c8 01       	movw	r24, r16
    1924:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
		}
		else{

			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
    1928:	ce 15       	cp	r28, r14
    192a:	df 05       	cpc	r29, r15
    192c:	c9 f7       	brne	.-14     	; 0x1920 <Lcd_4bit_enuCreateCustomCharacter+0x34>
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    192e:	60 e8       	ldi	r22, 0x80	; 128
    1930:	c8 01       	movw	r24, r16



		return Loc_enuStatus;

}
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
			Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,(LCD_CGRAM_START+(Copy_u8MemoryIndex*EIGHT_VALUE)));

			        for(Loc_u8Counter = ZERO_VALUE;Loc_u8Counter<EIGHT_VALUE;Loc_u8Counter++)
			            Lcd_4bit_enuDisplayCharacter(Address_Lcd, Address_pu8CustomCharacter[Loc_u8Counter]);

			        Loc_enuStatus = Lcd_4bit_enuSendCommand(Address_Lcd,0x80);
    193e:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
Lcd_ErrorStatusType Lcd_4bit_enuCreateCustomCharacter(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8CustomCharacter, u8 Copy_u8MemoryIndex){

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	u8	Loc_u8Counter =ZERO_VALUE;
		if( (NULL == Address_Lcd) || (NULL == Address_pu8CustomCharacter)){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	01 c0       	rjmp	.+2      	; 0x1948 <Lcd_4bit_enuCreateCustomCharacter+0x5c>

		}
		else if (Copy_u8MemoryIndex> LCD_MAX_INDEX_OF_CUSTOM_CHAR){
			Loc_enuStatus = LCD_STATUS_WRONG_CUSTOM_CHAR_INDEX;
    1946:	83 e0       	ldi	r24, 0x03	; 3



		return Loc_enuStatus;

}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	08 95       	ret

00001956 <Lcd_4bit_enuGoToXY>:

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
		if( NULL == Address_Lcd){
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	c1 f0       	breq	.+48     	; 0x198a <Lcd_4bit_enuGoToXY+0x34>
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
    195a:	65 30       	cpi	r22, 0x05	; 5
    195c:	c0 f4       	brcc	.+48     	; 0x198e <Lcd_4bit_enuGoToXY+0x38>
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
    195e:	45 31       	cpi	r20, 0x15	; 21
    1960:	c0 f4       	brcc	.+48     	; 0x1992 <Lcd_4bit_enuGoToXY+0x3c>
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;

			        switch(Copy_u8Row){
    1962:	62 30       	cpi	r22, 0x02	; 2
    1964:	59 f0       	breq	.+22     	; 0x197c <Lcd_4bit_enuGoToXY+0x26>
    1966:	20 f4       	brcc	.+8      	; 0x1970 <Lcd_4bit_enuGoToXY+0x1a>
    1968:	61 30       	cpi	r22, 0x01	; 1
    196a:	a9 f4       	brne	.+42     	; 0x1996 <Lcd_4bit_enuGoToXY+0x40>

			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
    196c:	6f e7       	ldi	r22, 0x7F	; 127
    196e:	09 c0       	rjmp	.+18     	; 0x1982 <Lcd_4bit_enuGoToXY+0x2c>
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;

			        switch(Copy_u8Row){
    1970:	63 30       	cpi	r22, 0x03	; 3
    1972:	31 f0       	breq	.+12     	; 0x1980 <Lcd_4bit_enuGoToXY+0x2a>
    1974:	64 30       	cpi	r22, 0x04	; 4
    1976:	79 f4       	brne	.+30     	; 0x1996 <Lcd_4bit_enuGoToXY+0x40>
			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
			                break;

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    1978:	63 ed       	ldi	r22, 0xD3	; 211
    197a:	03 c0       	rjmp	.+6      	; 0x1982 <Lcd_4bit_enuGoToXY+0x2c>
			            case LCD_ROW1:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x80+Copy_u8Col));
			                break;

			            case LCD_ROW2:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xc0+Copy_u8Col));
    197c:	6f eb       	ldi	r22, 0xBF	; 191
    197e:	01 c0       	rjmp	.+2      	; 0x1982 <Lcd_4bit_enuGoToXY+0x2c>
			                break;

			            case LCD_ROW3:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0x94+Copy_u8Col));
    1980:	63 e9       	ldi	r22, 0x93	; 147
			                break;

			            case LCD_ROW4:
			                Loc_enuStatus &= Lcd_4bit_enuSendCommand(Address_Lcd,(0xd4+Copy_u8Col));
    1982:	64 0f       	add	r22, r20
    1984:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    1988:	06 c0       	rjmp	.+12     	; 0x1996 <Lcd_4bit_enuGoToXY+0x40>

Lcd_ErrorStatusType Lcd_4bit_enuGoToXY(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Row, u8 Copy_u8Col){

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	08 95       	ret

		}
		else if (Copy_u8Row > LCD_ROW_NUMBERS){
			Loc_enuStatus = LCD_STATUS_WRONG_ROW_INDEX;
    198e:	85 e0       	ldi	r24, 0x05	; 5
    1990:	08 95       	ret
		}

		else if (Copy_u8Col > LCD_COL_NUMBERS){
			Loc_enuStatus = LCD_STATUS_WRONG_COL_INDEX;
    1992:	84 e0       	ldi	r24, 0x04	; 4
    1994:	08 95       	ret
		else{

			/* decrement col because use it as row1 col 1 which means col 0*/
			Copy_u8Col--;

			        switch(Copy_u8Row){
    1996:	80 e0       	ldi	r24, 0x00	; 0



		return Loc_enuStatus;

}
    1998:	08 95       	ret

0000199a <Lcd_4bit_enuDisplayCharacterWithPosition>:
		return Loc_enuStatus;

}


Lcd_ErrorStatusType Lcd_4bit_enuDisplayCharacterWithPosition(const Lcd_4bitType* Address_Lcd, u8 Copy_u8Data, u8 Copy_u8Row, u8 Copy_u8Col){
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	16 2f       	mov	r17, r22
    19a2:	64 2f       	mov	r22, r20
	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
			if( NULL == Address_Lcd){
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	d9 f0       	breq	.+54     	; 0x19de <Lcd_4bit_enuDisplayCharacterWithPosition+0x44>
    19a8:	42 2f       	mov	r20, r18
    19aa:	ec 01       	movw	r28, r24

			}
			else{


					    Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    19ac:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Lcd_4bit_enuGoToXY>
					   Loc_enuStatus  = Dio_enuWriteChannel(Address_Lcd->lcd_rs_pin,DIO_HIGH);
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	8c 81       	ldd	r24, Y+4	; 0x04
    19b4:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
	//			        Loc_enuStatus = Dio_enuWriteChannel(Address_Lcd->lcd_rw_pin,DIO_LOW);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
    19b8:	61 2f       	mov	r22, r17
    19ba:	62 95       	swap	r22
    19bc:	6f 70       	andi	r22, 0x0F	; 15
    19be:	ce 01       	movw	r24, r28
    19c0:	0e 94 ae 0b 	call	0x175c	; 0x175c <Lcd_4bit_enuSet4BitsOnPins>
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    19c4:	ce 01       	movw	r24, r28
    19c6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <Lcd_4bit_enuSendEnableSignal>

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
    19ca:	61 2f       	mov	r22, r17
    19cc:	ce 01       	movw	r24, r28
    19ce:	0e 94 ae 0b 	call	0x175c	; 0x175c <Lcd_4bit_enuSet4BitsOnPins>
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    19d2:	ce 01       	movw	r24, r28




			return Loc_enuStatus;
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,(Copy_u8Data>>4) &0xF);  // higher nibble first
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);

				        Loc_enuStatus = Lcd_4bit_enuSet4BitsOnPins(Address_Lcd,Copy_u8Data);  // lower nibble
				        Loc_enuStatus = Lcd_4bit_enuSendEnableSignal(Address_Lcd);
    19da:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <Lcd_4bit_enuSendEnableSignal>




			return Loc_enuStatus;
}
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	08 95       	ret

000019e8 <Lcd_4bit_enuDisplayStringWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayStringWithPosition(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String, u8 Copy_u8Row, u8 Copy_u8Col){
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	ec 01       	movw	r28, r24
    19f4:	94 2f       	mov	r25, r20

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	u8 Loc_u8Counter = ZERO_VALUE;
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    19f6:	20 97       	sbiw	r28, 0x00	; 0
    19f8:	a9 f0       	breq	.+42     	; 0x1a24 <Lcd_4bit_enuDisplayStringWithPosition+0x3c>
    19fa:	61 15       	cp	r22, r1
    19fc:	71 05       	cpc	r23, r1
    19fe:	91 f0       	breq	.+36     	; 0x1a24 <Lcd_4bit_enuDisplayStringWithPosition+0x3c>
    1a00:	42 2f       	mov	r20, r18
    1a02:	8b 01       	movw	r16, r22
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    1a04:	69 2f       	mov	r22, r25
    1a06:	ce 01       	movw	r24, r28
    1a08:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Lcd_4bit_enuGoToXY>
}

Lcd_ErrorStatusType Lcd_4bit_enuDisplayStringWithPosition(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String, u8 Copy_u8Row, u8 Copy_u8Col){

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	u8 Loc_u8Counter = ZERO_VALUE;
    1a0c:	f1 2c       	mov	r15, r1
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{
			Loc_enuStatus = Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
			while(Address_pu8String[Loc_u8Counter] !=0){
    1a0e:	f8 01       	movw	r30, r16
    1a10:	ef 0d       	add	r30, r15
    1a12:	f1 1d       	adc	r31, r1
    1a14:	60 81       	ld	r22, Z
    1a16:	66 23       	and	r22, r22
    1a18:	31 f0       	breq	.+12     	; 0x1a26 <Lcd_4bit_enuDisplayStringWithPosition+0x3e>
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
			            Loc_u8Counter++;
    1a20:	f3 94       	inc	r15
    1a22:	f5 cf       	rjmp	.-22     	; 0x1a0e <Lcd_4bit_enuDisplayStringWithPosition+0x26>
Lcd_ErrorStatusType Lcd_4bit_enuDisplayStringWithPosition(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String, u8 Copy_u8Row, u8 Copy_u8Col){

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	u8 Loc_u8Counter = ZERO_VALUE;
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1a24:	82 e0       	ldi	r24, 0x02	; 2



		return Loc_enuStatus;

}
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	08 95       	ret

00001a32 <Lcd_4bit_enuDisplayString>:

		return Loc_enuStatus;

}

Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	u8 Loc_u8Counter = ZERO_VALUE;
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	91 f0       	breq	.+36     	; 0x1a64 <Lcd_4bit_enuDisplayString+0x32>
    1a40:	61 15       	cp	r22, r1
    1a42:	71 05       	cpc	r23, r1
    1a44:	79 f0       	breq	.+30     	; 0x1a64 <Lcd_4bit_enuDisplayString+0x32>
    1a46:	7b 01       	movw	r14, r22
    1a48:	ec 01       	movw	r28, r24
    1a4a:	10 e0       	ldi	r17, 0x00	; 0
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			while(Address_pu8String[Loc_u8Counter] !=0){
    1a4e:	f7 01       	movw	r30, r14
    1a50:	e1 0f       	add	r30, r17
    1a52:	f1 1d       	adc	r31, r1
    1a54:	60 81       	ld	r22, Z
    1a56:	66 23       	and	r22, r22
    1a58:	31 f0       	breq	.+12     	; 0x1a66 <Lcd_4bit_enuDisplayString+0x34>
			            Loc_enuStatus = Lcd_4bit_enuDisplayCharacter(Address_Lcd,Address_pu8String[Loc_u8Counter]);
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
			            Loc_u8Counter++;
    1a60:	1f 5f       	subi	r17, 0xFF	; 255
    1a62:	f5 cf       	rjmp	.-22     	; 0x1a4e <Lcd_4bit_enuDisplayString+0x1c>
Lcd_ErrorStatusType Lcd_4bit_enuDisplayString(const Lcd_4bitType* Address_Lcd, pu8 Address_pu8String){

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	u8 Loc_u8Counter = ZERO_VALUE;
		if( (NULL == Address_Lcd) || (NULL == Address_pu8String)){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1a64:	82 e0       	ldi	r24, 0x02	; 2



		return Loc_enuStatus;

}
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	08 95       	ret

00001a72 <Lcd_4bit_enuDisplayNumber>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumber(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number){
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	c4 56       	subi	r28, 0x64	; 100
    1a80:	d1 09       	sbc	r29, r1
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	9c 01       	movw	r18, r24

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    1a8e:	89 2b       	or	r24, r25
    1a90:	79 f0       	breq	.+30     	; 0x1ab0 <Lcd_4bit_enuDisplayNumber+0x3e>
    1a92:	cb 01       	movw	r24, r22
    1a94:	ba 01       	movw	r22, r20
    1a96:	89 01       	movw	r16, r18
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    1a98:	ae 01       	movw	r20, r28
    1a9a:	4f 5f       	subi	r20, 0xFF	; 255
    1a9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9e:	0e 94 83 00 	call	0x106	; 0x106 <Convert_IntToString>
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    1aa2:	be 01       	movw	r22, r28
    1aa4:	6f 5f       	subi	r22, 0xFF	; 255
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Lcd_4bit_enuDisplayString>
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <Lcd_4bit_enuDisplayNumber+0x40>

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1ab0:	82 e0       	ldi	r24, 0x02	; 2



		return Loc_enuStatus;

}
    1ab2:	cc 59       	subi	r28, 0x9C	; 156
    1ab4:	df 4f       	sbci	r29, 0xFF	; 255
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

00001aca <Lcd_4bit_enuDisplayNumberWithPosition>:

Lcd_ErrorStatusType Lcd_4bit_enuDisplayNumberWithPosition(const Lcd_4bitType* Address_Lcd, u32 Copy_u32Number, u8 Copy_u8Row, u8 Copy_u8Col){
    1aca:	ef 92       	push	r14
    1acc:	ff 92       	push	r15
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	c4 56       	subi	r28, 0x64	; 100
    1adc:	d1 09       	sbc	r29, r1
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	fc 01       	movw	r30, r24

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    1aea:	89 2b       	or	r24, r25
    1aec:	a9 f0       	breq	.+42     	; 0x1b18 <Lcd_4bit_enuDisplayNumberWithPosition+0x4e>
    1aee:	12 2f       	mov	r17, r18
    1af0:	cb 01       	movw	r24, r22
    1af2:	ba 01       	movw	r22, r20
    1af4:	7f 01       	movw	r14, r30
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			Loc_enuStdStatus= Convert_IntToString(Copy_u32Number, Loc_u8ConvertedNumberInArray);
    1af6:	ae 01       	movw	r20, r28
    1af8:	4f 5f       	subi	r20, 0xFF	; 255
    1afa:	5f 4f       	sbci	r21, 0xFF	; 255
    1afc:	0e 94 83 00 	call	0x106	; 0x106 <Convert_IntToString>
			Lcd_4bit_enuGoToXY(Address_Lcd, Copy_u8Row, Copy_u8Col);
    1b00:	40 2f       	mov	r20, r16
    1b02:	61 2f       	mov	r22, r17
    1b04:	c7 01       	movw	r24, r14
    1b06:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Lcd_4bit_enuGoToXY>
			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
    1b0a:	be 01       	movw	r22, r28
    1b0c:	6f 5f       	subi	r22, 0xFF	; 255
    1b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b10:	c7 01       	movw	r24, r14
    1b12:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Lcd_4bit_enuDisplayString>
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <Lcd_4bit_enuDisplayNumberWithPosition+0x50>

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1b18:	82 e0       	ldi	r24, 0x02	; 2



		return Loc_enuStatus;

}
    1b1a:	cc 59       	subi	r28, 0x9C	; 156
    1b1c:	df 4f       	sbci	r29, 0xFF	; 255
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	08 95       	ret

00001b36 <Lcd_4bit_enuDisplayFloatNumber>:



Lcd_ErrorStatusType Lcd_4bit_enuDisplayFloatNumber(const Lcd_4bitType* Address_Lcd, f64 Copy_f64Number){
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	c4 56       	subi	r28, 0x64	; 100
    1b44:	d1 09       	sbc	r29, r1
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	9c 01       	movw	r18, r24

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
    1b52:	89 2b       	or	r24, r25
    1b54:	79 f0       	breq	.+30     	; 0x1b74 <Lcd_4bit_enuDisplayFloatNumber+0x3e>
    1b56:	cb 01       	movw	r24, r22
    1b58:	ba 01       	movw	r22, r20
    1b5a:	89 01       	movw	r16, r18
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;

		}
		else{

			Loc_enuStdStatus= Convert_FloatToString(Copy_f64Number, Loc_u8ConvertedNumberInArray);
    1b5c:	ae 01       	movw	r20, r28
    1b5e:	4f 5f       	subi	r20, 0xFF	; 255
    1b60:	5f 4f       	sbci	r21, 0xFF	; 255
    1b62:	0e 94 9e 00 	call	0x13c	; 0x13c <Convert_FloatToString>
//			Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd,Loc_u8ConvertedNumberInArray);
				Loc_enuStatus = Lcd_4bit_enuDisplayString(Address_Lcd, Loc_u8ConvertedNumberInArray);
    1b66:	be 01       	movw	r22, r28
    1b68:	6f 5f       	subi	r22, 0xFF	; 255
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	c8 01       	movw	r24, r16
    1b6e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Lcd_4bit_enuDisplayString>
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <Lcd_4bit_enuDisplayFloatNumber+0x40>

	Lcd_ErrorStatusType Loc_enuStatus = LCD_STATUS_OK;
	Std_StatusType Loc_enuStdStatus = STD_STATUS_OK;
	u8 Loc_u8ConvertedNumberInArray[100];
		if( NULL == Address_Lcd){
			Loc_enuStatus = LCD_STATUS_NULL_POINTER_ADDRESS;
    1b74:	82 e0       	ldi	r24, 0x02	; 2



		return Loc_enuStatus;

}
    1b76:	cc 59       	subi	r28, 0x9C	; 156
    1b78:	df 4f       	sbci	r29, 0xFF	; 255
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <Keypad_enuRead>:


/********************************** Software Interfaces Declarations *******************/


Keypad_ErrorStatusType Keypad_enuRead(const Keypad_ConfigType* Address_Keypad, pu8 Address_ResultValue){
    1b8e:	2f 92       	push	r2
    1b90:	3f 92       	push	r3
    1b92:	4f 92       	push	r4
    1b94:	5f 92       	push	r5
    1b96:	6f 92       	push	r6
    1b98:	7f 92       	push	r7
    1b9a:	8f 92       	push	r8
    1b9c:	9f 92       	push	r9
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <Keypad_enuRead+0x26>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <Keypad_enuRead+0x28>
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	extern const u8 Keypad_Matrix[KEYPAD_ROWS_NUMBER][KEYPAD_COLS_NUMBER];
	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
	Dio_ErrorStatusType Loc_DioStatusError =DIO_STATUS_OK;
	u8 Loc_u8RowsCounter = ZERO_VALUE;
	u8 Loc_u8ColsCounter = ZERO_VALUE;
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
    1bba:	fc 01       	movw	r30, r24
    1bbc:	21 85       	ldd	r18, Z+9	; 0x09
    1bbe:	29 83       	std	Y+1, r18	; 0x01
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <Keypad_enuRead+0x38>
    1bc4:	be c0       	rjmp	.+380    	; 0x1d42 <Keypad_enuRead+0x1b4>
    1bc6:	61 15       	cp	r22, r1
    1bc8:	71 05       	cpc	r23, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <Keypad_enuRead+0x40>
    1bcc:	bd c0       	rjmp	.+378    	; 0x1d48 <Keypad_enuRead+0x1ba>
    1bce:	1b 01       	movw	r2, r22
    1bd0:	8c 01       	movw	r16, r24
		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
	    }

	else{

	        switch(Address_Keypad->keypad_control_pins){
    1bd2:	80 85       	ldd	r24, Z+8	; 0x08
    1bd4:	88 23       	and	r24, r24
    1bd6:	59 f0       	breq	.+22     	; 0x1bee <Keypad_enuRead+0x60>
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	29 f5       	brne	.+74     	; 0x1c26 <Keypad_enuRead+0x98>
    1bdc:	7f 01       	movw	r14, r30
    1bde:	84 e0       	ldi	r24, 0x04	; 4
    1be0:	e8 0e       	add	r14, r24
    1be2:	f1 1c       	adc	r15, r1
    1be4:	6f 01       	movw	r12, r30
    1be6:	e8 e0       	ldi	r30, 0x08	; 8
    1be8:	ce 0e       	add	r12, r30
    1bea:	d1 1c       	adc	r13, r1
    1bec:	11 c0       	rjmp	.+34     	; 0x1c10 <Keypad_enuRead+0x82>
    1bee:	7f 01       	movw	r14, r30
    1bf0:	6f 01       	movw	r12, r30
    1bf2:	f4 e0       	ldi	r31, 0x04	; 4
    1bf4:	cf 0e       	add	r12, r31
    1bf6:	d1 1c       	adc	r13, r1
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	61 85       	ldd	r22, Z+9	; 0x09
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	81 91       	ld	r24, Z+
    1c00:	7f 01       	movw	r14, r30
    1c02:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
	else{

	        switch(Address_Keypad->keypad_control_pins){
	            case KEYPAD_ROW_CONTROL:

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_ROWS_NUMBER;Loc_u8Counter++){
    1c06:	ce 14       	cp	r12, r14
    1c08:	df 04       	cpc	r13, r15
    1c0a:	b1 f7       	brne	.-20     	; 0x1bf8 <Keypad_enuRead+0x6a>


/********************************** Static  Interfaces Implementation *******************/
static Keypad_ErrorStatusType Keypad_DisableControlPins(const Keypad_ConfigType* Address_Keypad){

	Keypad_ErrorStatusType Loc_KeypadStatusError =KEYPAD_STATUS_NOT_PRESSED;
    1c0c:	f3 e0       	ldi	r31, 0x03	; 3
    1c0e:	0c c0       	rjmp	.+24     	; 0x1c28 <Keypad_enuRead+0x9a>
	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
    1c10:	f8 01       	movw	r30, r16
    1c12:	61 85       	ldd	r22, Z+9	; 0x09
    1c14:	f7 01       	movw	r30, r14
    1c16:	81 91       	ld	r24, Z+
    1c18:	7f 01       	movw	r14, r30
    1c1a:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>

	                break;

	            case KEYPAD_COL_CONTROL :

	                for(Loc_u8Counter=ZERO_VALUE;Loc_u8Counter<KEYPAD_COLS_NUMBER;Loc_u8Counter++){
    1c1e:	ec 14       	cp	r14, r12
    1c20:	fd 04       	cpc	r15, r13
    1c22:	b1 f7       	brne	.-20     	; 0x1c10 <Keypad_enuRead+0x82>
    1c24:	f3 cf       	rjmp	.-26     	; 0x1c0c <Keypad_enuRead+0x7e>
	                	Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8Counter]), Address_Keypad->keypad_idle_volt);
	                }
	                break;

	            default :
	                Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    1c26:	f1 e0       	ldi	r31, 0x01	; 1
    1c28:	fa 83       	std	Y+2, r31	; 0x02
	    }

	     else{
	    	  Loc_KeypadStatusError = Keypad_DisableControlPins(Address_Keypad);

	    	  switch(Address_Keypad->keypad_control_pins){
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	80 85       	ldd	r24, Z+8	; 0x08
    1c2e:	88 23       	and	r24, r24
    1c30:	89 f0       	breq	.+34     	; 0x1c54 <Keypad_enuRead+0xc6>
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <Keypad_enuRead+0xaa>
    1c36:	8b c0       	rjmp	.+278    	; 0x1d4e <Keypad_enuRead+0x1c0>
    1c38:	38 01       	movw	r6, r16
    1c3a:	84 e0       	ldi	r24, 0x04	; 4
    1c3c:	68 0e       	add	r6, r24
    1c3e:	71 1c       	adc	r7, r1
    1c40:	87 e4       	ldi	r24, 0x47	; 71
    1c42:	c8 2e       	mov	r12, r24
    1c44:	83 e0       	ldi	r24, 0x03	; 3
    1c46:	d8 2e       	mov	r13, r24
    1c48:	28 01       	movw	r4, r16
    1c4a:	e8 e0       	ldi	r30, 0x08	; 8
    1c4c:	4e 0e       	add	r4, r30
    1c4e:	51 1c       	adc	r5, r1
    1c50:	73 01       	movw	r14, r6
    1c52:	6e c0       	rjmp	.+220    	; 0x1d30 <Keypad_enuRead+0x1a2>
    1c54:	78 01       	movw	r14, r16
    1c56:	97 e4       	ldi	r25, 0x47	; 71
    1c58:	c9 2e       	mov	r12, r25
    1c5a:	93 e0       	ldi	r25, 0x03	; 3
    1c5c:	d9 2e       	mov	r13, r25
    1c5e:	58 01       	movw	r10, r16
    1c60:	f4 e0       	ldi	r31, 0x04	; 4
    1c62:	af 0e       	add	r10, r31
    1c64:	b1 1c       	adc	r11, r1
    1c66:	27 01       	movw	r4, r14
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    1c68:	61 e0       	ldi	r22, 0x01	; 1
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	81 85       	ldd	r24, Z+9	; 0x09
    1c6e:	81 11       	cpse	r24, r1
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	f7 01       	movw	r30, r14
    1c74:	80 81       	ld	r24, Z
    1c76:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
    1c7a:	35 01       	movw	r6, r10
    1c7c:	81 2c       	mov	r8, r1
    1c7e:	91 2c       	mov	r9, r1

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), &Loc_u8Check);
    1c80:	be 01       	movw	r22, r28
    1c82:	6f 5f       	subi	r22, 0xFF	; 255
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	f3 01       	movw	r30, r6
    1c88:	81 91       	ld	r24, Z+
    1c8a:	3f 01       	movw	r6, r30
    1c8c:	0e 94 77 09 	call	0x12ee	; 0x12ee <Dio_enuReadChannel>

	    	                         if( Loc_u8Check != Address_Keypad->keypad_idle_volt )
    1c90:	f8 01       	movw	r30, r16
    1c92:	91 85       	ldd	r25, Z+9	; 0x09
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	98 17       	cp	r25, r24
    1c98:	39 f0       	breq	.+14     	; 0x1ca8 <Keypad_enuRead+0x11a>
	    	                         {
	    	                              *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    1c9a:	f6 01       	movw	r30, r12
    1c9c:	e8 0d       	add	r30, r8
    1c9e:	f9 1d       	adc	r31, r9
    1ca0:	80 81       	ld	r24, Z
    1ca2:	f1 01       	movw	r30, r2
    1ca4:	80 83       	st	Z, r24
	    	                              Loc_KeypadStatusError = KEYPAD_IS_PRESSED;
    1ca6:	1a 82       	std	Y+2, r1	; 0x02
    1ca8:	ff ef       	ldi	r31, 0xFF	; 255
    1caa:	8f 1a       	sub	r8, r31
    1cac:	9f 0a       	sbc	r9, r31
	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read col */
	    	                     for(Loc_u8ColsCounter= ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1cae:	84 e0       	ldi	r24, 0x04	; 4
    1cb0:	88 16       	cp	r8, r24
    1cb2:	91 04       	cpc	r9, r1
    1cb4:	29 f7       	brne	.-54     	; 0x1c80 <Keypad_enuRead+0xf2>
    1cb6:	ef ef       	ldi	r30, 0xFF	; 255
    1cb8:	ee 1a       	sub	r14, r30
    1cba:	fe 0a       	sbc	r15, r30
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]), Address_Keypad->keypad_idle_volt  );
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	61 85       	ldd	r22, Z+9	; 0x09
    1cc0:	f2 01       	movw	r30, r4
    1cc2:	80 81       	ld	r24, Z
    1cc4:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
    1cc8:	f4 e0       	ldi	r31, 0x04	; 4
    1cca:	cf 0e       	add	r12, r31
    1ccc:	d1 1c       	adc	r13, r1

	    	  switch(Address_Keypad->keypad_control_pins){
	    	             case KEYPAD_ROW_CONTROL:

	    	                 /* first thing : active row */
	    	                 for(Loc_u8RowsCounter=ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_ROWS_NUMBER;Loc_u8RowsCounter++){
    1cce:	ae 14       	cp	r10, r14
    1cd0:	bf 04       	cpc	r11, r15
    1cd2:	49 f6       	brne	.-110    	; 0x1c66 <Keypad_enuRead+0xd8>
    1cd4:	3e c0       	rjmp	.+124    	; 0x1d52 <Keypad_enuRead+0x1c4>

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    1cd6:	f7 01       	movw	r30, r14
    1cd8:	80 81       	ld	r24, Z
    1cda:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
    1cde:	58 01       	movw	r10, r16
    1ce0:	46 01       	movw	r8, r12

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
	    	                    	 Loc_DioStatusError = Dio_enuReadChannel((Address_Keypad->keypad_rows_pins[Loc_u8RowsCounter]),&Loc_u8Check );
    1ce2:	be 01       	movw	r22, r28
    1ce4:	6f 5f       	subi	r22, 0xFF	; 255
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	f5 01       	movw	r30, r10
    1cea:	81 91       	ld	r24, Z+
    1cec:	5f 01       	movw	r10, r30
    1cee:	0e 94 77 09 	call	0x12ee	; 0x12ee <Dio_enuReadChannel>

	    	                         if(Loc_u8Check != Address_Keypad->keypad_idle_volt )
    1cf2:	f8 01       	movw	r30, r16
    1cf4:	91 85       	ldd	r25, Z+9	; 0x09
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	98 17       	cp	r25, r24
    1cfa:	21 f0       	breq	.+8      	; 0x1d04 <Keypad_enuRead+0x176>
	    	                         {
	    	                             *Address_ResultValue = Keypad_Matrix[Loc_u8RowsCounter][Loc_u8ColsCounter];
    1cfc:	f4 01       	movw	r30, r8
    1cfe:	80 81       	ld	r24, Z
    1d00:	f1 01       	movw	r30, r2
    1d02:	80 83       	st	Z, r24
    1d04:	f4 e0       	ldi	r31, 0x04	; 4
    1d06:	8f 0e       	add	r8, r31
    1d08:	91 1c       	adc	r9, r1
	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );

	    	                     /* second thing : read row */
	    	                     for(Loc_u8RowsCounter= ZERO_VALUE;Loc_u8RowsCounter<KEYPAD_COLS_NUMBER;Loc_u8RowsCounter++){
    1d0a:	a6 14       	cp	r10, r6
    1d0c:	b7 04       	cpc	r11, r7
    1d0e:	49 f7       	brne	.-46     	; 0x1ce2 <Keypad_enuRead+0x154>
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	e8 1a       	sub	r14, r24
    1d14:	f8 0a       	sbc	r15, r24
	    	                         }
	    	                     }



	    	                     Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]), Address_Keypad->keypad_idle_volt  );
    1d16:	f8 01       	movw	r30, r16
    1d18:	61 85       	ldd	r22, Z+9	; 0x09
    1d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1e:	80 81       	ld	r24, Z
    1d20:	0e 94 40 09 	call	0x1280	; 0x1280 <Dio_enuWriteChannel>
    1d24:	ff ef       	ldi	r31, 0xFF	; 255
    1d26:	cf 1a       	sub	r12, r31
    1d28:	df 0a       	sbc	r13, r31
	    	                 break;

	    	             case KEYPAD_COL_CONTROL :

	    	                  /* first thing : active col */
	    	                 for(Loc_u8ColsCounter=ZERO_VALUE;Loc_u8ColsCounter<KEYPAD_COLS_NUMBER;Loc_u8ColsCounter++){
    1d2a:	e4 14       	cp	r14, r4
    1d2c:	f5 04       	cpc	r15, r5
    1d2e:	89 f0       	breq	.+34     	; 0x1d52 <Keypad_enuRead+0x1c4>
    1d30:	fc 82       	std	Y+4, r15	; 0x04
    1d32:	eb 82       	std	Y+3, r14	; 0x03
	    	                	 Loc_DioStatusError = Dio_enuWriteChannel((Address_Keypad->keypad_cols_pins[Loc_u8ColsCounter]),  !(Address_Keypad->keypad_idle_volt ) );
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	f8 01       	movw	r30, r16
    1d38:	81 85       	ldd	r24, Z+9	; 0x09
    1d3a:	88 23       	and	r24, r24
    1d3c:	61 f2       	breq	.-104    	; 0x1cd6 <Keypad_enuRead+0x148>
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	ca cf       	rjmp	.-108    	; 0x1cd6 <Keypad_enuRead+0x148>
	u8 Loc_u8RowsCounter = ZERO_VALUE;
	u8 Loc_u8ColsCounter = ZERO_VALUE;
	u8 Loc_u8Check = Address_Keypad->keypad_idle_volt;
	if (NULL == Address_Keypad || (NULL == Address_ResultValue ) ){

		Loc_KeypadStatusError = KEYPAD_STATUS_NULL_POINTER_ADDRESS;
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	05 c0       	rjmp	.+10     	; 0x1d52 <Keypad_enuRead+0x1c4>
    1d48:	e2 e0       	ldi	r30, 0x02	; 2
    1d4a:	ea 83       	std	Y+2, r30	; 0x02
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <Keypad_enuRead+0x1c4>
	    	                 }

	    	                 break;

	    	             default :
	    	                 Loc_KeypadStatusError = KEYPAD_STATUS_FAIL;
    1d4e:	f1 e0       	ldi	r31, 0x01	; 1
    1d50:	fa 83       	std	Y+2, r31	; 0x02
	    	         }


	     }
	return Loc_KeypadStatusError;
}
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	bf 90       	pop	r11
    1d6e:	af 90       	pop	r10
    1d70:	9f 90       	pop	r9
    1d72:	8f 90       	pop	r8
    1d74:	7f 90       	pop	r7
    1d76:	6f 90       	pop	r6
    1d78:	5f 90       	pop	r5
    1d7a:	4f 90       	pop	r4
    1d7c:	3f 90       	pop	r3
    1d7e:	2f 90       	pop	r2
    1d80:	08 95       	ret

00001d82 <ExternalEeprom_WriteByte>:



/********************************** Software Interfaces Declarations *******************/

ExternalEeprom_StatusErrorType ExternalEeprom_WriteByte(u8 Copy_u8SlaveAddress,u8 Copy_u8PositionAddressInsideEerpom,u8 Copy_u8Data){
    1d82:	ff 92       	push	r15
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	1f 92       	push	r1
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	f8 2e       	mov	r15, r24
    1d94:	06 2f       	mov	r16, r22
    1d96:	14 2f       	mov	r17, r20
	ExternalEeprom_StatusErrorType Loc_enuExternlEepromStatus = EXTERNAL_EEPROM_STATUS_OK;
	u8 Loc_u8Temp;
	I2c_enuMasterTransmitStartConditionBlocking();
    1d98:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
	I2c_enuMasterTransmitAddressWritingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    1d9c:	be 01       	movw	r22, r28
    1d9e:	6f 5f       	subi	r22, 0xFF	; 255
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	8f 2d       	mov	r24, r15
    1da4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <I2c_enuMasterTransmitAddressWritingBlocking>
	I2c_enuMasterTransmitDataWritingBlocking(Copy_u8PositionAddressInsideEerpom, &Loc_u8Temp);
    1da8:	be 01       	movw	r22, r28
    1daa:	6f 5f       	subi	r22, 0xFF	; 255
    1dac:	7f 4f       	sbci	r23, 0xFF	; 255
    1dae:	80 2f       	mov	r24, r16
    1db0:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
	I2c_enuMasterTransmitDataWritingBlocking(Copy_u8Data, &Loc_u8Temp);
    1db4:	be 01       	movw	r22, r28
    1db6:	6f 5f       	subi	r22, 0xFF	; 255
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	81 2f       	mov	r24, r17
    1dbc:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
	I2c_enuMasterTransmitStopConditionBlocking();
    1dc0:	0e 94 c5 08 	call	0x118a	; 0x118a <I2c_enuMasterTransmitStopConditionBlocking>

	return Loc_enuExternlEepromStatus;

}
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	0f 90       	pop	r0
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	ff 90       	pop	r15
    1dd2:	08 95       	ret

00001dd4 <ExternalEeprom_ReadByte>:
ExternalEeprom_StatusErrorType ExternalEeprom_ReadByte(u8 Copy_u8SlaveAddress,u8 Copy_u8PositionAddressInsideEerpom,u8* Address_Result){
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	1f 92       	push	r1
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	18 2f       	mov	r17, r24
    1de8:	06 2f       	mov	r16, r22
    1dea:	7a 01       	movw	r14, r20
	ExternalEeprom_StatusErrorType Loc_enuExternlEepromStatus = EXTERNAL_EEPROM_STATUS_OK;
	u8 Loc_u8Temp;
		I2c_enuMasterTransmitStartConditionBlocking();
    1dec:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressWritingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    1df0:	be 01       	movw	r22, r28
    1df2:	6f 5f       	subi	r22, 0xFF	; 255
    1df4:	7f 4f       	sbci	r23, 0xFF	; 255
    1df6:	81 2f       	mov	r24, r17
    1df8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <I2c_enuMasterTransmitAddressWritingBlocking>
		I2c_enuMasterTransmitDataWritingBlocking(Copy_u8PositionAddressInsideEerpom, &Loc_u8Temp);
    1dfc:	be 01       	movw	r22, r28
    1dfe:	6f 5f       	subi	r22, 0xFF	; 255
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	80 2f       	mov	r24, r16
    1e04:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
		I2c_enuMasterTransmitStartConditionBlocking();
    1e08:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
		I2c_enuMasterTransmitAddressReadingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    1e0c:	be 01       	movw	r22, r28
    1e0e:	6f 5f       	subi	r22, 0xFF	; 255
    1e10:	7f 4f       	sbci	r23, 0xFF	; 255
    1e12:	81 2f       	mov	r24, r17
    1e14:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <I2c_enuMasterTransmitAddressReadingBlocking>
    1e18:	8f e9       	ldi	r24, 0x9F	; 159
    1e1a:	9f e0       	ldi	r25, 0x0F	; 15
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <ExternalEeprom_ReadByte+0x48>
    1e20:	00 c0       	rjmp	.+0      	; 0x1e22 <ExternalEeprom_ReadByte+0x4e>
    1e22:	00 00       	nop
		_delay_ms(1);
		I2c_enuMasterReceiveDataBlocking(Address_Result,I2c_NACK_VALUE);
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	c7 01       	movw	r24, r14
    1e28:	0e 94 ef 08 	call	0x11de	; 0x11de <I2c_enuMasterReceiveDataBlocking>
		I2c_enuMasterTransmitStopConditionBlocking();
    1e2c:	0e 94 c5 08 	call	0x118a	; 0x118a <I2c_enuMasterTransmitStopConditionBlocking>
    1e30:	8f e9       	ldi	r24, 0x9F	; 159
    1e32:	9f e0       	ldi	r25, 0x0F	; 15
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <ExternalEeprom_ReadByte+0x60>
    1e38:	00 c0       	rjmp	.+0      	; 0x1e3a <ExternalEeprom_ReadByte+0x66>
    1e3a:	00 00       	nop
		_delay_ms(1);
	return Loc_enuExternlEepromStatus;

}
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	0f 90       	pop	r0
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	08 95       	ret

00001e4e <ExternalEeprom_WriteU8Array>:
//
//	return Loc_enuExternlEepromStatus;
//
//}

ExternalEeprom_StatusErrorType ExternalEeprom_WriteU8Array(u8 Copy_u8SlaveAddress,u8 Copy_u8StartPositionAddressInsideEerpom,u8 Array[], u8 Copy_u8NumbersOfByte){
    1e4e:	df 92       	push	r13
    1e50:	ef 92       	push	r14
    1e52:	ff 92       	push	r15
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	1f 92       	push	r1
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	08 2f       	mov	r16, r24
    1e64:	16 2f       	mov	r17, r22
    1e66:	d4 2e       	mov	r13, r20
    1e68:	e5 2e       	mov	r14, r21
    1e6a:	f2 2e       	mov	r15, r18
	ExternalEeprom_StatusErrorType Loc_enuExternlEepromStatus = EXTERNAL_EEPROM_STATUS_OK;
	u8 Loc_u8Temp;
	u8 Loc_u8Counter = ZERO_VALUE;
	I2c_enuMasterTransmitStartConditionBlocking();
    1e6c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <I2c_enuMasterTransmitStartConditionBlocking>
	I2c_enuMasterTransmitAddressWritingBlocking(Copy_u8SlaveAddress, &Loc_u8Temp);
    1e70:	be 01       	movw	r22, r28
    1e72:	6f 5f       	subi	r22, 0xFF	; 255
    1e74:	7f 4f       	sbci	r23, 0xFF	; 255
    1e76:	80 2f       	mov	r24, r16
    1e78:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <I2c_enuMasterTransmitAddressWritingBlocking>
	I2c_enuMasterTransmitDataWritingBlocking(Copy_u8StartPositionAddressInsideEerpom, &Loc_u8Temp);
    1e7c:	be 01       	movw	r22, r28
    1e7e:	6f 5f       	subi	r22, 0xFF	; 255
    1e80:	7f 4f       	sbci	r23, 0xFF	; 255
    1e82:	81 2f       	mov	r24, r17
    1e84:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
    1e88:	0d 2d       	mov	r16, r13
    1e8a:	1e 2d       	mov	r17, r14
    1e8c:	c8 01       	movw	r24, r16
    1e8e:	8f 0d       	add	r24, r15
    1e90:	91 1d       	adc	r25, r1
    1e92:	7c 01       	movw	r14, r24

	for(Loc_u8Counter = ZERO_VALUE; Loc_u8Counter<Copy_u8NumbersOfByte;Loc_u8Counter++){
    1e94:	0e 15       	cp	r16, r14
    1e96:	1f 05       	cpc	r17, r15
    1e98:	49 f0       	breq	.+18     	; 0x1eac <ExternalEeprom_WriteU8Array+0x5e>
		I2c_enuMasterTransmitDataWritingBlocking(Array[Loc_u8Counter], &Loc_u8Temp);
    1e9a:	be 01       	movw	r22, r28
    1e9c:	6f 5f       	subi	r22, 0xFF	; 255
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	81 91       	ld	r24, Z+
    1ea4:	8f 01       	movw	r16, r30
    1ea6:	0e 94 13 09 	call	0x1226	; 0x1226 <I2c_enuMasterTransmitDataWritingBlocking>
    1eaa:	f4 cf       	rjmp	.-24     	; 0x1e94 <ExternalEeprom_WriteU8Array+0x46>
	}

	I2c_enuMasterTransmitStopConditionBlocking();
    1eac:	0e 94 c5 08 	call	0x118a	; 0x118a <I2c_enuMasterTransmitStopConditionBlocking>
    1eb0:	8f e9       	ldi	r24, 0x9F	; 159
    1eb2:	9f e0       	ldi	r25, 0x0F	; 15
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <ExternalEeprom_WriteU8Array+0x66>
    1eb8:	00 c0       	rjmp	.+0      	; 0x1eba <ExternalEeprom_WriteU8Array+0x6c>
    1eba:	00 00       	nop

	_delay_ms(1);
	return Loc_enuExternlEepromStatus;

}
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	0f 90       	pop	r0
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	08 95       	ret

00001ed0 <smart_WelcomeHome>:


void smart_WelcomeHome(void){

	/* Init Values */
Smart_u8Mode = ZERO_VALUE;
    1ed0:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <Smart_u8Mode>
Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>
Usart_u8Status = USART_STATUS_NOT_PRESS;
    1eda:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>

	/* enable interrupts */
	Usart_enuEnableRxInterrupt();
    1ede:	0e 94 23 03 	call	0x646	; 0x646 <Usart_enuEnableRxInterrupt>
	Timer0_enuEnableOverflowInterrupt();
    1ee2:	0e 94 23 06 	call	0xc46	; 0xc46 <Timer0_enuEnableOverflowInterrupt>

Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    1ee6:	61 e0       	ldi	r22, 0x01	; 1
    1ee8:	8d e7       	ldi	r24, 0x7D	; 125
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    1ef0:	8f e7       	ldi	r24, 0x7F	; 127
    1ef2:	9e e3       	ldi	r25, 0x3E	; 62
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <smart_WelcomeHome+0x24>
    1ef8:	00 c0       	rjmp	.+0      	; 0x1efa <smart_WelcomeHome+0x2a>
    1efa:	00 00       	nop
_delay_ms(LCD_CLEAR_DELAY);
Lcd_4bit_enuDisplayStringWithPosition(&Lcd,(u8*) "Welcome Home", LCD_ROW1, LCD_COL7);
    1efc:	27 e0       	ldi	r18, 0x07	; 7
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	67 e5       	ldi	r22, 0x57	; 87
    1f02:	73 e0       	ldi	r23, 0x03	; 3
    1f04:	8d e7       	ldi	r24, 0x7D	; 125
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
Lcd_4bit_enuDisplayStringWithPosition(&Lcd,(u8*) "1- Select Admin ", LCD_ROW2, LCD_COL1);
    1f0c:	21 e0       	ldi	r18, 0x01	; 1
    1f0e:	42 e0       	ldi	r20, 0x02	; 2
    1f10:	64 e6       	ldi	r22, 0x64	; 100
    1f12:	73 e0       	ldi	r23, 0x03	; 3
    1f14:	8d e7       	ldi	r24, 0x7D	; 125
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"2- Select User ", LCD_ROW3, LCD_COL1);
    1f1c:	21 e0       	ldi	r18, 0x01	; 1
    1f1e:	43 e0       	ldi	r20, 0x03	; 3
    1f20:	65 e7       	ldi	r22, 0x75	; 117
    1f22:	73 e0       	ldi	r23, 0x03	; 3
    1f24:	8d e7       	ldi	r24, 0x7D	; 125
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>

Usart_enuTransmitStringBlocking(&Usart1, (u8*)"                  Welcome Home\r");
    1f2c:	65 e8       	ldi	r22, 0x85	; 133
    1f2e:	73 e0       	ldi	r23, 0x03	; 3
    1f30:	80 e6       	ldi	r24, 0x60	; 96
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
Usart_enuTransmitStringBlocking(&Usart1, (u8*)"1- Select Admin\r");
    1f38:	65 ea       	ldi	r22, 0xA5	; 165
    1f3a:	73 e0       	ldi	r23, 0x03	; 3
    1f3c:	80 e6       	ldi	r24, 0x60	; 96
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
Usart_enuTransmitStringBlocking(&Usart1, (u8*)"2- Select User \r");
    1f44:	66 eb       	ldi	r22, 0xB6	; 182
    1f46:	73 e0       	ldi	r23, 0x03	; 3
    1f48:	80 e6       	ldi	r24, 0x60	; 96
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
    1f50:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <Smart_u8Mode>


	while( Smart_u8Mode == SMART_NOT_SELECT_MODE ){
    1f54:	81 11       	cpse	r24, r1
    1f56:	1d c0       	rjmp	.+58     	; 0x1f92 <smart_WelcomeHome+0xc2>

		if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result == '1' || Keypad_u8Result =='2')){
    1f58:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	08 c0       	rjmp	.+16     	; 0x1f70 <smart_WelcomeHome+0xa0>
    1f60:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    1f64:	81 33       	cpi	r24, 0x31	; 49
    1f66:	a1 f0       	breq	.+40     	; 0x1f90 <smart_WelcomeHome+0xc0>
    1f68:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    1f6c:	82 33       	cpi	r24, 0x32	; 50
    1f6e:	81 f0       	breq	.+32     	; 0x1f90 <smart_WelcomeHome+0xc0>
			/* KeyPad Mode */
			Smart_u8Mode = SMART_KEYPAD_MODE;

		}

		else if(Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value == '1' || Usart_u8Value =='2')){
    1f70:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Usart_u8Status>
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	81 f7       	brne	.-32     	; 0x1f58 <smart_WelcomeHome+0x88>
    1f78:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    1f7c:	81 33       	cpi	r24, 0x31	; 49
    1f7e:	21 f0       	breq	.+8      	; 0x1f88 <smart_WelcomeHome+0xb8>
    1f80:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    1f84:	82 33       	cpi	r24, 0x32	; 50
    1f86:	41 f7       	brne	.-48     	; 0x1f58 <smart_WelcomeHome+0x88>


			/* Uart Mode */
			Smart_u8Mode = SMART_USART_MODE;
			Usart_u8Status = USART_STATUS_NOT_PRESS;
    1f88:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>

		else if(Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value == '1' || Usart_u8Value =='2')){


			/* Uart Mode */
			Smart_u8Mode = SMART_USART_MODE;
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <smart_WelcomeHome+0xc2>
	while( Smart_u8Mode == SMART_NOT_SELECT_MODE ){

		if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result == '1' || Keypad_u8Result =='2')){

			/* KeyPad Mode */
			Smart_u8Mode = SMART_KEYPAD_MODE;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <Smart_u8Mode>
    1f96:	08 95       	ret

00001f98 <Smart_AddUserKeypad>:

	} // while
}


void Smart_AddUserKeypad(){
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
	u8 Loc_u8Check = ONE_VALUE;
	u8 Loc_u8UsernameId;
	u8 Loc_u8Password= ZERO_VALUE;
	Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    1f9e:	83 e0       	ldi	r24, 0x03	; 3
    1fa0:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>
	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	8d e7       	ldi	r24, 0x7D	; 125
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    1fae:	8f e7       	ldi	r24, 0x7F	; 127
    1fb0:	9e e3       	ldi	r25, 0x3E	; 62
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <Smart_AddUserKeypad+0x1a>
    1fb6:	00 c0       	rjmp	.+0      	; 0x1fb8 <Smart_AddUserKeypad+0x20>
    1fb8:	00 00       	nop
	_delay_ms(LCD_CLEAR_DELAY);

	Lcd_4bit_enuDisplayString(&Lcd, (u8*)"Enter Username ID:");
    1fba:	67 ec       	ldi	r22, 0xC7	; 199
    1fbc:	73 e0       	ldi	r23, 0x03	; 3
    1fbe:	8d e7       	ldi	r24, 0x7D	; 125
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Lcd_4bit_enuDisplayString>
	} // while
}


void Smart_AddUserKeypad(){
	u8 Loc_u8Check = ONE_VALUE;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
	_delay_ms(LCD_CLEAR_DELAY);

	Lcd_4bit_enuDisplayString(&Lcd, (u8*)"Enter Username ID:");

	while(Loc_u8Check != ZERO_VALUE){
    1fc8:	88 23       	and	r24, r24
    1fca:	f1 f0       	breq	.+60     	; 0x2008 <Smart_AddUserKeypad+0x70>

		if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
    1fcc:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <Keypad_Status>
    1fd0:	91 11       	cpse	r25, r1
    1fd2:	fa cf       	rjmp	.-12     	; 0x1fc8 <Smart_AddUserKeypad+0x30>
    1fd4:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    1fd8:	80 33       	cpi	r24, 0x30	; 48
    1fda:	a0 f0       	brcs	.+40     	; 0x2004 <Smart_AddUserKeypad+0x6c>
    1fdc:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    1fe0:	8a 33       	cpi	r24, 0x3A	; 58
    1fe2:	80 f4       	brcc	.+32     	; 0x2004 <Smart_AddUserKeypad+0x6c>
			Loc_u8UsernameId = Keypad_u8Result-'0';
    1fe4:	40 91 e5 06 	lds	r20, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    1fe8:	c0 ed       	ldi	r28, 0xD0	; 208
    1fea:	c4 0f       	add	r28, r20
			Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8UsernameId);
    1fec:	4c 2f       	mov	r20, r28
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	8d e7       	ldi	r24, 0x7D	; 125
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <Lcd_4bit_enuDisplayNumber>
			Loc_u8Check = ZERO_VALUE;
			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    1ffc:	83 e0       	ldi	r24, 0x03	; 3
    1ffe:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <Smart_AddUserKeypad+0x70>
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	e2 cf       	rjmp	.-60     	; 0x1fcc <Smart_AddUserKeypad+0x34>
	}

	/* Password Part */
	Loc_u8Check = ONE_VALUE;

	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Password: ",LCD_ROW2,LCD_COL1);
    2008:	21 e0       	ldi	r18, 0x01	; 1
    200a:	42 e0       	ldi	r20, 0x02	; 2
    200c:	6a ed       	ldi	r22, 0xDA	; 218
    200e:	73 e0       	ldi	r23, 0x03	; 3
    2010:	8d e7       	ldi	r24, 0x7D	; 125
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	63 e0       	ldi	r22, 0x03	; 3
    201c:	8d e7       	ldi	r24, 0x7D	; 125
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Lcd_4bit_enuGoToXY>


void Smart_AddUserKeypad(){
	u8 Loc_u8Check = ONE_VALUE;
	u8 Loc_u8UsernameId;
	u8 Loc_u8Password= ZERO_VALUE;
    2024:	d0 e0       	ldi	r29, 0x00	; 0
	while(Loc_u8Check != ZERO_VALUE){

		if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
			Loc_u8Password = Loc_u8Password*10+ Keypad_u8Result-'0';
			Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2026:	13 e0       	ldi	r17, 0x03	; 3

	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Password: ",LCD_ROW2,LCD_COL1);
	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
	while(Loc_u8Check != ZERO_VALUE){

		if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
    2028:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    202c:	81 11       	cpse	r24, r1
    202e:	18 c0       	rjmp	.+48     	; 0x2060 <Smart_AddUserKeypad+0xc8>
    2030:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2034:	80 33       	cpi	r24, 0x30	; 48
    2036:	a0 f0       	brcs	.+40     	; 0x2060 <Smart_AddUserKeypad+0xc8>
    2038:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    203c:	8a 33       	cpi	r24, 0x3A	; 58
    203e:	80 f4       	brcc	.+32     	; 0x2060 <Smart_AddUserKeypad+0xc8>
			Loc_u8Password = Loc_u8Password*10+ Keypad_u8Result-'0';
    2040:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2044:	80 53       	subi	r24, 0x30	; 48
    2046:	9a e0       	ldi	r25, 0x0A	; 10
    2048:	d9 9f       	mul	r29, r25
    204a:	80 0d       	add	r24, r0
    204c:	11 24       	eor	r1, r1
    204e:	d8 2f       	mov	r29, r24
			Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
    2050:	6a e2       	ldi	r22, 0x2A	; 42
    2052:	8d e7       	ldi	r24, 0x7D	; 125
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    205a:	10 93 0f 03 	sts	0x030F, r17	; 0x80030f <Keypad_Status>
    205e:	e4 cf       	rjmp	.-56     	; 0x2028 <Smart_AddUserKeypad+0x90>
		}
		else if (Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result=='=')){
    2060:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    2064:	81 11       	cpse	r24, r1
    2066:	e0 cf       	rjmp	.-64     	; 0x2028 <Smart_AddUserKeypad+0x90>
    2068:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    206c:	8d 33       	cpi	r24, 0x3D	; 61
    206e:	e1 f6       	brne	.-72     	; 0x2028 <Smart_AddUserKeypad+0x90>
			ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, (u8)Loc_u8UsernameId, (u8)Loc_u8Password);
    2070:	4d 2f       	mov	r20, r29
    2072:	6c 2f       	mov	r22, r28
    2074:	80 e5       	ldi	r24, 0x50	; 80
    2076:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <ExternalEeprom_WriteByte>
			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    207a:	61 e0       	ldi	r22, 0x01	; 1
    207c:	8d e7       	ldi	r24, 0x7D	; 125
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2084:	2f ef       	ldi	r18, 0xFF	; 255
    2086:	89 ef       	ldi	r24, 0xF9	; 249
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	21 50       	subi	r18, 0x01	; 1
    208c:	80 40       	sbci	r24, 0x00	; 0
    208e:	90 40       	sbci	r25, 0x00	; 0
    2090:	e1 f7       	brne	.-8      	; 0x208a <Smart_AddUserKeypad+0xf2>
    2092:	00 c0       	rjmp	.+0      	; 0x2094 <Smart_AddUserKeypad+0xfc>
    2094:	00 00       	nop
			_delay_ms(LCD_DISPLAY_DELAY);
			Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"User ", LCD_ROW2, LCD_COL3);
    2096:	23 e0       	ldi	r18, 0x03	; 3
    2098:	42 e0       	ldi	r20, 0x02	; 2
    209a:	6c e1       	ldi	r22, 0x1C	; 28
    209c:	75 e0       	ldi	r23, 0x05	; 5
    209e:	8d e7       	ldi	r24, 0x7D	; 125
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
			Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8UsernameId);
    20a6:	4c 2f       	mov	r20, r28
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	8d e7       	ldi	r24, 0x7D	; 125
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <Lcd_4bit_enuDisplayNumber>
			Lcd_4bit_enuDisplayString(&Lcd, (u8*)" Is Added ");
    20b6:	6b ee       	ldi	r22, 0xEB	; 235
    20b8:	73 e0       	ldi	r23, 0x03	; 3
    20ba:	8d e7       	ldi	r24, 0x7D	; 125
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Lcd_4bit_enuDisplayString>
			Loc_u8Check = ZERO_VALUE;
			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>
    20c8:	2f ef       	ldi	r18, 0xFF	; 255
    20ca:	8f e0       	ldi	r24, 0x0F	; 15
    20cc:	97 e2       	ldi	r25, 0x27	; 39
    20ce:	21 50       	subi	r18, 0x01	; 1
    20d0:	80 40       	sbci	r24, 0x00	; 0
    20d2:	90 40       	sbci	r25, 0x00	; 0
    20d4:	e1 f7       	brne	.-8      	; 0x20ce <Smart_AddUserKeypad+0x136>
    20d6:	00 c0       	rjmp	.+0      	; 0x20d8 <Smart_AddUserKeypad+0x140>
    20d8:	00 00       	nop

		}

	}
	_delay_ms(800);
}
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	08 95       	ret

000020e2 <Smart_ShowTime>:



void Smart_ShowTime(){
    20e2:	ef 92       	push	r14
    20e4:	ff 92       	push	r15
    20e6:	0f 93       	push	r16
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <Smart_ShowTime+0xc>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <Smart_ShowTime+0xe>
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <Smart_ShowTime+0x10>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8Second =ZERO_VALUE;
    20f6:	1e 82       	std	Y+6, r1	; 0x06
	u8 Loc_u8Minute =ZERO_VALUE;
    20f8:	1d 82       	std	Y+5, r1	; 0x05
	u8 Loc_u8Hour =ZERO_VALUE;
    20fa:	1c 82       	std	Y+4, r1	; 0x04
	u8 Loc_u8Day =ZERO_VALUE;
    20fc:	1b 82       	std	Y+3, r1	; 0x03
	u8 Loc_u8Month =ZERO_VALUE;
    20fe:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8Year =ZERO_VALUE;
    2100:	19 82       	std	Y+1, r1	; 0x01
	u32 Loc_u32Counter = ZERO_VALUE;


	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2102:	61 e0       	ldi	r22, 0x01	; 1
    2104:	8d e7       	ldi	r24, 0x7D	; 125
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    210c:	8f e7       	ldi	r24, 0x7F	; 127
    210e:	9e e3       	ldi	r25, 0x3E	; 62
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <Smart_ShowTime+0x2e>
    2114:	00 c0       	rjmp	.+0      	; 0x2116 <Smart_ShowTime+0x34>
    2116:	00 00       	nop
	_delay_ms(LCD_CLEAR_DELAY);

	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Date:  ", LCD_ROW3,LCD_COL1);
    2118:	21 e0       	ldi	r18, 0x01	; 1
    211a:	43 e0       	ldi	r20, 0x03	; 3
    211c:	69 e9       	ldi	r22, 0x99	; 153
    211e:	75 e0       	ldi	r23, 0x05	; 5
    2120:	8d e7       	ldi	r24, 0x7D	; 125
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
    2128:	9f ef       	ldi	r25, 0xFF	; 255
    212a:	21 ee       	ldi	r18, 0xE1	; 225
    212c:	84 e0       	ldi	r24, 0x04	; 4
    212e:	91 50       	subi	r25, 0x01	; 1
    2130:	20 40       	sbci	r18, 0x00	; 0
    2132:	80 40       	sbci	r24, 0x00	; 0
    2134:	e1 f7       	brne	.-8      	; 0x212e <Smart_ShowTime+0x4c>
    2136:	00 c0       	rjmp	.+0      	; 0x2138 <Smart_ShowTime+0x56>
    2138:	00 00       	nop


	_delay_ms(100);
	Rtc_enuGetDay(&Loc_u8Day);
    213a:	ce 01       	movw	r24, r28
    213c:	03 96       	adiw	r24, 0x03	; 3
    213e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Rtc_enuGetDay>
	Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8Day);
    2142:	4b 81       	ldd	r20, Y+3	; 0x03
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	70 e0       	ldi	r23, 0x00	; 0
    214a:	8d e7       	ldi	r24, 0x7D	; 125
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <Lcd_4bit_enuDisplayNumber>
	Lcd_4bit_enuDisplayCharacter(&Lcd, ':');
    2152:	6a e3       	ldi	r22, 0x3A	; 58
    2154:	8d e7       	ldi	r24, 0x7D	; 125
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
    215c:	9f ef       	ldi	r25, 0xFF	; 255
    215e:	21 ee       	ldi	r18, 0xE1	; 225
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	91 50       	subi	r25, 0x01	; 1
    2164:	20 40       	sbci	r18, 0x00	; 0
    2166:	80 40       	sbci	r24, 0x00	; 0
    2168:	e1 f7       	brne	.-8      	; 0x2162 <Smart_ShowTime+0x80>
    216a:	00 c0       	rjmp	.+0      	; 0x216c <Smart_ShowTime+0x8a>
    216c:	00 00       	nop

	_delay_ms(100);
	Rtc_enuGetMonth(&Loc_u8Month);
    216e:	ce 01       	movw	r24, r28
    2170:	02 96       	adiw	r24, 0x02	; 2
    2172:	0e 94 38 0b 	call	0x1670	; 0x1670 <Rtc_enuGetMonth>
	Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8Month);
    2176:	4a 81       	ldd	r20, Y+2	; 0x02
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	8d e7       	ldi	r24, 0x7D	; 125
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <Lcd_4bit_enuDisplayNumber>
	Lcd_4bit_enuDisplayCharacter(&Lcd, ':');
    2186:	6a e3       	ldi	r22, 0x3A	; 58
    2188:	8d e7       	ldi	r24, 0x7D	; 125
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
    2190:	9f ef       	ldi	r25, 0xFF	; 255
    2192:	21 ee       	ldi	r18, 0xE1	; 225
    2194:	84 e0       	ldi	r24, 0x04	; 4
    2196:	91 50       	subi	r25, 0x01	; 1
    2198:	20 40       	sbci	r18, 0x00	; 0
    219a:	80 40       	sbci	r24, 0x00	; 0
    219c:	e1 f7       	brne	.-8      	; 0x2196 <Smart_ShowTime+0xb4>
    219e:	00 c0       	rjmp	.+0      	; 0x21a0 <Smart_ShowTime+0xbe>
    21a0:	00 00       	nop

	_delay_ms(100);
	Rtc_enuGetYear(&Loc_u8Year);
    21a2:	ce 01       	movw	r24, r28
    21a4:	01 96       	adiw	r24, 0x01	; 1
    21a6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Rtc_enuGetYear>
	Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8Year);
    21aa:	49 81       	ldd	r20, Y+1	; 0x01
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	8d e7       	ldi	r24, 0x7D	; 125
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <Lcd_4bit_enuDisplayNumber>



	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Clock:  ", LCD_ROW1,LCD_COL1);
    21ba:	21 e0       	ldi	r18, 0x01	; 1
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	62 ea       	ldi	r22, 0xA2	; 162
    21c0:	75 e0       	ldi	r23, 0x05	; 5
    21c2:	8d e7       	ldi	r24, 0x7D	; 125
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>





	Rtc_enuGetHour(&Loc_u8Hour);
    21ca:	ce 01       	movw	r24, r28
    21cc:	04 96       	adiw	r24, 0x04	; 4
    21ce:	0e 94 c2 0a 	call	0x1584	; 0x1584 <Rtc_enuGetHour>
//	Lcd_4bit_enuDisplayStringWithPosition(&Lcd,(u8*)"  ",LCD_ROW1,LCD_COL10);
	Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u8Hour,LCD_ROW1,LCD_COL10);
    21d2:	4c 81       	ldd	r20, Y+4	; 0x04
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	0a e0       	ldi	r16, 0x0A	; 10
    21dc:	21 e0       	ldi	r18, 0x01	; 1
    21de:	8d e7       	ldi	r24, 0x7D	; 125
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Lcd_4bit_enuDisplayNumberWithPosition>
	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ':',LCD_ROW1,LCD_COL12);
    21e6:	2c e0       	ldi	r18, 0x0C	; 12
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	6a e3       	ldi	r22, 0x3A	; 58
    21ec:	8d e7       	ldi	r24, 0x7D	; 125
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0e 94 cd 0c 	call	0x199a	; 0x199a <Lcd_4bit_enuDisplayCharacterWithPosition>
    21f4:	9f ef       	ldi	r25, 0xFF	; 255
    21f6:	21 ee       	ldi	r18, 0xE1	; 225
    21f8:	84 e0       	ldi	r24, 0x04	; 4
    21fa:	91 50       	subi	r25, 0x01	; 1
    21fc:	20 40       	sbci	r18, 0x00	; 0
    21fe:	80 40       	sbci	r24, 0x00	; 0
    2200:	e1 f7       	brne	.-8      	; 0x21fa <Smart_ShowTime+0x118>
    2202:	00 c0       	rjmp	.+0      	; 0x2204 <Smart_ShowTime+0x122>
    2204:	00 00       	nop
	_delay_ms(100);

	Rtc_enuGetMinute(&Loc_u8Minute);
    2206:	ce 01       	movw	r24, r28
    2208:	05 96       	adiw	r24, 0x05	; 5
    220a:	0e 94 87 0a 	call	0x150e	; 0x150e <Rtc_enuGetMinute>
//	Lcd_4bit_enuDisplayStringWithPosition(&Lcd,(u8*)"  ",LCD_ROW1,LCD_COL13);
	Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u8Minute,LCD_ROW1,LCD_COL13);
    220e:	4d 81       	ldd	r20, Y+5	; 0x05
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	0d e0       	ldi	r16, 0x0D	; 13
    2218:	21 e0       	ldi	r18, 0x01	; 1
    221a:	8d e7       	ldi	r24, 0x7D	; 125
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Lcd_4bit_enuDisplayNumberWithPosition>
	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ':',LCD_ROW1,LCD_COL15);
    2222:	2f e0       	ldi	r18, 0x0F	; 15
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	6a e3       	ldi	r22, 0x3A	; 58
    2228:	8d e7       	ldi	r24, 0x7D	; 125
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 cd 0c 	call	0x199a	; 0x199a <Lcd_4bit_enuDisplayCharacterWithPosition>
    2230:	9f ef       	ldi	r25, 0xFF	; 255
    2232:	21 ee       	ldi	r18, 0xE1	; 225
    2234:	84 e0       	ldi	r24, 0x04	; 4
    2236:	91 50       	subi	r25, 0x01	; 1
    2238:	20 40       	sbci	r18, 0x00	; 0
    223a:	80 40       	sbci	r24, 0x00	; 0
    223c:	e1 f7       	brne	.-8      	; 0x2236 <Smart_ShowTime+0x154>
    223e:	00 c0       	rjmp	.+0      	; 0x2240 <Smart_ShowTime+0x15e>
    2240:	00 00       	nop
    2242:	e1 2c       	mov	r14, r1
    2244:	f1 2c       	mov	r15, r1
	_delay_ms(100);

	for(Loc_u32Counter =ZERO_VALUE;Loc_u32Counter<FIVE_VALUE;++Loc_u32Counter){
	Rtc_enuGetSecond(&Loc_u8Second);
    2246:	ce 01       	movw	r24, r28
    2248:	06 96       	adiw	r24, 0x06	; 6
    224a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <Rtc_enuGetSecond>
	Lcd_4bit_enuDisplayStringWithPosition(&Lcd,(u8*)"  ",LCD_ROW1,LCD_COL16);
    224e:	20 e1       	ldi	r18, 0x10	; 16
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	6e e9       	ldi	r22, 0x9E	; 158
    2254:	75 e0       	ldi	r23, 0x05	; 5
    2256:	8d e7       	ldi	r24, 0x7D	; 125
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
	Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u8Second,LCD_ROW1,LCD_COL16);
    225e:	4e 81       	ldd	r20, Y+6	; 0x06
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	00 e1       	ldi	r16, 0x10	; 16
    2268:	21 e0       	ldi	r18, 0x01	; 1
    226a:	8d e7       	ldi	r24, 0x7D	; 125
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Lcd_4bit_enuDisplayNumberWithPosition>
    2272:	9f ef       	ldi	r25, 0xFF	; 255
    2274:	29 e6       	ldi	r18, 0x69	; 105
    2276:	88 e1       	ldi	r24, 0x18	; 24
    2278:	91 50       	subi	r25, 0x01	; 1
    227a:	20 40       	sbci	r18, 0x00	; 0
    227c:	80 40       	sbci	r24, 0x00	; 0
    227e:	e1 f7       	brne	.-8      	; 0x2278 <Smart_ShowTime+0x196>
    2280:	00 c0       	rjmp	.+0      	; 0x2282 <Smart_ShowTime+0x1a0>
    2282:	00 00       	nop
    2284:	9f ef       	ldi	r25, 0xFF	; 255
    2286:	e9 1a       	sub	r14, r25
    2288:	f9 0a       	sbc	r15, r25
//	Lcd_4bit_enuDisplayStringWithPosition(&Lcd,(u8*)"  ",LCD_ROW1,LCD_COL13);
	Lcd_4bit_enuDisplayNumberWithPosition(&Lcd, Loc_u8Minute,LCD_ROW1,LCD_COL13);
	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, ':',LCD_ROW1,LCD_COL15);
	_delay_ms(100);

	for(Loc_u32Counter =ZERO_VALUE;Loc_u32Counter<FIVE_VALUE;++Loc_u32Counter){
    228a:	25 e0       	ldi	r18, 0x05	; 5
    228c:	e2 16       	cp	r14, r18
    228e:	f1 04       	cpc	r15, r1
    2290:	d1 f6       	brne	.-76     	; 0x2246 <Smart_ShowTime+0x164>





}
    2292:	26 96       	adiw	r28, 0x06	; 6
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	0f 91       	pop	r16
    22a4:	ff 90       	pop	r15
    22a6:	ef 90       	pop	r14
    22a8:	08 95       	ret

000022aa <Smart_DeleteUserKeypad>:
void Smart_DeleteUserKeypad(){
    22aa:	cf 93       	push	r28

	   u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8UsernameId= NINE_VALUE;

		Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    22ac:	83 e0       	ldi	r24, 0x03	; 3
    22ae:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>
		Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    22b2:	61 e0       	ldi	r22, 0x01	; 1
    22b4:	8d e7       	ldi	r24, 0x7D	; 125
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    22bc:	8f e7       	ldi	r24, 0x7F	; 127
    22be:	9e e3       	ldi	r25, 0x3E	; 62
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <Smart_DeleteUserKeypad+0x16>
    22c4:	00 c0       	rjmp	.+0      	; 0x22c6 <Smart_DeleteUserKeypad+0x1c>
    22c6:	00 00       	nop
		_delay_ms(LCD_CLEAR_DELAY);

		Lcd_4bit_enuDisplayString(&Lcd, (u8*)"Enter Username ID:");
    22c8:	67 ec       	ldi	r22, 0xC7	; 199
    22ca:	73 e0       	ldi	r23, 0x03	; 3
    22cc:	8d e7       	ldi	r24, 0x7D	; 125
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Lcd_4bit_enuDisplayString>

}
void Smart_DeleteUserKeypad(){

	   u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8UsernameId= NINE_VALUE;
    22d4:	c9 e0       	ldi	r28, 0x09	; 9


}
void Smart_DeleteUserKeypad(){

	   u8 Loc_u8Check = ONE_VALUE;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
		Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
		_delay_ms(LCD_CLEAR_DELAY);

		Lcd_4bit_enuDisplayString(&Lcd, (u8*)"Enter Username ID:");

		while(Loc_u8Check != ZERO_VALUE){
    22d8:	88 23       	and	r24, r24
    22da:	e9 f0       	breq	.+58     	; 0x2316 <Smart_DeleteUserKeypad+0x6c>

			if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
    22dc:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <Keypad_Status>
    22e0:	91 11       	cpse	r25, r1
    22e2:	fa cf       	rjmp	.-12     	; 0x22d8 <Smart_DeleteUserKeypad+0x2e>
    22e4:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    22e8:	80 33       	cpi	r24, 0x30	; 48
    22ea:	98 f0       	brcs	.+38     	; 0x2312 <Smart_DeleteUserKeypad+0x68>
    22ec:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    22f0:	8a 33       	cpi	r24, 0x3A	; 58
    22f2:	78 f4       	brcc	.+30     	; 0x2312 <Smart_DeleteUserKeypad+0x68>
				Loc_u8UsernameId = Keypad_u8Result-'0';
    22f4:	c0 91 e5 06 	lds	r28, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    22f8:	c0 53       	subi	r28, 0x30	; 48
				Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8UsernameId);
    22fa:	4c 2f       	mov	r20, r28
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	8d e7       	ldi	r24, 0x7D	; 125
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <Lcd_4bit_enuDisplayNumber>
				Loc_u8Check = ZERO_VALUE;
				Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <Smart_DeleteUserKeypad+0x6c>
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	e3 cf       	rjmp	.-58     	; 0x22dc <Smart_DeleteUserKeypad+0x32>
			}

		}
		Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2316:	61 e0       	ldi	r22, 0x01	; 1
    2318:	8d e7       	ldi	r24, 0x7D	; 125
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2320:	8f e7       	ldi	r24, 0x7F	; 127
    2322:	9e e3       	ldi	r25, 0x3E	; 62
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	f1 f7       	brne	.-4      	; 0x2324 <Smart_DeleteUserKeypad+0x7a>
    2328:	00 c0       	rjmp	.+0      	; 0x232a <Smart_DeleteUserKeypad+0x80>
    232a:	00 00       	nop
		_delay_ms(LCD_CLEAR_DELAY);
		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"User ", LCD_ROW2, LCD_COL3);
    232c:	23 e0       	ldi	r18, 0x03	; 3
    232e:	42 e0       	ldi	r20, 0x02	; 2
    2330:	6c e1       	ldi	r22, 0x1C	; 28
    2332:	75 e0       	ldi	r23, 0x05	; 5
    2334:	8d e7       	ldi	r24, 0x7D	; 125
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
		Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8UsernameId);
    233c:	4c 2f       	mov	r20, r28
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	8d e7       	ldi	r24, 0x7D	; 125
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <Lcd_4bit_enuDisplayNumber>
		Lcd_4bit_enuDisplayString(&Lcd, (u8*)" Is Deleted ");
    234c:	66 ef       	ldi	r22, 0xF6	; 246
    234e:	73 e0       	ldi	r23, 0x03	; 3
    2350:	8d e7       	ldi	r24, 0x7D	; 125
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Lcd_4bit_enuDisplayString>

		ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, 0xFF);
    2358:	4f ef       	ldi	r20, 0xFF	; 255
    235a:	6c 2f       	mov	r22, r28
    235c:	80 e5       	ldi	r24, 0x50	; 80
    235e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <ExternalEeprom_WriteByte>
    2362:	9f ef       	ldi	r25, 0xFF	; 255
    2364:	2f e0       	ldi	r18, 0x0F	; 15
    2366:	87 e2       	ldi	r24, 0x27	; 39
    2368:	91 50       	subi	r25, 0x01	; 1
    236a:	20 40       	sbci	r18, 0x00	; 0
    236c:	80 40       	sbci	r24, 0x00	; 0
    236e:	e1 f7       	brne	.-8      	; 0x2368 <Smart_DeleteUserKeypad+0xbe>
    2370:	00 c0       	rjmp	.+0      	; 0x2372 <Smart_DeleteUserKeypad+0xc8>
    2372:	00 00       	nop
		_delay_ms(800);

}
    2374:	cf 91       	pop	r28
    2376:	08 95       	ret

00002378 <Smart_KeypadAdminList>:
			}

		} // while
}

void Smart_KeypadAdminList(){
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	1f 92       	push	r1
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8Index = ZERO_VALUE;
	u8 Loc_u8CursorIndex = ONE_VALUE;
	u8 Loc_u8Start = ONE_VALUE;
	u8 Loc_u8TempStart = ONE_VALUE;
	u8 Loc_u8Check = ONE_VALUE;
	u8 Loc_u8TempData = ZERO_VALUE ;
    2390:	19 82       	std	Y+1, r1	; 0x01
	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2392:	61 e0       	ldi	r22, 0x01	; 1
    2394:	8d e7       	ldi	r24, 0x7D	; 125
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    239c:	8f e7       	ldi	r24, 0x7F	; 127
    239e:	9e e3       	ldi	r25, 0x3E	; 62
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <Smart_KeypadAdminList+0x28>
    23a4:	00 c0       	rjmp	.+0      	; 0x23a6 <Smart_KeypadAdminList+0x2e>
    23a6:	00 00       	nop
	_delay_ms(LCD_CLEAR_DELAY);

	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
    23a8:	24 e1       	ldi	r18, 0x14	; 20
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	6f ef       	ldi	r22, 0xFF	; 255
    23ae:	8d e7       	ldi	r24, 0x7D	; 125
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 cd 0c 	call	0x199a	; 0x199a <Lcd_4bit_enuDisplayCharacterWithPosition>
    23b6:	e8 ed       	ldi	r30, 0xD8	; 216
    23b8:	ce 2e       	mov	r12, r30
    23ba:	e6 e0       	ldi	r30, 0x06	; 6
    23bc:	de 2e       	mov	r13, r30
    23be:	f2 e0       	ldi	r31, 0x02	; 2
    23c0:	ef 2e       	mov	r14, r31
    23c2:	f1 2c       	mov	r15, r1
	for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
    23c4:	10 e0       	ldi	r17, 0x00	; 0
		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)AdminListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]],Loc_u8Index+1,LCD_COL1);
    23c6:	04 e1       	ldi	r16, 0x14	; 20
    23c8:	1f 5f       	subi	r17, 0xFF	; 255
    23ca:	f6 01       	movw	r30, r12
    23cc:	81 91       	ld	r24, Z+
    23ce:	6f 01       	movw	r12, r30
    23d0:	97 01       	movw	r18, r14
    23d2:	28 1b       	sub	r18, r24
    23d4:	31 09       	sbc	r19, r1
    23d6:	02 9f       	mul	r16, r18
    23d8:	b0 01       	movw	r22, r0
    23da:	03 9f       	mul	r16, r19
    23dc:	70 0d       	add	r23, r0
    23de:	11 24       	eor	r1, r1
    23e0:	66 54       	subi	r22, 0x46	; 70
    23e2:	7e 4f       	sbci	r23, 0xFE	; 254
    23e4:	21 e0       	ldi	r18, 0x01	; 1
    23e6:	41 2f       	mov	r20, r17
    23e8:	8d e7       	ldi	r24, 0x7D	; 125
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
    23f0:	32 e0       	ldi	r19, 0x02	; 2
    23f2:	e3 0e       	add	r14, r19
    23f4:	f1 1c       	adc	r15, r1
	u8 Loc_u8TempData = ZERO_VALUE ;
	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
	_delay_ms(LCD_CLEAR_DELAY);

	Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
	for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
    23f6:	14 30       	cpi	r17, 0x04	; 4
    23f8:	39 f7       	brne	.-50     	; 0x23c8 <Smart_KeypadAdminList+0x50>
    23fa:	11 e0       	ldi	r17, 0x01	; 1
    23fc:	01 e0       	ldi	r16, 0x01	; 1
    23fe:	ff 24       	eor	r15, r15
    2400:	f3 94       	inc	r15
	while(Loc_u8Check != ZERO_VALUE){

		if(Keypad_Status == KEYPAD_IS_PRESSED){


			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2402:	63 e0       	ldi	r22, 0x03	; 3
    2404:	d6 2e       	mov	r13, r22
			switch(Keypad_u8Result){
    2406:	ee 24       	eor	r14, r14
    2408:	e3 94       	inc	r14

			}
			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
			_delay_ms(LCD_CLEAR_DELAY);
			Loc_u8TempStart = Loc_u8Start;
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
    240a:	74 e1       	ldi	r23, 0x14	; 20
    240c:	c7 2e       	mov	r12, r23
	for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)AdminListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]],Loc_u8Index+1,LCD_COL1);
	}


	while(Loc_u8Check != ZERO_VALUE){
    240e:	11 23       	and	r17, r17
    2410:	09 f4       	brne	.+2      	; 0x2414 <Smart_KeypadAdminList+0x9c>
    2412:	4d c1       	rjmp	.+666    	; 0x26ae <Smart_KeypadAdminList+0x336>

		if(Keypad_Status == KEYPAD_IS_PRESSED){
    2414:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    2418:	81 11       	cpse	r24, r1
    241a:	f9 cf       	rjmp	.-14     	; 0x240e <Smart_KeypadAdminList+0x96>


			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    241c:	d0 92 0f 03 	sts	0x030F, r13	; 0x80030f <Keypad_Status>
			switch(Keypad_u8Result){
    2420:	e0 91 e5 06 	lds	r30, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2424:	8e 2f       	mov	r24, r30
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	fc 01       	movw	r30, r24
    242a:	bb 97       	sbiw	r30, 0x2b	; 43
    242c:	ee 30       	cpi	r30, 0x0E	; 14
    242e:	f1 05       	cpc	r31, r1
    2430:	08 f0       	brcs	.+2      	; 0x2434 <Smart_KeypadAdminList+0xbc>
    2432:	74 c0       	rjmp	.+232    	; 0x251c <Smart_KeypadAdminList+0x1a4>
    2434:	e6 5c       	subi	r30, 0xC6	; 198
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__tablejump2__>
				break;
			case '7': // delete user
				Smart_DeleteUserKeypad();
				break;
			case '8':
				Loc_u8Check = ZERO_VALUE;
    243c:	10 e0       	ldi	r17, 0x00	; 0
    243e:	05 c1       	rjmp	.+522    	; 0x264a <Smart_KeypadAdminList+0x2d2>

			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
			switch(Keypad_u8Result){

			case '1':
				Timer0_enuDisableOverflowInterrupt();
    2440:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2444:	61 e0       	ldi	r22, 0x01	; 1
    2446:	8d e7       	ldi	r24, 0x7D	; 125
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    244e:	8f e7       	ldi	r24, 0x7F	; 127
    2450:	9e e3       	ldi	r25, 0x3E	; 62
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <Smart_KeypadAdminList+0xda>
    2456:	00 c0       	rjmp	.+0      	; 0x2458 <Smart_KeypadAdminList+0xe0>
    2458:	00 00       	nop
				_delay_ms(LCD_CLEAR_DELAY);

				if(AdminListStatus[ONE_VALUE] == ZERO_VALUE){
    245a:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <AdminListStatus+0x1>
    245e:	81 11       	cpse	r24, r1
    2460:	0e c0       	rjmp	.+28     	; 0x247e <Smart_KeypadAdminList+0x106>
					Servo_enuSetAngle(180);
    2462:	84 eb       	ldi	r24, 0xB4	; 180
    2464:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Servo_enuSetAngle>
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Door Is Open", LCD_ROW2,LCD_COL4);
    2468:	24 e0       	ldi	r18, 0x04	; 4
    246a:	42 e0       	ldi	r20, 0x02	; 2
    246c:	63 e0       	ldi	r22, 0x03	; 3
    246e:	74 e0       	ldi	r23, 0x04	; 4
    2470:	8d e7       	ldi	r24, 0x7D	; 125
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
					AdminListStatus[ONE_VALUE] = ONE_VALUE;
    2478:	e0 92 d8 06 	sts	0x06D8, r14	; 0x8006d8 <AdminListStatus+0x1>
    247c:	44 c0       	rjmp	.+136    	; 0x2506 <Smart_KeypadAdminList+0x18e>
				}
				else {
					Servo_enuSetAngle(0);
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Servo_enuSetAngle>
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Door Is Closed", LCD_ROW2,LCD_COL4);
    2484:	24 e0       	ldi	r18, 0x04	; 4
    2486:	42 e0       	ldi	r20, 0x02	; 2
    2488:	60 e1       	ldi	r22, 0x10	; 16
    248a:	74 e0       	ldi	r23, 0x04	; 4
    248c:	8d e7       	ldi	r24, 0x7D	; 125
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
					AdminListStatus[ONE_VALUE] = ZERO_VALUE;
    2494:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <AdminListStatus+0x1>
    2498:	36 c0       	rjmp	.+108    	; 0x2506 <Smart_KeypadAdminList+0x18e>
				Timer0_enuEnableOverflowInterrupt();
				break;


			case '2':
				Timer0_enuDisableOverflowInterrupt();
    249a:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	8d e7       	ldi	r24, 0x7D	; 125
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    24a8:	8f e7       	ldi	r24, 0x7F	; 127
    24aa:	9e e3       	ldi	r25, 0x3E	; 62
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	f1 f7       	brne	.-4      	; 0x24ac <Smart_KeypadAdminList+0x134>
    24b0:	00 c0       	rjmp	.+0      	; 0x24b2 <Smart_KeypadAdminList+0x13a>
    24b2:	00 00       	nop
				_delay_ms(LCD_CLEAR_DELAY);

				if(AdminListStatus[TWO_VALUE] == ZERO_VALUE){
    24b4:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <AdminListStatus+0x2>
    24b8:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    24bc:	91 11       	cpse	r25, r1
    24be:	0e c0       	rjmp	.+28     	; 0x24dc <Smart_KeypadAdminList+0x164>
					SET_BIT(MasterSmart_u8SlavePins,ZERO_VALUE);
    24c0:	81 60       	ori	r24, 0x01	; 1
    24c2:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room1 Is On", LCD_ROW2,LCD_COL4);
    24c6:	24 e0       	ldi	r18, 0x04	; 4
    24c8:	42 e0       	ldi	r20, 0x02	; 2
    24ca:	6f e1       	ldi	r22, 0x1F	; 31
    24cc:	74 e0       	ldi	r23, 0x04	; 4
    24ce:	8d e7       	ldi	r24, 0x7D	; 125
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
					AdminListStatus[TWO_VALUE] = ONE_VALUE;
    24d6:	e0 92 d9 06 	sts	0x06D9, r14	; 0x8006d9 <AdminListStatus+0x2>
    24da:	0d c0       	rjmp	.+26     	; 0x24f6 <Smart_KeypadAdminList+0x17e>
				}
				else {

					CLEAR_BIT(MasterSmart_u8SlavePins,ZERO_VALUE);
    24dc:	8e 7f       	andi	r24, 0xFE	; 254
    24de:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room1 Is Off", LCD_ROW2,LCD_COL4);
    24e2:	24 e0       	ldi	r18, 0x04	; 4
    24e4:	42 e0       	ldi	r20, 0x02	; 2
    24e6:	6b e2       	ldi	r22, 0x2B	; 43
    24e8:	74 e0       	ldi	r23, 0x04	; 4
    24ea:	8d e7       	ldi	r24, 0x7D	; 125
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
					AdminListStatus[TWO_VALUE] = ZERO_VALUE;
    24f2:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <AdminListStatus+0x2>
				}
				Spi_enuTransmitBlocking(SPI_SLAVE_PIN, MasterSmart_u8SlavePins, &Loc_u8TempData);
    24f6:	ae 01       	movw	r20, r28
    24f8:	4f 5f       	subi	r20, 0xFF	; 255
    24fa:	5f 4f       	sbci	r21, 0xFF	; 255
    24fc:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    2500:	8c e0       	ldi	r24, 0x0C	; 12
    2502:	0e 94 68 07 	call	0xed0	; 0xed0 <Spi_enuTransmitBlocking>
    2506:	9f ef       	ldi	r25, 0xFF	; 255
    2508:	e9 e6       	ldi	r30, 0x69	; 105
    250a:	f8 e1       	ldi	r31, 0x18	; 24
    250c:	91 50       	subi	r25, 0x01	; 1
    250e:	e0 40       	sbci	r30, 0x00	; 0
    2510:	f0 40       	sbci	r31, 0x00	; 0
    2512:	e1 f7       	brne	.-8      	; 0x250c <Smart_KeypadAdminList+0x194>
    2514:	00 c0       	rjmp	.+0      	; 0x2516 <Smart_KeypadAdminList+0x19e>
    2516:	00 00       	nop

				_delay_ms(500);
				Timer0_enuEnableOverflowInterrupt();
    2518:	0e 94 23 06 	call	0xc46	; 0xc46 <Timer0_enuEnableOverflowInterrupt>

				break;
    251c:	11 e0       	ldi	r17, 0x01	; 1
    251e:	95 c0       	rjmp	.+298    	; 0x264a <Smart_KeypadAdminList+0x2d2>

			case '3':
				Timer0_enuDisableOverflowInterrupt();
    2520:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	8d e7       	ldi	r24, 0x7D	; 125
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    252e:	8f e7       	ldi	r24, 0x7F	; 127
    2530:	9e e3       	ldi	r25, 0x3E	; 62
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <Smart_KeypadAdminList+0x1ba>
    2536:	00 c0       	rjmp	.+0      	; 0x2538 <Smart_KeypadAdminList+0x1c0>
    2538:	00 00       	nop
				_delay_ms(LCD_CLEAR_DELAY);

				if(AdminListStatus[THREE_VALUE] == ZERO_VALUE){
    253a:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <AdminListStatus+0x3>
    253e:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    2542:	91 11       	cpse	r25, r1
    2544:	0e c0       	rjmp	.+28     	; 0x2562 <Smart_KeypadAdminList+0x1ea>
					SET_BIT(MasterSmart_u8SlavePins,ONE_VALUE);
    2546:	82 60       	ori	r24, 0x02	; 2
    2548:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room2 Is On", LCD_ROW2,LCD_COL4);
    254c:	24 e0       	ldi	r18, 0x04	; 4
    254e:	42 e0       	ldi	r20, 0x02	; 2
    2550:	68 e3       	ldi	r22, 0x38	; 56
    2552:	74 e0       	ldi	r23, 0x04	; 4
    2554:	8d e7       	ldi	r24, 0x7D	; 125
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
					AdminListStatus[THREE_VALUE] = ONE_VALUE;
    255c:	e0 92 da 06 	sts	0x06DA, r14	; 0x8006da <AdminListStatus+0x3>
    2560:	ca cf       	rjmp	.-108    	; 0x24f6 <Smart_KeypadAdminList+0x17e>
				}
				else {
					CLEAR_BIT(MasterSmart_u8SlavePins,ONE_VALUE);
    2562:	8d 7f       	andi	r24, 0xFD	; 253
    2564:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room2 Is Off", LCD_ROW2,LCD_COL4);
    2568:	24 e0       	ldi	r18, 0x04	; 4
    256a:	42 e0       	ldi	r20, 0x02	; 2
    256c:	64 e4       	ldi	r22, 0x44	; 68
    256e:	74 e0       	ldi	r23, 0x04	; 4
    2570:	8d e7       	ldi	r24, 0x7D	; 125
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
					AdminListStatus[THREE_VALUE] = ZERO_VALUE;
    2578:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <AdminListStatus+0x3>
    257c:	bc cf       	rjmp	.-136    	; 0x24f6 <Smart_KeypadAdminList+0x17e>
				Spi_enuTransmitBlocking(SPI_SLAVE_PIN, MasterSmart_u8SlavePins, &Loc_u8TempData);
				_delay_ms(500);
				Timer0_enuEnableOverflowInterrupt();
				break;
			case '4':
				Timer0_enuDisableOverflowInterrupt();
    257e:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2582:	61 e0       	ldi	r22, 0x01	; 1
    2584:	8d e7       	ldi	r24, 0x7D	; 125
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    258c:	8f e7       	ldi	r24, 0x7F	; 127
    258e:	9e e3       	ldi	r25, 0x3E	; 62
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <Smart_KeypadAdminList+0x218>
    2594:	00 c0       	rjmp	.+0      	; 0x2596 <Smart_KeypadAdminList+0x21e>
    2596:	00 00       	nop
				_delay_ms(LCD_CLEAR_DELAY);

				if(AdminListStatus[FOUR_VALUE] == ZERO_VALUE){
    2598:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <AdminListStatus+0x4>
    259c:	81 11       	cpse	r24, r1
    259e:	10 c0       	rjmp	.+32     	; 0x25c0 <Smart_KeypadAdminList+0x248>
					SET_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
    25a0:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    25a4:	84 60       	ori	r24, 0x04	; 4
    25a6:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room3 Is On", LCD_ROW2,LCD_COL4);
    25aa:	24 e0       	ldi	r18, 0x04	; 4
    25ac:	42 e0       	ldi	r20, 0x02	; 2
    25ae:	61 e5       	ldi	r22, 0x51	; 81
    25b0:	74 e0       	ldi	r23, 0x04	; 4
    25b2:	8d e7       	ldi	r24, 0x7D	; 125
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
					AdminListStatus[FOUR_VALUE] = ONE_VALUE;
    25ba:	e0 92 db 06 	sts	0x06DB, r14	; 0x8006db <AdminListStatus+0x4>
    25be:	9b cf       	rjmp	.-202    	; 0x24f6 <Smart_KeypadAdminList+0x17e>
				}
				else {
					// Spi
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room3 Is Off", LCD_ROW2,LCD_COL4);
    25c0:	24 e0       	ldi	r18, 0x04	; 4
    25c2:	42 e0       	ldi	r20, 0x02	; 2
    25c4:	6d e5       	ldi	r22, 0x5D	; 93
    25c6:	74 e0       	ldi	r23, 0x04	; 4
    25c8:	8d e7       	ldi	r24, 0x7D	; 125
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
					AdminListStatus[FOUR_VALUE] = ZERO_VALUE;
    25d0:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <AdminListStatus+0x4>
					CLEAR_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
    25d4:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    25d8:	8b 7f       	andi	r24, 0xFB	; 251
    25da:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
    25de:	8b cf       	rjmp	.-234    	; 0x24f6 <Smart_KeypadAdminList+0x17e>
				_delay_ms(500);
				Timer0_enuEnableOverflowInterrupt();
				break;
			case '5': // show time

				Timer0_enuDisableOverflowInterrupt();
    25e0:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
				Smart_ShowTime();
    25e4:	0e 94 71 10 	call	0x20e2	; 0x20e2 <Smart_ShowTime>
    25e8:	97 cf       	rjmp	.-210    	; 0x2518 <Smart_KeypadAdminList+0x1a0>
				Timer0_enuEnableOverflowInterrupt();
				break;

			case '6':// add user
				Smart_AddUserKeypad();
    25ea:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <Smart_AddUserKeypad>
    25ee:	96 cf       	rjmp	.-212    	; 0x251c <Smart_KeypadAdminList+0x1a4>
				break;
			case '7': // delete user
				Smart_DeleteUserKeypad();
    25f0:	0e 94 55 11 	call	0x22aa	; 0x22aa <Smart_DeleteUserKeypad>
    25f4:	93 cf       	rjmp	.-218    	; 0x251c <Smart_KeypadAdminList+0x1a4>
				break;
			case '8':
				Loc_u8Check = ZERO_VALUE;
				break;
			case '-':
				Loc_u8CursorIndex = (Loc_u8CursorIndex-1)<1? 1 : Loc_u8CursorIndex-1;
    25f6:	8f 2d       	mov	r24, r15
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	02 97       	sbiw	r24, 0x02	; 2
    25fc:	14 f0       	brlt	.+4      	; 0x2602 <Smart_KeypadAdminList+0x28a>
    25fe:	fa 94       	dec	r15
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <Smart_KeypadAdminList+0x28e>
    2602:	ff 24       	eor	r15, r15
    2604:	f3 94       	inc	r15
				Loc_u8Start = (Loc_u8Start-1)<1? 1 : Loc_u8Start-1;
    2606:	80 2f       	mov	r24, r16
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	02 97       	sbiw	r24, 0x02	; 2
    260c:	3c f0       	brlt	.+14     	; 0x261c <Smart_KeypadAdminList+0x2a4>
    260e:	01 50       	subi	r16, 0x01	; 1
				if(Loc_u8Start == 3)
    2610:	03 30       	cpi	r16, 0x03	; 3
    2612:	09 f0       	breq	.+2      	; 0x2616 <Smart_KeypadAdminList+0x29e>
    2614:	83 cf       	rjmp	.-250    	; 0x251c <Smart_KeypadAdminList+0x1a4>
    2616:	11 e0       	ldi	r17, 0x01	; 1
					Loc_u8Start = 2;
    2618:	02 e0       	ldi	r16, 0x02	; 2
    261a:	17 c0       	rjmp	.+46     	; 0x264a <Smart_KeypadAdminList+0x2d2>
			case '8':
				Loc_u8Check = ZERO_VALUE;
				break;
			case '-':
				Loc_u8CursorIndex = (Loc_u8CursorIndex-1)<1? 1 : Loc_u8CursorIndex-1;
				Loc_u8Start = (Loc_u8Start-1)<1? 1 : Loc_u8Start-1;
    261c:	01 e0       	ldi	r16, 0x01	; 1
    261e:	7e cf       	rjmp	.-260    	; 0x251c <Smart_KeypadAdminList+0x1a4>
				if(Loc_u8Start == 3)
					Loc_u8Start = 2;
				break;
			case '+':

				Loc_u8CursorIndex = (Loc_u8CursorIndex+1)>4? 4 : Loc_u8CursorIndex+1;
    2620:	8f 2d       	mov	r24, r15
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	04 97       	sbiw	r24, 0x04	; 4
    2626:	14 f4       	brge	.+4      	; 0x262c <Smart_KeypadAdminList+0x2b4>
    2628:	f3 94       	inc	r15
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <Smart_KeypadAdminList+0x2b8>
    262c:	54 e0       	ldi	r21, 0x04	; 4
    262e:	f5 2e       	mov	r15, r21
				Loc_u8Start = (Loc_u8Start+1)>5? 5 : Loc_u8Start+1;
    2630:	80 2f       	mov	r24, r16
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	05 97       	sbiw	r24, 0x05	; 5
    2636:	3c f4       	brge	.+14     	; 0x2646 <Smart_KeypadAdminList+0x2ce>
    2638:	0f 5f       	subi	r16, 0xFF	; 255
				if(Loc_u8Start == 3)
    263a:	03 30       	cpi	r16, 0x03	; 3
    263c:	09 f0       	breq	.+2      	; 0x2640 <Smart_KeypadAdminList+0x2c8>
    263e:	6e cf       	rjmp	.-292    	; 0x251c <Smart_KeypadAdminList+0x1a4>
    2640:	11 e0       	ldi	r17, 0x01	; 1
					Loc_u8Start = 4;
    2642:	04 e0       	ldi	r16, 0x04	; 4
    2644:	02 c0       	rjmp	.+4      	; 0x264a <Smart_KeypadAdminList+0x2d2>
					Loc_u8Start = 2;
				break;
			case '+':

				Loc_u8CursorIndex = (Loc_u8CursorIndex+1)>4? 4 : Loc_u8CursorIndex+1;
				Loc_u8Start = (Loc_u8Start+1)>5? 5 : Loc_u8Start+1;
    2646:	05 e0       	ldi	r16, 0x05	; 5
    2648:	69 cf       	rjmp	.-302    	; 0x251c <Smart_KeypadAdminList+0x1a4>

			default :
				break;

			}
			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    264a:	61 e0       	ldi	r22, 0x01	; 1
    264c:	8d e7       	ldi	r24, 0x7D	; 125
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2654:	8f e7       	ldi	r24, 0x7F	; 127
    2656:	9e e3       	ldi	r25, 0x3E	; 62
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <Smart_KeypadAdminList+0x2e0>
    265c:	00 c0       	rjmp	.+0      	; 0x265e <Smart_KeypadAdminList+0x2e6>
    265e:	00 00       	nop
			_delay_ms(LCD_CLEAR_DELAY);
			Loc_u8TempStart = Loc_u8Start;
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
    2660:	24 e1       	ldi	r18, 0x14	; 20
    2662:	4f 2d       	mov	r20, r15
    2664:	6f ef       	ldi	r22, 0xFF	; 255
    2666:	8d e7       	ldi	r24, 0x7D	; 125
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 cd 0c 	call	0x199a	; 0x199a <Lcd_4bit_enuDisplayCharacterWithPosition>
			for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
    266e:	b1 2c       	mov	r11, r1
    2670:	80 2f       	mov	r24, r16
    2672:	8b 0d       	add	r24, r11
				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, AdminListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]],Loc_u8Index+1,LCD_COL1);
    2674:	b3 94       	inc	r11
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9c 01       	movw	r18, r24
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	fc 01       	movw	r30, r24
    2680:	e9 52       	subi	r30, 0x29	; 41
    2682:	f9 4f       	sbci	r31, 0xF9	; 249
    2684:	80 81       	ld	r24, Z
    2686:	f9 01       	movw	r30, r18
    2688:	e8 1b       	sub	r30, r24
    268a:	f1 09       	sbc	r31, r1
    268c:	ce 9e       	mul	r12, r30
    268e:	b0 01       	movw	r22, r0
    2690:	cf 9e       	mul	r12, r31
    2692:	70 0d       	add	r23, r0
    2694:	11 24       	eor	r1, r1
    2696:	66 54       	subi	r22, 0x46	; 70
    2698:	7e 4f       	sbci	r23, 0xFE	; 254
    269a:	21 e0       	ldi	r18, 0x01	; 1
    269c:	4b 2d       	mov	r20, r11
    269e:	8d e7       	ldi	r24, 0x7D	; 125
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
			}
			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
			_delay_ms(LCD_CLEAR_DELAY);
			Loc_u8TempStart = Loc_u8Start;
			Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
			for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
    26a6:	f4 e0       	ldi	r31, 0x04	; 4
    26a8:	bf 12       	cpse	r11, r31
    26aa:	e2 cf       	rjmp	.-60     	; 0x2670 <Smart_KeypadAdminList+0x2f8>
    26ac:	b0 ce       	rjmp	.-672    	; 0x240e <Smart_KeypadAdminList+0x96>


		}

	} // while
}
    26ae:	0f 90       	pop	r0
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	1f 91       	pop	r17
    26b6:	0f 91       	pop	r16
    26b8:	ff 90       	pop	r15
    26ba:	ef 90       	pop	r14
    26bc:	df 90       	pop	r13
    26be:	cf 90       	pop	r12
    26c0:	bf 90       	pop	r11
    26c2:	08 95       	ret

000026c4 <Smart_KeypadModeAdmin>:

}



void Smart_KeypadModeAdmin(){
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	1f 92       	push	r1
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62

	u8 Loc_u8AdminPassword = ZERO_VALUE;
	u8 Loc_u8Check = ONE_VALUE;
	u8 Loc_u8RealAdminPassword;

	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	8d e7       	ldi	r24, 0x7D	; 125
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    26dc:	8f e7       	ldi	r24, 0x7F	; 127
    26de:	9e e3       	ldi	r25, 0x3E	; 62
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <Smart_KeypadModeAdmin+0x1c>
    26e4:	00 c0       	rjmp	.+0      	; 0x26e6 <Smart_KeypadModeAdmin+0x22>
    26e6:	00 00       	nop
	_delay_ms(LCD_CLEAR_DELAY);
	Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>

	///////////////////////////////////////////////////////////////
	if(Loc_u8FirstTime == ONE_VALUE){
    26ee:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <Loc_u8FirstTime>
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <Smart_KeypadModeAdmin+0x34>
    26f6:	52 c0       	rjmp	.+164    	; 0x279c <Smart_KeypadModeAdmin+0xd8>
		Loc_u8FirstTime = ZERO_VALUE;
    26f8:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <Loc_u8FirstTime>
		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Admin New Password",LCD_ROW1,LCD_COL1);
    26fc:	21 e0       	ldi	r18, 0x01	; 1
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	6a e6       	ldi	r22, 0x6A	; 106
    2702:	74 e0       	ldi	r23, 0x04	; 4
    2704:	8d e7       	ldi	r24, 0x7D	; 125
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
		Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2, LCD_COL1);
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	8d e7       	ldi	r24, 0x7D	; 125
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Lcd_4bit_enuGoToXY>


void Smart_KeypadModeAdmin(){

	u8 Loc_u8AdminPassword = ZERO_VALUE;
	u8 Loc_u8Check = ONE_VALUE;
    2718:	81 e0       	ldi	r24, 0x01	; 1



void Smart_KeypadModeAdmin(){

	u8 Loc_u8AdminPassword = ZERO_VALUE;
    271a:	10 e0       	ldi	r17, 0x00	; 0
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Admin Password Done", LCD_ROW2, LCD_COL2);
					_delay_ms(1000);


				}
				Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    271c:	03 e0       	ldi	r16, 0x03	; 3
	if(Loc_u8FirstTime == ONE_VALUE){
		Loc_u8FirstTime = ZERO_VALUE;
		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Admin New Password",LCD_ROW1,LCD_COL1);
		Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW2, LCD_COL1);

		while(Loc_u8Check != ZERO_VALUE){
    271e:	88 23       	and	r24, r24
    2720:	09 f4       	brne	.+2      	; 0x2724 <Smart_KeypadModeAdmin+0x60>
    2722:	c6 c0       	rjmp	.+396    	; 0x28b0 <Smart_KeypadModeAdmin+0x1ec>

			if(Keypad_Status == KEYPAD_IS_PRESSED){
    2724:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <Keypad_Status>
    2728:	91 11       	cpse	r25, r1
    272a:	f9 cf       	rjmp	.-14     	; 0x271e <Smart_KeypadModeAdmin+0x5a>
				if(Keypad_u8Result != '='){
    272c:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2730:	8d 33       	cpi	r24, 0x3D	; 61
    2732:	79 f0       	breq	.+30     	; 0x2752 <Smart_KeypadModeAdmin+0x8e>
					Loc_u8AdminPassword=Loc_u8AdminPassword*10 + (Keypad_u8Result-'0');
    2734:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2738:	80 53       	subi	r24, 0x30	; 48
    273a:	9a e0       	ldi	r25, 0x0A	; 10
    273c:	19 9f       	mul	r17, r25
    273e:	80 0d       	add	r24, r0
    2740:	11 24       	eor	r1, r1
    2742:	18 2f       	mov	r17, r24
					Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
    2744:	6a e2       	ldi	r22, 0x2A	; 42
    2746:	8d e7       	ldi	r24, 0x7D	; 125
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	22 c0       	rjmp	.+68     	; 0x2796 <Smart_KeypadModeAdmin+0xd2>
				}
				else{
					Loc_u8Check = ZERO_VALUE;
					ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, ZERO_VALUE, Loc_u8AdminPassword);
    2752:	41 2f       	mov	r20, r17
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	80 e5       	ldi	r24, 0x50	; 80
    2758:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <ExternalEeprom_WriteByte>
					Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	8d e7       	ldi	r24, 0x7D	; 125
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2766:	8f e7       	ldi	r24, 0x7F	; 127
    2768:	9e e3       	ldi	r25, 0x3E	; 62
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <Smart_KeypadModeAdmin+0xa6>
    276e:	00 c0       	rjmp	.+0      	; 0x2770 <Smart_KeypadModeAdmin+0xac>
    2770:	00 00       	nop
					_delay_ms(LCD_CLEAR_DELAY);

					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Admin Password Done", LCD_ROW2, LCD_COL2);
    2772:	22 e0       	ldi	r18, 0x02	; 2
    2774:	42 e0       	ldi	r20, 0x02	; 2
    2776:	6d e7       	ldi	r22, 0x7D	; 125
    2778:	74 e0       	ldi	r23, 0x04	; 4
    277a:	8d e7       	ldi	r24, 0x7D	; 125
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
    2782:	9f ef       	ldi	r25, 0xFF	; 255
    2784:	23 ed       	ldi	r18, 0xD3	; 211
    2786:	80 e3       	ldi	r24, 0x30	; 48
    2788:	91 50       	subi	r25, 0x01	; 1
    278a:	20 40       	sbci	r18, 0x00	; 0
    278c:	80 40       	sbci	r24, 0x00	; 0
    278e:	e1 f7       	brne	.-8      	; 0x2788 <Smart_KeypadModeAdmin+0xc4>
    2790:	00 c0       	rjmp	.+0      	; 0x2792 <Smart_KeypadModeAdmin+0xce>
    2792:	00 00       	nop
				if(Keypad_u8Result != '='){
					Loc_u8AdminPassword=Loc_u8AdminPassword*10 + (Keypad_u8Result-'0');
					Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
				}
				else{
					Loc_u8Check = ZERO_VALUE;
    2794:	80 e0       	ldi	r24, 0x00	; 0
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Admin Password Done", LCD_ROW2, LCD_COL2);
					_delay_ms(1000);


				}
				Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2796:	00 93 0f 03 	sts	0x030F, r16	; 0x80030f <Keypad_Status>
    279a:	c1 cf       	rjmp	.-126    	; 0x271e <Smart_KeypadModeAdmin+0x5a>
		}

	}
	////////////////////////////////////////////////////////////////////////////
	else{
		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Admin Password",LCD_ROW1,LCD_COL1);
    279c:	21 e0       	ldi	r18, 0x01	; 1
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	61 e9       	ldi	r22, 0x91	; 145
    27a2:	74 e0       	ldi	r23, 0x04	; 4
    27a4:	8d e7       	ldi	r24, 0x7D	; 125
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>

		ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, ZERO_VALUE, &Loc_u8RealAdminPassword);
    27ac:	ae 01       	movw	r20, r28
    27ae:	4f 5f       	subi	r20, 0xFF	; 255
    27b0:	5f 4f       	sbci	r21, 0xFF	; 255
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	80 e5       	ldi	r24, 0x50	; 80
    27b6:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <ExternalEeprom_ReadByte>


void Smart_KeypadModeAdmin(){

	u8 Loc_u8AdminPassword = ZERO_VALUE;
	u8 Loc_u8Check = ONE_VALUE;
    27ba:	81 e0       	ldi	r24, 0x01	; 1



void Smart_KeypadModeAdmin(){

	u8 Loc_u8AdminPassword = ZERO_VALUE;
    27bc:	90 e0       	ldi	r25, 0x00	; 0

								}


						}
						Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    27be:	03 e0       	ldi	r16, 0x03	; 3
	else{
		Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Admin Password",LCD_ROW1,LCD_COL1);

		ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, ZERO_VALUE, &Loc_u8RealAdminPassword);

		while(Loc_u8Check != ZERO_VALUE){
    27c0:	88 23       	and	r24, r24
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <Smart_KeypadModeAdmin+0x102>
    27c4:	75 c0       	rjmp	.+234    	; 0x28b0 <Smart_KeypadModeAdmin+0x1ec>


					if(Keypad_Status == KEYPAD_IS_PRESSED){
    27c6:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <Keypad_Status>
    27ca:	21 11       	cpse	r18, r1
    27cc:	f9 cf       	rjmp	.-14     	; 0x27c0 <Smart_KeypadModeAdmin+0xfc>
						if(Keypad_u8Result != '='){
    27ce:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    27d2:	8d 33       	cpi	r24, 0x3D	; 61
    27d4:	71 f0       	breq	.+28     	; 0x27f2 <Smart_KeypadModeAdmin+0x12e>
							Loc_u8AdminPassword=Loc_u8AdminPassword*10 + (Keypad_u8Result-'0');
    27d6:	10 91 e5 06 	lds	r17, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    27da:	10 53       	subi	r17, 0x30	; 48
    27dc:	2a e0       	ldi	r18, 0x0A	; 10
    27de:	92 9f       	mul	r25, r18
    27e0:	10 0d       	add	r17, r0
    27e2:	11 24       	eor	r1, r1
							Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
    27e4:	6a e2       	ldi	r22, 0x2A	; 42
    27e6:	8d e7       	ldi	r24, 0x7D	; 125
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	5b c0       	rjmp	.+182    	; 0x28a8 <Smart_KeypadModeAdmin+0x1e4>
						}
						else{


								if(Loc_u8RealAdminPassword == Loc_u8AdminPassword){
    27f2:	19 81       	ldd	r17, Y+1	; 0x01
									// password is right
									Loc_u8Check = ZERO_VALUE;
									Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    27f4:	61 e0       	ldi	r22, 0x01	; 1
							Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
						}
						else{


								if(Loc_u8RealAdminPassword == Loc_u8AdminPassword){
    27f6:	19 13       	cpse	r17, r25
    27f8:	1f c0       	rjmp	.+62     	; 0x2838 <Smart_KeypadModeAdmin+0x174>
									// password is right
									Loc_u8Check = ZERO_VALUE;
									Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    27fa:	8d e7       	ldi	r24, 0x7D	; 125
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2802:	8f e7       	ldi	r24, 0x7F	; 127
    2804:	9e e3       	ldi	r25, 0x3E	; 62
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <Smart_KeypadModeAdmin+0x142>
    280a:	00 c0       	rjmp	.+0      	; 0x280c <Smart_KeypadModeAdmin+0x148>
    280c:	00 00       	nop
									_delay_ms(LCD_CLEAR_DELAY);

									Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Password Is Right",LCD_ROW2,LCD_COL2);
    280e:	22 e0       	ldi	r18, 0x02	; 2
    2810:	42 e0       	ldi	r20, 0x02	; 2
    2812:	66 ea       	ldi	r22, 0xA6	; 166
    2814:	74 e0       	ldi	r23, 0x04	; 4
    2816:	8d e7       	ldi	r24, 0x7D	; 125
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
    281e:	9f ef       	ldi	r25, 0xFF	; 255
    2820:	29 e6       	ldi	r18, 0x69	; 105
    2822:	88 e1       	ldi	r24, 0x18	; 24
    2824:	91 50       	subi	r25, 0x01	; 1
    2826:	20 40       	sbci	r18, 0x00	; 0
    2828:	80 40       	sbci	r24, 0x00	; 0
    282a:	e1 f7       	brne	.-8      	; 0x2824 <Smart_KeypadModeAdmin+0x160>
    282c:	00 c0       	rjmp	.+0      	; 0x282e <Smart_KeypadModeAdmin+0x16a>
    282e:	00 00       	nop
									_delay_ms(500);
									Smart_KeypadAdminList();
    2830:	0e 94 bc 11 	call	0x2378	; 0x2378 <Smart_KeypadAdminList>
						else{


								if(Loc_u8RealAdminPassword == Loc_u8AdminPassword){
									// password is right
									Loc_u8Check = ZERO_VALUE;
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	38 c0       	rjmp	.+112    	; 0x28a8 <Smart_KeypadModeAdmin+0x1e4>
									Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Password Is Right",LCD_ROW2,LCD_COL2);
									_delay_ms(500);
									Smart_KeypadAdminList();
								}
								else{
									Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2838:	8d e7       	ldi	r24, 0x7D	; 125
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2840:	8f e7       	ldi	r24, 0x7F	; 127
    2842:	9e e3       	ldi	r25, 0x3E	; 62
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <Smart_KeypadModeAdmin+0x180>
    2848:	00 c0       	rjmp	.+0      	; 0x284a <Smart_KeypadModeAdmin+0x186>
    284a:	00 00       	nop
									_delay_ms(LCD_CLEAR_DELAY);

									Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Password Is WRONG",LCD_ROW2,LCD_COL2);
    284c:	22 e0       	ldi	r18, 0x02	; 2
    284e:	42 e0       	ldi	r20, 0x02	; 2
    2850:	68 eb       	ldi	r22, 0xB8	; 184
    2852:	74 e0       	ldi	r23, 0x04	; 4
    2854:	8d e7       	ldi	r24, 0x7D	; 125
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
									Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Try Again ",LCD_ROW4,LCD_COL6);
    285c:	26 e0       	ldi	r18, 0x06	; 6
    285e:	44 e0       	ldi	r20, 0x04	; 4
    2860:	6c ec       	ldi	r22, 0xCC	; 204
    2862:	74 e0       	ldi	r23, 0x04	; 4
    2864:	8d e7       	ldi	r24, 0x7D	; 125
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
    286c:	9f ef       	ldi	r25, 0xFF	; 255
    286e:	29 e6       	ldi	r18, 0x69	; 105
    2870:	88 e1       	ldi	r24, 0x18	; 24
    2872:	91 50       	subi	r25, 0x01	; 1
    2874:	20 40       	sbci	r18, 0x00	; 0
    2876:	80 40       	sbci	r24, 0x00	; 0
    2878:	e1 f7       	brne	.-8      	; 0x2872 <Smart_KeypadModeAdmin+0x1ae>
    287a:	00 c0       	rjmp	.+0      	; 0x287c <Smart_KeypadModeAdmin+0x1b8>
    287c:	00 00       	nop
									_delay_ms(500);
									Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    287e:	61 e0       	ldi	r22, 0x01	; 1
    2880:	8d e7       	ldi	r24, 0x7D	; 125
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2888:	8f e7       	ldi	r24, 0x7F	; 127
    288a:	9e e3       	ldi	r25, 0x3E	; 62
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <Smart_KeypadModeAdmin+0x1c8>
    2890:	00 c0       	rjmp	.+0      	; 0x2892 <Smart_KeypadModeAdmin+0x1ce>
    2892:	00 00       	nop
									_delay_ms(LCD_CLEAR_DELAY);
									Loc_u8AdminPassword = ZERO_VALUE;
									Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Admin Password",LCD_ROW1,LCD_COL1);
    2894:	21 e0       	ldi	r18, 0x01	; 1
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	61 e9       	ldi	r22, 0x91	; 145
    289a:	74 e0       	ldi	r23, 0x04	; 4
    289c:	8d e7       	ldi	r24, 0x7D	; 125
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
    28a4:	81 e0       	ldi	r24, 0x01	; 1
									Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Password Is WRONG",LCD_ROW2,LCD_COL2);
									Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Try Again ",LCD_ROW4,LCD_COL6);
									_delay_ms(500);
									Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
									_delay_ms(LCD_CLEAR_DELAY);
									Loc_u8AdminPassword = ZERO_VALUE;
    28a6:	10 e0       	ldi	r17, 0x00	; 0

								}


						}
						Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    28a8:	00 93 0f 03 	sts	0x030F, r16	; 0x80030f <Keypad_Status>
    28ac:	91 2f       	mov	r25, r17
    28ae:	88 cf       	rjmp	.-240    	; 0x27c0 <Smart_KeypadModeAdmin+0xfc>
					}

				}

	}
}
    28b0:	0f 90       	pop	r0
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	1f 91       	pop	r17
    28b8:	0f 91       	pop	r16
    28ba:	08 95       	ret

000028bc <MasterSmart_ChangePasswordKeypad>:
		ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, 0xFF);
		_delay_ms(800);

}

void MasterSmart_ChangePasswordKeypad(u8 Loc_u8CopyUserId,u8 Loc_u8CopyUserPassword){
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	18 2f       	mov	r17, r24
    28c6:	06 2f       	mov	r16, r22

	u8 Loc_u8Check = ONE_VALUE;
	u8 Loc_u8Password = ZERO_VALUE;
	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    28c8:	61 e0       	ldi	r22, 0x01	; 1
    28ca:	8d e7       	ldi	r24, 0x7D	; 125
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    28d2:	2f ef       	ldi	r18, 0xFF	; 255
    28d4:	89 ef       	ldi	r24, 0xF9	; 249
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	21 50       	subi	r18, 0x01	; 1
    28da:	80 40       	sbci	r24, 0x00	; 0
    28dc:	90 40       	sbci	r25, 0x00	; 0
    28de:	e1 f7       	brne	.-8      	; 0x28d8 <MasterSmart_ChangePasswordKeypad+0x1c>
    28e0:	00 c0       	rjmp	.+0      	; 0x28e2 <MasterSmart_ChangePasswordKeypad+0x26>
    28e2:	00 00       	nop
	_delay_ms(LCD_DISPLAY_DELAY);

	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Old Password: ",LCD_ROW2,LCD_COL1);
    28e4:	21 e0       	ldi	r18, 0x01	; 1
    28e6:	42 e0       	ldi	r20, 0x02	; 2
    28e8:	6e e3       	ldi	r22, 0x3E	; 62
    28ea:	75 e0       	ldi	r23, 0x05	; 5
    28ec:	8d e7       	ldi	r24, 0x7D	; 125
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	63 e0       	ldi	r22, 0x03	; 3
    28f8:	8d e7       	ldi	r24, 0x7D	; 125
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Lcd_4bit_enuGoToXY>
}

void MasterSmart_ChangePasswordKeypad(u8 Loc_u8CopyUserId,u8 Loc_u8CopyUserPassword){

	u8 Loc_u8Check = ONE_VALUE;
	u8 Loc_u8Password = ZERO_VALUE;
    2900:	c0 e0       	ldi	r28, 0x00	; 0
				Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
			}



			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2902:	d3 e0       	ldi	r29, 0x03	; 3

	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Old Password: ",LCD_ROW2,LCD_COL1);
	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
	while(Loc_u8Check != ZERO_VALUE){

		if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
    2904:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    2908:	81 11       	cpse	r24, r1
    290a:	18 c0       	rjmp	.+48     	; 0x293c <MasterSmart_ChangePasswordKeypad+0x80>
    290c:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2910:	80 33       	cpi	r24, 0x30	; 48
    2912:	a0 f0       	brcs	.+40     	; 0x293c <MasterSmart_ChangePasswordKeypad+0x80>
    2914:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2918:	8a 33       	cpi	r24, 0x3A	; 58
    291a:	80 f4       	brcc	.+32     	; 0x293c <MasterSmart_ChangePasswordKeypad+0x80>
			Loc_u8Password = Loc_u8Password*10+ Keypad_u8Result-'0';
    291c:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2920:	80 53       	subi	r24, 0x30	; 48
    2922:	2a e0       	ldi	r18, 0x0A	; 10
    2924:	c2 9f       	mul	r28, r18
    2926:	80 0d       	add	r24, r0
    2928:	11 24       	eor	r1, r1
    292a:	c8 2f       	mov	r28, r24
			Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
    292c:	6a e2       	ldi	r22, 0x2A	; 42
    292e:	8d e7       	ldi	r24, 0x7D	; 125
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2936:	d0 93 0f 03 	sts	0x030F, r29	; 0x80030f <Keypad_Status>
    293a:	e4 cf       	rjmp	.-56     	; 0x2904 <MasterSmart_ChangePasswordKeypad+0x48>
		}
		else if (Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result=='=')){
    293c:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    2940:	81 11       	cpse	r24, r1
    2942:	e0 cf       	rjmp	.-64     	; 0x2904 <MasterSmart_ChangePasswordKeypad+0x48>
    2944:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2948:	8d 33       	cpi	r24, 0x3D	; 61
    294a:	e1 f6       	brne	.-72     	; 0x2904 <MasterSmart_ChangePasswordKeypad+0x48>
			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    294c:	61 e0       	ldi	r22, 0x01	; 1
    294e:	8d e7       	ldi	r24, 0x7D	; 125
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2956:	8f ef       	ldi	r24, 0xFF	; 255
    2958:	99 ef       	ldi	r25, 0xF9	; 249
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	81 50       	subi	r24, 0x01	; 1
    295e:	90 40       	sbci	r25, 0x00	; 0
    2960:	20 40       	sbci	r18, 0x00	; 0
    2962:	e1 f7       	brne	.-8      	; 0x295c <MasterSmart_ChangePasswordKeypad+0xa0>
    2964:	00 c0       	rjmp	.+0      	; 0x2966 <MasterSmart_ChangePasswordKeypad+0xaa>
    2966:	00 00       	nop
			_delay_ms(LCD_DISPLAY_DELAY);

			if(Loc_u8CopyUserPassword == Loc_u8Password){
    2968:	0c 17       	cp	r16, r28
    296a:	c1 f1       	breq	.+112    	; 0x29dc <MasterSmart_ChangePasswordKeypad+0x120>
				Loc_u8Check = ZERO_VALUE;
			}

			else{
				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)" Wrong Password", LCD_ROW2,LCD_COL4);
    296c:	24 e0       	ldi	r18, 0x04	; 4
    296e:	42 e0       	ldi	r20, 0x02	; 2
    2970:	64 e5       	ldi	r22, 0x54	; 84
    2972:	75 e0       	ldi	r23, 0x05	; 5
    2974:	8d e7       	ldi	r24, 0x7D	; 125
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"  Try Again ", LCD_ROW4,LCD_COL4);
    297c:	24 e0       	ldi	r18, 0x04	; 4
    297e:	44 e0       	ldi	r20, 0x04	; 4
    2980:	6a ec       	ldi	r22, 0xCA	; 202
    2982:	74 e0       	ldi	r23, 0x04	; 4
    2984:	8d e7       	ldi	r24, 0x7D	; 125
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
    298c:	8f ef       	ldi	r24, 0xFF	; 255
    298e:	9f e0       	ldi	r25, 0x0F	; 15
    2990:	27 e2       	ldi	r18, 0x27	; 39
    2992:	81 50       	subi	r24, 0x01	; 1
    2994:	90 40       	sbci	r25, 0x00	; 0
    2996:	20 40       	sbci	r18, 0x00	; 0
    2998:	e1 f7       	brne	.-8      	; 0x2992 <MasterSmart_ChangePasswordKeypad+0xd6>
    299a:	00 c0       	rjmp	.+0      	; 0x299c <MasterSmart_ChangePasswordKeypad+0xe0>
    299c:	00 00       	nop
				Loc_u8Password = ZERO_VALUE;
				_delay_ms(800);

				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    299e:	61 e0       	ldi	r22, 0x01	; 1
    29a0:	8d e7       	ldi	r24, 0x7D	; 125
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    29a8:	8f ef       	ldi	r24, 0xFF	; 255
    29aa:	99 ef       	ldi	r25, 0xF9	; 249
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	81 50       	subi	r24, 0x01	; 1
    29b0:	90 40       	sbci	r25, 0x00	; 0
    29b2:	20 40       	sbci	r18, 0x00	; 0
    29b4:	e1 f7       	brne	.-8      	; 0x29ae <MasterSmart_ChangePasswordKeypad+0xf2>
    29b6:	00 c0       	rjmp	.+0      	; 0x29b8 <MasterSmart_ChangePasswordKeypad+0xfc>
    29b8:	00 00       	nop
				_delay_ms(LCD_DISPLAY_DELAY);

				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Old Password: ",LCD_ROW2,LCD_COL1);
    29ba:	21 e0       	ldi	r18, 0x01	; 1
    29bc:	42 e0       	ldi	r20, 0x02	; 2
    29be:	6e e3       	ldi	r22, 0x3E	; 62
    29c0:	75 e0       	ldi	r23, 0x05	; 5
    29c2:	8d e7       	ldi	r24, 0x7D	; 125
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
				Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
    29ca:	41 e0       	ldi	r20, 0x01	; 1
    29cc:	63 e0       	ldi	r22, 0x03	; 3
    29ce:	8d e7       	ldi	r24, 0x7D	; 125
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Lcd_4bit_enuGoToXY>
			}

			else{
				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)" Wrong Password", LCD_ROW2,LCD_COL4);
				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"  Try Again ", LCD_ROW4,LCD_COL4);
				Loc_u8Password = ZERO_VALUE;
    29d6:	c0 e0       	ldi	r28, 0x00	; 0

				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
				_delay_ms(LCD_DISPLAY_DELAY);

				Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Old Password: ",LCD_ROW2,LCD_COL1);
				Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	01 c0       	rjmp	.+2      	; 0x29de <MasterSmart_ChangePasswordKeypad+0x122>
		else if (Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result=='=')){
			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
			_delay_ms(LCD_DISPLAY_DELAY);

			if(Loc_u8CopyUserPassword == Loc_u8Password){
				Loc_u8Check = ZERO_VALUE;
    29dc:	80 e0       	ldi	r24, 0x00	; 0
				Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
			}



			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    29de:	d0 93 0f 03 	sts	0x030F, r29	; 0x80030f <Keypad_Status>
	Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
	_delay_ms(LCD_DISPLAY_DELAY);

	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Old Password: ",LCD_ROW2,LCD_COL1);
	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
	while(Loc_u8Check != ZERO_VALUE){
    29e2:	81 11       	cpse	r24, r1
    29e4:	8f cf       	rjmp	.-226    	; 0x2904 <MasterSmart_ChangePasswordKeypad+0x48>
	}

	/* Password Part */
	Loc_u8Check = ONE_VALUE;
	Loc_u8Password =ZERO_VALUE;
	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter New Password: ",LCD_ROW2,LCD_COL1);
    29e6:	21 e0       	ldi	r18, 0x01	; 1
    29e8:	42 e0       	ldi	r20, 0x02	; 2
    29ea:	61 e7       	ldi	r22, 0x71	; 113
    29ec:	75 e0       	ldi	r23, 0x05	; 5
    29ee:	8d e7       	ldi	r24, 0x7D	; 125
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
    29f6:	41 e0       	ldi	r20, 0x01	; 1
    29f8:	63 e0       	ldi	r22, 0x03	; 3
    29fa:	8d e7       	ldi	r24, 0x7D	; 125
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Lcd_4bit_enuGoToXY>

	}

	/* Password Part */
	Loc_u8Check = ONE_VALUE;
	Loc_u8Password =ZERO_VALUE;
    2a02:	c0 e0       	ldi	r28, 0x00	; 0
	while(Loc_u8Check != ZERO_VALUE){

		if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
			Loc_u8Password = Loc_u8Password*10+ Keypad_u8Result-'0';
			Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2a04:	d3 e0       	ldi	r29, 0x03	; 3
	Loc_u8Password =ZERO_VALUE;
	Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter New Password: ",LCD_ROW2,LCD_COL1);
	Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
	while(Loc_u8Check != ZERO_VALUE){

		if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
    2a06:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    2a0a:	81 11       	cpse	r24, r1
    2a0c:	18 c0       	rjmp	.+48     	; 0x2a3e <MasterSmart_ChangePasswordKeypad+0x182>
    2a0e:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2a12:	80 33       	cpi	r24, 0x30	; 48
    2a14:	a0 f0       	brcs	.+40     	; 0x2a3e <MasterSmart_ChangePasswordKeypad+0x182>
    2a16:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2a1a:	8a 33       	cpi	r24, 0x3A	; 58
    2a1c:	80 f4       	brcc	.+32     	; 0x2a3e <MasterSmart_ChangePasswordKeypad+0x182>
			Loc_u8Password = Loc_u8Password*10+ Keypad_u8Result-'0';
    2a1e:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2a22:	80 53       	subi	r24, 0x30	; 48
    2a24:	9a e0       	ldi	r25, 0x0A	; 10
    2a26:	c9 9f       	mul	r28, r25
    2a28:	80 0d       	add	r24, r0
    2a2a:	11 24       	eor	r1, r1
    2a2c:	c8 2f       	mov	r28, r24
			Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
    2a2e:	6a e2       	ldi	r22, 0x2A	; 42
    2a30:	8d e7       	ldi	r24, 0x7D	; 125
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2a38:	d0 93 0f 03 	sts	0x030F, r29	; 0x80030f <Keypad_Status>
    2a3c:	e4 cf       	rjmp	.-56     	; 0x2a06 <MasterSmart_ChangePasswordKeypad+0x14a>
		}
		else if (Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result=='=')){
    2a3e:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    2a42:	81 11       	cpse	r24, r1
    2a44:	e0 cf       	rjmp	.-64     	; 0x2a06 <MasterSmart_ChangePasswordKeypad+0x14a>
    2a46:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2a4a:	8d 33       	cpi	r24, 0x3D	; 61
    2a4c:	e1 f6       	brne	.-72     	; 0x2a06 <MasterSmart_ChangePasswordKeypad+0x14a>
			ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8CopyUserId, Loc_u8Password);
    2a4e:	4c 2f       	mov	r20, r28
    2a50:	61 2f       	mov	r22, r17
    2a52:	80 e5       	ldi	r24, 0x50	; 80
    2a54:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <ExternalEeprom_WriteByte>

			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	8d e7       	ldi	r24, 0x7D	; 125
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2a62:	2f ef       	ldi	r18, 0xFF	; 255
    2a64:	89 ef       	ldi	r24, 0xF9	; 249
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	21 50       	subi	r18, 0x01	; 1
    2a6a:	80 40       	sbci	r24, 0x00	; 0
    2a6c:	90 40       	sbci	r25, 0x00	; 0
    2a6e:	e1 f7       	brne	.-8      	; 0x2a68 <MasterSmart_ChangePasswordKeypad+0x1ac>
    2a70:	00 c0       	rjmp	.+0      	; 0x2a72 <MasterSmart_ChangePasswordKeypad+0x1b6>
    2a72:	00 00       	nop
			_delay_ms(LCD_DISPLAY_DELAY);
			Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Change is done ", LCD_ROW2, LCD_COL3);
    2a74:	23 e0       	ldi	r18, 0x03	; 3
    2a76:	42 e0       	ldi	r20, 0x02	; 2
    2a78:	67 ed       	ldi	r22, 0xD7	; 215
    2a7a:	74 e0       	ldi	r23, 0x04	; 4
    2a7c:	8d e7       	ldi	r24, 0x7D	; 125
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>

			Loc_u8Check = ZERO_VALUE;
			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2a84:	83 e0       	ldi	r24, 0x03	; 3
    2a86:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>
    2a8a:	2f ef       	ldi	r18, 0xFF	; 255
    2a8c:	8f e0       	ldi	r24, 0x0F	; 15
    2a8e:	97 e2       	ldi	r25, 0x27	; 39
    2a90:	21 50       	subi	r18, 0x01	; 1
    2a92:	80 40       	sbci	r24, 0x00	; 0
    2a94:	90 40       	sbci	r25, 0x00	; 0
    2a96:	e1 f7       	brne	.-8      	; 0x2a90 <MasterSmart_ChangePasswordKeypad+0x1d4>
    2a98:	00 c0       	rjmp	.+0      	; 0x2a9a <MasterSmart_ChangePasswordKeypad+0x1de>
    2a9a:	00 00       	nop

		}

	}
	_delay_ms(800);
}
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	08 95       	ret

00002aa6 <Smart_KeypadModeUser>:
				}

	}
}

void Smart_KeypadModeUser(){
    2aa6:	af 92       	push	r10
    2aa8:	bf 92       	push	r11
    2aaa:	cf 92       	push	r12
    2aac:	df 92       	push	r13
    2aae:	ef 92       	push	r14
    2ab0:	ff 92       	push	r15
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <Smart_KeypadModeUser+0x16>
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
	 * 7- back to the main menu
	 */



		u8 Loc_u8TempData = ZERO_VALUE ;
    2ac0:	1a 82       	std	Y+2, r1	; 0x02
		u8 Loc_u8Index = ZERO_VALUE;
		u8 Loc_u8CursorIndex = ONE_VALUE;
		u8 Loc_u8Start = ONE_VALUE;
		u8 Loc_u8TempStart = ONE_VALUE;

			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2ac2:	83 e0       	ldi	r24, 0x03	; 3
    2ac4:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>


///////////////////// LOG IN PART ///////////////////////////////////////////////////

		u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8UsernameId= ZERO_VALUE;
    2ac8:	e1 2c       	mov	r14, r1
				Loc_u8UsernameId=ZERO_VALUE;
				if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
					Loc_u8UsernameId = Keypad_u8Result-'0';
					Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8UsernameId);
					Loc_u8Check = ZERO_VALUE;
					Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2aca:	13 e0       	ldi	r17, 0x03	; 3

			while(Loc_u8TryAgain == ONE_VALUE){
		        Loc_u8Check = ONE_VALUE;

				Loc_u8Password= ZERO_VALUE;
				Loc_u8RealPassword = ZERO_VALUE;
    2acc:	19 82       	std	Y+1, r1	; 0x01
				Loc_u8Check = ONE_VALUE;

			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	8d e7       	ldi	r24, 0x7D	; 125
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2ad8:	8f e7       	ldi	r24, 0x7F	; 127
    2ada:	9e e3       	ldi	r25, 0x3E	; 62
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <Smart_KeypadModeUser+0x36>
    2ae0:	00 c0       	rjmp	.+0      	; 0x2ae2 <Smart_KeypadModeUser+0x3c>
    2ae2:	00 00       	nop
			_delay_ms(LCD_CLEAR_DELAY);
			Lcd_4bit_enuDisplayString(&Lcd, (u8*)"Enter Username ID:");
    2ae4:	67 ec       	ldi	r22, 0xC7	; 199
    2ae6:	73 e0       	ldi	r23, 0x03	; 3
    2ae8:	8d e7       	ldi	r24, 0x7D	; 125
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Lcd_4bit_enuDisplayString>
    2af0:	81 e0       	ldi	r24, 0x01	; 1

			while(Loc_u8Check != ZERO_VALUE){
    2af2:	88 23       	and	r24, r24
    2af4:	f1 f0       	breq	.+60     	; 0x2b32 <Smart_KeypadModeUser+0x8c>
				Loc_u8UsernameId=ZERO_VALUE;
				if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
    2af6:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <Keypad_Status>
			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
			_delay_ms(LCD_CLEAR_DELAY);
			Lcd_4bit_enuDisplayString(&Lcd, (u8*)"Enter Username ID:");

			while(Loc_u8Check != ZERO_VALUE){
				Loc_u8UsernameId=ZERO_VALUE;
    2afa:	e1 2c       	mov	r14, r1
				if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
    2afc:	91 11       	cpse	r25, r1
    2afe:	f9 cf       	rjmp	.-14     	; 0x2af2 <Smart_KeypadModeUser+0x4c>
    2b00:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2b04:	80 33       	cpi	r24, 0x30	; 48
    2b06:	a0 f3       	brcs	.-24     	; 0x2af0 <Smart_KeypadModeUser+0x4a>
    2b08:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2b0c:	8a 33       	cpi	r24, 0x3A	; 58
    2b0e:	80 f7       	brcc	.-32     	; 0x2af0 <Smart_KeypadModeUser+0x4a>
					Loc_u8UsernameId = Keypad_u8Result-'0';
    2b10:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2b14:	a0 ed       	ldi	r26, 0xD0	; 208
    2b16:	ea 2e       	mov	r14, r26
    2b18:	e8 0e       	add	r14, r24
					Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8UsernameId);
    2b1a:	4e 2d       	mov	r20, r14
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	8d e7       	ldi	r24, 0x7D	; 125
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <Lcd_4bit_enuDisplayNumber>
					Loc_u8Check = ZERO_VALUE;
					Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2b2a:	10 93 0f 03 	sts	0x030F, r17	; 0x80030f <Keypad_Status>
			while(Loc_u8Check != ZERO_VALUE){
				Loc_u8UsernameId=ZERO_VALUE;
				if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
					Loc_u8UsernameId = Keypad_u8Result-'0';
					Lcd_4bit_enuDisplayNumber(&Lcd, Loc_u8UsernameId);
					Loc_u8Check = ZERO_VALUE;
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	e0 cf       	rjmp	.-64     	; 0x2af2 <Smart_KeypadModeUser+0x4c>
			}

			/* Password Part */
			Loc_u8Check = ONE_VALUE;

			Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Password: ",LCD_ROW2,LCD_COL1);
    2b32:	21 e0       	ldi	r18, 0x01	; 1
    2b34:	42 e0       	ldi	r20, 0x02	; 2
    2b36:	6a ed       	ldi	r22, 0xDA	; 218
    2b38:	73 e0       	ldi	r23, 0x03	; 3
    2b3a:	8d e7       	ldi	r24, 0x7D	; 125
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
			Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
    2b42:	41 e0       	ldi	r20, 0x01	; 1
    2b44:	63 e0       	ldi	r22, 0x03	; 3
    2b46:	8d e7       	ldi	r24, 0x7D	; 125
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Lcd_4bit_enuGoToXY>
			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;

			while(Loc_u8TryAgain == ONE_VALUE){
		        Loc_u8Check = ONE_VALUE;

				Loc_u8Password= ZERO_VALUE;
    2b4e:	00 e0       	ldi	r16, 0x00	; 0

			Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Enter Password: ",LCD_ROW2,LCD_COL1);
			Lcd_4bit_enuGoToXY(&Lcd, LCD_ROW3, LCD_COL1);
			while(Loc_u8Check != ZERO_VALUE){

				if(Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result>='0') && (Keypad_u8Result<='9')){
    2b50:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    2b54:	81 11       	cpse	r24, r1
    2b56:	18 c0       	rjmp	.+48     	; 0x2b88 <Smart_KeypadModeUser+0xe2>
    2b58:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2b5c:	80 33       	cpi	r24, 0x30	; 48
    2b5e:	a0 f0       	brcs	.+40     	; 0x2b88 <Smart_KeypadModeUser+0xe2>
    2b60:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2b64:	8a 33       	cpi	r24, 0x3A	; 58
    2b66:	80 f4       	brcc	.+32     	; 0x2b88 <Smart_KeypadModeUser+0xe2>
					Loc_u8Password = Loc_u8Password*10+ Keypad_u8Result-'0';
    2b68:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2b6c:	80 53       	subi	r24, 0x30	; 48
    2b6e:	9a e0       	ldi	r25, 0x0A	; 10
    2b70:	09 9f       	mul	r16, r25
    2b72:	80 0d       	add	r24, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	08 2f       	mov	r16, r24
					Lcd_4bit_enuDisplayCharacter(&Lcd, '*');
    2b78:	6a e2       	ldi	r22, 0x2A	; 42
    2b7a:	8d e7       	ldi	r24, 0x7D	; 125
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <Lcd_4bit_enuDisplayCharacter>
					Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2b82:	10 93 0f 03 	sts	0x030F, r17	; 0x80030f <Keypad_Status>
    2b86:	e4 cf       	rjmp	.-56     	; 0x2b50 <Smart_KeypadModeUser+0xaa>
				}
				else if (Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result=='=')){
    2b88:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    2b8c:	81 11       	cpse	r24, r1
    2b8e:	e0 cf       	rjmp	.-64     	; 0x2b50 <Smart_KeypadModeUser+0xaa>
    2b90:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2b94:	8d 33       	cpi	r24, 0x3D	; 61
    2b96:	e1 f6       	brne	.-72     	; 0x2b50 <Smart_KeypadModeUser+0xaa>
					ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, &Loc_u8RealPassword);
    2b98:	ae 01       	movw	r20, r28
    2b9a:	4f 5f       	subi	r20, 0xFF	; 255
    2b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b9e:	6e 2d       	mov	r22, r14
    2ba0:	80 e5       	ldi	r24, 0x50	; 80
    2ba2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <ExternalEeprom_ReadByte>
					Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2ba6:	61 e0       	ldi	r22, 0x01	; 1
    2ba8:	8d e7       	ldi	r24, 0x7D	; 125
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2bb0:	ef ef       	ldi	r30, 0xFF	; 255
    2bb2:	f9 ef       	ldi	r31, 0xF9	; 249
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	e1 50       	subi	r30, 0x01	; 1
    2bb8:	f0 40       	sbci	r31, 0x00	; 0
    2bba:	20 40       	sbci	r18, 0x00	; 0
    2bbc:	e1 f7       	brne	.-8      	; 0x2bb6 <Smart_KeypadModeUser+0x110>
    2bbe:	00 c0       	rjmp	.+0      	; 0x2bc0 <Smart_KeypadModeUser+0x11a>
    2bc0:	00 00       	nop
					_delay_ms(LCD_DISPLAY_DELAY);

					if(Loc_u8RealPassword == Loc_u8Password){
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
						Loc_u8TryAgain = ZERO_VALUE;
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"  Logging In", LCD_ROW2,LCD_COL4);
    2bc4:	24 e0       	ldi	r18, 0x04	; 4
    2bc6:	42 e0       	ldi	r20, 0x02	; 2
				else if (Keypad_Status == KEYPAD_IS_PRESSED && (Keypad_u8Result=='=')){
					ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, &Loc_u8RealPassword);
					Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
					_delay_ms(LCD_DISPLAY_DELAY);

					if(Loc_u8RealPassword == Loc_u8Password){
    2bc8:	80 13       	cpse	r24, r16
    2bca:	08 c0       	rjmp	.+16     	; 0x2bdc <Smart_KeypadModeUser+0x136>
						Loc_u8TryAgain = ZERO_VALUE;
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"  Logging In", LCD_ROW2,LCD_COL4);
    2bcc:	67 ee       	ldi	r22, 0xE7	; 231
    2bce:	74 e0       	ldi	r23, 0x04	; 4
    2bd0:	8d e7       	ldi	r24, 0x7D	; 125
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
					ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, &Loc_u8RealPassword);
					Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
					_delay_ms(LCD_DISPLAY_DELAY);

					if(Loc_u8RealPassword == Loc_u8Password){
						Loc_u8TryAgain = ZERO_VALUE;
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	07 c0       	rjmp	.+14     	; 0x2bea <Smart_KeypadModeUser+0x144>
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"  Logging In", LCD_ROW2,LCD_COL4);
					}
					else{
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)" Wrong Password", LCD_ROW2,LCD_COL4);
    2bdc:	64 e5       	ldi	r22, 0x54	; 84
    2bde:	75 e0       	ldi	r23, 0x05	; 5
    2be0:	8d e7       	ldi	r24, 0x7D	; 125
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	3f ef       	ldi	r19, 0xFF	; 255
    2bec:	4f e0       	ldi	r20, 0x0F	; 15
    2bee:	57 e2       	ldi	r21, 0x27	; 39
    2bf0:	31 50       	subi	r19, 0x01	; 1
    2bf2:	40 40       	sbci	r20, 0x00	; 0
    2bf4:	50 40       	sbci	r21, 0x00	; 0
    2bf6:	e1 f7       	brne	.-8      	; 0x2bf0 <Smart_KeypadModeUser+0x14a>
    2bf8:	00 c0       	rjmp	.+0      	; 0x2bfa <Smart_KeypadModeUser+0x154>
    2bfa:	00 00       	nop
					}

					_delay_ms(800);
					Loc_u8Check = ZERO_VALUE;
					Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2bfc:	10 93 0f 03 	sts	0x030F, r17	; 0x80030f <Keypad_Status>
		u8 Loc_u8Start = ONE_VALUE;
		u8 Loc_u8TempStart = ONE_VALUE;

			Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;

			while(Loc_u8TryAgain == ONE_VALUE){
    2c00:	81 30       	cpi	r24, 0x01	; 1
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <Smart_KeypadModeUser+0x160>
    2c04:	63 cf       	rjmp	.-314    	; 0x2acc <Smart_KeypadModeUser+0x26>
			}


			//////////////////////////////////////////////////////////////////////////////////////////////////////////

			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	8d e7       	ldi	r24, 0x7D	; 125
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2c10:	8f ef       	ldi	r24, 0xFF	; 255
    2c12:	99 ef       	ldi	r25, 0xF9	; 249
    2c14:	e0 e0       	ldi	r30, 0x00	; 0
    2c16:	81 50       	subi	r24, 0x01	; 1
    2c18:	90 40       	sbci	r25, 0x00	; 0
    2c1a:	e0 40       	sbci	r30, 0x00	; 0
    2c1c:	e1 f7       	brne	.-8      	; 0x2c16 <Smart_KeypadModeUser+0x170>
    2c1e:	00 c0       	rjmp	.+0      	; 0x2c20 <Smart_KeypadModeUser+0x17a>
    2c20:	00 00       	nop
			_delay_ms(LCD_DISPLAY_DELAY);

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
    2c22:	24 e1       	ldi	r18, 0x14	; 20
    2c24:	41 e0       	ldi	r20, 0x01	; 1
    2c26:	6f ef       	ldi	r22, 0xFF	; 255
    2c28:	8d e7       	ldi	r24, 0x7D	; 125
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 cd 0c 	call	0x199a	; 0x199a <Lcd_4bit_enuDisplayCharacterWithPosition>
    2c30:	e8 ed       	ldi	r30, 0xD8	; 216
    2c32:	ae 2e       	mov	r10, r30
    2c34:	e6 e0       	ldi	r30, 0x06	; 6
    2c36:	be 2e       	mov	r11, r30
    2c38:	f2 e0       	ldi	r31, 0x02	; 2
    2c3a:	cf 2e       	mov	r12, r31
    2c3c:	d1 2c       	mov	r13, r1
		for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
    2c3e:	10 e0       	ldi	r17, 0x00	; 0
			Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)UserListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]],Loc_u8Index+1,LCD_COL1);
    2c40:	04 e1       	ldi	r16, 0x14	; 20
    2c42:	1f 5f       	subi	r17, 0xFF	; 255
    2c44:	f5 01       	movw	r30, r10
    2c46:	81 91       	ld	r24, Z+
    2c48:	5f 01       	movw	r10, r30
    2c4a:	96 01       	movw	r18, r12
    2c4c:	28 1b       	sub	r18, r24
    2c4e:	31 09       	sbc	r19, r1
    2c50:	02 9f       	mul	r16, r18
    2c52:	b0 01       	movw	r22, r0
    2c54:	03 9f       	mul	r16, r19
    2c56:	70 0d       	add	r23, r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	62 57       	subi	r22, 0x72	; 114
    2c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5e:	21 e0       	ldi	r18, 0x01	; 1
    2c60:	41 2f       	mov	r20, r17
    2c62:	8d e7       	ldi	r24, 0x7D	; 125
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
    2c6a:	32 e0       	ldi	r19, 0x02	; 2
    2c6c:	c3 0e       	add	r12, r19
    2c6e:	d1 1c       	adc	r13, r1

			Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
			_delay_ms(LCD_DISPLAY_DELAY);

		Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
		for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
    2c70:	14 30       	cpi	r17, 0x04	; 4
    2c72:	39 f7       	brne	.-50     	; 0x2c42 <Smart_KeypadModeUser+0x19c>
    2c74:	ff 24       	eor	r15, r15
    2c76:	f3 94       	inc	r15
    2c78:	01 e0       	ldi	r16, 0x01	; 1
    2c7a:	11 e0       	ldi	r17, 0x01	; 1
		while(Loc_u8Check != ZERO_VALUE){

			if(Keypad_Status == KEYPAD_IS_PRESSED){


				Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2c7c:	63 e0       	ldi	r22, 0x03	; 3
    2c7e:	c6 2e       	mov	r12, r22
				switch(Keypad_u8Result){
    2c80:	dd 24       	eor	r13, r13
    2c82:	d3 94       	inc	r13

				}
				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
				_delay_ms(LCD_CLEAR_DELAY);
				Loc_u8TempStart = Loc_u8Start;
				Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
    2c84:	74 e1       	ldi	r23, 0x14	; 20
    2c86:	b7 2e       	mov	r11, r23
		for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
			Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)UserListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]],Loc_u8Index+1,LCD_COL1);
		}

		Loc_u8Check = ONE_VALUE;
		while(Loc_u8Check != ZERO_VALUE){
    2c88:	11 23       	and	r17, r17
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <Smart_KeypadModeUser+0x1e8>
    2c8c:	48 c1       	rjmp	.+656    	; 0x2f1e <Smart_KeypadModeUser+0x478>

			if(Keypad_Status == KEYPAD_IS_PRESSED){
    2c8e:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    2c92:	81 11       	cpse	r24, r1
    2c94:	f9 cf       	rjmp	.-14     	; 0x2c88 <Smart_KeypadModeUser+0x1e2>


				Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
    2c96:	c0 92 0f 03 	sts	0x030F, r12	; 0x80030f <Keypad_Status>
				switch(Keypad_u8Result){
    2c9a:	e0 91 e5 06 	lds	r30, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    2c9e:	8e 2f       	mov	r24, r30
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	bb 97       	sbiw	r30, 0x2b	; 43
    2ca6:	ed 30       	cpi	r30, 0x0D	; 13
    2ca8:	f1 05       	cpc	r31, r1
    2caa:	08 f0       	brcs	.+2      	; 0x2cae <Smart_KeypadModeUser+0x208>
    2cac:	05 c1       	rjmp	.+522    	; 0x2eb8 <Smart_KeypadModeUser+0x412>
    2cae:	e8 5b       	subi	r30, 0xB8	; 184
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__tablejump2__>
					MasterSmart_ChangePasswordKeypad(Loc_u8UsernameId,Loc_u8RealPassword);
					ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, &Loc_u8RealPassword);
					break;

				case '7':
					Loc_u8Check = ZERO_VALUE;
    2cb6:	10 e0       	ldi	r17, 0x00	; 0
    2cb8:	00 c1       	rjmp	.+512    	; 0x2eba <Smart_KeypadModeUser+0x414>

				Keypad_Status = KEYPAD_STATUS_NOT_PRESSED;
				switch(Keypad_u8Result){

				case '1':
					Timer0_enuDisableOverflowInterrupt();
    2cba:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
					Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2cbe:	61 e0       	ldi	r22, 0x01	; 1
    2cc0:	8d e7       	ldi	r24, 0x7D	; 125
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2cc8:	8f e7       	ldi	r24, 0x7F	; 127
    2cca:	9e e3       	ldi	r25, 0x3E	; 62
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <Smart_KeypadModeUser+0x226>
    2cd0:	00 c0       	rjmp	.+0      	; 0x2cd2 <Smart_KeypadModeUser+0x22c>
    2cd2:	00 00       	nop
					_delay_ms(LCD_CLEAR_DELAY);

					if(AdminListStatus[ONE_VALUE] == ZERO_VALUE){
    2cd4:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <AdminListStatus+0x1>
    2cd8:	81 11       	cpse	r24, r1
    2cda:	0e c0       	rjmp	.+28     	; 0x2cf8 <Smart_KeypadModeUser+0x252>
						Servo_enuSetAngle(180);
    2cdc:	84 eb       	ldi	r24, 0xB4	; 180
    2cde:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Servo_enuSetAngle>
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Door Is Open", LCD_ROW2,LCD_COL4);
    2ce2:	24 e0       	ldi	r18, 0x04	; 4
    2ce4:	42 e0       	ldi	r20, 0x02	; 2
    2ce6:	63 e0       	ldi	r22, 0x03	; 3
    2ce8:	74 e0       	ldi	r23, 0x04	; 4
    2cea:	8d e7       	ldi	r24, 0x7D	; 125
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
						AdminListStatus[ONE_VALUE] = ONE_VALUE;
    2cf2:	d0 92 d8 06 	sts	0x06D8, r13	; 0x8006d8 <AdminListStatus+0x1>
    2cf6:	44 c0       	rjmp	.+136    	; 0x2d80 <Smart_KeypadModeUser+0x2da>
					}
					else {
						Servo_enuSetAngle(0);
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Servo_enuSetAngle>
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Door Is Closed", LCD_ROW2,LCD_COL4);
    2cfe:	24 e0       	ldi	r18, 0x04	; 4
    2d00:	42 e0       	ldi	r20, 0x02	; 2
    2d02:	60 e1       	ldi	r22, 0x10	; 16
    2d04:	74 e0       	ldi	r23, 0x04	; 4
    2d06:	8d e7       	ldi	r24, 0x7D	; 125
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
						AdminListStatus[ONE_VALUE] = ZERO_VALUE;
    2d0e:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <AdminListStatus+0x1>
    2d12:	36 c0       	rjmp	.+108    	; 0x2d80 <Smart_KeypadModeUser+0x2da>
					Timer0_enuEnableOverflowInterrupt();
					break;


				case '2':
					Timer0_enuDisableOverflowInterrupt();
    2d14:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
					Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2d18:	61 e0       	ldi	r22, 0x01	; 1
    2d1a:	8d e7       	ldi	r24, 0x7D	; 125
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2d22:	8f e7       	ldi	r24, 0x7F	; 127
    2d24:	9e e3       	ldi	r25, 0x3E	; 62
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <Smart_KeypadModeUser+0x280>
    2d2a:	00 c0       	rjmp	.+0      	; 0x2d2c <Smart_KeypadModeUser+0x286>
    2d2c:	00 00       	nop
					_delay_ms(LCD_CLEAR_DELAY);

					if(AdminListStatus[TWO_VALUE] == ZERO_VALUE){
    2d2e:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <AdminListStatus+0x2>
    2d32:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    2d36:	91 11       	cpse	r25, r1
    2d38:	0e c0       	rjmp	.+28     	; 0x2d56 <Smart_KeypadModeUser+0x2b0>
						SET_BIT(MasterSmart_u8SlavePins,ZERO_VALUE);
    2d3a:	81 60       	ori	r24, 0x01	; 1
    2d3c:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room1 Is On", LCD_ROW2,LCD_COL4);
    2d40:	24 e0       	ldi	r18, 0x04	; 4
    2d42:	42 e0       	ldi	r20, 0x02	; 2
    2d44:	6f e1       	ldi	r22, 0x1F	; 31
    2d46:	74 e0       	ldi	r23, 0x04	; 4
    2d48:	8d e7       	ldi	r24, 0x7D	; 125
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
						AdminListStatus[TWO_VALUE] = ONE_VALUE;
    2d50:	d0 92 d9 06 	sts	0x06D9, r13	; 0x8006d9 <AdminListStatus+0x2>
    2d54:	0d c0       	rjmp	.+26     	; 0x2d70 <Smart_KeypadModeUser+0x2ca>
					}
					else {

						CLEAR_BIT(MasterSmart_u8SlavePins,ZERO_VALUE);
    2d56:	8e 7f       	andi	r24, 0xFE	; 254
    2d58:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room1 Is Off", LCD_ROW2,LCD_COL4);
    2d5c:	24 e0       	ldi	r18, 0x04	; 4
    2d5e:	42 e0       	ldi	r20, 0x02	; 2
    2d60:	6b e2       	ldi	r22, 0x2B	; 43
    2d62:	74 e0       	ldi	r23, 0x04	; 4
    2d64:	8d e7       	ldi	r24, 0x7D	; 125
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
						AdminListStatus[TWO_VALUE] = ZERO_VALUE;
    2d6c:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <AdminListStatus+0x2>
					}
					Spi_enuTransmitBlocking(SPI_SLAVE_PIN, MasterSmart_u8SlavePins, &Loc_u8TempData);
    2d70:	ae 01       	movw	r20, r28
    2d72:	4e 5f       	subi	r20, 0xFE	; 254
    2d74:	5f 4f       	sbci	r21, 0xFF	; 255
    2d76:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    2d7a:	8c e0       	ldi	r24, 0x0C	; 12
    2d7c:	0e 94 68 07 	call	0xed0	; 0xed0 <Spi_enuTransmitBlocking>
    2d80:	9f ef       	ldi	r25, 0xFF	; 255
    2d82:	e9 e6       	ldi	r30, 0x69	; 105
    2d84:	f8 e1       	ldi	r31, 0x18	; 24
    2d86:	91 50       	subi	r25, 0x01	; 1
    2d88:	e0 40       	sbci	r30, 0x00	; 0
    2d8a:	f0 40       	sbci	r31, 0x00	; 0
    2d8c:	e1 f7       	brne	.-8      	; 0x2d86 <Smart_KeypadModeUser+0x2e0>
    2d8e:	00 c0       	rjmp	.+0      	; 0x2d90 <Smart_KeypadModeUser+0x2ea>
    2d90:	00 00       	nop

					_delay_ms(500);
					Timer0_enuEnableOverflowInterrupt();
    2d92:	0e 94 23 06 	call	0xc46	; 0xc46 <Timer0_enuEnableOverflowInterrupt>
    2d96:	90 c0       	rjmp	.+288    	; 0x2eb8 <Smart_KeypadModeUser+0x412>

					break;

				case '3':
					Timer0_enuDisableOverflowInterrupt();
    2d98:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
					Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2d9c:	61 e0       	ldi	r22, 0x01	; 1
    2d9e:	8d e7       	ldi	r24, 0x7D	; 125
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2da6:	8f e7       	ldi	r24, 0x7F	; 127
    2da8:	9e e3       	ldi	r25, 0x3E	; 62
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <Smart_KeypadModeUser+0x304>
    2dae:	00 c0       	rjmp	.+0      	; 0x2db0 <Smart_KeypadModeUser+0x30a>
    2db0:	00 00       	nop
					_delay_ms(LCD_CLEAR_DELAY);

					if(AdminListStatus[THREE_VALUE] == ZERO_VALUE){
    2db2:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <AdminListStatus+0x3>
    2db6:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    2dba:	91 11       	cpse	r25, r1
    2dbc:	0e c0       	rjmp	.+28     	; 0x2dda <Smart_KeypadModeUser+0x334>
						SET_BIT(MasterSmart_u8SlavePins,ONE_VALUE);
    2dbe:	82 60       	ori	r24, 0x02	; 2
    2dc0:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room2 Is On", LCD_ROW2,LCD_COL4);
    2dc4:	24 e0       	ldi	r18, 0x04	; 4
    2dc6:	42 e0       	ldi	r20, 0x02	; 2
    2dc8:	68 e3       	ldi	r22, 0x38	; 56
    2dca:	74 e0       	ldi	r23, 0x04	; 4
    2dcc:	8d e7       	ldi	r24, 0x7D	; 125
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
						AdminListStatus[THREE_VALUE] = ONE_VALUE;
    2dd4:	d0 92 da 06 	sts	0x06DA, r13	; 0x8006da <AdminListStatus+0x3>
    2dd8:	cb cf       	rjmp	.-106    	; 0x2d70 <Smart_KeypadModeUser+0x2ca>
					}
					else {
						CLEAR_BIT(MasterSmart_u8SlavePins,ONE_VALUE);
    2dda:	8d 7f       	andi	r24, 0xFD	; 253
    2ddc:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room2 Is Off", LCD_ROW2,LCD_COL4);
    2de0:	24 e0       	ldi	r18, 0x04	; 4
    2de2:	42 e0       	ldi	r20, 0x02	; 2
    2de4:	64 e4       	ldi	r22, 0x44	; 68
    2de6:	74 e0       	ldi	r23, 0x04	; 4
    2de8:	8d e7       	ldi	r24, 0x7D	; 125
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
						AdminListStatus[THREE_VALUE] = ZERO_VALUE;
    2df0:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <AdminListStatus+0x3>
    2df4:	bd cf       	rjmp	.-134    	; 0x2d70 <Smart_KeypadModeUser+0x2ca>
					Spi_enuTransmitBlocking(SPI_SLAVE_PIN, MasterSmart_u8SlavePins, &Loc_u8TempData);
					_delay_ms(500);
					Timer0_enuEnableOverflowInterrupt();
					break;
				case '4':
					Timer0_enuDisableOverflowInterrupt();
    2df6:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
					Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2dfa:	61 e0       	ldi	r22, 0x01	; 1
    2dfc:	8d e7       	ldi	r24, 0x7D	; 125
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2e04:	8f e7       	ldi	r24, 0x7F	; 127
    2e06:	9e e3       	ldi	r25, 0x3E	; 62
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <Smart_KeypadModeUser+0x362>
    2e0c:	00 c0       	rjmp	.+0      	; 0x2e0e <Smart_KeypadModeUser+0x368>
    2e0e:	00 00       	nop
					_delay_ms(LCD_CLEAR_DELAY);

					if(AdminListStatus[FOUR_VALUE] == ZERO_VALUE){
    2e10:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <AdminListStatus+0x4>
    2e14:	81 11       	cpse	r24, r1
    2e16:	10 c0       	rjmp	.+32     	; 0x2e38 <Smart_KeypadModeUser+0x392>
						SET_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
    2e18:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    2e1c:	84 60       	ori	r24, 0x04	; 4
    2e1e:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room3 Is On", LCD_ROW2,LCD_COL4);
    2e22:	24 e0       	ldi	r18, 0x04	; 4
    2e24:	42 e0       	ldi	r20, 0x02	; 2
    2e26:	61 e5       	ldi	r22, 0x51	; 81
    2e28:	74 e0       	ldi	r23, 0x04	; 4
    2e2a:	8d e7       	ldi	r24, 0x7D	; 125
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
						AdminListStatus[FOUR_VALUE] = ONE_VALUE;
    2e32:	d0 92 db 06 	sts	0x06DB, r13	; 0x8006db <AdminListStatus+0x4>
    2e36:	9c cf       	rjmp	.-200    	; 0x2d70 <Smart_KeypadModeUser+0x2ca>
					}
					else {
						// Spi
						Lcd_4bit_enuDisplayStringWithPosition(&Lcd, (u8*)"Room3 Is Off", LCD_ROW2,LCD_COL4);
    2e38:	24 e0       	ldi	r18, 0x04	; 4
    2e3a:	42 e0       	ldi	r20, 0x02	; 2
    2e3c:	6d e5       	ldi	r22, 0x5D	; 93
    2e3e:	74 e0       	ldi	r23, 0x04	; 4
    2e40:	8d e7       	ldi	r24, 0x7D	; 125
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
						AdminListStatus[FOUR_VALUE] = ZERO_VALUE;
    2e48:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <AdminListStatus+0x4>
						CLEAR_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
    2e4c:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    2e50:	8b 7f       	andi	r24, 0xFB	; 251
    2e52:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
    2e56:	8c cf       	rjmp	.-232    	; 0x2d70 <Smart_KeypadModeUser+0x2ca>
					_delay_ms(500);
					Timer0_enuEnableOverflowInterrupt();
					break;
				case '5': // show time

					Timer0_enuDisableOverflowInterrupt();
    2e58:	0e 94 41 06 	call	0xc82	; 0xc82 <Timer0_enuDisableOverflowInterrupt>
					Smart_ShowTime();
    2e5c:	0e 94 71 10 	call	0x20e2	; 0x20e2 <Smart_ShowTime>
    2e60:	98 cf       	rjmp	.-208    	; 0x2d92 <Smart_KeypadModeUser+0x2ec>
					Timer0_enuEnableOverflowInterrupt();
					break;

				case '6':// Change Password
					MasterSmart_ChangePasswordKeypad(Loc_u8UsernameId,Loc_u8RealPassword);
    2e62:	69 81       	ldd	r22, Y+1	; 0x01
    2e64:	8e 2d       	mov	r24, r14
    2e66:	0e 94 5e 14 	call	0x28bc	; 0x28bc <MasterSmart_ChangePasswordKeypad>
					ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, &Loc_u8RealPassword);
    2e6a:	ae 01       	movw	r20, r28
    2e6c:	4f 5f       	subi	r20, 0xFF	; 255
    2e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e70:	6e 2d       	mov	r22, r14
    2e72:	80 e5       	ldi	r24, 0x50	; 80
    2e74:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <ExternalEeprom_ReadByte>
    2e78:	1f c0       	rjmp	.+62     	; 0x2eb8 <Smart_KeypadModeUser+0x412>

				case '7':
					Loc_u8Check = ZERO_VALUE;
					break;
				case '-':
					Loc_u8CursorIndex = (Loc_u8CursorIndex-1)<1? 1 : Loc_u8CursorIndex-1;
    2e7a:	80 2f       	mov	r24, r16
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	02 97       	sbiw	r24, 0x02	; 2
    2e80:	14 f0       	brlt	.+4      	; 0x2e86 <Smart_KeypadModeUser+0x3e0>
    2e82:	01 50       	subi	r16, 0x01	; 1
    2e84:	01 c0       	rjmp	.+2      	; 0x2e88 <Smart_KeypadModeUser+0x3e2>
    2e86:	01 e0       	ldi	r16, 0x01	; 1
					Loc_u8Start = (Loc_u8Start-1)<1? 1 : Loc_u8Start-1;
    2e88:	8f 2d       	mov	r24, r15
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	02 97       	sbiw	r24, 0x02	; 2
    2e8e:	7c f0       	brlt	.+30     	; 0x2eae <Smart_KeypadModeUser+0x408>
    2e90:	fa 94       	dec	r15
    2e92:	12 c0       	rjmp	.+36     	; 0x2eb8 <Smart_KeypadModeUser+0x412>
//					if(Loc_u8Start == 3)
//						Loc_u8Start = 2;
					break;
				case '+':

					Loc_u8CursorIndex = (Loc_u8CursorIndex+1)>4? 4 : Loc_u8CursorIndex+1;
    2e94:	80 2f       	mov	r24, r16
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	04 97       	sbiw	r24, 0x04	; 4
    2e9a:	14 f4       	brge	.+4      	; 0x2ea0 <Smart_KeypadModeUser+0x3fa>
    2e9c:	0f 5f       	subi	r16, 0xFF	; 255
    2e9e:	01 c0       	rjmp	.+2      	; 0x2ea2 <Smart_KeypadModeUser+0x3fc>
    2ea0:	04 e0       	ldi	r16, 0x04	; 4
					Loc_u8Start = (Loc_u8Start+1)>4? 4 : Loc_u8Start+1;
    2ea2:	8f 2d       	mov	r24, r15
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	04 97       	sbiw	r24, 0x04	; 4
    2ea8:	2c f4       	brge	.+10     	; 0x2eb4 <Smart_KeypadModeUser+0x40e>
    2eaa:	f3 94       	inc	r15
    2eac:	05 c0       	rjmp	.+10     	; 0x2eb8 <Smart_KeypadModeUser+0x412>
				case '7':
					Loc_u8Check = ZERO_VALUE;
					break;
				case '-':
					Loc_u8CursorIndex = (Loc_u8CursorIndex-1)<1? 1 : Loc_u8CursorIndex-1;
					Loc_u8Start = (Loc_u8Start-1)<1? 1 : Loc_u8Start-1;
    2eae:	ff 24       	eor	r15, r15
    2eb0:	f3 94       	inc	r15
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <Smart_KeypadModeUser+0x412>
//						Loc_u8Start = 2;
					break;
				case '+':

					Loc_u8CursorIndex = (Loc_u8CursorIndex+1)>4? 4 : Loc_u8CursorIndex+1;
					Loc_u8Start = (Loc_u8Start+1)>4? 4 : Loc_u8Start+1;
    2eb4:	54 e0       	ldi	r21, 0x04	; 4
    2eb6:	f5 2e       	mov	r15, r21
    2eb8:	11 e0       	ldi	r17, 0x01	; 1

				default :
					break;

				}
				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
    2eba:	61 e0       	ldi	r22, 0x01	; 1
    2ebc:	8d e7       	ldi	r24, 0x7D	; 125
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 ed 0b 	call	0x17da	; 0x17da <Lcd_4bit_enuSendCommand>
    2ec4:	8f e7       	ldi	r24, 0x7F	; 127
    2ec6:	9e e3       	ldi	r25, 0x3E	; 62
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <Smart_KeypadModeUser+0x422>
    2ecc:	00 c0       	rjmp	.+0      	; 0x2ece <Smart_KeypadModeUser+0x428>
    2ece:	00 00       	nop
				_delay_ms(LCD_CLEAR_DELAY);
				Loc_u8TempStart = Loc_u8Start;
				Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
    2ed0:	24 e1       	ldi	r18, 0x14	; 20
    2ed2:	40 2f       	mov	r20, r16
    2ed4:	6f ef       	ldi	r22, 0xFF	; 255
    2ed6:	8d e7       	ldi	r24, 0x7D	; 125
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	0e 94 cd 0c 	call	0x199a	; 0x199a <Lcd_4bit_enuDisplayCharacterWithPosition>
				for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
    2ede:	a1 2c       	mov	r10, r1
    2ee0:	8f 2d       	mov	r24, r15
    2ee2:	8a 0d       	add	r24, r10
					Lcd_4bit_enuDisplayStringWithPosition(&Lcd, UserListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]],Loc_u8Index+1,LCD_COL1);
    2ee4:	a3 94       	inc	r10
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9c 01       	movw	r18, r24
    2eea:	22 0f       	add	r18, r18
    2eec:	33 1f       	adc	r19, r19
    2eee:	fc 01       	movw	r30, r24
    2ef0:	e9 52       	subi	r30, 0x29	; 41
    2ef2:	f9 4f       	sbci	r31, 0xF9	; 249
    2ef4:	80 81       	ld	r24, Z
    2ef6:	f9 01       	movw	r30, r18
    2ef8:	e8 1b       	sub	r30, r24
    2efa:	f1 09       	sbc	r31, r1
    2efc:	be 9e       	mul	r11, r30
    2efe:	b0 01       	movw	r22, r0
    2f00:	bf 9e       	mul	r11, r31
    2f02:	70 0d       	add	r23, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	62 57       	subi	r22, 0x72	; 114
    2f08:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0a:	21 e0       	ldi	r18, 0x01	; 1
    2f0c:	4a 2d       	mov	r20, r10
    2f0e:	8d e7       	ldi	r24, 0x7D	; 125
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Lcd_4bit_enuDisplayStringWithPosition>
				}
				Lcd_4bit_enuSendCommand(&Lcd, LCD_CLEAR_COMMAND);
				_delay_ms(LCD_CLEAR_DELAY);
				Loc_u8TempStart = Loc_u8Start;
				Lcd_4bit_enuDisplayCharacterWithPosition(&Lcd, LCD_CURSOR, Loc_u8CursorIndex, LCD_COL20);
				for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<FOUR_VALUE; Loc_u8Index++ ){
    2f16:	f4 e0       	ldi	r31, 0x04	; 4
    2f18:	af 12       	cpse	r10, r31
    2f1a:	e2 cf       	rjmp	.-60     	; 0x2ee0 <Smart_KeypadModeUser+0x43a>
    2f1c:	b5 ce       	rjmp	.-662    	; 0x2c88 <Smart_KeypadModeUser+0x1e2>


			}

		} // while
}
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	ff 90       	pop	r15
    2f2c:	ef 90       	pop	r14
    2f2e:	df 90       	pop	r13
    2f30:	cf 90       	pop	r12
    2f32:	bf 90       	pop	r11
    2f34:	af 90       	pop	r10
    2f36:	08 95       	ret

00002f38 <Smart_AddUserUart>:

			}

		}
}
void Smart_AddUserUart(){
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
		u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8UsernameId;
		u8 Loc_u8Password= ZERO_VALUE;
		Usart_u8Status = USART_STATUS_NOT_PRESS;
    2f3c:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>

		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Username ID: ");
    2f40:	64 ef       	ldi	r22, 0xF4	; 244
    2f42:	74 e0       	ldi	r23, 0x04	; 4
    2f44:	80 e6       	ldi	r24, 0x60	; 96
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
			}

		}
}
void Smart_AddUserUart(){
		u8 Loc_u8Check = ONE_VALUE;
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
		u8 Loc_u8Password= ZERO_VALUE;
		Usart_u8Status = USART_STATUS_NOT_PRESS;

		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Username ID: ");

		while(Loc_u8Check != ZERO_VALUE){
    2f4e:	88 23       	and	r24, r24
    2f50:	a9 f0       	breq	.+42     	; 0x2f7c <Smart_AddUserUart+0x44>

			if(Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value>='0') && (Usart_u8Value<='9')){
    2f52:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <Usart_u8Status>
    2f56:	91 30       	cpi	r25, 0x01	; 1
    2f58:	d1 f7       	brne	.-12     	; 0x2f4e <Smart_AddUserUart+0x16>
    2f5a:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    2f5e:	80 33       	cpi	r24, 0x30	; 48
    2f60:	58 f0       	brcs	.+22     	; 0x2f78 <Smart_AddUserUart+0x40>
    2f62:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    2f66:	8a 33       	cpi	r24, 0x3A	; 58
    2f68:	38 f4       	brcc	.+14     	; 0x2f78 <Smart_AddUserUart+0x40>
				Loc_u8UsernameId = Usart_u8Value-'0';
    2f6a:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <Usart_u8Value>
    2f6e:	c0 ed       	ldi	r28, 0xD0	; 208
    2f70:	c6 0f       	add	r28, r22
				Loc_u8Check = ZERO_VALUE;
				Usart_u8Status = USART_STATUS_NOT_PRESS;
    2f72:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
    2f76:	02 c0       	rjmp	.+4      	; 0x2f7c <Smart_AddUserUart+0x44>
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	eb cf       	rjmp	.-42     	; 0x2f52 <Smart_AddUserUart+0x1a>
		}

		/* Password Part */
		Loc_u8Check = ONE_VALUE;

		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Password:\r");
    2f7c:	69 e0       	ldi	r22, 0x09	; 9
    2f7e:	75 e0       	ldi	r23, 0x05	; 5
    2f80:	80 e6       	ldi	r24, 0x60	; 96
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
		}
}
void Smart_AddUserUart(){
		u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8UsernameId;
		u8 Loc_u8Password= ZERO_VALUE;
    2f88:	d0 e0       	ldi	r29, 0x00	; 0
		Loc_u8Check = ONE_VALUE;

		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Password:\r");
		while(Loc_u8Check != ZERO_VALUE){

			if(Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value>='0') && (Usart_u8Value<='9')){
    2f8a:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Usart_u8Status>
    2f8e:	81 30       	cpi	r24, 0x01	; 1
    2f90:	c9 f4       	brne	.+50     	; 0x2fc4 <Smart_AddUserUart+0x8c>
    2f92:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    2f96:	80 33       	cpi	r24, 0x30	; 48
    2f98:	a8 f0       	brcs	.+42     	; 0x2fc4 <Smart_AddUserUart+0x8c>
    2f9a:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    2f9e:	8a 33       	cpi	r24, 0x3A	; 58
    2fa0:	88 f4       	brcc	.+34     	; 0x2fc4 <Smart_AddUserUart+0x8c>
				Loc_u8Password = Loc_u8Password*10+ Usart_u8Value-'0';
    2fa2:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    2fa6:	80 53       	subi	r24, 0x30	; 48
    2fa8:	9a e0       	ldi	r25, 0x0A	; 10
    2faa:	d9 9f       	mul	r29, r25
    2fac:	80 0d       	add	r24, r0
    2fae:	11 24       	eor	r1, r1
    2fb0:	d8 2f       	mov	r29, r24
				Usart_enuTransmitCharBlocking(&Usart1, '*');
    2fb2:	6a e2       	ldi	r22, 0x2A	; 42
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	80 e6       	ldi	r24, 0x60	; 96
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
				Usart_u8Status = USART_STATUS_NOT_PRESS;
    2fbe:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
    2fc2:	e3 cf       	rjmp	.-58     	; 0x2f8a <Smart_AddUserUart+0x52>
			}
			else if (Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value=='\r')){
    2fc4:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Usart_u8Status>
    2fc8:	81 30       	cpi	r24, 0x01	; 1
    2fca:	f9 f6       	brne	.-66     	; 0x2f8a <Smart_AddUserUart+0x52>
    2fcc:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    2fd0:	8d 30       	cpi	r24, 0x0D	; 13
    2fd2:	d9 f6       	brne	.-74     	; 0x2f8a <Smart_AddUserUart+0x52>
				ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, (u8)Loc_u8UsernameId, (u8)Loc_u8Password);
    2fd4:	4d 2f       	mov	r20, r29
    2fd6:	6c 2f       	mov	r22, r28
    2fd8:	80 e5       	ldi	r24, 0x50	; 80
    2fda:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <ExternalEeprom_WriteByte>

				Usart_enuTransmitStringBlocking(&Usart1,  (u8*)"\rUser ");
    2fde:	6b e1       	ldi	r22, 0x1B	; 27
    2fe0:	75 e0       	ldi	r23, 0x05	; 5
    2fe2:	80 e6       	ldi	r24, 0x60	; 96
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
				Usart_enuTransmitCharBlocking(&Usart1, Loc_u8UsernameId+'0');
    2fea:	6c 2f       	mov	r22, r28
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	60 5d       	subi	r22, 0xD0	; 208
    2ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff2:	80 e6       	ldi	r24, 0x60	; 96
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
				Usart_enuTransmitStringBlocking(&Usart1,  (u8*)" Is Added \r\r");
    2ffa:	62 e2       	ldi	r22, 0x22	; 34
    2ffc:	75 e0       	ldi	r23, 0x05	; 5
    2ffe:	80 e6       	ldi	r24, 0x60	; 96
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
				Usart_u8Status = USART_STATUS_NOT_PRESS;
    3006:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>

			}

		}

}
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	08 95       	ret

00003010 <Smart_DeleteUserUart>:
void Smart_DeleteUserUart(){
    3010:	cf 93       	push	r28
	u8 Loc_u8Check = ONE_VALUE;
	u8 Loc_u8UsernameId= NINE_VALUE;

	Usart_u8Status = USART_STATUS_NOT_PRESS;
    3012:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>


	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Username ID: ");
    3016:	64 ef       	ldi	r22, 0xF4	; 244
    3018:	74 e0       	ldi	r23, 0x04	; 4
    301a:	80 e6       	ldi	r24, 0x60	; 96
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
		}

}
void Smart_DeleteUserUart(){
	u8 Loc_u8Check = ONE_VALUE;
	u8 Loc_u8UsernameId= NINE_VALUE;
    3022:	c9 e0       	ldi	r28, 0x09	; 9

		}

}
void Smart_DeleteUserUart(){
	u8 Loc_u8Check = ONE_VALUE;
    3024:	81 e0       	ldi	r24, 0x01	; 1
	Usart_u8Status = USART_STATUS_NOT_PRESS;


	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Username ID: ");

	while(Loc_u8Check != ZERO_VALUE){
    3026:	88 23       	and	r24, r24
    3028:	e9 f0       	breq	.+58     	; 0x3064 <Smart_DeleteUserUart+0x54>

		if(Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value>='0') && (Usart_u8Value<='9')){
    302a:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <Usart_u8Status>
    302e:	91 30       	cpi	r25, 0x01	; 1
    3030:	d1 f7       	brne	.-12     	; 0x3026 <Smart_DeleteUserUart+0x16>
    3032:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    3036:	80 33       	cpi	r24, 0x30	; 48
    3038:	98 f0       	brcs	.+38     	; 0x3060 <Smart_DeleteUserUart+0x50>
    303a:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    303e:	8a 33       	cpi	r24, 0x3A	; 58
    3040:	78 f4       	brcc	.+30     	; 0x3060 <Smart_DeleteUserUart+0x50>
			Loc_u8UsernameId = Usart_u8Value-'0';
    3042:	c0 91 e3 06 	lds	r28, 0x06E3	; 0x8006e3 <Usart_u8Value>
    3046:	c0 53       	subi	r28, 0x30	; 48
			Lcd_4bit_enuDisplayNumber(&Lcd, Usart_u8Value);
    3048:	40 91 e3 06 	lds	r20, 0x06E3	; 0x8006e3 <Usart_u8Value>
    304c:	50 e0       	ldi	r21, 0x00	; 0
    304e:	60 e0       	ldi	r22, 0x00	; 0
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	8d e7       	ldi	r24, 0x7D	; 125
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <Lcd_4bit_enuDisplayNumber>
			Loc_u8Check = ZERO_VALUE;
			Usart_u8Status = USART_STATUS_NOT_PRESS;
    305a:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <Smart_DeleteUserUart+0x54>
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	e3 cf       	rjmp	.-58     	; 0x302a <Smart_DeleteUserUart+0x1a>
		}

	}

	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rUser ");
    3064:	6b e1       	ldi	r22, 0x1B	; 27
    3066:	75 e0       	ldi	r23, 0x05	; 5
    3068:	80 e6       	ldi	r24, 0x60	; 96
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitCharBlocking(&Usart1, Loc_u8UsernameId+'0');
    3070:	6c 2f       	mov	r22, r28
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	60 5d       	subi	r22, 0xD0	; 208
    3076:	7f 4f       	sbci	r23, 0xFF	; 255
    3078:	80 e6       	ldi	r24, 0x60	; 96
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)" Is Deleted \r");
    3080:	6f e2       	ldi	r22, 0x2F	; 47
    3082:	75 e0       	ldi	r23, 0x05	; 5
    3084:	80 e6       	ldi	r24, 0x60	; 96
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>

	ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, 0xFF);
    308c:	4f ef       	ldi	r20, 0xFF	; 255
    308e:	6c 2f       	mov	r22, r28
    3090:	80 e5       	ldi	r24, 0x50	; 80
}
    3092:	cf 91       	pop	r28

	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rUser ");
	Usart_enuTransmitCharBlocking(&Usart1, Loc_u8UsernameId+'0');
	Usart_enuTransmitStringBlocking(&Usart1, (u8*)" Is Deleted \r");

	ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, 0xFF);
    3094:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <ExternalEeprom_WriteByte>

00003098 <MasterSmart_ChangePasswordUart>:
}
void MasterSmart_ChangePasswordUart(u8 Loc_u8CopyUserId,u8 Loc_u8CopyUserPassword){
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	c8 2f       	mov	r28, r24
    309e:	d6 2f       	mov	r29, r22
	u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8Password = ZERO_VALUE;
		Usart_u8Status = USART_STATUS_NOT_PRESS;
    30a0:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>


		Usart_enuTransmitStringBlocking(&Usart1,  (u8*)"\rEnter Old Password: ");
    30a4:	6d e3       	ldi	r22, 0x3D	; 61
    30a6:	75 e0       	ldi	r23, 0x05	; 5
    30a8:	80 e6       	ldi	r24, 0x60	; 96
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>

	ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, 0xFF);
}
void MasterSmart_ChangePasswordUart(u8 Loc_u8CopyUserId,u8 Loc_u8CopyUserPassword){
	u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8Password = ZERO_VALUE;
    30b0:	80 e0       	ldi	r24, 0x00	; 0


		Usart_enuTransmitStringBlocking(&Usart1,  (u8*)"\rEnter Old Password: ");
		while(Loc_u8Check != ZERO_VALUE){

			if( Usart_u8Status== USART_STATUS_PRESS && (Usart_u8Value>='0') && (Usart_u8Value<='9')){
    30b2:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <Usart_u8Status>
    30b6:	91 30       	cpi	r25, 0x01	; 1
    30b8:	99 f4       	brne	.+38     	; 0x30e0 <MasterSmart_ChangePasswordUart+0x48>
    30ba:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <Usart_u8Value>
    30be:	90 33       	cpi	r25, 0x30	; 48
    30c0:	78 f0       	brcs	.+30     	; 0x30e0 <MasterSmart_ChangePasswordUart+0x48>
    30c2:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <Usart_u8Value>
    30c6:	9a 33       	cpi	r25, 0x3A	; 58
    30c8:	58 f4       	brcc	.+22     	; 0x30e0 <MasterSmart_ChangePasswordUart+0x48>
				Loc_u8Password = Loc_u8Password*10+ Usart_u8Value-'0';
    30ca:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <Usart_u8Value>
    30ce:	90 53       	subi	r25, 0x30	; 48
    30d0:	2a e0       	ldi	r18, 0x0A	; 10
    30d2:	82 9f       	mul	r24, r18
    30d4:	90 0d       	add	r25, r0
    30d6:	11 24       	eor	r1, r1
    30d8:	89 2f       	mov	r24, r25
				Usart_u8Status = USART_STATUS_NOT_PRESS;
    30da:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
    30de:	e9 cf       	rjmp	.-46     	; 0x30b2 <MasterSmart_ChangePasswordUart+0x1a>
			}
			else if (Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value=='\r')){
    30e0:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <Usart_u8Status>
    30e4:	91 30       	cpi	r25, 0x01	; 1
    30e6:	29 f7       	brne	.-54     	; 0x30b2 <MasterSmart_ChangePasswordUart+0x1a>
    30e8:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <Usart_u8Value>
    30ec:	9d 30       	cpi	r25, 0x0D	; 13
    30ee:	09 f7       	brne	.-62     	; 0x30b2 <MasterSmart_ChangePasswordUart+0x1a>

				if(Loc_u8CopyUserPassword == Loc_u8Password){
    30f0:	d8 17       	cp	r29, r24
    30f2:	a9 f0       	breq	.+42     	; 0x311e <MasterSmart_ChangePasswordUart+0x86>
					Loc_u8Check = ZERO_VALUE;
				}

				else{
					Usart_enuTransmitStringBlocking(&Usart1,(u8*)"\r Wrong Password");
    30f4:	63 e5       	ldi	r22, 0x53	; 83
    30f6:	75 e0       	ldi	r23, 0x05	; 5
    30f8:	80 e6       	ldi	r24, 0x60	; 96
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rTry Again\r");
    3100:	64 e6       	ldi	r22, 0x64	; 100
    3102:	75 e0       	ldi	r23, 0x05	; 5
    3104:	80 e6       	ldi	r24, 0x60	; 96
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					Loc_u8Password = ZERO_VALUE;


					Usart_enuTransmitStringBlocking(&Usart1,  (u8*)"\rEnter Old Password: ");
    310c:	6d e3       	ldi	r22, 0x3D	; 61
    310e:	75 e0       	ldi	r23, 0x05	; 5
    3110:	80 e6       	ldi	r24, 0x60	; 96
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
				}

				else{
					Usart_enuTransmitStringBlocking(&Usart1,(u8*)"\r Wrong Password");
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rTry Again\r");
					Loc_u8Password = ZERO_VALUE;
    3118:	80 e0       	ldi	r24, 0x00	; 0


					Usart_enuTransmitStringBlocking(&Usart1,  (u8*)"\rEnter Old Password: ");
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <MasterSmart_ChangePasswordUart+0x88>
				Usart_u8Status = USART_STATUS_NOT_PRESS;
			}
			else if (Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value=='\r')){

				if(Loc_u8CopyUserPassword == Loc_u8Password){
					Loc_u8Check = ZERO_VALUE;
    311e:	90 e0       	ldi	r25, 0x00	; 0
					Usart_enuTransmitStringBlocking(&Usart1,  (u8*)"\rEnter Old Password: ");
				}



				Usart_u8Status = USART_STATUS_NOT_PRESS;
    3120:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
		u8 Loc_u8Password = ZERO_VALUE;
		Usart_u8Status = USART_STATUS_NOT_PRESS;


		Usart_enuTransmitStringBlocking(&Usart1,  (u8*)"\rEnter Old Password: ");
		while(Loc_u8Check != ZERO_VALUE){
    3124:	91 11       	cpse	r25, r1
    3126:	c5 cf       	rjmp	.-118    	; 0x30b2 <MasterSmart_ChangePasswordUart+0x1a>
		}

		/* Password Part */
		Loc_u8Check = ONE_VALUE;
		Loc_u8Password =ZERO_VALUE;
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter New Password: ");
    3128:	60 e7       	ldi	r22, 0x70	; 112
    312a:	75 e0       	ldi	r23, 0x05	; 5
    312c:	80 e6       	ldi	r24, 0x60	; 96
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>

		}

		/* Password Part */
		Loc_u8Check = ONE_VALUE;
		Loc_u8Password =ZERO_VALUE;
    3134:	40 e0       	ldi	r20, 0x00	; 0
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter New Password: ");
		while(Loc_u8Check != ZERO_VALUE){

			if( Usart_u8Status== USART_STATUS_PRESS && (Usart_u8Value>='0') && (Usart_u8Value<='9')){
    3136:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Usart_u8Status>
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	99 f4       	brne	.+38     	; 0x3164 <MasterSmart_ChangePasswordUart+0xcc>
    313e:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    3142:	80 33       	cpi	r24, 0x30	; 48
    3144:	78 f0       	brcs	.+30     	; 0x3164 <MasterSmart_ChangePasswordUart+0xcc>
    3146:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    314a:	8a 33       	cpi	r24, 0x3A	; 58
    314c:	58 f4       	brcc	.+22     	; 0x3164 <MasterSmart_ChangePasswordUart+0xcc>
				Loc_u8Password = Loc_u8Password*10+ Usart_u8Value-'0';
    314e:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    3152:	80 53       	subi	r24, 0x30	; 48
    3154:	9a e0       	ldi	r25, 0x0A	; 10
    3156:	49 9f       	mul	r20, r25
    3158:	80 0d       	add	r24, r0
    315a:	11 24       	eor	r1, r1
    315c:	48 2f       	mov	r20, r24
				Usart_u8Status = USART_STATUS_NOT_PRESS;
    315e:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
    3162:	e9 cf       	rjmp	.-46     	; 0x3136 <MasterSmart_ChangePasswordUart+0x9e>
			}
			else if (Usart_u8Status== USART_STATUS_PRESS && (Usart_u8Value=='\r')){
    3164:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Usart_u8Status>
    3168:	81 30       	cpi	r24, 0x01	; 1
    316a:	29 f7       	brne	.-54     	; 0x3136 <MasterSmart_ChangePasswordUart+0x9e>
    316c:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    3170:	8d 30       	cpi	r24, 0x0D	; 13
    3172:	09 f7       	brne	.-62     	; 0x3136 <MasterSmart_ChangePasswordUart+0x9e>
				ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8CopyUserId, Loc_u8Password);
    3174:	6c 2f       	mov	r22, r28
    3176:	80 e5       	ldi	r24, 0x50	; 80
    3178:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <ExternalEeprom_WriteByte>


				Usart_enuTransmitStringBlocking(&Usart1,(u8*)"\rChange is done\r ");
    317c:	66 e8       	ldi	r22, 0x86	; 134
    317e:	75 e0       	ldi	r23, 0x05	; 5
    3180:	80 e6       	ldi	r24, 0x60	; 96
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>

				Loc_u8Check = ZERO_VALUE;
				Usart_u8Status = USART_STATUS_NOT_PRESS;
    3188:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>

			}

		}

}
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	08 95       	ret

00003192 <Smart_ShowTimeUart>:



void Smart_ShowTimeUart(){
    3192:	cf 93       	push	r28
    3194:	df 93       	push	r29
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	a4 97       	sbiw	r28, 0x24	; 36
    319c:	0f b6       	in	r0, 0x3f	; 63
    319e:	f8 94       	cli
    31a0:	de bf       	out	0x3e, r29	; 62
    31a2:	0f be       	out	0x3f, r0	; 63
    31a4:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8Second =ZERO_VALUE;
    31a6:	1c a2       	std	Y+36, r1	; 0x24
	u8 Loc_u8Minute =ZERO_VALUE;
    31a8:	1b a2       	std	Y+35, r1	; 0x23
	u8 Loc_u8Hour =ZERO_VALUE;
    31aa:	1a a2       	std	Y+34, r1	; 0x22
	u8 Loc_u8Day =ZERO_VALUE;
    31ac:	19 a2       	std	Y+33, r1	; 0x21
	u8 Loc_u8Month =ZERO_VALUE;
    31ae:	18 a2       	std	Y+32, r1	; 0x20
	u8 Loc_u8Year =ZERO_VALUE;
    31b0:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 Loc_u8SecondArr[5];
	u8 Loc_u8MinutesArr[5];
	u8 Loc_u8HoursArr[5];

	Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rDate:  ");
    31b2:	68 e9       	ldi	r22, 0x98	; 152
    31b4:	75 e0       	ldi	r23, 0x05	; 5
    31b6:	80 e6       	ldi	r24, 0x60	; 96
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>


	Rtc_enuGetDay(&Loc_u8Day);
    31be:	ce 01       	movw	r24, r28
    31c0:	81 96       	adiw	r24, 0x21	; 33
    31c2:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Rtc_enuGetDay>
	Convert_IntToString(Loc_u8Day, Loc_u8DayArr);
    31c6:	69 a1       	ldd	r22, Y+33	; 0x21
    31c8:	70 e0       	ldi	r23, 0x00	; 0
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	ae 01       	movw	r20, r28
    31d0:	46 5e       	subi	r20, 0xE6	; 230
    31d2:	5f 4f       	sbci	r21, 0xFF	; 255
    31d4:	0e 94 83 00 	call	0x106	; 0x106 <Convert_IntToString>
	Usart_enuTransmitStringBlocking(&Usart1,Loc_u8DayArr);
    31d8:	be 01       	movw	r22, r28
    31da:	66 5e       	subi	r22, 0xE6	; 230
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	80 e6       	ldi	r24, 0x60	; 96
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitCharBlocking(&Usart1, ':');
    31e6:	6a e3       	ldi	r22, 0x3A	; 58
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	80 e6       	ldi	r24, 0x60	; 96
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
    31f2:	2f ef       	ldi	r18, 0xFF	; 255
    31f4:	82 e5       	ldi	r24, 0x52	; 82
    31f6:	97 e0       	ldi	r25, 0x07	; 7
    31f8:	21 50       	subi	r18, 0x01	; 1
    31fa:	80 40       	sbci	r24, 0x00	; 0
    31fc:	90 40       	sbci	r25, 0x00	; 0
    31fe:	e1 f7       	brne	.-8      	; 0x31f8 <Smart_ShowTimeUart+0x66>
    3200:	00 c0       	rjmp	.+0      	; 0x3202 <Smart_ShowTimeUart+0x70>
    3202:	00 00       	nop
	_delay_ms(150);


	Rtc_enuGetMonth(&Loc_u8Month);
    3204:	ce 01       	movw	r24, r28
    3206:	80 96       	adiw	r24, 0x20	; 32
    3208:	0e 94 38 0b 	call	0x1670	; 0x1670 <Rtc_enuGetMonth>
	Convert_IntToString(Loc_u8Month, Loc_u8MonthArr);
    320c:	68 a1       	ldd	r22, Y+32	; 0x20
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	ae 01       	movw	r20, r28
    3216:	4b 5e       	subi	r20, 0xEB	; 235
    3218:	5f 4f       	sbci	r21, 0xFF	; 255
    321a:	0e 94 83 00 	call	0x106	; 0x106 <Convert_IntToString>
	Usart_enuTransmitStringBlocking(&Usart1,Loc_u8MonthArr);
    321e:	be 01       	movw	r22, r28
    3220:	6b 5e       	subi	r22, 0xEB	; 235
    3222:	7f 4f       	sbci	r23, 0xFF	; 255
    3224:	80 e6       	ldi	r24, 0x60	; 96
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitCharBlocking(&Usart1, ':');
    322c:	6a e3       	ldi	r22, 0x3A	; 58
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	80 e6       	ldi	r24, 0x60	; 96
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
    3238:	2f ef       	ldi	r18, 0xFF	; 255
    323a:	82 e5       	ldi	r24, 0x52	; 82
    323c:	97 e0       	ldi	r25, 0x07	; 7
    323e:	21 50       	subi	r18, 0x01	; 1
    3240:	80 40       	sbci	r24, 0x00	; 0
    3242:	90 40       	sbci	r25, 0x00	; 0
    3244:	e1 f7       	brne	.-8      	; 0x323e <Smart_ShowTimeUart+0xac>
    3246:	00 c0       	rjmp	.+0      	; 0x3248 <Smart_ShowTimeUart+0xb6>
    3248:	00 00       	nop
	_delay_ms(150);

	Rtc_enuGetYear(&Loc_u8Year);
    324a:	ce 01       	movw	r24, r28
    324c:	4f 96       	adiw	r24, 0x1f	; 31
    324e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Rtc_enuGetYear>
	Convert_IntToString(Loc_u8Year, Loc_u8YearArr);
    3252:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	ae 01       	movw	r20, r28
    325c:	40 5f       	subi	r20, 0xF0	; 240
    325e:	5f 4f       	sbci	r21, 0xFF	; 255
    3260:	0e 94 83 00 	call	0x106	; 0x106 <Convert_IntToString>
	Usart_enuTransmitStringBlocking(&Usart1,Loc_u8YearArr);
    3264:	be 01       	movw	r22, r28
    3266:	60 5f       	subi	r22, 0xF0	; 240
    3268:	7f 4f       	sbci	r23, 0xFF	; 255
    326a:	80 e6       	ldi	r24, 0x60	; 96
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
    3272:	2f ef       	ldi	r18, 0xFF	; 255
    3274:	82 e5       	ldi	r24, 0x52	; 82
    3276:	97 e0       	ldi	r25, 0x07	; 7
    3278:	21 50       	subi	r18, 0x01	; 1
    327a:	80 40       	sbci	r24, 0x00	; 0
    327c:	90 40       	sbci	r25, 0x00	; 0
    327e:	e1 f7       	brne	.-8      	; 0x3278 <Smart_ShowTimeUart+0xe6>
    3280:	00 c0       	rjmp	.+0      	; 0x3282 <Smart_ShowTimeUart+0xf0>
    3282:	00 00       	nop
	_delay_ms(150);



	Usart_enuTransmitStringBlocking(&Usart1,(u8*)"\rClock:  ");
    3284:	61 ea       	ldi	r22, 0xA1	; 161
    3286:	75 e0       	ldi	r23, 0x05	; 5
    3288:	80 e6       	ldi	r24, 0x60	; 96
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>





	Rtc_enuGetHour(&Loc_u8Hour);
    3290:	ce 01       	movw	r24, r28
    3292:	82 96       	adiw	r24, 0x22	; 34
    3294:	0e 94 c2 0a 	call	0x1584	; 0x1584 <Rtc_enuGetHour>
	Convert_IntToString(Loc_u8Hour, Loc_u8HoursArr);
    3298:	6a a1       	ldd	r22, Y+34	; 0x22
    329a:	70 e0       	ldi	r23, 0x00	; 0
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	ae 01       	movw	r20, r28
    32a2:	4f 5f       	subi	r20, 0xFF	; 255
    32a4:	5f 4f       	sbci	r21, 0xFF	; 255
    32a6:	0e 94 83 00 	call	0x106	; 0x106 <Convert_IntToString>
	Usart_enuTransmitStringBlocking(&Usart1,Loc_u8HoursArr);
    32aa:	be 01       	movw	r22, r28
    32ac:	6f 5f       	subi	r22, 0xFF	; 255
    32ae:	7f 4f       	sbci	r23, 0xFF	; 255
    32b0:	80 e6       	ldi	r24, 0x60	; 96
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitCharBlocking(&Usart1, ':');
    32b8:	6a e3       	ldi	r22, 0x3A	; 58
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	80 e6       	ldi	r24, 0x60	; 96
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
    32c4:	2f ef       	ldi	r18, 0xFF	; 255
    32c6:	82 e5       	ldi	r24, 0x52	; 82
    32c8:	97 e0       	ldi	r25, 0x07	; 7
    32ca:	21 50       	subi	r18, 0x01	; 1
    32cc:	80 40       	sbci	r24, 0x00	; 0
    32ce:	90 40       	sbci	r25, 0x00	; 0
    32d0:	e1 f7       	brne	.-8      	; 0x32ca <Smart_ShowTimeUart+0x138>
    32d2:	00 c0       	rjmp	.+0      	; 0x32d4 <Smart_ShowTimeUart+0x142>
    32d4:	00 00       	nop

	_delay_ms(150);

	Rtc_enuGetMinute(&Loc_u8Minute);
    32d6:	ce 01       	movw	r24, r28
    32d8:	83 96       	adiw	r24, 0x23	; 35
    32da:	0e 94 87 0a 	call	0x150e	; 0x150e <Rtc_enuGetMinute>
	Convert_IntToString(Loc_u8Minute, Loc_u8MinutesArr);
    32de:	6b a1       	ldd	r22, Y+35	; 0x23
    32e0:	70 e0       	ldi	r23, 0x00	; 0
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	ae 01       	movw	r20, r28
    32e8:	4a 5f       	subi	r20, 0xFA	; 250
    32ea:	5f 4f       	sbci	r21, 0xFF	; 255
    32ec:	0e 94 83 00 	call	0x106	; 0x106 <Convert_IntToString>
	Usart_enuTransmitStringBlocking(&Usart1,Loc_u8MinutesArr);
    32f0:	be 01       	movw	r22, r28
    32f2:	6a 5f       	subi	r22, 0xFA	; 250
    32f4:	7f 4f       	sbci	r23, 0xFF	; 255
    32f6:	80 e6       	ldi	r24, 0x60	; 96
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitCharBlocking(&Usart1, ':');
    32fe:	6a e3       	ldi	r22, 0x3A	; 58
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	80 e6       	ldi	r24, 0x60	; 96
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
    330a:	2f ef       	ldi	r18, 0xFF	; 255
    330c:	82 e5       	ldi	r24, 0x52	; 82
    330e:	97 e0       	ldi	r25, 0x07	; 7
    3310:	21 50       	subi	r18, 0x01	; 1
    3312:	80 40       	sbci	r24, 0x00	; 0
    3314:	90 40       	sbci	r25, 0x00	; 0
    3316:	e1 f7       	brne	.-8      	; 0x3310 <Smart_ShowTimeUart+0x17e>
    3318:	00 c0       	rjmp	.+0      	; 0x331a <Smart_ShowTimeUart+0x188>
    331a:	00 00       	nop

	_delay_ms(150);



	Rtc_enuGetSecond(&Loc_u8Second);
    331c:	ce 01       	movw	r24, r28
    331e:	84 96       	adiw	r24, 0x24	; 36
    3320:	0e 94 4c 0a 	call	0x1498	; 0x1498 <Rtc_enuGetSecond>
	Convert_IntToString(Loc_u8Second, Loc_u8SecondArr);
    3324:	6c a1       	ldd	r22, Y+36	; 0x24
    3326:	70 e0       	ldi	r23, 0x00	; 0
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	ae 01       	movw	r20, r28
    332e:	45 5f       	subi	r20, 0xF5	; 245
    3330:	5f 4f       	sbci	r21, 0xFF	; 255
    3332:	0e 94 83 00 	call	0x106	; 0x106 <Convert_IntToString>
	Usart_enuTransmitStringBlocking(&Usart1,Loc_u8SecondArr);
    3336:	be 01       	movw	r22, r28
    3338:	65 5f       	subi	r22, 0xF5	; 245
    333a:	7f 4f       	sbci	r23, 0xFF	; 255
    333c:	80 e6       	ldi	r24, 0x60	; 96
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
	Usart_enuTransmitCharBlocking(&Usart1, '\r');
    3344:	6d e0       	ldi	r22, 0x0D	; 13
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	80 e6       	ldi	r24, 0x60	; 96
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>





}
    3350:	a4 96       	adiw	r28, 0x24	; 36
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	de bf       	out	0x3e, r29	; 62
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	cd bf       	out	0x3d, r28	; 61
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	08 95       	ret

00003362 <Smart_UartModeUser>:

					}

		}
}
void Smart_UartModeUser(){
    3362:	af 92       	push	r10
    3364:	bf 92       	push	r11
    3366:	cf 92       	push	r12
    3368:	df 92       	push	r13
    336a:	ff 92       	push	r15
    336c:	0f 93       	push	r16
    336e:	1f 93       	push	r17
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	00 d0       	rcall	.+0      	; 0x3376 <Smart_UartModeUser+0x14>
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62

	u8 Loc_u8TempData = ZERO_VALUE ;
    337a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8Index = ZERO_VALUE;
	u8 Loc_u8CursorIndex = ONE_VALUE;
	u8 Loc_u8Start = ONE_VALUE;
	u8 Loc_u8TempStart = ONE_VALUE;

		Usart_u8Status = USART_STATUS_NOT_PRESS;
    337c:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>


///////////////////// LOG IN PART ///////////////////////////////////////////////////

	u8 Loc_u8Check = ONE_VALUE;
	u8 Loc_u8UsernameId= ZERO_VALUE;
    3380:	10 e0       	ldi	r17, 0x00	; 0

		while(Loc_u8TryAgain == ONE_VALUE){
	        Loc_u8Check = ONE_VALUE;

			Loc_u8Password= ZERO_VALUE;
			Loc_u8RealPassword = ZERO_VALUE;
    3382:	19 82       	std	Y+1, r1	; 0x01
			Loc_u8Check = ONE_VALUE;

			Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Username ID: ");
    3384:	64 ef       	ldi	r22, 0xF4	; 244
    3386:	74 e0       	ldi	r23, 0x04	; 4
    3388:	80 e6       	ldi	r24, 0x60	; 96
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
    3390:	81 e0       	ldi	r24, 0x01	; 1

		while(Loc_u8Check != ZERO_VALUE){
    3392:	88 23       	and	r24, r24
    3394:	d9 f0       	breq	.+54     	; 0x33cc <Smart_UartModeUser+0x6a>
			Loc_u8UsernameId=ZERO_VALUE;
			if(Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value>='0') && (Usart_u8Value<='9')){
    3396:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <Usart_u8Status>
			Loc_u8Check = ONE_VALUE;

			Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Username ID: ");

		while(Loc_u8Check != ZERO_VALUE){
			Loc_u8UsernameId=ZERO_VALUE;
    339a:	10 e0       	ldi	r17, 0x00	; 0
			if(Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value>='0') && (Usart_u8Value<='9')){
    339c:	91 30       	cpi	r25, 0x01	; 1
    339e:	c9 f7       	brne	.-14     	; 0x3392 <Smart_UartModeUser+0x30>
    33a0:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    33a4:	80 33       	cpi	r24, 0x30	; 48
    33a6:	a0 f3       	brcs	.-24     	; 0x3390 <Smart_UartModeUser+0x2e>
    33a8:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    33ac:	8a 33       	cpi	r24, 0x3A	; 58
    33ae:	80 f7       	brcc	.-32     	; 0x3390 <Smart_UartModeUser+0x2e>
				Loc_u8UsernameId = Usart_u8Value-'0';
    33b0:	10 91 e3 06 	lds	r17, 0x06E3	; 0x8006e3 <Usart_u8Value>
    33b4:	10 53       	subi	r17, 0x30	; 48
				Usart_enuTransmitCharBlocking(&Usart1,  Usart_u8Value);
    33b6:	60 91 e3 06 	lds	r22, 0x06E3	; 0x8006e3 <Usart_u8Value>
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	80 e6       	ldi	r24, 0x60	; 96
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
				Loc_u8Check = ZERO_VALUE;
				Usart_u8Status = USART_STATUS_NOT_PRESS;
    33c4:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
		while(Loc_u8Check != ZERO_VALUE){
			Loc_u8UsernameId=ZERO_VALUE;
			if(Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value>='0') && (Usart_u8Value<='9')){
				Loc_u8UsernameId = Usart_u8Value-'0';
				Usart_enuTransmitCharBlocking(&Usart1,  Usart_u8Value);
				Loc_u8Check = ZERO_VALUE;
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	e3 cf       	rjmp	.-58     	; 0x3392 <Smart_UartModeUser+0x30>
		}

		/* Password Part */
		Loc_u8Check = ONE_VALUE;

		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Password:\r");
    33cc:	69 e0       	ldi	r22, 0x09	; 9
    33ce:	75 e0       	ldi	r23, 0x05	; 5
    33d0:	80 e6       	ldi	r24, 0x60	; 96
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
		Usart_u8Status = USART_STATUS_NOT_PRESS;

		while(Loc_u8TryAgain == ONE_VALUE){
	        Loc_u8Check = ONE_VALUE;

			Loc_u8Password= ZERO_VALUE;
    33d8:	00 e0       	ldi	r16, 0x00	; 0

		Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Password:\r");

		while(Loc_u8Check != ZERO_VALUE){

			if(Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value>='0') && (Usart_u8Value<='9')){
    33da:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Usart_u8Status>
    33de:	81 30       	cpi	r24, 0x01	; 1
    33e0:	99 f4       	brne	.+38     	; 0x3408 <Smart_UartModeUser+0xa6>
    33e2:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    33e6:	80 33       	cpi	r24, 0x30	; 48
    33e8:	78 f0       	brcs	.+30     	; 0x3408 <Smart_UartModeUser+0xa6>
    33ea:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    33ee:	8a 33       	cpi	r24, 0x3A	; 58
    33f0:	58 f4       	brcc	.+22     	; 0x3408 <Smart_UartModeUser+0xa6>
				Loc_u8Password = Loc_u8Password*10+ Usart_u8Value-'0';
    33f2:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    33f6:	80 53       	subi	r24, 0x30	; 48
    33f8:	2a e0       	ldi	r18, 0x0A	; 10
    33fa:	02 9f       	mul	r16, r18
    33fc:	80 0d       	add	r24, r0
    33fe:	11 24       	eor	r1, r1
    3400:	08 2f       	mov	r16, r24

				Usart_u8Status = USART_STATUS_NOT_PRESS;
    3402:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
    3406:	e9 cf       	rjmp	.-46     	; 0x33da <Smart_UartModeUser+0x78>
			}
			else if (Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value=='\r')){
    3408:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Usart_u8Status>
    340c:	81 30       	cpi	r24, 0x01	; 1
    340e:	29 f7       	brne	.-54     	; 0x33da <Smart_UartModeUser+0x78>
    3410:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    3414:	8d 30       	cpi	r24, 0x0D	; 13
    3416:	09 f7       	brne	.-62     	; 0x33da <Smart_UartModeUser+0x78>
				ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, &Loc_u8RealPassword);
    3418:	ae 01       	movw	r20, r28
    341a:	4f 5f       	subi	r20, 0xFF	; 255
    341c:	5f 4f       	sbci	r21, 0xFF	; 255
    341e:	61 2f       	mov	r22, r17
    3420:	80 e5       	ldi	r24, 0x50	; 80
    3422:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <ExternalEeprom_ReadByte>

				if(Loc_u8RealPassword == Loc_u8Password){
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	80 13       	cpse	r24, r16
    342a:	08 c0       	rjmp	.+16     	; 0x343c <Smart_UartModeUser+0xda>
					Loc_u8TryAgain = ZERO_VALUE;
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\r\rLogging In\r\r");
    342c:	6b ea       	ldi	r22, 0xAB	; 171
    342e:	75 e0       	ldi	r23, 0x05	; 5
    3430:	80 e6       	ldi	r24, 0x60	; 96
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
			}
			else if (Usart_u8Status == USART_STATUS_PRESS && (Usart_u8Value=='\r')){
				ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, &Loc_u8RealPassword);

				if(Loc_u8RealPassword == Loc_u8Password){
					Loc_u8TryAgain = ZERO_VALUE;
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	07 c0       	rjmp	.+14     	; 0x344a <Smart_UartModeUser+0xe8>
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\r\rLogging In\r\r");
				}
				else{
					Usart_enuTransmitStringBlocking(&Usart1,(u8*)"\r\rWrong Password\r\r");
    343c:	6a eb       	ldi	r22, 0xBA	; 186
    343e:	75 e0       	ldi	r23, 0x05	; 5
    3440:	80 e6       	ldi	r24, 0x60	; 96
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
    3448:	81 e0       	ldi	r24, 0x01	; 1
				}

				Loc_u8Check = ZERO_VALUE;
				Usart_u8Status = USART_STATUS_NOT_PRESS;
    344a:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
	u8 Loc_u8Start = ONE_VALUE;
	u8 Loc_u8TempStart = ONE_VALUE;

		Usart_u8Status = USART_STATUS_NOT_PRESS;

		while(Loc_u8TryAgain == ONE_VALUE){
    344e:	81 30       	cpi	r24, 0x01	; 1
    3450:	09 f4       	brne	.+2      	; 0x3454 <Smart_UartModeUser+0xf2>
    3452:	97 cf       	rjmp	.-210    	; 0x3382 <Smart_UartModeUser+0x20>
    3454:	38 ed       	ldi	r19, 0xD8	; 216
    3456:	a3 2e       	mov	r10, r19
    3458:	36 e0       	ldi	r19, 0x06	; 6
    345a:	b3 2e       	mov	r11, r19
    345c:	42 e0       	ldi	r20, 0x02	; 2
    345e:	c4 2e       	mov	r12, r20
    3460:	d1 2c       	mov	r13, r1
		//////////////////////////////////////////////////////////////////////////////////////////////////////////



	for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<SEVEN_VALUE; Loc_u8Index++ ){
		Usart_enuTransmitStringBlocking(&Usart1, (u8*)UserListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]]);
    3462:	04 e1       	ldi	r16, 0x14	; 20
    3464:	f5 01       	movw	r30, r10
    3466:	81 91       	ld	r24, Z+
    3468:	5f 01       	movw	r10, r30
    346a:	96 01       	movw	r18, r12
    346c:	28 1b       	sub	r18, r24
    346e:	31 09       	sbc	r19, r1
    3470:	02 9f       	mul	r16, r18
    3472:	b0 01       	movw	r22, r0
    3474:	03 9f       	mul	r16, r19
    3476:	70 0d       	add	r23, r0
    3478:	11 24       	eor	r1, r1
    347a:	62 57       	subi	r22, 0x72	; 114
    347c:	7f 4f       	sbci	r23, 0xFF	; 255
    347e:	80 e6       	ldi	r24, 0x60	; 96
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
		Usart_enuTransmitCharBlocking(&Usart1, '\r');
    3486:	6d e0       	ldi	r22, 0x0D	; 13
    3488:	70 e0       	ldi	r23, 0x00	; 0
    348a:	80 e6       	ldi	r24, 0x60	; 96
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
    3492:	32 e0       	ldi	r19, 0x02	; 2
    3494:	c3 0e       	add	r12, r19
    3496:	d1 1c       	adc	r13, r1

		//////////////////////////////////////////////////////////////////////////////////////////////////////////



	for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<SEVEN_VALUE; Loc_u8Index++ ){
    3498:	80 e1       	ldi	r24, 0x10	; 16
    349a:	c8 16       	cp	r12, r24
    349c:	d1 04       	cpc	r13, r1
    349e:	11 f7       	brne	.-60     	; 0x3464 <Smart_UartModeUser+0x102>
			case '4':

				if(AdminListStatus[FOUR_VALUE] == ZERO_VALUE){
					SET_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom3 Is On\r");
					AdminListStatus[FOUR_VALUE] = ONE_VALUE;
    34a0:	01 e0       	ldi	r16, 0x01	; 1

			}

			Loc_u8TempStart = Loc_u8Start;
			for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<SEVEN_VALUE; Loc_u8Index++ ){
				Usart_enuTransmitStringBlocking(&Usart1,  UserListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]]);
    34a2:	24 e1       	ldi	r18, 0x14	; 20
    34a4:	f2 2e       	mov	r15, r18
	}

	Loc_u8Check = ONE_VALUE;
	while(Loc_u8Check != ZERO_VALUE){

		if(Usart_u8Status == USART_STATUS_PRESS){
    34a6:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Usart_u8Status>
    34aa:	81 30       	cpi	r24, 0x01	; 1
    34ac:	e1 f7       	brne	.-8      	; 0x34a6 <Smart_UartModeUser+0x144>


			Usart_u8Status = USART_STATUS_NOT_PRESS;
    34ae:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
			switch(Usart_u8Value){
    34b2:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <Usart_u8Value>
    34b6:	8e 2f       	mov	r24, r30
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	fc 01       	movw	r30, r24
    34bc:	f1 97       	sbiw	r30, 0x31	; 49
    34be:	e7 30       	cpi	r30, 0x07	; 7
    34c0:	f1 05       	cpc	r31, r1
    34c2:	f8 f4       	brcc	.+62     	; 0x3502 <Smart_UartModeUser+0x1a0>
    34c4:	eb 5a       	subi	r30, 0xAB	; 171
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__tablejump2__>

			case '1':


				if(AdminListStatus[ONE_VALUE] == ZERO_VALUE){
    34cc:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <AdminListStatus+0x1>
    34d0:	81 11       	cpse	r24, r1
    34d2:	0c c0       	rjmp	.+24     	; 0x34ec <Smart_UartModeUser+0x18a>
					Servo_enuSetAngle(180);
    34d4:	84 eb       	ldi	r24, 0xB4	; 180
    34d6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Servo_enuSetAngle>
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rDoor Is Open\r");
    34da:	6d ec       	ldi	r22, 0xCD	; 205
    34dc:	75 e0       	ldi	r23, 0x05	; 5
    34de:	80 e6       	ldi	r24, 0x60	; 96
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>

					AdminListStatus[ONE_VALUE] = ONE_VALUE;
    34e6:	00 93 d8 06 	sts	0x06D8, r16	; 0x8006d8 <AdminListStatus+0x1>
    34ea:	0b c0       	rjmp	.+22     	; 0x3502 <Smart_UartModeUser+0x1a0>
				}
				else {
					Servo_enuSetAngle(0);
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Servo_enuSetAngle>
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rDoor Is Closed\r");
    34f2:	6c ed       	ldi	r22, 0xDC	; 220
    34f4:	75 e0       	ldi	r23, 0x05	; 5
    34f6:	80 e6       	ldi	r24, 0x60	; 96
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					AdminListStatus[ONE_VALUE] = ZERO_VALUE;
    34fe:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <AdminListStatus+0x1>
	u8 Loc_u8Start = ONE_VALUE;
	u8 Loc_u8TempStart = ONE_VALUE;

		Usart_u8Status = USART_STATUS_NOT_PRESS;

		while(Loc_u8TryAgain == ONE_VALUE){
    3502:	88 ed       	ldi	r24, 0xD8	; 216
    3504:	a8 2e       	mov	r10, r24
    3506:	86 e0       	ldi	r24, 0x06	; 6
    3508:	b8 2e       	mov	r11, r24
    350a:	92 e0       	ldi	r25, 0x02	; 2
    350c:	c9 2e       	mov	r12, r25
    350e:	d1 2c       	mov	r13, r1
    3510:	73 c0       	rjmp	.+230    	; 0x35f8 <Smart_UartModeUser+0x296>


			case '2':


				if(AdminListStatus[TWO_VALUE] == ZERO_VALUE){
    3512:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <AdminListStatus+0x2>
    3516:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    351a:	91 11       	cpse	r25, r1
    351c:	0c c0       	rjmp	.+24     	; 0x3536 <Smart_UartModeUser+0x1d4>
					SET_BIT(MasterSmart_u8SlavePins,ZERO_VALUE);
    351e:	81 60       	ori	r24, 0x01	; 1
    3520:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom1 Is On\r");
    3524:	6d ee       	ldi	r22, 0xED	; 237
    3526:	75 e0       	ldi	r23, 0x05	; 5
    3528:	80 e6       	ldi	r24, 0x60	; 96
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					AdminListStatus[TWO_VALUE] = ONE_VALUE;
    3530:	00 93 d9 06 	sts	0x06D9, r16	; 0x8006d9 <AdminListStatus+0x2>
    3534:	49 c0       	rjmp	.+146    	; 0x35c8 <Smart_UartModeUser+0x266>
				}
				else {

					CLEAR_BIT(MasterSmart_u8SlavePins,ZERO_VALUE);
    3536:	8e 7f       	andi	r24, 0xFE	; 254
    3538:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom1 Is Off\r");
    353c:	6b ef       	ldi	r22, 0xFB	; 251
    353e:	75 e0       	ldi	r23, 0x05	; 5
    3540:	80 e6       	ldi	r24, 0x60	; 96
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					AdminListStatus[TWO_VALUE] = ZERO_VALUE;
    3548:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <AdminListStatus+0x2>
    354c:	3d c0       	rjmp	.+122    	; 0x35c8 <Smart_UartModeUser+0x266>

				break;

			case '3':

				if(AdminListStatus[THREE_VALUE] == ZERO_VALUE){
    354e:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <AdminListStatus+0x3>
    3552:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    3556:	91 11       	cpse	r25, r1
    3558:	0c c0       	rjmp	.+24     	; 0x3572 <Smart_UartModeUser+0x210>
					SET_BIT(MasterSmart_u8SlavePins,ONE_VALUE);
    355a:	82 60       	ori	r24, 0x02	; 2
    355c:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom2 Is On\r");
    3560:	6a e0       	ldi	r22, 0x0A	; 10
    3562:	76 e0       	ldi	r23, 0x06	; 6
    3564:	80 e6       	ldi	r24, 0x60	; 96
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					AdminListStatus[THREE_VALUE] = ONE_VALUE;
    356c:	00 93 da 06 	sts	0x06DA, r16	; 0x8006da <AdminListStatus+0x3>
    3570:	2b c0       	rjmp	.+86     	; 0x35c8 <Smart_UartModeUser+0x266>
				}
				else {
					CLEAR_BIT(MasterSmart_u8SlavePins,ONE_VALUE);
    3572:	8d 7f       	andi	r24, 0xFD	; 253
    3574:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom2 Is Off\r");
    3578:	68 e1       	ldi	r22, 0x18	; 24
    357a:	76 e0       	ldi	r23, 0x06	; 6
    357c:	80 e6       	ldi	r24, 0x60	; 96
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					AdminListStatus[THREE_VALUE] = ZERO_VALUE;
    3584:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <AdminListStatus+0x3>
    3588:	1f c0       	rjmp	.+62     	; 0x35c8 <Smart_UartModeUser+0x266>
				Spi_enuTransmitBlocking(SPI_SLAVE_PIN, MasterSmart_u8SlavePins, &Loc_u8TempData);

				break;
			case '4':

				if(AdminListStatus[FOUR_VALUE] == ZERO_VALUE){
    358a:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <AdminListStatus+0x4>
    358e:	81 11       	cpse	r24, r1
    3590:	0e c0       	rjmp	.+28     	; 0x35ae <Smart_UartModeUser+0x24c>
					SET_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
    3592:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    3596:	84 60       	ori	r24, 0x04	; 4
    3598:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom3 Is On\r");
    359c:	67 e2       	ldi	r22, 0x27	; 39
    359e:	76 e0       	ldi	r23, 0x06	; 6
    35a0:	80 e6       	ldi	r24, 0x60	; 96
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					AdminListStatus[FOUR_VALUE] = ONE_VALUE;
    35a8:	00 93 db 06 	sts	0x06DB, r16	; 0x8006db <AdminListStatus+0x4>
    35ac:	0d c0       	rjmp	.+26     	; 0x35c8 <Smart_UartModeUser+0x266>
				}
				else {
					// Spi
					Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom3 Is Off\r");
    35ae:	65 e3       	ldi	r22, 0x35	; 53
    35b0:	76 e0       	ldi	r23, 0x06	; 6
    35b2:	80 e6       	ldi	r24, 0x60	; 96
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					AdminListStatus[FOUR_VALUE] = ZERO_VALUE;
    35ba:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <AdminListStatus+0x4>
					CLEAR_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
    35be:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    35c2:	8b 7f       	andi	r24, 0xFB	; 251
    35c4:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
				}
				Spi_enuTransmitBlocking(SPI_SLAVE_PIN, MasterSmart_u8SlavePins, &Loc_u8TempData);
    35c8:	ae 01       	movw	r20, r28
    35ca:	4e 5f       	subi	r20, 0xFE	; 254
    35cc:	5f 4f       	sbci	r21, 0xFF	; 255
    35ce:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    35d2:	8c e0       	ldi	r24, 0x0C	; 12
    35d4:	0e 94 68 07 	call	0xed0	; 0xed0 <Spi_enuTransmitBlocking>

				break;
    35d8:	94 cf       	rjmp	.-216    	; 0x3502 <Smart_UartModeUser+0x1a0>
			case '5': // show time

				Smart_ShowTimeUart();
    35da:	0e 94 c9 18 	call	0x3192	; 0x3192 <Smart_ShowTimeUart>
				break;
    35de:	91 cf       	rjmp	.-222    	; 0x3502 <Smart_UartModeUser+0x1a0>

			case '6':// Change Password
				MasterSmart_ChangePasswordUart(Loc_u8UsernameId,Loc_u8RealPassword);
    35e0:	69 81       	ldd	r22, Y+1	; 0x01
    35e2:	81 2f       	mov	r24, r17
    35e4:	0e 94 4c 18 	call	0x3098	; 0x3098 <MasterSmart_ChangePasswordUart>
				ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, Loc_u8UsernameId, &Loc_u8RealPassword);
    35e8:	ae 01       	movw	r20, r28
    35ea:	4f 5f       	subi	r20, 0xFF	; 255
    35ec:	5f 4f       	sbci	r21, 0xFF	; 255
    35ee:	61 2f       	mov	r22, r17
    35f0:	80 e5       	ldi	r24, 0x50	; 80
    35f2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <ExternalEeprom_ReadByte>
				break;
    35f6:	85 cf       	rjmp	.-246    	; 0x3502 <Smart_UartModeUser+0x1a0>

			}

			Loc_u8TempStart = Loc_u8Start;
			for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<SEVEN_VALUE; Loc_u8Index++ ){
				Usart_enuTransmitStringBlocking(&Usart1,  UserListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]]);
    35f8:	f5 01       	movw	r30, r10
    35fa:	81 91       	ld	r24, Z+
    35fc:	5f 01       	movw	r10, r30
    35fe:	96 01       	movw	r18, r12
    3600:	28 1b       	sub	r18, r24
    3602:	31 09       	sbc	r19, r1
    3604:	f2 9e       	mul	r15, r18
    3606:	b0 01       	movw	r22, r0
    3608:	f3 9e       	mul	r15, r19
    360a:	70 0d       	add	r23, r0
    360c:	11 24       	eor	r1, r1
    360e:	62 57       	subi	r22, 0x72	; 114
    3610:	7f 4f       	sbci	r23, 0xFF	; 255
    3612:	80 e6       	ldi	r24, 0x60	; 96
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
				Usart_enuTransmitCharBlocking(&Usart1, '\r');
    361a:	6d e0       	ldi	r22, 0x0D	; 13
    361c:	70 e0       	ldi	r23, 0x00	; 0
    361e:	80 e6       	ldi	r24, 0x60	; 96
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
    3626:	32 e0       	ldi	r19, 0x02	; 2
    3628:	c3 0e       	add	r12, r19
    362a:	d1 1c       	adc	r13, r1
				break;

			}

			Loc_u8TempStart = Loc_u8Start;
			for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<SEVEN_VALUE; Loc_u8Index++ ){
    362c:	80 e1       	ldi	r24, 0x10	; 16
    362e:	c8 16       	cp	r12, r24
    3630:	d1 04       	cpc	r13, r1
    3632:	11 f7       	brne	.-60     	; 0x35f8 <Smart_UartModeUser+0x296>
    3634:	38 cf       	rjmp	.-400    	; 0x34a6 <Smart_UartModeUser+0x144>

		}

	} // while

}
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	ff 90       	pop	r15
    3644:	df 90       	pop	r13
    3646:	cf 90       	pop	r12
    3648:	bf 90       	pop	r11
    364a:	af 90       	pop	r10
    364c:	08 95       	ret

0000364e <Smart_UartAdminList>:
void Smart_UartAdminList(){
    364e:	cf 92       	push	r12
    3650:	df 92       	push	r13
    3652:	ef 92       	push	r14
    3654:	ff 92       	push	r15
    3656:	0f 93       	push	r16
    3658:	1f 93       	push	r17
    365a:	cf 93       	push	r28
    365c:	df 93       	push	r29
    365e:	1f 92       	push	r1
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62

		u8 Loc_u8Index = ZERO_VALUE;
		u8 Loc_u8Start = ONE_VALUE;
		u8 Loc_u8TempStart = ONE_VALUE;
		u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8TempData = ZERO_VALUE ;
    3664:	19 82       	std	Y+1, r1	; 0x01
		Usart_u8Status = USART_STATUS_NOT_PRESS;
    3666:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
    366a:	28 ed       	ldi	r18, 0xD8	; 216
    366c:	e2 2e       	mov	r14, r18
    366e:	26 e0       	ldi	r18, 0x06	; 6
    3670:	f2 2e       	mov	r15, r18
    3672:	02 e0       	ldi	r16, 0x02	; 2
    3674:	10 e0       	ldi	r17, 0x00	; 0


		for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<EIGHT_VALUE; Loc_u8Index++ ){
			Usart_enuTransmitStringBlocking(&Usart1, (u8*)AdminListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]]);
    3676:	34 e1       	ldi	r19, 0x14	; 20
    3678:	d3 2e       	mov	r13, r19
    367a:	f7 01       	movw	r30, r14
    367c:	81 91       	ld	r24, Z+
    367e:	7f 01       	movw	r14, r30
    3680:	98 01       	movw	r18, r16
    3682:	28 1b       	sub	r18, r24
    3684:	31 09       	sbc	r19, r1
    3686:	d2 9e       	mul	r13, r18
    3688:	b0 01       	movw	r22, r0
    368a:	d3 9e       	mul	r13, r19
    368c:	70 0d       	add	r23, r0
    368e:	11 24       	eor	r1, r1
    3690:	66 54       	subi	r22, 0x46	; 70
    3692:	7e 4f       	sbci	r23, 0xFE	; 254
    3694:	80 e6       	ldi	r24, 0x60	; 96
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
			Usart_enuTransmitCharBlocking(&Usart1, '\r');
    369c:	6d e0       	ldi	r22, 0x0D	; 13
    369e:	70 e0       	ldi	r23, 0x00	; 0
    36a0:	80 e6       	ldi	r24, 0x60	; 96
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
    36a8:	0e 5f       	subi	r16, 0xFE	; 254
    36aa:	1f 4f       	sbci	r17, 0xFF	; 255
		u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8TempData = ZERO_VALUE ;
		Usart_u8Status = USART_STATUS_NOT_PRESS;


		for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<EIGHT_VALUE; Loc_u8Index++ ){
    36ac:	02 31       	cpi	r16, 0x12	; 18
    36ae:	11 05       	cpc	r17, r1
    36b0:	21 f7       	brne	.-56     	; 0x367a <Smart_UartAdminList+0x2c>
				case '4':

					if(AdminListStatus[FOUR_VALUE] == ZERO_VALUE){
						SET_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom3 Is On\r");
						AdminListStatus[FOUR_VALUE] = ONE_VALUE;
    36b2:	11 e0       	ldi	r17, 0x01	; 1
				}

				Loc_u8TempStart = Loc_u8Start;

				for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<EIGHT_VALUE; Loc_u8Index++ ){
					Usart_enuTransmitStringBlocking(&Usart1, AdminListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]]);
    36b4:	04 e1       	ldi	r16, 0x14	; 20
		}


		while(Loc_u8Check != ZERO_VALUE){

			if(Usart_u8Status == USART_STATUS_PRESS){
    36b6:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <Usart_u8Status>
    36ba:	81 30       	cpi	r24, 0x01	; 1
    36bc:	e1 f7       	brne	.-8      	; 0x36b6 <Smart_UartAdminList+0x68>


				Usart_u8Status = USART_STATUS_NOT_PRESS;
    36be:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
				switch(Usart_u8Value){
    36c2:	e0 91 e3 06 	lds	r30, 0x06E3	; 0x8006e3 <Usart_u8Value>
    36c6:	8e 2f       	mov	r24, r30
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	fc 01       	movw	r30, r24
    36cc:	f1 97       	sbiw	r30, 0x31	; 49
    36ce:	e8 30       	cpi	r30, 0x08	; 8
    36d0:	f1 05       	cpc	r31, r1
    36d2:	f8 f4       	brcc	.+62     	; 0x3712 <Smart_UartAdminList+0xc4>
    36d4:	e4 5a       	subi	r30, 0xA4	; 164
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	0c 94 51 1d 	jmp	0x3aa2	; 0x3aa2 <__tablejump2__>

				case '1':

					if(AdminListStatus[ONE_VALUE] == ZERO_VALUE){
    36dc:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <AdminListStatus+0x1>
    36e0:	81 11       	cpse	r24, r1
    36e2:	0c c0       	rjmp	.+24     	; 0x36fc <Smart_UartAdminList+0xae>
						Servo_enuSetAngle(180);
    36e4:	84 eb       	ldi	r24, 0xB4	; 180
    36e6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Servo_enuSetAngle>
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rDoor Is Open\r");
    36ea:	6d ec       	ldi	r22, 0xCD	; 205
    36ec:	75 e0       	ldi	r23, 0x05	; 5
    36ee:	80 e6       	ldi	r24, 0x60	; 96
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
						AdminListStatus[ONE_VALUE] = ONE_VALUE;
    36f6:	10 93 d8 06 	sts	0x06D8, r17	; 0x8006d8 <AdminListStatus+0x1>
    36fa:	0b c0       	rjmp	.+22     	; 0x3712 <Smart_UartAdminList+0xc4>
					}
					else {
						Servo_enuSetAngle(0);
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Servo_enuSetAngle>
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rDoor Is Closed\r");
    3702:	6c ed       	ldi	r22, 0xDC	; 220
    3704:	75 e0       	ldi	r23, 0x05	; 5
    3706:	80 e6       	ldi	r24, 0x60	; 96
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
						AdminListStatus[ONE_VALUE] = ZERO_VALUE;
    370e:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <AdminListStatus+0x1>
		u8 Loc_u8Index = ZERO_VALUE;
		u8 Loc_u8Start = ONE_VALUE;
		u8 Loc_u8TempStart = ONE_VALUE;
		u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8TempData = ZERO_VALUE ;
		Usart_u8Status = USART_STATUS_NOT_PRESS;
    3712:	88 ed       	ldi	r24, 0xD8	; 216
    3714:	c8 2e       	mov	r12, r24
    3716:	86 e0       	ldi	r24, 0x06	; 6
    3718:	d8 2e       	mov	r13, r24
    371a:	92 e0       	ldi	r25, 0x02	; 2
    371c:	e9 2e       	mov	r14, r25
    371e:	f1 2c       	mov	r15, r1
    3720:	6d c0       	rjmp	.+218    	; 0x37fc <Smart_UartAdminList+0x1ae>
					break;


				case '2':

					if(AdminListStatus[TWO_VALUE] == ZERO_VALUE){
    3722:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <AdminListStatus+0x2>
    3726:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    372a:	91 11       	cpse	r25, r1
    372c:	0c c0       	rjmp	.+24     	; 0x3746 <Smart_UartAdminList+0xf8>
						SET_BIT(MasterSmart_u8SlavePins,ZERO_VALUE);
    372e:	81 60       	ori	r24, 0x01	; 1
    3730:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom1 Is On\r");
    3734:	6d ee       	ldi	r22, 0xED	; 237
    3736:	75 e0       	ldi	r23, 0x05	; 5
    3738:	80 e6       	ldi	r24, 0x60	; 96
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
						AdminListStatus[TWO_VALUE] = ONE_VALUE;
    3740:	10 93 d9 06 	sts	0x06D9, r17	; 0x8006d9 <AdminListStatus+0x2>
    3744:	49 c0       	rjmp	.+146    	; 0x37d8 <Smart_UartAdminList+0x18a>
					}
					else {

						CLEAR_BIT(MasterSmart_u8SlavePins,ZERO_VALUE);
    3746:	8e 7f       	andi	r24, 0xFE	; 254
    3748:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom1 Is Off\r");
    374c:	6b ef       	ldi	r22, 0xFB	; 251
    374e:	75 e0       	ldi	r23, 0x05	; 5
    3750:	80 e6       	ldi	r24, 0x60	; 96
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
						AdminListStatus[TWO_VALUE] = ZERO_VALUE;
    3758:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <AdminListStatus+0x2>
    375c:	3d c0       	rjmp	.+122    	; 0x37d8 <Smart_UartAdminList+0x18a>

					break;

				case '3':

					if(AdminListStatus[THREE_VALUE] == ZERO_VALUE){
    375e:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <AdminListStatus+0x3>
    3762:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    3766:	91 11       	cpse	r25, r1
    3768:	0c c0       	rjmp	.+24     	; 0x3782 <Smart_UartAdminList+0x134>
						SET_BIT(MasterSmart_u8SlavePins,ONE_VALUE);
    376a:	82 60       	ori	r24, 0x02	; 2
    376c:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom2 Is On\r");
    3770:	6a e0       	ldi	r22, 0x0A	; 10
    3772:	76 e0       	ldi	r23, 0x06	; 6
    3774:	80 e6       	ldi	r24, 0x60	; 96
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
						AdminListStatus[THREE_VALUE] = ONE_VALUE;
    377c:	10 93 da 06 	sts	0x06DA, r17	; 0x8006da <AdminListStatus+0x3>
    3780:	2b c0       	rjmp	.+86     	; 0x37d8 <Smart_UartAdminList+0x18a>
					}
					else {
						CLEAR_BIT(MasterSmart_u8SlavePins,ONE_VALUE);
    3782:	8d 7f       	andi	r24, 0xFD	; 253
    3784:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom2 Is Off\r");
    3788:	68 e1       	ldi	r22, 0x18	; 24
    378a:	76 e0       	ldi	r23, 0x06	; 6
    378c:	80 e6       	ldi	r24, 0x60	; 96
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
						AdminListStatus[THREE_VALUE] = ZERO_VALUE;
    3794:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <AdminListStatus+0x3>
    3798:	1f c0       	rjmp	.+62     	; 0x37d8 <Smart_UartAdminList+0x18a>
					Spi_enuTransmitBlocking(SPI_SLAVE_PIN, MasterSmart_u8SlavePins, &Loc_u8TempData);

					break;
				case '4':

					if(AdminListStatus[FOUR_VALUE] == ZERO_VALUE){
    379a:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <AdminListStatus+0x4>
    379e:	81 11       	cpse	r24, r1
    37a0:	0e c0       	rjmp	.+28     	; 0x37be <Smart_UartAdminList+0x170>
						SET_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
    37a2:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    37a6:	84 60       	ori	r24, 0x04	; 4
    37a8:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom3 Is On\r");
    37ac:	67 e2       	ldi	r22, 0x27	; 39
    37ae:	76 e0       	ldi	r23, 0x06	; 6
    37b0:	80 e6       	ldi	r24, 0x60	; 96
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
						AdminListStatus[FOUR_VALUE] = ONE_VALUE;
    37b8:	10 93 db 06 	sts	0x06DB, r17	; 0x8006db <AdminListStatus+0x4>
    37bc:	0d c0       	rjmp	.+26     	; 0x37d8 <Smart_UartAdminList+0x18a>
					}
					else {
						// Spi
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rRoom3 Is Off\r");
    37be:	65 e3       	ldi	r22, 0x35	; 53
    37c0:	76 e0       	ldi	r23, 0x06	; 6
    37c2:	80 e6       	ldi	r24, 0x60	; 96
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
						AdminListStatus[FOUR_VALUE] = ZERO_VALUE;
    37ca:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <AdminListStatus+0x4>
						CLEAR_BIT(MasterSmart_u8SlavePins,TWO_VALUE);
    37ce:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    37d2:	8b 7f       	andi	r24, 0xFB	; 251
    37d4:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <MasterSmart_u8SlavePins>
					}
					Spi_enuTransmitBlocking(SPI_SLAVE_PIN, MasterSmart_u8SlavePins, &Loc_u8TempData);
    37d8:	ae 01       	movw	r20, r28
    37da:	4f 5f       	subi	r20, 0xFF	; 255
    37dc:	5f 4f       	sbci	r21, 0xFF	; 255
    37de:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <MasterSmart_u8SlavePins>
    37e2:	8c e0       	ldi	r24, 0x0C	; 12
    37e4:	0e 94 68 07 	call	0xed0	; 0xed0 <Spi_enuTransmitBlocking>

					break;
    37e8:	94 cf       	rjmp	.-216    	; 0x3712 <Smart_UartAdminList+0xc4>
				case '5': // show time

					Smart_ShowTimeUart();
    37ea:	0e 94 c9 18 	call	0x3192	; 0x3192 <Smart_ShowTimeUart>
					break;
    37ee:	91 cf       	rjmp	.-222    	; 0x3712 <Smart_UartAdminList+0xc4>

				case '6':// add user
					Smart_AddUserUart();
    37f0:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <Smart_AddUserUart>
					break;
    37f4:	8e cf       	rjmp	.-228    	; 0x3712 <Smart_UartAdminList+0xc4>
				case '7': // delete user
					Smart_DeleteUserUart();
    37f6:	0e 94 08 18 	call	0x3010	; 0x3010 <Smart_DeleteUserUart>
					break;
    37fa:	8b cf       	rjmp	.-234    	; 0x3712 <Smart_UartAdminList+0xc4>
				}

				Loc_u8TempStart = Loc_u8Start;

				for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<EIGHT_VALUE; Loc_u8Index++ ){
					Usart_enuTransmitStringBlocking(&Usart1, AdminListArr[Loc_u8TempStart*TWO_VALUE-AdminListStatus[Loc_u8TempStart++]]);
    37fc:	f6 01       	movw	r30, r12
    37fe:	81 91       	ld	r24, Z+
    3800:	6f 01       	movw	r12, r30
    3802:	97 01       	movw	r18, r14
    3804:	28 1b       	sub	r18, r24
    3806:	31 09       	sbc	r19, r1
    3808:	02 9f       	mul	r16, r18
    380a:	b0 01       	movw	r22, r0
    380c:	03 9f       	mul	r16, r19
    380e:	70 0d       	add	r23, r0
    3810:	11 24       	eor	r1, r1
    3812:	66 54       	subi	r22, 0x46	; 70
    3814:	7e 4f       	sbci	r23, 0xFE	; 254
    3816:	80 e6       	ldi	r24, 0x60	; 96
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
					Usart_enuTransmitCharBlocking(&Usart1, '\r');
    381e:	6d e0       	ldi	r22, 0x0D	; 13
    3820:	70 e0       	ldi	r23, 0x00	; 0
    3822:	80 e6       	ldi	r24, 0x60	; 96
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Usart_enuTransmitCharBlocking>
    382a:	32 e0       	ldi	r19, 0x02	; 2
    382c:	e3 0e       	add	r14, r19
    382e:	f1 1c       	adc	r15, r1

				}

				Loc_u8TempStart = Loc_u8Start;

				for(Loc_u8Index = ZERO_VALUE;Loc_u8Index<EIGHT_VALUE; Loc_u8Index++ ){
    3830:	82 e1       	ldi	r24, 0x12	; 18
    3832:	e8 16       	cp	r14, r24
    3834:	f1 04       	cpc	r15, r1
    3836:	11 f7       	brne	.-60     	; 0x37fc <Smart_UartAdminList+0x1ae>
    3838:	3e cf       	rjmp	.-388    	; 0x36b6 <Smart_UartAdminList+0x68>


			}

		}
}
    383a:	0f 90       	pop	r0
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	ff 90       	pop	r15
    3846:	ef 90       	pop	r14
    3848:	df 90       	pop	r13
    384a:	cf 90       	pop	r12
    384c:	08 95       	ret

0000384e <Smart_UartModeAdmin>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Smart_UartModeAdmin(){
    384e:	1f 93       	push	r17
    3850:	cf 93       	push	r28
    3852:	df 93       	push	r29
    3854:	1f 92       	push	r1
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
	    u8 Loc_u8AdminPassword = ZERO_VALUE;
		u8 Loc_u8Check = ONE_VALUE;
		u8 Loc_u8RealAdminPassword;
		Usart_u8Status = ZERO_VALUE;
    385a:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
		///////////////////////////////////////////////////////////////
		if(Loc_u8FirstTime == ONE_VALUE){
    385e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <Loc_u8FirstTime>
    3862:	81 30       	cpi	r24, 0x01	; 1
    3864:	71 f5       	brne	.+92     	; 0x38c2 <Smart_UartModeAdmin+0x74>
			Loc_u8FirstTime = ZERO_VALUE;
    3866:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <Loc_u8FirstTime>
			Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rAdmin New Password\r");
    386a:	64 e4       	ldi	r22, 0x44	; 68
    386c:	76 e0       	ldi	r23, 0x06	; 6
    386e:	80 e6       	ldi	r24, 0x60	; 96
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Smart_UartModeAdmin(){
	    u8 Loc_u8AdminPassword = ZERO_VALUE;
		u8 Loc_u8Check = ONE_VALUE;
    3876:	81 e0       	ldi	r24, 0x01	; 1

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Smart_UartModeAdmin(){
	    u8 Loc_u8AdminPassword = ZERO_VALUE;
    3878:	10 e0       	ldi	r17, 0x00	; 0
		///////////////////////////////////////////////////////////////
		if(Loc_u8FirstTime == ONE_VALUE){
			Loc_u8FirstTime = ZERO_VALUE;
			Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rAdmin New Password\r");

			while(Loc_u8Check != ZERO_VALUE){
    387a:	88 23       	and	r24, r24
    387c:	09 f4       	brne	.+2      	; 0x3880 <Smart_UartModeAdmin+0x32>
    387e:	68 c0       	rjmp	.+208    	; 0x3950 <Smart_UartModeAdmin+0x102>

				if(Usart_u8Status == USART_STATUS_PRESS){
    3880:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <Usart_u8Status>
    3884:	91 30       	cpi	r25, 0x01	; 1
    3886:	c9 f7       	brne	.-14     	; 0x387a <Smart_UartModeAdmin+0x2c>
					if(Usart_u8Value != '\r'){
    3888:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    388c:	8d 30       	cpi	r24, 0x0D	; 13
    388e:	51 f0       	breq	.+20     	; 0x38a4 <Smart_UartModeAdmin+0x56>
						Loc_u8AdminPassword=Loc_u8AdminPassword*10 + (Usart_u8Value-'0');
    3890:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    3894:	80 53       	subi	r24, 0x30	; 48
    3896:	9a e0       	ldi	r25, 0x0A	; 10
    3898:	19 9f       	mul	r17, r25
    389a:	80 0d       	add	r24, r0
    389c:	11 24       	eor	r1, r1
    389e:	18 2f       	mov	r17, r24
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	0c c0       	rjmp	.+24     	; 0x38bc <Smart_UartModeAdmin+0x6e>
					}
					else{
						Loc_u8Check = ZERO_VALUE;
						ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, ZERO_VALUE, Loc_u8AdminPassword);
    38a4:	41 2f       	mov	r20, r17
    38a6:	60 e0       	ldi	r22, 0x00	; 0
    38a8:	80 e5       	ldi	r24, 0x50	; 80
    38aa:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <ExternalEeprom_WriteByte>
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rAdmin Password Done\r");
    38ae:	69 e5       	ldi	r22, 0x59	; 89
    38b0:	76 e0       	ldi	r23, 0x06	; 6
    38b2:	80 e6       	ldi	r24, 0x60	; 96
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
				if(Usart_u8Status == USART_STATUS_PRESS){
					if(Usart_u8Value != '\r'){
						Loc_u8AdminPassword=Loc_u8AdminPassword*10 + (Usart_u8Value-'0');
					}
					else{
						Loc_u8Check = ZERO_VALUE;
    38ba:	80 e0       	ldi	r24, 0x00	; 0
						ExternalEeprom_WriteByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, ZERO_VALUE, Loc_u8AdminPassword);
						Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rAdmin Password Done\r");

					}
					Usart_u8Status = USART_STATUS_NOT_PRESS;
    38bc:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
    38c0:	dc cf       	rjmp	.-72     	; 0x387a <Smart_UartModeAdmin+0x2c>
			}

		}
		////////////////////////////////////////////////////////////////////////////
		else{
			Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Admin Password\r");
    38c2:	6f e6       	ldi	r22, 0x6F	; 111
    38c4:	76 e0       	ldi	r23, 0x06	; 6
    38c6:	80 e6       	ldi	r24, 0x60	; 96
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>

			ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, ZERO_VALUE, &Loc_u8RealAdminPassword);
    38ce:	ae 01       	movw	r20, r28
    38d0:	4f 5f       	subi	r20, 0xFF	; 255
    38d2:	5f 4f       	sbci	r21, 0xFF	; 255
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	80 e5       	ldi	r24, 0x50	; 80
    38d8:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <ExternalEeprom_ReadByte>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Smart_UartModeAdmin(){
	    u8 Loc_u8AdminPassword = ZERO_VALUE;
		u8 Loc_u8Check = ONE_VALUE;
    38dc:	81 e0       	ldi	r24, 0x01	; 1

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void Smart_UartModeAdmin(){
	    u8 Loc_u8AdminPassword = ZERO_VALUE;
    38de:	90 e0       	ldi	r25, 0x00	; 0
		else{
			Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Admin Password\r");

			ExternalEeprom_ReadByte(EXTERNAL_EEPROM1_7BIT_ADDRESS, ZERO_VALUE, &Loc_u8RealAdminPassword);

			while(Loc_u8Check != ZERO_VALUE){
    38e0:	88 23       	and	r24, r24
    38e2:	b1 f1       	breq	.+108    	; 0x3950 <Smart_UartModeAdmin+0x102>


						if(Usart_u8Status == USART_STATUS_PRESS){
    38e4:	20 91 e2 06 	lds	r18, 0x06E2	; 0x8006e2 <Usart_u8Status>
    38e8:	21 30       	cpi	r18, 0x01	; 1
    38ea:	d1 f7       	brne	.-12     	; 0x38e0 <Smart_UartModeAdmin+0x92>
							if(Usart_u8Value != '\r'){
    38ec:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    38f0:	8d 30       	cpi	r24, 0x0D	; 13
    38f2:	49 f0       	breq	.+18     	; 0x3906 <Smart_UartModeAdmin+0xb8>
								Loc_u8AdminPassword=Loc_u8AdminPassword*10 + (Usart_u8Value-'0');
    38f4:	10 91 e3 06 	lds	r17, 0x06E3	; 0x8006e3 <Usart_u8Value>
    38f8:	10 53       	subi	r17, 0x30	; 48
    38fa:	8a e0       	ldi	r24, 0x0A	; 10
    38fc:	98 9f       	mul	r25, r24
    38fe:	10 0d       	add	r17, r0
    3900:	11 24       	eor	r1, r1
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	21 c0       	rjmp	.+66     	; 0x3948 <Smart_UartModeAdmin+0xfa>
							}
							else{


									if(Loc_u8RealAdminPassword == Loc_u8AdminPassword){
    3906:	19 81       	ldd	r17, Y+1	; 0x01
    3908:	19 13       	cpse	r17, r25
    390a:	0a c0       	rjmp	.+20     	; 0x3920 <Smart_UartModeAdmin+0xd2>
										// password is right
										Loc_u8Check = ZERO_VALUE;

										Usart_enuTransmitStringBlocking(&Usart1,  (u8*)"\rPassword Is Right\r");
    390c:	66 e8       	ldi	r22, 0x86	; 134
    390e:	76 e0       	ldi	r23, 0x06	; 6
    3910:	80 e6       	ldi	r24, 0x60	; 96
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
										Smart_UartAdminList();
    3918:	0e 94 27 1b 	call	0x364e	; 0x364e <Smart_UartAdminList>
							else{


									if(Loc_u8RealAdminPassword == Loc_u8AdminPassword){
										// password is right
										Loc_u8Check = ZERO_VALUE;
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	14 c0       	rjmp	.+40     	; 0x3948 <Smart_UartModeAdmin+0xfa>
										Usart_enuTransmitStringBlocking(&Usart1,  (u8*)"\rPassword Is Right\r");
										Smart_UartAdminList();
									}
									else{

										Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\r\rPassword Is WRONG\r");
    3920:	6a e9       	ldi	r22, 0x9A	; 154
    3922:	76 e0       	ldi	r23, 0x06	; 6
    3924:	80 e6       	ldi	r24, 0x60	; 96
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
										Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\r\rTry Again \r");
    392c:	6f ea       	ldi	r22, 0xAF	; 175
    392e:	76 e0       	ldi	r23, 0x06	; 6
    3930:	80 e6       	ldi	r24, 0x60	; 96
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>

										Loc_u8AdminPassword = ZERO_VALUE;
										Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\rEnter Admin Password\r");
    3938:	6f e6       	ldi	r22, 0x6F	; 111
    393a:	76 e0       	ldi	r23, 0x06	; 6
    393c:	80 e6       	ldi	r24, 0x60	; 96
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	0e 94 01 03 	call	0x602	; 0x602 <Usart_enuTransmitStringBlocking>
    3944:	81 e0       	ldi	r24, 0x01	; 1
									else{

										Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\r\rPassword Is WRONG\r");
										Usart_enuTransmitStringBlocking(&Usart1, (u8*)"\r\rTry Again \r");

										Loc_u8AdminPassword = ZERO_VALUE;
    3946:	10 e0       	ldi	r17, 0x00	; 0

									}


							}
							Usart_u8Status = USART_STATUS_NOT_PRESS;
    3948:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <Usart_u8Status>
    394c:	91 2f       	mov	r25, r17
    394e:	c8 cf       	rjmp	.-112    	; 0x38e0 <Smart_UartModeAdmin+0x92>
						}

					}

		}
}
    3950:	0f 90       	pop	r0
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
    3956:	1f 91       	pop	r17
    3958:	08 95       	ret

0000395a <main>:
					"7- Back To Menu"

};
//////////////////////////////////////////////////////////////////////////
int main(){
	Smart_enuInit();
    395a:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <Smart_enuInit>

	while(1){

		smart_WelcomeHome();
    395e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <smart_WelcomeHome>
		if(Smart_u8Mode == SMART_USART_MODE){
    3962:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <Smart_u8Mode>
    3966:	82 30       	cpi	r24, 0x02	; 2
    3968:	71 f4       	brne	.+28     	; 0x3986 <main+0x2c>
			// USART MODE
			if(Usart_u8Value =='1'){
    396a:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    396e:	81 33       	cpi	r24, 0x31	; 49
    3970:	19 f4       	brne	.+6      	; 0x3978 <main+0x1e>
				Smart_UartModeAdmin();
    3972:	0e 94 27 1c 	call	0x384e	; 0x384e <Smart_UartModeAdmin>
    3976:	f3 cf       	rjmp	.-26     	; 0x395e <main+0x4>

			}
			else if(Usart_u8Value =='2')
    3978:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <Usart_u8Value>
    397c:	82 33       	cpi	r24, 0x32	; 50
    397e:	79 f7       	brne	.-34     	; 0x395e <main+0x4>
				Smart_UartModeUser();
    3980:	0e 94 b1 19 	call	0x3362	; 0x3362 <Smart_UartModeUser>
    3984:	ec cf       	rjmp	.-40     	; 0x395e <main+0x4>
		}
		else if(Smart_u8Mode == SMART_KEYPAD_MODE){
    3986:	81 30       	cpi	r24, 0x01	; 1
    3988:	51 f7       	brne	.-44     	; 0x395e <main+0x4>
			// KEYPAD MODE
			if(Keypad_u8Result =='1'){
    398a:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    398e:	81 33       	cpi	r24, 0x31	; 49
    3990:	19 f4       	brne	.+6      	; 0x3998 <main+0x3e>
				Smart_KeypadModeAdmin();
    3992:	0e 94 62 13 	call	0x26c4	; 0x26c4 <Smart_KeypadModeAdmin>
    3996:	e3 cf       	rjmp	.-58     	; 0x395e <main+0x4>

			}
			else if(Keypad_u8Result =='2')
    3998:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <Keypad_u8Result>
    399c:	82 33       	cpi	r24, 0x32	; 50
    399e:	f9 f6       	brne	.-66     	; 0x395e <main+0x4>
				Smart_KeypadModeUser();
    39a0:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <Smart_KeypadModeUser>
    39a4:	dc cf       	rjmp	.-72     	; 0x395e <main+0x4>

000039a6 <smart_voidUartIsr>:

/* ISR PART */
void smart_voidUartIsr(u16 Copy_u16ReceiveData){


		Usart_u8Value = Copy_u16ReceiveData;
    39a6:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <Usart_u8Value>
		Usart_u8Status = USART_STATUS_PRESS;
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <Usart_u8Status>
    39b0:	08 95       	ret

000039b2 <smart_voidTimer0Isr>:


}


void smart_voidTimer0Isr(void){
    39b2:	cf 93       	push	r28
    39b4:	df 93       	push	r29
    39b6:	1f 92       	push	r1
    39b8:	cd b7       	in	r28, 0x3d	; 61
    39ba:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 Loc_u8Counter = ZERO_VALUE;
	u8 Loc_u8TempRead;

	Loc_u8Counter++;
    39bc:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <Loc_u8Counter.2647>
    39c0:	8f 5f       	subi	r24, 0xFF	; 255
    39c2:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <Loc_u8Counter.2647>
	if(18 == Loc_u8Counter){
    39c6:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <Loc_u8Counter.2647>
    39ca:	82 31       	cpi	r24, 0x12	; 18
    39cc:	a9 f4       	brne	.+42     	; 0x39f8 <smart_voidTimer0Isr+0x46>
		Dio_enuFlipChannel(DIO_PINA0_CHANNEL0);
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Dio_enuFlipChannel>
		Keypad_Status = Keypad_enuRead(&Keypad, &Loc_u8TempRead);
    39d4:	be 01       	movw	r22, r28
    39d6:	6f 5f       	subi	r22, 0xFF	; 255
    39d8:	7f 4f       	sbci	r23, 0xFF	; 255
    39da:	84 e8       	ldi	r24, 0x84	; 132
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <Keypad_enuRead>
    39e2:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <Keypad_Status>
		if(Keypad_Status == KEYPAD_IS_PRESSED)
    39e6:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <Keypad_Status>
    39ea:	81 11       	cpse	r24, r1
    39ec:	03 c0       	rjmp	.+6      	; 0x39f4 <smart_voidTimer0Isr+0x42>
			Keypad_u8Result = Loc_u8TempRead;
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <Keypad_u8Result>

		Loc_u8Counter = ZERO_VALUE;
    39f4:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <Loc_u8Counter.2647>
	}
}
    39f8:	0f 90       	pop	r0
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	08 95       	ret

00003a00 <Smart_enuInit>:

Smart_ErrorStatusType Smart_enuInit(void){
	Smart_ErrorStatusType Loc_enuSmartStatusError = SMART_ERROR_STATUS_OK;

	/* Port Init */
	Port_voidInit();
    3a00:	0e 94 c2 07 	call	0xf84	; 0xf84 <Port_voidInit>

	/* Uart Init */
	Usart_enuInit(&Usart1);
    3a04:	80 e6       	ldi	r24, 0x60	; 96
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 95 02 	call	0x52a	; 0x52a <Usart_enuInit>
	Usart_enuEnableRxInterrupt();
    3a0c:	0e 94 23 03 	call	0x646	; 0x646 <Usart_enuEnableRxInterrupt>
	Usart_enuSetCallbackRxFunction(smart_voidUartIsr);
    3a10:	83 ed       	ldi	r24, 0xD3	; 211
    3a12:	9c e1       	ldi	r25, 0x1C	; 28
    3a14:	0e 94 29 03 	call	0x652	; 0x652 <Usart_enuSetCallbackRxFunction>

	/* Timer0 Init Overflow */
	Timer0_enuInit(&Timer0);
    3a18:	88 e6       	ldi	r24, 0x68	; 104
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	0e 94 af 05 	call	0xb5e	; 0xb5e <Timer0_enuInit>
	Timer0_enuSetCallbackFunction(&Timer0,smart_voidTimer0Isr);
    3a20:	69 ed       	ldi	r22, 0xD9	; 217
    3a22:	7c e1       	ldi	r23, 0x1C	; 28
    3a24:	88 e6       	ldi	r24, 0x68	; 104
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	0e 94 10 06 	call	0xc20	; 0xc20 <Timer0_enuSetCallbackFunction>
	Timer0_enuEnableInterrupt(&Timer0);
    3a2c:	88 e6       	ldi	r24, 0x68	; 104
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	0e 94 82 05 	call	0xb04	; 0xb04 <Timer0_enuEnableInterrupt>


	/* Spi Init Master */
	Spi_enuInit(&Spi);
    3a34:	8b e6       	ldi	r24, 0x6B	; 107
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	0e 94 ef 06 	call	0xdde	; 0xdde <Spi_enuInit>

	/* I2c Init Master */
	I2c_enuInit(&I2c);
    3a3c:	80 e7       	ldi	r24, 0x70	; 112
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	0e 94 45 08 	call	0x108a	; 0x108a <I2c_enuInit>
	/* Lcd Init */
	Lcd_4bit_enuInit(&Lcd);
    3a44:	8d e7       	ldi	r24, 0x7D	; 125
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	0e 94 10 0c 	call	0x1820	; 0x1820 <Lcd_4bit_enuInit>

   /* Servo Init */
	Servo_enuInitTimer1();
    3a4c:	0e 94 1e 0a 	call	0x143c	; 0x143c <Servo_enuInitTimer1>
	Servo_enuSetAngle(ZERO_VALUE);
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Servo_enuSetAngle>

	/* Enable Global Interrupt */
	Gie_enuEnableGlobalInterrupt();
    3a56:	0e 94 23 09 	call	0x1246	; 0x1246 <Gie_enuEnableGlobalInterrupt>




	return Loc_enuSmartStatusError;
}
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	08 95       	ret

00003a5e <__udivmodsi4>:
    3a5e:	a1 e2       	ldi	r26, 0x21	; 33
    3a60:	1a 2e       	mov	r1, r26
    3a62:	aa 1b       	sub	r26, r26
    3a64:	bb 1b       	sub	r27, r27
    3a66:	fd 01       	movw	r30, r26
    3a68:	0d c0       	rjmp	.+26     	; 0x3a84 <__udivmodsi4_ep>

00003a6a <__udivmodsi4_loop>:
    3a6a:	aa 1f       	adc	r26, r26
    3a6c:	bb 1f       	adc	r27, r27
    3a6e:	ee 1f       	adc	r30, r30
    3a70:	ff 1f       	adc	r31, r31
    3a72:	a2 17       	cp	r26, r18
    3a74:	b3 07       	cpc	r27, r19
    3a76:	e4 07       	cpc	r30, r20
    3a78:	f5 07       	cpc	r31, r21
    3a7a:	20 f0       	brcs	.+8      	; 0x3a84 <__udivmodsi4_ep>
    3a7c:	a2 1b       	sub	r26, r18
    3a7e:	b3 0b       	sbc	r27, r19
    3a80:	e4 0b       	sbc	r30, r20
    3a82:	f5 0b       	sbc	r31, r21

00003a84 <__udivmodsi4_ep>:
    3a84:	66 1f       	adc	r22, r22
    3a86:	77 1f       	adc	r23, r23
    3a88:	88 1f       	adc	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	1a 94       	dec	r1
    3a8e:	69 f7       	brne	.-38     	; 0x3a6a <__udivmodsi4_loop>
    3a90:	60 95       	com	r22
    3a92:	70 95       	com	r23
    3a94:	80 95       	com	r24
    3a96:	90 95       	com	r25
    3a98:	9b 01       	movw	r18, r22
    3a9a:	ac 01       	movw	r20, r24
    3a9c:	bd 01       	movw	r22, r26
    3a9e:	cf 01       	movw	r24, r30
    3aa0:	08 95       	ret

00003aa2 <__tablejump2__>:
    3aa2:	ee 0f       	add	r30, r30
    3aa4:	ff 1f       	adc	r31, r31
    3aa6:	05 90       	lpm	r0, Z+
    3aa8:	f4 91       	lpm	r31, Z
    3aaa:	e0 2d       	mov	r30, r0
    3aac:	09 94       	ijmp

00003aae <__mulshisi3>:
    3aae:	b7 ff       	sbrs	r27, 7
    3ab0:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__muluhisi3>

00003ab4 <__mulohisi3>:
    3ab4:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__muluhisi3>
    3ab8:	82 1b       	sub	r24, r18
    3aba:	93 0b       	sbc	r25, r19
    3abc:	08 95       	ret

00003abe <__muldi3>:
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	1f 93       	push	r17
    3ac4:	0f 93       	push	r16
    3ac6:	9a 9d       	mul	r25, r10
    3ac8:	f0 2d       	mov	r31, r0
    3aca:	21 9f       	mul	r18, r17
    3acc:	f0 0d       	add	r31, r0
    3ace:	8b 9d       	mul	r24, r11
    3ad0:	f0 0d       	add	r31, r0
    3ad2:	8a 9d       	mul	r24, r10
    3ad4:	e0 2d       	mov	r30, r0
    3ad6:	f1 0d       	add	r31, r1
    3ad8:	03 9f       	mul	r16, r19
    3ada:	f0 0d       	add	r31, r0
    3adc:	02 9f       	mul	r16, r18
    3ade:	e0 0d       	add	r30, r0
    3ae0:	f1 1d       	adc	r31, r1
    3ae2:	4e 9d       	mul	r20, r14
    3ae4:	e0 0d       	add	r30, r0
    3ae6:	f1 1d       	adc	r31, r1
    3ae8:	5e 9d       	mul	r21, r14
    3aea:	f0 0d       	add	r31, r0
    3aec:	4f 9d       	mul	r20, r15
    3aee:	f0 0d       	add	r31, r0
    3af0:	7f 93       	push	r23
    3af2:	6f 93       	push	r22
    3af4:	bf 92       	push	r11
    3af6:	af 92       	push	r10
    3af8:	5f 93       	push	r21
    3afa:	4f 93       	push	r20
    3afc:	d5 01       	movw	r26, r10
    3afe:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__umulhisi3>
    3b02:	8b 01       	movw	r16, r22
    3b04:	ac 01       	movw	r20, r24
    3b06:	d7 01       	movw	r26, r14
    3b08:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__umulhisi3>
    3b0c:	eb 01       	movw	r28, r22
    3b0e:	e8 0f       	add	r30, r24
    3b10:	f9 1f       	adc	r31, r25
    3b12:	d6 01       	movw	r26, r12
    3b14:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__muldi3_6>
    3b18:	2f 91       	pop	r18
    3b1a:	3f 91       	pop	r19
    3b1c:	d6 01       	movw	r26, r12
    3b1e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__umulhisi3>
    3b22:	c6 0f       	add	r28, r22
    3b24:	d7 1f       	adc	r29, r23
    3b26:	e8 1f       	adc	r30, r24
    3b28:	f9 1f       	adc	r31, r25
    3b2a:	af 91       	pop	r26
    3b2c:	bf 91       	pop	r27
    3b2e:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__muldi3_6>
    3b32:	2f 91       	pop	r18
    3b34:	3f 91       	pop	r19
    3b36:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__umulhisi3>
    3b3a:	c6 0f       	add	r28, r22
    3b3c:	d7 1f       	adc	r29, r23
    3b3e:	e8 1f       	adc	r30, r24
    3b40:	f9 1f       	adc	r31, r25
    3b42:	d6 01       	movw	r26, r12
    3b44:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__umulhisi3>
    3b48:	e6 0f       	add	r30, r22
    3b4a:	f7 1f       	adc	r31, r23
    3b4c:	98 01       	movw	r18, r16
    3b4e:	be 01       	movw	r22, r28
    3b50:	cf 01       	movw	r24, r30
    3b52:	11 24       	eor	r1, r1
    3b54:	0f 91       	pop	r16
    3b56:	1f 91       	pop	r17
    3b58:	cf 91       	pop	r28
    3b5a:	df 91       	pop	r29
    3b5c:	08 95       	ret

00003b5e <__muldi3_6>:
    3b5e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__umulhisi3>
    3b62:	46 0f       	add	r20, r22
    3b64:	57 1f       	adc	r21, r23
    3b66:	c8 1f       	adc	r28, r24
    3b68:	d9 1f       	adc	r29, r25
    3b6a:	08 f4       	brcc	.+2      	; 0x3b6e <__muldi3_6+0x10>
    3b6c:	31 96       	adiw	r30, 0x01	; 1
    3b6e:	08 95       	ret

00003b70 <__adddi3>:
    3b70:	2a 0d       	add	r18, r10
    3b72:	3b 1d       	adc	r19, r11
    3b74:	4c 1d       	adc	r20, r12
    3b76:	5d 1d       	adc	r21, r13
    3b78:	6e 1d       	adc	r22, r14
    3b7a:	7f 1d       	adc	r23, r15
    3b7c:	80 1f       	adc	r24, r16
    3b7e:	91 1f       	adc	r25, r17
    3b80:	08 95       	ret

00003b82 <__umulhisi3>:
    3b82:	a2 9f       	mul	r26, r18
    3b84:	b0 01       	movw	r22, r0
    3b86:	b3 9f       	mul	r27, r19
    3b88:	c0 01       	movw	r24, r0
    3b8a:	a3 9f       	mul	r26, r19
    3b8c:	70 0d       	add	r23, r0
    3b8e:	81 1d       	adc	r24, r1
    3b90:	11 24       	eor	r1, r1
    3b92:	91 1d       	adc	r25, r1
    3b94:	b2 9f       	mul	r27, r18
    3b96:	70 0d       	add	r23, r0
    3b98:	81 1d       	adc	r24, r1
    3b9a:	11 24       	eor	r1, r1
    3b9c:	91 1d       	adc	r25, r1
    3b9e:	08 95       	ret

00003ba0 <__muluhisi3>:
    3ba0:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__umulhisi3>
    3ba4:	a5 9f       	mul	r26, r21
    3ba6:	90 0d       	add	r25, r0
    3ba8:	b4 9f       	mul	r27, r20
    3baa:	90 0d       	add	r25, r0
    3bac:	a4 9f       	mul	r26, r20
    3bae:	80 0d       	add	r24, r0
    3bb0:	91 1d       	adc	r25, r1
    3bb2:	11 24       	eor	r1, r1
    3bb4:	08 95       	ret

00003bb6 <__subsf3>:
    3bb6:	50 58       	subi	r21, 0x80	; 128

00003bb8 <__addsf3>:
    3bb8:	bb 27       	eor	r27, r27
    3bba:	aa 27       	eor	r26, r26
    3bbc:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__addsf3x>
    3bc0:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__fp_round>
    3bc4:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <__fp_pscA>
    3bc8:	38 f0       	brcs	.+14     	; 0x3bd8 <__addsf3+0x20>
    3bca:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__fp_pscB>
    3bce:	20 f0       	brcs	.+8      	; 0x3bd8 <__addsf3+0x20>
    3bd0:	39 f4       	brne	.+14     	; 0x3be0 <__addsf3+0x28>
    3bd2:	9f 3f       	cpi	r25, 0xFF	; 255
    3bd4:	19 f4       	brne	.+6      	; 0x3bdc <__addsf3+0x24>
    3bd6:	26 f4       	brtc	.+8      	; 0x3be0 <__addsf3+0x28>
    3bd8:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <__fp_nan>
    3bdc:	0e f4       	brtc	.+2      	; 0x3be0 <__addsf3+0x28>
    3bde:	e0 95       	com	r30
    3be0:	e7 fb       	bst	r30, 7
    3be2:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__fp_inf>

00003be6 <__addsf3x>:
    3be6:	e9 2f       	mov	r30, r25
    3be8:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__fp_split3>
    3bec:	58 f3       	brcs	.-42     	; 0x3bc4 <__addsf3+0xc>
    3bee:	ba 17       	cp	r27, r26
    3bf0:	62 07       	cpc	r22, r18
    3bf2:	73 07       	cpc	r23, r19
    3bf4:	84 07       	cpc	r24, r20
    3bf6:	95 07       	cpc	r25, r21
    3bf8:	20 f0       	brcs	.+8      	; 0x3c02 <__addsf3x+0x1c>
    3bfa:	79 f4       	brne	.+30     	; 0x3c1a <__addsf3x+0x34>
    3bfc:	a6 f5       	brtc	.+104    	; 0x3c66 <__addsf3x+0x80>
    3bfe:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__fp_zero>
    3c02:	0e f4       	brtc	.+2      	; 0x3c06 <__addsf3x+0x20>
    3c04:	e0 95       	com	r30
    3c06:	0b 2e       	mov	r0, r27
    3c08:	ba 2f       	mov	r27, r26
    3c0a:	a0 2d       	mov	r26, r0
    3c0c:	0b 01       	movw	r0, r22
    3c0e:	b9 01       	movw	r22, r18
    3c10:	90 01       	movw	r18, r0
    3c12:	0c 01       	movw	r0, r24
    3c14:	ca 01       	movw	r24, r20
    3c16:	a0 01       	movw	r20, r0
    3c18:	11 24       	eor	r1, r1
    3c1a:	ff 27       	eor	r31, r31
    3c1c:	59 1b       	sub	r21, r25
    3c1e:	99 f0       	breq	.+38     	; 0x3c46 <__addsf3x+0x60>
    3c20:	59 3f       	cpi	r21, 0xF9	; 249
    3c22:	50 f4       	brcc	.+20     	; 0x3c38 <__addsf3x+0x52>
    3c24:	50 3e       	cpi	r21, 0xE0	; 224
    3c26:	68 f1       	brcs	.+90     	; 0x3c82 <__addsf3x+0x9c>
    3c28:	1a 16       	cp	r1, r26
    3c2a:	f0 40       	sbci	r31, 0x00	; 0
    3c2c:	a2 2f       	mov	r26, r18
    3c2e:	23 2f       	mov	r18, r19
    3c30:	34 2f       	mov	r19, r20
    3c32:	44 27       	eor	r20, r20
    3c34:	58 5f       	subi	r21, 0xF8	; 248
    3c36:	f3 cf       	rjmp	.-26     	; 0x3c1e <__addsf3x+0x38>
    3c38:	46 95       	lsr	r20
    3c3a:	37 95       	ror	r19
    3c3c:	27 95       	ror	r18
    3c3e:	a7 95       	ror	r26
    3c40:	f0 40       	sbci	r31, 0x00	; 0
    3c42:	53 95       	inc	r21
    3c44:	c9 f7       	brne	.-14     	; 0x3c38 <__addsf3x+0x52>
    3c46:	7e f4       	brtc	.+30     	; 0x3c66 <__addsf3x+0x80>
    3c48:	1f 16       	cp	r1, r31
    3c4a:	ba 0b       	sbc	r27, r26
    3c4c:	62 0b       	sbc	r22, r18
    3c4e:	73 0b       	sbc	r23, r19
    3c50:	84 0b       	sbc	r24, r20
    3c52:	ba f0       	brmi	.+46     	; 0x3c82 <__addsf3x+0x9c>
    3c54:	91 50       	subi	r25, 0x01	; 1
    3c56:	a1 f0       	breq	.+40     	; 0x3c80 <__addsf3x+0x9a>
    3c58:	ff 0f       	add	r31, r31
    3c5a:	bb 1f       	adc	r27, r27
    3c5c:	66 1f       	adc	r22, r22
    3c5e:	77 1f       	adc	r23, r23
    3c60:	88 1f       	adc	r24, r24
    3c62:	c2 f7       	brpl	.-16     	; 0x3c54 <__addsf3x+0x6e>
    3c64:	0e c0       	rjmp	.+28     	; 0x3c82 <__addsf3x+0x9c>
    3c66:	ba 0f       	add	r27, r26
    3c68:	62 1f       	adc	r22, r18
    3c6a:	73 1f       	adc	r23, r19
    3c6c:	84 1f       	adc	r24, r20
    3c6e:	48 f4       	brcc	.+18     	; 0x3c82 <__addsf3x+0x9c>
    3c70:	87 95       	ror	r24
    3c72:	77 95       	ror	r23
    3c74:	67 95       	ror	r22
    3c76:	b7 95       	ror	r27
    3c78:	f7 95       	ror	r31
    3c7a:	9e 3f       	cpi	r25, 0xFE	; 254
    3c7c:	08 f0       	brcs	.+2      	; 0x3c80 <__addsf3x+0x9a>
    3c7e:	b0 cf       	rjmp	.-160    	; 0x3be0 <__addsf3+0x28>
    3c80:	93 95       	inc	r25
    3c82:	88 0f       	add	r24, r24
    3c84:	08 f0       	brcs	.+2      	; 0x3c88 <__addsf3x+0xa2>
    3c86:	99 27       	eor	r25, r25
    3c88:	ee 0f       	add	r30, r30
    3c8a:	97 95       	ror	r25
    3c8c:	87 95       	ror	r24
    3c8e:	08 95       	ret

00003c90 <__cmpsf2>:
    3c90:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <__fp_cmp>
    3c94:	08 f4       	brcc	.+2      	; 0x3c98 <__cmpsf2+0x8>
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	08 95       	ret

00003c9a <__divsf3>:
    3c9a:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__divsf3x>
    3c9e:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__fp_round>
    3ca2:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__fp_pscB>
    3ca6:	58 f0       	brcs	.+22     	; 0x3cbe <__divsf3+0x24>
    3ca8:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <__fp_pscA>
    3cac:	40 f0       	brcs	.+16     	; 0x3cbe <__divsf3+0x24>
    3cae:	29 f4       	brne	.+10     	; 0x3cba <__divsf3+0x20>
    3cb0:	5f 3f       	cpi	r21, 0xFF	; 255
    3cb2:	29 f0       	breq	.+10     	; 0x3cbe <__divsf3+0x24>
    3cb4:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__fp_inf>
    3cb8:	51 11       	cpse	r21, r1
    3cba:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__fp_szero>
    3cbe:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <__fp_nan>

00003cc2 <__divsf3x>:
    3cc2:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__fp_split3>
    3cc6:	68 f3       	brcs	.-38     	; 0x3ca2 <__divsf3+0x8>

00003cc8 <__divsf3_pse>:
    3cc8:	99 23       	and	r25, r25
    3cca:	b1 f3       	breq	.-20     	; 0x3cb8 <__divsf3+0x1e>
    3ccc:	55 23       	and	r21, r21
    3cce:	91 f3       	breq	.-28     	; 0x3cb4 <__divsf3+0x1a>
    3cd0:	95 1b       	sub	r25, r21
    3cd2:	55 0b       	sbc	r21, r21
    3cd4:	bb 27       	eor	r27, r27
    3cd6:	aa 27       	eor	r26, r26
    3cd8:	62 17       	cp	r22, r18
    3cda:	73 07       	cpc	r23, r19
    3cdc:	84 07       	cpc	r24, r20
    3cde:	38 f0       	brcs	.+14     	; 0x3cee <__divsf3_pse+0x26>
    3ce0:	9f 5f       	subi	r25, 0xFF	; 255
    3ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce4:	22 0f       	add	r18, r18
    3ce6:	33 1f       	adc	r19, r19
    3ce8:	44 1f       	adc	r20, r20
    3cea:	aa 1f       	adc	r26, r26
    3cec:	a9 f3       	breq	.-22     	; 0x3cd8 <__divsf3_pse+0x10>
    3cee:	35 d0       	rcall	.+106    	; 0x3d5a <__divsf3_pse+0x92>
    3cf0:	0e 2e       	mov	r0, r30
    3cf2:	3a f0       	brmi	.+14     	; 0x3d02 <__divsf3_pse+0x3a>
    3cf4:	e0 e8       	ldi	r30, 0x80	; 128
    3cf6:	32 d0       	rcall	.+100    	; 0x3d5c <__divsf3_pse+0x94>
    3cf8:	91 50       	subi	r25, 0x01	; 1
    3cfa:	50 40       	sbci	r21, 0x00	; 0
    3cfc:	e6 95       	lsr	r30
    3cfe:	00 1c       	adc	r0, r0
    3d00:	ca f7       	brpl	.-14     	; 0x3cf4 <__divsf3_pse+0x2c>
    3d02:	2b d0       	rcall	.+86     	; 0x3d5a <__divsf3_pse+0x92>
    3d04:	fe 2f       	mov	r31, r30
    3d06:	29 d0       	rcall	.+82     	; 0x3d5a <__divsf3_pse+0x92>
    3d08:	66 0f       	add	r22, r22
    3d0a:	77 1f       	adc	r23, r23
    3d0c:	88 1f       	adc	r24, r24
    3d0e:	bb 1f       	adc	r27, r27
    3d10:	26 17       	cp	r18, r22
    3d12:	37 07       	cpc	r19, r23
    3d14:	48 07       	cpc	r20, r24
    3d16:	ab 07       	cpc	r26, r27
    3d18:	b0 e8       	ldi	r27, 0x80	; 128
    3d1a:	09 f0       	breq	.+2      	; 0x3d1e <__divsf3_pse+0x56>
    3d1c:	bb 0b       	sbc	r27, r27
    3d1e:	80 2d       	mov	r24, r0
    3d20:	bf 01       	movw	r22, r30
    3d22:	ff 27       	eor	r31, r31
    3d24:	93 58       	subi	r25, 0x83	; 131
    3d26:	5f 4f       	sbci	r21, 0xFF	; 255
    3d28:	3a f0       	brmi	.+14     	; 0x3d38 <__divsf3_pse+0x70>
    3d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    3d2c:	51 05       	cpc	r21, r1
    3d2e:	78 f0       	brcs	.+30     	; 0x3d4e <__divsf3_pse+0x86>
    3d30:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__fp_inf>
    3d34:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__fp_szero>
    3d38:	5f 3f       	cpi	r21, 0xFF	; 255
    3d3a:	e4 f3       	brlt	.-8      	; 0x3d34 <__divsf3_pse+0x6c>
    3d3c:	98 3e       	cpi	r25, 0xE8	; 232
    3d3e:	d4 f3       	brlt	.-12     	; 0x3d34 <__divsf3_pse+0x6c>
    3d40:	86 95       	lsr	r24
    3d42:	77 95       	ror	r23
    3d44:	67 95       	ror	r22
    3d46:	b7 95       	ror	r27
    3d48:	f7 95       	ror	r31
    3d4a:	9f 5f       	subi	r25, 0xFF	; 255
    3d4c:	c9 f7       	brne	.-14     	; 0x3d40 <__divsf3_pse+0x78>
    3d4e:	88 0f       	add	r24, r24
    3d50:	91 1d       	adc	r25, r1
    3d52:	96 95       	lsr	r25
    3d54:	87 95       	ror	r24
    3d56:	97 f9       	bld	r25, 7
    3d58:	08 95       	ret
    3d5a:	e1 e0       	ldi	r30, 0x01	; 1
    3d5c:	66 0f       	add	r22, r22
    3d5e:	77 1f       	adc	r23, r23
    3d60:	88 1f       	adc	r24, r24
    3d62:	bb 1f       	adc	r27, r27
    3d64:	62 17       	cp	r22, r18
    3d66:	73 07       	cpc	r23, r19
    3d68:	84 07       	cpc	r24, r20
    3d6a:	ba 07       	cpc	r27, r26
    3d6c:	20 f0       	brcs	.+8      	; 0x3d76 <__divsf3_pse+0xae>
    3d6e:	62 1b       	sub	r22, r18
    3d70:	73 0b       	sbc	r23, r19
    3d72:	84 0b       	sbc	r24, r20
    3d74:	ba 0b       	sbc	r27, r26
    3d76:	ee 1f       	adc	r30, r30
    3d78:	88 f7       	brcc	.-30     	; 0x3d5c <__divsf3_pse+0x94>
    3d7a:	e0 95       	com	r30
    3d7c:	08 95       	ret

00003d7e <__fixsfsi>:
    3d7e:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fixunssfsi>
    3d82:	68 94       	set
    3d84:	b1 11       	cpse	r27, r1
    3d86:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__fp_szero>
    3d8a:	08 95       	ret

00003d8c <__fixunssfsi>:
    3d8c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__fp_splitA>
    3d90:	88 f0       	brcs	.+34     	; 0x3db4 <__fixunssfsi+0x28>
    3d92:	9f 57       	subi	r25, 0x7F	; 127
    3d94:	98 f0       	brcs	.+38     	; 0x3dbc <__fixunssfsi+0x30>
    3d96:	b9 2f       	mov	r27, r25
    3d98:	99 27       	eor	r25, r25
    3d9a:	b7 51       	subi	r27, 0x17	; 23
    3d9c:	b0 f0       	brcs	.+44     	; 0x3dca <__fixunssfsi+0x3e>
    3d9e:	e1 f0       	breq	.+56     	; 0x3dd8 <__fixunssfsi+0x4c>
    3da0:	66 0f       	add	r22, r22
    3da2:	77 1f       	adc	r23, r23
    3da4:	88 1f       	adc	r24, r24
    3da6:	99 1f       	adc	r25, r25
    3da8:	1a f0       	brmi	.+6      	; 0x3db0 <__fixunssfsi+0x24>
    3daa:	ba 95       	dec	r27
    3dac:	c9 f7       	brne	.-14     	; 0x3da0 <__fixunssfsi+0x14>
    3dae:	14 c0       	rjmp	.+40     	; 0x3dd8 <__fixunssfsi+0x4c>
    3db0:	b1 30       	cpi	r27, 0x01	; 1
    3db2:	91 f0       	breq	.+36     	; 0x3dd8 <__fixunssfsi+0x4c>
    3db4:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <__fp_zero>
    3db8:	b1 e0       	ldi	r27, 0x01	; 1
    3dba:	08 95       	ret
    3dbc:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__fp_zero>
    3dc0:	67 2f       	mov	r22, r23
    3dc2:	78 2f       	mov	r23, r24
    3dc4:	88 27       	eor	r24, r24
    3dc6:	b8 5f       	subi	r27, 0xF8	; 248
    3dc8:	39 f0       	breq	.+14     	; 0x3dd8 <__fixunssfsi+0x4c>
    3dca:	b9 3f       	cpi	r27, 0xF9	; 249
    3dcc:	cc f3       	brlt	.-14     	; 0x3dc0 <__fixunssfsi+0x34>
    3dce:	86 95       	lsr	r24
    3dd0:	77 95       	ror	r23
    3dd2:	67 95       	ror	r22
    3dd4:	b3 95       	inc	r27
    3dd6:	d9 f7       	brne	.-10     	; 0x3dce <__fixunssfsi+0x42>
    3dd8:	3e f4       	brtc	.+14     	; 0x3de8 <__fixunssfsi+0x5c>
    3dda:	90 95       	com	r25
    3ddc:	80 95       	com	r24
    3dde:	70 95       	com	r23
    3de0:	61 95       	neg	r22
    3de2:	7f 4f       	sbci	r23, 0xFF	; 255
    3de4:	8f 4f       	sbci	r24, 0xFF	; 255
    3de6:	9f 4f       	sbci	r25, 0xFF	; 255
    3de8:	08 95       	ret

00003dea <__floatunsisf>:
    3dea:	e8 94       	clt
    3dec:	09 c0       	rjmp	.+18     	; 0x3e00 <__floatsisf+0x12>

00003dee <__floatsisf>:
    3dee:	97 fb       	bst	r25, 7
    3df0:	3e f4       	brtc	.+14     	; 0x3e00 <__floatsisf+0x12>
    3df2:	90 95       	com	r25
    3df4:	80 95       	com	r24
    3df6:	70 95       	com	r23
    3df8:	61 95       	neg	r22
    3dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfc:	8f 4f       	sbci	r24, 0xFF	; 255
    3dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3e00:	99 23       	and	r25, r25
    3e02:	a9 f0       	breq	.+42     	; 0x3e2e <__floatsisf+0x40>
    3e04:	f9 2f       	mov	r31, r25
    3e06:	96 e9       	ldi	r25, 0x96	; 150
    3e08:	bb 27       	eor	r27, r27
    3e0a:	93 95       	inc	r25
    3e0c:	f6 95       	lsr	r31
    3e0e:	87 95       	ror	r24
    3e10:	77 95       	ror	r23
    3e12:	67 95       	ror	r22
    3e14:	b7 95       	ror	r27
    3e16:	f1 11       	cpse	r31, r1
    3e18:	f8 cf       	rjmp	.-16     	; 0x3e0a <__floatsisf+0x1c>
    3e1a:	fa f4       	brpl	.+62     	; 0x3e5a <__floatsisf+0x6c>
    3e1c:	bb 0f       	add	r27, r27
    3e1e:	11 f4       	brne	.+4      	; 0x3e24 <__floatsisf+0x36>
    3e20:	60 ff       	sbrs	r22, 0
    3e22:	1b c0       	rjmp	.+54     	; 0x3e5a <__floatsisf+0x6c>
    3e24:	6f 5f       	subi	r22, 0xFF	; 255
    3e26:	7f 4f       	sbci	r23, 0xFF	; 255
    3e28:	8f 4f       	sbci	r24, 0xFF	; 255
    3e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2c:	16 c0       	rjmp	.+44     	; 0x3e5a <__floatsisf+0x6c>
    3e2e:	88 23       	and	r24, r24
    3e30:	11 f0       	breq	.+4      	; 0x3e36 <__floatsisf+0x48>
    3e32:	96 e9       	ldi	r25, 0x96	; 150
    3e34:	11 c0       	rjmp	.+34     	; 0x3e58 <__floatsisf+0x6a>
    3e36:	77 23       	and	r23, r23
    3e38:	21 f0       	breq	.+8      	; 0x3e42 <__floatsisf+0x54>
    3e3a:	9e e8       	ldi	r25, 0x8E	; 142
    3e3c:	87 2f       	mov	r24, r23
    3e3e:	76 2f       	mov	r23, r22
    3e40:	05 c0       	rjmp	.+10     	; 0x3e4c <__floatsisf+0x5e>
    3e42:	66 23       	and	r22, r22
    3e44:	71 f0       	breq	.+28     	; 0x3e62 <__floatsisf+0x74>
    3e46:	96 e8       	ldi	r25, 0x86	; 134
    3e48:	86 2f       	mov	r24, r22
    3e4a:	70 e0       	ldi	r23, 0x00	; 0
    3e4c:	60 e0       	ldi	r22, 0x00	; 0
    3e4e:	2a f0       	brmi	.+10     	; 0x3e5a <__floatsisf+0x6c>
    3e50:	9a 95       	dec	r25
    3e52:	66 0f       	add	r22, r22
    3e54:	77 1f       	adc	r23, r23
    3e56:	88 1f       	adc	r24, r24
    3e58:	da f7       	brpl	.-10     	; 0x3e50 <__floatsisf+0x62>
    3e5a:	88 0f       	add	r24, r24
    3e5c:	96 95       	lsr	r25
    3e5e:	87 95       	ror	r24
    3e60:	97 f9       	bld	r25, 7
    3e62:	08 95       	ret

00003e64 <__fp_cmp>:
    3e64:	99 0f       	add	r25, r25
    3e66:	00 08       	sbc	r0, r0
    3e68:	55 0f       	add	r21, r21
    3e6a:	aa 0b       	sbc	r26, r26
    3e6c:	e0 e8       	ldi	r30, 0x80	; 128
    3e6e:	fe ef       	ldi	r31, 0xFE	; 254
    3e70:	16 16       	cp	r1, r22
    3e72:	17 06       	cpc	r1, r23
    3e74:	e8 07       	cpc	r30, r24
    3e76:	f9 07       	cpc	r31, r25
    3e78:	c0 f0       	brcs	.+48     	; 0x3eaa <__fp_cmp+0x46>
    3e7a:	12 16       	cp	r1, r18
    3e7c:	13 06       	cpc	r1, r19
    3e7e:	e4 07       	cpc	r30, r20
    3e80:	f5 07       	cpc	r31, r21
    3e82:	98 f0       	brcs	.+38     	; 0x3eaa <__fp_cmp+0x46>
    3e84:	62 1b       	sub	r22, r18
    3e86:	73 0b       	sbc	r23, r19
    3e88:	84 0b       	sbc	r24, r20
    3e8a:	95 0b       	sbc	r25, r21
    3e8c:	39 f4       	brne	.+14     	; 0x3e9c <__fp_cmp+0x38>
    3e8e:	0a 26       	eor	r0, r26
    3e90:	61 f0       	breq	.+24     	; 0x3eaa <__fp_cmp+0x46>
    3e92:	23 2b       	or	r18, r19
    3e94:	24 2b       	or	r18, r20
    3e96:	25 2b       	or	r18, r21
    3e98:	21 f4       	brne	.+8      	; 0x3ea2 <__fp_cmp+0x3e>
    3e9a:	08 95       	ret
    3e9c:	0a 26       	eor	r0, r26
    3e9e:	09 f4       	brne	.+2      	; 0x3ea2 <__fp_cmp+0x3e>
    3ea0:	a1 40       	sbci	r26, 0x01	; 1
    3ea2:	a6 95       	lsr	r26
    3ea4:	8f ef       	ldi	r24, 0xFF	; 255
    3ea6:	81 1d       	adc	r24, r1
    3ea8:	81 1d       	adc	r24, r1
    3eaa:	08 95       	ret

00003eac <__fp_inf>:
    3eac:	97 f9       	bld	r25, 7
    3eae:	9f 67       	ori	r25, 0x7F	; 127
    3eb0:	80 e8       	ldi	r24, 0x80	; 128
    3eb2:	70 e0       	ldi	r23, 0x00	; 0
    3eb4:	60 e0       	ldi	r22, 0x00	; 0
    3eb6:	08 95       	ret

00003eb8 <__fp_nan>:
    3eb8:	9f ef       	ldi	r25, 0xFF	; 255
    3eba:	80 ec       	ldi	r24, 0xC0	; 192
    3ebc:	08 95       	ret

00003ebe <__fp_pscA>:
    3ebe:	00 24       	eor	r0, r0
    3ec0:	0a 94       	dec	r0
    3ec2:	16 16       	cp	r1, r22
    3ec4:	17 06       	cpc	r1, r23
    3ec6:	18 06       	cpc	r1, r24
    3ec8:	09 06       	cpc	r0, r25
    3eca:	08 95       	ret

00003ecc <__fp_pscB>:
    3ecc:	00 24       	eor	r0, r0
    3ece:	0a 94       	dec	r0
    3ed0:	12 16       	cp	r1, r18
    3ed2:	13 06       	cpc	r1, r19
    3ed4:	14 06       	cpc	r1, r20
    3ed6:	05 06       	cpc	r0, r21
    3ed8:	08 95       	ret

00003eda <__fp_round>:
    3eda:	09 2e       	mov	r0, r25
    3edc:	03 94       	inc	r0
    3ede:	00 0c       	add	r0, r0
    3ee0:	11 f4       	brne	.+4      	; 0x3ee6 <__fp_round+0xc>
    3ee2:	88 23       	and	r24, r24
    3ee4:	52 f0       	brmi	.+20     	; 0x3efa <__fp_round+0x20>
    3ee6:	bb 0f       	add	r27, r27
    3ee8:	40 f4       	brcc	.+16     	; 0x3efa <__fp_round+0x20>
    3eea:	bf 2b       	or	r27, r31
    3eec:	11 f4       	brne	.+4      	; 0x3ef2 <__fp_round+0x18>
    3eee:	60 ff       	sbrs	r22, 0
    3ef0:	04 c0       	rjmp	.+8      	; 0x3efa <__fp_round+0x20>
    3ef2:	6f 5f       	subi	r22, 0xFF	; 255
    3ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    3efa:	08 95       	ret

00003efc <__fp_split3>:
    3efc:	57 fd       	sbrc	r21, 7
    3efe:	90 58       	subi	r25, 0x80	; 128
    3f00:	44 0f       	add	r20, r20
    3f02:	55 1f       	adc	r21, r21
    3f04:	59 f0       	breq	.+22     	; 0x3f1c <__fp_splitA+0x10>
    3f06:	5f 3f       	cpi	r21, 0xFF	; 255
    3f08:	71 f0       	breq	.+28     	; 0x3f26 <__fp_splitA+0x1a>
    3f0a:	47 95       	ror	r20

00003f0c <__fp_splitA>:
    3f0c:	88 0f       	add	r24, r24
    3f0e:	97 fb       	bst	r25, 7
    3f10:	99 1f       	adc	r25, r25
    3f12:	61 f0       	breq	.+24     	; 0x3f2c <__fp_splitA+0x20>
    3f14:	9f 3f       	cpi	r25, 0xFF	; 255
    3f16:	79 f0       	breq	.+30     	; 0x3f36 <__fp_splitA+0x2a>
    3f18:	87 95       	ror	r24
    3f1a:	08 95       	ret
    3f1c:	12 16       	cp	r1, r18
    3f1e:	13 06       	cpc	r1, r19
    3f20:	14 06       	cpc	r1, r20
    3f22:	55 1f       	adc	r21, r21
    3f24:	f2 cf       	rjmp	.-28     	; 0x3f0a <__fp_split3+0xe>
    3f26:	46 95       	lsr	r20
    3f28:	f1 df       	rcall	.-30     	; 0x3f0c <__fp_splitA>
    3f2a:	08 c0       	rjmp	.+16     	; 0x3f3c <__fp_splitA+0x30>
    3f2c:	16 16       	cp	r1, r22
    3f2e:	17 06       	cpc	r1, r23
    3f30:	18 06       	cpc	r1, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	f1 cf       	rjmp	.-30     	; 0x3f18 <__fp_splitA+0xc>
    3f36:	86 95       	lsr	r24
    3f38:	71 05       	cpc	r23, r1
    3f3a:	61 05       	cpc	r22, r1
    3f3c:	08 94       	sec
    3f3e:	08 95       	ret

00003f40 <__fp_zero>:
    3f40:	e8 94       	clt

00003f42 <__fp_szero>:
    3f42:	bb 27       	eor	r27, r27
    3f44:	66 27       	eor	r22, r22
    3f46:	77 27       	eor	r23, r23
    3f48:	cb 01       	movw	r24, r22
    3f4a:	97 f9       	bld	r25, 7
    3f4c:	08 95       	ret

00003f4e <__mulsf3>:
    3f4e:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <__mulsf3x>
    3f52:	0c 94 6d 1f 	jmp	0x3eda	; 0x3eda <__fp_round>
    3f56:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <__fp_pscA>
    3f5a:	38 f0       	brcs	.+14     	; 0x3f6a <__mulsf3+0x1c>
    3f5c:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__fp_pscB>
    3f60:	20 f0       	brcs	.+8      	; 0x3f6a <__mulsf3+0x1c>
    3f62:	95 23       	and	r25, r21
    3f64:	11 f0       	breq	.+4      	; 0x3f6a <__mulsf3+0x1c>
    3f66:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__fp_inf>
    3f6a:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <__fp_nan>
    3f6e:	11 24       	eor	r1, r1
    3f70:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__fp_szero>

00003f74 <__mulsf3x>:
    3f74:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__fp_split3>
    3f78:	70 f3       	brcs	.-36     	; 0x3f56 <__mulsf3+0x8>

00003f7a <__mulsf3_pse>:
    3f7a:	95 9f       	mul	r25, r21
    3f7c:	c1 f3       	breq	.-16     	; 0x3f6e <__mulsf3+0x20>
    3f7e:	95 0f       	add	r25, r21
    3f80:	50 e0       	ldi	r21, 0x00	; 0
    3f82:	55 1f       	adc	r21, r21
    3f84:	62 9f       	mul	r22, r18
    3f86:	f0 01       	movw	r30, r0
    3f88:	72 9f       	mul	r23, r18
    3f8a:	bb 27       	eor	r27, r27
    3f8c:	f0 0d       	add	r31, r0
    3f8e:	b1 1d       	adc	r27, r1
    3f90:	63 9f       	mul	r22, r19
    3f92:	aa 27       	eor	r26, r26
    3f94:	f0 0d       	add	r31, r0
    3f96:	b1 1d       	adc	r27, r1
    3f98:	aa 1f       	adc	r26, r26
    3f9a:	64 9f       	mul	r22, r20
    3f9c:	66 27       	eor	r22, r22
    3f9e:	b0 0d       	add	r27, r0
    3fa0:	a1 1d       	adc	r26, r1
    3fa2:	66 1f       	adc	r22, r22
    3fa4:	82 9f       	mul	r24, r18
    3fa6:	22 27       	eor	r18, r18
    3fa8:	b0 0d       	add	r27, r0
    3faa:	a1 1d       	adc	r26, r1
    3fac:	62 1f       	adc	r22, r18
    3fae:	73 9f       	mul	r23, r19
    3fb0:	b0 0d       	add	r27, r0
    3fb2:	a1 1d       	adc	r26, r1
    3fb4:	62 1f       	adc	r22, r18
    3fb6:	83 9f       	mul	r24, r19
    3fb8:	a0 0d       	add	r26, r0
    3fba:	61 1d       	adc	r22, r1
    3fbc:	22 1f       	adc	r18, r18
    3fbe:	74 9f       	mul	r23, r20
    3fc0:	33 27       	eor	r19, r19
    3fc2:	a0 0d       	add	r26, r0
    3fc4:	61 1d       	adc	r22, r1
    3fc6:	23 1f       	adc	r18, r19
    3fc8:	84 9f       	mul	r24, r20
    3fca:	60 0d       	add	r22, r0
    3fcc:	21 1d       	adc	r18, r1
    3fce:	82 2f       	mov	r24, r18
    3fd0:	76 2f       	mov	r23, r22
    3fd2:	6a 2f       	mov	r22, r26
    3fd4:	11 24       	eor	r1, r1
    3fd6:	9f 57       	subi	r25, 0x7F	; 127
    3fd8:	50 40       	sbci	r21, 0x00	; 0
    3fda:	9a f0       	brmi	.+38     	; 0x4002 <__mulsf3_pse+0x88>
    3fdc:	f1 f0       	breq	.+60     	; 0x401a <__mulsf3_pse+0xa0>
    3fde:	88 23       	and	r24, r24
    3fe0:	4a f0       	brmi	.+18     	; 0x3ff4 <__mulsf3_pse+0x7a>
    3fe2:	ee 0f       	add	r30, r30
    3fe4:	ff 1f       	adc	r31, r31
    3fe6:	bb 1f       	adc	r27, r27
    3fe8:	66 1f       	adc	r22, r22
    3fea:	77 1f       	adc	r23, r23
    3fec:	88 1f       	adc	r24, r24
    3fee:	91 50       	subi	r25, 0x01	; 1
    3ff0:	50 40       	sbci	r21, 0x00	; 0
    3ff2:	a9 f7       	brne	.-22     	; 0x3fde <__mulsf3_pse+0x64>
    3ff4:	9e 3f       	cpi	r25, 0xFE	; 254
    3ff6:	51 05       	cpc	r21, r1
    3ff8:	80 f0       	brcs	.+32     	; 0x401a <__mulsf3_pse+0xa0>
    3ffa:	0c 94 56 1f 	jmp	0x3eac	; 0x3eac <__fp_inf>
    3ffe:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__fp_szero>
    4002:	5f 3f       	cpi	r21, 0xFF	; 255
    4004:	e4 f3       	brlt	.-8      	; 0x3ffe <__mulsf3_pse+0x84>
    4006:	98 3e       	cpi	r25, 0xE8	; 232
    4008:	d4 f3       	brlt	.-12     	; 0x3ffe <__mulsf3_pse+0x84>
    400a:	86 95       	lsr	r24
    400c:	77 95       	ror	r23
    400e:	67 95       	ror	r22
    4010:	b7 95       	ror	r27
    4012:	f7 95       	ror	r31
    4014:	e7 95       	ror	r30
    4016:	9f 5f       	subi	r25, 0xFF	; 255
    4018:	c1 f7       	brne	.-16     	; 0x400a <__mulsf3_pse+0x90>
    401a:	fe 2b       	or	r31, r30
    401c:	88 0f       	add	r24, r24
    401e:	91 1d       	adc	r25, r1
    4020:	96 95       	lsr	r25
    4022:	87 95       	ror	r24
    4024:	97 f9       	bld	r25, 7
    4026:	08 95       	ret

00004028 <sprintf>:
    4028:	ae e0       	ldi	r26, 0x0E	; 14
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	ea e1       	ldi	r30, 0x1A	; 26
    402e:	f0 e2       	ldi	r31, 0x20	; 32
    4030:	0c 94 d5 22 	jmp	0x45aa	; 0x45aa <__prologue_saves__+0x1c>
    4034:	0d 89       	ldd	r16, Y+21	; 0x15
    4036:	1e 89       	ldd	r17, Y+22	; 0x16
    4038:	86 e0       	ldi	r24, 0x06	; 6
    403a:	8c 83       	std	Y+4, r24	; 0x04
    403c:	1a 83       	std	Y+2, r17	; 0x02
    403e:	09 83       	std	Y+1, r16	; 0x01
    4040:	8f ef       	ldi	r24, 0xFF	; 255
    4042:	9f e7       	ldi	r25, 0x7F	; 127
    4044:	9e 83       	std	Y+6, r25	; 0x06
    4046:	8d 83       	std	Y+5, r24	; 0x05
    4048:	ae 01       	movw	r20, r28
    404a:	47 5e       	subi	r20, 0xE7	; 231
    404c:	5f 4f       	sbci	r21, 0xFF	; 255
    404e:	6f 89       	ldd	r22, Y+23	; 0x17
    4050:	78 8d       	ldd	r23, Y+24	; 0x18
    4052:	ce 01       	movw	r24, r28
    4054:	01 96       	adiw	r24, 0x01	; 1
    4056:	0e 94 36 20 	call	0x406c	; 0x406c <vfprintf>
    405a:	ef 81       	ldd	r30, Y+7	; 0x07
    405c:	f8 85       	ldd	r31, Y+8	; 0x08
    405e:	e0 0f       	add	r30, r16
    4060:	f1 1f       	adc	r31, r17
    4062:	10 82       	st	Z, r1
    4064:	2e 96       	adiw	r28, 0x0e	; 14
    4066:	e4 e0       	ldi	r30, 0x04	; 4
    4068:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <__epilogue_restores__+0x1c>

0000406c <vfprintf>:
    406c:	ab e0       	ldi	r26, 0x0B	; 11
    406e:	b0 e0       	ldi	r27, 0x00	; 0
    4070:	ec e3       	ldi	r30, 0x3C	; 60
    4072:	f0 e2       	ldi	r31, 0x20	; 32
    4074:	0c 94 c7 22 	jmp	0x458e	; 0x458e <__prologue_saves__>
    4078:	6c 01       	movw	r12, r24
    407a:	7b 01       	movw	r14, r22
    407c:	8a 01       	movw	r16, r20
    407e:	fc 01       	movw	r30, r24
    4080:	17 82       	std	Z+7, r1	; 0x07
    4082:	16 82       	std	Z+6, r1	; 0x06
    4084:	83 81       	ldd	r24, Z+3	; 0x03
    4086:	81 ff       	sbrs	r24, 1
    4088:	cc c1       	rjmp	.+920    	; 0x4422 <vfprintf+0x3b6>
    408a:	ce 01       	movw	r24, r28
    408c:	01 96       	adiw	r24, 0x01	; 1
    408e:	3c 01       	movw	r6, r24
    4090:	f6 01       	movw	r30, r12
    4092:	93 81       	ldd	r25, Z+3	; 0x03
    4094:	f7 01       	movw	r30, r14
    4096:	93 fd       	sbrc	r25, 3
    4098:	85 91       	lpm	r24, Z+
    409a:	93 ff       	sbrs	r25, 3
    409c:	81 91       	ld	r24, Z+
    409e:	7f 01       	movw	r14, r30
    40a0:	88 23       	and	r24, r24
    40a2:	09 f4       	brne	.+2      	; 0x40a6 <vfprintf+0x3a>
    40a4:	ba c1       	rjmp	.+884    	; 0x441a <vfprintf+0x3ae>
    40a6:	85 32       	cpi	r24, 0x25	; 37
    40a8:	39 f4       	brne	.+14     	; 0x40b8 <vfprintf+0x4c>
    40aa:	93 fd       	sbrc	r25, 3
    40ac:	85 91       	lpm	r24, Z+
    40ae:	93 ff       	sbrs	r25, 3
    40b0:	81 91       	ld	r24, Z+
    40b2:	7f 01       	movw	r14, r30
    40b4:	85 32       	cpi	r24, 0x25	; 37
    40b6:	29 f4       	brne	.+10     	; 0x40c2 <vfprintf+0x56>
    40b8:	b6 01       	movw	r22, r12
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	0e 94 2d 22 	call	0x445a	; 0x445a <fputc>
    40c0:	e7 cf       	rjmp	.-50     	; 0x4090 <vfprintf+0x24>
    40c2:	91 2c       	mov	r9, r1
    40c4:	21 2c       	mov	r2, r1
    40c6:	31 2c       	mov	r3, r1
    40c8:	ff e1       	ldi	r31, 0x1F	; 31
    40ca:	f3 15       	cp	r31, r3
    40cc:	d8 f0       	brcs	.+54     	; 0x4104 <vfprintf+0x98>
    40ce:	8b 32       	cpi	r24, 0x2B	; 43
    40d0:	79 f0       	breq	.+30     	; 0x40f0 <vfprintf+0x84>
    40d2:	38 f4       	brcc	.+14     	; 0x40e2 <vfprintf+0x76>
    40d4:	80 32       	cpi	r24, 0x20	; 32
    40d6:	79 f0       	breq	.+30     	; 0x40f6 <vfprintf+0x8a>
    40d8:	83 32       	cpi	r24, 0x23	; 35
    40da:	a1 f4       	brne	.+40     	; 0x4104 <vfprintf+0x98>
    40dc:	23 2d       	mov	r18, r3
    40de:	20 61       	ori	r18, 0x10	; 16
    40e0:	1d c0       	rjmp	.+58     	; 0x411c <vfprintf+0xb0>
    40e2:	8d 32       	cpi	r24, 0x2D	; 45
    40e4:	61 f0       	breq	.+24     	; 0x40fe <vfprintf+0x92>
    40e6:	80 33       	cpi	r24, 0x30	; 48
    40e8:	69 f4       	brne	.+26     	; 0x4104 <vfprintf+0x98>
    40ea:	23 2d       	mov	r18, r3
    40ec:	21 60       	ori	r18, 0x01	; 1
    40ee:	16 c0       	rjmp	.+44     	; 0x411c <vfprintf+0xb0>
    40f0:	83 2d       	mov	r24, r3
    40f2:	82 60       	ori	r24, 0x02	; 2
    40f4:	38 2e       	mov	r3, r24
    40f6:	e3 2d       	mov	r30, r3
    40f8:	e4 60       	ori	r30, 0x04	; 4
    40fa:	3e 2e       	mov	r3, r30
    40fc:	2a c0       	rjmp	.+84     	; 0x4152 <vfprintf+0xe6>
    40fe:	f3 2d       	mov	r31, r3
    4100:	f8 60       	ori	r31, 0x08	; 8
    4102:	1d c0       	rjmp	.+58     	; 0x413e <vfprintf+0xd2>
    4104:	37 fc       	sbrc	r3, 7
    4106:	2d c0       	rjmp	.+90     	; 0x4162 <vfprintf+0xf6>
    4108:	20 ed       	ldi	r18, 0xD0	; 208
    410a:	28 0f       	add	r18, r24
    410c:	2a 30       	cpi	r18, 0x0A	; 10
    410e:	40 f0       	brcs	.+16     	; 0x4120 <vfprintf+0xb4>
    4110:	8e 32       	cpi	r24, 0x2E	; 46
    4112:	b9 f4       	brne	.+46     	; 0x4142 <vfprintf+0xd6>
    4114:	36 fc       	sbrc	r3, 6
    4116:	81 c1       	rjmp	.+770    	; 0x441a <vfprintf+0x3ae>
    4118:	23 2d       	mov	r18, r3
    411a:	20 64       	ori	r18, 0x40	; 64
    411c:	32 2e       	mov	r3, r18
    411e:	19 c0       	rjmp	.+50     	; 0x4152 <vfprintf+0xe6>
    4120:	36 fe       	sbrs	r3, 6
    4122:	06 c0       	rjmp	.+12     	; 0x4130 <vfprintf+0xc4>
    4124:	8a e0       	ldi	r24, 0x0A	; 10
    4126:	98 9e       	mul	r9, r24
    4128:	20 0d       	add	r18, r0
    412a:	11 24       	eor	r1, r1
    412c:	92 2e       	mov	r9, r18
    412e:	11 c0       	rjmp	.+34     	; 0x4152 <vfprintf+0xe6>
    4130:	ea e0       	ldi	r30, 0x0A	; 10
    4132:	2e 9e       	mul	r2, r30
    4134:	20 0d       	add	r18, r0
    4136:	11 24       	eor	r1, r1
    4138:	22 2e       	mov	r2, r18
    413a:	f3 2d       	mov	r31, r3
    413c:	f0 62       	ori	r31, 0x20	; 32
    413e:	3f 2e       	mov	r3, r31
    4140:	08 c0       	rjmp	.+16     	; 0x4152 <vfprintf+0xe6>
    4142:	8c 36       	cpi	r24, 0x6C	; 108
    4144:	21 f4       	brne	.+8      	; 0x414e <vfprintf+0xe2>
    4146:	83 2d       	mov	r24, r3
    4148:	80 68       	ori	r24, 0x80	; 128
    414a:	38 2e       	mov	r3, r24
    414c:	02 c0       	rjmp	.+4      	; 0x4152 <vfprintf+0xe6>
    414e:	88 36       	cpi	r24, 0x68	; 104
    4150:	41 f4       	brne	.+16     	; 0x4162 <vfprintf+0xf6>
    4152:	f7 01       	movw	r30, r14
    4154:	93 fd       	sbrc	r25, 3
    4156:	85 91       	lpm	r24, Z+
    4158:	93 ff       	sbrs	r25, 3
    415a:	81 91       	ld	r24, Z+
    415c:	7f 01       	movw	r14, r30
    415e:	81 11       	cpse	r24, r1
    4160:	b3 cf       	rjmp	.-154    	; 0x40c8 <vfprintf+0x5c>
    4162:	98 2f       	mov	r25, r24
    4164:	9f 7d       	andi	r25, 0xDF	; 223
    4166:	95 54       	subi	r25, 0x45	; 69
    4168:	93 30       	cpi	r25, 0x03	; 3
    416a:	28 f4       	brcc	.+10     	; 0x4176 <vfprintf+0x10a>
    416c:	0c 5f       	subi	r16, 0xFC	; 252
    416e:	1f 4f       	sbci	r17, 0xFF	; 255
    4170:	9f e3       	ldi	r25, 0x3F	; 63
    4172:	99 83       	std	Y+1, r25	; 0x01
    4174:	0d c0       	rjmp	.+26     	; 0x4190 <vfprintf+0x124>
    4176:	83 36       	cpi	r24, 0x63	; 99
    4178:	31 f0       	breq	.+12     	; 0x4186 <vfprintf+0x11a>
    417a:	83 37       	cpi	r24, 0x73	; 115
    417c:	71 f0       	breq	.+28     	; 0x419a <vfprintf+0x12e>
    417e:	83 35       	cpi	r24, 0x53	; 83
    4180:	09 f0       	breq	.+2      	; 0x4184 <vfprintf+0x118>
    4182:	59 c0       	rjmp	.+178    	; 0x4236 <vfprintf+0x1ca>
    4184:	21 c0       	rjmp	.+66     	; 0x41c8 <vfprintf+0x15c>
    4186:	f8 01       	movw	r30, r16
    4188:	80 81       	ld	r24, Z
    418a:	89 83       	std	Y+1, r24	; 0x01
    418c:	0e 5f       	subi	r16, 0xFE	; 254
    418e:	1f 4f       	sbci	r17, 0xFF	; 255
    4190:	88 24       	eor	r8, r8
    4192:	83 94       	inc	r8
    4194:	91 2c       	mov	r9, r1
    4196:	53 01       	movw	r10, r6
    4198:	13 c0       	rjmp	.+38     	; 0x41c0 <vfprintf+0x154>
    419a:	28 01       	movw	r4, r16
    419c:	f2 e0       	ldi	r31, 0x02	; 2
    419e:	4f 0e       	add	r4, r31
    41a0:	51 1c       	adc	r5, r1
    41a2:	f8 01       	movw	r30, r16
    41a4:	a0 80       	ld	r10, Z
    41a6:	b1 80       	ldd	r11, Z+1	; 0x01
    41a8:	36 fe       	sbrs	r3, 6
    41aa:	03 c0       	rjmp	.+6      	; 0x41b2 <vfprintf+0x146>
    41ac:	69 2d       	mov	r22, r9
    41ae:	70 e0       	ldi	r23, 0x00	; 0
    41b0:	02 c0       	rjmp	.+4      	; 0x41b6 <vfprintf+0x14a>
    41b2:	6f ef       	ldi	r22, 0xFF	; 255
    41b4:	7f ef       	ldi	r23, 0xFF	; 255
    41b6:	c5 01       	movw	r24, r10
    41b8:	0e 94 22 22 	call	0x4444	; 0x4444 <strnlen>
    41bc:	4c 01       	movw	r8, r24
    41be:	82 01       	movw	r16, r4
    41c0:	f3 2d       	mov	r31, r3
    41c2:	ff 77       	andi	r31, 0x7F	; 127
    41c4:	3f 2e       	mov	r3, r31
    41c6:	16 c0       	rjmp	.+44     	; 0x41f4 <vfprintf+0x188>
    41c8:	28 01       	movw	r4, r16
    41ca:	22 e0       	ldi	r18, 0x02	; 2
    41cc:	42 0e       	add	r4, r18
    41ce:	51 1c       	adc	r5, r1
    41d0:	f8 01       	movw	r30, r16
    41d2:	a0 80       	ld	r10, Z
    41d4:	b1 80       	ldd	r11, Z+1	; 0x01
    41d6:	36 fe       	sbrs	r3, 6
    41d8:	03 c0       	rjmp	.+6      	; 0x41e0 <vfprintf+0x174>
    41da:	69 2d       	mov	r22, r9
    41dc:	70 e0       	ldi	r23, 0x00	; 0
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <vfprintf+0x178>
    41e0:	6f ef       	ldi	r22, 0xFF	; 255
    41e2:	7f ef       	ldi	r23, 0xFF	; 255
    41e4:	c5 01       	movw	r24, r10
    41e6:	0e 94 17 22 	call	0x442e	; 0x442e <strnlen_P>
    41ea:	4c 01       	movw	r8, r24
    41ec:	f3 2d       	mov	r31, r3
    41ee:	f0 68       	ori	r31, 0x80	; 128
    41f0:	3f 2e       	mov	r3, r31
    41f2:	82 01       	movw	r16, r4
    41f4:	33 fc       	sbrc	r3, 3
    41f6:	1b c0       	rjmp	.+54     	; 0x422e <vfprintf+0x1c2>
    41f8:	82 2d       	mov	r24, r2
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	88 16       	cp	r8, r24
    41fe:	99 06       	cpc	r9, r25
    4200:	b0 f4       	brcc	.+44     	; 0x422e <vfprintf+0x1c2>
    4202:	b6 01       	movw	r22, r12
    4204:	80 e2       	ldi	r24, 0x20	; 32
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	0e 94 2d 22 	call	0x445a	; 0x445a <fputc>
    420c:	2a 94       	dec	r2
    420e:	f4 cf       	rjmp	.-24     	; 0x41f8 <vfprintf+0x18c>
    4210:	f5 01       	movw	r30, r10
    4212:	37 fc       	sbrc	r3, 7
    4214:	85 91       	lpm	r24, Z+
    4216:	37 fe       	sbrs	r3, 7
    4218:	81 91       	ld	r24, Z+
    421a:	5f 01       	movw	r10, r30
    421c:	b6 01       	movw	r22, r12
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	0e 94 2d 22 	call	0x445a	; 0x445a <fputc>
    4224:	21 10       	cpse	r2, r1
    4226:	2a 94       	dec	r2
    4228:	21 e0       	ldi	r18, 0x01	; 1
    422a:	82 1a       	sub	r8, r18
    422c:	91 08       	sbc	r9, r1
    422e:	81 14       	cp	r8, r1
    4230:	91 04       	cpc	r9, r1
    4232:	71 f7       	brne	.-36     	; 0x4210 <vfprintf+0x1a4>
    4234:	e8 c0       	rjmp	.+464    	; 0x4406 <vfprintf+0x39a>
    4236:	84 36       	cpi	r24, 0x64	; 100
    4238:	11 f0       	breq	.+4      	; 0x423e <vfprintf+0x1d2>
    423a:	89 36       	cpi	r24, 0x69	; 105
    423c:	41 f5       	brne	.+80     	; 0x428e <vfprintf+0x222>
    423e:	f8 01       	movw	r30, r16
    4240:	37 fe       	sbrs	r3, 7
    4242:	07 c0       	rjmp	.+14     	; 0x4252 <vfprintf+0x1e6>
    4244:	60 81       	ld	r22, Z
    4246:	71 81       	ldd	r23, Z+1	; 0x01
    4248:	82 81       	ldd	r24, Z+2	; 0x02
    424a:	93 81       	ldd	r25, Z+3	; 0x03
    424c:	0c 5f       	subi	r16, 0xFC	; 252
    424e:	1f 4f       	sbci	r17, 0xFF	; 255
    4250:	08 c0       	rjmp	.+16     	; 0x4262 <vfprintf+0x1f6>
    4252:	60 81       	ld	r22, Z
    4254:	71 81       	ldd	r23, Z+1	; 0x01
    4256:	07 2e       	mov	r0, r23
    4258:	00 0c       	add	r0, r0
    425a:	88 0b       	sbc	r24, r24
    425c:	99 0b       	sbc	r25, r25
    425e:	0e 5f       	subi	r16, 0xFE	; 254
    4260:	1f 4f       	sbci	r17, 0xFF	; 255
    4262:	f3 2d       	mov	r31, r3
    4264:	ff 76       	andi	r31, 0x6F	; 111
    4266:	3f 2e       	mov	r3, r31
    4268:	97 ff       	sbrs	r25, 7
    426a:	09 c0       	rjmp	.+18     	; 0x427e <vfprintf+0x212>
    426c:	90 95       	com	r25
    426e:	80 95       	com	r24
    4270:	70 95       	com	r23
    4272:	61 95       	neg	r22
    4274:	7f 4f       	sbci	r23, 0xFF	; 255
    4276:	8f 4f       	sbci	r24, 0xFF	; 255
    4278:	9f 4f       	sbci	r25, 0xFF	; 255
    427a:	f0 68       	ori	r31, 0x80	; 128
    427c:	3f 2e       	mov	r3, r31
    427e:	2a e0       	ldi	r18, 0x0A	; 10
    4280:	30 e0       	ldi	r19, 0x00	; 0
    4282:	a3 01       	movw	r20, r6
    4284:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__ultoa_invert>
    4288:	88 2e       	mov	r8, r24
    428a:	86 18       	sub	r8, r6
    428c:	45 c0       	rjmp	.+138    	; 0x4318 <vfprintf+0x2ac>
    428e:	85 37       	cpi	r24, 0x75	; 117
    4290:	31 f4       	brne	.+12     	; 0x429e <vfprintf+0x232>
    4292:	23 2d       	mov	r18, r3
    4294:	2f 7e       	andi	r18, 0xEF	; 239
    4296:	b2 2e       	mov	r11, r18
    4298:	2a e0       	ldi	r18, 0x0A	; 10
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	25 c0       	rjmp	.+74     	; 0x42e8 <vfprintf+0x27c>
    429e:	93 2d       	mov	r25, r3
    42a0:	99 7f       	andi	r25, 0xF9	; 249
    42a2:	b9 2e       	mov	r11, r25
    42a4:	8f 36       	cpi	r24, 0x6F	; 111
    42a6:	c1 f0       	breq	.+48     	; 0x42d8 <vfprintf+0x26c>
    42a8:	18 f4       	brcc	.+6      	; 0x42b0 <vfprintf+0x244>
    42aa:	88 35       	cpi	r24, 0x58	; 88
    42ac:	79 f0       	breq	.+30     	; 0x42cc <vfprintf+0x260>
    42ae:	b5 c0       	rjmp	.+362    	; 0x441a <vfprintf+0x3ae>
    42b0:	80 37       	cpi	r24, 0x70	; 112
    42b2:	19 f0       	breq	.+6      	; 0x42ba <vfprintf+0x24e>
    42b4:	88 37       	cpi	r24, 0x78	; 120
    42b6:	21 f0       	breq	.+8      	; 0x42c0 <vfprintf+0x254>
    42b8:	b0 c0       	rjmp	.+352    	; 0x441a <vfprintf+0x3ae>
    42ba:	e9 2f       	mov	r30, r25
    42bc:	e0 61       	ori	r30, 0x10	; 16
    42be:	be 2e       	mov	r11, r30
    42c0:	b4 fe       	sbrs	r11, 4
    42c2:	0d c0       	rjmp	.+26     	; 0x42de <vfprintf+0x272>
    42c4:	fb 2d       	mov	r31, r11
    42c6:	f4 60       	ori	r31, 0x04	; 4
    42c8:	bf 2e       	mov	r11, r31
    42ca:	09 c0       	rjmp	.+18     	; 0x42de <vfprintf+0x272>
    42cc:	34 fe       	sbrs	r3, 4
    42ce:	0a c0       	rjmp	.+20     	; 0x42e4 <vfprintf+0x278>
    42d0:	29 2f       	mov	r18, r25
    42d2:	26 60       	ori	r18, 0x06	; 6
    42d4:	b2 2e       	mov	r11, r18
    42d6:	06 c0       	rjmp	.+12     	; 0x42e4 <vfprintf+0x278>
    42d8:	28 e0       	ldi	r18, 0x08	; 8
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	05 c0       	rjmp	.+10     	; 0x42e8 <vfprintf+0x27c>
    42de:	20 e1       	ldi	r18, 0x10	; 16
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	02 c0       	rjmp	.+4      	; 0x42e8 <vfprintf+0x27c>
    42e4:	20 e1       	ldi	r18, 0x10	; 16
    42e6:	32 e0       	ldi	r19, 0x02	; 2
    42e8:	f8 01       	movw	r30, r16
    42ea:	b7 fe       	sbrs	r11, 7
    42ec:	07 c0       	rjmp	.+14     	; 0x42fc <vfprintf+0x290>
    42ee:	60 81       	ld	r22, Z
    42f0:	71 81       	ldd	r23, Z+1	; 0x01
    42f2:	82 81       	ldd	r24, Z+2	; 0x02
    42f4:	93 81       	ldd	r25, Z+3	; 0x03
    42f6:	0c 5f       	subi	r16, 0xFC	; 252
    42f8:	1f 4f       	sbci	r17, 0xFF	; 255
    42fa:	06 c0       	rjmp	.+12     	; 0x4308 <vfprintf+0x29c>
    42fc:	60 81       	ld	r22, Z
    42fe:	71 81       	ldd	r23, Z+1	; 0x01
    4300:	80 e0       	ldi	r24, 0x00	; 0
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	0e 5f       	subi	r16, 0xFE	; 254
    4306:	1f 4f       	sbci	r17, 0xFF	; 255
    4308:	a3 01       	movw	r20, r6
    430a:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__ultoa_invert>
    430e:	88 2e       	mov	r8, r24
    4310:	86 18       	sub	r8, r6
    4312:	fb 2d       	mov	r31, r11
    4314:	ff 77       	andi	r31, 0x7F	; 127
    4316:	3f 2e       	mov	r3, r31
    4318:	36 fe       	sbrs	r3, 6
    431a:	0d c0       	rjmp	.+26     	; 0x4336 <vfprintf+0x2ca>
    431c:	23 2d       	mov	r18, r3
    431e:	2e 7f       	andi	r18, 0xFE	; 254
    4320:	a2 2e       	mov	r10, r18
    4322:	89 14       	cp	r8, r9
    4324:	58 f4       	brcc	.+22     	; 0x433c <vfprintf+0x2d0>
    4326:	34 fe       	sbrs	r3, 4
    4328:	0b c0       	rjmp	.+22     	; 0x4340 <vfprintf+0x2d4>
    432a:	32 fc       	sbrc	r3, 2
    432c:	09 c0       	rjmp	.+18     	; 0x4340 <vfprintf+0x2d4>
    432e:	83 2d       	mov	r24, r3
    4330:	8e 7e       	andi	r24, 0xEE	; 238
    4332:	a8 2e       	mov	r10, r24
    4334:	05 c0       	rjmp	.+10     	; 0x4340 <vfprintf+0x2d4>
    4336:	b8 2c       	mov	r11, r8
    4338:	a3 2c       	mov	r10, r3
    433a:	03 c0       	rjmp	.+6      	; 0x4342 <vfprintf+0x2d6>
    433c:	b8 2c       	mov	r11, r8
    433e:	01 c0       	rjmp	.+2      	; 0x4342 <vfprintf+0x2d6>
    4340:	b9 2c       	mov	r11, r9
    4342:	a4 fe       	sbrs	r10, 4
    4344:	0f c0       	rjmp	.+30     	; 0x4364 <vfprintf+0x2f8>
    4346:	fe 01       	movw	r30, r28
    4348:	e8 0d       	add	r30, r8
    434a:	f1 1d       	adc	r31, r1
    434c:	80 81       	ld	r24, Z
    434e:	80 33       	cpi	r24, 0x30	; 48
    4350:	21 f4       	brne	.+8      	; 0x435a <vfprintf+0x2ee>
    4352:	9a 2d       	mov	r25, r10
    4354:	99 7e       	andi	r25, 0xE9	; 233
    4356:	a9 2e       	mov	r10, r25
    4358:	09 c0       	rjmp	.+18     	; 0x436c <vfprintf+0x300>
    435a:	a2 fe       	sbrs	r10, 2
    435c:	06 c0       	rjmp	.+12     	; 0x436a <vfprintf+0x2fe>
    435e:	b3 94       	inc	r11
    4360:	b3 94       	inc	r11
    4362:	04 c0       	rjmp	.+8      	; 0x436c <vfprintf+0x300>
    4364:	8a 2d       	mov	r24, r10
    4366:	86 78       	andi	r24, 0x86	; 134
    4368:	09 f0       	breq	.+2      	; 0x436c <vfprintf+0x300>
    436a:	b3 94       	inc	r11
    436c:	a3 fc       	sbrc	r10, 3
    436e:	11 c0       	rjmp	.+34     	; 0x4392 <vfprintf+0x326>
    4370:	a0 fe       	sbrs	r10, 0
    4372:	06 c0       	rjmp	.+12     	; 0x4380 <vfprintf+0x314>
    4374:	b2 14       	cp	r11, r2
    4376:	88 f4       	brcc	.+34     	; 0x439a <vfprintf+0x32e>
    4378:	28 0c       	add	r2, r8
    437a:	92 2c       	mov	r9, r2
    437c:	9b 18       	sub	r9, r11
    437e:	0e c0       	rjmp	.+28     	; 0x439c <vfprintf+0x330>
    4380:	b2 14       	cp	r11, r2
    4382:	60 f4       	brcc	.+24     	; 0x439c <vfprintf+0x330>
    4384:	b6 01       	movw	r22, r12
    4386:	80 e2       	ldi	r24, 0x20	; 32
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	0e 94 2d 22 	call	0x445a	; 0x445a <fputc>
    438e:	b3 94       	inc	r11
    4390:	f7 cf       	rjmp	.-18     	; 0x4380 <vfprintf+0x314>
    4392:	b2 14       	cp	r11, r2
    4394:	18 f4       	brcc	.+6      	; 0x439c <vfprintf+0x330>
    4396:	2b 18       	sub	r2, r11
    4398:	02 c0       	rjmp	.+4      	; 0x439e <vfprintf+0x332>
    439a:	98 2c       	mov	r9, r8
    439c:	21 2c       	mov	r2, r1
    439e:	a4 fe       	sbrs	r10, 4
    43a0:	10 c0       	rjmp	.+32     	; 0x43c2 <vfprintf+0x356>
    43a2:	b6 01       	movw	r22, r12
    43a4:	80 e3       	ldi	r24, 0x30	; 48
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	0e 94 2d 22 	call	0x445a	; 0x445a <fputc>
    43ac:	a2 fe       	sbrs	r10, 2
    43ae:	17 c0       	rjmp	.+46     	; 0x43de <vfprintf+0x372>
    43b0:	a1 fc       	sbrc	r10, 1
    43b2:	03 c0       	rjmp	.+6      	; 0x43ba <vfprintf+0x34e>
    43b4:	88 e7       	ldi	r24, 0x78	; 120
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	02 c0       	rjmp	.+4      	; 0x43be <vfprintf+0x352>
    43ba:	88 e5       	ldi	r24, 0x58	; 88
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	b6 01       	movw	r22, r12
    43c0:	0c c0       	rjmp	.+24     	; 0x43da <vfprintf+0x36e>
    43c2:	8a 2d       	mov	r24, r10
    43c4:	86 78       	andi	r24, 0x86	; 134
    43c6:	59 f0       	breq	.+22     	; 0x43de <vfprintf+0x372>
    43c8:	a1 fe       	sbrs	r10, 1
    43ca:	02 c0       	rjmp	.+4      	; 0x43d0 <vfprintf+0x364>
    43cc:	8b e2       	ldi	r24, 0x2B	; 43
    43ce:	01 c0       	rjmp	.+2      	; 0x43d2 <vfprintf+0x366>
    43d0:	80 e2       	ldi	r24, 0x20	; 32
    43d2:	a7 fc       	sbrc	r10, 7
    43d4:	8d e2       	ldi	r24, 0x2D	; 45
    43d6:	b6 01       	movw	r22, r12
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 2d 22 	call	0x445a	; 0x445a <fputc>
    43de:	89 14       	cp	r8, r9
    43e0:	38 f4       	brcc	.+14     	; 0x43f0 <vfprintf+0x384>
    43e2:	b6 01       	movw	r22, r12
    43e4:	80 e3       	ldi	r24, 0x30	; 48
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	0e 94 2d 22 	call	0x445a	; 0x445a <fputc>
    43ec:	9a 94       	dec	r9
    43ee:	f7 cf       	rjmp	.-18     	; 0x43de <vfprintf+0x372>
    43f0:	8a 94       	dec	r8
    43f2:	f3 01       	movw	r30, r6
    43f4:	e8 0d       	add	r30, r8
    43f6:	f1 1d       	adc	r31, r1
    43f8:	80 81       	ld	r24, Z
    43fa:	b6 01       	movw	r22, r12
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	0e 94 2d 22 	call	0x445a	; 0x445a <fputc>
    4402:	81 10       	cpse	r8, r1
    4404:	f5 cf       	rjmp	.-22     	; 0x43f0 <vfprintf+0x384>
    4406:	22 20       	and	r2, r2
    4408:	09 f4       	brne	.+2      	; 0x440c <vfprintf+0x3a0>
    440a:	42 ce       	rjmp	.-892    	; 0x4090 <vfprintf+0x24>
    440c:	b6 01       	movw	r22, r12
    440e:	80 e2       	ldi	r24, 0x20	; 32
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	0e 94 2d 22 	call	0x445a	; 0x445a <fputc>
    4416:	2a 94       	dec	r2
    4418:	f6 cf       	rjmp	.-20     	; 0x4406 <vfprintf+0x39a>
    441a:	f6 01       	movw	r30, r12
    441c:	86 81       	ldd	r24, Z+6	; 0x06
    441e:	97 81       	ldd	r25, Z+7	; 0x07
    4420:	02 c0       	rjmp	.+4      	; 0x4426 <vfprintf+0x3ba>
    4422:	8f ef       	ldi	r24, 0xFF	; 255
    4424:	9f ef       	ldi	r25, 0xFF	; 255
    4426:	2b 96       	adiw	r28, 0x0b	; 11
    4428:	e2 e1       	ldi	r30, 0x12	; 18
    442a:	0c 94 e3 22 	jmp	0x45c6	; 0x45c6 <__epilogue_restores__>

0000442e <strnlen_P>:
    442e:	fc 01       	movw	r30, r24
    4430:	05 90       	lpm	r0, Z+
    4432:	61 50       	subi	r22, 0x01	; 1
    4434:	70 40       	sbci	r23, 0x00	; 0
    4436:	01 10       	cpse	r0, r1
    4438:	d8 f7       	brcc	.-10     	; 0x4430 <strnlen_P+0x2>
    443a:	80 95       	com	r24
    443c:	90 95       	com	r25
    443e:	8e 0f       	add	r24, r30
    4440:	9f 1f       	adc	r25, r31
    4442:	08 95       	ret

00004444 <strnlen>:
    4444:	fc 01       	movw	r30, r24
    4446:	61 50       	subi	r22, 0x01	; 1
    4448:	70 40       	sbci	r23, 0x00	; 0
    444a:	01 90       	ld	r0, Z+
    444c:	01 10       	cpse	r0, r1
    444e:	d8 f7       	brcc	.-10     	; 0x4446 <strnlen+0x2>
    4450:	80 95       	com	r24
    4452:	90 95       	com	r25
    4454:	8e 0f       	add	r24, r30
    4456:	9f 1f       	adc	r25, r31
    4458:	08 95       	ret

0000445a <fputc>:
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	fb 01       	movw	r30, r22
    4464:	23 81       	ldd	r18, Z+3	; 0x03
    4466:	21 fd       	sbrc	r18, 1
    4468:	03 c0       	rjmp	.+6      	; 0x4470 <fputc+0x16>
    446a:	8f ef       	ldi	r24, 0xFF	; 255
    446c:	9f ef       	ldi	r25, 0xFF	; 255
    446e:	2c c0       	rjmp	.+88     	; 0x44c8 <fputc+0x6e>
    4470:	22 ff       	sbrs	r18, 2
    4472:	16 c0       	rjmp	.+44     	; 0x44a0 <fputc+0x46>
    4474:	46 81       	ldd	r20, Z+6	; 0x06
    4476:	57 81       	ldd	r21, Z+7	; 0x07
    4478:	24 81       	ldd	r18, Z+4	; 0x04
    447a:	35 81       	ldd	r19, Z+5	; 0x05
    447c:	42 17       	cp	r20, r18
    447e:	53 07       	cpc	r21, r19
    4480:	44 f4       	brge	.+16     	; 0x4492 <fputc+0x38>
    4482:	a0 81       	ld	r26, Z
    4484:	b1 81       	ldd	r27, Z+1	; 0x01
    4486:	9d 01       	movw	r18, r26
    4488:	2f 5f       	subi	r18, 0xFF	; 255
    448a:	3f 4f       	sbci	r19, 0xFF	; 255
    448c:	31 83       	std	Z+1, r19	; 0x01
    448e:	20 83       	st	Z, r18
    4490:	8c 93       	st	X, r24
    4492:	26 81       	ldd	r18, Z+6	; 0x06
    4494:	37 81       	ldd	r19, Z+7	; 0x07
    4496:	2f 5f       	subi	r18, 0xFF	; 255
    4498:	3f 4f       	sbci	r19, 0xFF	; 255
    449a:	37 83       	std	Z+7, r19	; 0x07
    449c:	26 83       	std	Z+6, r18	; 0x06
    449e:	14 c0       	rjmp	.+40     	; 0x44c8 <fputc+0x6e>
    44a0:	8b 01       	movw	r16, r22
    44a2:	ec 01       	movw	r28, r24
    44a4:	fb 01       	movw	r30, r22
    44a6:	00 84       	ldd	r0, Z+8	; 0x08
    44a8:	f1 85       	ldd	r31, Z+9	; 0x09
    44aa:	e0 2d       	mov	r30, r0
    44ac:	09 95       	icall
    44ae:	89 2b       	or	r24, r25
    44b0:	e1 f6       	brne	.-72     	; 0x446a <fputc+0x10>
    44b2:	d8 01       	movw	r26, r16
    44b4:	16 96       	adiw	r26, 0x06	; 6
    44b6:	8d 91       	ld	r24, X+
    44b8:	9c 91       	ld	r25, X
    44ba:	17 97       	sbiw	r26, 0x07	; 7
    44bc:	01 96       	adiw	r24, 0x01	; 1
    44be:	17 96       	adiw	r26, 0x07	; 7
    44c0:	9c 93       	st	X, r25
    44c2:	8e 93       	st	-X, r24
    44c4:	16 97       	sbiw	r26, 0x06	; 6
    44c6:	ce 01       	movw	r24, r28
    44c8:	df 91       	pop	r29
    44ca:	cf 91       	pop	r28
    44cc:	1f 91       	pop	r17
    44ce:	0f 91       	pop	r16
    44d0:	08 95       	ret

000044d2 <__ultoa_invert>:
    44d2:	fa 01       	movw	r30, r20
    44d4:	aa 27       	eor	r26, r26
    44d6:	28 30       	cpi	r18, 0x08	; 8
    44d8:	51 f1       	breq	.+84     	; 0x452e <__ultoa_invert+0x5c>
    44da:	20 31       	cpi	r18, 0x10	; 16
    44dc:	81 f1       	breq	.+96     	; 0x453e <__ultoa_invert+0x6c>
    44de:	e8 94       	clt
    44e0:	6f 93       	push	r22
    44e2:	6e 7f       	andi	r22, 0xFE	; 254
    44e4:	6e 5f       	subi	r22, 0xFE	; 254
    44e6:	7f 4f       	sbci	r23, 0xFF	; 255
    44e8:	8f 4f       	sbci	r24, 0xFF	; 255
    44ea:	9f 4f       	sbci	r25, 0xFF	; 255
    44ec:	af 4f       	sbci	r26, 0xFF	; 255
    44ee:	b1 e0       	ldi	r27, 0x01	; 1
    44f0:	3e d0       	rcall	.+124    	; 0x456e <__ultoa_invert+0x9c>
    44f2:	b4 e0       	ldi	r27, 0x04	; 4
    44f4:	3c d0       	rcall	.+120    	; 0x456e <__ultoa_invert+0x9c>
    44f6:	67 0f       	add	r22, r23
    44f8:	78 1f       	adc	r23, r24
    44fa:	89 1f       	adc	r24, r25
    44fc:	9a 1f       	adc	r25, r26
    44fe:	a1 1d       	adc	r26, r1
    4500:	68 0f       	add	r22, r24
    4502:	79 1f       	adc	r23, r25
    4504:	8a 1f       	adc	r24, r26
    4506:	91 1d       	adc	r25, r1
    4508:	a1 1d       	adc	r26, r1
    450a:	6a 0f       	add	r22, r26
    450c:	71 1d       	adc	r23, r1
    450e:	81 1d       	adc	r24, r1
    4510:	91 1d       	adc	r25, r1
    4512:	a1 1d       	adc	r26, r1
    4514:	20 d0       	rcall	.+64     	; 0x4556 <__ultoa_invert+0x84>
    4516:	09 f4       	brne	.+2      	; 0x451a <__ultoa_invert+0x48>
    4518:	68 94       	set
    451a:	3f 91       	pop	r19
    451c:	2a e0       	ldi	r18, 0x0A	; 10
    451e:	26 9f       	mul	r18, r22
    4520:	11 24       	eor	r1, r1
    4522:	30 19       	sub	r19, r0
    4524:	30 5d       	subi	r19, 0xD0	; 208
    4526:	31 93       	st	Z+, r19
    4528:	de f6       	brtc	.-74     	; 0x44e0 <__ultoa_invert+0xe>
    452a:	cf 01       	movw	r24, r30
    452c:	08 95       	ret
    452e:	46 2f       	mov	r20, r22
    4530:	47 70       	andi	r20, 0x07	; 7
    4532:	40 5d       	subi	r20, 0xD0	; 208
    4534:	41 93       	st	Z+, r20
    4536:	b3 e0       	ldi	r27, 0x03	; 3
    4538:	0f d0       	rcall	.+30     	; 0x4558 <__ultoa_invert+0x86>
    453a:	c9 f7       	brne	.-14     	; 0x452e <__ultoa_invert+0x5c>
    453c:	f6 cf       	rjmp	.-20     	; 0x452a <__ultoa_invert+0x58>
    453e:	46 2f       	mov	r20, r22
    4540:	4f 70       	andi	r20, 0x0F	; 15
    4542:	40 5d       	subi	r20, 0xD0	; 208
    4544:	4a 33       	cpi	r20, 0x3A	; 58
    4546:	18 f0       	brcs	.+6      	; 0x454e <__ultoa_invert+0x7c>
    4548:	49 5d       	subi	r20, 0xD9	; 217
    454a:	31 fd       	sbrc	r19, 1
    454c:	40 52       	subi	r20, 0x20	; 32
    454e:	41 93       	st	Z+, r20
    4550:	02 d0       	rcall	.+4      	; 0x4556 <__ultoa_invert+0x84>
    4552:	a9 f7       	brne	.-22     	; 0x453e <__ultoa_invert+0x6c>
    4554:	ea cf       	rjmp	.-44     	; 0x452a <__ultoa_invert+0x58>
    4556:	b4 e0       	ldi	r27, 0x04	; 4
    4558:	a6 95       	lsr	r26
    455a:	97 95       	ror	r25
    455c:	87 95       	ror	r24
    455e:	77 95       	ror	r23
    4560:	67 95       	ror	r22
    4562:	ba 95       	dec	r27
    4564:	c9 f7       	brne	.-14     	; 0x4558 <__ultoa_invert+0x86>
    4566:	00 97       	sbiw	r24, 0x00	; 0
    4568:	61 05       	cpc	r22, r1
    456a:	71 05       	cpc	r23, r1
    456c:	08 95       	ret
    456e:	9b 01       	movw	r18, r22
    4570:	ac 01       	movw	r20, r24
    4572:	0a 2e       	mov	r0, r26
    4574:	06 94       	lsr	r0
    4576:	57 95       	ror	r21
    4578:	47 95       	ror	r20
    457a:	37 95       	ror	r19
    457c:	27 95       	ror	r18
    457e:	ba 95       	dec	r27
    4580:	c9 f7       	brne	.-14     	; 0x4574 <__ultoa_invert+0xa2>
    4582:	62 0f       	add	r22, r18
    4584:	73 1f       	adc	r23, r19
    4586:	84 1f       	adc	r24, r20
    4588:	95 1f       	adc	r25, r21
    458a:	a0 1d       	adc	r26, r0
    458c:	08 95       	ret

0000458e <__prologue_saves__>:
    458e:	2f 92       	push	r2
    4590:	3f 92       	push	r3
    4592:	4f 92       	push	r4
    4594:	5f 92       	push	r5
    4596:	6f 92       	push	r6
    4598:	7f 92       	push	r7
    459a:	8f 92       	push	r8
    459c:	9f 92       	push	r9
    459e:	af 92       	push	r10
    45a0:	bf 92       	push	r11
    45a2:	cf 92       	push	r12
    45a4:	df 92       	push	r13
    45a6:	ef 92       	push	r14
    45a8:	ff 92       	push	r15
    45aa:	0f 93       	push	r16
    45ac:	1f 93       	push	r17
    45ae:	cf 93       	push	r28
    45b0:	df 93       	push	r29
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
    45b6:	ca 1b       	sub	r28, r26
    45b8:	db 0b       	sbc	r29, r27
    45ba:	0f b6       	in	r0, 0x3f	; 63
    45bc:	f8 94       	cli
    45be:	de bf       	out	0x3e, r29	; 62
    45c0:	0f be       	out	0x3f, r0	; 63
    45c2:	cd bf       	out	0x3d, r28	; 61
    45c4:	09 94       	ijmp

000045c6 <__epilogue_restores__>:
    45c6:	2a 88       	ldd	r2, Y+18	; 0x12
    45c8:	39 88       	ldd	r3, Y+17	; 0x11
    45ca:	48 88       	ldd	r4, Y+16	; 0x10
    45cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    45ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    45d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    45d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    45d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    45d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    45d8:	b9 84       	ldd	r11, Y+9	; 0x09
    45da:	c8 84       	ldd	r12, Y+8	; 0x08
    45dc:	df 80       	ldd	r13, Y+7	; 0x07
    45de:	ee 80       	ldd	r14, Y+6	; 0x06
    45e0:	fd 80       	ldd	r15, Y+5	; 0x05
    45e2:	0c 81       	ldd	r16, Y+4	; 0x04
    45e4:	1b 81       	ldd	r17, Y+3	; 0x03
    45e6:	aa 81       	ldd	r26, Y+2	; 0x02
    45e8:	b9 81       	ldd	r27, Y+1	; 0x01
    45ea:	ce 0f       	add	r28, r30
    45ec:	d1 1d       	adc	r29, r1
    45ee:	0f b6       	in	r0, 0x3f	; 63
    45f0:	f8 94       	cli
    45f2:	de bf       	out	0x3e, r29	; 62
    45f4:	0f be       	out	0x3f, r0	; 63
    45f6:	cd bf       	out	0x3d, r28	; 61
    45f8:	ed 01       	movw	r28, r26
    45fa:	08 95       	ret

000045fc <_exit>:
    45fc:	f8 94       	cli

000045fe <__stop_program>:
    45fe:	ff cf       	rjmp	.-2      	; 0x45fe <__stop_program>
