
SMART_HOME_U2_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000031f2  00003286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008000a4  008000a4  000032ca  2**0
                  ALLOC
  3 .stab         000060b4  00000000  00000000  000032cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000414e  00000000  00000000  00009380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000d4ce  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000d4e0  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  0000d51c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  0000da02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000dea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000debf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__vector_10>
      2c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_11>
      30:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_12>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <__vector_16>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	28 08       	sbc	r2, r8
      56:	83 08       	sbc	r8, r3
      58:	28 08       	sbc	r2, r8
      5a:	83 08       	sbc	r8, r3
      5c:	83 08       	sbc	r8, r3
      5e:	83 08       	sbc	r8, r3
      60:	28 08       	sbc	r2, r8
      62:	83 08       	sbc	r8, r3
      64:	83 08       	sbc	r8, r3
      66:	57 08       	sbc	r5, r7
      68:	28 08       	sbc	r2, r8
      6a:	57 08       	sbc	r5, r7
      6c:	83 08       	sbc	r8, r3
      6e:	2a 08       	sbc	r2, r10
      70:	28 08       	sbc	r2, r8
      72:	2a 08       	sbc	r2, r10

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	10 e0       	ldi	r17, 0x00	; 0
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e2 ef       	ldi	r30, 0xF2	; 242
      88:	f1 e3       	ldi	r31, 0x31	; 49
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a4 3a       	cpi	r26, 0xA4	; 164
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	20 e0       	ldi	r18, 0x00	; 0
      98:	a4 ea       	ldi	r26, 0xA4	; 164
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a0 3c       	cpi	r26, 0xC0	; 192
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 01 13 	call	0x2602	; 0x2602 <main>
      aa:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <Convert_IntToString>:
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	27 97       	sbiw	r28, 0x07	; 7
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
      c6:	6a 83       	std	Y+2, r22	; 0x02
      c8:	7b 83       	std	Y+3, r23	; 0x03
      ca:	8c 83       	std	Y+4, r24	; 0x04
      cc:	9d 83       	std	Y+5, r25	; 0x05
      ce:	5f 83       	std	Y+7, r21	; 0x07
      d0:	4e 83       	std	Y+6, r20	; 0x06
      d2:	19 82       	std	Y+1, r1	; 0x01
      d4:	8e 81       	ldd	r24, Y+6	; 0x06
      d6:	9f 81       	ldd	r25, Y+7	; 0x07
      d8:	89 2b       	or	r24, r25
      da:	19 f4       	brne	.+6      	; 0xe2 <Convert_IntToString+0x30>
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	89 83       	std	Y+1, r24	; 0x01
      e0:	1d c0       	rjmp	.+58     	; 0x11c <Convert_IntToString+0x6a>
      e2:	8d 81       	ldd	r24, Y+5	; 0x05
      e4:	8f 93       	push	r24
      e6:	8c 81       	ldd	r24, Y+4	; 0x04
      e8:	8f 93       	push	r24
      ea:	8b 81       	ldd	r24, Y+3	; 0x03
      ec:	8f 93       	push	r24
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	8f 93       	push	r24
      f2:	84 e9       	ldi	r24, 0x94	; 148
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	89 2f       	mov	r24, r25
      f8:	8f 93       	push	r24
      fa:	84 e9       	ldi	r24, 0x94	; 148
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	8f 93       	push	r24
     100:	8f 81       	ldd	r24, Y+7	; 0x07
     102:	8f 93       	push	r24
     104:	8e 81       	ldd	r24, Y+6	; 0x06
     106:	8f 93       	push	r24
     108:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <sprintf>
     10c:	8d b7       	in	r24, 0x3d	; 61
     10e:	9e b7       	in	r25, 0x3e	; 62
     110:	08 96       	adiw	r24, 0x08	; 8
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	27 96       	adiw	r28, 0x07	; 7
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	f8 94       	cli
     124:	de bf       	out	0x3e, r29	; 62
     126:	0f be       	out	0x3f, r0	; 63
     128:	cd bf       	out	0x3d, r28	; 61
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <Convert_FloatToString>:
		sprintf(Address_str, "%lu", Copy_u32Number);
	}

	return Loc_enuStatus;
}
Std_StatusType Convert_FloatToString (f64 Copy_f64Number, pu8 Address_str){
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	65 97       	sbiw	r28, 0x15	; 21
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	68 8b       	std	Y+16, r22	; 0x10
     146:	79 8b       	std	Y+17, r23	; 0x11
     148:	8a 8b       	std	Y+18, r24	; 0x12
     14a:	9b 8b       	std	Y+19, r25	; 0x13
     14c:	5d 8b       	std	Y+21, r21	; 0x15
     14e:	4c 8b       	std	Y+20, r20	; 0x14

	//-5.99

	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     150:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8TempSign[2]="";
     152:	1f 86       	std	Y+15, r1	; 0x0f
     154:	1e 86       	std	Y+14, r1	; 0x0e
	s32  Loc_s64IntPart;
	f32 Loc_f32FractionPart;
	s32  Loc_s64FractionPartAsInteger;


		if(NULL == Address_str){
     156:	8c 89       	ldd	r24, Y+20	; 0x14
     158:	9d 89       	ldd	r25, Y+21	; 0x15
     15a:	89 2b       	or	r24, r25
     15c:	19 f4       	brne	.+6      	; 0x164 <Convert_FloatToString+0x34>
			Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	89 83       	std	Y+1, r24	; 0x01
     162:	78 c0       	rjmp	.+240    	; 0x254 <Convert_FloatToString+0x124>
		}

		else{

			if(Copy_f64Number<0){
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	a9 01       	movw	r20, r18
     16a:	68 89       	ldd	r22, Y+16	; 0x10
     16c:	79 89       	ldd	r23, Y+17	; 0x11
     16e:	8a 89       	ldd	r24, Y+18	; 0x12
     170:	9b 89       	ldd	r25, Y+19	; 0x13
     172:	0e 94 3c 14 	call	0x2878	; 0x2878 <__cmpsf2>
     176:	88 23       	and	r24, r24
     178:	5c f4       	brge	.+22     	; 0x190 <Convert_FloatToString+0x60>
				Copy_f64Number = -Copy_f64Number ;
     17a:	88 89       	ldd	r24, Y+16	; 0x10
     17c:	99 89       	ldd	r25, Y+17	; 0x11
     17e:	aa 89       	ldd	r26, Y+18	; 0x12
     180:	bb 89       	ldd	r27, Y+19	; 0x13
     182:	b0 58       	subi	r27, 0x80	; 128
     184:	88 8b       	std	Y+16, r24	; 0x10
     186:	99 8b       	std	Y+17, r25	; 0x11
     188:	aa 8b       	std	Y+18, r26	; 0x12
     18a:	bb 8b       	std	Y+19, r27	; 0x13
				Loc_u8TempSign[0] ='-';
     18c:	8d e2       	ldi	r24, 0x2D	; 45
     18e:	8e 87       	std	Y+14, r24	; 0x0e
			}


			Loc_s64IntPart = Copy_f64Number;                  // Get the integer (5).
     190:	68 89       	ldd	r22, Y+16	; 0x10
     192:	79 89       	ldd	r23, Y+17	; 0x11
     194:	8a 89       	ldd	r24, Y+18	; 0x12
     196:	9b 89       	ldd	r25, Y+19	; 0x13
     198:	0e 94 b3 14 	call	0x2966	; 0x2966 <__fixsfsi>
     19c:	dc 01       	movw	r26, r24
     19e:	cb 01       	movw	r24, r22
     1a0:	8a 83       	std	Y+2, r24	; 0x02
     1a2:	9b 83       	std	Y+3, r25	; 0x03
     1a4:	ac 83       	std	Y+4, r26	; 0x04
     1a6:	bd 83       	std	Y+5, r27	; 0x05
			Loc_f32FractionPart = Copy_f64Number - Loc_s64IntPart;      // Get fraction (.99).
     1a8:	6a 81       	ldd	r22, Y+2	; 0x02
     1aa:	7b 81       	ldd	r23, Y+3	; 0x03
     1ac:	8c 81       	ldd	r24, Y+4	; 0x04
     1ae:	9d 81       	ldd	r25, Y+5	; 0x05
     1b0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__floatsisf>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	9c 01       	movw	r18, r24
     1ba:	ad 01       	movw	r20, r26
     1bc:	68 89       	ldd	r22, Y+16	; 0x10
     1be:	79 89       	ldd	r23, Y+17	; 0x11
     1c0:	8a 89       	ldd	r24, Y+18	; 0x12
     1c2:	9b 89       	ldd	r25, Y+19	; 0x13
     1c4:	0e 94 cf 13 	call	0x279e	; 0x279e <__subsf3>
     1c8:	dc 01       	movw	r26, r24
     1ca:	cb 01       	movw	r24, r22
     1cc:	8e 83       	std	Y+6, r24	; 0x06
     1ce:	9f 83       	std	Y+7, r25	; 0x07
     1d0:	a8 87       	std	Y+8, r26	; 0x08
     1d2:	b9 87       	std	Y+9, r27	; 0x09
			 Loc_s64FractionPartAsInteger = (Loc_f32FractionPart * 10000);  // Turn into integer (9900).
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e4       	ldi	r19, 0x40	; 64
     1d8:	4c e1       	ldi	r20, 0x1C	; 28
     1da:	56 e4       	ldi	r21, 0x46	; 70
     1dc:	6e 81       	ldd	r22, Y+6	; 0x06
     1de:	7f 81       	ldd	r23, Y+7	; 0x07
     1e0:	88 85       	ldd	r24, Y+8	; 0x08
     1e2:	99 85       	ldd	r25, Y+9	; 0x09
     1e4:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3>
     1e8:	dc 01       	movw	r26, r24
     1ea:	cb 01       	movw	r24, r22
     1ec:	bc 01       	movw	r22, r24
     1ee:	cd 01       	movw	r24, r26
     1f0:	0e 94 b3 14 	call	0x2966	; 0x2966 <__fixsfsi>
     1f4:	dc 01       	movw	r26, r24
     1f6:	cb 01       	movw	r24, r22
     1f8:	8a 87       	std	Y+10, r24	; 0x0a
     1fa:	9b 87       	std	Y+11, r25	; 0x0b
     1fc:	ac 87       	std	Y+12, r26	; 0x0c
     1fe:	bd 87       	std	Y+13, r27	; 0x0d

			// Print as parts, note that you need 0-padding for fractional bit.

			sprintf (Address_str, "%s%ld.%04d", Loc_u8TempSign, Loc_s64IntPart, Loc_s64FractionPartAsInteger);
     200:	8d 85       	ldd	r24, Y+13	; 0x0d
     202:	8f 93       	push	r24
     204:	8c 85       	ldd	r24, Y+12	; 0x0c
     206:	8f 93       	push	r24
     208:	8b 85       	ldd	r24, Y+11	; 0x0b
     20a:	8f 93       	push	r24
     20c:	8a 85       	ldd	r24, Y+10	; 0x0a
     20e:	8f 93       	push	r24
     210:	8d 81       	ldd	r24, Y+5	; 0x05
     212:	8f 93       	push	r24
     214:	8c 81       	ldd	r24, Y+4	; 0x04
     216:	8f 93       	push	r24
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	8f 93       	push	r24
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
     21e:	8f 93       	push	r24
     220:	ce 01       	movw	r24, r28
     222:	0e 96       	adiw	r24, 0x0e	; 14
     224:	29 2f       	mov	r18, r25
     226:	2f 93       	push	r18
     228:	8f 93       	push	r24
     22a:	88 e9       	ldi	r24, 0x98	; 152
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	89 2f       	mov	r24, r25
     230:	8f 93       	push	r24
     232:	88 e9       	ldi	r24, 0x98	; 152
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	8f 93       	push	r24
     238:	8d 89       	ldd	r24, Y+21	; 0x15
     23a:	8f 93       	push	r24
     23c:	8c 89       	ldd	r24, Y+20	; 0x14
     23e:	8f 93       	push	r24
     240:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <sprintf>
     244:	8d b7       	in	r24, 0x3d	; 61
     246:	9e b7       	in	r25, 0x3e	; 62
     248:	0e 96       	adiw	r24, 0x0e	; 14
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61



		}

		return Loc_enuStatus;
     254:	89 81       	ldd	r24, Y+1	; 0x01


}
     256:	65 96       	adiw	r28, 0x15	; 21
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <Convert_StringTou8>:



Std_StatusType Convert_StringTou8 (u8* Address_Number, pu8 Address_str){
     268:	2f 92       	push	r2
     26a:	3f 92       	push	r3
     26c:	4f 92       	push	r4
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	6e 97       	sbiw	r28, 0x1e	; 30
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	9c 87       	std	Y+12, r25	; 0x0c
     29e:	8b 87       	std	Y+11, r24	; 0x0b
     2a0:	7e 87       	std	Y+14, r23	; 0x0e
     2a2:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     2a4:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     2a6:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     2a8:	1b 82       	std	Y+3, r1	; 0x03
     2aa:	1c 82       	std	Y+4, r1	; 0x04
     2ac:	1d 82       	std	Y+5, r1	; 0x05
     2ae:	1e 82       	std	Y+6, r1	; 0x06
     2b0:	1f 82       	std	Y+7, r1	; 0x07
     2b2:	18 86       	std	Y+8, r1	; 0x08
     2b4:	19 86       	std	Y+9, r1	; 0x09
     2b6:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     2b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     2bc:	89 2b       	or	r24, r25
     2be:	21 f0       	breq	.+8      	; 0x2c8 <Convert_StringTou8+0x60>
     2c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2c4:	89 2b       	or	r24, r25
     2c6:	19 f4       	brne	.+6      	; 0x2ce <Convert_StringTou8+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	9f c0       	rjmp	.+318    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     2ce:	1a 82       	std	Y+2, r1	; 0x02
     2d0:	8c c0       	rjmp	.+280    	; 0x3ea <Convert_StringTou8+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     2d2:	2b 81       	ldd	r18, Y+3	; 0x03
     2d4:	3c 81       	ldd	r19, Y+4	; 0x04
     2d6:	4d 81       	ldd	r20, Y+5	; 0x05
     2d8:	5e 81       	ldd	r21, Y+6	; 0x06
     2da:	6f 81       	ldd	r22, Y+7	; 0x07
     2dc:	78 85       	ldd	r23, Y+8	; 0x08
     2de:	89 85       	ldd	r24, Y+9	; 0x09
     2e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     2e2:	22 2e       	mov	r2, r18
     2e4:	33 2e       	mov	r3, r19
     2e6:	44 2e       	mov	r4, r20
     2e8:	55 2e       	mov	r5, r21
     2ea:	66 2e       	mov	r6, r22
     2ec:	77 2e       	mov	r7, r23
     2ee:	88 2e       	mov	r8, r24
     2f0:	99 2e       	mov	r9, r25
     2f2:	22 2d       	mov	r18, r2
     2f4:	33 2d       	mov	r19, r3
     2f6:	44 2d       	mov	r20, r4
     2f8:	55 2d       	mov	r21, r5
     2fa:	66 2d       	mov	r22, r6
     2fc:	77 2d       	mov	r23, r7
     2fe:	88 2d       	mov	r24, r8
     300:	99 2d       	mov	r25, r9
     302:	01 e0       	ldi	r16, 0x01	; 1
     304:	0e 94 ad 13 	call	0x275a	; 0x275a <__ashldi3>
     308:	a2 2e       	mov	r10, r18
     30a:	b3 2e       	mov	r11, r19
     30c:	c4 2e       	mov	r12, r20
     30e:	d5 2e       	mov	r13, r21
     310:	e6 2e       	mov	r14, r22
     312:	f7 2e       	mov	r15, r23
     314:	08 2f       	mov	r16, r24
     316:	19 2f       	mov	r17, r25
     318:	2a 2c       	mov	r2, r10
     31a:	3b 2c       	mov	r3, r11
     31c:	4c 2c       	mov	r4, r12
     31e:	5d 2c       	mov	r5, r13
     320:	6e 2c       	mov	r6, r14
     322:	7f 2c       	mov	r7, r15
     324:	80 2e       	mov	r8, r16
     326:	91 2e       	mov	r9, r17
     328:	22 2d       	mov	r18, r2
     32a:	33 2d       	mov	r19, r3
     32c:	44 2d       	mov	r20, r4
     32e:	55 2d       	mov	r21, r5
     330:	66 2d       	mov	r22, r6
     332:	77 2d       	mov	r23, r7
     334:	88 2d       	mov	r24, r8
     336:	99 2d       	mov	r25, r9
     338:	02 e0       	ldi	r16, 0x02	; 2
     33a:	0e 94 ad 13 	call	0x275a	; 0x275a <__ashldi3>
     33e:	2f 8b       	std	Y+23, r18	; 0x17
     340:	38 8f       	std	Y+24, r19	; 0x18
     342:	49 8f       	std	Y+25, r20	; 0x19
     344:	5a 8f       	std	Y+26, r21	; 0x1a
     346:	6b 8f       	std	Y+27, r22	; 0x1b
     348:	7c 8f       	std	Y+28, r23	; 0x1c
     34a:	8d 8f       	std	Y+29, r24	; 0x1d
     34c:	9e 8f       	std	Y+30, r25	; 0x1e
     34e:	22 2d       	mov	r18, r2
     350:	33 2d       	mov	r19, r3
     352:	44 2d       	mov	r20, r4
     354:	55 2d       	mov	r21, r5
     356:	66 2d       	mov	r22, r6
     358:	77 2d       	mov	r23, r7
     35a:	88 2d       	mov	r24, r8
     35c:	99 2d       	mov	r25, r9
     35e:	af 88       	ldd	r10, Y+23	; 0x17
     360:	b8 8c       	ldd	r11, Y+24	; 0x18
     362:	c9 8c       	ldd	r12, Y+25	; 0x19
     364:	da 8c       	ldd	r13, Y+26	; 0x1a
     366:	eb 8c       	ldd	r14, Y+27	; 0x1b
     368:	fc 8c       	ldd	r15, Y+28	; 0x1c
     36a:	0d 8d       	ldd	r16, Y+29	; 0x1d
     36c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     36e:	0e 94 c6 13 	call	0x278c	; 0x278c <__adddi3>
     372:	a2 2e       	mov	r10, r18
     374:	b3 2e       	mov	r11, r19
     376:	c4 2e       	mov	r12, r20
     378:	d5 2e       	mov	r13, r21
     37a:	e6 2e       	mov	r14, r22
     37c:	f7 2e       	mov	r15, r23
     37e:	08 2f       	mov	r16, r24
     380:	19 2f       	mov	r17, r25
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	88 2f       	mov	r24, r24
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	2d 85       	ldd	r18, Y+13	; 0x0d
     38a:	3e 85       	ldd	r19, Y+14	; 0x0e
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	fc 01       	movw	r30, r24
     392:	80 81       	ld	r24, Z
     394:	88 2f       	mov	r24, r24
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	c0 97       	sbiw	r24, 0x30	; 48
     39a:	98 8b       	std	Y+16, r25	; 0x10
     39c:	8f 87       	std	Y+15, r24	; 0x0f
     39e:	89 2f       	mov	r24, r25
     3a0:	88 0f       	add	r24, r24
     3a2:	88 0b       	sbc	r24, r24
     3a4:	89 8b       	std	Y+17, r24	; 0x11
     3a6:	8a 8b       	std	Y+18, r24	; 0x12
     3a8:	8b 8b       	std	Y+19, r24	; 0x13
     3aa:	8c 8b       	std	Y+20, r24	; 0x14
     3ac:	8d 8b       	std	Y+21, r24	; 0x15
     3ae:	8e 8b       	std	Y+22, r24	; 0x16
     3b0:	2a 2d       	mov	r18, r10
     3b2:	3b 2d       	mov	r19, r11
     3b4:	4c 2d       	mov	r20, r12
     3b6:	5d 2d       	mov	r21, r13
     3b8:	6e 2d       	mov	r22, r14
     3ba:	7f 2d       	mov	r23, r15
     3bc:	80 2f       	mov	r24, r16
     3be:	91 2f       	mov	r25, r17
     3c0:	af 84       	ldd	r10, Y+15	; 0x0f
     3c2:	b8 88       	ldd	r11, Y+16	; 0x10
     3c4:	c9 88       	ldd	r12, Y+17	; 0x11
     3c6:	da 88       	ldd	r13, Y+18	; 0x12
     3c8:	eb 88       	ldd	r14, Y+19	; 0x13
     3ca:	fc 88       	ldd	r15, Y+20	; 0x14
     3cc:	0d 89       	ldd	r16, Y+21	; 0x15
     3ce:	1e 89       	ldd	r17, Y+22	; 0x16
     3d0:	0e 94 c6 13 	call	0x278c	; 0x278c <__adddi3>
     3d4:	2b 83       	std	Y+3, r18	; 0x03
     3d6:	3c 83       	std	Y+4, r19	; 0x04
     3d8:	4d 83       	std	Y+5, r20	; 0x05
     3da:	5e 83       	std	Y+6, r21	; 0x06
     3dc:	6f 83       	std	Y+7, r22	; 0x07
     3de:	78 87       	std	Y+8, r23	; 0x08
     3e0:	89 87       	std	Y+9, r24	; 0x09
     3e2:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	8f 5f       	subi	r24, 0xFF	; 255
     3e8:	8a 83       	std	Y+2, r24	; 0x02
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	2d 85       	ldd	r18, Y+13	; 0x0d
     3f2:	3e 85       	ldd	r19, Y+14	; 0x0e
     3f4:	82 0f       	add	r24, r18
     3f6:	93 1f       	adc	r25, r19
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 81       	ld	r24, Z
     3fc:	88 23       	and	r24, r24
     3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	68 cf       	rjmp	.-304    	; 0x2d2 <Convert_StringTou8+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     402:	2b 81       	ldd	r18, Y+3	; 0x03
     404:	8b 85       	ldd	r24, Y+11	; 0x0b
     406:	9c 85       	ldd	r25, Y+12	; 0x0c
     408:	fc 01       	movw	r30, r24
     40a:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     40c:	89 81       	ldd	r24, Y+1	; 0x01

}
     40e:	6e 96       	adiw	r28, 0x1e	; 30
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	bf 90       	pop	r11
     42c:	af 90       	pop	r10
     42e:	9f 90       	pop	r9
     430:	8f 90       	pop	r8
     432:	7f 90       	pop	r7
     434:	6f 90       	pop	r6
     436:	5f 90       	pop	r5
     438:	4f 90       	pop	r4
     43a:	3f 90       	pop	r3
     43c:	2f 90       	pop	r2
     43e:	08 95       	ret

00000440 <Convert_StringTou16>:


Std_StatusType Convert_StringTou16 (u16* Address_Number, pu8 Address_str){
     440:	2f 92       	push	r2
     442:	3f 92       	push	r3
     444:	4f 92       	push	r4
     446:	5f 92       	push	r5
     448:	6f 92       	push	r6
     44a:	7f 92       	push	r7
     44c:	8f 92       	push	r8
     44e:	9f 92       	push	r9
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	6e 97       	sbiw	r28, 0x1e	; 30
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	9c 87       	std	Y+12, r25	; 0x0c
     476:	8b 87       	std	Y+11, r24	; 0x0b
     478:	7e 87       	std	Y+14, r23	; 0x0e
     47a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     47c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     47e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     480:	1b 82       	std	Y+3, r1	; 0x03
     482:	1c 82       	std	Y+4, r1	; 0x04
     484:	1d 82       	std	Y+5, r1	; 0x05
     486:	1e 82       	std	Y+6, r1	; 0x06
     488:	1f 82       	std	Y+7, r1	; 0x07
     48a:	18 86       	std	Y+8, r1	; 0x08
     48c:	19 86       	std	Y+9, r1	; 0x09
     48e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     490:	8d 85       	ldd	r24, Y+13	; 0x0d
     492:	9e 85       	ldd	r25, Y+14	; 0x0e
     494:	89 2b       	or	r24, r25
     496:	21 f0       	breq	.+8      	; 0x4a0 <Convert_StringTou16+0x60>
     498:	8b 85       	ldd	r24, Y+11	; 0x0b
     49a:	9c 85       	ldd	r25, Y+12	; 0x0c
     49c:	89 2b       	or	r24, r25
     49e:	19 f4       	brne	.+6      	; 0x4a6 <Convert_StringTou16+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	a1 c0       	rjmp	.+322    	; 0x5e8 <Convert_StringTou16+0x1a8>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     4a6:	1a 82       	std	Y+2, r1	; 0x02
     4a8:	8c c0       	rjmp	.+280    	; 0x5c2 <Convert_StringTou16+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     4aa:	2b 81       	ldd	r18, Y+3	; 0x03
     4ac:	3c 81       	ldd	r19, Y+4	; 0x04
     4ae:	4d 81       	ldd	r20, Y+5	; 0x05
     4b0:	5e 81       	ldd	r21, Y+6	; 0x06
     4b2:	6f 81       	ldd	r22, Y+7	; 0x07
     4b4:	78 85       	ldd	r23, Y+8	; 0x08
     4b6:	89 85       	ldd	r24, Y+9	; 0x09
     4b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ba:	22 2e       	mov	r2, r18
     4bc:	33 2e       	mov	r3, r19
     4be:	44 2e       	mov	r4, r20
     4c0:	55 2e       	mov	r5, r21
     4c2:	66 2e       	mov	r6, r22
     4c4:	77 2e       	mov	r7, r23
     4c6:	88 2e       	mov	r8, r24
     4c8:	99 2e       	mov	r9, r25
     4ca:	22 2d       	mov	r18, r2
     4cc:	33 2d       	mov	r19, r3
     4ce:	44 2d       	mov	r20, r4
     4d0:	55 2d       	mov	r21, r5
     4d2:	66 2d       	mov	r22, r6
     4d4:	77 2d       	mov	r23, r7
     4d6:	88 2d       	mov	r24, r8
     4d8:	99 2d       	mov	r25, r9
     4da:	01 e0       	ldi	r16, 0x01	; 1
     4dc:	0e 94 ad 13 	call	0x275a	; 0x275a <__ashldi3>
     4e0:	a2 2e       	mov	r10, r18
     4e2:	b3 2e       	mov	r11, r19
     4e4:	c4 2e       	mov	r12, r20
     4e6:	d5 2e       	mov	r13, r21
     4e8:	e6 2e       	mov	r14, r22
     4ea:	f7 2e       	mov	r15, r23
     4ec:	08 2f       	mov	r16, r24
     4ee:	19 2f       	mov	r17, r25
     4f0:	2a 2c       	mov	r2, r10
     4f2:	3b 2c       	mov	r3, r11
     4f4:	4c 2c       	mov	r4, r12
     4f6:	5d 2c       	mov	r5, r13
     4f8:	6e 2c       	mov	r6, r14
     4fa:	7f 2c       	mov	r7, r15
     4fc:	80 2e       	mov	r8, r16
     4fe:	91 2e       	mov	r9, r17
     500:	22 2d       	mov	r18, r2
     502:	33 2d       	mov	r19, r3
     504:	44 2d       	mov	r20, r4
     506:	55 2d       	mov	r21, r5
     508:	66 2d       	mov	r22, r6
     50a:	77 2d       	mov	r23, r7
     50c:	88 2d       	mov	r24, r8
     50e:	99 2d       	mov	r25, r9
     510:	02 e0       	ldi	r16, 0x02	; 2
     512:	0e 94 ad 13 	call	0x275a	; 0x275a <__ashldi3>
     516:	2f 8b       	std	Y+23, r18	; 0x17
     518:	38 8f       	std	Y+24, r19	; 0x18
     51a:	49 8f       	std	Y+25, r20	; 0x19
     51c:	5a 8f       	std	Y+26, r21	; 0x1a
     51e:	6b 8f       	std	Y+27, r22	; 0x1b
     520:	7c 8f       	std	Y+28, r23	; 0x1c
     522:	8d 8f       	std	Y+29, r24	; 0x1d
     524:	9e 8f       	std	Y+30, r25	; 0x1e
     526:	22 2d       	mov	r18, r2
     528:	33 2d       	mov	r19, r3
     52a:	44 2d       	mov	r20, r4
     52c:	55 2d       	mov	r21, r5
     52e:	66 2d       	mov	r22, r6
     530:	77 2d       	mov	r23, r7
     532:	88 2d       	mov	r24, r8
     534:	99 2d       	mov	r25, r9
     536:	af 88       	ldd	r10, Y+23	; 0x17
     538:	b8 8c       	ldd	r11, Y+24	; 0x18
     53a:	c9 8c       	ldd	r12, Y+25	; 0x19
     53c:	da 8c       	ldd	r13, Y+26	; 0x1a
     53e:	eb 8c       	ldd	r14, Y+27	; 0x1b
     540:	fc 8c       	ldd	r15, Y+28	; 0x1c
     542:	0d 8d       	ldd	r16, Y+29	; 0x1d
     544:	1e 8d       	ldd	r17, Y+30	; 0x1e
     546:	0e 94 c6 13 	call	0x278c	; 0x278c <__adddi3>
     54a:	a2 2e       	mov	r10, r18
     54c:	b3 2e       	mov	r11, r19
     54e:	c4 2e       	mov	r12, r20
     550:	d5 2e       	mov	r13, r21
     552:	e6 2e       	mov	r14, r22
     554:	f7 2e       	mov	r15, r23
     556:	08 2f       	mov	r16, r24
     558:	19 2f       	mov	r17, r25
     55a:	8a 81       	ldd	r24, Y+2	; 0x02
     55c:	88 2f       	mov	r24, r24
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	2d 85       	ldd	r18, Y+13	; 0x0d
     562:	3e 85       	ldd	r19, Y+14	; 0x0e
     564:	82 0f       	add	r24, r18
     566:	93 1f       	adc	r25, r19
     568:	fc 01       	movw	r30, r24
     56a:	80 81       	ld	r24, Z
     56c:	88 2f       	mov	r24, r24
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	c0 97       	sbiw	r24, 0x30	; 48
     572:	98 8b       	std	Y+16, r25	; 0x10
     574:	8f 87       	std	Y+15, r24	; 0x0f
     576:	89 2f       	mov	r24, r25
     578:	88 0f       	add	r24, r24
     57a:	88 0b       	sbc	r24, r24
     57c:	89 8b       	std	Y+17, r24	; 0x11
     57e:	8a 8b       	std	Y+18, r24	; 0x12
     580:	8b 8b       	std	Y+19, r24	; 0x13
     582:	8c 8b       	std	Y+20, r24	; 0x14
     584:	8d 8b       	std	Y+21, r24	; 0x15
     586:	8e 8b       	std	Y+22, r24	; 0x16
     588:	2a 2d       	mov	r18, r10
     58a:	3b 2d       	mov	r19, r11
     58c:	4c 2d       	mov	r20, r12
     58e:	5d 2d       	mov	r21, r13
     590:	6e 2d       	mov	r22, r14
     592:	7f 2d       	mov	r23, r15
     594:	80 2f       	mov	r24, r16
     596:	91 2f       	mov	r25, r17
     598:	af 84       	ldd	r10, Y+15	; 0x0f
     59a:	b8 88       	ldd	r11, Y+16	; 0x10
     59c:	c9 88       	ldd	r12, Y+17	; 0x11
     59e:	da 88       	ldd	r13, Y+18	; 0x12
     5a0:	eb 88       	ldd	r14, Y+19	; 0x13
     5a2:	fc 88       	ldd	r15, Y+20	; 0x14
     5a4:	0d 89       	ldd	r16, Y+21	; 0x15
     5a6:	1e 89       	ldd	r17, Y+22	; 0x16
     5a8:	0e 94 c6 13 	call	0x278c	; 0x278c <__adddi3>
     5ac:	2b 83       	std	Y+3, r18	; 0x03
     5ae:	3c 83       	std	Y+4, r19	; 0x04
     5b0:	4d 83       	std	Y+5, r20	; 0x05
     5b2:	5e 83       	std	Y+6, r21	; 0x06
     5b4:	6f 83       	std	Y+7, r22	; 0x07
     5b6:	78 87       	std	Y+8, r23	; 0x08
     5b8:	89 87       	std	Y+9, r24	; 0x09
     5ba:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	8f 5f       	subi	r24, 0xFF	; 255
     5c0:	8a 83       	std	Y+2, r24	; 0x02
     5c2:	8a 81       	ldd	r24, Y+2	; 0x02
     5c4:	88 2f       	mov	r24, r24
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	2d 85       	ldd	r18, Y+13	; 0x0d
     5ca:	3e 85       	ldd	r19, Y+14	; 0x0e
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	fc 01       	movw	r30, r24
     5d2:	80 81       	ld	r24, Z
     5d4:	88 23       	and	r24, r24
     5d6:	09 f0       	breq	.+2      	; 0x5da <Convert_StringTou16+0x19a>
     5d8:	68 cf       	rjmp	.-304    	; 0x4aa <Convert_StringTou16+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     5da:	2b 81       	ldd	r18, Y+3	; 0x03
     5dc:	3c 81       	ldd	r19, Y+4	; 0x04
     5de:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e2:	fc 01       	movw	r30, r24
     5e4:	31 83       	std	Z+1, r19	; 0x01
     5e6:	20 83       	st	Z, r18
			}

			return Loc_enuStatus;
     5e8:	89 81       	ldd	r24, Y+1	; 0x01

}
     5ea:	6e 96       	adiw	r28, 0x1e	; 30
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	7f 90       	pop	r7
     610:	6f 90       	pop	r6
     612:	5f 90       	pop	r5
     614:	4f 90       	pop	r4
     616:	3f 90       	pop	r3
     618:	2f 90       	pop	r2
     61a:	08 95       	ret

0000061c <Convert_StringTou32>:


Std_StatusType Convert_StringTou32 (u32* Address_Number, pu8 Address_str){
     61c:	2f 92       	push	r2
     61e:	3f 92       	push	r3
     620:	4f 92       	push	r4
     622:	5f 92       	push	r5
     624:	6f 92       	push	r6
     626:	7f 92       	push	r7
     628:	8f 92       	push	r8
     62a:	9f 92       	push	r9
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	6e 97       	sbiw	r28, 0x1e	; 30
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	9c 87       	std	Y+12, r25	; 0x0c
     652:	8b 87       	std	Y+11, r24	; 0x0b
     654:	7e 87       	std	Y+14, r23	; 0x0e
     656:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     658:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     65a:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     65c:	1b 82       	std	Y+3, r1	; 0x03
     65e:	1c 82       	std	Y+4, r1	; 0x04
     660:	1d 82       	std	Y+5, r1	; 0x05
     662:	1e 82       	std	Y+6, r1	; 0x06
     664:	1f 82       	std	Y+7, r1	; 0x07
     666:	18 86       	std	Y+8, r1	; 0x08
     668:	19 86       	std	Y+9, r1	; 0x09
     66a:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     66c:	8d 85       	ldd	r24, Y+13	; 0x0d
     66e:	9e 85       	ldd	r25, Y+14	; 0x0e
     670:	89 2b       	or	r24, r25
     672:	21 f0       	breq	.+8      	; 0x67c <Convert_StringTou32+0x60>
     674:	8b 85       	ldd	r24, Y+11	; 0x0b
     676:	9c 85       	ldd	r25, Y+12	; 0x0c
     678:	89 2b       	or	r24, r25
     67a:	19 f4       	brne	.+6      	; 0x682 <Convert_StringTou32+0x66>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	a5 c0       	rjmp	.+330    	; 0x7cc <Convert_StringTou32+0x1b0>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     682:	1a 82       	std	Y+2, r1	; 0x02
     684:	8c c0       	rjmp	.+280    	; 0x79e <Convert_StringTou32+0x182>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     686:	2b 81       	ldd	r18, Y+3	; 0x03
     688:	3c 81       	ldd	r19, Y+4	; 0x04
     68a:	4d 81       	ldd	r20, Y+5	; 0x05
     68c:	5e 81       	ldd	r21, Y+6	; 0x06
     68e:	6f 81       	ldd	r22, Y+7	; 0x07
     690:	78 85       	ldd	r23, Y+8	; 0x08
     692:	89 85       	ldd	r24, Y+9	; 0x09
     694:	9a 85       	ldd	r25, Y+10	; 0x0a
     696:	22 2e       	mov	r2, r18
     698:	33 2e       	mov	r3, r19
     69a:	44 2e       	mov	r4, r20
     69c:	55 2e       	mov	r5, r21
     69e:	66 2e       	mov	r6, r22
     6a0:	77 2e       	mov	r7, r23
     6a2:	88 2e       	mov	r8, r24
     6a4:	99 2e       	mov	r9, r25
     6a6:	22 2d       	mov	r18, r2
     6a8:	33 2d       	mov	r19, r3
     6aa:	44 2d       	mov	r20, r4
     6ac:	55 2d       	mov	r21, r5
     6ae:	66 2d       	mov	r22, r6
     6b0:	77 2d       	mov	r23, r7
     6b2:	88 2d       	mov	r24, r8
     6b4:	99 2d       	mov	r25, r9
     6b6:	01 e0       	ldi	r16, 0x01	; 1
     6b8:	0e 94 ad 13 	call	0x275a	; 0x275a <__ashldi3>
     6bc:	a2 2e       	mov	r10, r18
     6be:	b3 2e       	mov	r11, r19
     6c0:	c4 2e       	mov	r12, r20
     6c2:	d5 2e       	mov	r13, r21
     6c4:	e6 2e       	mov	r14, r22
     6c6:	f7 2e       	mov	r15, r23
     6c8:	08 2f       	mov	r16, r24
     6ca:	19 2f       	mov	r17, r25
     6cc:	2a 2c       	mov	r2, r10
     6ce:	3b 2c       	mov	r3, r11
     6d0:	4c 2c       	mov	r4, r12
     6d2:	5d 2c       	mov	r5, r13
     6d4:	6e 2c       	mov	r6, r14
     6d6:	7f 2c       	mov	r7, r15
     6d8:	80 2e       	mov	r8, r16
     6da:	91 2e       	mov	r9, r17
     6dc:	22 2d       	mov	r18, r2
     6de:	33 2d       	mov	r19, r3
     6e0:	44 2d       	mov	r20, r4
     6e2:	55 2d       	mov	r21, r5
     6e4:	66 2d       	mov	r22, r6
     6e6:	77 2d       	mov	r23, r7
     6e8:	88 2d       	mov	r24, r8
     6ea:	99 2d       	mov	r25, r9
     6ec:	02 e0       	ldi	r16, 0x02	; 2
     6ee:	0e 94 ad 13 	call	0x275a	; 0x275a <__ashldi3>
     6f2:	2f 8b       	std	Y+23, r18	; 0x17
     6f4:	38 8f       	std	Y+24, r19	; 0x18
     6f6:	49 8f       	std	Y+25, r20	; 0x19
     6f8:	5a 8f       	std	Y+26, r21	; 0x1a
     6fa:	6b 8f       	std	Y+27, r22	; 0x1b
     6fc:	7c 8f       	std	Y+28, r23	; 0x1c
     6fe:	8d 8f       	std	Y+29, r24	; 0x1d
     700:	9e 8f       	std	Y+30, r25	; 0x1e
     702:	22 2d       	mov	r18, r2
     704:	33 2d       	mov	r19, r3
     706:	44 2d       	mov	r20, r4
     708:	55 2d       	mov	r21, r5
     70a:	66 2d       	mov	r22, r6
     70c:	77 2d       	mov	r23, r7
     70e:	88 2d       	mov	r24, r8
     710:	99 2d       	mov	r25, r9
     712:	af 88       	ldd	r10, Y+23	; 0x17
     714:	b8 8c       	ldd	r11, Y+24	; 0x18
     716:	c9 8c       	ldd	r12, Y+25	; 0x19
     718:	da 8c       	ldd	r13, Y+26	; 0x1a
     71a:	eb 8c       	ldd	r14, Y+27	; 0x1b
     71c:	fc 8c       	ldd	r15, Y+28	; 0x1c
     71e:	0d 8d       	ldd	r16, Y+29	; 0x1d
     720:	1e 8d       	ldd	r17, Y+30	; 0x1e
     722:	0e 94 c6 13 	call	0x278c	; 0x278c <__adddi3>
     726:	a2 2e       	mov	r10, r18
     728:	b3 2e       	mov	r11, r19
     72a:	c4 2e       	mov	r12, r20
     72c:	d5 2e       	mov	r13, r21
     72e:	e6 2e       	mov	r14, r22
     730:	f7 2e       	mov	r15, r23
     732:	08 2f       	mov	r16, r24
     734:	19 2f       	mov	r17, r25
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2d 85       	ldd	r18, Y+13	; 0x0d
     73e:	3e 85       	ldd	r19, Y+14	; 0x0e
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	88 2f       	mov	r24, r24
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	c0 97       	sbiw	r24, 0x30	; 48
     74e:	98 8b       	std	Y+16, r25	; 0x10
     750:	8f 87       	std	Y+15, r24	; 0x0f
     752:	89 2f       	mov	r24, r25
     754:	88 0f       	add	r24, r24
     756:	88 0b       	sbc	r24, r24
     758:	89 8b       	std	Y+17, r24	; 0x11
     75a:	8a 8b       	std	Y+18, r24	; 0x12
     75c:	8b 8b       	std	Y+19, r24	; 0x13
     75e:	8c 8b       	std	Y+20, r24	; 0x14
     760:	8d 8b       	std	Y+21, r24	; 0x15
     762:	8e 8b       	std	Y+22, r24	; 0x16
     764:	2a 2d       	mov	r18, r10
     766:	3b 2d       	mov	r19, r11
     768:	4c 2d       	mov	r20, r12
     76a:	5d 2d       	mov	r21, r13
     76c:	6e 2d       	mov	r22, r14
     76e:	7f 2d       	mov	r23, r15
     770:	80 2f       	mov	r24, r16
     772:	91 2f       	mov	r25, r17
     774:	af 84       	ldd	r10, Y+15	; 0x0f
     776:	b8 88       	ldd	r11, Y+16	; 0x10
     778:	c9 88       	ldd	r12, Y+17	; 0x11
     77a:	da 88       	ldd	r13, Y+18	; 0x12
     77c:	eb 88       	ldd	r14, Y+19	; 0x13
     77e:	fc 88       	ldd	r15, Y+20	; 0x14
     780:	0d 89       	ldd	r16, Y+21	; 0x15
     782:	1e 89       	ldd	r17, Y+22	; 0x16
     784:	0e 94 c6 13 	call	0x278c	; 0x278c <__adddi3>
     788:	2b 83       	std	Y+3, r18	; 0x03
     78a:	3c 83       	std	Y+4, r19	; 0x04
     78c:	4d 83       	std	Y+5, r20	; 0x05
     78e:	5e 83       	std	Y+6, r21	; 0x06
     790:	6f 83       	std	Y+7, r22	; 0x07
     792:	78 87       	std	Y+8, r23	; 0x08
     794:	89 87       	std	Y+9, r24	; 0x09
     796:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     798:	8a 81       	ldd	r24, Y+2	; 0x02
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	8a 83       	std	Y+2, r24	; 0x02
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	2d 85       	ldd	r18, Y+13	; 0x0d
     7a6:	3e 85       	ldd	r19, Y+14	; 0x0e
     7a8:	82 0f       	add	r24, r18
     7aa:	93 1f       	adc	r25, r19
     7ac:	fc 01       	movw	r30, r24
     7ae:	80 81       	ld	r24, Z
     7b0:	88 23       	and	r24, r24
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <Convert_StringTou32+0x19a>
     7b4:	68 cf       	rjmp	.-304    	; 0x686 <Convert_StringTou32+0x6a>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ba:	ad 81       	ldd	r26, Y+5	; 0x05
     7bc:	be 81       	ldd	r27, Y+6	; 0x06
     7be:	2b 85       	ldd	r18, Y+11	; 0x0b
     7c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     7c2:	f9 01       	movw	r30, r18
     7c4:	80 83       	st	Z, r24
     7c6:	91 83       	std	Z+1, r25	; 0x01
     7c8:	a2 83       	std	Z+2, r26	; 0x02
     7ca:	b3 83       	std	Z+3, r27	; 0x03
			}

			return Loc_enuStatus;
     7cc:	89 81       	ldd	r24, Y+1	; 0x01

}
     7ce:	6e 96       	adiw	r28, 0x1e	; 30
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	3f 90       	pop	r3
     7fc:	2f 90       	pop	r2
     7fe:	08 95       	ret

00000800 <Convert_StringTou64>:


Std_StatusType Convert_StringTou64 (u64* Address_Number, pu8 Address_str){
     800:	2f 92       	push	r2
     802:	3f 92       	push	r3
     804:	4f 92       	push	r4
     806:	5f 92       	push	r5
     808:	6f 92       	push	r6
     80a:	7f 92       	push	r7
     80c:	8f 92       	push	r8
     80e:	9f 92       	push	r9
     810:	af 92       	push	r10
     812:	bf 92       	push	r11
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	6e 97       	sbiw	r28, 0x1e	; 30
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	9c 87       	std	Y+12, r25	; 0x0c
     836:	8b 87       	std	Y+11, r24	; 0x0b
     838:	7e 87       	std	Y+14, r23	; 0x0e
     83a:	6d 87       	std	Y+13, r22	; 0x0d

			Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     83c:	19 82       	std	Y+1, r1	; 0x01
			u8 Loc_u8Counter = 0;
     83e:	1a 82       	std	Y+2, r1	; 0x02
			u64 Loc_u64Result = 0;
     840:	1b 82       	std	Y+3, r1	; 0x03
     842:	1c 82       	std	Y+4, r1	; 0x04
     844:	1d 82       	std	Y+5, r1	; 0x05
     846:	1e 82       	std	Y+6, r1	; 0x06
     848:	1f 82       	std	Y+7, r1	; 0x07
     84a:	18 86       	std	Y+8, r1	; 0x08
     84c:	19 86       	std	Y+9, r1	; 0x09
     84e:	1a 86       	std	Y+10, r1	; 0x0a
			if(NULL == Address_str || NULL == Address_Number ){
     850:	8d 85       	ldd	r24, Y+13	; 0x0d
     852:	9e 85       	ldd	r25, Y+14	; 0x0e
     854:	89 2b       	or	r24, r25
     856:	21 f0       	breq	.+8      	; 0x860 <__stack+0x1>
     858:	8b 85       	ldd	r24, Y+11	; 0x0b
     85a:	9c 85       	ldd	r25, Y+12	; 0x0c
     85c:	89 2b       	or	r24, r25
     85e:	19 f4       	brne	.+6      	; 0x866 <__stack+0x7>
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	b4 c0       	rjmp	.+360    	; 0x9ce <__stack+0x16f>
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     866:	1a 82       	std	Y+2, r1	; 0x02
     868:	8c c0       	rjmp	.+280    	; 0x982 <__stack+0x123>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
     86a:	2b 81       	ldd	r18, Y+3	; 0x03
     86c:	3c 81       	ldd	r19, Y+4	; 0x04
     86e:	4d 81       	ldd	r20, Y+5	; 0x05
     870:	5e 81       	ldd	r21, Y+6	; 0x06
     872:	6f 81       	ldd	r22, Y+7	; 0x07
     874:	78 85       	ldd	r23, Y+8	; 0x08
     876:	89 85       	ldd	r24, Y+9	; 0x09
     878:	9a 85       	ldd	r25, Y+10	; 0x0a
     87a:	22 2e       	mov	r2, r18
     87c:	33 2e       	mov	r3, r19
     87e:	44 2e       	mov	r4, r20
     880:	55 2e       	mov	r5, r21
     882:	66 2e       	mov	r6, r22
     884:	77 2e       	mov	r7, r23
     886:	88 2e       	mov	r8, r24
     888:	99 2e       	mov	r9, r25
     88a:	22 2d       	mov	r18, r2
     88c:	33 2d       	mov	r19, r3
     88e:	44 2d       	mov	r20, r4
     890:	55 2d       	mov	r21, r5
     892:	66 2d       	mov	r22, r6
     894:	77 2d       	mov	r23, r7
     896:	88 2d       	mov	r24, r8
     898:	99 2d       	mov	r25, r9
     89a:	01 e0       	ldi	r16, 0x01	; 1
     89c:	0e 94 ad 13 	call	0x275a	; 0x275a <__ashldi3>
     8a0:	a2 2e       	mov	r10, r18
     8a2:	b3 2e       	mov	r11, r19
     8a4:	c4 2e       	mov	r12, r20
     8a6:	d5 2e       	mov	r13, r21
     8a8:	e6 2e       	mov	r14, r22
     8aa:	f7 2e       	mov	r15, r23
     8ac:	08 2f       	mov	r16, r24
     8ae:	19 2f       	mov	r17, r25
     8b0:	2a 2c       	mov	r2, r10
     8b2:	3b 2c       	mov	r3, r11
     8b4:	4c 2c       	mov	r4, r12
     8b6:	5d 2c       	mov	r5, r13
     8b8:	6e 2c       	mov	r6, r14
     8ba:	7f 2c       	mov	r7, r15
     8bc:	80 2e       	mov	r8, r16
     8be:	91 2e       	mov	r9, r17
     8c0:	22 2d       	mov	r18, r2
     8c2:	33 2d       	mov	r19, r3
     8c4:	44 2d       	mov	r20, r4
     8c6:	55 2d       	mov	r21, r5
     8c8:	66 2d       	mov	r22, r6
     8ca:	77 2d       	mov	r23, r7
     8cc:	88 2d       	mov	r24, r8
     8ce:	99 2d       	mov	r25, r9
     8d0:	02 e0       	ldi	r16, 0x02	; 2
     8d2:	0e 94 ad 13 	call	0x275a	; 0x275a <__ashldi3>
     8d6:	2f 8b       	std	Y+23, r18	; 0x17
     8d8:	38 8f       	std	Y+24, r19	; 0x18
     8da:	49 8f       	std	Y+25, r20	; 0x19
     8dc:	5a 8f       	std	Y+26, r21	; 0x1a
     8de:	6b 8f       	std	Y+27, r22	; 0x1b
     8e0:	7c 8f       	std	Y+28, r23	; 0x1c
     8e2:	8d 8f       	std	Y+29, r24	; 0x1d
     8e4:	9e 8f       	std	Y+30, r25	; 0x1e
     8e6:	22 2d       	mov	r18, r2
     8e8:	33 2d       	mov	r19, r3
     8ea:	44 2d       	mov	r20, r4
     8ec:	55 2d       	mov	r21, r5
     8ee:	66 2d       	mov	r22, r6
     8f0:	77 2d       	mov	r23, r7
     8f2:	88 2d       	mov	r24, r8
     8f4:	99 2d       	mov	r25, r9
     8f6:	af 88       	ldd	r10, Y+23	; 0x17
     8f8:	b8 8c       	ldd	r11, Y+24	; 0x18
     8fa:	c9 8c       	ldd	r12, Y+25	; 0x19
     8fc:	da 8c       	ldd	r13, Y+26	; 0x1a
     8fe:	eb 8c       	ldd	r14, Y+27	; 0x1b
     900:	fc 8c       	ldd	r15, Y+28	; 0x1c
     902:	0d 8d       	ldd	r16, Y+29	; 0x1d
     904:	1e 8d       	ldd	r17, Y+30	; 0x1e
     906:	0e 94 c6 13 	call	0x278c	; 0x278c <__adddi3>
     90a:	a2 2e       	mov	r10, r18
     90c:	b3 2e       	mov	r11, r19
     90e:	c4 2e       	mov	r12, r20
     910:	d5 2e       	mov	r13, r21
     912:	e6 2e       	mov	r14, r22
     914:	f7 2e       	mov	r15, r23
     916:	08 2f       	mov	r16, r24
     918:	19 2f       	mov	r17, r25
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	2d 85       	ldd	r18, Y+13	; 0x0d
     922:	3e 85       	ldd	r19, Y+14	; 0x0e
     924:	82 0f       	add	r24, r18
     926:	93 1f       	adc	r25, r19
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	c0 97       	sbiw	r24, 0x30	; 48
     932:	98 8b       	std	Y+16, r25	; 0x10
     934:	8f 87       	std	Y+15, r24	; 0x0f
     936:	89 2f       	mov	r24, r25
     938:	88 0f       	add	r24, r24
     93a:	88 0b       	sbc	r24, r24
     93c:	89 8b       	std	Y+17, r24	; 0x11
     93e:	8a 8b       	std	Y+18, r24	; 0x12
     940:	8b 8b       	std	Y+19, r24	; 0x13
     942:	8c 8b       	std	Y+20, r24	; 0x14
     944:	8d 8b       	std	Y+21, r24	; 0x15
     946:	8e 8b       	std	Y+22, r24	; 0x16
     948:	2a 2d       	mov	r18, r10
     94a:	3b 2d       	mov	r19, r11
     94c:	4c 2d       	mov	r20, r12
     94e:	5d 2d       	mov	r21, r13
     950:	6e 2d       	mov	r22, r14
     952:	7f 2d       	mov	r23, r15
     954:	80 2f       	mov	r24, r16
     956:	91 2f       	mov	r25, r17
     958:	af 84       	ldd	r10, Y+15	; 0x0f
     95a:	b8 88       	ldd	r11, Y+16	; 0x10
     95c:	c9 88       	ldd	r12, Y+17	; 0x11
     95e:	da 88       	ldd	r13, Y+18	; 0x12
     960:	eb 88       	ldd	r14, Y+19	; 0x13
     962:	fc 88       	ldd	r15, Y+20	; 0x14
     964:	0d 89       	ldd	r16, Y+21	; 0x15
     966:	1e 89       	ldd	r17, Y+22	; 0x16
     968:	0e 94 c6 13 	call	0x278c	; 0x278c <__adddi3>
     96c:	2b 83       	std	Y+3, r18	; 0x03
     96e:	3c 83       	std	Y+4, r19	; 0x04
     970:	4d 83       	std	Y+5, r20	; 0x05
     972:	5e 83       	std	Y+6, r21	; 0x06
     974:	6f 83       	std	Y+7, r22	; 0x07
     976:	78 87       	std	Y+8, r23	; 0x08
     978:	89 87       	std	Y+9, r24	; 0x09
     97a:	9a 87       	std	Y+10, r25	; 0x0a
				Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
			}

			else{

				for(Loc_u8Counter = 0; Address_str[Loc_u8Counter];++Loc_u8Counter){
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	8a 83       	std	Y+2, r24	; 0x02
     982:	8a 81       	ldd	r24, Y+2	; 0x02
     984:	88 2f       	mov	r24, r24
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	2d 85       	ldd	r18, Y+13	; 0x0d
     98a:	3e 85       	ldd	r19, Y+14	; 0x0e
     98c:	82 0f       	add	r24, r18
     98e:	93 1f       	adc	r25, r19
     990:	fc 01       	movw	r30, r24
     992:	80 81       	ld	r24, Z
     994:	88 23       	and	r24, r24
     996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x13b>
     998:	68 cf       	rjmp	.-304    	; 0x86a <__stack+0xb>
					Loc_u64Result = Loc_u64Result*10 +  (Address_str[Loc_u8Counter]-'0');
				}

				*Address_Number = Loc_u64Result;
     99a:	8b 85       	ldd	r24, Y+11	; 0x0b
     99c:	9c 85       	ldd	r25, Y+12	; 0x0c
     99e:	2b 81       	ldd	r18, Y+3	; 0x03
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
     9a4:	2c 81       	ldd	r18, Y+4	; 0x04
     9a6:	fc 01       	movw	r30, r24
     9a8:	21 83       	std	Z+1, r18	; 0x01
     9aa:	2d 81       	ldd	r18, Y+5	; 0x05
     9ac:	fc 01       	movw	r30, r24
     9ae:	22 83       	std	Z+2, r18	; 0x02
     9b0:	2e 81       	ldd	r18, Y+6	; 0x06
     9b2:	fc 01       	movw	r30, r24
     9b4:	23 83       	std	Z+3, r18	; 0x03
     9b6:	2f 81       	ldd	r18, Y+7	; 0x07
     9b8:	fc 01       	movw	r30, r24
     9ba:	24 83       	std	Z+4, r18	; 0x04
     9bc:	28 85       	ldd	r18, Y+8	; 0x08
     9be:	fc 01       	movw	r30, r24
     9c0:	25 83       	std	Z+5, r18	; 0x05
     9c2:	29 85       	ldd	r18, Y+9	; 0x09
     9c4:	fc 01       	movw	r30, r24
     9c6:	26 83       	std	Z+6, r18	; 0x06
     9c8:	2a 85       	ldd	r18, Y+10	; 0x0a
     9ca:	fc 01       	movw	r30, r24
     9cc:	27 83       	std	Z+7, r18	; 0x07
			}

			return Loc_enuStatus;
     9ce:	89 81       	ldd	r24, Y+1	; 0x01

}
     9d0:	6e 96       	adiw	r28, 0x1e	; 30
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	7f 90       	pop	r7
     9f6:	6f 90       	pop	r6
     9f8:	5f 90       	pop	r5
     9fa:	4f 90       	pop	r4
     9fc:	3f 90       	pop	r3
     9fe:	2f 90       	pop	r2
     a00:	08 95       	ret

00000a02 <Convert_BCDToInt>:


Std_StatusType Convert_BCDToInt(u8 Copy_u8BCDdata, u8* Address_Asnwer){
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	00 d0       	rcall	.+0      	; 0xa08 <Convert_BCDToInt+0x6>
     a08:	00 d0       	rcall	.+0      	; 0xa0a <Convert_BCDToInt+0x8>
     a0a:	1f 92       	push	r1
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	8b 83       	std	Y+3, r24	; 0x03
     a12:	7d 83       	std	Y+5, r23	; 0x05
     a14:	6c 83       	std	Y+4, r22	; 0x04
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     a16:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Counter = ONE_VALUE;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == Address_Asnwer){
     a1c:	8c 81       	ldd	r24, Y+4	; 0x04
     a1e:	9d 81       	ldd	r25, Y+5	; 0x05
     a20:	89 2b       	or	r24, r25
     a22:	19 f4       	brne	.+6      	; 0xa2a <Convert_BCDToInt+0x28>
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	1d c0       	rjmp	.+58     	; 0xa64 <Convert_BCDToInt+0x62>
	}
	else{
		*Address_Asnwer = ZERO_VALUE;
     a2a:	8c 81       	ldd	r24, Y+4	; 0x04
     a2c:	9d 81       	ldd	r25, Y+5	; 0x05
     a2e:	fc 01       	movw	r30, r24
     a30:	10 82       	st	Z, r1

			*Address_Asnwer = GET_HIGHEST_NIBBLE(Copy_u8BCDdata);
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	28 2f       	mov	r18, r24
     a36:	22 95       	swap	r18
     a38:	2f 70       	andi	r18, 0x0F	; 15
     a3a:	8c 81       	ldd	r24, Y+4	; 0x04
     a3c:	9d 81       	ldd	r25, Y+5	; 0x05
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
			(*Address_Asnwer) =(*Address_Asnwer)*10 + GET_LOWEST_NIBBLE(Copy_u8BCDdata);
     a42:	8c 81       	ldd	r24, Y+4	; 0x04
     a44:	9d 81       	ldd	r25, Y+5	; 0x05
     a46:	fc 01       	movw	r30, r24
     a48:	80 81       	ld	r24, Z
     a4a:	88 0f       	add	r24, r24
     a4c:	98 2f       	mov	r25, r24
     a4e:	99 0f       	add	r25, r25
     a50:	99 0f       	add	r25, r25
     a52:	98 0f       	add	r25, r24
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	8f 70       	andi	r24, 0x0F	; 15
     a58:	29 2f       	mov	r18, r25
     a5a:	28 0f       	add	r18, r24
     a5c:	8c 81       	ldd	r24, Y+4	; 0x04
     a5e:	9d 81       	ldd	r25, Y+5	; 0x05
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18



	}

	return Loc_enuStatus;
     a64:	89 81       	ldd	r24, Y+1	; 0x01

}
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <Convert_VoltToTempLm35>:

Std_StatusType Convert_VoltToTempLm35(f32 Copy_f32Volt, u16* Address_Result){
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	27 97       	sbiw	r28, 0x07	; 7
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	6a 83       	std	Y+2, r22	; 0x02
     a8c:	7b 83       	std	Y+3, r23	; 0x03
     a8e:	8c 83       	std	Y+4, r24	; 0x04
     a90:	9d 83       	std	Y+5, r25	; 0x05
     a92:	5f 83       	std	Y+7, r21	; 0x07
     a94:	4e 83       	std	Y+6, r20	; 0x06
	Std_StatusType Loc_enuStatus = STD_STATUS_OK;
     a96:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == Address_Result){
     a98:	8e 81       	ldd	r24, Y+6	; 0x06
     a9a:	9f 81       	ldd	r25, Y+7	; 0x07
     a9c:	89 2b       	or	r24, r25
     a9e:	19 f4       	brne	.+6      	; 0xaa6 <Convert_VoltToTempLm35+0x30>
		Loc_enuStatus = STD_STATUS_NULL_POINTER_ADDRESS;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	18 c0       	rjmp	.+48     	; 0xad6 <Convert_VoltToTempLm35+0x60>
	}
	else{
		*Address_Result = Copy_f32Volt*100;
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	48 ec       	ldi	r20, 0xC8	; 200
     aac:	52 e4       	ldi	r21, 0x42	; 66
     aae:	6a 81       	ldd	r22, Y+2	; 0x02
     ab0:	7b 81       	ldd	r23, Y+3	; 0x03
     ab2:	8c 81       	ldd	r24, Y+4	; 0x04
     ab4:	9d 81       	ldd	r25, Y+5	; 0x05
     ab6:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3>
     aba:	dc 01       	movw	r26, r24
     abc:	cb 01       	movw	r24, r22
     abe:	bc 01       	movw	r22, r24
     ac0:	cd 01       	movw	r24, r26
     ac2:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixunssfsi>
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	9c 01       	movw	r18, r24
     acc:	8e 81       	ldd	r24, Y+6	; 0x06
     ace:	9f 81       	ldd	r25, Y+7	; 0x07
     ad0:	fc 01       	movw	r30, r24
     ad2:	31 83       	std	Z+1, r19	; 0x01
     ad4:	20 83       	st	Z, r18

	}

	return Loc_enuStatus;
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ad8:	27 96       	adiw	r28, 0x07	; 7
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <Timer0_enuInit>:
static  u8 Timer0_InitValue;
/********************************** Software Interfaces Declarations *******************/



Timer0_StatusErrorType Timer0_enuInit(const Timer0_ConfigType* Address_Timer0){
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <Timer0_enuInit+0x6>
     af0:	1f 92       	push	r1
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	9b 83       	std	Y+3, r25	; 0x03
     af8:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     afe:	8a 81       	ldd	r24, Y+2	; 0x02
     b00:	9b 81       	ldd	r25, Y+3	; 0x03
     b02:	89 2b       	or	r24, r25
     b04:	19 f4       	brne	.+6      	; 0xb0c <Timer0_enuInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	89 83       	std	Y+1, r24	; 0x01
     b0a:	97 c0       	rjmp	.+302    	; 0xc3a <Timer0_enuInit+0x150>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	        Timer0_Disable();
     b0c:	83 e5       	ldi	r24, 0x53	; 83
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	23 e5       	ldi	r18, 0x53	; 83
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	f9 01       	movw	r30, r18
     b16:	20 81       	ld	r18, Z
     b18:	28 7f       	andi	r18, 0xF8	; 248
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18

		    	        /* Select Mode timer */
		    	        Timer0_SelectMode((Address_Timer0->select_mode));
     b1e:	83 e5       	ldi	r24, 0x53	; 83
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	23 e5       	ldi	r18, 0x53	; 83
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	42 2f       	mov	r20, r18
     b2c:	4f 7b       	andi	r20, 0xBF	; 191
     b2e:	2a 81       	ldd	r18, Y+2	; 0x02
     b30:	3b 81       	ldd	r19, Y+3	; 0x03
     b32:	f9 01       	movw	r30, r18
     b34:	21 81       	ldd	r18, Z+1	; 0x01
     b36:	22 2f       	mov	r18, r18
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	21 70       	andi	r18, 0x01	; 1
     b3c:	33 27       	eor	r19, r19
     b3e:	00 24       	eor	r0, r0
     b40:	36 95       	lsr	r19
     b42:	27 95       	ror	r18
     b44:	07 94       	ror	r0
     b46:	36 95       	lsr	r19
     b48:	27 95       	ror	r18
     b4a:	07 94       	ror	r0
     b4c:	32 2f       	mov	r19, r18
     b4e:	20 2d       	mov	r18, r0
     b50:	24 2b       	or	r18, r20
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
     b56:	83 e5       	ldi	r24, 0x53	; 83
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	23 e5       	ldi	r18, 0x53	; 83
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	f9 01       	movw	r30, r18
     b60:	20 81       	ld	r18, Z
     b62:	42 2f       	mov	r20, r18
     b64:	47 7f       	andi	r20, 0xF7	; 247
     b66:	2a 81       	ldd	r18, Y+2	; 0x02
     b68:	3b 81       	ldd	r19, Y+3	; 0x03
     b6a:	f9 01       	movw	r30, r18
     b6c:	21 81       	ldd	r18, Z+1	; 0x01
     b6e:	26 95       	lsr	r18
     b70:	22 2f       	mov	r18, r18
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	21 70       	andi	r18, 0x01	; 1
     b76:	33 27       	eor	r19, r19
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	24 2b       	or	r18, r20
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
     b8a:	83 e5       	ldi	r24, 0x53	; 83
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	23 e5       	ldi	r18, 0x53	; 83
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	f9 01       	movw	r30, r18
     b94:	20 81       	ld	r18, Z
     b96:	42 2f       	mov	r20, r18
     b98:	4f 7e       	andi	r20, 0xEF	; 239
     b9a:	2a 81       	ldd	r18, Y+2	; 0x02
     b9c:	3b 81       	ldd	r19, Y+3	; 0x03
     b9e:	f9 01       	movw	r30, r18
     ba0:	21 81       	ldd	r18, Z+1	; 0x01
     ba2:	26 95       	lsr	r18
     ba4:	26 95       	lsr	r18
     ba6:	22 2f       	mov	r18, r18
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	21 70       	andi	r18, 0x01	; 1
     bac:	33 27       	eor	r19, r19
     bae:	22 95       	swap	r18
     bb0:	32 95       	swap	r19
     bb2:	30 7f       	andi	r19, 0xF0	; 240
     bb4:	32 27       	eor	r19, r18
     bb6:	20 7f       	andi	r18, 0xF0	; 240
     bb8:	32 27       	eor	r19, r18
     bba:	24 2b       	or	r18, r20
     bbc:	fc 01       	movw	r30, r24
     bbe:	20 83       	st	Z, r18
     bc0:	83 e5       	ldi	r24, 0x53	; 83
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	23 e5       	ldi	r18, 0x53	; 83
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	f9 01       	movw	r30, r18
     bca:	20 81       	ld	r18, Z
     bcc:	42 2f       	mov	r20, r18
     bce:	4f 7d       	andi	r20, 0xDF	; 223
     bd0:	2a 81       	ldd	r18, Y+2	; 0x02
     bd2:	3b 81       	ldd	r19, Y+3	; 0x03
     bd4:	f9 01       	movw	r30, r18
     bd6:	21 81       	ldd	r18, Z+1	; 0x01
     bd8:	26 95       	lsr	r18
     bda:	26 95       	lsr	r18
     bdc:	26 95       	lsr	r18
     bde:	22 2f       	mov	r18, r18
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	21 70       	andi	r18, 0x01	; 1
     be4:	33 27       	eor	r19, r19
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	22 95       	swap	r18
     bec:	32 95       	swap	r19
     bee:	30 7f       	andi	r19, 0xF0	; 240
     bf0:	32 27       	eor	r19, r18
     bf2:	20 7f       	andi	r18, 0xF0	; 240
     bf4:	32 27       	eor	r19, r18
     bf6:	24 2b       	or	r18, r20
     bf8:	fc 01       	movw	r30, r24
     bfa:	20 83       	st	Z, r18

		    	        Timer0_InitValue = Address_Timer0->init_value;
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	9b 81       	ldd	r25, Y+3	; 0x03
     c00:	fc 01       	movw	r30, r24
     c02:	82 81       	ldd	r24, Z+2	; 0x02
     c04:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Timer0_InitValue>
		    	        /* Update Init Value*/
		    	       Loc_enuTimer0Status= Timer0_enuSetValue(Address_Timer0, Address_Timer0->init_value);
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	9b 81       	ldd	r25, Y+3	; 0x03
     c0c:	fc 01       	movw	r30, r24
     c0e:	22 81       	ldd	r18, Z+2	; 0x02
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	9b 81       	ldd	r25, Y+3	; 0x03
     c14:	62 2f       	mov	r22, r18
     c16:	0e 94 a7 06 	call	0xd4e	; 0xd4e <Timer0_enuSetValue>
     c1a:	89 83       	std	Y+1, r24	; 0x01

		    	        /* Enable Timer0 Peripheral */
		    	        Timer0_Enable(Address_Timer0->prescaler_value);
     c1c:	83 e5       	ldi	r24, 0x53	; 83
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	23 e5       	ldi	r18, 0x53	; 83
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	f9 01       	movw	r30, r18
     c26:	20 81       	ld	r18, Z
     c28:	42 2f       	mov	r20, r18
     c2a:	48 7f       	andi	r20, 0xF8	; 248
     c2c:	2a 81       	ldd	r18, Y+2	; 0x02
     c2e:	3b 81       	ldd	r19, Y+3	; 0x03
     c30:	f9 01       	movw	r30, r18
     c32:	20 81       	ld	r18, Z
     c34:	24 2b       	or	r18, r20
     c36:	fc 01       	movw	r30, r24
     c38:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <Timer0_enuDeInit>:

Timer0_StatusErrorType Timer0_enuDeInit(const Timer0_ConfigType* Address_Timer0){
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <Timer0_enuDeInit+0x6>
     c4e:	1f 92       	push	r1
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	9b 83       	std	Y+3, r25	; 0x03
     c56:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	9b 81       	ldd	r25, Y+3	; 0x03
     c60:	89 2b       	or	r24, r25
     c62:	19 f4       	brne	.+6      	; 0xc6a <Timer0_enuDeInit+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	09 c0       	rjmp	.+18     	; 0xc7c <Timer0_enuDeInit+0x34>
		    }
		    else{

		    	/* Disable Timer0 Peripheral */
		    	Timer0_Disable();
     c6a:	83 e5       	ldi	r24, 0x53	; 83
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	23 e5       	ldi	r18, 0x53	; 83
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	f9 01       	movw	r30, r18
     c74:	20 81       	ld	r18, Z
     c76:	28 7f       	andi	r18, 0xF8	; 248
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18

		    }

		    return Loc_enuTimer0Status;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <Timer0_enuEnableInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableInterrupt(const Timer0_ConfigType* Address_Timer0){
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <Timer0_enuEnableInterrupt+0x6>
     c90:	1f 92       	push	r1
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	9b 83       	std	Y+3, r25	; 0x03
     c98:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	9b 81       	ldd	r25, Y+3	; 0x03
     ca2:	89 2b       	or	r24, r25
     ca4:	19 f4       	brne	.+6      	; 0xcac <Timer0_enuEnableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	19 c0       	rjmp	.+50     	; 0xcde <Timer0_enuEnableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	9b 81       	ldd	r25, Y+3	; 0x03
     cb0:	fc 01       	movw	r30, r24
     cb2:	81 81       	ldd	r24, Z+1	; 0x01
     cb4:	88 23       	and	r24, r24
     cb6:	51 f4       	brne	.+20     	; 0xccc <Timer0_enuEnableInterrupt+0x42>

		    		Timer0_EnableOverviewInterrupt();
     cb8:	89 e5       	ldi	r24, 0x59	; 89
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	29 e5       	ldi	r18, 0x59	; 89
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	f9 01       	movw	r30, r18
     cc2:	20 81       	ld	r18, Z
     cc4:	21 60       	ori	r18, 0x01	; 1
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 83       	st	Z, r18
     cca:	09 c0       	rjmp	.+18     	; 0xcde <Timer0_enuEnableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_EnableComparePwmInterrupt();
     ccc:	89 e5       	ldi	r24, 0x59	; 89
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	29 e5       	ldi	r18, 0x59	; 89
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	f9 01       	movw	r30, r18
     cd6:	20 81       	ld	r18, Z
     cd8:	22 60       	ori	r18, 0x02	; 2
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
     cde:	89 81       	ldd	r24, Y+1	; 0x01
}
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <Timer0_enuDisableInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableInterrupt(const Timer0_ConfigType* Address_Timer0){
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <Timer0_enuDisableInterrupt+0x6>
     cf2:	1f 92       	push	r1
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	9b 83       	std	Y+3, r25	; 0x03
     cfa:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	9b 81       	ldd	r25, Y+3	; 0x03
     d04:	89 2b       	or	r24, r25
     d06:	19 f4       	brne	.+6      	; 0xd0e <Timer0_enuDisableInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	19 c0       	rjmp	.+50     	; 0xd40 <Timer0_enuDisableInterrupt+0x54>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	9b 81       	ldd	r25, Y+3	; 0x03
     d12:	fc 01       	movw	r30, r24
     d14:	81 81       	ldd	r24, Z+1	; 0x01
     d16:	88 23       	and	r24, r24
     d18:	51 f4       	brne	.+20     	; 0xd2e <Timer0_enuDisableInterrupt+0x42>

		    		Timer0_DisableOverviewInterrupt();
     d1a:	89 e5       	ldi	r24, 0x59	; 89
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	29 e5       	ldi	r18, 0x59	; 89
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	f9 01       	movw	r30, r18
     d24:	20 81       	ld	r18, Z
     d26:	2e 7f       	andi	r18, 0xFE	; 254
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
     d2c:	09 c0       	rjmp	.+18     	; 0xd40 <Timer0_enuDisableInterrupt+0x54>


		    	}
		    	else{
		    		Timer0_DisbleComparePwmInterrupt();
     d2e:	89 e5       	ldi	r24, 0x59	; 89
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	29 e5       	ldi	r18, 0x59	; 89
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	2d 7f       	andi	r18, 0xFD	; 253
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
		    	}

		    }

		    return Loc_enuTimer0Status;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
}
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <Timer0_enuSetValue>:


Timer0_StatusErrorType Timer0_enuSetValue(const Timer0_ConfigType* Address_Timer0, u8 Copy_u8Value){
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <Timer0_enuSetValue+0x6>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <Timer0_enuSetValue+0x8>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	9b 83       	std	Y+3, r25	; 0x03
     d5c:	8a 83       	std	Y+2, r24	; 0x02
     d5e:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	9b 81       	ldd	r25, Y+3	; 0x03
     d68:	89 2b       	or	r24, r25
     d6a:	19 f4       	brne	.+6      	; 0xd72 <Timer0_enuSetValue+0x24>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	11 c0       	rjmp	.+34     	; 0xd94 <Timer0_enuSetValue+0x46>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	9b 81       	ldd	r25, Y+3	; 0x03
     d76:	fc 01       	movw	r30, r24
     d78:	81 81       	ldd	r24, Z+1	; 0x01
     d7a:	88 23       	and	r24, r24
     d7c:	31 f4       	brne	.+12     	; 0xd8a <Timer0_enuSetValue+0x3c>



		    		ASSIGN_REG(TCNT0,Copy_u8Value);
     d7e:	82 e5       	ldi	r24, 0x52	; 82
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
     d88:	05 c0       	rjmp	.+10     	; 0xd94 <Timer0_enuSetValue+0x46>

		    	}
		    	else{
		    		ASSIGN_REG(OCR0,Copy_u8Value);
     d8a:	8c e5       	ldi	r24, 0x5C	; 92
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	2c 81       	ldd	r18, Y+4	; 0x04
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18



		    }

		    return Loc_enuTimer0Status;
     d94:	89 81       	ldd	r24, Y+1	; 0x01
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <Timer0_enuGetTimeElapsed>:
Timer0_StatusErrorType Timer0_enuGetTimeElapsed(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	00 d0       	rcall	.+0      	; 0xdaa <Timer0_enuGetTimeElapsed+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <Timer0_enuGetTimeElapsed+0x8>
     dac:	1f 92       	push	r1
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	9b 83       	std	Y+3, r25	; 0x03
     db4:	8a 83       	std	Y+2, r24	; 0x02
     db6:	7d 83       	std	Y+5, r23	; 0x05
     db8:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	89 2b       	or	r24, r25
     dc4:	19 f4       	brne	.+6      	; 0xdcc <Timer0_enuGetTimeElapsed+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	0b c0       	rjmp	.+22     	; 0xde2 <Timer0_enuGetTimeElapsed+0x3e>
		    }
		    else{

		    	*Address_Value = TCNT0;
     dcc:	82 e5       	ldi	r24, 0x52	; 82
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	fc 01       	movw	r30, r24
     dde:	31 83       	std	Z+1, r19	; 0x01
     de0:	20 83       	st	Z, r18
		    }

		    return Loc_enuTimer0Status;
     de2:	89 81       	ldd	r24, Y+1	; 0x01
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <Timer0_enuGetRemaining>:
Timer0_StatusErrorType Timer0_enuGetRemaining(const Timer0_ConfigType* Address_Timer0, u16* Address_Value){
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	00 d0       	rcall	.+0      	; 0xdfa <Timer0_enuGetRemaining+0x6>
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <Timer0_enuGetRemaining+0x8>
     dfc:	1f 92       	push	r1
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 83       	std	Y+2, r24	; 0x02
     e06:	7d 83       	std	Y+5, r23	; 0x05
     e08:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	9b 81       	ldd	r25, Y+3	; 0x03
     e12:	89 2b       	or	r24, r25
     e14:	11 f4       	brne	.+4      	; 0xe1a <Timer0_enuGetRemaining+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	89 83       	std	Y+1, r24	; 0x01
		    else{


		    }

		    return Loc_enuTimer0Status;
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <Timer0_enuSetCallbackFunction>:


Timer0_StatusErrorType Timer0_enuSetCallbackFunction(const Timer0_ConfigType* Address_Timer0,void (*callback)(void)){
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	00 d0       	rcall	.+0      	; 0xe32 <Timer0_enuSetCallbackFunction+0x6>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Timer0_enuSetCallbackFunction+0x8>
     e34:	1f 92       	push	r1
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	7d 83       	std	Y+5, r23	; 0x05
     e40:	6c 83       	std	Y+4, r22	; 0x04
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	9b 81       	ldd	r25, Y+3	; 0x03
     e4a:	89 2b       	or	r24, r25
     e4c:	19 f4       	brne	.+6      	; 0xe54 <Timer0_enuSetCallbackFunction+0x28>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	13 c0       	rjmp	.+38     	; 0xe7a <Timer0_enuSetCallbackFunction+0x4e>
		    }
		    else{

		    	if(Address_Timer0->select_mode == TIMER0_SELECT_MODE_NORMAL){
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	9b 81       	ldd	r25, Y+3	; 0x03
     e58:	fc 01       	movw	r30, r24
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	88 23       	and	r24, r24
     e5e:	39 f4       	brne	.+14     	; 0xe6e <Timer0_enuSetCallbackFunction+0x42>

		    		Timer0_OverflowInterruptHandler = callback;
     e60:	8c 81       	ldd	r24, Y+4	; 0x04
     e62:	9d 81       	ldd	r25, Y+5	; 0x05
     e64:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__data_end+0x1>
     e68:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <Timer0_enuSetCallbackFunction+0x4e>


		    	}
		    	else{
		    		Timer0_CompareInterruptHandler = callback;
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <Timer0_CompareInterruptHandler+0x1>
     e76:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <Timer0_CompareInterruptHandler>
		    	}


		    }

		    return Loc_enuTimer0Status;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <Timer0_enuEnableOverflowInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableOverflowInterrupt(void){
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	1f 92       	push	r1
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableOverviewInterrupt();
     e9a:	89 e5       	ldi	r24, 0x59	; 89
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	29 e5       	ldi	r18, 0x59	; 89
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	f9 01       	movw	r30, r18
     ea4:	20 81       	ld	r18, Z
     ea6:	21 60       	ori	r18, 0x01	; 1
     ea8:	fc 01       	movw	r30, r24
     eaa:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
     eac:	89 81       	ldd	r24, Y+1	; 0x01
}
     eae:	0f 90       	pop	r0
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <Timer0_enuEnableCaptureInterrupt>:

Timer0_StatusErrorType Timer0_enuEnableCaptureInterrupt(void){
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	1f 92       	push	r1
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	89 83       	std	Y+1, r24	; 0x01

			Timer0_EnableComparePwmInterrupt();
     ec4:	89 e5       	ldi	r24, 0x59	; 89
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	29 e5       	ldi	r18, 0x59	; 89
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	f9 01       	movw	r30, r18
     ece:	20 81       	ld	r18, Z
     ed0:	22 60       	ori	r18, 0x02	; 2
     ed2:	fc 01       	movw	r30, r24
     ed4:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed8:	0f 90       	pop	r0
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <Timer0_enuSetCallbackOverflowInterrupt>:


Timer0_StatusErrorType Timer0_enuSetCallbackOverflowInterrupt(void (*callback)(void)){
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <Timer0_enuSetCallbackOverflowInterrupt+0x6>
     ee6:	1f 92       	push	r1
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9b 83       	std	Y+3, r25	; 0x03
     eee:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	89 2b       	or	r24, r25
     efa:	19 f4       	brne	.+6      	; 0xf02 <Timer0_enuSetCallbackOverflowInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <Timer0_enuSetCallbackOverflowInterrupt+0x2e>
		    }

		    else{
		    		Timer0_OverflowInterruptHandler = callback;
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__data_end+0x1>
     f0a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>


		    }

		    return Loc_enuTimer0Status;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <Timer0_enuSetCallbackCompareInterrupt>:
Timer0_StatusErrorType Timer0_enuSetCallbackCompareInterrupt(void (*callback)(void)){
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	00 d0       	rcall	.+0      	; 0xf22 <Timer0_enuSetCallbackCompareInterrupt+0x6>
     f22:	1f 92       	push	r1
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	9b 83       	std	Y+3, r25	; 0x03
     f2a:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == callback){
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	9b 81       	ldd	r25, Y+3	; 0x03
     f34:	89 2b       	or	r24, r25
     f36:	19 f4       	brne	.+6      	; 0xf3e <Timer0_enuSetCallbackCompareInterrupt+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <Timer0_enuSetCallbackCompareInterrupt+0x2e>
		    }

		    else{
		    		Timer0_CompareInterruptHandler = callback;
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <Timer0_CompareInterruptHandler+0x1>
     f46:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <Timer0_CompareInterruptHandler>


		    }

		    return Loc_enuTimer0Status;
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <Timer0_enuDisableOverflowInterrupt>:


Timer0_StatusErrorType Timer0_enuDisableOverflowInterrupt(void){
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	1f 92       	push	r1
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	89 83       	std	Y+1, r24	; 0x01

			Timer0_DisableOverviewInterrupt();
     f66:	89 e5       	ldi	r24, 0x59	; 89
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	29 e5       	ldi	r18, 0x59	; 89
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	f9 01       	movw	r30, r18
     f70:	20 81       	ld	r18, Z
     f72:	2e 7f       	andi	r18, 0xFE	; 254
     f74:	fc 01       	movw	r30, r24
     f76:	20 83       	st	Z, r18

		    return Loc_enuTimer0Status;
     f78:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7a:	0f 90       	pop	r0
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <Timer0_enuDisableCaptureInterrupt>:

Timer0_StatusErrorType Timer0_enuDisableCaptureInterrupt(void){
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	1f 92       	push	r1
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62

		Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	89 83       	std	Y+1, r24	; 0x01

	  	Timer0_DisbleComparePwmInterrupt();
     f90:	89 e5       	ldi	r24, 0x59	; 89
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	29 e5       	ldi	r18, 0x59	; 89
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	f9 01       	movw	r30, r18
     f9a:	20 81       	ld	r18, Z
     f9c:	2d 7f       	andi	r18, 0xFD	; 253
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18

			    return Loc_enuTimer0Status;
     fa2:	89 81       	ldd	r24, Y+1	; 0x01

}
     fa4:	0f 90       	pop	r0
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <Timer0_enuCtcForcePinImmediatly>:



Timer0_StatusErrorType Timer0_enuCtcForcePinImmediatly(const Timer0_ConfigType* Address_Timer0){
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <Timer0_enuCtcForcePinImmediatly+0x6>
     fb2:	1f 92       	push	r1
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	9b 83       	std	Y+3, r25	; 0x03
     fba:	8a 83       	std	Y+2, r24	; 0x02
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	89 83       	std	Y+1, r24	; 0x01

		    if(NULL == Address_Timer0){
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	89 2b       	or	r24, r25
     fc6:	19 f4       	brne	.+6      	; 0xfce <Timer0_enuCtcForcePinImmediatly+0x22>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <Timer0_enuCtcForcePinImmediatly+0x34>
		    }
		    else{

		    	SET_BIT(TCCR0,FOC0_BIT);
     fce:	83 e5       	ldi	r24, 0x53	; 83
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	23 e5       	ldi	r18, 0x53	; 83
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	20 68       	ori	r18, 0x80	; 128
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18


		    }

		    return Loc_enuTimer0Status;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <Timer0_enuSetDutyCyclePwm>:


Timer0_StatusErrorType Timer0_enuSetDutyCyclePwm(const Timer0_ConfigType* Address_Timer0,u8 Copy_u8DutyCylePrecentage){
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <Timer0_enuSetDutyCyclePwm+0x6>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <Timer0_enuSetDutyCyclePwm+0x8>
     ff6:	1f 92       	push	r1
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    1000:	6d 83       	std	Y+5, r22	; 0x05
	Timer0_StatusErrorType Loc_enuTimer0Status = TIMER0_STATUS_OK;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	89 83       	std	Y+1, r24	; 0x01

//	u8 Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * 255);
	u8 Loc_u8DutyCycle;

		    if(NULL == Address_Timer0){
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	89 2b       	or	r24, r25
    100c:	19 f4       	brne	.+6      	; 0x1014 <Timer0_enuSetDutyCyclePwm+0x26>

		    	Loc_enuTimer0Status = TIMER0_STATUS_NULL_POINTER_ADDRESS;
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	79 c0       	rjmp	.+242    	; 0x1106 <Timer0_enuSetDutyCyclePwm+0x118>
		    }

		    else {

		    	Copy_u8DutyCylePrecentage = (Copy_u8DutyCylePrecentage >= 100) ? 100 :Copy_u8DutyCylePrecentage;
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	85 36       	cpi	r24, 0x65	; 101
    1018:	08 f0       	brcs	.+2      	; 0x101c <Timer0_enuSetDutyCyclePwm+0x2e>
    101a:	84 e6       	ldi	r24, 0x64	; 100
    101c:	8d 83       	std	Y+5, r24	; 0x05

		    	switch(Address_Timer0->select_mode){
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	fc 01       	movw	r30, r24
    1024:	81 81       	ldd	r24, Z+1	; 0x01
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	09 2e       	mov	r0, r25
    102c:	00 0c       	add	r0, r0
    102e:	aa 0b       	sbc	r26, r26
    1030:	bb 0b       	sbc	r27, r27
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	2f e0       	ldi	r18, 0x0F	; 15
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	84 1b       	sub	r24, r20
    103c:	95 0b       	sbc	r25, r21
    103e:	28 17       	cp	r18, r24
    1040:	39 07       	cpc	r19, r25
    1042:	08 f4       	brcc	.+2      	; 0x1046 <Timer0_enuSetDutyCyclePwm+0x58>
    1044:	60 c0       	rjmp	.+192    	; 0x1106 <Timer0_enuSetDutyCyclePwm+0x118>
    1046:	86 5d       	subi	r24, 0xD6	; 214
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	fc 01       	movw	r30, r24
    104c:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__tablejump2__>
		    	case  TIMER0_SELECT_MODE_NORMAL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_NORMAEL:
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_TOGGLE :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_CLEAR  :
		    	case  TIMER0_SELECT_MODE_CTC_CLEAR_TIME_COMPARE_MATCH_OC0_SET :
		    		Loc_enuTimer0Status = TIMER0_STATUS_FAIL;
    1050:	19 82       	std	Y+1, r1	; 0x01
		    		break;
    1052:	59 c0       	rjmp	.+178    	; 0x1106 <Timer0_enuSetDutyCyclePwm+0x118>
		    		/* i don't know what is the usage of this */
		    		break;

		    	case TIMER0_SELECT_MODE_PWM_FAST_INVERTED_OC0_SET_ON_MATCH_CLEAR_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_SET_ON_MATCH_UPCOUNTING_CLEAR_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = TIMER0_FULL_VALUE_IN_REGISTER- (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
    1054:	8d 81       	ldd	r24, Y+5	; 0x05
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__floatunsisf>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	48 ec       	ldi	r20, 0xC8	; 200
    1070:	52 e4       	ldi	r21, 0x42	; 66
    1072:	bc 01       	movw	r22, r24
    1074:	cd 01       	movw	r24, r26
    1076:	0e 94 41 14 	call	0x2882	; 0x2882 <__divsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	4f e7       	ldi	r20, 0x7F	; 127
    1084:	53 e4       	ldi	r21, 0x43	; 67
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	80 95       	com	r24
    10a0:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    10a2:	8c e5       	ldi	r24, 0x5C	; 92
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	2a 81       	ldd	r18, Y+2	; 0x02
    10a8:	fc 01       	movw	r30, r24
    10aa:	20 83       	st	Z, r18

		    		break;
    10ac:	2c c0       	rjmp	.+88     	; 0x1106 <Timer0_enuSetDutyCyclePwm+0x118>

		    	case TIMER0_SELECT_MODE_PWM_FAST_NOT_INVERTED_OC0_CLEAR_ON_MATCH_SET_AT_TOP:
		    	case TIMER0_SELECT_MODE_PWM_PHASE_CORRECT_OC0_CLEAR_ON_MATCH_UPCOUNTING_SET_ON_MATCH_DOWNCOUNTING:
		    		Loc_u8DutyCycle = (u8)((f32)Copy_u8DutyCylePrecentage/100 * TIMER0_FULL_VALUE_IN_REGISTER);
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a0 e0       	ldi	r26, 0x00	; 0
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__floatunsisf>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	48 ec       	ldi	r20, 0xC8	; 200
    10ca:	52 e4       	ldi	r21, 0x42	; 66
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 41 14 	call	0x2882	; 0x2882 <__divsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	4f e7       	ldi	r20, 0x7F	; 127
    10de:	53 e4       	ldi	r21, 0x43	; 67
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	8a 83       	std	Y+2, r24	; 0x02
		    		ASSIGN_REG(OCR0,Loc_u8DutyCycle);
    10fa:	8c e5       	ldi	r24, 0x5C	; 92
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18

		    		break;
    1104:	00 00       	nop

		    }


		    }
		    return Loc_enuTimer0Status;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <__vector_10>:


// ISR function For TIMER0 Compare Match
void __vector_10(void) __attribute__((signal));

void __vector_10(void){
    1118:	1f 92       	push	r1
    111a:	0f 92       	push	r0
    111c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62

	    if(NULL !=Timer0_CompareInterruptHandler ){
    1144:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <Timer0_CompareInterruptHandler>
    1148:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <Timer0_CompareInterruptHandler+0x1>
    114c:	89 2b       	or	r24, r25
    114e:	31 f0       	breq	.+12     	; 0x115c <__vector_10+0x44>
	    	Timer0_CompareInterruptHandler();
    1150:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <Timer0_CompareInterruptHandler>
    1154:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <Timer0_CompareInterruptHandler+0x1>
    1158:	fc 01       	movw	r30, r24
    115a:	09 95       	icall
	    }
	    else {/*  error in declaration */}

}
    115c:	00 00       	nop
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	bf 91       	pop	r27
    1168:	af 91       	pop	r26
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	7f 91       	pop	r23
    1170:	6f 91       	pop	r22
    1172:	5f 91       	pop	r21
    1174:	4f 91       	pop	r20
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_11>:


// ISR function For TIMER0 OverFlow
void __vector_11(void) __attribute__((signal));

void __vector_11(void){
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    118e:	0f 92       	push	r0
    1190:	11 24       	eor	r1, r1
    1192:	2f 93       	push	r18
    1194:	3f 93       	push	r19
    1196:	4f 93       	push	r20
    1198:	5f 93       	push	r21
    119a:	6f 93       	push	r22
    119c:	7f 93       	push	r23
    119e:	8f 93       	push	r24
    11a0:	9f 93       	push	r25
    11a2:	af 93       	push	r26
    11a4:	bf 93       	push	r27
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62

//	Timer0_DisableOverviewInterrupt();



    if(NULL !=Timer0_OverflowInterruptHandler ){
    11b2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
    11b6:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
    11ba:	89 2b       	or	r24, r25
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <__vector_11+0x50>

    	TCNT0 = Timer0_InitValue;
    11be:	82 e5       	ldi	r24, 0x52	; 82
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <Timer0_InitValue>
    11c6:	fc 01       	movw	r30, r24
    11c8:	20 83       	st	Z, r18
    	Timer0_OverflowInterruptHandler();
    11ca:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
    11ce:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <__data_end+0x1>
    11d2:	fc 01       	movw	r30, r24
    11d4:	09 95       	icall

    }
    else {/*  error in declaration */   }

//    Timer0_EnableOverviewInterrupt();
}
    11d6:	00 00       	nop
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <Spi_enuInit>:
/********************************** Data Type Declarations ****************************/


/********************************** Software Interfaces Declarations *******************/

Spi_StatusErrorType Spi_enuInit(const Spi_ConfigType* Address_Spi){
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	00 d0       	rcall	.+0      	; 0x1206 <Spi_enuInit+0x6>
    1206:	1f 92       	push	r1
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9b 83       	std	Y+3, r25	; 0x03
    120e:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_Spi){
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	89 2b       	or	r24, r25
    121a:	19 f4       	brne	.+6      	; 0x1222 <Spi_enuInit+0x22>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	8f c0       	rjmp	.+286    	; 0x1340 <Spi_enuInit+0x140>
	}
	else{

		/* Disable During Configuration */
		Spi_Disable();
    1222:	8d e2       	ldi	r24, 0x2D	; 45
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	2d e2       	ldi	r18, 0x2D	; 45
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	f9 01       	movw	r30, r18
    122c:	20 81       	ld	r18, Z
    122e:	2f 7b       	andi	r18, 0xBF	; 191
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18

		/* Select MasterSlaveType */
		Spi_SelectMasterSlave(Address_Spi->select_master_or_slave);
    1234:	8d e2       	ldi	r24, 0x2D	; 45
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	2d e2       	ldi	r18, 0x2D	; 45
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	f9 01       	movw	r30, r18
    123e:	20 81       	ld	r18, Z
    1240:	42 2f       	mov	r20, r18
    1242:	4f 7e       	andi	r20, 0xEF	; 239
    1244:	2a 81       	ldd	r18, Y+2	; 0x02
    1246:	3b 81       	ldd	r19, Y+3	; 0x03
    1248:	f9 01       	movw	r30, r18
    124a:	20 81       	ld	r18, Z
    124c:	22 2f       	mov	r18, r18
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	22 95       	swap	r18
    1252:	32 95       	swap	r19
    1254:	30 7f       	andi	r19, 0xF0	; 240
    1256:	32 27       	eor	r19, r18
    1258:	20 7f       	andi	r18, 0xF0	; 240
    125a:	32 27       	eor	r19, r18
    125c:	24 2b       	or	r18, r20
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18

		/* Select data ording */
		Spi_SelectDataOrding(Address_Spi->select_data_ording);
    1262:	8d e2       	ldi	r24, 0x2D	; 45
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2d e2       	ldi	r18, 0x2D	; 45
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	f9 01       	movw	r30, r18
    126c:	20 81       	ld	r18, Z
    126e:	42 2f       	mov	r20, r18
    1270:	4f 7d       	andi	r20, 0xDF	; 223
    1272:	2a 81       	ldd	r18, Y+2	; 0x02
    1274:	3b 81       	ldd	r19, Y+3	; 0x03
    1276:	f9 01       	movw	r30, r18
    1278:	21 81       	ldd	r18, Z+1	; 0x01
    127a:	22 2f       	mov	r18, r18
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	22 0f       	add	r18, r18
    1280:	33 1f       	adc	r19, r19
    1282:	22 95       	swap	r18
    1284:	32 95       	swap	r19
    1286:	30 7f       	andi	r19, 0xF0	; 240
    1288:	32 27       	eor	r19, r18
    128a:	20 7f       	andi	r18, 0xF0	; 240
    128c:	32 27       	eor	r19, r18
    128e:	24 2b       	or	r18, r20
    1290:	fc 01       	movw	r30, r24
    1292:	20 83       	st	Z, r18

		/* Select Polarity */
		Spi_SelectPolarity(Address_Spi->select_polarity);
    1294:	8d e2       	ldi	r24, 0x2D	; 45
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	2d e2       	ldi	r18, 0x2D	; 45
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	f9 01       	movw	r30, r18
    129e:	20 81       	ld	r18, Z
    12a0:	42 2f       	mov	r20, r18
    12a2:	47 7f       	andi	r20, 0xF7	; 247
    12a4:	2a 81       	ldd	r18, Y+2	; 0x02
    12a6:	3b 81       	ldd	r19, Y+3	; 0x03
    12a8:	f9 01       	movw	r30, r18
    12aa:	22 81       	ldd	r18, Z+2	; 0x02
    12ac:	22 2f       	mov	r18, r18
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	22 0f       	add	r18, r18
    12ba:	33 1f       	adc	r19, r19
    12bc:	24 2b       	or	r18, r20
    12be:	fc 01       	movw	r30, r24
    12c0:	20 83       	st	Z, r18

		/* Select Phase */
		Spi_SelectPhase(Address_Spi->select_phase);
    12c2:	8d e2       	ldi	r24, 0x2D	; 45
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	2d e2       	ldi	r18, 0x2D	; 45
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	f9 01       	movw	r30, r18
    12cc:	20 81       	ld	r18, Z
    12ce:	42 2f       	mov	r20, r18
    12d0:	4b 7f       	andi	r20, 0xFB	; 251
    12d2:	2a 81       	ldd	r18, Y+2	; 0x02
    12d4:	3b 81       	ldd	r19, Y+3	; 0x03
    12d6:	f9 01       	movw	r30, r18
    12d8:	23 81       	ldd	r18, Z+3	; 0x03
    12da:	22 2f       	mov	r18, r18
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	22 0f       	add	r18, r18
    12e4:	33 1f       	adc	r19, r19
    12e6:	24 2b       	or	r18, r20
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18

		/* Select Clock Speed */
		Spi_SelectClkSpeed(Address_Spi->select_clk_speed);
    12ec:	8d e2       	ldi	r24, 0x2D	; 45
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	2d e2       	ldi	r18, 0x2D	; 45
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	f9 01       	movw	r30, r18
    12f6:	20 81       	ld	r18, Z
    12f8:	42 2f       	mov	r20, r18
    12fa:	4c 7f       	andi	r20, 0xFC	; 252
    12fc:	2a 81       	ldd	r18, Y+2	; 0x02
    12fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1300:	f9 01       	movw	r30, r18
    1302:	24 81       	ldd	r18, Z+4	; 0x04
    1304:	23 70       	andi	r18, 0x03	; 3
    1306:	24 2b       	or	r18, r20
    1308:	fc 01       	movw	r30, r24
    130a:	20 83       	st	Z, r18
    130c:	8e e2       	ldi	r24, 0x2E	; 46
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	2e e2       	ldi	r18, 0x2E	; 46
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	f9 01       	movw	r30, r18
    1316:	20 81       	ld	r18, Z
    1318:	42 2f       	mov	r20, r18
    131a:	4e 7f       	andi	r20, 0xFE	; 254
    131c:	2a 81       	ldd	r18, Y+2	; 0x02
    131e:	3b 81       	ldd	r19, Y+3	; 0x03
    1320:	f9 01       	movw	r30, r18
    1322:	24 81       	ldd	r18, Z+4	; 0x04
    1324:	26 95       	lsr	r18
    1326:	26 95       	lsr	r18
    1328:	24 2b       	or	r18, r20
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18

		/* Enable During Configuration */
		Spi_Enable();
    132e:	8d e2       	ldi	r24, 0x2D	; 45
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	2d e2       	ldi	r18, 0x2D	; 45
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	f9 01       	movw	r30, r18
    1338:	20 81       	ld	r18, Z
    133a:	20 64       	ori	r18, 0x40	; 64
    133c:	fc 01       	movw	r30, r24
    133e:	20 83       	st	Z, r18

	}

	return Loc_enuSpiStatus;
    1340:	89 81       	ldd	r24, Y+1	; 0x01
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <Spi_enuDeInit>:

Spi_StatusErrorType Spi_enuDeInit(void){
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	1f 92       	push	r1
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01

	/* Disable  */
	Spi_Disable();
    135c:	8d e2       	ldi	r24, 0x2D	; 45
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	2d e2       	ldi	r18, 0x2D	; 45
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	f9 01       	movw	r30, r18
    1366:	20 81       	ld	r18, Z
    1368:	2f 7b       	andi	r18, 0xBF	; 191
    136a:	fc 01       	movw	r30, r24
    136c:	20 83       	st	Z, r18

	return Loc_enuSpiStatus;
    136e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <Spi_enuEnableInterrupt>:

Spi_StatusErrorType Spi_enuEnableInterrupt(void){
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	1f 92       	push	r1
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01

	Spi_EnableInterrupt();
    1386:	8d e2       	ldi	r24, 0x2D	; 45
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	2d e2       	ldi	r18, 0x2D	; 45
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	f9 01       	movw	r30, r18
    1390:	20 81       	ld	r18, Z
    1392:	20 68       	ori	r18, 0x80	; 128
    1394:	fc 01       	movw	r30, r24
    1396:	20 83       	st	Z, r18

	return Loc_enuSpiStatus;
    1398:	89 81       	ldd	r24, Y+1	; 0x01
}
    139a:	0f 90       	pop	r0
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	08 95       	ret

000013a2 <Spi_enuDisableInterrupt>:

Spi_StatusErrorType Spi_enuDisableInterrupt(void){
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	1f 92       	push	r1
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	89 83       	std	Y+1, r24	; 0x01

	Spi_DisableInterrupt();
    13b0:	8d e2       	ldi	r24, 0x2D	; 45
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	2d e2       	ldi	r18, 0x2D	; 45
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	f9 01       	movw	r30, r18
    13ba:	20 81       	ld	r18, Z
    13bc:	2f 77       	andi	r18, 0x7F	; 127
    13be:	fc 01       	movw	r30, r24
    13c0:	20 83       	st	Z, r18

	return Loc_enuSpiStatus;
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c4:	0f 90       	pop	r0
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	08 95       	ret

000013cc <Spi_enuSetCallbackFunction>:

Spi_StatusErrorType Spi_enuSetCallbackFunction(void (*callback)(u8 Copy_u8Result)){
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <Spi_enuSetCallbackFunction+0x6>
    13d2:	1f 92       	push	r1
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	9b 83       	std	Y+3, r25	; 0x03
    13da:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == callback){
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	89 2b       	or	r24, r25
    13e6:	19 f4       	brne	.+6      	; 0x13ee <Spi_enuSetCallbackFunction+0x22>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	06 c0       	rjmp	.+12     	; 0x13fa <Spi_enuSetCallbackFunction+0x2e>
	}
	else{

		Spi_InterruptHandler = callback;
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	9b 81       	ldd	r25, Y+3	; 0x03
    13f2:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <Spi_InterruptHandler+0x1>
    13f6:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <Spi_InterruptHandler>
	}

	return Loc_enuSpiStatus;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <Spi_enuChangeClk>:



Spi_StatusErrorType Spi_enuChangeClk(Spi_SelectClkSpeedType Copy_enuClkSpeed){
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	00 d0       	rcall	.+0      	; 0x140e <Spi_enuChangeClk+0x6>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01

	/* Disable During Configuration */
		Spi_Disable();
    1418:	8d e2       	ldi	r24, 0x2D	; 45
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	2d e2       	ldi	r18, 0x2D	; 45
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	f9 01       	movw	r30, r18
    1422:	20 81       	ld	r18, Z
    1424:	2f 7b       	andi	r18, 0xBF	; 191
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18

		/* Select Clock Speed */
		Spi_SelectClkSpeed(Copy_enuClkSpeed);
    142a:	8d e2       	ldi	r24, 0x2D	; 45
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	2d e2       	ldi	r18, 0x2D	; 45
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	f9 01       	movw	r30, r18
    1434:	20 81       	ld	r18, Z
    1436:	32 2f       	mov	r19, r18
    1438:	3c 7f       	andi	r19, 0xFC	; 252
    143a:	2a 81       	ldd	r18, Y+2	; 0x02
    143c:	23 70       	andi	r18, 0x03	; 3
    143e:	23 2b       	or	r18, r19
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
    1444:	8e e2       	ldi	r24, 0x2E	; 46
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	2e e2       	ldi	r18, 0x2E	; 46
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	2e 7f       	andi	r18, 0xFE	; 254
    1452:	3a 81       	ldd	r19, Y+2	; 0x02
    1454:	36 95       	lsr	r19
    1456:	36 95       	lsr	r19
    1458:	23 2b       	or	r18, r19
    145a:	fc 01       	movw	r30, r24
    145c:	20 83       	st	Z, r18

		/* Enable During Configuration */
		Spi_Enable();
    145e:	8d e2       	ldi	r24, 0x2D	; 45
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	2d e2       	ldi	r18, 0x2D	; 45
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	f9 01       	movw	r30, r18
    1468:	20 81       	ld	r18, Z
    146a:	20 64       	ori	r18, 0x40	; 64
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18


	return Loc_enuSpiStatus;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <Spi_enuIsWriteCollisionHappened>:

Spi_StatusErrorType Spi_enuIsWriteCollisionHappened(Spi_IsWriteCollisionHappenedType* Address_Result){
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	00 d0       	rcall	.+0      	; 0x1482 <Spi_enuIsWriteCollisionHappened+0x6>
    1482:	1f 92       	push	r1
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	9b 83       	std	Y+3, r25	; 0x03
    148a:	8a 83       	std	Y+2, r24	; 0x02
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_Result){
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	9b 81       	ldd	r25, Y+3	; 0x03
    1494:	89 2b       	or	r24, r25
    1496:	19 f4       	brne	.+6      	; 0x149e <Spi_enuIsWriteCollisionHappened+0x22>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	14 c0       	rjmp	.+40     	; 0x14c6 <Spi_enuIsWriteCollisionHappened+0x4a>
	}
	else{
		*Address_Result = Spi_isWirteCollisionHappened();
    149e:	8e e2       	ldi	r24, 0x2E	; 46
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	fc 01       	movw	r30, r24
    14a4:	80 81       	ld	r24, Z
    14a6:	82 95       	swap	r24
    14a8:	86 95       	lsr	r24
    14aa:	86 95       	lsr	r24
    14ac:	83 70       	andi	r24, 0x03	; 3
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	99 27       	eor	r25, r25
    14b6:	21 e0       	ldi	r18, 0x01	; 1
    14b8:	89 2b       	or	r24, r25
    14ba:	09 f4       	brne	.+2      	; 0x14be <Spi_enuIsWriteCollisionHappened+0x42>
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	9b 81       	ldd	r25, Y+3	; 0x03
    14c2:	fc 01       	movw	r30, r24
    14c4:	20 83       	st	Z, r18
	}

	return Loc_enuSpiStatus;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <Spi_enuReceiveBlocking>:


Spi_StatusErrorType Spi_enuReceiveBlocking(pu8 Address_ReceiveDataFromMaster, u8 Copy_u8SendDataToMaster){
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	00 d0       	rcall	.+0      	; 0x14da <Spi_enuReceiveBlocking+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <Spi_enuReceiveBlocking+0x8>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	9b 83       	std	Y+3, r25	; 0x03
    14e2:	8a 83       	std	Y+2, r24	; 0x02
    14e4:	6c 83       	std	Y+4, r22	; 0x04
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceiveDataFromMaster){
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	9b 81       	ldd	r25, Y+3	; 0x03
    14ee:	89 2b       	or	r24, r25
    14f0:	19 f4       	brne	.+6      	; 0x14f8 <Spi_enuReceiveBlocking+0x24>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	1b c0       	rjmp	.+54     	; 0x152e <Spi_enuReceiveBlocking+0x5a>
	}
	else{

		// data that will send to master
		Spi_SetDataRegister(Copy_u8SendDataToMaster); // might cause logical error here
    14f8:	8f e2       	ldi	r24, 0x2F	; 47
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	2c 81       	ldd	r18, Y+4	; 0x04
    14fe:	fc 01       	movw	r30, r24
    1500:	20 83       	st	Z, r18
		while(Spi_IsRecevingDone() == ZERO_VALUE);
    1502:	00 00       	nop
    1504:	8e e2       	ldi	r24, 0x2E	; 46
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	88 1f       	adc	r24, r24
    150e:	88 27       	eor	r24, r24
    1510:	88 1f       	adc	r24, r24
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	81 70       	andi	r24, 0x01	; 1
    1518:	99 27       	eor	r25, r25
    151a:	89 2b       	or	r24, r25
    151c:	99 f3       	breq	.-26     	; 0x1504 <Spi_enuReceiveBlocking+0x30>
		*Address_ReceiveDataFromMaster = Spi_GetDataRegister();
    151e:	8f e2       	ldi	r24, 0x2F	; 47
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	fc 01       	movw	r30, r24
    1524:	20 81       	ld	r18, Z
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	9b 81       	ldd	r25, Y+3	; 0x03
    152a:	fc 01       	movw	r30, r24
    152c:	20 83       	st	Z, r18

	}

	return Loc_enuSpiStatus;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <Spi_enuTransmitBlocking>:


Spi_StatusErrorType Spi_enuTransmitBlocking(u8 Copy_u8SlaveSelectPin, u8 Copy_u8SendData, pu8 Address_ReceiveDataFromSlave){
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	00 d0       	rcall	.+0      	; 0x1544 <Spi_enuTransmitBlocking+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <Spi_enuTransmitBlocking+0x8>
    1546:	1f 92       	push	r1
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	6b 83       	std	Y+3, r22	; 0x03
    1550:	5d 83       	std	Y+5, r21	; 0x05
    1552:	4c 83       	std	Y+4, r20	; 0x04
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Address_ReceiveDataFromSlave){
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	89 2b       	or	r24, r25
    155e:	19 f4       	brne	.+6      	; 0x1566 <Spi_enuTransmitBlocking+0x28>
		Loc_enuSpiStatus = SPI_STATUS_NULL_POINTER_ADDRESS;
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	23 c0       	rjmp	.+70     	; 0x15ac <Spi_enuTransmitBlocking+0x6e>
	}
	else{
		Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_LOW);
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Dio_enuWriteChannel>
		Spi_SetDataRegister(Copy_u8SendData);
    156e:	8f e2       	ldi	r24, 0x2F	; 47
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	2b 81       	ldd	r18, Y+3	; 0x03
    1574:	fc 01       	movw	r30, r24
    1576:	20 83       	st	Z, r18
		while(Spi_IsTransmittingDone() == ZERO_VALUE);
    1578:	00 00       	nop
    157a:	8e e2       	ldi	r24, 0x2E	; 46
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	fc 01       	movw	r30, r24
    1580:	80 81       	ld	r24, Z
    1582:	88 1f       	adc	r24, r24
    1584:	88 27       	eor	r24, r24
    1586:	88 1f       	adc	r24, r24
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	99 27       	eor	r25, r25
    1590:	89 2b       	or	r24, r25
    1592:	99 f3       	breq	.-26     	; 0x157a <Spi_enuTransmitBlocking+0x3c>
		*Address_ReceiveDataFromSlave = Spi_GetDataRegister();
    1594:	8f e2       	ldi	r24, 0x2F	; 47
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	fc 01       	movw	r30, r24
    159a:	20 81       	ld	r18, Z
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	fc 01       	movw	r30, r24
    15a2:	20 83       	st	Z, r18
		Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_HIGH);
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Dio_enuWriteChannel>

	}

	return Loc_enuSpiStatus;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <Spi_enuTransmitNonBlockingMasterMode>:



Spi_StatusErrorType Spi_enuTransmitNonBlockingMasterMode(u8 Copy_u8SlaveSelectPin, u8 Copy_u8SendDataToSlave){
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <Spi_enuTransmitNonBlockingMasterMode+0x6>
    15c4:	1f 92       	push	r1
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	6b 83       	std	Y+3, r22	; 0x03

	// interrupt happens when transmiting is done, so read in ISR
	Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	89 83       	std	Y+1, r24	; 0x01

	Dio_enuWriteChannel(Copy_u8SlaveSelectPin, DIO_LOW);
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Dio_enuWriteChannel>
	Global_StaticU8SlavePin = Copy_u8SlaveSelectPin;
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <Global_StaticU8SlavePin>
	Spi_SetDataRegister(Copy_u8SendDataToSlave);
    15e0:	8f e2       	ldi	r24, 0x2F	; 47
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	2b 81       	ldd	r18, Y+3	; 0x03
    15e6:	fc 01       	movw	r30, r24
    15e8:	20 83       	st	Z, r18


		return Loc_enuSpiStatus;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <Spi_enuRecevingNonBlockingSlaveModeForever>:

Spi_StatusErrorType Spi_enuRecevingNonBlockingSlaveModeForever( u8 Copy_u8SendDataToMaster){
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <Spi_enuRecevingNonBlockingSlaveModeForever+0x6>
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	8a 83       	std	Y+2, r24	; 0x02
	// interrupt happens when transmiting is done, so read in ISR


		Spi_StatusErrorType Loc_enuSpiStatus = SPI_STATUS_OK;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	89 83       	std	Y+1, r24	; 0x01
		Spi_SetDataRegister(Copy_u8SendDataToMaster);
    1608:	8f e2       	ldi	r24, 0x2F	; 47
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	2a 81       	ldd	r18, Y+2	; 0x02
    160e:	fc 01       	movw	r30, r24
    1610:	20 83       	st	Z, r18

		return Loc_enuSpiStatus;
    1612:	89 81       	ldd	r24, Y+1	; 0x01

}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <__vector_12>:


// ISR function For SPI
void __vector_12(void) __attribute__((signal));

void __vector_12(void){
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	2f 93       	push	r18
    162c:	3f 93       	push	r19
    162e:	4f 93       	push	r20
    1630:	5f 93       	push	r21
    1632:	6f 93       	push	r22
    1634:	7f 93       	push	r23
    1636:	8f 93       	push	r24
    1638:	9f 93       	push	r25
    163a:	af 93       	push	r26
    163c:	bf 93       	push	r27
    163e:	ef 93       	push	r30
    1640:	ff 93       	push	r31
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	1f 92       	push	r1
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62

u8 Loc_u8Result ;
/* don't forget in master mode, to make ss high after reading from slave */

    if(NULL !=Spi_InterruptHandler ){
    164c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Spi_InterruptHandler>
    1650:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Spi_InterruptHandler+0x1>
    1654:	89 2b       	or	r24, r25
    1656:	c9 f0       	breq	.+50     	; 0x168a <__vector_12+0x6c>

    	Loc_u8Result = Spi_GetDataRegister();
    1658:	8f e2       	ldi	r24, 0x2F	; 47
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	fc 01       	movw	r30, r24
    165e:	80 81       	ld	r24, Z
    1660:	89 83       	std	Y+1, r24	; 0x01
    	Spi_InterruptHandler(Loc_u8Result);
    1662:	20 91 a9 00 	lds	r18, 0x00A9	; 0x8000a9 <Spi_InterruptHandler>
    1666:	30 91 aa 00 	lds	r19, 0x00AA	; 0x8000aa <Spi_InterruptHandler+0x1>
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	f9 01       	movw	r30, r18
    166e:	09 95       	icall

    	switch (Global_StaticEnuMode){
    1670:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Global_StaticEnuMode>
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	09 f0       	breq	.+2      	; 0x167e <__vector_12+0x60>
    	case SPI_SELECT_MASTER_MODE:
    		Dio_enuWriteChannel(Global_StaticU8SlavePin, DIO_HIGH);
    		break;

    	default:
    		break;
    167c:	06 c0       	rjmp	.+12     	; 0x168a <__vector_12+0x6c>
    	Spi_InterruptHandler(Loc_u8Result);

    	switch (Global_StaticEnuMode){

    	case SPI_SELECT_MASTER_MODE:
    		Dio_enuWriteChannel(Global_StaticU8SlavePin, DIO_HIGH);
    167e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Global_StaticU8SlavePin>
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Dio_enuWriteChannel>
    		break;
    1688:	00 00       	nop
    	}

    }
    else {/*  error in declaration */   }

}
    168a:	00 00       	nop
    168c:	0f 90       	pop	r0
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	bf 91       	pop	r27
    1698:	af 91       	pop	r26
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	7f 91       	pop	r23
    16a0:	6f 91       	pop	r22
    16a2:	5f 91       	pop	r21
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	2f 91       	pop	r18
    16aa:	0f 90       	pop	r0
    16ac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16b0:	0f 90       	pop	r0
    16b2:	1f 90       	pop	r1
    16b4:	18 95       	reti

000016b6 <Port_voidInit>:


/********************************** Software Interfaces implementation *******************************/


void Port_voidInit(void){
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	#define PORT_STATUS_PIN_MODE_OUTPUT_HIGH			1
	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			0
	#define PORT_STATUS_PIN_MODE_INPUT_FLOAT			0

	ASSIGN_REG(DDRA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    16be:	8a e3       	ldi	r24, 0x3A	; 58
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	2e ef       	ldi	r18, 0xFE	; 254
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
	ASSIGN_REG(DDRB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    16c8:	87 e3       	ldi	r24, 0x37	; 55
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	2f e4       	ldi	r18, 0x4F	; 79
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18
	ASSIGN_REG(DDRC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    16d2:	84 e3       	ldi	r24, 0x34	; 52
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	2f ef       	ldi	r18, 0xFF	; 255
    16d8:	fc 01       	movw	r30, r24
    16da:	20 83       	st	Z, r18

	ASSIGN_REG(DDRD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    16dc:	81 e3       	ldi	r24, 0x31	; 49
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	2f e3       	ldi	r18, 0x3F	; 63
    16e2:	fc 01       	movw	r30, r24
    16e4:	20 83       	st	Z, r18

	#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				0
	#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			1


	ASSIGN_REG(PORTA, CONCAT( PORT_u8PinChannel7_PINA7, PORT_u8PinChannel6_PINA6, PORT_u8PinChannel5_PINA5, PORT_u8PinChannel4_PINA4,	 PORT_u8PinChannel3_PINA3,	 PORT_u8PinChannel2_PINA2,	 PORT_u8PinChannel1_PINA1,	 PORT_u8PinChannel0_PINA0));
    16e6:	8b e3       	ldi	r24, 0x3B	; 59
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	fc 01       	movw	r30, r24
    16ec:	10 82       	st	Z, r1
	ASSIGN_REG(PORTB, CONCAT( PORT_u8PinChannel15_PINB7, PORT_u8PinChannel14_PINB6, PORT_u8PinChannel13_PINB5, PORT_u8PinChannel12_PINB4,	 PORT_u8PinChannel11_PINB3,	 PORT_u8PinChannel10_PINB2,	 PORT_u8PinChannel9_PINB1,	 PORT_u8PinChannel8_PINB0));
    16ee:	88 e3       	ldi	r24, 0x38	; 56
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	20 eb       	ldi	r18, 0xB0	; 176
    16f4:	fc 01       	movw	r30, r24
    16f6:	20 83       	st	Z, r18
	ASSIGN_REG(PORTC, CONCAT( PORT_u8PinChannel23_PINC7, PORT_u8PinChannel22_PINC6, PORT_u8PinChannel21_PINC5, PORT_u8PinChannel20_PINC4,	 PORT_u8PinChannel19_PINC3,	 PORT_u8PinChannel18_PINC2,	 PORT_u8PinChannel17_PINC1,	 PORT_u8PinChannel16_PINC0));
    16f8:	85 e3       	ldi	r24, 0x35	; 53
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	fc 01       	movw	r30, r24
    16fe:	10 82       	st	Z, r1

	ASSIGN_REG(PORTD, CONCAT( PORT_u8PinChannel31_PIND7, PORT_u8PinChannel30_PIND6, PORT_u8PinChannel29_PIND5, PORT_u8PinChannel28_PIND4,	 PORT_u8PinChannel27_PIND3,	 PORT_u8PinChannel26_PIND2,	 PORT_u8PinChannel25_PIND1,	 PORT_u8PinChannel24_PIND0));
    1700:	82 e3       	ldi	r24, 0x32	; 50
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	20 e8       	ldi	r18, 0x80	; 128
    1706:	fc 01       	movw	r30, r24
    1708:	20 83       	st	Z, r18
#define PORT_STATUS_PIN_MODE_OUTPUT_LOW				1
#define PORT_STATUS_PIN_MODE_INPUT_FLOAT				2
#define PORT_STATUS_PIN_MODE_INPUT_PULL_UP			3


}
    170a:	00 00       	nop
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret

00001712 <Port_enuSetPinDirection>:

Port_ErrorStatusType Port_enuSetPinDirection(u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	00 d0       	rcall	.+0      	; 0x1718 <Port_enuSetPinDirection+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <Port_enuSetPinDirection+0x8>
    171a:	1f 92       	push	r1
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	8c 83       	std	Y+4, r24	; 0x04
    1722:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    1724:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	87 70       	andi	r24, 0x07	; 7
    172a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    172c:	8c 81       	ldd	r24, Y+4	; 0x04
    172e:	86 95       	lsr	r24
    1730:	86 95       	lsr	r24
    1732:	86 95       	lsr	r24
    1734:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	80 32       	cpi	r24, 0x20	; 32
    173a:	18 f0       	brcs	.+6      	; 0x1742 <Port_enuSetPinDirection+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	59 c0       	rjmp	.+178    	; 0x17f4 <Port_enuSetPinDirection+0xe2>
	}

	else if(Copy_u8PinDirection > PORT_MAX_INDEX_OF_DIRECTION ){
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	82 30       	cpi	r24, 0x02	; 2
    1746:	18 f0       	brcs	.+6      	; 0x174e <Port_enuSetPinDirection+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	53 c0       	rjmp	.+166    	; 0x17f4 <Port_enuSetPinDirection+0xe2>
		}

	else{

			switch(Copy_u8PinDirection){
    174e:	8d 81       	ldd	r24, Y+5	; 0x05
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	41 f1       	breq	.+80     	; 0x17a8 <Port_enuSetPinDirection+0x96>
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	09 f0       	breq	.+2      	; 0x175e <Port_enuSetPinDirection+0x4c>
							break;

			default:

				// impossible
					break;
    175c:	4b c0       	rjmp	.+150    	; 0x17f4 <Port_enuSetPinDirection+0xe2>
	else{

			switch(Copy_u8PinDirection){

			case PORT_PIN_DIRECTION_OUTPUT :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	88 59       	subi	r24, 0x98	; 152
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	fc 01       	movw	r30, r24
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	22 2f       	mov	r18, r18
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	22 0f       	add	r18, r18
    177a:	33 1f       	adc	r19, r19
    177c:	28 59       	subi	r18, 0x98	; 152
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	f9 01       	movw	r30, r18
    1782:	20 81       	ld	r18, Z
    1784:	31 81       	ldd	r19, Z+1	; 0x01
    1786:	f9 01       	movw	r30, r18
    1788:	20 81       	ld	r18, Z
    178a:	62 2f       	mov	r22, r18
    178c:	2a 81       	ldd	r18, Y+2	; 0x02
    178e:	42 2f       	mov	r20, r18
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	21 e0       	ldi	r18, 0x01	; 1
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	02 c0       	rjmp	.+4      	; 0x179c <Port_enuSetPinDirection+0x8a>
    1798:	22 0f       	add	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	4a 95       	dec	r20
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <Port_enuSetPinDirection+0x86>
    17a0:	26 2b       	or	r18, r22
    17a2:	fc 01       	movw	r30, r24
    17a4:	20 83       	st	Z, r18
					break;
    17a6:	26 c0       	rjmp	.+76     	; 0x17f4 <Port_enuSetPinDirection+0xe2>

			case PORT_PIN_DIRECTION_INPUT :
							CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	88 59       	subi	r24, 0x98	; 152
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	fc 01       	movw	r30, r24
    17b8:	80 81       	ld	r24, Z
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	2b 81       	ldd	r18, Y+3	; 0x03
    17be:	22 2f       	mov	r18, r18
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	22 0f       	add	r18, r18
    17c4:	33 1f       	adc	r19, r19
    17c6:	28 59       	subi	r18, 0x98	; 152
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	f9 01       	movw	r30, r18
    17cc:	20 81       	ld	r18, Z
    17ce:	31 81       	ldd	r19, Z+1	; 0x01
    17d0:	f9 01       	movw	r30, r18
    17d2:	20 81       	ld	r18, Z
    17d4:	62 2f       	mov	r22, r18
    17d6:	2a 81       	ldd	r18, Y+2	; 0x02
    17d8:	42 2f       	mov	r20, r18
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	21 e0       	ldi	r18, 0x01	; 1
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <Port_enuSetPinDirection+0xd4>
    17e2:	22 0f       	add	r18, r18
    17e4:	33 1f       	adc	r19, r19
    17e6:	4a 95       	dec	r20
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <Port_enuSetPinDirection+0xd0>
    17ea:	20 95       	com	r18
    17ec:	26 23       	and	r18, r22
    17ee:	fc 01       	movw	r30, r24
    17f0:	20 83       	st	Z, r18
							break;
    17f2:	00 00       	nop

	}



	return Loc_enuState;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <Port_enuSetPinMode>:
Port_ErrorStatusType Port_enuSetPinMode(u8 Copy_u8PinNumber, u8 Copy_u8PinMode){
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	00 d0       	rcall	.+0      	; 0x180c <Port_enuSetPinMode+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <Port_enuSetPinMode+0x8>
    180e:	1f 92       	push	r1
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	8c 83       	std	Y+4, r24	; 0x04
    1816:	6d 83       	std	Y+5, r22	; 0x05

	Port_ErrorStatusType Loc_enuState = PORT_STATUS_OK;
    1818:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8PinNumber %8;
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	87 70       	andi	r24, 0x07	; 7
    181e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8PinNumber /8;
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	86 95       	lsr	r24
    1824:	86 95       	lsr	r24
    1826:	86 95       	lsr	r24
    1828:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8PinNumber > PORT_MAX_INDEX_OF_CHANNEL_ID ){
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	80 32       	cpi	r24, 0x20	; 32
    182e:	18 f0       	brcs	.+6      	; 0x1836 <Port_enuSetPinMode+0x30>
		Loc_enuState = PORT_STATUS_WRONG_PIN_CHANNEL_ID;
    1830:	82 e0       	ldi	r24, 0x02	; 2
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	43 c1       	rjmp	.+646    	; 0x1abc <Port_enuSetPinMode+0x2b6>
	}

	else if(Copy_u8PinMode > PORT_MAX_INDEX_OF_PIN_MODE ){
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	18 f0       	brcs	.+6      	; 0x1842 <Port_enuSetPinMode+0x3c>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	3d c1       	rjmp	.+634    	; 0x1abc <Port_enuSetPinMode+0x2b6>
		}

	else{

			switch(Copy_u8PinMode){
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <Port_enuSetPinMode+0x4a>
    184e:	57 c0       	rjmp	.+174    	; 0x18fe <Port_enuSetPinMode+0xf8>
    1850:	82 30       	cpi	r24, 0x02	; 2
    1852:	91 05       	cpc	r25, r1
    1854:	1c f4       	brge	.+6      	; 0x185c <Port_enuSetPinMode+0x56>
    1856:	89 2b       	or	r24, r25
    1858:	49 f0       	breq	.+18     	; 0x186c <Port_enuSetPinMode+0x66>


			default:

				// impossible
					break;
    185a:	30 c1       	rjmp	.+608    	; 0x1abc <Port_enuSetPinMode+0x2b6>
			Loc_enuState = PORT_STATUS_WRONG_DIRECTION;
		}

	else{

			switch(Copy_u8PinMode){
    185c:	82 30       	cpi	r24, 0x02	; 2
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <Port_enuSetPinMode+0x5e>
    1862:	97 c0       	rjmp	.+302    	; 0x1992 <Port_enuSetPinMode+0x18c>
    1864:	03 97       	sbiw	r24, 0x03	; 3
    1866:	09 f4       	brne	.+2      	; 0x186a <Port_enuSetPinMode+0x64>
    1868:	df c0       	rjmp	.+446    	; 0x1a28 <Port_enuSetPinMode+0x222>


			default:

				// impossible
					break;
    186a:	28 c1       	rjmp	.+592    	; 0x1abc <Port_enuSetPinMode+0x2b6>
	else{

			switch(Copy_u8PinMode){

			case PORT_STATUS_PIN_MODE_OUTPUT_HIGH :
					SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	88 2f       	mov	r24, r24
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	88 59       	subi	r24, 0x98	; 152
    1878:	9f 4f       	sbci	r25, 0xFF	; 255
    187a:	fc 01       	movw	r30, r24
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	2b 81       	ldd	r18, Y+3	; 0x03
    1882:	22 2f       	mov	r18, r18
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	22 0f       	add	r18, r18
    1888:	33 1f       	adc	r19, r19
    188a:	28 59       	subi	r18, 0x98	; 152
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	f9 01       	movw	r30, r18
    1890:	20 81       	ld	r18, Z
    1892:	31 81       	ldd	r19, Z+1	; 0x01
    1894:	f9 01       	movw	r30, r18
    1896:	20 81       	ld	r18, Z
    1898:	62 2f       	mov	r22, r18
    189a:	2a 81       	ldd	r18, Y+2	; 0x02
    189c:	42 2f       	mov	r20, r18
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	21 e0       	ldi	r18, 0x01	; 1
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <Port_enuSetPinMode+0xa4>
    18a6:	22 0f       	add	r18, r18
    18a8:	33 1f       	adc	r19, r19
    18aa:	4a 95       	dec	r20
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <Port_enuSetPinMode+0xa0>
    18ae:	26 2b       	or	r18, r22
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
					SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	80 59       	subi	r24, 0x90	; 144
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	fc 01       	movw	r30, r24
    18c4:	80 81       	ld	r24, Z
    18c6:	91 81       	ldd	r25, Z+1	; 0x01
    18c8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ca:	22 2f       	mov	r18, r18
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	22 0f       	add	r18, r18
    18d0:	33 1f       	adc	r19, r19
    18d2:	20 59       	subi	r18, 0x90	; 144
    18d4:	3f 4f       	sbci	r19, 0xFF	; 255
    18d6:	f9 01       	movw	r30, r18
    18d8:	20 81       	ld	r18, Z
    18da:	31 81       	ldd	r19, Z+1	; 0x01
    18dc:	f9 01       	movw	r30, r18
    18de:	20 81       	ld	r18, Z
    18e0:	62 2f       	mov	r22, r18
    18e2:	2a 81       	ldd	r18, Y+2	; 0x02
    18e4:	42 2f       	mov	r20, r18
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	21 e0       	ldi	r18, 0x01	; 1
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <Port_enuSetPinMode+0xec>
    18ee:	22 0f       	add	r18, r18
    18f0:	33 1f       	adc	r19, r19
    18f2:	4a 95       	dec	r20
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <Port_enuSetPinMode+0xe8>
    18f6:	26 2b       	or	r18, r22
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 83       	st	Z, r18
					break;
    18fc:	df c0       	rjmp	.+446    	; 0x1abc <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_OUTPUT_LOW :
						SET_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	88 59       	subi	r24, 0x98	; 152
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	fc 01       	movw	r30, r24
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	2b 81       	ldd	r18, Y+3	; 0x03
    1914:	22 2f       	mov	r18, r18
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	22 0f       	add	r18, r18
    191a:	33 1f       	adc	r19, r19
    191c:	28 59       	subi	r18, 0x98	; 152
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	f9 01       	movw	r30, r18
    1922:	20 81       	ld	r18, Z
    1924:	31 81       	ldd	r19, Z+1	; 0x01
    1926:	f9 01       	movw	r30, r18
    1928:	20 81       	ld	r18, Z
    192a:	62 2f       	mov	r22, r18
    192c:	2a 81       	ldd	r18, Y+2	; 0x02
    192e:	42 2f       	mov	r20, r18
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	21 e0       	ldi	r18, 0x01	; 1
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	02 c0       	rjmp	.+4      	; 0x193c <Port_enuSetPinMode+0x136>
    1938:	22 0f       	add	r18, r18
    193a:	33 1f       	adc	r19, r19
    193c:	4a 95       	dec	r20
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <Port_enuSetPinMode+0x132>
    1940:	26 2b       	or	r18, r22
    1942:	fc 01       	movw	r30, r24
    1944:	20 83       	st	Z, r18
						CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	80 59       	subi	r24, 0x90	; 144
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	fc 01       	movw	r30, r24
    1956:	80 81       	ld	r24, Z
    1958:	91 81       	ldd	r25, Z+1	; 0x01
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	22 2f       	mov	r18, r18
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	22 0f       	add	r18, r18
    1962:	33 1f       	adc	r19, r19
    1964:	20 59       	subi	r18, 0x90	; 144
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	f9 01       	movw	r30, r18
    196a:	20 81       	ld	r18, Z
    196c:	31 81       	ldd	r19, Z+1	; 0x01
    196e:	f9 01       	movw	r30, r18
    1970:	20 81       	ld	r18, Z
    1972:	62 2f       	mov	r22, r18
    1974:	2a 81       	ldd	r18, Y+2	; 0x02
    1976:	42 2f       	mov	r20, r18
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	21 e0       	ldi	r18, 0x01	; 1
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <Port_enuSetPinMode+0x17e>
    1980:	22 0f       	add	r18, r18
    1982:	33 1f       	adc	r19, r19
    1984:	4a 95       	dec	r20
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <Port_enuSetPinMode+0x17a>
    1988:	20 95       	com	r18
    198a:	26 23       	and	r18, r22
    198c:	fc 01       	movw	r30, r24
    198e:	20 83       	st	Z, r18
							break;
    1990:	95 c0       	rjmp	.+298    	; 0x1abc <Port_enuSetPinMode+0x2b6>

			case PORT_STATUS_PIN_MODE_INPUT_FLOAT :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	88 59       	subi	r24, 0x98	; 152
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	fc 01       	movw	r30, r24
    19a2:	80 81       	ld	r24, Z
    19a4:	91 81       	ldd	r25, Z+1	; 0x01
    19a6:	2b 81       	ldd	r18, Y+3	; 0x03
    19a8:	22 2f       	mov	r18, r18
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	28 59       	subi	r18, 0x98	; 152
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	f9 01       	movw	r30, r18
    19b6:	20 81       	ld	r18, Z
    19b8:	31 81       	ldd	r19, Z+1	; 0x01
    19ba:	f9 01       	movw	r30, r18
    19bc:	20 81       	ld	r18, Z
    19be:	62 2f       	mov	r22, r18
    19c0:	2a 81       	ldd	r18, Y+2	; 0x02
    19c2:	42 2f       	mov	r20, r18
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	21 e0       	ldi	r18, 0x01	; 1
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <Port_enuSetPinMode+0x1ca>
    19cc:	22 0f       	add	r18, r18
    19ce:	33 1f       	adc	r19, r19
    19d0:	4a 95       	dec	r20
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <Port_enuSetPinMode+0x1c6>
    19d4:	20 95       	com	r18
    19d6:	26 23       	and	r18, r22
    19d8:	fc 01       	movw	r30, r24
    19da:	20 83       	st	Z, r18
								CLEAR_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	80 59       	subi	r24, 0x90	; 144
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	fc 01       	movw	r30, r24
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	2b 81       	ldd	r18, Y+3	; 0x03
    19f2:	22 2f       	mov	r18, r18
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	22 0f       	add	r18, r18
    19f8:	33 1f       	adc	r19, r19
    19fa:	20 59       	subi	r18, 0x90	; 144
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
    19fe:	f9 01       	movw	r30, r18
    1a00:	20 81       	ld	r18, Z
    1a02:	31 81       	ldd	r19, Z+1	; 0x01
    1a04:	f9 01       	movw	r30, r18
    1a06:	20 81       	ld	r18, Z
    1a08:	62 2f       	mov	r22, r18
    1a0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a0c:	42 2f       	mov	r20, r18
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	21 e0       	ldi	r18, 0x01	; 1
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <Port_enuSetPinMode+0x214>
    1a16:	22 0f       	add	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	4a 95       	dec	r20
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <Port_enuSetPinMode+0x210>
    1a1e:	20 95       	com	r18
    1a20:	26 23       	and	r18, r22
    1a22:	fc 01       	movw	r30, r24
    1a24:	20 83       	st	Z, r18
								break;
    1a26:	4a c0       	rjmp	.+148    	; 0x1abc <Port_enuSetPinMode+0x2b6>
			case PORT_STATUS_PIN_MODE_INPUT_PULL_UP :
								CLEAR_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber);
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	88 59       	subi	r24, 0x98	; 152
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	fc 01       	movw	r30, r24
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3e:	22 2f       	mov	r18, r18
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	22 0f       	add	r18, r18
    1a44:	33 1f       	adc	r19, r19
    1a46:	28 59       	subi	r18, 0x98	; 152
    1a48:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4a:	f9 01       	movw	r30, r18
    1a4c:	20 81       	ld	r18, Z
    1a4e:	31 81       	ldd	r19, Z+1	; 0x01
    1a50:	f9 01       	movw	r30, r18
    1a52:	20 81       	ld	r18, Z
    1a54:	62 2f       	mov	r22, r18
    1a56:	2a 81       	ldd	r18, Y+2	; 0x02
    1a58:	42 2f       	mov	r20, r18
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	21 e0       	ldi	r18, 0x01	; 1
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <Port_enuSetPinMode+0x260>
    1a62:	22 0f       	add	r18, r18
    1a64:	33 1f       	adc	r19, r19
    1a66:	4a 95       	dec	r20
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <Port_enuSetPinMode+0x25c>
    1a6a:	20 95       	com	r18
    1a6c:	26 23       	and	r18, r22
    1a6e:	fc 01       	movw	r30, r24
    1a70:	20 83       	st	Z, r18
								SET_BIT(*Dio_PortRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	80 59       	subi	r24, 0x90	; 144
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	fc 01       	movw	r30, r24
    1a82:	80 81       	ld	r24, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	22 2f       	mov	r18, r18
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	22 0f       	add	r18, r18
    1a8e:	33 1f       	adc	r19, r19
    1a90:	20 59       	subi	r18, 0x90	; 144
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	f9 01       	movw	r30, r18
    1a96:	20 81       	ld	r18, Z
    1a98:	31 81       	ldd	r19, Z+1	; 0x01
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	20 81       	ld	r18, Z
    1a9e:	62 2f       	mov	r22, r18
    1aa0:	2a 81       	ldd	r18, Y+2	; 0x02
    1aa2:	42 2f       	mov	r20, r18
    1aa4:	50 e0       	ldi	r21, 0x00	; 0
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <Port_enuSetPinMode+0x2aa>
    1aac:	22 0f       	add	r18, r18
    1aae:	33 1f       	adc	r19, r19
    1ab0:	4a 95       	dec	r20
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <Port_enuSetPinMode+0x2a6>
    1ab4:	26 2b       	or	r18, r22
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	20 83       	st	Z, r18
								break;
    1aba:	00 00       	nop



	}

	return Loc_enuState;
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	08 95       	ret

00001ace <Gie_enuEnableGlobalInterrupt>:


/********************************** Software Interfaces Declarations *******************/


Gie_ErrorStatusType Gie_enuEnableGlobalInterrupt(void){
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	1f 92       	push	r1
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1ad8:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(SREG,GIE_BIT);
    1ada:	8f e5       	ldi	r24, 0x5F	; 95
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	2f e5       	ldi	r18, 0x5F	; 95
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	f9 01       	movw	r30, r18
    1ae4:	20 81       	ld	r18, Z
    1ae6:	20 68       	ori	r18, 0x80	; 128
    1ae8:	fc 01       	movw	r30, r24
    1aea:	20 83       	st	Z, r18

	return Loc_enuGieState;
    1aec:	89 81       	ldd	r24, Y+1	; 0x01

}
    1aee:	0f 90       	pop	r0
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <Gie_enuDisableGlobalInterrupt>:
Gie_ErrorStatusType Gie_enuDisableGlobalInterrupt(void){
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	1f 92       	push	r1
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1b00:	19 82       	std	Y+1, r1	; 0x01

		CLEAR_BIT(SREG,GIE_BIT);
    1b02:	8f e5       	ldi	r24, 0x5F	; 95
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	2f e5       	ldi	r18, 0x5F	; 95
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	f9 01       	movw	r30, r18
    1b0c:	20 81       	ld	r18, Z
    1b0e:	2f 77       	andi	r18, 0x7F	; 127
    1b10:	fc 01       	movw	r30, r24
    1b12:	20 83       	st	Z, r18

		return Loc_enuGieState;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b16:	0f 90       	pop	r0
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <Gie_enuSetGloablInterrupt>:

Gie_ErrorStatusType Gie_enuSetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState){
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <Gie_enuSetGloablInterrupt+0x6>
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	8a 83       	std	Y+2, r24	; 0x02

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1b2a:	19 82       	std	Y+1, r1	; 0x01

			WRITE_BIT(SREG,GIE_BIT,Copy_enuGlobalState);
    1b2c:	8f e5       	ldi	r24, 0x5F	; 95
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	2f e5       	ldi	r18, 0x5F	; 95
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	f9 01       	movw	r30, r18
    1b36:	20 81       	ld	r18, Z
    1b38:	42 2f       	mov	r20, r18
    1b3a:	4f 77       	andi	r20, 0x7F	; 127
    1b3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b3e:	22 2f       	mov	r18, r18
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	36 95       	lsr	r19
    1b44:	32 2f       	mov	r19, r18
    1b46:	22 27       	eor	r18, r18
    1b48:	37 95       	ror	r19
    1b4a:	27 95       	ror	r18
    1b4c:	24 2b       	or	r18, r20
    1b4e:	fc 01       	movw	r30, r24
    1b50:	20 83       	st	Z, r18

			return Loc_enuGieState;
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <Gie_enuGetGloablInterrupt>:


Gie_ErrorStatusType Gie_enuGetGloablInterrupt(Gie_EnableDisableType Copy_enuGlobalState, Gie_EnableDisableType* Address_GlobalStateResult){
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <Gie_enuGetGloablInterrupt+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <Gie_enuGetGloablInterrupt+0x8>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	7c 83       	std	Y+4, r23	; 0x04
    1b6e:	6b 83       	std	Y+3, r22	; 0x03

	Gie_ErrorStatusType Loc_enuGieState = GIE_STATUS_OK;
    1b70:	19 82       	std	Y+1, r1	; 0x01

	if(NULL == Address_GlobalStateResult){
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	89 2b       	or	r24, r25
    1b78:	19 f4       	brne	.+6      	; 0x1b80 <Gie_enuGetGloablInterrupt+0x22>
		Loc_enuGieState = GIE_STATUS_NULL_POINTER_ADDRESS;
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	0c c0       	rjmp	.+24     	; 0x1b98 <Gie_enuGetGloablInterrupt+0x3a>
	}
	else {
		*Address_GlobalStateResult = (Gie_EnableDisableType)READ_BIT(SREG,GIE_BIT);
    1b80:	8f e5       	ldi	r24, 0x5F	; 95
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	fc 01       	movw	r30, r24
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	22 1f       	adc	r18, r18
    1b8c:	22 27       	eor	r18, r18
    1b8e:	22 1f       	adc	r18, r18
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	fc 01       	movw	r30, r24
    1b96:	20 83       	st	Z, r18

	}

			return Loc_enuGieState;
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	08 95       	ret

00001ba8 <Dio_enuWriteChannel>:



/********************************** Software Interfaces Declarations *******************************/

Dio_ErrorStatusType	Dio_enuWriteChannel(u8 Copy_u8ChannelId,u8 Copy_u8Level){
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <Dio_enuWriteChannel+0x6>
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <Dio_enuWriteChannel+0x8>
    1bb0:	1f 92       	push	r1
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	8c 83       	std	Y+4, r24	; 0x04
    1bb8:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1bba:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_PinNumber = Copy_u8ChannelId %8;
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	87 70       	andi	r24, 0x07	; 7
    1bc0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_PortNumber = Copy_u8ChannelId /8;
    1bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc4:	86 95       	lsr	r24
    1bc6:	86 95       	lsr	r24
    1bc8:	86 95       	lsr	r24
    1bca:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    1bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bce:	80 32       	cpi	r24, 0x20	; 32
    1bd0:	18 f0       	brcs	.+6      	; 0x1bd8 <Dio_enuWriteChannel+0x30>
		Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	4e c0       	rjmp	.+156    	; 0x1c74 <Dio_enuWriteChannel+0xcc>
	}

	else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	88 58       	subi	r24, 0x88	; 136
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	fc 01       	movw	r30, r24
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	fc 01       	movw	r30, r24
    1bee:	80 81       	ld	r24, Z
    1bf0:	88 2f       	mov	r24, r24
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	2a 81       	ldd	r18, Y+2	; 0x02
    1bf6:	22 2f       	mov	r18, r18
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <Dio_enuWriteChannel+0x58>
    1bfc:	95 95       	asr	r25
    1bfe:	87 95       	ror	r24
    1c00:	2a 95       	dec	r18
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <Dio_enuWriteChannel+0x54>
    1c04:	81 70       	andi	r24, 0x01	; 1
    1c06:	99 27       	eor	r25, r25
    1c08:	89 2b       	or	r24, r25
    1c0a:	19 f4       	brne	.+6      	; 0x1c12 <Dio_enuWriteChannel+0x6a>
			Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	31 c0       	rjmp	.+98     	; 0x1c74 <Dio_enuWriteChannel+0xcc>
		}

	else{

		WRITE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber  ,  (Copy_u8Level) );
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	80 58       	subi	r24, 0x80	; 128
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	fc 01       	movw	r30, r24
    1c22:	80 81       	ld	r24, Z
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	2b 81       	ldd	r18, Y+3	; 0x03
    1c28:	22 2f       	mov	r18, r18
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	22 0f       	add	r18, r18
    1c2e:	33 1f       	adc	r19, r19
    1c30:	20 58       	subi	r18, 0x80	; 128
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
    1c34:	f9 01       	movw	r30, r18
    1c36:	20 81       	ld	r18, Z
    1c38:	31 81       	ldd	r19, Z+1	; 0x01
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	20 81       	ld	r18, Z
    1c3e:	62 2f       	mov	r22, r18
    1c40:	2a 81       	ldd	r18, Y+2	; 0x02
    1c42:	42 2f       	mov	r20, r18
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	21 e0       	ldi	r18, 0x01	; 1
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <Dio_enuWriteChannel+0xa8>
    1c4c:	22 0f       	add	r18, r18
    1c4e:	33 1f       	adc	r19, r19
    1c50:	4a 95       	dec	r20
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <Dio_enuWriteChannel+0xa4>
    1c54:	20 95       	com	r18
    1c56:	62 23       	and	r22, r18
    1c58:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5a:	22 2f       	mov	r18, r18
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a 81       	ldd	r20, Y+2	; 0x02
    1c60:	44 2f       	mov	r20, r20
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <Dio_enuWriteChannel+0xc2>
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	4a 95       	dec	r20
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <Dio_enuWriteChannel+0xbe>
    1c6e:	26 2b       	or	r18, r22
    1c70:	fc 01       	movw	r30, r24
    1c72:	20 83       	st	Z, r18

}

	return Loc_enuState;
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <Dio_enuReadChannel>:
Dio_ErrorStatusType	Dio_enuReadChannel(u8 Copy_u8ChannelId,pu8 Address_pu8ChannelLevel){
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <Dio_enuReadChannel+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <Dio_enuReadChannel+0x8>
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <Dio_enuReadChannel+0xa>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	8c 83       	std	Y+4, r24	; 0x04
    1c96:	7e 83       	std	Y+6, r23	; 0x06
    1c98:	6d 83       	std	Y+5, r22	; 0x05

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1c9a:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	87 70       	andi	r24, 0x07	; 7
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    1ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca4:	86 95       	lsr	r24
    1ca6:	86 95       	lsr	r24
    1ca8:	86 95       	lsr	r24
    1caa:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    1cac:	8c 81       	ldd	r24, Y+4	; 0x04
    1cae:	80 32       	cpi	r24, 0x20	; 32
    1cb0:	18 f0       	brcs	.+6      	; 0x1cb8 <Dio_enuReadChannel+0x32>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	40 c0       	rjmp	.+128    	; 0x1d38 <Dio_enuReadChannel+0xb2>
		}

		else if(  (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_INPUT){
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	88 58       	subi	r24, 0x88	; 136
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	fc 01       	movw	r30, r24
    1cce:	80 81       	ld	r24, Z
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cd6:	22 2f       	mov	r18, r18
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <Dio_enuReadChannel+0x5a>
    1cdc:	95 95       	asr	r25
    1cde:	87 95       	ror	r24
    1ce0:	2a 95       	dec	r18
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <Dio_enuReadChannel+0x56>
    1ce4:	81 70       	andi	r24, 0x01	; 1
    1ce6:	99 27       	eor	r25, r25
    1ce8:	89 2b       	or	r24, r25
    1cea:	19 f0       	breq	.+6      	; 0x1cf2 <Dio_enuReadChannel+0x6c>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	23 c0       	rjmp	.+70     	; 0x1d38 <Dio_enuReadChannel+0xb2>
			}

		else if(Address_pu8ChannelLevel == NULL){
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	89 2b       	or	r24, r25
    1cf8:	19 f4       	brne	.+6      	; 0x1d00 <Dio_enuReadChannel+0x7a>
			Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    1cfa:	84 e0       	ldi	r24, 0x04	; 4
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	1c c0       	rjmp	.+56     	; 0x1d38 <Dio_enuReadChannel+0xb2>

		}

		else{

			*Address_pu8ChannelLevel = READ_BIT(*Dio_PinRegistersArr[Loc_PortNumber],Loc_PinNumber);
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	88 57       	subi	r24, 0x78	; 120
    1d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0e:	fc 01       	movw	r30, r24
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	fc 01       	movw	r30, r24
    1d16:	80 81       	ld	r24, Z
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d1e:	22 2f       	mov	r18, r18
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <Dio_enuReadChannel+0xa2>
    1d24:	95 95       	asr	r25
    1d26:	87 95       	ror	r24
    1d28:	2a 95       	dec	r18
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <Dio_enuReadChannel+0x9e>
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	21 70       	andi	r18, 0x01	; 1
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	fc 01       	movw	r30, r24
    1d36:	20 83       	st	Z, r18


	}

		return Loc_enuState;
    1d38:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d3a:	26 96       	adiw	r28, 0x06	; 6
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <Dio_enuWritePort>:



Dio_ErrorStatusType	Dio_enuWritePort(u8 Copy_u8PortId,u8 Copy_u8Value){
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <Dio_enuWritePort+0x6>
    1d52:	1f 92       	push	r1
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	8a 83       	std	Y+2, r24	; 0x02
    1d5a:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1d5c:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	84 30       	cpi	r24, 0x04	; 4
    1d62:	18 f0       	brcs	.+6      	; 0x1d6a <Dio_enuWritePort+0x1e>
			Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	1e c0       	rjmp	.+60     	; 0x1da6 <Dio_enuWritePort+0x5a>
		}

		else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_OUTPUT ){
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	88 58       	subi	r24, 0x88	; 136
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	fc 01       	movw	r30, r24
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	fc 01       	movw	r30, r24
    1d80:	80 81       	ld	r24, Z
    1d82:	8f 3f       	cpi	r24, 0xFF	; 255
    1d84:	19 f0       	breq	.+6      	; 0x1d8c <Dio_enuWritePort+0x40>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	89 83       	std	Y+1, r24	; 0x01
    1d8a:	0d c0       	rjmp	.+26     	; 0x1da6 <Dio_enuWritePort+0x5a>
			}

		else{

			ASSIGN_REG(*Dio_PortRegistersArr[Copy_u8PortId], Copy_u8Value);
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	80 58       	subi	r24, 0x80	; 128
    1d98:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	2b 81       	ldd	r18, Y+3	; 0x03
    1da2:	fc 01       	movw	r30, r24
    1da4:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    1da6:	89 81       	ldd	r24, Y+1	; 0x01



}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <Dio_enuReadPort>:


Dio_ErrorStatusType	Dio_enuReadPort(u8 Copy_u8PortId,pu8 Address_pu8PortVAlue){
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <Dio_enuReadPort+0x6>
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <Dio_enuReadPort+0x8>
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	8a 83       	std	Y+2, r24	; 0x02
    1dc2:	7c 83       	std	Y+4, r23	; 0x04
    1dc4:	6b 83       	std	Y+3, r22	; 0x03
	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1dc6:	19 82       	std	Y+1, r1	; 0x01


			if(Copy_u8PortId > DIO_MAX_INDEX_OF_PORT ){
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	84 30       	cpi	r24, 0x04	; 4
    1dcc:	18 f0       	brcs	.+6      	; 0x1dd4 <Dio_enuReadPort+0x20>
				Loc_enuState = DIO_STATUS_WRONG_PORT_ID;
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	28 c0       	rjmp	.+80     	; 0x1e24 <Dio_enuReadPort+0x70>
			}

			else if( *Dio_DdraRegsiterArr[Copy_u8PortId] != DIO_PORT_INPUT ){
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	88 58       	subi	r24, 0x88	; 136
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	fc 01       	movw	r30, r24
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	fc 01       	movw	r30, r24
    1dea:	80 81       	ld	r24, Z
    1dec:	88 23       	and	r24, r24
    1dee:	19 f0       	breq	.+6      	; 0x1df6 <Dio_enuReadPort+0x42>
					Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	17 c0       	rjmp	.+46     	; 0x1e24 <Dio_enuReadPort+0x70>
				}

			else if(Address_pu8PortVAlue == NULL){
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfa:	89 2b       	or	r24, r25
    1dfc:	19 f4       	brne	.+6      	; 0x1e04 <Dio_enuReadPort+0x50>
				Loc_enuState = DIO_STATUS_NULL_POINTER_ADDRESS;
    1dfe:	84 e0       	ldi	r24, 0x04	; 4
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	10 c0       	rjmp	.+32     	; 0x1e24 <Dio_enuReadPort+0x70>
			}
			else{

				*Address_pu8PortVAlue = *Dio_PinRegistersArr[Copy_u8PortId];
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	88 57       	subi	r24, 0x78	; 120
    1e10:	9f 4f       	sbci	r25, 0xFF	; 255
    1e12:	fc 01       	movw	r30, r24
    1e14:	80 81       	ld	r24, Z
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	fc 01       	movw	r30, r24
    1e1a:	20 81       	ld	r18, Z
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	fc 01       	movw	r30, r24
    1e22:	20 83       	st	Z, r18

		}

			return Loc_enuState;
    1e24:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <Dio_enuFlipChannel>:
Dio_ErrorStatusType	Dio_enuFlipChannel(u8 Copy_u8ChannelId){
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <Dio_enuFlipChannel+0x6>
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <Dio_enuFlipChannel+0x8>
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	8c 83       	std	Y+4, r24	; 0x04

	Dio_ErrorStatusType Loc_enuState = DIO_STATUS_OK;
    1e42:	19 82       	std	Y+1, r1	; 0x01
		u8 Loc_PinNumber = Copy_u8ChannelId %8;
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	87 70       	andi	r24, 0x07	; 7
    1e48:	8a 83       	std	Y+2, r24	; 0x02
		u8 Loc_PortNumber = Copy_u8ChannelId /8;
    1e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4c:	86 95       	lsr	r24
    1e4e:	86 95       	lsr	r24
    1e50:	86 95       	lsr	r24
    1e52:	8b 83       	std	Y+3, r24	; 0x03

		if(Copy_u8ChannelId > DIO_MAX_INDEX_OF_CHANNEL_ID ){
    1e54:	8c 81       	ldd	r24, Y+4	; 0x04
    1e56:	80 32       	cpi	r24, 0x20	; 32
    1e58:	18 f0       	brcs	.+6      	; 0x1e60 <Dio_enuFlipChannel+0x2c>
			Loc_enuState = DIO_STATUS_WRONG_PIN_CHANNEL_ID;
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	41 c0       	rjmp	.+130    	; 0x1ee2 <Dio_enuFlipChannel+0xae>
		}

		else if( (READ_BIT(*Dio_DdraRegsiterArr[Loc_PortNumber],Loc_PinNumber)) != DIO_PIN_OUTPUT ){
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	88 58       	subi	r24, 0x88	; 136
    1e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6e:	fc 01       	movw	r30, r24
    1e70:	80 81       	ld	r24, Z
    1e72:	91 81       	ldd	r25, Z+1	; 0x01
    1e74:	fc 01       	movw	r30, r24
    1e76:	80 81       	ld	r24, Z
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e7e:	22 2f       	mov	r18, r18
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <Dio_enuFlipChannel+0x54>
    1e84:	95 95       	asr	r25
    1e86:	87 95       	ror	r24
    1e88:	2a 95       	dec	r18
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <Dio_enuFlipChannel+0x50>
    1e8c:	81 70       	andi	r24, 0x01	; 1
    1e8e:	99 27       	eor	r25, r25
    1e90:	89 2b       	or	r24, r25
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <Dio_enuFlipChannel+0x66>
				Loc_enuState = DIO_STATUS_WRONG_DIRECTION;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	24 c0       	rjmp	.+72     	; 0x1ee2 <Dio_enuFlipChannel+0xae>
			}

		else{

			TOGGLE_BIT( (*Dio_PortRegistersArr[Loc_PortNumber]), Loc_PinNumber);
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	80 58       	subi	r24, 0x80	; 128
    1ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	80 81       	ld	r24, Z
    1eac:	91 81       	ldd	r25, Z+1	; 0x01
    1eae:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb0:	22 2f       	mov	r18, r18
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	22 0f       	add	r18, r18
    1eb6:	33 1f       	adc	r19, r19
    1eb8:	20 58       	subi	r18, 0x80	; 128
    1eba:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	20 81       	ld	r18, Z
    1ec0:	31 81       	ldd	r19, Z+1	; 0x01
    1ec2:	f9 01       	movw	r30, r18
    1ec4:	20 81       	ld	r18, Z
    1ec6:	62 2f       	mov	r22, r18
    1ec8:	2a 81       	ldd	r18, Y+2	; 0x02
    1eca:	42 2f       	mov	r20, r18
    1ecc:	50 e0       	ldi	r21, 0x00	; 0
    1ece:	21 e0       	ldi	r18, 0x01	; 1
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <Dio_enuFlipChannel+0xa4>
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	4a 95       	dec	r20
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <Dio_enuFlipChannel+0xa0>
    1edc:	26 27       	eor	r18, r22
    1ede:	fc 01       	movw	r30, r24
    1ee0:	20 83       	st	Z, r18

	}

		return Loc_enuState;
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	08 95       	ret

00001ef2 <Adc_enuInit>:
/********************************** Data Type Declarations ****************************/

/********************************** Software Interfaces Declarations *******************/


Adc_StatusErrorType Adc_enuInit(const Adc_PinConfigType* Address_Adc){
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <Adc_enuInit+0x6>
    1ef8:	1f 92       	push	r1
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	9b 83       	std	Y+3, r25	; 0x03
    1f00:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0a:	89 2b       	or	r24, r25
    1f0c:	19 f4       	brne	.+6      	; 0x1f14 <Adc_enuInit+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	65 c0       	rjmp	.+202    	; 0x1fde <Adc_enuInit+0xec>
	    }
	    else{
	    	 /* Disable Adc Peripheral */
	    	        Adc_Disable();
    1f14:	86 e2       	ldi	r24, 0x26	; 38
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	26 e2       	ldi	r18, 0x26	; 38
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	f9 01       	movw	r30, r18
    1f1e:	20 81       	ld	r18, Z
    1f20:	2f 77       	andi	r18, 0x7F	; 127
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 83       	st	Z, r18



	    	        /* Choose Conversion Clock  */
	    	        Adc_SelectConversionClock(Address_Adc->conversion_frequancy);
    1f26:	86 e2       	ldi	r24, 0x26	; 38
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	26 e2       	ldi	r18, 0x26	; 38
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	f9 01       	movw	r30, r18
    1f30:	20 81       	ld	r18, Z
    1f32:	42 2f       	mov	r20, r18
    1f34:	40 77       	andi	r20, 0x70	; 112
    1f36:	2a 81       	ldd	r18, Y+2	; 0x02
    1f38:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	23 81       	ldd	r18, Z+3	; 0x03
    1f3e:	27 70       	andi	r18, 0x07	; 7
    1f40:	24 2b       	or	r18, r20
    1f42:	fc 01       	movw	r30, r24
    1f44:	20 83       	st	Z, r18

	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    1f46:	87 e2       	ldi	r24, 0x27	; 39
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	27 e2       	ldi	r18, 0x27	; 39
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	f9 01       	movw	r30, r18
    1f50:	20 81       	ld	r18, Z
    1f52:	42 2f       	mov	r20, r18
    1f54:	48 7f       	andi	r20, 0xF8	; 248
    1f56:	2a 81       	ldd	r18, Y+2	; 0x02
    1f58:	3b 81       	ldd	r19, Y+3	; 0x03
    1f5a:	f9 01       	movw	r30, r18
    1f5c:	20 81       	ld	r18, Z
    1f5e:	27 70       	andi	r18, 0x07	; 7
    1f60:	24 2b       	or	r18, r20
    1f62:	fc 01       	movw	r30, r24
    1f64:	20 83       	st	Z, r18


	    	        /*Configure Result Format */
	    	        Adc_SelectResultFormat(Address_Adc->result_format);
    1f66:	87 e2       	ldi	r24, 0x27	; 39
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	27 e2       	ldi	r18, 0x27	; 39
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	f9 01       	movw	r30, r18
    1f70:	20 81       	ld	r18, Z
    1f72:	42 2f       	mov	r20, r18
    1f74:	4f 7d       	andi	r20, 0xDF	; 223
    1f76:	2a 81       	ldd	r18, Y+2	; 0x02
    1f78:	3b 81       	ldd	r19, Y+3	; 0x03
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	22 81       	ldd	r18, Z+2	; 0x02
    1f7e:	22 2f       	mov	r18, r18
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	22 0f       	add	r18, r18
    1f84:	33 1f       	adc	r19, r19
    1f86:	22 95       	swap	r18
    1f88:	32 95       	swap	r19
    1f8a:	30 7f       	andi	r19, 0xF0	; 240
    1f8c:	32 27       	eor	r19, r18
    1f8e:	20 7f       	andi	r18, 0xF0	; 240
    1f90:	32 27       	eor	r19, r18
    1f92:	24 2b       	or	r18, r20
    1f94:	fc 01       	movw	r30, r24
    1f96:	20 83       	st	Z, r18

	    	        /* Configure Voltage Reference*/
	    	        Adc_SelectRefVoltageSource(Address_Adc->vref_source);
    1f98:	87 e2       	ldi	r24, 0x27	; 39
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	27 e2       	ldi	r18, 0x27	; 39
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	f9 01       	movw	r30, r18
    1fa2:	20 81       	ld	r18, Z
    1fa4:	42 2f       	mov	r20, r18
    1fa6:	4f 73       	andi	r20, 0x3F	; 63
    1fa8:	2a 81       	ldd	r18, Y+2	; 0x02
    1faa:	3b 81       	ldd	r19, Y+3	; 0x03
    1fac:	f9 01       	movw	r30, r18
    1fae:	21 81       	ldd	r18, Z+1	; 0x01
    1fb0:	22 2f       	mov	r18, r18
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	00 24       	eor	r0, r0
    1fb6:	36 95       	lsr	r19
    1fb8:	27 95       	ror	r18
    1fba:	07 94       	ror	r0
    1fbc:	36 95       	lsr	r19
    1fbe:	27 95       	ror	r18
    1fc0:	07 94       	ror	r0
    1fc2:	32 2f       	mov	r19, r18
    1fc4:	20 2d       	mov	r18, r0
    1fc6:	24 2b       	or	r18, r20
    1fc8:	fc 01       	movw	r30, r24
    1fca:	20 83       	st	Z, r18

	    	        /* Enable Adc Peripheral */
	    	        Adc_Enable();
    1fcc:	86 e2       	ldi	r24, 0x26	; 38
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	26 e2       	ldi	r18, 0x26	; 38
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	f9 01       	movw	r30, r18
    1fd6:	20 81       	ld	r18, Z
    1fd8:	20 68       	ori	r18, 0x80	; 128
    1fda:	fc 01       	movw	r30, r24
    1fdc:	20 83       	st	Z, r18

	    }

	    return Loc_enuAdcStatus;
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	08 95       	ret

00001fec <Adc_enuDeInit>:

Adc_StatusErrorType Adc_enuDeInit(void){
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	1f 92       	push	r1
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	89 83       	std	Y+1, r24	; 0x01

	Adc_Disable();
    1ffa:	86 e2       	ldi	r24, 0x26	; 38
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	26 e2       	ldi	r18, 0x26	; 38
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	f9 01       	movw	r30, r18
    2004:	20 81       	ld	r18, Z
    2006:	2f 77       	andi	r18, 0x7F	; 127
    2008:	fc 01       	movw	r30, r24
    200a:	20 83       	st	Z, r18
	    return Loc_enuAdcStatus;
    200c:	89 81       	ldd	r24, Y+1	; 0x01
}
    200e:	0f 90       	pop	r0
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	08 95       	ret

00002016 <Adc_enuStartConversionSync>:


Adc_StatusErrorType Adc_enuStartConversionSync(const Adc_PinConfigType* Address_Adc, u16* Address_ResultDigitalVoltage){
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	a6 97       	sbiw	r28, 0x26	; 38
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	9c a3       	std	Y+36, r25	; 0x24
    202c:	8b a3       	std	Y+35, r24	; 0x23
    202e:	7e a3       	std	Y+38, r23	; 0x26
    2030:	6d a3       	std	Y+37, r22	; 0x25

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_u8AdcInterruptStatus = ZERO_VALUE;
    2036:	1a 82       	std	Y+2, r1	; 0x02
	    if(NULL == Address_Adc || Address_ResultDigitalVoltage == NULL){
    2038:	8b a1       	ldd	r24, Y+35	; 0x23
    203a:	9c a1       	ldd	r25, Y+36	; 0x24
    203c:	89 2b       	or	r24, r25
    203e:	21 f0       	breq	.+8      	; 0x2048 <Adc_enuStartConversionSync+0x32>
    2040:	8d a1       	ldd	r24, Y+37	; 0x25
    2042:	9e a1       	ldd	r25, Y+38	; 0x26
    2044:	89 2b       	or	r24, r25
    2046:	19 f4       	brne	.+6      	; 0x204e <Adc_enuStartConversionSync+0x38>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	54 c1       	rjmp	.+680    	; 0x22f6 <Adc_enuStartConversionSync+0x2e0>
	    }
	    else{


	            /* Read Status of The interrupt */
	    	    Loc_u8AdcInterruptStatus = Adc_GetInterruptEnableStatus();
    204e:	86 e2       	ldi	r24, 0x26	; 38
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	fc 01       	movw	r30, r24
    2054:	80 81       	ld	r24, Z
    2056:	86 95       	lsr	r24
    2058:	86 95       	lsr	r24
    205a:	86 95       	lsr	r24
    205c:	81 70       	andi	r24, 0x01	; 1
    205e:	8a 83       	std	Y+2, r24	; 0x02

	            /* Choose Selected Channel */
	            Adc_SelectChannel(Address_Adc->channel_number);
    2060:	87 e2       	ldi	r24, 0x27	; 39
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	27 e2       	ldi	r18, 0x27	; 39
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	f9 01       	movw	r30, r18
    206a:	20 81       	ld	r18, Z
    206c:	42 2f       	mov	r20, r18
    206e:	48 7f       	andi	r20, 0xF8	; 248
    2070:	2b a1       	ldd	r18, Y+35	; 0x23
    2072:	3c a1       	ldd	r19, Y+36	; 0x24
    2074:	f9 01       	movw	r30, r18
    2076:	20 81       	ld	r18, Z
    2078:	27 70       	andi	r18, 0x07	; 7
    207a:	24 2b       	or	r18, r20
    207c:	fc 01       	movw	r30, r24
    207e:	20 83       	st	Z, r18

	            /* Disable Interrupt not to jump after completing*/
	            Adc_SetInterruptEnable(ZERO_VALUE);
    2080:	86 e2       	ldi	r24, 0x26	; 38
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	26 e2       	ldi	r18, 0x26	; 38
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	f9 01       	movw	r30, r18
    208a:	20 81       	ld	r18, Z
    208c:	27 7f       	andi	r18, 0xF7	; 247
    208e:	fc 01       	movw	r30, r24
    2090:	20 83       	st	Z, r18


	            /* Start Conversion  */
	            Adc_StartConversion();
    2092:	86 e2       	ldi	r24, 0x26	; 38
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	26 e2       	ldi	r18, 0x26	; 38
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	f9 01       	movw	r30, r18
    209c:	20 81       	ld	r18, Z
    209e:	20 64       	ori	r18, 0x40	; 64
    20a0:	fc 01       	movw	r30, r24
    20a2:	20 83       	st	Z, r18



	            /* wait =polling for conversion */
	            while( ZERO_VALUE == Adc_IsConversionCompleted() );
    20a4:	00 00       	nop
    20a6:	86 e2       	ldi	r24, 0x26	; 38
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	fc 01       	movw	r30, r24
    20ac:	80 81       	ld	r24, Z
    20ae:	82 95       	swap	r24
    20b0:	86 95       	lsr	r24
    20b2:	86 95       	lsr	r24
    20b4:	83 70       	andi	r24, 0x03	; 3
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	81 70       	andi	r24, 0x01	; 1
    20bc:	99 27       	eor	r25, r25
    20be:	89 2b       	or	r24, r25
    20c0:	91 f7       	brne	.-28     	; 0x20a6 <Adc_enuStartConversionSync+0x90>
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a0 e2       	ldi	r26, 0x20	; 32
    20c8:	b1 e4       	ldi	r27, 0x41	; 65
    20ca:	8b 83       	std	Y+3, r24	; 0x03
    20cc:	9c 83       	std	Y+4, r25	; 0x04
    20ce:	ad 83       	std	Y+5, r26	; 0x05
    20d0:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    20d2:	2b ea       	ldi	r18, 0xAB	; 171
    20d4:	3a ea       	ldi	r19, 0xAA	; 170
    20d6:	4a ea       	ldi	r20, 0xAA	; 170
    20d8:	50 e4       	ldi	r21, 0x40	; 64
    20da:	6b 81       	ldd	r22, Y+3	; 0x03
    20dc:	7c 81       	ldd	r23, Y+4	; 0x04
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	8f 83       	std	Y+7, r24	; 0x07
    20ec:	98 87       	std	Y+8, r25	; 0x08
    20ee:	a9 87       	std	Y+9, r26	; 0x09
    20f0:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	50 e4       	ldi	r21, 0x40	; 64
    20fa:	6b 81       	ldd	r22, Y+3	; 0x03
    20fc:	7c 81       	ldd	r23, Y+4	; 0x04
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	8b 87       	std	Y+11, r24	; 0x0b
    210c:	9c 87       	std	Y+12, r25	; 0x0c
    210e:	ad 87       	std	Y+13, r26	; 0x0d
    2110:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	0e 94 3c 14 	call	0x2878	; 0x2878 <__cmpsf2>
    2126:	88 23       	and	r24, r24
    2128:	1c f4       	brge	.+6      	; 0x2130 <Adc_enuStartConversionSync+0x11a>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	8f 87       	std	Y+15, r24	; 0x0f
    212e:	b2 c0       	rjmp	.+356    	; 0x2294 <Adc_enuStartConversionSync+0x27e>
	else if (__tmp2 > 65535)
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	3f ef       	ldi	r19, 0xFF	; 255
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	57 e4       	ldi	r21, 0x47	; 71
    2138:	6b 85       	ldd	r22, Y+11	; 0x0b
    213a:	7c 85       	ldd	r23, Y+12	; 0x0c
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__gesf2>
    2144:	18 16       	cp	r1, r24
    2146:	0c f0       	brlt	.+2      	; 0x214a <Adc_enuStartConversionSync+0x134>
    2148:	7b c0       	rjmp	.+246    	; 0x2240 <Adc_enuStartConversionSync+0x22a>
	{
		_delay_ms(__us / 1000.0);
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a e7       	ldi	r20, 0x7A	; 122
    2150:	54 e4       	ldi	r21, 0x44	; 68
    2152:	6b 81       	ldd	r22, Y+3	; 0x03
    2154:	7c 81       	ldd	r23, Y+4	; 0x04
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	0e 94 41 14 	call	0x2882	; 0x2882 <__divsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	88 8b       	std	Y+16, r24	; 0x10
    2164:	99 8b       	std	Y+17, r25	; 0x11
    2166:	aa 8b       	std	Y+18, r26	; 0x12
    2168:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	4a e7       	ldi	r20, 0x7A	; 122
    2170:	55 e4       	ldi	r21, 0x45	; 69
    2172:	68 89       	ldd	r22, Y+16	; 0x10
    2174:	79 89       	ldd	r23, Y+17	; 0x11
    2176:	8a 89       	ldd	r24, Y+18	; 0x12
    2178:	9b 89       	ldd	r25, Y+19	; 0x13
    217a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8c 8b       	std	Y+20, r24	; 0x14
    2184:	9d 8b       	std	Y+21, r25	; 0x15
    2186:	ae 8b       	std	Y+22, r26	; 0x16
    2188:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	6c 89       	ldd	r22, Y+20	; 0x14
    2194:	7d 89       	ldd	r23, Y+21	; 0x15
    2196:	8e 89       	ldd	r24, Y+22	; 0x16
    2198:	9f 89       	ldd	r25, Y+23	; 0x17
    219a:	0e 94 3c 14 	call	0x2878	; 0x2878 <__cmpsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <Adc_enuStartConversionSync+0x196>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	99 8f       	std	Y+25, r25	; 0x19
    21a8:	88 8f       	std	Y+24, r24	; 0x18
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <Adc_enuStartConversionSync+0x214>
	else if (__tmp > 65535)
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	3f ef       	ldi	r19, 0xFF	; 255
    21b0:	4f e7       	ldi	r20, 0x7F	; 127
    21b2:	57 e4       	ldi	r21, 0x47	; 71
    21b4:	6c 89       	ldd	r22, Y+20	; 0x14
    21b6:	7d 89       	ldd	r23, Y+21	; 0x15
    21b8:	8e 89       	ldd	r24, Y+22	; 0x16
    21ba:	9f 89       	ldd	r25, Y+23	; 0x17
    21bc:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__gesf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <Adc_enuStartConversionSync+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	68 89       	ldd	r22, Y+16	; 0x10
    21ce:	79 89       	ldd	r23, Y+17	; 0x11
    21d0:	8a 89       	ldd	r24, Y+18	; 0x12
    21d2:	9b 89       	ldd	r25, Y+19	; 0x13
    21d4:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	99 8f       	std	Y+25, r25	; 0x19
    21ea:	88 8f       	std	Y+24, r24	; 0x18
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <Adc_enuStartConversionSync+0x1f6>
    21ee:	80 e9       	ldi	r24, 0x90	; 144
    21f0:	91 e0       	ldi	r25, 0x01	; 1
    21f2:	9b 8f       	std	Y+27, r25	; 0x1b
    21f4:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <Adc_enuStartConversionSync+0x1e4>
    21fe:	9b 8f       	std	Y+27, r25	; 0x1b
    2200:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	88 8d       	ldd	r24, Y+24	; 0x18
    2204:	99 8d       	ldd	r25, Y+25	; 0x19
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	99 8f       	std	Y+25, r25	; 0x19
    220a:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	88 8d       	ldd	r24, Y+24	; 0x18
    220e:	99 8d       	ldd	r25, Y+25	; 0x19
    2210:	89 2b       	or	r24, r25
    2212:	69 f7       	brne	.-38     	; 0x21ee <Adc_enuStartConversionSync+0x1d8>
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <Adc_enuStartConversionSync+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6c 89       	ldd	r22, Y+20	; 0x14
    2218:	7d 89       	ldd	r23, Y+21	; 0x15
    221a:	8e 89       	ldd	r24, Y+22	; 0x16
    221c:	9f 89       	ldd	r25, Y+23	; 0x17
    221e:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	99 8f       	std	Y+25, r25	; 0x19
    2228:	88 8f       	std	Y+24, r24	; 0x18
    222a:	88 8d       	ldd	r24, Y+24	; 0x18
    222c:	99 8d       	ldd	r25, Y+25	; 0x19
    222e:	9d 8f       	std	Y+29, r25	; 0x1d
    2230:	8c 8f       	std	Y+28, r24	; 0x1c
    2232:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2234:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <Adc_enuStartConversionSync+0x220>
    223a:	9d 8f       	std	Y+29, r25	; 0x1d
    223c:	8c 8f       	std	Y+28, r24	; 0x1c
    223e:	2a c0       	rjmp	.+84     	; 0x2294 <Adc_enuStartConversionSync+0x27e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4f e7       	ldi	r20, 0x7F	; 127
    2246:	53 e4       	ldi	r21, 0x43	; 67
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__gesf2>
    2254:	18 16       	cp	r1, r24
    2256:	ac f4       	brge	.+42     	; 0x2282 <Adc_enuStartConversionSync+0x26c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2258:	6b 85       	ldd	r22, Y+11	; 0x0b
    225a:	7c 85       	ldd	r23, Y+12	; 0x0c
    225c:	8d 85       	ldd	r24, Y+13	; 0x0d
    225e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2260:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9f 8f       	std	Y+31, r25	; 0x1f
    226a:	8e 8f       	std	Y+30, r24	; 0x1e
    226c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    226e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2270:	99 a3       	std	Y+33, r25	; 0x21
    2272:	88 a3       	std	Y+32, r24	; 0x20
    2274:	88 a1       	ldd	r24, Y+32	; 0x20
    2276:	99 a1       	ldd	r25, Y+33	; 0x21
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <Adc_enuStartConversionSync+0x262>
    227c:	99 a3       	std	Y+33, r25	; 0x21
    227e:	88 a3       	std	Y+32, r24	; 0x20
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <Adc_enuStartConversionSync+0x28a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8f 87       	std	Y+15, r24	; 0x0f
    2294:	8f 85       	ldd	r24, Y+15	; 0x0f
    2296:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2298:	8a a1       	ldd	r24, Y+34	; 0x22
    229a:	8a 95       	dec	r24
    229c:	f1 f7       	brne	.-4      	; 0x229a <Adc_enuStartConversionSync+0x284>
    229e:	8a a3       	std	Y+34, r24	; 0x22
	            _delay_us(10);

	            Loc_enuAdcStatus &= Adc_GetResult(Address_Adc->result_format ,Address_ResultDigitalVoltage);
    22a0:	8b a1       	ldd	r24, Y+35	; 0x23
    22a2:	9c a1       	ldd	r25, Y+36	; 0x24
    22a4:	fc 01       	movw	r30, r24
    22a6:	22 81       	ldd	r18, Z+2	; 0x02
    22a8:	8d a1       	ldd	r24, Y+37	; 0x25
    22aa:	9e a1       	ldd	r25, Y+38	; 0x26
    22ac:	bc 01       	movw	r22, r24
    22ae:	82 2f       	mov	r24, r18
    22b0:	0e 94 34 12 	call	0x2468	; 0x2468 <Adc_GetResult>
    22b4:	98 2f       	mov	r25, r24
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	89 23       	and	r24, r25
    22ba:	89 83       	std	Y+1, r24	; 0x01

	            /* Return Status Of The Adc Interrupt*/
	            Adc_ClearInterruptFlag();
    22bc:	86 e2       	ldi	r24, 0x26	; 38
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	26 e2       	ldi	r18, 0x26	; 38
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	f9 01       	movw	r30, r18
    22c6:	20 81       	ld	r18, Z
    22c8:	20 61       	ori	r18, 0x10	; 16
    22ca:	fc 01       	movw	r30, r24
    22cc:	20 83       	st	Z, r18
	            Adc_SetInterruptEnable(Loc_u8AdcInterruptStatus);
    22ce:	86 e2       	ldi	r24, 0x26	; 38
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	26 e2       	ldi	r18, 0x26	; 38
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	f9 01       	movw	r30, r18
    22d8:	20 81       	ld	r18, Z
    22da:	42 2f       	mov	r20, r18
    22dc:	47 7f       	andi	r20, 0xF7	; 247
    22de:	2a 81       	ldd	r18, Y+2	; 0x02
    22e0:	22 2f       	mov	r18, r18
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	22 0f       	add	r18, r18
    22e6:	33 1f       	adc	r19, r19
    22e8:	22 0f       	add	r18, r18
    22ea:	33 1f       	adc	r19, r19
    22ec:	22 0f       	add	r18, r18
    22ee:	33 1f       	adc	r19, r19
    22f0:	24 2b       	or	r18, r20
    22f2:	fc 01       	movw	r30, r24
    22f4:	20 83       	st	Z, r18
	        }

	    return Loc_enuAdcStatus;
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f8:	a6 96       	adiw	r28, 0x26	; 38
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	08 95       	ret

0000230a <Adc_ConvertResultToVoltage>:



Adc_StatusErrorType Adc_ConvertResultToVoltage( u16 Copy_u16DigitalValue, f32* Address_ResultAnalogVoltage){
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	00 d0       	rcall	.+0      	; 0x2310 <Adc_ConvertResultToVoltage+0x6>
    2310:	00 d0       	rcall	.+0      	; 0x2312 <Adc_ConvertResultToVoltage+0x8>
    2312:	1f 92       	push	r1
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	9b 83       	std	Y+3, r25	; 0x03
    231a:	8a 83       	std	Y+2, r24	; 0x02
    231c:	7d 83       	std	Y+5, r23	; 0x05
    231e:	6c 83       	std	Y+4, r22	; 0x04

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_ResultAnalogVoltage){
    2324:	8c 81       	ldd	r24, Y+4	; 0x04
    2326:	9d 81       	ldd	r25, Y+5	; 0x05
    2328:	89 2b       	or	r24, r25
    232a:	19 f4       	brne	.+6      	; 0x2332 <Adc_ConvertResultToVoltage+0x28>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	1c c0       	rjmp	.+56     	; 0x236a <Adc_ConvertResultToVoltage+0x60>
	    }
	    else{
	           /* Vanalog = Vdigital * step    */
	           /* Step Size = (Vmax-Vmin)/2^n      */
	           *Address_ResultAnalogVoltage = Copy_u16DigitalValue*0.004883F;
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	9b 81       	ldd	r25, Y+3	; 0x03
    2336:	cc 01       	movw	r24, r24
    2338:	a0 e0       	ldi	r26, 0x00	; 0
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__floatunsisf>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	23 e9       	ldi	r18, 0x93	; 147
    234a:	31 e0       	ldi	r19, 0x01	; 1
    234c:	40 ea       	ldi	r20, 0xA0	; 160
    234e:	5b e3       	ldi	r21, 0x3B	; 59
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	2c 81       	ldd	r18, Y+4	; 0x04
    235e:	3d 81       	ldd	r19, Y+5	; 0x05
    2360:	f9 01       	movw	r30, r18
    2362:	80 83       	st	Z, r24
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	a2 83       	std	Z+2, r26	; 0x02
    2368:	b3 83       	std	Z+3, r27	; 0x03
	       }

	    return Loc_enuAdcStatus;
    236a:	89 81       	ldd	r24, Y+1	; 0x01
}
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	08 95       	ret

0000237c <Adc_StartConversionAsync>:


Adc_StatusErrorType Adc_StartConversionAsync(const Adc_PinConfigType* Address_Adc){
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	00 d0       	rcall	.+0      	; 0x2382 <Adc_StartConversionAsync+0x6>
    2382:	1f 92       	push	r1
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	9b 83       	std	Y+3, r25	; 0x03
    238a:	8a 83       	std	Y+2, r24	; 0x02

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Adc){
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	9b 81       	ldd	r25, Y+3	; 0x03
    2394:	89 2b       	or	r24, r25
    2396:	19 f4       	brne	.+6      	; 0x239e <Adc_StartConversionAsync+0x22>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	34 c0       	rjmp	.+104    	; 0x2406 <Adc_StartConversionAsync+0x8a>
	    }
	    else{
	    	 /* You can't start A new Conversion Unless The old One Is Done*/
	    	        while( ZERO_VALUE == Adc_IsConversionCompleted() );
    239e:	00 00       	nop
    23a0:	86 e2       	ldi	r24, 0x26	; 38
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	fc 01       	movw	r30, r24
    23a6:	80 81       	ld	r24, Z
    23a8:	82 95       	swap	r24
    23aa:	86 95       	lsr	r24
    23ac:	86 95       	lsr	r24
    23ae:	83 70       	andi	r24, 0x03	; 3
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	81 70       	andi	r24, 0x01	; 1
    23b6:	99 27       	eor	r25, r25
    23b8:	89 2b       	or	r24, r25
    23ba:	91 f7       	brne	.-28     	; 0x23a0 <Adc_StartConversionAsync+0x24>

	    	        Global_AdcInterruptIndex = (u8)Address_Adc->channel_number;
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	9b 81       	ldd	r25, Y+3	; 0x03
    23c0:	fc 01       	movw	r30, r24
    23c2:	80 81       	ld	r24, Z
    23c4:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Global_AdcInterruptIndex>
	    	        current_format = Address_Adc->result_format;
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	9b 81       	ldd	r25, Y+3	; 0x03
    23cc:	fc 01       	movw	r30, r24
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <current_format>
	    	        /* Choose Selected Channel */
	    	        Adc_SelectChannel(Address_Adc->channel_number);
    23d4:	87 e2       	ldi	r24, 0x27	; 39
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	27 e2       	ldi	r18, 0x27	; 39
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	f9 01       	movw	r30, r18
    23de:	20 81       	ld	r18, Z
    23e0:	42 2f       	mov	r20, r18
    23e2:	48 7f       	andi	r20, 0xF8	; 248
    23e4:	2a 81       	ldd	r18, Y+2	; 0x02
    23e6:	3b 81       	ldd	r19, Y+3	; 0x03
    23e8:	f9 01       	movw	r30, r18
    23ea:	20 81       	ld	r18, Z
    23ec:	27 70       	andi	r18, 0x07	; 7
    23ee:	24 2b       	or	r18, r20
    23f0:	fc 01       	movw	r30, r24
    23f2:	20 83       	st	Z, r18


	    	        /* Start Conversion  */
	    	        Adc_StartConversion();
    23f4:	86 e2       	ldi	r24, 0x26	; 38
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	26 e2       	ldi	r18, 0x26	; 38
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	f9 01       	movw	r30, r18
    23fe:	20 81       	ld	r18, Z
    2400:	20 64       	ori	r18, 0x40	; 64
    2402:	fc 01       	movw	r30, r24
    2404:	20 83       	st	Z, r18
	    }

	    return Loc_enuAdcStatus;
    2406:	89 81       	ldd	r24, Y+1	; 0x01
}
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	08 95       	ret

00002414 <Adc_enuEnableInterrupt>:


Adc_StatusErrorType Adc_enuEnableInterrupt(void){
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	1f 92       	push	r1
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	89 83       	std	Y+1, r24	; 0x01
	Adc_EnableInterrupt();
    2422:	86 e2       	ldi	r24, 0x26	; 38
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	26 e2       	ldi	r18, 0x26	; 38
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	f9 01       	movw	r30, r18
    242c:	20 81       	ld	r18, Z
    242e:	28 60       	ori	r18, 0x08	; 8
    2430:	fc 01       	movw	r30, r24
    2432:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    2434:	89 81       	ldd	r24, Y+1	; 0x01
}
    2436:	0f 90       	pop	r0
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	08 95       	ret

0000243e <Adc_enuDisableInterrupt>:


Adc_StatusErrorType Adc_enuDisableInterrupt(void){
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	1f 92       	push	r1
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	89 83       	std	Y+1, r24	; 0x01
	Adc_DisableInterrupt();
    244c:	86 e2       	ldi	r24, 0x26	; 38
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	26 e2       	ldi	r18, 0x26	; 38
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	f9 01       	movw	r30, r18
    2456:	20 81       	ld	r18, Z
    2458:	27 7f       	andi	r18, 0xF7	; 247
    245a:	fc 01       	movw	r30, r24
    245c:	20 83       	st	Z, r18

		    return Loc_enuAdcStatus;
    245e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2460:	0f 90       	pop	r0
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <Adc_GetResult>:




////////////////////////////////////////////////Helpers Functions ///////////////////////////
static Adc_StatusErrorType Adc_GetResult(const Adc_ResultFormartType Copy_enuResultFormat, u16* Address_Result){
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	00 d0       	rcall	.+0      	; 0x246e <Adc_GetResult+0x6>
    246e:	00 d0       	rcall	.+0      	; 0x2470 <Adc_GetResult+0x8>
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	8a 83       	std	Y+2, r24	; 0x02
    2476:	7c 83       	std	Y+4, r23	; 0x04
    2478:	6b 83       	std	Y+3, r22	; 0x03

	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL == Address_Result){
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	89 2b       	or	r24, r25
    2484:	19 f4       	brne	.+6      	; 0x248c <Adc_GetResult+0x24>

	    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	30 c0       	rjmp	.+96     	; 0x24ec <Adc_GetResult+0x84>
	    }

	    	else{
	    	        switch(Copy_enuResultFormat){
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	89 2b       	or	r24, r25
    2494:	b9 f4       	brne	.+46     	; 0x24c4 <Adc_GetResult+0x5c>

	    	        case ADC_RIGHT_JUSTIFIED:



	    	                *Address_Result = (ADCL) | (ADCH <<8) ;
    2496:	84 e2       	ldi	r24, 0x24	; 36
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	fc 01       	movw	r30, r24
    249c:	80 81       	ld	r24, Z
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	85 e2       	ldi	r24, 0x25	; 37
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	fc 01       	movw	r30, r24
    24a8:	80 81       	ld	r24, Z
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	98 2f       	mov	r25, r24
    24b0:	88 27       	eor	r24, r24
    24b2:	82 2b       	or	r24, r18
    24b4:	93 2b       	or	r25, r19
    24b6:	9c 01       	movw	r18, r24
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	fc 01       	movw	r30, r24
    24be:	31 83       	std	Z+1, r19	; 0x01
    24c0:	20 83       	st	Z, r18
	    	                break;
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <Adc_GetResult+0x84>

	    	            default:
	    	            	*Address_Result = (ADCHL>>6) & 0x3FF;
    24c4:	84 e2       	ldi	r24, 0x24	; 36
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	fc 01       	movw	r30, r24
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	9c 01       	movw	r18, r24
    24d0:	00 24       	eor	r0, r0
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	00 1c       	adc	r0, r0
    24d8:	22 0f       	add	r18, r18
    24da:	33 1f       	adc	r19, r19
    24dc:	00 1c       	adc	r0, r0
    24de:	23 2f       	mov	r18, r19
    24e0:	30 2d       	mov	r19, r0
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	fc 01       	movw	r30, r24
    24e8:	31 83       	std	Z+1, r19	; 0x01
    24ea:	20 83       	st	Z, r18

	    	        }
	    	    }


	    return Loc_enuAdcStatus;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	08 95       	ret

000024fc <Adc_SetCallbackFunction>:

Adc_StatusErrorType Adc_SetCallbackFunction(const Adc_PinConfigType* Address_Adc, void (*callback)(u16)){
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	00 d0       	rcall	.+0      	; 0x2502 <Adc_SetCallbackFunction+0x6>
    2502:	00 d0       	rcall	.+0      	; 0x2504 <Adc_SetCallbackFunction+0x8>
    2504:	1f 92       	push	r1
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	9b 83       	std	Y+3, r25	; 0x03
    250c:	8a 83       	std	Y+2, r24	; 0x02
    250e:	7d 83       	std	Y+5, r23	; 0x05
    2510:	6c 83       	std	Y+4, r22	; 0x04
	Adc_StatusErrorType Loc_enuAdcStatus = ADC_STATUS_OK;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	89 83       	std	Y+1, r24	; 0x01
		    if(NULL == Address_Adc){
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	9b 81       	ldd	r25, Y+3	; 0x03
    251a:	89 2b       	or	r24, r25
    251c:	19 f4       	brne	.+6      	; 0x2524 <Adc_SetCallbackFunction+0x28>
		    	Loc_enuAdcStatus = ADC_STATUS_NULL_POINTER_ADDRESS;
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <Adc_SetCallbackFunction+0x46>
		    }
		    else{
		    	Adc_InterruptHandlerArr[Address_Adc->channel_number] = callback;
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	9b 81       	ldd	r25, Y+3	; 0x03
    2528:	fc 01       	movw	r30, r24
    252a:	80 81       	ld	r24, Z
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	83 55       	subi	r24, 0x53	; 83
    2536:	9f 4f       	sbci	r25, 0xFF	; 255
    2538:	2c 81       	ldd	r18, Y+4	; 0x04
    253a:	3d 81       	ldd	r19, Y+5	; 0x05
    253c:	fc 01       	movw	r30, r24
    253e:	31 83       	std	Z+1, r19	; 0x01
    2540:	20 83       	st	Z, r18
		    }
		    return Loc_enuAdcStatus;
    2542:	89 81       	ldd	r24, Y+1	; 0x01
}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <__vector_16>:

// ISR function For ADC
void __vector_16(void) __attribute__((signal));

void __vector_16(void){
    2554:	1f 92       	push	r1
    2556:	0f 92       	push	r0
    2558:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    255c:	0f 92       	push	r0
    255e:	11 24       	eor	r1, r1
    2560:	2f 93       	push	r18
    2562:	3f 93       	push	r19
    2564:	4f 93       	push	r20
    2566:	5f 93       	push	r21
    2568:	6f 93       	push	r22
    256a:	7f 93       	push	r23
    256c:	8f 93       	push	r24
    256e:	9f 93       	push	r25
    2570:	af 93       	push	r26
    2572:	bf 93       	push	r27
    2574:	ef 93       	push	r30
    2576:	ff 93       	push	r31
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	00 d0       	rcall	.+0      	; 0x257e <__vector_16+0x2a>
    257e:	1f 92       	push	r1
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62

	    u16 Loc_u16Result;
	    Adc_StatusErrorType Loc_enuAdcStatus  = ADC_STATUS_OK;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	89 83       	std	Y+1, r24	; 0x01

	    Loc_enuAdcStatus = Adc_GetResult(current_format,&Loc_u16Result);
    2588:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <current_format>
    258c:	ce 01       	movw	r24, r28
    258e:	02 96       	adiw	r24, 0x02	; 2
    2590:	bc 01       	movw	r22, r24
    2592:	82 2f       	mov	r24, r18
    2594:	0e 94 34 12 	call	0x2468	; 0x2468 <Adc_GetResult>
    2598:	89 83       	std	Y+1, r24	; 0x01
	    if(NULL != Adc_InterruptHandlerArr[Global_AdcInterruptIndex]){
    259a:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <Global_AdcInterruptIndex>
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	83 55       	subi	r24, 0x53	; 83
    25a8:	9f 4f       	sbci	r25, 0xFF	; 255
    25aa:	fc 01       	movw	r30, r24
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	89 2b       	or	r24, r25
    25b2:	79 f0       	breq	.+30     	; 0x25d2 <__vector_16+0x7e>
	        Adc_InterruptHandlerArr[Global_AdcInterruptIndex](Loc_u16Result);
    25b4:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <Global_AdcInterruptIndex>
    25b8:	88 2f       	mov	r24, r24
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	83 55       	subi	r24, 0x53	; 83
    25c2:	9f 4f       	sbci	r25, 0xFF	; 255
    25c4:	fc 01       	movw	r30, r24
    25c6:	20 81       	ld	r18, Z
    25c8:	31 81       	ldd	r19, Z+1	; 0x01
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	f9 01       	movw	r30, r18
    25d0:	09 95       	icall
	    }
	    else {/* do nothing , error in declaration */ }

}
    25d2:	00 00       	nop
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	ff 91       	pop	r31
    25e0:	ef 91       	pop	r30
    25e2:	bf 91       	pop	r27
    25e4:	af 91       	pop	r26
    25e6:	9f 91       	pop	r25
    25e8:	8f 91       	pop	r24
    25ea:	7f 91       	pop	r23
    25ec:	6f 91       	pop	r22
    25ee:	5f 91       	pop	r21
    25f0:	4f 91       	pop	r20
    25f2:	3f 91       	pop	r19
    25f4:	2f 91       	pop	r18
    25f6:	0f 90       	pop	r0
    25f8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    25fc:	0f 90       	pop	r0
    25fe:	1f 90       	pop	r1
    2600:	18 95       	reti

00002602 <main>:
/**************************************************************************/

#include "slave_smart_home.h"


int main(){
    2602:	cf 93       	push	r28
    2604:	df 93       	push	r29
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62

	SlaveSmart_enuInit();
    260a:	0e 94 77 13 	call	0x26ee	; 0x26ee <SlaveSmart_enuInit>

	while(1){

	}
    260e:	ff cf       	rjmp	.-2      	; 0x260e <main+0xc>

00002610 <smart_voidTimer0Isr>:

	return 0;
}

void smart_voidTimer0Isr(void){
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	00 d0       	rcall	.+0      	; 0x2616 <smart_voidTimer0Isr+0x6>
    2616:	00 d0       	rcall	.+0      	; 0x2618 <smart_voidTimer0Isr+0x8>
    2618:	00 d0       	rcall	.+0      	; 0x261a <smart_voidTimer0Isr+0xa>
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 Loc_u8Counter = ZERO_VALUE;
	u16 Loc_u16AdcResult;
	f32 Loc_f32Result;
	Loc_u8Counter++;
    261e:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Loc_u8Counter.2033>
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Loc_u8Counter.2033>
	if(15 == Loc_u8Counter){
    2628:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Loc_u8Counter.2033>
    262c:	8f 30       	cpi	r24, 0x0F	; 15
    262e:	a9 f5       	brne	.+106    	; 0x269a <smart_voidTimer0Isr+0x8a>

		Adc_enuStartConversionSync(&Adc0, &Loc_u16AdcResult);
    2630:	ce 01       	movw	r24, r28
    2632:	01 96       	adiw	r24, 0x01	; 1
    2634:	bc 01       	movw	r22, r24
    2636:	80 e9       	ldi	r24, 0x90	; 144
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 0b 10 	call	0x2016	; 0x2016 <Adc_enuStartConversionSync>

		Adc_ConvertResultToVoltage(Loc_u16AdcResult, &Loc_f32Result);
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	9e 01       	movw	r18, r28
    2644:	2d 5f       	subi	r18, 0xFD	; 253
    2646:	3f 4f       	sbci	r19, 0xFF	; 255
    2648:	b9 01       	movw	r22, r18
    264a:	0e 94 85 11 	call	0x230a	; 0x230a <Adc_ConvertResultToVoltage>
		Convert_VoltToTempLm35(Loc_f32Result, &Loc_u16AdcResult);
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	ad 81       	ldd	r26, Y+5	; 0x05
    2654:	be 81       	ldd	r27, Y+6	; 0x06
    2656:	9e 01       	movw	r18, r28
    2658:	2f 5f       	subi	r18, 0xFF	; 255
    265a:	3f 4f       	sbci	r19, 0xFF	; 255
    265c:	a9 01       	movw	r20, r18
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 3b 05 	call	0xa76	; 0xa76 <Convert_VoltToTempLm35>

		if(Loc_u16AdcResult >=70){
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	86 34       	cpi	r24, 0x46	; 70
    266c:	91 05       	cpc	r25, r1
    266e:	50 f0       	brcs	.+20     	; 0x2684 <smart_voidTimer0Isr+0x74>
			Dio_enuWriteChannel(BUZZER_PIN, DIO_HIGH);
    2670:	61 e0       	ldi	r22, 0x01	; 1
    2672:	83 e1       	ldi	r24, 0x13	; 19
    2674:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Dio_enuWriteChannel>
			Timer0_enuSetDutyCyclePwm(&Timer0,100);
    2678:	64 e6       	ldi	r22, 0x64	; 100
    267a:	80 e6       	ldi	r24, 0x60	; 96
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 f7 07 	call	0xfee	; 0xfee <Timer0_enuSetDutyCyclePwm>
    2682:	09 c0       	rjmp	.+18     	; 0x2696 <smart_voidTimer0Isr+0x86>
		}
		else{
			Dio_enuWriteChannel(BUZZER_PIN, DIO_LOW);
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	83 e1       	ldi	r24, 0x13	; 19
    2688:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Dio_enuWriteChannel>
			Timer0_enuSetDutyCyclePwm(&Timer0,0);
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	80 e6       	ldi	r24, 0x60	; 96
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 f7 07 	call	0xfee	; 0xfee <Timer0_enuSetDutyCyclePwm>
		}

		Loc_u8Counter = ZERO_VALUE;
    2696:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <Loc_u8Counter.2033>
	}
}
    269a:	00 00       	nop
    269c:	26 96       	adiw	r28, 0x06	; 6
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	08 95       	ret

000026ae <smart_voidSpiIsr>:

void smart_voidSpiIsr(u8 Copy_u8Result){
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	1f 92       	push	r1
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	89 83       	std	Y+1, r24	; 0x01

		Dio_enuWriteChannel(ROOM1_PIN, READ_BIT(Copy_u8Result,0));
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	81 70       	andi	r24, 0x01	; 1
    26be:	68 2f       	mov	r22, r24
    26c0:	80 e1       	ldi	r24, 0x10	; 16
    26c2:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(ROOM2_PIN, READ_BIT(Copy_u8Result,1));
    26c6:	89 81       	ldd	r24, Y+1	; 0x01
    26c8:	86 95       	lsr	r24
    26ca:	81 70       	andi	r24, 0x01	; 1
    26cc:	68 2f       	mov	r22, r24
    26ce:	81 e1       	ldi	r24, 0x11	; 17
    26d0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Dio_enuWriteChannel>
		Dio_enuWriteChannel(ROOM3_PIN, READ_BIT(Copy_u8Result,2));
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	86 95       	lsr	r24
    26d8:	86 95       	lsr	r24
    26da:	81 70       	andi	r24, 0x01	; 1
    26dc:	68 2f       	mov	r22, r24
    26de:	82 e1       	ldi	r24, 0x12	; 18
    26e0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Dio_enuWriteChannel>

}
    26e4:	00 00       	nop
    26e6:	0f 90       	pop	r0
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <SlaveSmart_enuInit>:




/********************************** Software Interfaces Declarations *******************/
SlaveSmart_ErrorStatusType SlaveSmart_enuInit(void){
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	1f 92       	push	r1
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
	SlaveSmart_ErrorStatusType Loc_enuSmartStatusError = SLAVE_SMART_ERROR_STATUS_OK;
    26f8:	19 82       	std	Y+1, r1	; 0x01

		/* Port Init */
		Port_voidInit();
    26fa:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <Port_voidInit>


		/* Timer0 Init Overflow */
		Timer0_enuInit(&Timer0);
    26fe:	80 e6       	ldi	r24, 0x60	; 96
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	0e 94 75 05 	call	0xaea	; 0xaea <Timer0_enuInit>
		Timer0_enuSetCallbackFunction(&Timer0,smart_voidTimer0Isr);
    2706:	68 e0       	ldi	r22, 0x08	; 8
    2708:	73 e1       	ldi	r23, 0x13	; 19
    270a:	80 e6       	ldi	r24, 0x60	; 96
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 16 07 	call	0xe2c	; 0xe2c <Timer0_enuSetCallbackFunction>
		Timer0_enuEnableInterrupt(&Timer0);
    2712:	80 e6       	ldi	r24, 0x60	; 96
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 45 06 	call	0xc8a	; 0xc8a <Timer0_enuEnableInterrupt>
		Timer0_enuSetDutyCyclePwm(&Timer0, 0);
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	80 e6       	ldi	r24, 0x60	; 96
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 f7 07 	call	0xfee	; 0xfee <Timer0_enuSetDutyCyclePwm>

		/* Spi Init Slave */
		Spi_enuInit(&Spi);
    2724:	83 e6       	ldi	r24, 0x63	; 99
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 00 09 	call	0x1200	; 0x1200 <Spi_enuInit>
		Spi_enuEnableInterrupt();
    272c:	0e 94 bc 09 	call	0x1378	; 0x1378 <Spi_enuEnableInterrupt>
		Spi_enuSetCallbackFunction(smart_voidSpiIsr);
    2730:	87 e5       	ldi	r24, 0x57	; 87
    2732:	93 e1       	ldi	r25, 0x13	; 19
    2734:	0e 94 e6 09 	call	0x13cc	; 0x13cc <Spi_enuSetCallbackFunction>

		/* Adc Init */
		Adc_enuInit(&Adc0);
    2738:	80 e9       	ldi	r24, 0x90	; 144
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <Adc_enuInit>
		/* Enable Global Interrupt */
		Gie_enuEnableGlobalInterrupt();
    2740:	0e 94 67 0d 	call	0x1ace	; 0x1ace <Gie_enuEnableGlobalInterrupt>

		return Loc_enuSmartStatusError;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
}
    2746:	0f 90       	pop	r0
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	08 95       	ret

0000274e <__tablejump2__>:
    274e:	ee 0f       	add	r30, r30
    2750:	ff 1f       	adc	r31, r31
    2752:	05 90       	lpm	r0, Z+
    2754:	f4 91       	lpm	r31, Z
    2756:	e0 2d       	mov	r30, r0
    2758:	09 94       	ijmp

0000275a <__ashldi3>:
    275a:	0f 93       	push	r16
    275c:	08 30       	cpi	r16, 0x08	; 8
    275e:	90 f0       	brcs	.+36     	; 0x2784 <__ashldi3+0x2a>
    2760:	98 2f       	mov	r25, r24
    2762:	87 2f       	mov	r24, r23
    2764:	76 2f       	mov	r23, r22
    2766:	65 2f       	mov	r22, r21
    2768:	54 2f       	mov	r21, r20
    276a:	43 2f       	mov	r20, r19
    276c:	32 2f       	mov	r19, r18
    276e:	22 27       	eor	r18, r18
    2770:	08 50       	subi	r16, 0x08	; 8
    2772:	f4 cf       	rjmp	.-24     	; 0x275c <__ashldi3+0x2>
    2774:	22 0f       	add	r18, r18
    2776:	33 1f       	adc	r19, r19
    2778:	44 1f       	adc	r20, r20
    277a:	55 1f       	adc	r21, r21
    277c:	66 1f       	adc	r22, r22
    277e:	77 1f       	adc	r23, r23
    2780:	88 1f       	adc	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	0a 95       	dec	r16
    2786:	b2 f7       	brpl	.-20     	; 0x2774 <__ashldi3+0x1a>
    2788:	0f 91       	pop	r16
    278a:	08 95       	ret

0000278c <__adddi3>:
    278c:	2a 0d       	add	r18, r10
    278e:	3b 1d       	adc	r19, r11
    2790:	4c 1d       	adc	r20, r12
    2792:	5d 1d       	adc	r21, r13
    2794:	6e 1d       	adc	r22, r14
    2796:	7f 1d       	adc	r23, r15
    2798:	80 1f       	adc	r24, r16
    279a:	91 1f       	adc	r25, r17
    279c:	08 95       	ret

0000279e <__subsf3>:
    279e:	50 58       	subi	r21, 0x80	; 128

000027a0 <__addsf3>:
    27a0:	bb 27       	eor	r27, r27
    27a2:	aa 27       	eor	r26, r26
    27a4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__addsf3x>
    27a8:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__fp_round>
    27ac:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__fp_pscA>
    27b0:	38 f0       	brcs	.+14     	; 0x27c0 <__addsf3+0x20>
    27b2:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__fp_pscB>
    27b6:	20 f0       	brcs	.+8      	; 0x27c0 <__addsf3+0x20>
    27b8:	39 f4       	brne	.+14     	; 0x27c8 <__addsf3+0x28>
    27ba:	9f 3f       	cpi	r25, 0xFF	; 255
    27bc:	19 f4       	brne	.+6      	; 0x27c4 <__addsf3+0x24>
    27be:	26 f4       	brtc	.+8      	; 0x27c8 <__addsf3+0x28>
    27c0:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__fp_nan>
    27c4:	0e f4       	brtc	.+2      	; 0x27c8 <__addsf3+0x28>
    27c6:	e0 95       	com	r30
    27c8:	e7 fb       	bst	r30, 7
    27ca:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__fp_inf>

000027ce <__addsf3x>:
    27ce:	e9 2f       	mov	r30, r25
    27d0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__fp_split3>
    27d4:	58 f3       	brcs	.-42     	; 0x27ac <__addsf3+0xc>
    27d6:	ba 17       	cp	r27, r26
    27d8:	62 07       	cpc	r22, r18
    27da:	73 07       	cpc	r23, r19
    27dc:	84 07       	cpc	r24, r20
    27de:	95 07       	cpc	r25, r21
    27e0:	20 f0       	brcs	.+8      	; 0x27ea <__addsf3x+0x1c>
    27e2:	79 f4       	brne	.+30     	; 0x2802 <__addsf3x+0x34>
    27e4:	a6 f5       	brtc	.+104    	; 0x284e <__addsf3x+0x80>
    27e6:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__fp_zero>
    27ea:	0e f4       	brtc	.+2      	; 0x27ee <__addsf3x+0x20>
    27ec:	e0 95       	com	r30
    27ee:	0b 2e       	mov	r0, r27
    27f0:	ba 2f       	mov	r27, r26
    27f2:	a0 2d       	mov	r26, r0
    27f4:	0b 01       	movw	r0, r22
    27f6:	b9 01       	movw	r22, r18
    27f8:	90 01       	movw	r18, r0
    27fa:	0c 01       	movw	r0, r24
    27fc:	ca 01       	movw	r24, r20
    27fe:	a0 01       	movw	r20, r0
    2800:	11 24       	eor	r1, r1
    2802:	ff 27       	eor	r31, r31
    2804:	59 1b       	sub	r21, r25
    2806:	99 f0       	breq	.+38     	; 0x282e <__addsf3x+0x60>
    2808:	59 3f       	cpi	r21, 0xF9	; 249
    280a:	50 f4       	brcc	.+20     	; 0x2820 <__addsf3x+0x52>
    280c:	50 3e       	cpi	r21, 0xE0	; 224
    280e:	68 f1       	brcs	.+90     	; 0x286a <__addsf3x+0x9c>
    2810:	1a 16       	cp	r1, r26
    2812:	f0 40       	sbci	r31, 0x00	; 0
    2814:	a2 2f       	mov	r26, r18
    2816:	23 2f       	mov	r18, r19
    2818:	34 2f       	mov	r19, r20
    281a:	44 27       	eor	r20, r20
    281c:	58 5f       	subi	r21, 0xF8	; 248
    281e:	f3 cf       	rjmp	.-26     	; 0x2806 <__addsf3x+0x38>
    2820:	46 95       	lsr	r20
    2822:	37 95       	ror	r19
    2824:	27 95       	ror	r18
    2826:	a7 95       	ror	r26
    2828:	f0 40       	sbci	r31, 0x00	; 0
    282a:	53 95       	inc	r21
    282c:	c9 f7       	brne	.-14     	; 0x2820 <__addsf3x+0x52>
    282e:	7e f4       	brtc	.+30     	; 0x284e <__addsf3x+0x80>
    2830:	1f 16       	cp	r1, r31
    2832:	ba 0b       	sbc	r27, r26
    2834:	62 0b       	sbc	r22, r18
    2836:	73 0b       	sbc	r23, r19
    2838:	84 0b       	sbc	r24, r20
    283a:	ba f0       	brmi	.+46     	; 0x286a <__addsf3x+0x9c>
    283c:	91 50       	subi	r25, 0x01	; 1
    283e:	a1 f0       	breq	.+40     	; 0x2868 <__addsf3x+0x9a>
    2840:	ff 0f       	add	r31, r31
    2842:	bb 1f       	adc	r27, r27
    2844:	66 1f       	adc	r22, r22
    2846:	77 1f       	adc	r23, r23
    2848:	88 1f       	adc	r24, r24
    284a:	c2 f7       	brpl	.-16     	; 0x283c <__addsf3x+0x6e>
    284c:	0e c0       	rjmp	.+28     	; 0x286a <__addsf3x+0x9c>
    284e:	ba 0f       	add	r27, r26
    2850:	62 1f       	adc	r22, r18
    2852:	73 1f       	adc	r23, r19
    2854:	84 1f       	adc	r24, r20
    2856:	48 f4       	brcc	.+18     	; 0x286a <__addsf3x+0x9c>
    2858:	87 95       	ror	r24
    285a:	77 95       	ror	r23
    285c:	67 95       	ror	r22
    285e:	b7 95       	ror	r27
    2860:	f7 95       	ror	r31
    2862:	9e 3f       	cpi	r25, 0xFE	; 254
    2864:	08 f0       	brcs	.+2      	; 0x2868 <__addsf3x+0x9a>
    2866:	b0 cf       	rjmp	.-160    	; 0x27c8 <__addsf3+0x28>
    2868:	93 95       	inc	r25
    286a:	88 0f       	add	r24, r24
    286c:	08 f0       	brcs	.+2      	; 0x2870 <__addsf3x+0xa2>
    286e:	99 27       	eor	r25, r25
    2870:	ee 0f       	add	r30, r30
    2872:	97 95       	ror	r25
    2874:	87 95       	ror	r24
    2876:	08 95       	ret

00002878 <__cmpsf2>:
    2878:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__fp_cmp>
    287c:	08 f4       	brcc	.+2      	; 0x2880 <__cmpsf2+0x8>
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	08 95       	ret

00002882 <__divsf3>:
    2882:	0e 94 55 14 	call	0x28aa	; 0x28aa <__divsf3x>
    2886:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__fp_round>
    288a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__fp_pscB>
    288e:	58 f0       	brcs	.+22     	; 0x28a6 <__divsf3+0x24>
    2890:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__fp_pscA>
    2894:	40 f0       	brcs	.+16     	; 0x28a6 <__divsf3+0x24>
    2896:	29 f4       	brne	.+10     	; 0x28a2 <__divsf3+0x20>
    2898:	5f 3f       	cpi	r21, 0xFF	; 255
    289a:	29 f0       	breq	.+10     	; 0x28a6 <__divsf3+0x24>
    289c:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__fp_inf>
    28a0:	51 11       	cpse	r21, r1
    28a2:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__fp_szero>
    28a6:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__fp_nan>

000028aa <__divsf3x>:
    28aa:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__fp_split3>
    28ae:	68 f3       	brcs	.-38     	; 0x288a <__divsf3+0x8>

000028b0 <__divsf3_pse>:
    28b0:	99 23       	and	r25, r25
    28b2:	b1 f3       	breq	.-20     	; 0x28a0 <__divsf3+0x1e>
    28b4:	55 23       	and	r21, r21
    28b6:	91 f3       	breq	.-28     	; 0x289c <__divsf3+0x1a>
    28b8:	95 1b       	sub	r25, r21
    28ba:	55 0b       	sbc	r21, r21
    28bc:	bb 27       	eor	r27, r27
    28be:	aa 27       	eor	r26, r26
    28c0:	62 17       	cp	r22, r18
    28c2:	73 07       	cpc	r23, r19
    28c4:	84 07       	cpc	r24, r20
    28c6:	38 f0       	brcs	.+14     	; 0x28d6 <__divsf3_pse+0x26>
    28c8:	9f 5f       	subi	r25, 0xFF	; 255
    28ca:	5f 4f       	sbci	r21, 0xFF	; 255
    28cc:	22 0f       	add	r18, r18
    28ce:	33 1f       	adc	r19, r19
    28d0:	44 1f       	adc	r20, r20
    28d2:	aa 1f       	adc	r26, r26
    28d4:	a9 f3       	breq	.-22     	; 0x28c0 <__divsf3_pse+0x10>
    28d6:	35 d0       	rcall	.+106    	; 0x2942 <__divsf3_pse+0x92>
    28d8:	0e 2e       	mov	r0, r30
    28da:	3a f0       	brmi	.+14     	; 0x28ea <__divsf3_pse+0x3a>
    28dc:	e0 e8       	ldi	r30, 0x80	; 128
    28de:	32 d0       	rcall	.+100    	; 0x2944 <__divsf3_pse+0x94>
    28e0:	91 50       	subi	r25, 0x01	; 1
    28e2:	50 40       	sbci	r21, 0x00	; 0
    28e4:	e6 95       	lsr	r30
    28e6:	00 1c       	adc	r0, r0
    28e8:	ca f7       	brpl	.-14     	; 0x28dc <__divsf3_pse+0x2c>
    28ea:	2b d0       	rcall	.+86     	; 0x2942 <__divsf3_pse+0x92>
    28ec:	fe 2f       	mov	r31, r30
    28ee:	29 d0       	rcall	.+82     	; 0x2942 <__divsf3_pse+0x92>
    28f0:	66 0f       	add	r22, r22
    28f2:	77 1f       	adc	r23, r23
    28f4:	88 1f       	adc	r24, r24
    28f6:	bb 1f       	adc	r27, r27
    28f8:	26 17       	cp	r18, r22
    28fa:	37 07       	cpc	r19, r23
    28fc:	48 07       	cpc	r20, r24
    28fe:	ab 07       	cpc	r26, r27
    2900:	b0 e8       	ldi	r27, 0x80	; 128
    2902:	09 f0       	breq	.+2      	; 0x2906 <__divsf3_pse+0x56>
    2904:	bb 0b       	sbc	r27, r27
    2906:	80 2d       	mov	r24, r0
    2908:	bf 01       	movw	r22, r30
    290a:	ff 27       	eor	r31, r31
    290c:	93 58       	subi	r25, 0x83	; 131
    290e:	5f 4f       	sbci	r21, 0xFF	; 255
    2910:	3a f0       	brmi	.+14     	; 0x2920 <__divsf3_pse+0x70>
    2912:	9e 3f       	cpi	r25, 0xFE	; 254
    2914:	51 05       	cpc	r21, r1
    2916:	78 f0       	brcs	.+30     	; 0x2936 <__divsf3_pse+0x86>
    2918:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__fp_inf>
    291c:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__fp_szero>
    2920:	5f 3f       	cpi	r21, 0xFF	; 255
    2922:	e4 f3       	brlt	.-8      	; 0x291c <__divsf3_pse+0x6c>
    2924:	98 3e       	cpi	r25, 0xE8	; 232
    2926:	d4 f3       	brlt	.-12     	; 0x291c <__divsf3_pse+0x6c>
    2928:	86 95       	lsr	r24
    292a:	77 95       	ror	r23
    292c:	67 95       	ror	r22
    292e:	b7 95       	ror	r27
    2930:	f7 95       	ror	r31
    2932:	9f 5f       	subi	r25, 0xFF	; 255
    2934:	c9 f7       	brne	.-14     	; 0x2928 <__divsf3_pse+0x78>
    2936:	88 0f       	add	r24, r24
    2938:	91 1d       	adc	r25, r1
    293a:	96 95       	lsr	r25
    293c:	87 95       	ror	r24
    293e:	97 f9       	bld	r25, 7
    2940:	08 95       	ret
    2942:	e1 e0       	ldi	r30, 0x01	; 1
    2944:	66 0f       	add	r22, r22
    2946:	77 1f       	adc	r23, r23
    2948:	88 1f       	adc	r24, r24
    294a:	bb 1f       	adc	r27, r27
    294c:	62 17       	cp	r22, r18
    294e:	73 07       	cpc	r23, r19
    2950:	84 07       	cpc	r24, r20
    2952:	ba 07       	cpc	r27, r26
    2954:	20 f0       	brcs	.+8      	; 0x295e <__divsf3_pse+0xae>
    2956:	62 1b       	sub	r22, r18
    2958:	73 0b       	sbc	r23, r19
    295a:	84 0b       	sbc	r24, r20
    295c:	ba 0b       	sbc	r27, r26
    295e:	ee 1f       	adc	r30, r30
    2960:	88 f7       	brcc	.-30     	; 0x2944 <__divsf3_pse+0x94>
    2962:	e0 95       	com	r30
    2964:	08 95       	ret

00002966 <__fixsfsi>:
    2966:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixunssfsi>
    296a:	68 94       	set
    296c:	b1 11       	cpse	r27, r1
    296e:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__fp_szero>
    2972:	08 95       	ret

00002974 <__fixunssfsi>:
    2974:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <__fp_splitA>
    2978:	88 f0       	brcs	.+34     	; 0x299c <__fixunssfsi+0x28>
    297a:	9f 57       	subi	r25, 0x7F	; 127
    297c:	98 f0       	brcs	.+38     	; 0x29a4 <__fixunssfsi+0x30>
    297e:	b9 2f       	mov	r27, r25
    2980:	99 27       	eor	r25, r25
    2982:	b7 51       	subi	r27, 0x17	; 23
    2984:	b0 f0       	brcs	.+44     	; 0x29b2 <__fixunssfsi+0x3e>
    2986:	e1 f0       	breq	.+56     	; 0x29c0 <__fixunssfsi+0x4c>
    2988:	66 0f       	add	r22, r22
    298a:	77 1f       	adc	r23, r23
    298c:	88 1f       	adc	r24, r24
    298e:	99 1f       	adc	r25, r25
    2990:	1a f0       	brmi	.+6      	; 0x2998 <__fixunssfsi+0x24>
    2992:	ba 95       	dec	r27
    2994:	c9 f7       	brne	.-14     	; 0x2988 <__fixunssfsi+0x14>
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <__fixunssfsi+0x4c>
    2998:	b1 30       	cpi	r27, 0x01	; 1
    299a:	91 f0       	breq	.+36     	; 0x29c0 <__fixunssfsi+0x4c>
    299c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fp_zero>
    29a0:	b1 e0       	ldi	r27, 0x01	; 1
    29a2:	08 95       	ret
    29a4:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__fp_zero>
    29a8:	67 2f       	mov	r22, r23
    29aa:	78 2f       	mov	r23, r24
    29ac:	88 27       	eor	r24, r24
    29ae:	b8 5f       	subi	r27, 0xF8	; 248
    29b0:	39 f0       	breq	.+14     	; 0x29c0 <__fixunssfsi+0x4c>
    29b2:	b9 3f       	cpi	r27, 0xF9	; 249
    29b4:	cc f3       	brlt	.-14     	; 0x29a8 <__fixunssfsi+0x34>
    29b6:	86 95       	lsr	r24
    29b8:	77 95       	ror	r23
    29ba:	67 95       	ror	r22
    29bc:	b3 95       	inc	r27
    29be:	d9 f7       	brne	.-10     	; 0x29b6 <__fixunssfsi+0x42>
    29c0:	3e f4       	brtc	.+14     	; 0x29d0 <__fixunssfsi+0x5c>
    29c2:	90 95       	com	r25
    29c4:	80 95       	com	r24
    29c6:	70 95       	com	r23
    29c8:	61 95       	neg	r22
    29ca:	7f 4f       	sbci	r23, 0xFF	; 255
    29cc:	8f 4f       	sbci	r24, 0xFF	; 255
    29ce:	9f 4f       	sbci	r25, 0xFF	; 255
    29d0:	08 95       	ret

000029d2 <__floatunsisf>:
    29d2:	e8 94       	clt
    29d4:	09 c0       	rjmp	.+18     	; 0x29e8 <__floatsisf+0x12>

000029d6 <__floatsisf>:
    29d6:	97 fb       	bst	r25, 7
    29d8:	3e f4       	brtc	.+14     	; 0x29e8 <__floatsisf+0x12>
    29da:	90 95       	com	r25
    29dc:	80 95       	com	r24
    29de:	70 95       	com	r23
    29e0:	61 95       	neg	r22
    29e2:	7f 4f       	sbci	r23, 0xFF	; 255
    29e4:	8f 4f       	sbci	r24, 0xFF	; 255
    29e6:	9f 4f       	sbci	r25, 0xFF	; 255
    29e8:	99 23       	and	r25, r25
    29ea:	a9 f0       	breq	.+42     	; 0x2a16 <__floatsisf+0x40>
    29ec:	f9 2f       	mov	r31, r25
    29ee:	96 e9       	ldi	r25, 0x96	; 150
    29f0:	bb 27       	eor	r27, r27
    29f2:	93 95       	inc	r25
    29f4:	f6 95       	lsr	r31
    29f6:	87 95       	ror	r24
    29f8:	77 95       	ror	r23
    29fa:	67 95       	ror	r22
    29fc:	b7 95       	ror	r27
    29fe:	f1 11       	cpse	r31, r1
    2a00:	f8 cf       	rjmp	.-16     	; 0x29f2 <__floatsisf+0x1c>
    2a02:	fa f4       	brpl	.+62     	; 0x2a42 <__floatsisf+0x6c>
    2a04:	bb 0f       	add	r27, r27
    2a06:	11 f4       	brne	.+4      	; 0x2a0c <__floatsisf+0x36>
    2a08:	60 ff       	sbrs	r22, 0
    2a0a:	1b c0       	rjmp	.+54     	; 0x2a42 <__floatsisf+0x6c>
    2a0c:	6f 5f       	subi	r22, 0xFF	; 255
    2a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a10:	8f 4f       	sbci	r24, 0xFF	; 255
    2a12:	9f 4f       	sbci	r25, 0xFF	; 255
    2a14:	16 c0       	rjmp	.+44     	; 0x2a42 <__floatsisf+0x6c>
    2a16:	88 23       	and	r24, r24
    2a18:	11 f0       	breq	.+4      	; 0x2a1e <__floatsisf+0x48>
    2a1a:	96 e9       	ldi	r25, 0x96	; 150
    2a1c:	11 c0       	rjmp	.+34     	; 0x2a40 <__floatsisf+0x6a>
    2a1e:	77 23       	and	r23, r23
    2a20:	21 f0       	breq	.+8      	; 0x2a2a <__floatsisf+0x54>
    2a22:	9e e8       	ldi	r25, 0x8E	; 142
    2a24:	87 2f       	mov	r24, r23
    2a26:	76 2f       	mov	r23, r22
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <__floatsisf+0x5e>
    2a2a:	66 23       	and	r22, r22
    2a2c:	71 f0       	breq	.+28     	; 0x2a4a <__floatsisf+0x74>
    2a2e:	96 e8       	ldi	r25, 0x86	; 134
    2a30:	86 2f       	mov	r24, r22
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	60 e0       	ldi	r22, 0x00	; 0
    2a36:	2a f0       	brmi	.+10     	; 0x2a42 <__floatsisf+0x6c>
    2a38:	9a 95       	dec	r25
    2a3a:	66 0f       	add	r22, r22
    2a3c:	77 1f       	adc	r23, r23
    2a3e:	88 1f       	adc	r24, r24
    2a40:	da f7       	brpl	.-10     	; 0x2a38 <__floatsisf+0x62>
    2a42:	88 0f       	add	r24, r24
    2a44:	96 95       	lsr	r25
    2a46:	87 95       	ror	r24
    2a48:	97 f9       	bld	r25, 7
    2a4a:	08 95       	ret

00002a4c <__fp_cmp>:
    2a4c:	99 0f       	add	r25, r25
    2a4e:	00 08       	sbc	r0, r0
    2a50:	55 0f       	add	r21, r21
    2a52:	aa 0b       	sbc	r26, r26
    2a54:	e0 e8       	ldi	r30, 0x80	; 128
    2a56:	fe ef       	ldi	r31, 0xFE	; 254
    2a58:	16 16       	cp	r1, r22
    2a5a:	17 06       	cpc	r1, r23
    2a5c:	e8 07       	cpc	r30, r24
    2a5e:	f9 07       	cpc	r31, r25
    2a60:	c0 f0       	brcs	.+48     	; 0x2a92 <__fp_cmp+0x46>
    2a62:	12 16       	cp	r1, r18
    2a64:	13 06       	cpc	r1, r19
    2a66:	e4 07       	cpc	r30, r20
    2a68:	f5 07       	cpc	r31, r21
    2a6a:	98 f0       	brcs	.+38     	; 0x2a92 <__fp_cmp+0x46>
    2a6c:	62 1b       	sub	r22, r18
    2a6e:	73 0b       	sbc	r23, r19
    2a70:	84 0b       	sbc	r24, r20
    2a72:	95 0b       	sbc	r25, r21
    2a74:	39 f4       	brne	.+14     	; 0x2a84 <__fp_cmp+0x38>
    2a76:	0a 26       	eor	r0, r26
    2a78:	61 f0       	breq	.+24     	; 0x2a92 <__fp_cmp+0x46>
    2a7a:	23 2b       	or	r18, r19
    2a7c:	24 2b       	or	r18, r20
    2a7e:	25 2b       	or	r18, r21
    2a80:	21 f4       	brne	.+8      	; 0x2a8a <__fp_cmp+0x3e>
    2a82:	08 95       	ret
    2a84:	0a 26       	eor	r0, r26
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <__fp_cmp+0x3e>
    2a88:	a1 40       	sbci	r26, 0x01	; 1
    2a8a:	a6 95       	lsr	r26
    2a8c:	8f ef       	ldi	r24, 0xFF	; 255
    2a8e:	81 1d       	adc	r24, r1
    2a90:	81 1d       	adc	r24, r1
    2a92:	08 95       	ret

00002a94 <__fp_inf>:
    2a94:	97 f9       	bld	r25, 7
    2a96:	9f 67       	ori	r25, 0x7F	; 127
    2a98:	80 e8       	ldi	r24, 0x80	; 128
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	08 95       	ret

00002aa0 <__fp_nan>:
    2aa0:	9f ef       	ldi	r25, 0xFF	; 255
    2aa2:	80 ec       	ldi	r24, 0xC0	; 192
    2aa4:	08 95       	ret

00002aa6 <__fp_pscA>:
    2aa6:	00 24       	eor	r0, r0
    2aa8:	0a 94       	dec	r0
    2aaa:	16 16       	cp	r1, r22
    2aac:	17 06       	cpc	r1, r23
    2aae:	18 06       	cpc	r1, r24
    2ab0:	09 06       	cpc	r0, r25
    2ab2:	08 95       	ret

00002ab4 <__fp_pscB>:
    2ab4:	00 24       	eor	r0, r0
    2ab6:	0a 94       	dec	r0
    2ab8:	12 16       	cp	r1, r18
    2aba:	13 06       	cpc	r1, r19
    2abc:	14 06       	cpc	r1, r20
    2abe:	05 06       	cpc	r0, r21
    2ac0:	08 95       	ret

00002ac2 <__fp_round>:
    2ac2:	09 2e       	mov	r0, r25
    2ac4:	03 94       	inc	r0
    2ac6:	00 0c       	add	r0, r0
    2ac8:	11 f4       	brne	.+4      	; 0x2ace <__fp_round+0xc>
    2aca:	88 23       	and	r24, r24
    2acc:	52 f0       	brmi	.+20     	; 0x2ae2 <__fp_round+0x20>
    2ace:	bb 0f       	add	r27, r27
    2ad0:	40 f4       	brcc	.+16     	; 0x2ae2 <__fp_round+0x20>
    2ad2:	bf 2b       	or	r27, r31
    2ad4:	11 f4       	brne	.+4      	; 0x2ada <__fp_round+0x18>
    2ad6:	60 ff       	sbrs	r22, 0
    2ad8:	04 c0       	rjmp	.+8      	; 0x2ae2 <__fp_round+0x20>
    2ada:	6f 5f       	subi	r22, 0xFF	; 255
    2adc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ade:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae2:	08 95       	ret

00002ae4 <__fp_split3>:
    2ae4:	57 fd       	sbrc	r21, 7
    2ae6:	90 58       	subi	r25, 0x80	; 128
    2ae8:	44 0f       	add	r20, r20
    2aea:	55 1f       	adc	r21, r21
    2aec:	59 f0       	breq	.+22     	; 0x2b04 <__fp_splitA+0x10>
    2aee:	5f 3f       	cpi	r21, 0xFF	; 255
    2af0:	71 f0       	breq	.+28     	; 0x2b0e <__fp_splitA+0x1a>
    2af2:	47 95       	ror	r20

00002af4 <__fp_splitA>:
    2af4:	88 0f       	add	r24, r24
    2af6:	97 fb       	bst	r25, 7
    2af8:	99 1f       	adc	r25, r25
    2afa:	61 f0       	breq	.+24     	; 0x2b14 <__fp_splitA+0x20>
    2afc:	9f 3f       	cpi	r25, 0xFF	; 255
    2afe:	79 f0       	breq	.+30     	; 0x2b1e <__fp_splitA+0x2a>
    2b00:	87 95       	ror	r24
    2b02:	08 95       	ret
    2b04:	12 16       	cp	r1, r18
    2b06:	13 06       	cpc	r1, r19
    2b08:	14 06       	cpc	r1, r20
    2b0a:	55 1f       	adc	r21, r21
    2b0c:	f2 cf       	rjmp	.-28     	; 0x2af2 <__fp_split3+0xe>
    2b0e:	46 95       	lsr	r20
    2b10:	f1 df       	rcall	.-30     	; 0x2af4 <__fp_splitA>
    2b12:	08 c0       	rjmp	.+16     	; 0x2b24 <__fp_splitA+0x30>
    2b14:	16 16       	cp	r1, r22
    2b16:	17 06       	cpc	r1, r23
    2b18:	18 06       	cpc	r1, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	f1 cf       	rjmp	.-30     	; 0x2b00 <__fp_splitA+0xc>
    2b1e:	86 95       	lsr	r24
    2b20:	71 05       	cpc	r23, r1
    2b22:	61 05       	cpc	r22, r1
    2b24:	08 94       	sec
    2b26:	08 95       	ret

00002b28 <__fp_zero>:
    2b28:	e8 94       	clt

00002b2a <__fp_szero>:
    2b2a:	bb 27       	eor	r27, r27
    2b2c:	66 27       	eor	r22, r22
    2b2e:	77 27       	eor	r23, r23
    2b30:	cb 01       	movw	r24, r22
    2b32:	97 f9       	bld	r25, 7
    2b34:	08 95       	ret

00002b36 <__gesf2>:
    2b36:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__fp_cmp>
    2b3a:	08 f4       	brcc	.+2      	; 0x2b3e <__gesf2+0x8>
    2b3c:	8f ef       	ldi	r24, 0xFF	; 255
    2b3e:	08 95       	ret

00002b40 <__mulsf3>:
    2b40:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsf3x>
    2b44:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__fp_round>
    2b48:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__fp_pscA>
    2b4c:	38 f0       	brcs	.+14     	; 0x2b5c <__mulsf3+0x1c>
    2b4e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <__fp_pscB>
    2b52:	20 f0       	brcs	.+8      	; 0x2b5c <__mulsf3+0x1c>
    2b54:	95 23       	and	r25, r21
    2b56:	11 f0       	breq	.+4      	; 0x2b5c <__mulsf3+0x1c>
    2b58:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__fp_inf>
    2b5c:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__fp_nan>
    2b60:	11 24       	eor	r1, r1
    2b62:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__fp_szero>

00002b66 <__mulsf3x>:
    2b66:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <__fp_split3>
    2b6a:	70 f3       	brcs	.-36     	; 0x2b48 <__mulsf3+0x8>

00002b6c <__mulsf3_pse>:
    2b6c:	95 9f       	mul	r25, r21
    2b6e:	c1 f3       	breq	.-16     	; 0x2b60 <__mulsf3+0x20>
    2b70:	95 0f       	add	r25, r21
    2b72:	50 e0       	ldi	r21, 0x00	; 0
    2b74:	55 1f       	adc	r21, r21
    2b76:	62 9f       	mul	r22, r18
    2b78:	f0 01       	movw	r30, r0
    2b7a:	72 9f       	mul	r23, r18
    2b7c:	bb 27       	eor	r27, r27
    2b7e:	f0 0d       	add	r31, r0
    2b80:	b1 1d       	adc	r27, r1
    2b82:	63 9f       	mul	r22, r19
    2b84:	aa 27       	eor	r26, r26
    2b86:	f0 0d       	add	r31, r0
    2b88:	b1 1d       	adc	r27, r1
    2b8a:	aa 1f       	adc	r26, r26
    2b8c:	64 9f       	mul	r22, r20
    2b8e:	66 27       	eor	r22, r22
    2b90:	b0 0d       	add	r27, r0
    2b92:	a1 1d       	adc	r26, r1
    2b94:	66 1f       	adc	r22, r22
    2b96:	82 9f       	mul	r24, r18
    2b98:	22 27       	eor	r18, r18
    2b9a:	b0 0d       	add	r27, r0
    2b9c:	a1 1d       	adc	r26, r1
    2b9e:	62 1f       	adc	r22, r18
    2ba0:	73 9f       	mul	r23, r19
    2ba2:	b0 0d       	add	r27, r0
    2ba4:	a1 1d       	adc	r26, r1
    2ba6:	62 1f       	adc	r22, r18
    2ba8:	83 9f       	mul	r24, r19
    2baa:	a0 0d       	add	r26, r0
    2bac:	61 1d       	adc	r22, r1
    2bae:	22 1f       	adc	r18, r18
    2bb0:	74 9f       	mul	r23, r20
    2bb2:	33 27       	eor	r19, r19
    2bb4:	a0 0d       	add	r26, r0
    2bb6:	61 1d       	adc	r22, r1
    2bb8:	23 1f       	adc	r18, r19
    2bba:	84 9f       	mul	r24, r20
    2bbc:	60 0d       	add	r22, r0
    2bbe:	21 1d       	adc	r18, r1
    2bc0:	82 2f       	mov	r24, r18
    2bc2:	76 2f       	mov	r23, r22
    2bc4:	6a 2f       	mov	r22, r26
    2bc6:	11 24       	eor	r1, r1
    2bc8:	9f 57       	subi	r25, 0x7F	; 127
    2bca:	50 40       	sbci	r21, 0x00	; 0
    2bcc:	9a f0       	brmi	.+38     	; 0x2bf4 <__mulsf3_pse+0x88>
    2bce:	f1 f0       	breq	.+60     	; 0x2c0c <__mulsf3_pse+0xa0>
    2bd0:	88 23       	and	r24, r24
    2bd2:	4a f0       	brmi	.+18     	; 0x2be6 <__mulsf3_pse+0x7a>
    2bd4:	ee 0f       	add	r30, r30
    2bd6:	ff 1f       	adc	r31, r31
    2bd8:	bb 1f       	adc	r27, r27
    2bda:	66 1f       	adc	r22, r22
    2bdc:	77 1f       	adc	r23, r23
    2bde:	88 1f       	adc	r24, r24
    2be0:	91 50       	subi	r25, 0x01	; 1
    2be2:	50 40       	sbci	r21, 0x00	; 0
    2be4:	a9 f7       	brne	.-22     	; 0x2bd0 <__mulsf3_pse+0x64>
    2be6:	9e 3f       	cpi	r25, 0xFE	; 254
    2be8:	51 05       	cpc	r21, r1
    2bea:	80 f0       	brcs	.+32     	; 0x2c0c <__mulsf3_pse+0xa0>
    2bec:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__fp_inf>
    2bf0:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__fp_szero>
    2bf4:	5f 3f       	cpi	r21, 0xFF	; 255
    2bf6:	e4 f3       	brlt	.-8      	; 0x2bf0 <__mulsf3_pse+0x84>
    2bf8:	98 3e       	cpi	r25, 0xE8	; 232
    2bfa:	d4 f3       	brlt	.-12     	; 0x2bf0 <__mulsf3_pse+0x84>
    2bfc:	86 95       	lsr	r24
    2bfe:	77 95       	ror	r23
    2c00:	67 95       	ror	r22
    2c02:	b7 95       	ror	r27
    2c04:	f7 95       	ror	r31
    2c06:	e7 95       	ror	r30
    2c08:	9f 5f       	subi	r25, 0xFF	; 255
    2c0a:	c1 f7       	brne	.-16     	; 0x2bfc <__mulsf3_pse+0x90>
    2c0c:	fe 2b       	or	r31, r30
    2c0e:	88 0f       	add	r24, r24
    2c10:	91 1d       	adc	r25, r1
    2c12:	96 95       	lsr	r25
    2c14:	87 95       	ror	r24
    2c16:	97 f9       	bld	r25, 7
    2c18:	08 95       	ret

00002c1a <sprintf>:
    2c1a:	ae e0       	ldi	r26, 0x0E	; 14
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e3 e1       	ldi	r30, 0x13	; 19
    2c20:	f6 e1       	ldi	r31, 0x16	; 22
    2c22:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x1c>
    2c26:	0d 89       	ldd	r16, Y+21	; 0x15
    2c28:	1e 89       	ldd	r17, Y+22	; 0x16
    2c2a:	86 e0       	ldi	r24, 0x06	; 6
    2c2c:	8c 83       	std	Y+4, r24	; 0x04
    2c2e:	1a 83       	std	Y+2, r17	; 0x02
    2c30:	09 83       	std	Y+1, r16	; 0x01
    2c32:	8f ef       	ldi	r24, 0xFF	; 255
    2c34:	9f e7       	ldi	r25, 0x7F	; 127
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	ae 01       	movw	r20, r28
    2c3c:	47 5e       	subi	r20, 0xE7	; 231
    2c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c40:	6f 89       	ldd	r22, Y+23	; 0x17
    2c42:	78 8d       	ldd	r23, Y+24	; 0x18
    2c44:	ce 01       	movw	r24, r28
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <vfprintf>
    2c4c:	ef 81       	ldd	r30, Y+7	; 0x07
    2c4e:	f8 85       	ldd	r31, Y+8	; 0x08
    2c50:	e0 0f       	add	r30, r16
    2c52:	f1 1f       	adc	r31, r17
    2c54:	10 82       	st	Z, r1
    2c56:	2e 96       	adiw	r28, 0x0e	; 14
    2c58:	e4 e0       	ldi	r30, 0x04	; 4
    2c5a:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x1c>

00002c5e <vfprintf>:
    2c5e:	ab e0       	ldi	r26, 0x0B	; 11
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e5 e3       	ldi	r30, 0x35	; 53
    2c64:	f6 e1       	ldi	r31, 0x16	; 22
    2c66:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__prologue_saves__>
    2c6a:	6c 01       	movw	r12, r24
    2c6c:	7b 01       	movw	r14, r22
    2c6e:	8a 01       	movw	r16, r20
    2c70:	fc 01       	movw	r30, r24
    2c72:	17 82       	std	Z+7, r1	; 0x07
    2c74:	16 82       	std	Z+6, r1	; 0x06
    2c76:	83 81       	ldd	r24, Z+3	; 0x03
    2c78:	81 ff       	sbrs	r24, 1
    2c7a:	cc c1       	rjmp	.+920    	; 0x3014 <vfprintf+0x3b6>
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	01 96       	adiw	r24, 0x01	; 1
    2c80:	3c 01       	movw	r6, r24
    2c82:	f6 01       	movw	r30, r12
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	f7 01       	movw	r30, r14
    2c88:	93 fd       	sbrc	r25, 3
    2c8a:	85 91       	lpm	r24, Z+
    2c8c:	93 ff       	sbrs	r25, 3
    2c8e:	81 91       	ld	r24, Z+
    2c90:	7f 01       	movw	r14, r30
    2c92:	88 23       	and	r24, r24
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <vfprintf+0x3a>
    2c96:	ba c1       	rjmp	.+884    	; 0x300c <vfprintf+0x3ae>
    2c98:	85 32       	cpi	r24, 0x25	; 37
    2c9a:	39 f4       	brne	.+14     	; 0x2caa <vfprintf+0x4c>
    2c9c:	93 fd       	sbrc	r25, 3
    2c9e:	85 91       	lpm	r24, Z+
    2ca0:	93 ff       	sbrs	r25, 3
    2ca2:	81 91       	ld	r24, Z+
    2ca4:	7f 01       	movw	r14, r30
    2ca6:	85 32       	cpi	r24, 0x25	; 37
    2ca8:	29 f4       	brne	.+10     	; 0x2cb4 <vfprintf+0x56>
    2caa:	b6 01       	movw	r22, r12
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 26 18 	call	0x304c	; 0x304c <fputc>
    2cb2:	e7 cf       	rjmp	.-50     	; 0x2c82 <vfprintf+0x24>
    2cb4:	91 2c       	mov	r9, r1
    2cb6:	21 2c       	mov	r2, r1
    2cb8:	31 2c       	mov	r3, r1
    2cba:	ff e1       	ldi	r31, 0x1F	; 31
    2cbc:	f3 15       	cp	r31, r3
    2cbe:	d8 f0       	brcs	.+54     	; 0x2cf6 <vfprintf+0x98>
    2cc0:	8b 32       	cpi	r24, 0x2B	; 43
    2cc2:	79 f0       	breq	.+30     	; 0x2ce2 <vfprintf+0x84>
    2cc4:	38 f4       	brcc	.+14     	; 0x2cd4 <vfprintf+0x76>
    2cc6:	80 32       	cpi	r24, 0x20	; 32
    2cc8:	79 f0       	breq	.+30     	; 0x2ce8 <vfprintf+0x8a>
    2cca:	83 32       	cpi	r24, 0x23	; 35
    2ccc:	a1 f4       	brne	.+40     	; 0x2cf6 <vfprintf+0x98>
    2cce:	23 2d       	mov	r18, r3
    2cd0:	20 61       	ori	r18, 0x10	; 16
    2cd2:	1d c0       	rjmp	.+58     	; 0x2d0e <vfprintf+0xb0>
    2cd4:	8d 32       	cpi	r24, 0x2D	; 45
    2cd6:	61 f0       	breq	.+24     	; 0x2cf0 <vfprintf+0x92>
    2cd8:	80 33       	cpi	r24, 0x30	; 48
    2cda:	69 f4       	brne	.+26     	; 0x2cf6 <vfprintf+0x98>
    2cdc:	23 2d       	mov	r18, r3
    2cde:	21 60       	ori	r18, 0x01	; 1
    2ce0:	16 c0       	rjmp	.+44     	; 0x2d0e <vfprintf+0xb0>
    2ce2:	83 2d       	mov	r24, r3
    2ce4:	82 60       	ori	r24, 0x02	; 2
    2ce6:	38 2e       	mov	r3, r24
    2ce8:	e3 2d       	mov	r30, r3
    2cea:	e4 60       	ori	r30, 0x04	; 4
    2cec:	3e 2e       	mov	r3, r30
    2cee:	2a c0       	rjmp	.+84     	; 0x2d44 <vfprintf+0xe6>
    2cf0:	f3 2d       	mov	r31, r3
    2cf2:	f8 60       	ori	r31, 0x08	; 8
    2cf4:	1d c0       	rjmp	.+58     	; 0x2d30 <vfprintf+0xd2>
    2cf6:	37 fc       	sbrc	r3, 7
    2cf8:	2d c0       	rjmp	.+90     	; 0x2d54 <vfprintf+0xf6>
    2cfa:	20 ed       	ldi	r18, 0xD0	; 208
    2cfc:	28 0f       	add	r18, r24
    2cfe:	2a 30       	cpi	r18, 0x0A	; 10
    2d00:	40 f0       	brcs	.+16     	; 0x2d12 <vfprintf+0xb4>
    2d02:	8e 32       	cpi	r24, 0x2E	; 46
    2d04:	b9 f4       	brne	.+46     	; 0x2d34 <vfprintf+0xd6>
    2d06:	36 fc       	sbrc	r3, 6
    2d08:	81 c1       	rjmp	.+770    	; 0x300c <vfprintf+0x3ae>
    2d0a:	23 2d       	mov	r18, r3
    2d0c:	20 64       	ori	r18, 0x40	; 64
    2d0e:	32 2e       	mov	r3, r18
    2d10:	19 c0       	rjmp	.+50     	; 0x2d44 <vfprintf+0xe6>
    2d12:	36 fe       	sbrs	r3, 6
    2d14:	06 c0       	rjmp	.+12     	; 0x2d22 <vfprintf+0xc4>
    2d16:	8a e0       	ldi	r24, 0x0A	; 10
    2d18:	98 9e       	mul	r9, r24
    2d1a:	20 0d       	add	r18, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	92 2e       	mov	r9, r18
    2d20:	11 c0       	rjmp	.+34     	; 0x2d44 <vfprintf+0xe6>
    2d22:	ea e0       	ldi	r30, 0x0A	; 10
    2d24:	2e 9e       	mul	r2, r30
    2d26:	20 0d       	add	r18, r0
    2d28:	11 24       	eor	r1, r1
    2d2a:	22 2e       	mov	r2, r18
    2d2c:	f3 2d       	mov	r31, r3
    2d2e:	f0 62       	ori	r31, 0x20	; 32
    2d30:	3f 2e       	mov	r3, r31
    2d32:	08 c0       	rjmp	.+16     	; 0x2d44 <vfprintf+0xe6>
    2d34:	8c 36       	cpi	r24, 0x6C	; 108
    2d36:	21 f4       	brne	.+8      	; 0x2d40 <vfprintf+0xe2>
    2d38:	83 2d       	mov	r24, r3
    2d3a:	80 68       	ori	r24, 0x80	; 128
    2d3c:	38 2e       	mov	r3, r24
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <vfprintf+0xe6>
    2d40:	88 36       	cpi	r24, 0x68	; 104
    2d42:	41 f4       	brne	.+16     	; 0x2d54 <vfprintf+0xf6>
    2d44:	f7 01       	movw	r30, r14
    2d46:	93 fd       	sbrc	r25, 3
    2d48:	85 91       	lpm	r24, Z+
    2d4a:	93 ff       	sbrs	r25, 3
    2d4c:	81 91       	ld	r24, Z+
    2d4e:	7f 01       	movw	r14, r30
    2d50:	81 11       	cpse	r24, r1
    2d52:	b3 cf       	rjmp	.-154    	; 0x2cba <vfprintf+0x5c>
    2d54:	98 2f       	mov	r25, r24
    2d56:	9f 7d       	andi	r25, 0xDF	; 223
    2d58:	95 54       	subi	r25, 0x45	; 69
    2d5a:	93 30       	cpi	r25, 0x03	; 3
    2d5c:	28 f4       	brcc	.+10     	; 0x2d68 <vfprintf+0x10a>
    2d5e:	0c 5f       	subi	r16, 0xFC	; 252
    2d60:	1f 4f       	sbci	r17, 0xFF	; 255
    2d62:	9f e3       	ldi	r25, 0x3F	; 63
    2d64:	99 83       	std	Y+1, r25	; 0x01
    2d66:	0d c0       	rjmp	.+26     	; 0x2d82 <vfprintf+0x124>
    2d68:	83 36       	cpi	r24, 0x63	; 99
    2d6a:	31 f0       	breq	.+12     	; 0x2d78 <vfprintf+0x11a>
    2d6c:	83 37       	cpi	r24, 0x73	; 115
    2d6e:	71 f0       	breq	.+28     	; 0x2d8c <vfprintf+0x12e>
    2d70:	83 35       	cpi	r24, 0x53	; 83
    2d72:	09 f0       	breq	.+2      	; 0x2d76 <vfprintf+0x118>
    2d74:	59 c0       	rjmp	.+178    	; 0x2e28 <vfprintf+0x1ca>
    2d76:	21 c0       	rjmp	.+66     	; 0x2dba <vfprintf+0x15c>
    2d78:	f8 01       	movw	r30, r16
    2d7a:	80 81       	ld	r24, Z
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	0e 5f       	subi	r16, 0xFE	; 254
    2d80:	1f 4f       	sbci	r17, 0xFF	; 255
    2d82:	88 24       	eor	r8, r8
    2d84:	83 94       	inc	r8
    2d86:	91 2c       	mov	r9, r1
    2d88:	53 01       	movw	r10, r6
    2d8a:	13 c0       	rjmp	.+38     	; 0x2db2 <vfprintf+0x154>
    2d8c:	28 01       	movw	r4, r16
    2d8e:	f2 e0       	ldi	r31, 0x02	; 2
    2d90:	4f 0e       	add	r4, r31
    2d92:	51 1c       	adc	r5, r1
    2d94:	f8 01       	movw	r30, r16
    2d96:	a0 80       	ld	r10, Z
    2d98:	b1 80       	ldd	r11, Z+1	; 0x01
    2d9a:	36 fe       	sbrs	r3, 6
    2d9c:	03 c0       	rjmp	.+6      	; 0x2da4 <vfprintf+0x146>
    2d9e:	69 2d       	mov	r22, r9
    2da0:	70 e0       	ldi	r23, 0x00	; 0
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <vfprintf+0x14a>
    2da4:	6f ef       	ldi	r22, 0xFF	; 255
    2da6:	7f ef       	ldi	r23, 0xFF	; 255
    2da8:	c5 01       	movw	r24, r10
    2daa:	0e 94 1b 18 	call	0x3036	; 0x3036 <strnlen>
    2dae:	4c 01       	movw	r8, r24
    2db0:	82 01       	movw	r16, r4
    2db2:	f3 2d       	mov	r31, r3
    2db4:	ff 77       	andi	r31, 0x7F	; 127
    2db6:	3f 2e       	mov	r3, r31
    2db8:	16 c0       	rjmp	.+44     	; 0x2de6 <vfprintf+0x188>
    2dba:	28 01       	movw	r4, r16
    2dbc:	22 e0       	ldi	r18, 0x02	; 2
    2dbe:	42 0e       	add	r4, r18
    2dc0:	51 1c       	adc	r5, r1
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	a0 80       	ld	r10, Z
    2dc6:	b1 80       	ldd	r11, Z+1	; 0x01
    2dc8:	36 fe       	sbrs	r3, 6
    2dca:	03 c0       	rjmp	.+6      	; 0x2dd2 <vfprintf+0x174>
    2dcc:	69 2d       	mov	r22, r9
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <vfprintf+0x178>
    2dd2:	6f ef       	ldi	r22, 0xFF	; 255
    2dd4:	7f ef       	ldi	r23, 0xFF	; 255
    2dd6:	c5 01       	movw	r24, r10
    2dd8:	0e 94 10 18 	call	0x3020	; 0x3020 <strnlen_P>
    2ddc:	4c 01       	movw	r8, r24
    2dde:	f3 2d       	mov	r31, r3
    2de0:	f0 68       	ori	r31, 0x80	; 128
    2de2:	3f 2e       	mov	r3, r31
    2de4:	82 01       	movw	r16, r4
    2de6:	33 fc       	sbrc	r3, 3
    2de8:	1b c0       	rjmp	.+54     	; 0x2e20 <vfprintf+0x1c2>
    2dea:	82 2d       	mov	r24, r2
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	88 16       	cp	r8, r24
    2df0:	99 06       	cpc	r9, r25
    2df2:	b0 f4       	brcc	.+44     	; 0x2e20 <vfprintf+0x1c2>
    2df4:	b6 01       	movw	r22, r12
    2df6:	80 e2       	ldi	r24, 0x20	; 32
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	0e 94 26 18 	call	0x304c	; 0x304c <fputc>
    2dfe:	2a 94       	dec	r2
    2e00:	f4 cf       	rjmp	.-24     	; 0x2dea <vfprintf+0x18c>
    2e02:	f5 01       	movw	r30, r10
    2e04:	37 fc       	sbrc	r3, 7
    2e06:	85 91       	lpm	r24, Z+
    2e08:	37 fe       	sbrs	r3, 7
    2e0a:	81 91       	ld	r24, Z+
    2e0c:	5f 01       	movw	r10, r30
    2e0e:	b6 01       	movw	r22, r12
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 26 18 	call	0x304c	; 0x304c <fputc>
    2e16:	21 10       	cpse	r2, r1
    2e18:	2a 94       	dec	r2
    2e1a:	21 e0       	ldi	r18, 0x01	; 1
    2e1c:	82 1a       	sub	r8, r18
    2e1e:	91 08       	sbc	r9, r1
    2e20:	81 14       	cp	r8, r1
    2e22:	91 04       	cpc	r9, r1
    2e24:	71 f7       	brne	.-36     	; 0x2e02 <vfprintf+0x1a4>
    2e26:	e8 c0       	rjmp	.+464    	; 0x2ff8 <vfprintf+0x39a>
    2e28:	84 36       	cpi	r24, 0x64	; 100
    2e2a:	11 f0       	breq	.+4      	; 0x2e30 <vfprintf+0x1d2>
    2e2c:	89 36       	cpi	r24, 0x69	; 105
    2e2e:	41 f5       	brne	.+80     	; 0x2e80 <vfprintf+0x222>
    2e30:	f8 01       	movw	r30, r16
    2e32:	37 fe       	sbrs	r3, 7
    2e34:	07 c0       	rjmp	.+14     	; 0x2e44 <vfprintf+0x1e6>
    2e36:	60 81       	ld	r22, Z
    2e38:	71 81       	ldd	r23, Z+1	; 0x01
    2e3a:	82 81       	ldd	r24, Z+2	; 0x02
    2e3c:	93 81       	ldd	r25, Z+3	; 0x03
    2e3e:	0c 5f       	subi	r16, 0xFC	; 252
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	08 c0       	rjmp	.+16     	; 0x2e54 <vfprintf+0x1f6>
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	07 2e       	mov	r0, r23
    2e4a:	00 0c       	add	r0, r0
    2e4c:	88 0b       	sbc	r24, r24
    2e4e:	99 0b       	sbc	r25, r25
    2e50:	0e 5f       	subi	r16, 0xFE	; 254
    2e52:	1f 4f       	sbci	r17, 0xFF	; 255
    2e54:	f3 2d       	mov	r31, r3
    2e56:	ff 76       	andi	r31, 0x6F	; 111
    2e58:	3f 2e       	mov	r3, r31
    2e5a:	97 ff       	sbrs	r25, 7
    2e5c:	09 c0       	rjmp	.+18     	; 0x2e70 <vfprintf+0x212>
    2e5e:	90 95       	com	r25
    2e60:	80 95       	com	r24
    2e62:	70 95       	com	r23
    2e64:	61 95       	neg	r22
    2e66:	7f 4f       	sbci	r23, 0xFF	; 255
    2e68:	8f 4f       	sbci	r24, 0xFF	; 255
    2e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6c:	f0 68       	ori	r31, 0x80	; 128
    2e6e:	3f 2e       	mov	r3, r31
    2e70:	2a e0       	ldi	r18, 0x0A	; 10
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	a3 01       	movw	r20, r6
    2e76:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__ultoa_invert>
    2e7a:	88 2e       	mov	r8, r24
    2e7c:	86 18       	sub	r8, r6
    2e7e:	45 c0       	rjmp	.+138    	; 0x2f0a <vfprintf+0x2ac>
    2e80:	85 37       	cpi	r24, 0x75	; 117
    2e82:	31 f4       	brne	.+12     	; 0x2e90 <vfprintf+0x232>
    2e84:	23 2d       	mov	r18, r3
    2e86:	2f 7e       	andi	r18, 0xEF	; 239
    2e88:	b2 2e       	mov	r11, r18
    2e8a:	2a e0       	ldi	r18, 0x0A	; 10
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	25 c0       	rjmp	.+74     	; 0x2eda <vfprintf+0x27c>
    2e90:	93 2d       	mov	r25, r3
    2e92:	99 7f       	andi	r25, 0xF9	; 249
    2e94:	b9 2e       	mov	r11, r25
    2e96:	8f 36       	cpi	r24, 0x6F	; 111
    2e98:	c1 f0       	breq	.+48     	; 0x2eca <vfprintf+0x26c>
    2e9a:	18 f4       	brcc	.+6      	; 0x2ea2 <vfprintf+0x244>
    2e9c:	88 35       	cpi	r24, 0x58	; 88
    2e9e:	79 f0       	breq	.+30     	; 0x2ebe <vfprintf+0x260>
    2ea0:	b5 c0       	rjmp	.+362    	; 0x300c <vfprintf+0x3ae>
    2ea2:	80 37       	cpi	r24, 0x70	; 112
    2ea4:	19 f0       	breq	.+6      	; 0x2eac <vfprintf+0x24e>
    2ea6:	88 37       	cpi	r24, 0x78	; 120
    2ea8:	21 f0       	breq	.+8      	; 0x2eb2 <vfprintf+0x254>
    2eaa:	b0 c0       	rjmp	.+352    	; 0x300c <vfprintf+0x3ae>
    2eac:	e9 2f       	mov	r30, r25
    2eae:	e0 61       	ori	r30, 0x10	; 16
    2eb0:	be 2e       	mov	r11, r30
    2eb2:	b4 fe       	sbrs	r11, 4
    2eb4:	0d c0       	rjmp	.+26     	; 0x2ed0 <vfprintf+0x272>
    2eb6:	fb 2d       	mov	r31, r11
    2eb8:	f4 60       	ori	r31, 0x04	; 4
    2eba:	bf 2e       	mov	r11, r31
    2ebc:	09 c0       	rjmp	.+18     	; 0x2ed0 <vfprintf+0x272>
    2ebe:	34 fe       	sbrs	r3, 4
    2ec0:	0a c0       	rjmp	.+20     	; 0x2ed6 <vfprintf+0x278>
    2ec2:	29 2f       	mov	r18, r25
    2ec4:	26 60       	ori	r18, 0x06	; 6
    2ec6:	b2 2e       	mov	r11, r18
    2ec8:	06 c0       	rjmp	.+12     	; 0x2ed6 <vfprintf+0x278>
    2eca:	28 e0       	ldi	r18, 0x08	; 8
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	05 c0       	rjmp	.+10     	; 0x2eda <vfprintf+0x27c>
    2ed0:	20 e1       	ldi	r18, 0x10	; 16
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <vfprintf+0x27c>
    2ed6:	20 e1       	ldi	r18, 0x10	; 16
    2ed8:	32 e0       	ldi	r19, 0x02	; 2
    2eda:	f8 01       	movw	r30, r16
    2edc:	b7 fe       	sbrs	r11, 7
    2ede:	07 c0       	rjmp	.+14     	; 0x2eee <vfprintf+0x290>
    2ee0:	60 81       	ld	r22, Z
    2ee2:	71 81       	ldd	r23, Z+1	; 0x01
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	0c 5f       	subi	r16, 0xFC	; 252
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	06 c0       	rjmp	.+12     	; 0x2efa <vfprintf+0x29c>
    2eee:	60 81       	ld	r22, Z
    2ef0:	71 81       	ldd	r23, Z+1	; 0x01
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0e 5f       	subi	r16, 0xFE	; 254
    2ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    2efa:	a3 01       	movw	r20, r6
    2efc:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__ultoa_invert>
    2f00:	88 2e       	mov	r8, r24
    2f02:	86 18       	sub	r8, r6
    2f04:	fb 2d       	mov	r31, r11
    2f06:	ff 77       	andi	r31, 0x7F	; 127
    2f08:	3f 2e       	mov	r3, r31
    2f0a:	36 fe       	sbrs	r3, 6
    2f0c:	0d c0       	rjmp	.+26     	; 0x2f28 <vfprintf+0x2ca>
    2f0e:	23 2d       	mov	r18, r3
    2f10:	2e 7f       	andi	r18, 0xFE	; 254
    2f12:	a2 2e       	mov	r10, r18
    2f14:	89 14       	cp	r8, r9
    2f16:	58 f4       	brcc	.+22     	; 0x2f2e <vfprintf+0x2d0>
    2f18:	34 fe       	sbrs	r3, 4
    2f1a:	0b c0       	rjmp	.+22     	; 0x2f32 <vfprintf+0x2d4>
    2f1c:	32 fc       	sbrc	r3, 2
    2f1e:	09 c0       	rjmp	.+18     	; 0x2f32 <vfprintf+0x2d4>
    2f20:	83 2d       	mov	r24, r3
    2f22:	8e 7e       	andi	r24, 0xEE	; 238
    2f24:	a8 2e       	mov	r10, r24
    2f26:	05 c0       	rjmp	.+10     	; 0x2f32 <vfprintf+0x2d4>
    2f28:	b8 2c       	mov	r11, r8
    2f2a:	a3 2c       	mov	r10, r3
    2f2c:	03 c0       	rjmp	.+6      	; 0x2f34 <vfprintf+0x2d6>
    2f2e:	b8 2c       	mov	r11, r8
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <vfprintf+0x2d6>
    2f32:	b9 2c       	mov	r11, r9
    2f34:	a4 fe       	sbrs	r10, 4
    2f36:	0f c0       	rjmp	.+30     	; 0x2f56 <vfprintf+0x2f8>
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e8 0d       	add	r30, r8
    2f3c:	f1 1d       	adc	r31, r1
    2f3e:	80 81       	ld	r24, Z
    2f40:	80 33       	cpi	r24, 0x30	; 48
    2f42:	21 f4       	brne	.+8      	; 0x2f4c <vfprintf+0x2ee>
    2f44:	9a 2d       	mov	r25, r10
    2f46:	99 7e       	andi	r25, 0xE9	; 233
    2f48:	a9 2e       	mov	r10, r25
    2f4a:	09 c0       	rjmp	.+18     	; 0x2f5e <vfprintf+0x300>
    2f4c:	a2 fe       	sbrs	r10, 2
    2f4e:	06 c0       	rjmp	.+12     	; 0x2f5c <vfprintf+0x2fe>
    2f50:	b3 94       	inc	r11
    2f52:	b3 94       	inc	r11
    2f54:	04 c0       	rjmp	.+8      	; 0x2f5e <vfprintf+0x300>
    2f56:	8a 2d       	mov	r24, r10
    2f58:	86 78       	andi	r24, 0x86	; 134
    2f5a:	09 f0       	breq	.+2      	; 0x2f5e <vfprintf+0x300>
    2f5c:	b3 94       	inc	r11
    2f5e:	a3 fc       	sbrc	r10, 3
    2f60:	11 c0       	rjmp	.+34     	; 0x2f84 <vfprintf+0x326>
    2f62:	a0 fe       	sbrs	r10, 0
    2f64:	06 c0       	rjmp	.+12     	; 0x2f72 <vfprintf+0x314>
    2f66:	b2 14       	cp	r11, r2
    2f68:	88 f4       	brcc	.+34     	; 0x2f8c <vfprintf+0x32e>
    2f6a:	28 0c       	add	r2, r8
    2f6c:	92 2c       	mov	r9, r2
    2f6e:	9b 18       	sub	r9, r11
    2f70:	0e c0       	rjmp	.+28     	; 0x2f8e <vfprintf+0x330>
    2f72:	b2 14       	cp	r11, r2
    2f74:	60 f4       	brcc	.+24     	; 0x2f8e <vfprintf+0x330>
    2f76:	b6 01       	movw	r22, r12
    2f78:	80 e2       	ldi	r24, 0x20	; 32
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	0e 94 26 18 	call	0x304c	; 0x304c <fputc>
    2f80:	b3 94       	inc	r11
    2f82:	f7 cf       	rjmp	.-18     	; 0x2f72 <vfprintf+0x314>
    2f84:	b2 14       	cp	r11, r2
    2f86:	18 f4       	brcc	.+6      	; 0x2f8e <vfprintf+0x330>
    2f88:	2b 18       	sub	r2, r11
    2f8a:	02 c0       	rjmp	.+4      	; 0x2f90 <vfprintf+0x332>
    2f8c:	98 2c       	mov	r9, r8
    2f8e:	21 2c       	mov	r2, r1
    2f90:	a4 fe       	sbrs	r10, 4
    2f92:	10 c0       	rjmp	.+32     	; 0x2fb4 <vfprintf+0x356>
    2f94:	b6 01       	movw	r22, r12
    2f96:	80 e3       	ldi	r24, 0x30	; 48
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 26 18 	call	0x304c	; 0x304c <fputc>
    2f9e:	a2 fe       	sbrs	r10, 2
    2fa0:	17 c0       	rjmp	.+46     	; 0x2fd0 <vfprintf+0x372>
    2fa2:	a1 fc       	sbrc	r10, 1
    2fa4:	03 c0       	rjmp	.+6      	; 0x2fac <vfprintf+0x34e>
    2fa6:	88 e7       	ldi	r24, 0x78	; 120
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <vfprintf+0x352>
    2fac:	88 e5       	ldi	r24, 0x58	; 88
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	b6 01       	movw	r22, r12
    2fb2:	0c c0       	rjmp	.+24     	; 0x2fcc <vfprintf+0x36e>
    2fb4:	8a 2d       	mov	r24, r10
    2fb6:	86 78       	andi	r24, 0x86	; 134
    2fb8:	59 f0       	breq	.+22     	; 0x2fd0 <vfprintf+0x372>
    2fba:	a1 fe       	sbrs	r10, 1
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <vfprintf+0x364>
    2fbe:	8b e2       	ldi	r24, 0x2B	; 43
    2fc0:	01 c0       	rjmp	.+2      	; 0x2fc4 <vfprintf+0x366>
    2fc2:	80 e2       	ldi	r24, 0x20	; 32
    2fc4:	a7 fc       	sbrc	r10, 7
    2fc6:	8d e2       	ldi	r24, 0x2D	; 45
    2fc8:	b6 01       	movw	r22, r12
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	0e 94 26 18 	call	0x304c	; 0x304c <fputc>
    2fd0:	89 14       	cp	r8, r9
    2fd2:	38 f4       	brcc	.+14     	; 0x2fe2 <vfprintf+0x384>
    2fd4:	b6 01       	movw	r22, r12
    2fd6:	80 e3       	ldi	r24, 0x30	; 48
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	0e 94 26 18 	call	0x304c	; 0x304c <fputc>
    2fde:	9a 94       	dec	r9
    2fe0:	f7 cf       	rjmp	.-18     	; 0x2fd0 <vfprintf+0x372>
    2fe2:	8a 94       	dec	r8
    2fe4:	f3 01       	movw	r30, r6
    2fe6:	e8 0d       	add	r30, r8
    2fe8:	f1 1d       	adc	r31, r1
    2fea:	80 81       	ld	r24, Z
    2fec:	b6 01       	movw	r22, r12
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	0e 94 26 18 	call	0x304c	; 0x304c <fputc>
    2ff4:	81 10       	cpse	r8, r1
    2ff6:	f5 cf       	rjmp	.-22     	; 0x2fe2 <vfprintf+0x384>
    2ff8:	22 20       	and	r2, r2
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <vfprintf+0x3a0>
    2ffc:	42 ce       	rjmp	.-892    	; 0x2c82 <vfprintf+0x24>
    2ffe:	b6 01       	movw	r22, r12
    3000:	80 e2       	ldi	r24, 0x20	; 32
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	0e 94 26 18 	call	0x304c	; 0x304c <fputc>
    3008:	2a 94       	dec	r2
    300a:	f6 cf       	rjmp	.-20     	; 0x2ff8 <vfprintf+0x39a>
    300c:	f6 01       	movw	r30, r12
    300e:	86 81       	ldd	r24, Z+6	; 0x06
    3010:	97 81       	ldd	r25, Z+7	; 0x07
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <vfprintf+0x3ba>
    3014:	8f ef       	ldi	r24, 0xFF	; 255
    3016:	9f ef       	ldi	r25, 0xFF	; 255
    3018:	2b 96       	adiw	r28, 0x0b	; 11
    301a:	e2 e1       	ldi	r30, 0x12	; 18
    301c:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__epilogue_restores__>

00003020 <strnlen_P>:
    3020:	fc 01       	movw	r30, r24
    3022:	05 90       	lpm	r0, Z+
    3024:	61 50       	subi	r22, 0x01	; 1
    3026:	70 40       	sbci	r23, 0x00	; 0
    3028:	01 10       	cpse	r0, r1
    302a:	d8 f7       	brcc	.-10     	; 0x3022 <strnlen_P+0x2>
    302c:	80 95       	com	r24
    302e:	90 95       	com	r25
    3030:	8e 0f       	add	r24, r30
    3032:	9f 1f       	adc	r25, r31
    3034:	08 95       	ret

00003036 <strnlen>:
    3036:	fc 01       	movw	r30, r24
    3038:	61 50       	subi	r22, 0x01	; 1
    303a:	70 40       	sbci	r23, 0x00	; 0
    303c:	01 90       	ld	r0, Z+
    303e:	01 10       	cpse	r0, r1
    3040:	d8 f7       	brcc	.-10     	; 0x3038 <strnlen+0x2>
    3042:	80 95       	com	r24
    3044:	90 95       	com	r25
    3046:	8e 0f       	add	r24, r30
    3048:	9f 1f       	adc	r25, r31
    304a:	08 95       	ret

0000304c <fputc>:
    304c:	0f 93       	push	r16
    304e:	1f 93       	push	r17
    3050:	cf 93       	push	r28
    3052:	df 93       	push	r29
    3054:	fb 01       	movw	r30, r22
    3056:	23 81       	ldd	r18, Z+3	; 0x03
    3058:	21 fd       	sbrc	r18, 1
    305a:	03 c0       	rjmp	.+6      	; 0x3062 <fputc+0x16>
    305c:	8f ef       	ldi	r24, 0xFF	; 255
    305e:	9f ef       	ldi	r25, 0xFF	; 255
    3060:	2c c0       	rjmp	.+88     	; 0x30ba <fputc+0x6e>
    3062:	22 ff       	sbrs	r18, 2
    3064:	16 c0       	rjmp	.+44     	; 0x3092 <fputc+0x46>
    3066:	46 81       	ldd	r20, Z+6	; 0x06
    3068:	57 81       	ldd	r21, Z+7	; 0x07
    306a:	24 81       	ldd	r18, Z+4	; 0x04
    306c:	35 81       	ldd	r19, Z+5	; 0x05
    306e:	42 17       	cp	r20, r18
    3070:	53 07       	cpc	r21, r19
    3072:	44 f4       	brge	.+16     	; 0x3084 <fputc+0x38>
    3074:	a0 81       	ld	r26, Z
    3076:	b1 81       	ldd	r27, Z+1	; 0x01
    3078:	9d 01       	movw	r18, r26
    307a:	2f 5f       	subi	r18, 0xFF	; 255
    307c:	3f 4f       	sbci	r19, 0xFF	; 255
    307e:	31 83       	std	Z+1, r19	; 0x01
    3080:	20 83       	st	Z, r18
    3082:	8c 93       	st	X, r24
    3084:	26 81       	ldd	r18, Z+6	; 0x06
    3086:	37 81       	ldd	r19, Z+7	; 0x07
    3088:	2f 5f       	subi	r18, 0xFF	; 255
    308a:	3f 4f       	sbci	r19, 0xFF	; 255
    308c:	37 83       	std	Z+7, r19	; 0x07
    308e:	26 83       	std	Z+6, r18	; 0x06
    3090:	14 c0       	rjmp	.+40     	; 0x30ba <fputc+0x6e>
    3092:	8b 01       	movw	r16, r22
    3094:	ec 01       	movw	r28, r24
    3096:	fb 01       	movw	r30, r22
    3098:	00 84       	ldd	r0, Z+8	; 0x08
    309a:	f1 85       	ldd	r31, Z+9	; 0x09
    309c:	e0 2d       	mov	r30, r0
    309e:	09 95       	icall
    30a0:	89 2b       	or	r24, r25
    30a2:	e1 f6       	brne	.-72     	; 0x305c <fputc+0x10>
    30a4:	d8 01       	movw	r26, r16
    30a6:	16 96       	adiw	r26, 0x06	; 6
    30a8:	8d 91       	ld	r24, X+
    30aa:	9c 91       	ld	r25, X
    30ac:	17 97       	sbiw	r26, 0x07	; 7
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	17 96       	adiw	r26, 0x07	; 7
    30b2:	9c 93       	st	X, r25
    30b4:	8e 93       	st	-X, r24
    30b6:	16 97       	sbiw	r26, 0x06	; 6
    30b8:	ce 01       	movw	r24, r28
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	08 95       	ret

000030c4 <__ultoa_invert>:
    30c4:	fa 01       	movw	r30, r20
    30c6:	aa 27       	eor	r26, r26
    30c8:	28 30       	cpi	r18, 0x08	; 8
    30ca:	51 f1       	breq	.+84     	; 0x3120 <__ultoa_invert+0x5c>
    30cc:	20 31       	cpi	r18, 0x10	; 16
    30ce:	81 f1       	breq	.+96     	; 0x3130 <__ultoa_invert+0x6c>
    30d0:	e8 94       	clt
    30d2:	6f 93       	push	r22
    30d4:	6e 7f       	andi	r22, 0xFE	; 254
    30d6:	6e 5f       	subi	r22, 0xFE	; 254
    30d8:	7f 4f       	sbci	r23, 0xFF	; 255
    30da:	8f 4f       	sbci	r24, 0xFF	; 255
    30dc:	9f 4f       	sbci	r25, 0xFF	; 255
    30de:	af 4f       	sbci	r26, 0xFF	; 255
    30e0:	b1 e0       	ldi	r27, 0x01	; 1
    30e2:	3e d0       	rcall	.+124    	; 0x3160 <__ultoa_invert+0x9c>
    30e4:	b4 e0       	ldi	r27, 0x04	; 4
    30e6:	3c d0       	rcall	.+120    	; 0x3160 <__ultoa_invert+0x9c>
    30e8:	67 0f       	add	r22, r23
    30ea:	78 1f       	adc	r23, r24
    30ec:	89 1f       	adc	r24, r25
    30ee:	9a 1f       	adc	r25, r26
    30f0:	a1 1d       	adc	r26, r1
    30f2:	68 0f       	add	r22, r24
    30f4:	79 1f       	adc	r23, r25
    30f6:	8a 1f       	adc	r24, r26
    30f8:	91 1d       	adc	r25, r1
    30fa:	a1 1d       	adc	r26, r1
    30fc:	6a 0f       	add	r22, r26
    30fe:	71 1d       	adc	r23, r1
    3100:	81 1d       	adc	r24, r1
    3102:	91 1d       	adc	r25, r1
    3104:	a1 1d       	adc	r26, r1
    3106:	20 d0       	rcall	.+64     	; 0x3148 <__ultoa_invert+0x84>
    3108:	09 f4       	brne	.+2      	; 0x310c <__ultoa_invert+0x48>
    310a:	68 94       	set
    310c:	3f 91       	pop	r19
    310e:	2a e0       	ldi	r18, 0x0A	; 10
    3110:	26 9f       	mul	r18, r22
    3112:	11 24       	eor	r1, r1
    3114:	30 19       	sub	r19, r0
    3116:	30 5d       	subi	r19, 0xD0	; 208
    3118:	31 93       	st	Z+, r19
    311a:	de f6       	brtc	.-74     	; 0x30d2 <__ultoa_invert+0xe>
    311c:	cf 01       	movw	r24, r30
    311e:	08 95       	ret
    3120:	46 2f       	mov	r20, r22
    3122:	47 70       	andi	r20, 0x07	; 7
    3124:	40 5d       	subi	r20, 0xD0	; 208
    3126:	41 93       	st	Z+, r20
    3128:	b3 e0       	ldi	r27, 0x03	; 3
    312a:	0f d0       	rcall	.+30     	; 0x314a <__ultoa_invert+0x86>
    312c:	c9 f7       	brne	.-14     	; 0x3120 <__ultoa_invert+0x5c>
    312e:	f6 cf       	rjmp	.-20     	; 0x311c <__ultoa_invert+0x58>
    3130:	46 2f       	mov	r20, r22
    3132:	4f 70       	andi	r20, 0x0F	; 15
    3134:	40 5d       	subi	r20, 0xD0	; 208
    3136:	4a 33       	cpi	r20, 0x3A	; 58
    3138:	18 f0       	brcs	.+6      	; 0x3140 <__ultoa_invert+0x7c>
    313a:	49 5d       	subi	r20, 0xD9	; 217
    313c:	31 fd       	sbrc	r19, 1
    313e:	40 52       	subi	r20, 0x20	; 32
    3140:	41 93       	st	Z+, r20
    3142:	02 d0       	rcall	.+4      	; 0x3148 <__ultoa_invert+0x84>
    3144:	a9 f7       	brne	.-22     	; 0x3130 <__ultoa_invert+0x6c>
    3146:	ea cf       	rjmp	.-44     	; 0x311c <__ultoa_invert+0x58>
    3148:	b4 e0       	ldi	r27, 0x04	; 4
    314a:	a6 95       	lsr	r26
    314c:	97 95       	ror	r25
    314e:	87 95       	ror	r24
    3150:	77 95       	ror	r23
    3152:	67 95       	ror	r22
    3154:	ba 95       	dec	r27
    3156:	c9 f7       	brne	.-14     	; 0x314a <__ultoa_invert+0x86>
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	61 05       	cpc	r22, r1
    315c:	71 05       	cpc	r23, r1
    315e:	08 95       	ret
    3160:	9b 01       	movw	r18, r22
    3162:	ac 01       	movw	r20, r24
    3164:	0a 2e       	mov	r0, r26
    3166:	06 94       	lsr	r0
    3168:	57 95       	ror	r21
    316a:	47 95       	ror	r20
    316c:	37 95       	ror	r19
    316e:	27 95       	ror	r18
    3170:	ba 95       	dec	r27
    3172:	c9 f7       	brne	.-14     	; 0x3166 <__ultoa_invert+0xa2>
    3174:	62 0f       	add	r22, r18
    3176:	73 1f       	adc	r23, r19
    3178:	84 1f       	adc	r24, r20
    317a:	95 1f       	adc	r25, r21
    317c:	a0 1d       	adc	r26, r0
    317e:	08 95       	ret

00003180 <__prologue_saves__>:
    3180:	2f 92       	push	r2
    3182:	3f 92       	push	r3
    3184:	4f 92       	push	r4
    3186:	5f 92       	push	r5
    3188:	6f 92       	push	r6
    318a:	7f 92       	push	r7
    318c:	8f 92       	push	r8
    318e:	9f 92       	push	r9
    3190:	af 92       	push	r10
    3192:	bf 92       	push	r11
    3194:	cf 92       	push	r12
    3196:	df 92       	push	r13
    3198:	ef 92       	push	r14
    319a:	ff 92       	push	r15
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	ca 1b       	sub	r28, r26
    31aa:	db 0b       	sbc	r29, r27
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
    31b6:	09 94       	ijmp

000031b8 <__epilogue_restores__>:
    31b8:	2a 88       	ldd	r2, Y+18	; 0x12
    31ba:	39 88       	ldd	r3, Y+17	; 0x11
    31bc:	48 88       	ldd	r4, Y+16	; 0x10
    31be:	5f 84       	ldd	r5, Y+15	; 0x0f
    31c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    31c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    31c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    31c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    31c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    31ca:	b9 84       	ldd	r11, Y+9	; 0x09
    31cc:	c8 84       	ldd	r12, Y+8	; 0x08
    31ce:	df 80       	ldd	r13, Y+7	; 0x07
    31d0:	ee 80       	ldd	r14, Y+6	; 0x06
    31d2:	fd 80       	ldd	r15, Y+5	; 0x05
    31d4:	0c 81       	ldd	r16, Y+4	; 0x04
    31d6:	1b 81       	ldd	r17, Y+3	; 0x03
    31d8:	aa 81       	ldd	r26, Y+2	; 0x02
    31da:	b9 81       	ldd	r27, Y+1	; 0x01
    31dc:	ce 0f       	add	r28, r30
    31de:	d1 1d       	adc	r29, r1
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	f8 94       	cli
    31e4:	de bf       	out	0x3e, r29	; 62
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	cd bf       	out	0x3d, r28	; 61
    31ea:	ed 01       	movw	r28, r26
    31ec:	08 95       	ret

000031ee <_exit>:
    31ee:	f8 94       	cli

000031f0 <__stop_program>:
    31f0:	ff cf       	rjmp	.-2      	; 0x31f0 <__stop_program>
